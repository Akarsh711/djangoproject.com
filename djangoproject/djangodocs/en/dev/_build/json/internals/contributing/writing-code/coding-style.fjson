{"parents": [{"link": "../../../", "title": "Django internals"}, {"link": "../../", "title": "Contributing to Django"}, {"link": "../", "title": "Writing code"}], "prev": {"link": "../", "title": "Writing code"}, "next": {"link": "../unit-tests/", "title": "Unit tests"}, "title": "Coding style", "meta": {}, "body": "<div class=\"section\" id=\"s-coding-style\">\n<span id=\"coding-style\"></span><h1>Coding style<a class=\"headerlink\" href=\"#coding-style\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Please follow these coding standards when writing code for inclusion in Django.</p>\n<div class=\"section\" id=\"s-pre-commit-checks\">\n<span id=\"s-coding-style-pre-commit\"></span><span id=\"pre-commit-checks\"></span><span id=\"coding-style-pre-commit\"></span><h2>Pre-commit checks<a class=\"headerlink\" href=\"#pre-commit-checks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference external\" href=\"https://pre-commit.com\">pre-commit</a> is a framework for managing pre-commit\nhooks. These hooks help to identify simple issues before committing code for\nreview. By checking for these issues before code review it allows the reviewer\nto focus on the change itself, and it can also help to reduce the number of CI\nruns.</p>\n<p>To use the tool, first install <code class=\"docutils literal notranslate\"><span class=\"pre\">pre-commit</span></code> and then the git hooks:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install pre-commit\n<span class=\"gp\">$ </span>pre-commit install\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install pre-commit\n<span class=\"gp\">...\\&gt;</span> pre-commit install\n</pre></div>\n</section>\n</div>\n<p>On the first commit <code class=\"docutils literal notranslate\"><span class=\"pre\">pre-commit</span></code> will install the hooks, these are\ninstalled in their own environments and will take a short while to\ninstall on the first run. Subsequent checks will be significantly faster.\nIf an error is found an appropriate error message will be displayed.\nIf the error was with <code class=\"docutils literal notranslate\"><span class=\"pre\">black</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">isort</span></code> then the tool will go ahead and\nfix them for you. Review the changes and re-stage for commit if you are happy\nwith them.</p>\n</div>\n<div class=\"section\" id=\"s-python-style\">\n<span id=\"s-coding-style-python\"></span><span id=\"python-style\"></span><span id=\"coding-style-python\"></span><h2>Python style<a class=\"headerlink\" href=\"#python-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">All files should be formatted using the <a class=\"reference external\" href=\"https://black.readthedocs.io/en/stable/\">black</a> auto-formatter. This will be\nrun by <code class=\"docutils literal notranslate\"><span class=\"pre\">pre-commit</span></code> if that is configured.</p>\n</li>\n<li><p class=\"first\">The project repository includes an <code class=\"docutils literal notranslate\"><span class=\"pre\">.editorconfig</span></code> file. We recommend using\na text editor with <a class=\"reference external\" href=\"https://editorconfig.org/\">EditorConfig</a> support to avoid indentation and\nwhitespace issues. The Python files use 4 spaces for indentation and the HTML\nfiles use 2 spaces.</p>\n</li>\n<li><p class=\"first\">Unless otherwise specified, follow <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0008/\"><strong>PEP 8</strong></a>.</p>\n<p>Use <a class=\"reference external\" href=\"https://pypi.org/project/flake8/\">flake8</a> to check for problems in this area. Note that our\n<code class=\"docutils literal notranslate\"><span class=\"pre\">setup.cfg</span></code> file contains some excluded files (deprecated modules we don\u2019t\ncare about cleaning up and some third-party code that Django vendors) as well\nas some excluded errors that we don\u2019t consider as gross violations. Remember\nthat <span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0008/\"><strong>PEP 8</strong></a> is only a guide, so respect the style of the surrounding code\nas a primary goal.</p>\n<p>An exception to <span class=\"target\" id=\"index-2\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0008/\"><strong>PEP 8</strong></a> is our rules on line lengths. Don\u2019t limit lines of\ncode to 79 characters if it means the code looks significantly uglier or is\nharder to read. We allow up to 88 characters as this is the line length used\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">black</span></code>. This check is included when you run <code class=\"docutils literal notranslate\"><span class=\"pre\">flake8</span></code>. Documentation,\ncomments, and docstrings should be wrapped at 79 characters, even though\n<span class=\"target\" id=\"index-3\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0008/\"><strong>PEP 8</strong></a> suggests 72.</p>\n</li>\n<li><p class=\"first\">String variable interpolation may use\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#old-string-formatting\" title=\"(in Python v3.11)\"><span class=\"xref std std-ref\">%-formatting</span></a>, <a class=\"reference external\" href=\"https://docs.python.org/3/reference/lexical_analysis.html#f-strings\" title=\"(in Python v3.11)\"><span class=\"xref std std-ref\">f-strings</span></a>, or <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str.format\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">str.format()</span></code></a> as appropriate, with the goal of\nmaximizing code readability.</p>\n<p>Final judgments of readability are left to the Merger\u2019s discretion. As a\nguide, f-strings should use only plain variable and property access, with\nprior local variable assignment for more complex cases:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Allowed</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;hello </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;hello </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;hello </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n<span class=\"c1\"># Disallowed</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;hello </span><span class=\"si\">{</span><span class=\"n\">get_user</span><span class=\"p\">()</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;you are </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">*</span> <span class=\"mf\">365.25</span><span class=\"si\">}</span><span class=\"s2\"> days old&quot;</span>\n\n<span class=\"c1\"># Allowed with local variable assignment</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">get_user</span><span class=\"p\">()</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;hello </span><span class=\"si\">{</span><span class=\"n\">user</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n<span class=\"n\">user_days_old</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">*</span> <span class=\"mf\">365.25</span>\n<span class=\"sa\">f</span><span class=\"s2\">&quot;you are </span><span class=\"si\">{</span><span class=\"n\">user_days_old</span><span class=\"si\">}</span><span class=\"s2\"> days old&quot;</span>\n</pre></div>\n</div>\n<p>f-strings should not be used for any string that may require translation,\nincluding error and logging messages. In general <code class=\"docutils literal notranslate\"><span class=\"pre\">format()</span></code> is more\nverbose, so the other formatting methods are preferred.</p>\n<p>Don\u2019t waste time doing unrelated refactoring of existing code to adjust the\nformatting method.</p>\n</li>\n<li><p class=\"first\">Avoid use of \u201cwe\u201d in comments, e.g. \u201cLoop over\u201d rather than \u201cWe loop over\u201d.</p>\n</li>\n<li><p class=\"first\">Use underscores, not camelCase, for variable, function and method names\n(i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">poll.get_unique_voters()</span></code>, not <code class=\"docutils literal notranslate\"><span class=\"pre\">poll.getUniqueVoters()</span></code>).</p>\n</li>\n<li><p class=\"first\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">InitialCaps</span></code> for class names (or for factory functions that\nreturn classes).</p>\n</li>\n<li><p class=\"first\">In docstrings, follow the style of existing docstrings and <span class=\"target\" id=\"index-4\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0257/\"><strong>PEP 257</strong></a>.</p>\n</li>\n<li><p class=\"first\">In tests, use\n<a class=\"reference internal\" href=\"../../../../topics/testing/tools/#django.test.SimpleTestCase.assertRaisesMessage\" title=\"django.test.SimpleTestCase.assertRaisesMessage\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRaisesMessage()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../../topics/testing/tools/#django.test.SimpleTestCase.assertWarnsMessage\" title=\"django.test.SimpleTestCase.assertWarnsMessage\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertWarnsMessage()</span></code></a>\ninstead of <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRaises()</span></code></a> and\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertWarns()</span></code></a> so you can check the\nexception or warning message. Use <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRaisesRegex()</span></code></a>\nand <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertWarnsRegex()</span></code></a> only if you need regular\nexpression matching.</p>\n<p>Use <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertIs(\u2026,</span> <span class=\"pre\">True/False)</span></code></a> for testing\nboolean values, rather than <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertTrue()</span></code></a> and\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertFalse\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertFalse()</span></code></a>, so you can check the actual boolean\nvalue, not the truthiness of the expression.</p>\n</li>\n<li><p class=\"first\">In test docstrings, state the expected behavior that each test demonstrates.\nDon\u2019t include preambles such as \u201cTests that\u201d or \u201cEnsures that\u201d.</p>\n<p>Reserve ticket references for obscure issues where the ticket has additional\ndetails that can\u2019t be easily described in docstrings or comments. Include the\nticket number at the end of a sentence like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A test docstring looks like this (#123456).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-imports\">\n<span id=\"s-coding-style-imports\"></span><span id=\"imports\"></span><span id=\"coding-style-imports\"></span><h2>Imports<a class=\"headerlink\" href=\"#imports\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">Use <a class=\"reference external\" href=\"https://github.com/PyCQA/isort#readme\">isort</a> to automate import\nsorting using the guidelines below.</p>\n<p>Quick start:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install <span class=\"s2\">&quot;isort &gt;= 5.1.0&quot;</span>\n<span class=\"gp\">$ </span>isort .\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install <span class=\"s2\">&quot;isort &gt;= 5.1.0&quot;</span>\n<span class=\"gp\">...\\&gt;</span> isort .\n</pre></div>\n</section>\n</div>\n<p>This runs <code class=\"docutils literal notranslate\"><span class=\"pre\">isort</span></code> recursively from your current directory, modifying any\nfiles that don\u2019t conform to the guidelines. If you need to have imports out\nof order (to avoid a circular import, for example) use a comment like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">module</span>  <span class=\"c1\"># isort:skip</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Put imports in these groups: future, standard library, third-party libraries,\nother Django components, local Django component, try/excepts. Sort lines in\neach group alphabetically by the full module name. Place all <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">module</span></code>\nstatements before <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span> <span class=\"pre\">module</span> <span class=\"pre\">import</span> <span class=\"pre\">objects</span></code> in each section. Use absolute\nimports for other Django components and relative imports for local components.</p>\n</li>\n<li><p class=\"first\">On each line, alphabetize the items with the upper case items grouped before\nthe lowercase items.</p>\n</li>\n<li><p class=\"first\">Break long lines using parentheses and indent continuation lines by 4 spaces.\nInclude a trailing comma after the last import and put the closing\nparenthesis on its own line.</p>\n<p>Use a single blank line between the last import and any module level code,\nand use two blank lines above the first function or class.</p>\n<p>For example (comments are for explanatory purposes only):</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django/contrib/admin/example.py</span></code></span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># future</span>\n<span class=\"kn\">from</span> <span class=\"nn\">__future__</span> <span class=\"kn\">import</span> <span class=\"n\">unicode_literals</span>\n\n<span class=\"c1\"># standard library</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n\n<span class=\"c1\"># third-party</span>\n<span class=\"kn\">import</span> <span class=\"nn\">bcrypt</span>\n\n<span class=\"c1\"># Django</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">Http404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http.response</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Http404</span><span class=\"p\">,</span>\n    <span class=\"n\">HttpResponse</span><span class=\"p\">,</span>\n    <span class=\"n\">HttpResponseNotAllowed</span><span class=\"p\">,</span>\n    <span class=\"n\">StreamingHttpResponse</span><span class=\"p\">,</span>\n    <span class=\"n\">cookie</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># local Django</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">LogEntry</span>\n\n<span class=\"c1\"># try/except</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"n\">yaml</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">CONSTANT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;foo&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n</li>\n<li><p class=\"first\">Use convenience imports whenever available. For example, do this</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n</pre></div>\n</div>\n<p>instead of:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.base</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-template-style\">\n<span id=\"template-style\"></span><h2>Template style<a class=\"headerlink\" href=\"#template-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">In Django template code, put one (and only one) space between the curly\nbrackets and the tag contents.</p>\n<p>Do this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">foo</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Don\u2019t do this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span><span class=\"nv\">foo</span><span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-view-style\">\n<span id=\"view-style\"></span><h2>View style<a class=\"headerlink\" href=\"#view-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">In Django views, the first parameter in a view function should be called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code>.</p>\n<p>Do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Don\u2019t do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">req</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-model-style\">\n<span id=\"model-style\"></span><h2>Model style<a class=\"headerlink\" href=\"#model-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul>\n<li><p class=\"first\">Field names should be all lowercase, using underscores instead of\ncamelCase.</p>\n<p>Do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Don\u2019t do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">FirstName</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">Last_Name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">Meta</span></code> should appear <em>after</em> the fields are defined, with\na single blank line separating the fields and the class definition.</p>\n<p>Do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;people&quot;</span>\n</pre></div>\n</div>\n<p>Don\u2019t do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;people&quot;</span>\n\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">The order of model inner classes and standard methods should be as\nfollows (noting that these are not all required):</p>\n<ul class=\"simple\">\n<li>All database fields</li>\n<li>Custom manager attributes</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">Meta</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">def</span> <span class=\"pre\">__str__()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">def</span> <span class=\"pre\">save()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">def</span> <span class=\"pre\">get_absolute_url()</span></code></li>\n<li>Any custom methods</li>\n</ul>\n</li>\n<li><p class=\"first\">If <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> is defined for a given model field, define each choice as a\nlist of tuples, with an all-uppercase name as a class attribute on the model.\nExample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">DIRECTION_UP</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;U&quot;</span>\n    <span class=\"n\">DIRECTION_DOWN</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;D&quot;</span>\n    <span class=\"n\">DIRECTION_CHOICES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"n\">DIRECTION_UP</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Up&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"n\">DIRECTION_DOWN</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Down&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-use-of-django-conf-settings\">\n<span id=\"use-of-django-conf-settings\"></span><h2>Use of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.settings</span></code><a class=\"headerlink\" href=\"#use-of-django-conf-settings\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Modules should not in general use settings stored in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.settings</span></code>\nat the top level (i.e. evaluated when the module is imported). The explanation\nfor this is as follows:</p>\n<p>Manual configuration of settings (i.e. not relying on the\n<span class=\"target\" id=\"index-5\"></span><a class=\"reference internal\" href=\"../../../../topics/settings/#envvar-DJANGO_SETTINGS_MODULE\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_SETTINGS_MODULE</span></code></a> environment variable) is allowed and possible\nas follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n<span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configure</span><span class=\"p\">({},</span> <span class=\"n\">SOME_SETTING</span><span class=\"o\">=</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>However, if any setting is accessed before the <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.configure</span></code> line,\nthis will not work. (Internally, <code class=\"docutils literal notranslate\"><span class=\"pre\">settings</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code> which\nconfigures itself automatically when the settings are accessed if it has not\nalready been configured).</p>\n<p>So, if there is a module containing some code as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">get_callable</span>\n\n<span class=\"n\">default_foo_view</span> <span class=\"o\">=</span> <span class=\"n\">get_callable</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FOO_VIEW</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026then importing this module will cause the settings object to be configured.\nThat means that the ability for third parties to import the module at the top\nlevel is incompatible with the ability to configure the settings object\nmanually, or makes it very difficult in some circumstances.</p>\n<p>Instead of the above code, a level of laziness or indirection must be used,\nsuch as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.functional.LazyObject</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.functional.lazy()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">lambda</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-miscellaneous\">\n<span id=\"miscellaneous\"></span><h2>Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>Mark all strings for internationalization; see the <a class=\"reference internal\" href=\"../../../../topics/i18n/\"><span class=\"doc\">i18n\ndocumentation</span></a> for details.</li>\n<li>Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span></code> statements that are no longer used when you change code.\n<a class=\"reference external\" href=\"https://pypi.org/project/flake8/\">flake8</a> will identify these imports for you. If an unused import needs\nto remain for backwards-compatibility, mark the end of with <code class=\"docutils literal notranslate\"><span class=\"pre\">#</span> <span class=\"pre\">NOQA</span></code> to\nsilence the flake8 warning.</li>\n<li>Systematically remove all trailing whitespaces from your code as those\nadd unnecessary bytes, add visual clutter to the patches and can also\noccasionally cause unnecessary merge conflicts. Some IDE\u2019s can be\nconfigured to automatically remove them and most VCS tools can be set to\nhighlight them in diff outputs.</li>\n<li>Please don\u2019t put your name in the code you contribute. Our policy is to\nkeep contributors\u2019 names in the <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTHORS</span></code> file distributed with Django\n\u2013 not scattered throughout the codebase itself. Feel free to include a\nchange to the <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTHORS</span></code> file in your patch if you make more than a\nsingle trivial change.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-javascript-style\">\n<span id=\"javascript-style\"></span><h2>JavaScript style<a class=\"headerlink\" href=\"#javascript-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For details about the JavaScript code style used by Django, see\n<a class=\"reference internal\" href=\"../javascript/\"><span class=\"doc\">JavaScript</span></a>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/contributing/writing-code/unit-tests", "Unit tests", "N", "next"], ["internals/contributing/writing-code/index", "Writing code", "P", "previous"]], "sourcename": "internals/contributing/writing-code/coding-style.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Coding style</a><ul>\n<li><a class=\"reference internal\" href=\"#pre-commit-checks\">Pre-commit checks</a></li>\n<li><a class=\"reference internal\" href=\"#python-style\">Python style</a></li>\n<li><a class=\"reference internal\" href=\"#imports\">Imports</a></li>\n<li><a class=\"reference internal\" href=\"#template-style\">Template style</a></li>\n<li><a class=\"reference internal\" href=\"#view-style\">View style</a></li>\n<li><a class=\"reference internal\" href=\"#model-style\">Model style</a></li>\n<li><a class=\"reference internal\" href=\"#use-of-django-conf-settings\">Use of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.settings</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#miscellaneous\">Miscellaneous</a></li>\n<li><a class=\"reference internal\" href=\"#javascript-style\">JavaScript style</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/contributing/writing-code/coding-style", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}