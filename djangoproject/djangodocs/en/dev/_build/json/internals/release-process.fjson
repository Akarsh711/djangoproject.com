{"parents": [{"link": "../", "title": "Django internals"}], "prev": {"link": "../security/", "title": "Django\u2019s security policies"}, "next": {"link": "../deprecation/", "title": "Django Deprecation Timeline"}, "title": "Django\u2019s release process", "meta": {}, "body": "<div class=\"section\" id=\"s-django-s-release-process\">\n<span id=\"django-s-release-process\"></span><h1>Django\u2019s release process<a class=\"headerlink\" href=\"#django-s-release-process\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-official-releases\">\n<span id=\"s-id1\"></span><span id=\"official-releases\"></span><span id=\"id1\"></span><h2>Official releases<a class=\"headerlink\" href=\"#official-releases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Since version 1.0, Django\u2019s release numbering works as follows:</p>\n<ul class=\"simple\">\n<li>Versions are numbered in the form <code class=\"docutils literal notranslate\"><span class=\"pre\">A.B</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">A.B.C</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">A.B</span></code> is the <em>feature release</em> version number. Each version will be mostly\nbackwards compatible with the previous release. Exceptions to this rule will\nbe listed in the release notes.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">C</span></code> is the <em>patch release</em> version number, which is incremented for bugfix\nand security releases. These releases will be 100% backwards-compatible with\nthe previous patch release. The only exception is when a security or data\nloss issue can\u2019t be fixed without breaking backwards-compatibility. If this\nhappens, the release notes will provide detailed upgrade instructions.</li>\n<li>Before a new feature release, we\u2019ll make alpha, beta, and release candidate\nreleases. These are of the form <code class=\"docutils literal notranslate\"><span class=\"pre\">A.B</span> <span class=\"pre\">alpha/beta/rc</span> <span class=\"pre\">N</span></code>, which means the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Nth</span></code> alpha/beta/release candidate of version <code class=\"docutils literal notranslate\"><span class=\"pre\">A.B</span></code>.</li>\n</ul>\n<p>In git, each Django release will have a tag indicating its version number,\nsigned with the Django release key. Additionally, each release series has its\nown branch, called <code class=\"docutils literal notranslate\"><span class=\"pre\">stable/A.B.x</span></code>, and bugfix/security releases will be\nissued from those branches.</p>\n<p>For more information about how the Django project issues new releases for\nsecurity purposes, please see <a class=\"reference internal\" href=\"../security/\"><span class=\"doc\">our security policies</span></a>.</p>\n<dl class=\"glossary docutils\">\n<dt id=\"term-Feature-release\">Feature release<a class=\"headerlink\" href=\"#term-Feature-release\" title=\"Permalink to this term\">\u00b6</a></dt><dd>Feature releases (A.B, A.B+1, etc.) will happen roughly every eight months\n\u2013 see <a class=\"reference internal\" href=\"#id2\">release process</a> for details. These releases will contain new\nfeatures, improvements to existing features, and such.</dd>\n<dt id=\"term-Patch-release\">Patch release<a class=\"headerlink\" href=\"#term-Patch-release\" title=\"Permalink to this term\">\u00b6</a></dt><dd><p>Patch releases (A.B.C, A.B.C+1, etc.) will be issued as needed, to fix\nbugs and/or security issues.</p>\n<p>These releases will be 100% compatible with the associated feature release,\nunless this is impossible for security reasons or to prevent data loss.\nSo the answer to \u201cshould I upgrade to the latest patch release?\u201d will always\nbe \u201cyes.\u201d</p>\n</dd>\n<dt id=\"term-Long-term-support-release\">Long-term support release<a class=\"headerlink\" href=\"#term-Long-term-support-release\" title=\"Permalink to this term\">\u00b6</a></dt><dd><p>Certain feature releases will be designated as long-term support (LTS)\nreleases. These releases will get security and data loss fixes applied for\na guaranteed period of time, typically three years.</p>\n<p>See <a class=\"reference external\" href=\"https://www.djangoproject.com/download/\">the download page</a> for the releases that have been designated for\nlong-term support.</p>\n</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-release-cadence\">\n<span id=\"s-internal-release-cadence\"></span><span id=\"release-cadence\"></span><span id=\"internal-release-cadence\"></span><h2>Release cadence<a class=\"headerlink\" href=\"#release-cadence\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Starting with Django 2.0, version numbers will use a loose form of <a class=\"reference external\" href=\"https://semver.org/\">semantic\nversioning</a> such that each version following an LTS will\nbump to the next \u201cdot zero\u201d version. For example: 2.0, 2.1, 2.2 (LTS), 3.0,\n3.1, 3.2 (LTS), etc.</p>\n<p>SemVer makes it easier to see at a glance how compatible releases are with each\nother. It also helps to anticipate when compatibility shims will be removed.\nIt\u2019s not a pure form of SemVer as each feature release will continue to have a\nfew documented backwards incompatibilities where a deprecation path isn\u2019t\npossible or not worth the cost. Also, deprecations started in an LTS release\n(X.2) will be dropped in a non-dot-zero release (Y.1) to accommodate our policy\nof keeping deprecation shims for at least two feature releases. Read on to the\nnext section for an example.</p>\n</div>\n<div class=\"section\" id=\"s-deprecation-policy\">\n<span id=\"s-internal-release-deprecation-policy\"></span><span id=\"deprecation-policy\"></span><span id=\"internal-release-deprecation-policy\"></span><h2>Deprecation policy<a class=\"headerlink\" href=\"#deprecation-policy\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A feature release may deprecate certain features from previous releases. If a\nfeature is deprecated in feature release A.x, it will continue to work in all\nA.x versions (for all versions of x) but raise warnings. Deprecated features\nwill be removed in the B.0 release, or B.1 for features deprecated in the last\nA.x feature release to ensure deprecations are done over at least 2 feature\nreleases.</p>\n<p>So, for example, if we decided to start the deprecation of a function in\nDjango 4.2:</p>\n<ul class=\"simple\">\n<li>Django 4.2 will contain a backwards-compatible replica of the function which\nwill raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">RemovedInDjango51Warning</span></code>.</li>\n<li>Django 5.0 (the version that follows 4.2) will still contain the\nbackwards-compatible replica.</li>\n<li>Django 5.1 will remove the feature outright.</li>\n</ul>\n<p>The warnings are silent by default. You can turn on display of these warnings\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-Wd</span></code> option.</p>\n<p>A more generic example:</p>\n<ul class=\"simple\">\n<li>X.0</li>\n<li>X.1</li>\n<li>X.2 LTS</li>\n<li>Y.0: Drop deprecation shims added in X.0 and X.1.</li>\n<li>Y.1: Drop deprecation shims added in X.2.</li>\n<li>Y.2 LTS: No deprecation shims dropped (while Y.0 is no longer supported,\nthird-party apps need to maintain compatibility back to X.2 LTS to ease\nLTS to LTS upgrades).</li>\n<li>Z.0: Drop deprecation shims added in Y.0 and Y.1.</li>\n</ul>\n<p>See also the <a class=\"reference internal\" href=\"../contributing/writing-code/submitting-patches/#deprecating-a-feature\"><span class=\"std std-ref\">Deprecating a feature</span></a> guide.</p>\n</div>\n<div class=\"section\" id=\"s-supported-versions\">\n<span id=\"s-supported-versions-policy\"></span><span id=\"supported-versions\"></span><span id=\"supported-versions-policy\"></span><h2>Supported versions<a class=\"headerlink\" href=\"#supported-versions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>At any moment in time, Django\u2019s developer team will support a set of releases to\nvarying levels. See <a class=\"reference external\" href=\"https://www.djangoproject.com/download/#supported-versions\">the supported versions section</a> of the download\npage for the current state of support for each version.</p>\n<ul>\n<li><p class=\"first\">The current development branch <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> will get new features and bug fixes\nrequiring non-trivial refactoring.</p>\n</li>\n<li><p class=\"first\">Patches applied to the main branch must also be applied to the last feature\nrelease branch, to be released in the next patch release of that feature\nseries, when they fix critical problems:</p>\n<ul class=\"simple\">\n<li>Security issues.</li>\n<li>Data loss bugs.</li>\n<li>Crashing bugs.</li>\n<li>Major functionality bugs in new features of the latest stable release.</li>\n<li>Regressions from older versions of Django introduced in the current release\nseries.</li>\n</ul>\n<p>The rule of thumb is that fixes will be backported to the last feature\nrelease for bugs that would have prevented a release in the first place\n(release blockers).</p>\n</li>\n<li><p class=\"first\">Security fixes and data loss bugs will be applied to the current main branch,\nthe last two feature release branches, and any other supported long-term\nsupport release branches.</p>\n</li>\n<li><p class=\"first\">Documentation fixes generally will be more freely backported to the last\nrelease branch. That\u2019s because it\u2019s highly advantageous to have the docs for\nthe last release be up-to-date and correct, and the risk of introducing\nregressions is much less of a concern.</p>\n</li>\n</ul>\n<p>As a concrete example, consider a moment in time halfway between the release of\nDjango 5.1 and 5.2. At this point in time:</p>\n<ul class=\"simple\">\n<li>Features will be added to the development main branch, to be released as\nDjango 5.2.</li>\n<li>Critical bug fixes will be applied to the <code class=\"docutils literal notranslate\"><span class=\"pre\">stable/5.1.x</span></code> branch, and\nreleased as 5.1.1, 5.1.2, etc.</li>\n<li>Security fixes and bug fixes for data loss issues will be applied to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> and to the <code class=\"docutils literal notranslate\"><span class=\"pre\">stable/5.1.x</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">stable/5.0.x</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stable/4.2.x</span></code> (LTS) branches. They will trigger the release of <code class=\"docutils literal notranslate\"><span class=\"pre\">5.1.1</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">5.0.5</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">4.2.8</span></code>, etc.</li>\n<li>Documentation fixes will be applied to main, and, if easily backported, to\nthe latest stable branch, <code class=\"docutils literal notranslate\"><span class=\"pre\">5.1.x</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-release-process\">\n<span id=\"s-id2\"></span><span id=\"release-process\"></span><span id=\"id2\"></span><h2>Release process<a class=\"headerlink\" href=\"#release-process\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django uses a time-based release schedule, with feature releases every eight\nmonths or so.</p>\n<p>After each feature release, the release manager will announce a timeline for\nthe next feature release.</p>\n<div class=\"section\" id=\"s-release-cycle\">\n<span id=\"release-cycle\"></span><h3>Release cycle<a class=\"headerlink\" href=\"#release-cycle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Each release cycle consists of three parts:</p>\n<div class=\"section\" id=\"s-phase-one-feature-proposal\">\n<span id=\"phase-one-feature-proposal\"></span><h4>Phase one: feature proposal<a class=\"headerlink\" href=\"#phase-one-feature-proposal\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The first phase of the release process will include figuring out what major\nfeatures to include in the next version. This should include a good deal of\npreliminary work on those features \u2013 working code trumps grand design.</p>\n<p>Major features for an upcoming release will be added to the wiki roadmap page,\ne.g. <a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/Version1.11Roadmap\">https://code.djangoproject.com/wiki/Version1.11Roadmap</a>.</p>\n</div>\n<div class=\"section\" id=\"s-phase-two-development\">\n<span id=\"phase-two-development\"></span><h4>Phase two: development<a class=\"headerlink\" href=\"#phase-two-development\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The second part of the release schedule is the \u201cheads-down\u201d working period.\nUsing the roadmap produced at the end of phase one, we\u2019ll all work very hard to\nget everything on it done.</p>\n<p>At the end of phase two, any unfinished features will be postponed until the\nnext release.</p>\n<p>Phase two will culminate with an alpha release. At this point, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stable/A.B.x</span></code> branch will be forked from <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-phase-three-bugfixes\">\n<span id=\"phase-three-bugfixes\"></span><h4>Phase three: bugfixes<a class=\"headerlink\" href=\"#phase-three-bugfixes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The last part of a release cycle is spent fixing bugs \u2013 no new features will\nbe accepted during this time. We\u2019ll try to release a beta release one month\nafter the alpha and a release candidate one month after the beta.</p>\n<p>The release candidate marks the string freeze, and it happens at least two\nweeks before the final release. After this point, new translatable strings\nmust not be added.</p>\n<p>During this phase, mergers will be more and more conservative with backports,\nto avoid introducing regressions. After the release candidate, only release\nblockers and documentation fixes should be backported.</p>\n<p>In parallel to this phase, <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> can receive new features, to be released\nin the <code class=\"docutils literal notranslate\"><span class=\"pre\">A.B+1</span></code> cycle.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-bug-fix-releases\">\n<span id=\"bug-fix-releases\"></span><h3>Bug-fix releases<a class=\"headerlink\" href=\"#bug-fix-releases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>After a feature release (e.g. A.B), the previous release will go into bugfix\nmode.</p>\n<p>The branch for the previous feature release (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">stable/A.B-1.x</span></code>) will\ninclude bugfixes. Critical bugs fixed on main must <em>also</em> be fixed on the\nbugfix branch; this means that commits need to cleanly separate bug fixes from\nfeature additions. The developer who commits a fix to main will be\nresponsible for also applying the fix to the current bugfix branch.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/deprecation", "Django Deprecation Timeline", "N", "next"], ["internals/security", "Django\u2019s security policies", "P", "previous"]], "sourcename": "internals/release-process.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django\u2019s release process</a><ul>\n<li><a class=\"reference internal\" href=\"#official-releases\">Official releases</a></li>\n<li><a class=\"reference internal\" href=\"#release-cadence\">Release cadence</a></li>\n<li><a class=\"reference internal\" href=\"#deprecation-policy\">Deprecation policy</a></li>\n<li><a class=\"reference internal\" href=\"#supported-versions\">Supported versions</a></li>\n<li><a class=\"reference internal\" href=\"#release-process\">Release process</a><ul>\n<li><a class=\"reference internal\" href=\"#release-cycle\">Release cycle</a><ul>\n<li><a class=\"reference internal\" href=\"#phase-one-feature-proposal\">Phase one: feature proposal</a></li>\n<li><a class=\"reference internal\" href=\"#phase-two-development\">Phase two: development</a></li>\n<li><a class=\"reference internal\" href=\"#phase-three-bugfixes\">Phase three: bugfixes</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#bug-fix-releases\">Bug-fix releases</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/release-process", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
