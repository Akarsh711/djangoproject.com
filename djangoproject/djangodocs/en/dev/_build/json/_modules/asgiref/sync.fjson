{"parents": [{"link": "../../", "title": "Module code"}], "title": "asgiref.sync", "body": "<h1>Source code for asgiref.sync</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">asyncio.coroutines</span>\n<span class=\"kn\">import</span> <span class=\"nn\">contextvars</span>\n<span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"nn\">weakref</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">Future</span><span class=\"p\">,</span> <span class=\"n\">ThreadPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">overload</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.current_thread_executor</span> <span class=\"kn\">import</span> <span class=\"n\">CurrentThreadExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.local</span> <span class=\"kn\">import</span> <span class=\"n\">Local</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_restore_context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check for changes in contextvars, and set them to the current</span>\n    <span class=\"c1\"># context for downstream consumers</span>\n    <span class=\"k\">for</span> <span class=\"n\">cvar</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">cvar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cvar</span><span class=\"p\">):</span>\n                <span class=\"n\">cvar</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cvar</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"ne\">LookupError</span><span class=\"p\">:</span>\n            <span class=\"n\">cvar</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cvar</span><span class=\"p\">))</span>\n\n\n<span class=\"c1\"># Python 3.12 deprecates asyncio.iscoroutinefunction() as an alias for</span>\n<span class=\"c1\"># inspect.iscoroutinefunction(), whilst also removing the _is_coroutine marker.</span>\n<span class=\"c1\"># The latter is replaced with the inspect.markcoroutinefunction decorator.</span>\n<span class=\"c1\"># Until 3.12 is the minimum supported Python version, provide a shim.</span>\n<span class=\"c1\"># Django 4.0 only supports 3.8+, so don&#39;t concern with the _or_partial backport.</span>\n\n<span class=\"c1\"># Type hint: should be generic: whatever T it takes it returns. (Same id)</span>\n<span class=\"k\">def</span> <span class=\"nf\">markcoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Any</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"p\">,</span> <span class=\"s2\">&quot;markcoroutinefunction&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">markcoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">_is_coroutine</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutines</span><span class=\"o\">.</span><span class=\"n\">_is_coroutine</span>  <span class=\"c1\"># type: ignore</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">inspect</span><span class=\"p\">,</span> <span class=\"s2\">&quot;markcoroutinefunction&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_iscoroutinefunction_or_partial</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Python &lt; 3.8 does not correctly determine partially wrapped</span>\n    <span class=\"c1\"># coroutine functions are coroutine functions, hence the need for</span>\n    <span class=\"c1\"># this to exist. Code taken from CPython.</span>\n    <span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">version_info</span> <span class=\"o\">&gt;=</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">ismethod</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__func__</span>\n        <span class=\"k\">while</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">):</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">func</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ThreadSensitiveContext</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Async context manager to manage context for thread sensitive mode</span>\n\n<span class=\"sd\">    This context manager controls which thread pool executor is used when in</span>\n<span class=\"sd\">    thread sensitive mode. By default, a single thread pool executor is shared</span>\n<span class=\"sd\">    within a process.</span>\n\n<span class=\"sd\">    In Python 3.7+, the ThreadSensitiveContext() context manager may be used to</span>\n<span class=\"sd\">    specify a thread pool per context.</span>\n\n<span class=\"sd\">    This context manager is re-entrant, so only the outer-most call to</span>\n<span class=\"sd\">    ThreadSensitiveContext will set the context.</span>\n\n<span class=\"sd\">    Usage:</span>\n\n<span class=\"sd\">    &gt;&gt;&gt; import time</span>\n<span class=\"sd\">    &gt;&gt;&gt; async with ThreadSensitiveContext():</span>\n<span class=\"sd\">    ...     await sync_to_async(time.sleep, 1)()</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"fm\">__aenter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">thread_sensitive_context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">LookupError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">thread_sensitive_context</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"fm\">__aexit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">tb</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">context_to_thread_executor</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n            <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n        <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">thread_sensitive_context</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AsyncToSync</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Utility class which turns an awaitable that only works on the thread with</span>\n<span class=\"sd\">    the event loop into a synchronous callable that works in a subthread.</span>\n\n<span class=\"sd\">    If the call stack contains an async loop, the code runs there.</span>\n<span class=\"sd\">    Otherwise, the code runs in a new loop in a new thread.</span>\n\n<span class=\"sd\">    Either way, this thread then pauses and waits to run any thread_sensitive</span>\n<span class=\"sd\">    code called from further down the call stack using SyncToAsync, before</span>\n<span class=\"sd\">    finally exiting once the async task returns.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># Maps launched Tasks to the threads that launched them (for locals impl)</span>\n    <span class=\"n\">launch_map</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Dict[asyncio.Task[object], threading.Thread]&quot;</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Keeps track of which CurrentThreadExecutor to use. This uses an asgiref</span>\n    <span class=\"c1\"># Local, not a threadlocal, so that tasks can work out what their parent used.</span>\n    <span class=\"n\">executors</span> <span class=\"o\">=</span> <span class=\"n\">Local</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># When we can&#39;t find a CurrentThreadExecutor from the context, such as</span>\n    <span class=\"c1\"># inside create_task, we&#39;ll look it up here from the running event loop.</span>\n    <span class=\"n\">loop_thread_executors</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Dict[asyncio.AbstractEventLoop, CurrentThreadExecutor]&quot;</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">awaitable</span><span class=\"p\">,</span> <span class=\"n\">force_new_loop</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">awaitable</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"n\">_iscoroutinefunction_or_partial</span><span class=\"p\">(</span><span class=\"n\">awaitable</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">_iscoroutinefunction_or_partial</span><span class=\"p\">(</span>\n                <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">awaitable</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__call__&quot;</span><span class=\"p\">,</span> <span class=\"n\">awaitable</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"c1\"># Python does not have very reliable detection of async functions</span>\n            <span class=\"c1\"># (lots of false negatives) so this is just a warning.</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;async_to_sync was passed a non-async-marked callable&quot;</span><span class=\"p\">,</span> <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">awaitable</span> <span class=\"o\">=</span> <span class=\"n\">awaitable</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__self__</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"o\">.</span><span class=\"vm\">__self__</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">if</span> <span class=\"n\">force_new_loop</span><span class=\"p\">:</span>\n            <span class=\"c1\"># They have asked that we always run in a new sub-loop.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_running_loop</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># There&#39;s no event loop in this thread. Look for the threadlocal if</span>\n                <span class=\"c1\"># we&#39;re inside SyncToAsync</span>\n                <span class=\"n\">main_event_loop_pid</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n                    <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">threadlocal</span><span class=\"p\">,</span> <span class=\"s2\">&quot;main_event_loop_pid&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n                <span class=\"p\">)</span>\n                <span class=\"c1\"># We make sure the parent loop is from the same process - if</span>\n                <span class=\"c1\"># they&#39;ve forked, this is not going to be valid any more (#194)</span>\n                <span class=\"k\">if</span> <span class=\"n\">main_event_loop_pid</span> <span class=\"ow\">and</span> <span class=\"n\">main_event_loop_pid</span> <span class=\"o\">==</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">():</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n                        <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">threadlocal</span><span class=\"p\">,</span> <span class=\"s2\">&quot;main_event_loop&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># You can&#39;t call AsyncToSync from a thread with a running event loop</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">event_loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_running_loop</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">event_loop</span><span class=\"o\">.</span><span class=\"n\">is_running</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;You cannot use AsyncToSync in the same thread as an async event loop - &quot;</span>\n                    <span class=\"s2\">&quot;just await the async function directly.&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Wrapping context in list so it can be reassigned from within</span>\n        <span class=\"c1\"># `main_wrap`.</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">contextvars</span><span class=\"o\">.</span><span class=\"n\">copy_context</span><span class=\"p\">()]</span>\n\n        <span class=\"c1\"># Make a future for the return information</span>\n        <span class=\"n\">call_result</span> <span class=\"o\">=</span> <span class=\"n\">Future</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Get the source thread</span>\n        <span class=\"n\">source_thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">current_thread</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Make a CurrentThreadExecutor we&#39;ll use to idle in this thread - we</span>\n        <span class=\"c1\"># need one for every sync frame, even if there&#39;s one above us in the</span>\n        <span class=\"c1\"># same thread.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"p\">,</span> <span class=\"s2\">&quot;current&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">old_current_executor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"o\">.</span><span class=\"n\">current</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">old_current_executor</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">current_executor</span> <span class=\"o\">=</span> <span class=\"n\">CurrentThreadExecutor</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"o\">.</span><span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current_executor</span>\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"c1\"># Use call_soon_threadsafe to schedule a synchronous callback on the</span>\n        <span class=\"c1\"># main event loop&#39;s thread if it&#39;s there, otherwise make a new loop</span>\n        <span class=\"c1\"># in this thread.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">awaitable</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_wrap</span><span class=\"p\">(</span>\n                <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">call_result</span><span class=\"p\">,</span> <span class=\"n\">source_thread</span><span class=\"p\">,</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">(),</span> <span class=\"n\">context</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span><span class=\"o\">.</span><span class=\"n\">is_running</span><span class=\"p\">()):</span>\n                <span class=\"c1\"># Make our own event loop - in a new thread - and run inside that.</span>\n                <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">new_event_loop</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop_thread_executors</span><span class=\"p\">[</span><span class=\"n\">loop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">current_executor</span>\n                <span class=\"n\">loop_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"n\">loop_future</span> <span class=\"o\">=</span> <span class=\"n\">loop_executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_run_event_loop</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">awaitable</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">current_executor</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Run the CurrentThreadExecutor until the future is done</span>\n                    <span class=\"n\">current_executor</span><span class=\"o\">.</span><span class=\"n\">run_until_future</span><span class=\"p\">(</span><span class=\"n\">loop_future</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Wait for future and/or allow for exception propagation</span>\n                <span class=\"n\">loop_future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Call it inside the existing loop</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span><span class=\"o\">.</span><span class=\"n\">call_soon_threadsafe</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">,</span> <span class=\"n\">awaitable</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">current_executor</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Run the CurrentThreadExecutor until the future is done</span>\n                    <span class=\"n\">current_executor</span><span class=\"o\">.</span><span class=\"n\">run_until_future</span><span class=\"p\">(</span><span class=\"n\">call_result</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Clean up any executor we were running</span>\n            <span class=\"k\">if</span> <span class=\"n\">loop</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop_thread_executors</span><span class=\"p\">[</span><span class=\"n\">loop</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"p\">,</span> <span class=\"s2\">&quot;current&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"o\">.</span><span class=\"n\">current</span>\n            <span class=\"k\">if</span> <span class=\"n\">old_current_executor</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"o\">.</span><span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">old_current_executor</span>\n            <span class=\"n\">_restore_context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"c1\"># Wait for results from the future.</span>\n        <span class=\"k\">return</span> <span class=\"n\">call_result</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_run_event_loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">coro</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Runs the given event loop (designed to be called in a thread).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">coro</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"c1\"># mimic asyncio.run() behavior</span>\n                <span class=\"c1\"># cancel unexhausted async generators</span>\n                <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">all_tasks</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>\n                    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">cancel</span><span class=\"p\">()</span>\n\n                <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">gather</span><span class=\"p\">():</span>\n                    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">return_exceptions</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n                <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">gather</span><span class=\"p\">())</span>\n                <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">cancelled</span><span class=\"p\">():</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"k\">if</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">call_exception_handler</span><span class=\"p\">(</span>\n                            <span class=\"p\">{</span>\n                                <span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;unhandled exception during loop shutdown&quot;</span><span class=\"p\">,</span>\n                                <span class=\"s2\">&quot;exception&quot;</span><span class=\"p\">:</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">exception</span><span class=\"p\">(),</span>\n                                <span class=\"s2\">&quot;task&quot;</span><span class=\"p\">:</span> <span class=\"n\">task</span><span class=\"p\">,</span>\n                            <span class=\"p\">}</span>\n                        <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"s2\">&quot;shutdown_asyncgens&quot;</span><span class=\"p\">):</span>\n                    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">shutdown_asyncgens</span><span class=\"p\">())</span>\n            <span class=\"k\">finally</span><span class=\"p\">:</span>\n                <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">objtype</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Include self for methods</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main_wrap</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">call_result</span><span class=\"p\">,</span> <span class=\"n\">source_thread</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">,</span> <span class=\"n\">context</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Wraps the awaitable with something that puts the result into the</span>\n<span class=\"sd\">        result/exception future.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">_restore_context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n        <span class=\"n\">current_task</span> <span class=\"o\">=</span> <span class=\"n\">SyncToAsync</span><span class=\"o\">.</span><span class=\"n\">get_current_task</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launch_map</span><span class=\"p\">[</span><span class=\"n\">current_task</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">source_thread</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If we have an exception, run the function inside the except block</span>\n            <span class=\"c1\"># after raising it so exc_info is correctly populated.</span>\n            <span class=\"k\">if</span> <span class=\"n\">exc_info</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">exc_info</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">BaseException</span><span class=\"p\">:</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">awaitable</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">BaseException</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">call_result</span><span class=\"o\">.</span><span class=\"n\">set_exception</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">call_result</span><span class=\"o\">.</span><span class=\"n\">set_result</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launch_map</span><span class=\"p\">[</span><span class=\"n\">current_task</span><span class=\"p\">]</span>\n\n            <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">contextvars</span><span class=\"o\">.</span><span class=\"n\">copy_context</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SyncToAsync</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Utility class which turns a synchronous callable into an awaitable that</span>\n<span class=\"sd\">    runs in a threadpool. It also sets a threadlocal inside the thread so</span>\n<span class=\"sd\">    calls to AsyncToSync can escape it.</span>\n\n<span class=\"sd\">    If thread_sensitive is passed, the code will run in the same thread as any</span>\n<span class=\"sd\">    outer code. This is needed for underlying Python code that is not</span>\n<span class=\"sd\">    threadsafe (for example, code which handles SQLite database connections).</span>\n\n<span class=\"sd\">    If the outermost program is async (i.e. SyncToAsync is outermost), then</span>\n<span class=\"sd\">    this will be a dedicated single sub-thread that all sync code runs in,</span>\n<span class=\"sd\">    one after the other. If the outermost program is sync (i.e. AsyncToSync is</span>\n<span class=\"sd\">    outermost), this will just be the main thread. This is achieved by idling</span>\n<span class=\"sd\">    with a CurrentThreadExecutor while AsyncToSync is blocking its sync parent,</span>\n<span class=\"sd\">    rather than just blocking.</span>\n\n<span class=\"sd\">    If executor is passed in, that will be used instead of the loop&#39;s default executor.</span>\n<span class=\"sd\">    In order to pass in an executor, thread_sensitive must be set to False, otherwise</span>\n<span class=\"sd\">    a TypeError will be raised.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># Maps launched threads to the coroutines that spawned them</span>\n    <span class=\"n\">launch_map</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Dict[threading.Thread, asyncio.Task[object]]&quot;</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"c1\"># Storage for main event loop references</span>\n    <span class=\"n\">threadlocal</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Single-thread executor for thread-sensitive code</span>\n    <span class=\"n\">single_thread_executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Maintain a contextvar for the current execution context. Optionally used</span>\n    <span class=\"c1\"># for thread sensitive mode.</span>\n    <span class=\"n\">thread_sensitive_context</span><span class=\"p\">:</span> <span class=\"s2\">&quot;contextvars.ContextVar[str]&quot;</span> <span class=\"o\">=</span> <span class=\"n\">contextvars</span><span class=\"o\">.</span><span class=\"n\">ContextVar</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;thread_sensitive_context&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Contextvar that is used to detect if the single thread executor</span>\n    <span class=\"c1\"># would be awaited on while already being used in the same context</span>\n    <span class=\"n\">deadlock_context</span><span class=\"p\">:</span> <span class=\"s2\">&quot;contextvars.ContextVar[bool]&quot;</span> <span class=\"o\">=</span> <span class=\"n\">contextvars</span><span class=\"o\">.</span><span class=\"n\">ContextVar</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;deadlock_context&quot;</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Maintaining a weak reference to the context ensures that thread pools are</span>\n    <span class=\"c1\"># erased once the context goes out of scope. This terminates the thread pool.</span>\n    <span class=\"n\">context_to_thread_executor</span><span class=\"p\">:</span> <span class=\"s2\">&quot;weakref.WeakKeyDictionary[object, ThreadPoolExecutor]&quot;</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">WeakKeyDictionary</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span>\n        <span class=\"n\">thread_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s2\">&quot;ThreadPoolExecutor&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"n\">_iscoroutinefunction_or_partial</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"n\">_iscoroutinefunction_or_partial</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__call__&quot;</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">))</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;sync_to_async can only be applied to sync functions.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thread_sensitive</span> <span class=\"o\">=</span> <span class=\"n\">thread_sensitive</span>\n        <span class=\"n\">markcoroutinefunction</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">thread_sensitive</span> <span class=\"ow\">and</span> <span class=\"n\">executor</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;executor must not be set when thread_sensitive is True&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_executor</span> <span class=\"o\">=</span> <span class=\"n\">executor</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__self__</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__self__</span>  <span class=\"c1\"># type: ignore</span>\n        <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_running_loop</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Work out what thread to run the code in</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_thread_sensitive</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">AsyncToSync</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"p\">,</span> <span class=\"s2\">&quot;current&quot;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># If we have a parent sync thread above somewhere, use that</span>\n                <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">AsyncToSync</span><span class=\"o\">.</span><span class=\"n\">executors</span><span class=\"o\">.</span><span class=\"n\">current</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread_sensitive_context</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread_sensitive_context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                <span class=\"kc\">None</span>\n            <span class=\"p\">):</span>\n                <span class=\"c1\"># If we have a way of retrieving the current context, attempt</span>\n                <span class=\"c1\"># to use a per-context thread pool executor</span>\n                <span class=\"n\">thread_sensitive_context</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread_sensitive_context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n\n                <span class=\"k\">if</span> <span class=\"n\">thread_sensitive_context</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_to_thread_executor</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Re-use thread executor in current context</span>\n                    <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_to_thread_executor</span><span class=\"p\">[</span><span class=\"n\">thread_sensitive_context</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Create new thread executor in current context</span>\n                    <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_to_thread_executor</span><span class=\"p\">[</span><span class=\"n\">thread_sensitive_context</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">executor</span>\n            <span class=\"k\">elif</span> <span class=\"n\">loop</span> <span class=\"ow\">in</span> <span class=\"n\">AsyncToSync</span><span class=\"o\">.</span><span class=\"n\">loop_thread_executors</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Re-use thread executor for running loop</span>\n                <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">AsyncToSync</span><span class=\"o\">.</span><span class=\"n\">loop_thread_executors</span><span class=\"p\">[</span><span class=\"n\">loop</span><span class=\"p\">]</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deadlock_context</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deadlock_context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Single thread executor already being used, would deadlock&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Otherwise, we run it in a fixed single thread</span>\n                <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">single_thread_executor</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deadlock_context</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deadlock_context</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Use the passed in executor, or the loop&#39;s default if it is None</span>\n            <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_executor</span>\n\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">contextvars</span><span class=\"o\">.</span><span class=\"n\">copy_context</span><span class=\"p\">()</span>\n        <span class=\"n\">child</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">run</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,)</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Run the code in the right thread</span>\n            <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_in_executor</span><span class=\"p\">(</span>\n                <span class=\"n\">executor</span><span class=\"p\">,</span>\n                <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thread_handler</span><span class=\"p\">,</span>\n                    <span class=\"n\">loop</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_current_task</span><span class=\"p\">(),</span>\n                    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exc_info</span><span class=\"p\">(),</span>\n                    <span class=\"n\">func</span><span class=\"p\">,</span>\n                    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">ret</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">wait_for</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">_restore_context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deadlock_context</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">deadlock_context</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">ret</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">,</span> <span class=\"n\">objtype</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Include self for methods</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__call__</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">update_wrapper</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">thread_handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">source_task</span><span class=\"p\">,</span> <span class=\"n\">exc_info</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Wraps the sync application with exception handling.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Set the threadlocal for AsyncToSync</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">threadlocal</span><span class=\"o\">.</span><span class=\"n\">main_event_loop</span> <span class=\"o\">=</span> <span class=\"n\">loop</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">threadlocal</span><span class=\"o\">.</span><span class=\"n\">main_event_loop_pid</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getpid</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Set the task mapping (used for the locals module)</span>\n        <span class=\"n\">current_thread</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">current_thread</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">AsyncToSync</span><span class=\"o\">.</span><span class=\"n\">launch_map</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">source_task</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">current_thread</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Our parent task was launched from this same thread, so don&#39;t make</span>\n            <span class=\"c1\"># a launch map entry - let it shortcut over us! (and stop infinite loops)</span>\n            <span class=\"n\">parent_set</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launch_map</span><span class=\"p\">[</span><span class=\"n\">current_thread</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">source_task</span>\n            <span class=\"n\">parent_set</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># Run the function</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If we have an exception, run the function inside the except block</span>\n            <span class=\"c1\"># after raising it so exc_info is correctly populated.</span>\n            <span class=\"k\">if</span> <span class=\"n\">exc_info</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">exc_info</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">BaseException</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Only delete the launch_map parent if we set it, otherwise it is</span>\n            <span class=\"c1\"># from someone else.</span>\n            <span class=\"k\">if</span> <span class=\"n\">parent_set</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">launch_map</span><span class=\"p\">[</span><span class=\"n\">current_thread</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_current_task</span><span class=\"p\">():</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Implementation of asyncio.current_task()</span>\n<span class=\"sd\">        that returns None if there is no task.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">current_task</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<span class=\"c1\"># Lowercase aliases (and decorator friendliness)</span>\n<span class=\"n\">async_to_sync</span> <span class=\"o\">=</span> <span class=\"n\">AsyncToSync</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_to_async</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">thread_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s2\">&quot;ThreadPoolExecutor&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">]],</span> <span class=\"n\">SyncToAsync</span><span class=\"p\">]:</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@overload</span>\n<span class=\"k\">def</span> <span class=\"nf\">sync_to_async</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">],</span>\n    <span class=\"n\">thread_sensitive</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">executor</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"s2\">&quot;ThreadPoolExecutor&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">SyncToAsync</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n\n<div class=\"viewcode-block\" id=\"sync_to_async\"><a class=\"viewcode-back\" href=\"../../../topics/async/#asgiref.sync.sync_to_async\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">sync_to_async</span><span class=\"p\">(</span>\n    <span class=\"n\">func</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">thread_sensitive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">func</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">:</span> <span class=\"n\">SyncToAsync</span><span class=\"p\">(</span>\n            <span class=\"n\">f</span><span class=\"p\">,</span>\n            <span class=\"n\">thread_sensitive</span><span class=\"o\">=</span><span class=\"n\">thread_sensitive</span><span class=\"p\">,</span>\n            <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">executor</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">SyncToAsync</span><span class=\"p\">(</span>\n        <span class=\"n\">func</span><span class=\"p\">,</span>\n        <span class=\"n\">thread_sensitive</span><span class=\"o\">=</span><span class=\"n\">thread_sensitive</span><span class=\"p\">,</span>\n        <span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">executor</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/asgiref/sync", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}