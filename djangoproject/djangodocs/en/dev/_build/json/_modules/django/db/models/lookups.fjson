{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.db.models.lookups", "body": "<h1>Source code for django.db.models.lookups</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">EmptyResultSet</span><span class=\"p\">,</span> <span class=\"n\">FullResultSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.expressions</span> <span class=\"kn\">import</span> <span class=\"n\">Case</span><span class=\"p\">,</span> <span class=\"n\">Expression</span><span class=\"p\">,</span> <span class=\"n\">Func</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">When</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.fields</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">BooleanField</span><span class=\"p\">,</span>\n    <span class=\"n\">CharField</span><span class=\"p\">,</span>\n    <span class=\"n\">DateTimeField</span><span class=\"p\">,</span>\n    <span class=\"n\">Field</span><span class=\"p\">,</span>\n    <span class=\"n\">IntegerField</span><span class=\"p\">,</span>\n    <span class=\"n\">UUIDField</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.query_utils</span> <span class=\"kn\">import</span> <span class=\"n\">RegisterLookupMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.hashable</span> <span class=\"kn\">import</span> <span class=\"n\">make_hashable</span>\n\n\n<div class=\"viewcode-block\" id=\"Lookup\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/lookups/#django.db.models.Lookup\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Lookup</span><span class=\"p\">(</span><span class=\"n\">Expression</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">prepare_rhs</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">can_use_none_as_rhs</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_prep_lookup</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_prep_lhs</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_bilateral_transforms&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">bilateral_transforms</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">get_bilateral_transforms</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bilateral_transforms</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">bilateral_transforms</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Warn the user as soon as possible if they are trying to apply</span>\n            <span class=\"c1\"># a bilateral transformation on a nested QuerySet: that won&#39;t work.</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">django.db.models.sql.query</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>  <span class=\"c1\"># avoid circular import</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">Query</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Bilateral transformations on nested querysets are not implemented.&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral_transforms</span> <span class=\"o\">=</span> <span class=\"n\">bilateral_transforms</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">apply_bilateral_transforms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">transform</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral_transforms</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">transform</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\">(</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"si\">!r}</span><span class=\"s2\">, </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"si\">!r}</span><span class=\"s2\">)&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">batch_process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">rhs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral_transforms</span><span class=\"p\">:</span>\n            <span class=\"n\">sqls</span><span class=\"p\">,</span> <span class=\"n\">sqls_params</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">rhs</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"p\">)</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_bilateral_transforms</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n                <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">sql_params</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"n\">sqls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n                <span class=\"n\">sqls_params</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">sql_params</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_db_prep_lookup</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n            <span class=\"n\">sqls</span><span class=\"p\">,</span> <span class=\"n\">sqls_params</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n        <span class=\"k\">return</span> <span class=\"n\">sqls</span><span class=\"p\">,</span> <span class=\"n\">sqls_params</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_source_expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_source_expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">new_exprs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">new_exprs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"n\">new_exprs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">new_exprs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prepare_rhs</span> <span class=\"ow\">or</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;output_field&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_prep_value&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_prep_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span>\n        <span class=\"k\">return</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">])</span>\n\n<div class=\"viewcode-block\" id=\"Lookup.process_lhs\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/lookups/#django.db.models.Lookup.process_lhs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">process_lhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">lhs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"n\">lhs</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">Lookup</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Wrapped in parentheses to respect operator precedence.</span>\n            <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;(</span><span class=\"si\">{</span><span class=\"n\">sql</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span></div>\n\n<div class=\"viewcode-block\" id=\"Lookup.process_rhs\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/lookups/#django.db.models.Lookup.process_rhs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral_transforms</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n                <span class=\"c1\"># Do not call get_db_prep_lookup here as the value will be</span>\n                <span class=\"c1\"># transformed before being used for lookup</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"p\">)</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apply_bilateral_transforms</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;as_sql&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Ensure expression is wrapped in parentheses to respect operator</span>\n            <span class=\"c1\"># precedence but avoid double wrapping as it can be misinterpreted</span>\n            <span class=\"c1\"># on some backends (e.g. subqueries on SQLite).</span>\n            <span class=\"k\">if</span> <span class=\"n\">sql</span> <span class=\"ow\">and</span> <span class=\"n\">sql</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;(&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(</span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sql</span>\n            <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_db_prep_lookup</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">rhs_is_direct_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;as_sql&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_group_by_cols</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">cols</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">source</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">():</span>\n            <span class=\"n\">cols</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">get_group_by_cols</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">cols</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Oracle doesn&#39;t allow EXISTS() and filters to be compared to another</span>\n        <span class=\"c1\"># expression unless they&#39;re wrapped in a CASE WHEN.</span>\n        <span class=\"n\">wrapped</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">exprs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">expr</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">conditional_expression_supported_in_where_clause</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">):</span>\n                <span class=\"n\">expr</span> <span class=\"o\">=</span> <span class=\"n\">Case</span><span class=\"p\">(</span><span class=\"n\">When</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">,</span> <span class=\"n\">then</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">wrapped</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">exprs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">expr</span><span class=\"p\">)</span>\n        <span class=\"n\">lookup</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">exprs</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">wrapped</span> <span class=\"k\">else</span> <span class=\"bp\">self</span>\n        <span class=\"k\">return</span> <span class=\"n\">lookup</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">BooleanField</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">identity</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Lookup</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">NotImplemented</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">identity</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">identity</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__hash__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">hash</span><span class=\"p\">(</span><span class=\"n\">make_hashable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">identity</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_expression</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">for_save</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_summary</span> <span class=\"o\">=</span> <span class=\"n\">summarize</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">lhs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span>\n            <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"p\">,</span> <span class=\"n\">for_save</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span>\n                <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"p\">,</span> <span class=\"n\">for_save</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">select_format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Wrap filters with a CASE WHEN expression if a database backend</span>\n        <span class=\"c1\"># (e.g. Oracle) doesn&#39;t support boolean expression in SELECT or GROUP</span>\n        <span class=\"c1\"># BY list.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">supports_boolean_expr_in_select_clause</span><span class=\"p\">:</span>\n            <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;CASE WHEN </span><span class=\"si\">{</span><span class=\"n\">sql</span><span class=\"si\">}</span><span class=\"s2\"> THEN 1 ELSE 0 END&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">allowed_default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">allowed_default</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">allowed_default</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Transform\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/lookups/#django.db.models.Transform\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Transform</span><span class=\"p\">(</span><span class=\"n\">RegisterLookupMixin</span><span class=\"p\">,</span> <span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    RegisterLookupMixin() is first so that get_lookup() and get_transform()</span>\n<span class=\"sd\">    first examine self and then check output_field.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">bilateral</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">arity</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_bilateral_transforms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_bilateral_transforms&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">bilateral_transforms</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">get_bilateral_transforms</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bilateral_transforms</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral</span><span class=\"p\">:</span>\n            <span class=\"n\">bilateral_transforms</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">bilateral_transforms</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BuiltinLookup</span><span class=\"p\">(</span><span class=\"n\">Lookup</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process_lhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">lhs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">lhs</span><span class=\"p\">)</span>\n        <span class=\"n\">field_internal_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_internal_type</span><span class=\"p\">()</span>\n        <span class=\"n\">db_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">db_type</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">lhs_sql</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">field_cast_sql</span><span class=\"p\">(</span><span class=\"n\">db_type</span><span class=\"p\">,</span> <span class=\"n\">field_internal_type</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">lhs_sql</span>\n        <span class=\"n\">lhs_sql</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">lookup_cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_name</span><span class=\"p\">,</span> <span class=\"n\">field_internal_type</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"n\">lhs_sql</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs_sql</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">rhs_params</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs_sql</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_rhs_op</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs_sql</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">rhs_sql</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_rhs_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">operators</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_name</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"n\">rhs</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FieldGetDbPrepValueMixin</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Some lookups require Field.get_db_prep_value() to be called on their</span>\n<span class=\"sd\">    inputs.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">get_db_prep_lookup_value_is_iterable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"c1\"># For relational fields, use the &#39;target_field&#39; attribute of the</span>\n        <span class=\"c1\"># output_field.</span>\n        <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"p\">,</span> <span class=\"s2\">&quot;target_field&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">get_db_prep_value</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_db_prep_value&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_db_prep_value</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"n\">get_db_prep_value</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">prepared</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_db_prep_lookup_value_is_iterable</span>\n            <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">get_db_prep_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">prepared</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)],</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FieldGetDbPrepValueIterableMixin</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Some lookups require Field.get_db_prep_value() to be called on each value</span>\n<span class=\"sd\">    in an iterable.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">get_db_prep_lookup_value_is_iterable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n        <span class=\"n\">prepared_values</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">rhs_value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">rhs_value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># An expression will be handled by the database but can coexist</span>\n                <span class=\"c1\"># alongside real values.</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prepare_rhs</span> <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_prep_value&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">rhs_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_prep_value</span><span class=\"p\">(</span><span class=\"n\">rhs_value</span><span class=\"p\">)</span>\n            <span class=\"n\">prepared_values</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">rhs_value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">prepared_values</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n            <span class=\"c1\"># rhs should be an iterable of values. Use batch_process_rhs()</span>\n            <span class=\"c1\"># to prepare/transform those values.</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">batch_process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_expression_parameter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">param</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"s2\">&quot;as_sql&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">batch_process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">pre_processed</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">batch_process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># The params list may contain expressions which compile to a</span>\n        <span class=\"c1\"># sql/param pair. Zip them to get sql and param pairs that refer to the</span>\n        <span class=\"c1\"># same argument and attempt to replace them with the result of</span>\n        <span class=\"c1\"># compiling the param step.</span>\n        <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">zip</span><span class=\"p\">(</span>\n            <span class=\"o\">*</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolve_expression_parameter</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">param</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">pre_processed</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">from_iterable</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostgresOperatorLookup</span><span class=\"p\">(</span><span class=\"n\">Lookup</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Lookup defined by operators on PostgreSQL.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">postgres_operator</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_postgresql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">lhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">lhs_params</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">rhs_params</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">postgres_operator</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">Exact</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;exact&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.db.models.sql.query</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>  <span class=\"c1\"># avoid circular import</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">Query</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">has_limit_one</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">has_select_fields</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">clear_select_clause</span><span class=\"p\">()</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">add_fields</span><span class=\"p\">([</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The QuerySet value for an exact lookup must be limited to &quot;</span>\n                    <span class=\"s2\">&quot;one result using slicing.&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_prep_lookup</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Avoid comparison against direct rhs if lhs is a boolean value. That</span>\n        <span class=\"c1\"># turns &quot;boolfield__exact=True&quot; into &quot;WHERE boolean_field&quot; instead of</span>\n        <span class=\"c1\"># &quot;WHERE boolean_field = True&quot; when allowed.</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;conditional&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">conditional_expression_supported_in_where_clause</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;NOT </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span>\n            <span class=\"k\">return</span> <span class=\"n\">template</span> <span class=\"o\">%</span> <span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IExact</span><span class=\"p\">(</span><span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;iexact&quot;</span>\n    <span class=\"n\">prepare_rhs</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">qn</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">qn</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">params</span><span class=\"p\">:</span>\n            <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">prep_for_iexact_query</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">GreaterThan</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gt&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">GreaterThanOrEqual</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gte&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">LessThan</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;lt&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">LessThanOrEqual</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;lte&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">IntegerFieldOverflow</span><span class=\"p\">:</span>\n    <span class=\"n\">underflow_exception</span> <span class=\"o\">=</span> <span class=\"n\">EmptyResultSet</span>\n    <span class=\"n\">overflow_exception</span> <span class=\"o\">=</span> <span class=\"n\">EmptyResultSet</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n            <span class=\"n\">field_internal_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_internal_type</span><span class=\"p\">()</span>\n            <span class=\"n\">min_value</span><span class=\"p\">,</span> <span class=\"n\">max_value</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">integer_field_range</span><span class=\"p\">(</span>\n                <span class=\"n\">field_internal_type</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">min_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">rhs</span> <span class=\"o\">&lt;</span> <span class=\"n\">min_value</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">underflow_exception</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">rhs</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_value</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">overflow_exception</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">IntegerFieldFloatRounding</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Allow floats to work as query values for IntegerField. Without this, the</span>\n<span class=\"sd\">    decimal portion of the float would always be discarded.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_prep_lookup</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@IntegerField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntegerFieldExact</span><span class=\"p\">(</span><span class=\"n\">IntegerFieldOverflow</span><span class=\"p\">,</span> <span class=\"n\">Exact</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@IntegerField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntegerGreaterThan</span><span class=\"p\">(</span><span class=\"n\">IntegerFieldOverflow</span><span class=\"p\">,</span> <span class=\"n\">GreaterThan</span><span class=\"p\">):</span>\n    <span class=\"n\">underflow_exception</span> <span class=\"o\">=</span> <span class=\"n\">FullResultSet</span>\n\n\n<span class=\"nd\">@IntegerField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntegerGreaterThanOrEqual</span><span class=\"p\">(</span>\n    <span class=\"n\">IntegerFieldOverflow</span><span class=\"p\">,</span> <span class=\"n\">IntegerFieldFloatRounding</span><span class=\"p\">,</span> <span class=\"n\">GreaterThanOrEqual</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">underflow_exception</span> <span class=\"o\">=</span> <span class=\"n\">FullResultSet</span>\n\n\n<span class=\"nd\">@IntegerField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntegerLessThan</span><span class=\"p\">(</span><span class=\"n\">IntegerFieldOverflow</span><span class=\"p\">,</span> <span class=\"n\">IntegerFieldFloatRounding</span><span class=\"p\">,</span> <span class=\"n\">LessThan</span><span class=\"p\">):</span>\n    <span class=\"n\">overflow_exception</span> <span class=\"o\">=</span> <span class=\"n\">FullResultSet</span>\n\n\n<span class=\"nd\">@IntegerField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntegerLessThanOrEqual</span><span class=\"p\">(</span><span class=\"n\">IntegerFieldOverflow</span><span class=\"p\">,</span> <span class=\"n\">LessThanOrEqual</span><span class=\"p\">):</span>\n    <span class=\"n\">overflow_exception</span> <span class=\"o\">=</span> <span class=\"n\">FullResultSet</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">In</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueIterableMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;in&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.db.models.sql.query</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>  <span class=\"c1\"># avoid circular import</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">Query</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">clear_ordering</span><span class=\"p\">(</span><span class=\"n\">clear_default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">has_select_fields</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">clear_select_clause</span><span class=\"p\">()</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">add_fields</span><span class=\"p\">([</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_prep_lookup</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">db_rhs</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_db&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">db_rhs</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">db_rhs</span> <span class=\"o\">!=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Subqueries aren&#39;t allowed across different databases. Force &quot;</span>\n                <span class=\"s2\">&quot;the inner query to be evaluated using `list(inner_query)`.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Remove None from the list as NULL is never equal to anything.</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">OrderedSet</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n                <span class=\"n\">rhs</span><span class=\"o\">.</span><span class=\"n\">discard</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>  <span class=\"c1\"># Unhashable items in self.rhs</span>\n                <span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">r</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"k\">if</span> <span class=\"n\">r</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">]</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">rhs</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">EmptyResultSet</span>\n\n            <span class=\"c1\"># rhs should be an iterable; use batch_process_rhs() to</span>\n            <span class=\"c1\"># prepare/transform those values.</span>\n            <span class=\"n\">sqls</span><span class=\"p\">,</span> <span class=\"n\">sqls_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">batch_process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>\n            <span class=\"n\">placeholder</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(&quot;</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sqls</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">placeholder</span><span class=\"p\">,</span> <span class=\"n\">sqls_params</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_rhs_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;IN </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">rhs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">max_in_list_size</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">max_in_list_size</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">()</span>\n            <span class=\"ow\">and</span> <span class=\"n\">max_in_list_size</span>\n            <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_in_list_size</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">split_parameter_list_as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">split_parameter_list_as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is a special case for databases which limit the number of</span>\n        <span class=\"c1\"># elements which can appear in an &#39;IN&#39; clause.</span>\n        <span class=\"n\">max_in_list_size</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">max_in_list_size</span><span class=\"p\">()</span>\n        <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">lhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">batch_process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">in_clause_elements</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">offset</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">rhs_params</span><span class=\"p\">),</span> <span class=\"n\">max_in_list_size</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">offset</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">in_clause_elements</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot; OR &quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">in_clause_elements</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> IN (&quot;</span> <span class=\"o\">%</span> <span class=\"n\">lhs</span><span class=\"p\">)</span>\n            <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">lhs_params</span><span class=\"p\">)</span>\n            <span class=\"n\">sqls</span> <span class=\"o\">=</span> <span class=\"n\">rhs</span><span class=\"p\">[</span><span class=\"n\">offset</span> <span class=\"p\">:</span> <span class=\"n\">offset</span> <span class=\"o\">+</span> <span class=\"n\">max_in_list_size</span><span class=\"p\">]</span>\n            <span class=\"n\">sqls_params</span> <span class=\"o\">=</span> <span class=\"n\">rhs_params</span><span class=\"p\">[</span><span class=\"n\">offset</span> <span class=\"p\">:</span> <span class=\"n\">offset</span> <span class=\"o\">+</span> <span class=\"n\">max_in_list_size</span><span class=\"p\">]</span>\n            <span class=\"n\">param_group</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sqls</span><span class=\"p\">)</span>\n            <span class=\"n\">in_clause_elements</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">param_group</span><span class=\"p\">)</span>\n            <span class=\"n\">in_clause_elements</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">sqls_params</span><span class=\"p\">)</span>\n        <span class=\"n\">in_clause_elements</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">in_clause_elements</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PatternLookup</span><span class=\"p\">(</span><span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">param_pattern</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%%%s%%</span><span class=\"s2\">&quot;</span>\n    <span class=\"n\">prepare_rhs</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_rhs_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Assume we are in startswith. We need to produce SQL like:</span>\n        <span class=\"c1\">#     col LIKE %s, [&#39;thevalue%&#39;]</span>\n        <span class=\"c1\"># For python values we can (and should) do that directly in Python,</span>\n        <span class=\"c1\"># but if the value is for example reference to other column, then</span>\n        <span class=\"c1\"># we need to add the % pattern match to the lookup by something like</span>\n        <span class=\"c1\">#     col LIKE othercol || &#39;%%&#39;</span>\n        <span class=\"c1\"># So, for Python values we don&#39;t need any special pattern, but for</span>\n        <span class=\"c1\"># SQL reference values or SQL transformations we need the correct</span>\n        <span class=\"c1\"># pattern added.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;as_sql&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral_transforms</span><span class=\"p\">:</span>\n            <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">pattern_ops</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_name</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">pattern_esc</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_rhs_op</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">qn</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">qn</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">params</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">bilateral_transforms</span><span class=\"p\">:</span>\n            <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param_pattern</span> <span class=\"o\">%</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">prep_for_like_query</span><span class=\"p\">(</span>\n                <span class=\"n\">params</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">Contains</span><span class=\"p\">(</span><span class=\"n\">PatternLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;contains&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IContains</span><span class=\"p\">(</span><span class=\"n\">Contains</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;icontains&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">StartsWith</span><span class=\"p\">(</span><span class=\"n\">PatternLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;startswith&quot;</span>\n    <span class=\"n\">param_pattern</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s%%</span><span class=\"s2\">&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IStartsWith</span><span class=\"p\">(</span><span class=\"n\">StartsWith</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;istartswith&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">EndsWith</span><span class=\"p\">(</span><span class=\"n\">PatternLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;endswith&quot;</span>\n    <span class=\"n\">param_pattern</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%%%s</span><span class=\"s2\">&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IEndsWith</span><span class=\"p\">(</span><span class=\"n\">EndsWith</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;iendswith&quot;</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">Range</span><span class=\"p\">(</span><span class=\"n\">FieldGetDbPrepValueIterableMixin</span><span class=\"p\">,</span> <span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;range&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_rhs_op</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;BETWEEN </span><span class=\"si\">%s</span><span class=\"s2\"> AND </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">rhs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">rhs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IsNull</span><span class=\"p\">(</span><span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;isnull&quot;</span>\n    <span class=\"n\">prepare_rhs</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The QuerySet value for an isnull lookup must be True or False.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> IS NULL&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> IS NOT NULL&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">Regex</span><span class=\"p\">(</span><span class=\"n\">BuiltinLookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;regex&quot;</span>\n    <span class=\"n\">prepare_rhs</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_name</span> <span class=\"ow\">in</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">operators</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">lhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n            <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n            <span class=\"n\">sql_template</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">regex_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">sql_template</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">),</span> <span class=\"n\">lhs_params</span> <span class=\"o\">+</span> <span class=\"n\">rhs_params</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">IRegex</span><span class=\"p\">(</span><span class=\"n\">Regex</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;iregex&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YearLookup</span><span class=\"p\">(</span><span class=\"n\">Lookup</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">year_lookup_bounds</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">ExtractIsoYear</span>\n\n        <span class=\"n\">iso_year</span> <span class=\"o\">=</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">ExtractIsoYear</span><span class=\"p\">)</span>\n        <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">output_field</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">output_field</span><span class=\"p\">,</span> <span class=\"n\">DateTimeField</span><span class=\"p\">):</span>\n            <span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">year_lookup_bounds_for_datetime_field</span><span class=\"p\">(</span>\n                <span class=\"n\">year</span><span class=\"p\">,</span>\n                <span class=\"n\">iso_year</span><span class=\"o\">=</span><span class=\"n\">iso_year</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">bounds</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">year_lookup_bounds_for_date_field</span><span class=\"p\">(</span>\n                <span class=\"n\">year</span><span class=\"p\">,</span>\n                <span class=\"n\">iso_year</span><span class=\"o\">=</span><span class=\"n\">iso_year</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">bounds</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Avoid the extract operation if the rhs is a direct value to allow</span>\n        <span class=\"c1\"># indexes to be used.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Skip the extract part by directly using the originating field,</span>\n            <span class=\"c1\"># that is self.lhs.lhs.</span>\n            <span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">)</span>\n            <span class=\"n\">rhs_sql</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n            <span class=\"n\">rhs_sql</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_direct_rhs_sql</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs_sql</span><span class=\"p\">)</span>\n            <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">year_lookup_bounds</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n            <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_bound_params</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs_sql</span><span class=\"p\">,</span> <span class=\"n\">rhs_sql</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_direct_rhs_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">operators</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_name</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"n\">rhs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_bound_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of YearLookup must provide a get_bound_params() method&quot;</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YearExact</span><span class=\"p\">(</span><span class=\"n\">YearLookup</span><span class=\"p\">,</span> <span class=\"n\">Exact</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_direct_rhs_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;BETWEEN </span><span class=\"si\">%s</span><span class=\"s2\"> AND </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_bound_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YearGt</span><span class=\"p\">(</span><span class=\"n\">YearLookup</span><span class=\"p\">,</span> <span class=\"n\">GreaterThan</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bound_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"p\">,)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YearGte</span><span class=\"p\">(</span><span class=\"n\">YearLookup</span><span class=\"p\">,</span> <span class=\"n\">GreaterThanOrEqual</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bound_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YearLt</span><span class=\"p\">(</span><span class=\"n\">YearLookup</span><span class=\"p\">,</span> <span class=\"n\">LessThan</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bound_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">YearLte</span><span class=\"p\">(</span><span class=\"n\">YearLookup</span><span class=\"p\">,</span> <span class=\"n\">LessThanOrEqual</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_bound_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">finish</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">finish</span><span class=\"p\">,)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UUIDTextMixin</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Strip hyphens from a value when filtering a UUIDField on backends without</span>\n<span class=\"sd\">    a native datatype for UUID.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_rhs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">qn</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">has_native_uuid_field</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Replace</span>\n\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs_is_direct_value</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span> <span class=\"o\">=</span> <span class=\"n\">Replace</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">),</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">),</span> <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">qn</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDIExact</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">IExact</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDContains</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">Contains</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDIContains</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">IContains</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDStartsWith</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">StartsWith</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDIStartsWith</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">IStartsWith</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDEndsWith</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">EndsWith</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@UUIDField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">UUIDIEndsWith</span><span class=\"p\">(</span><span class=\"n\">UUIDTextMixin</span><span class=\"p\">,</span> <span class=\"n\">IEndsWith</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>", "current_page_name": "_modules/django/db/models/lookups", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
