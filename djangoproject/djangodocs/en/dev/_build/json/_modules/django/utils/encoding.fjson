{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.utils.encoding", "body": "<h1>Source code for django.utils.encoding</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">codecs</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">locale</span>\n<span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">types</span> <span class=\"kn\">import</span> <span class=\"n\">NoneType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">Promise</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DjangoUnicodeDecodeError</span><span class=\"p\">(</span><span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">obj</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">. You passed in </span><span class=\"si\">%r</span><span class=\"s2\"> (</span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__str__</span><span class=\"p\">(),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">obj</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"smart_str\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.smart_str\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">smart_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span> <span class=\"n\">strings_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s2\">&quot;strict&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a string representing &#39;s&#39;. Treat bytestrings using the &#39;encoding&#39;</span>\n<span class=\"sd\">    codec.</span>\n\n<span class=\"sd\">    If strings_only is True, don&#39;t convert (some) non-string-like objects.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">Promise</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The input is the result of a gettext_lazy() call.</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    <span class=\"k\">return</span> <span class=\"n\">force_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">strings_only</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span></div>\n\n\n<span class=\"n\">_PROTECTED_TYPES</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">NoneType</span><span class=\"p\">,</span>\n    <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"nb\">float</span><span class=\"p\">,</span>\n    <span class=\"n\">Decimal</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span>\n    <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"is_protected_type\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.is_protected_type\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">is_protected_type</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Determine if the object instance is of a protected type.</span>\n\n<span class=\"sd\">    Objects of protected types are preserved as-is when passed to</span>\n<span class=\"sd\">    force_str(strings_only=True).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">_PROTECTED_TYPES</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"force_str\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.force_str\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">force_str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span> <span class=\"n\">strings_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s2\">&quot;strict&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Similar to smart_str(), except that lazy instances are resolved to</span>\n<span class=\"sd\">    strings, rather than kept as lazy objects.</span>\n\n<span class=\"sd\">    If strings_only is True, don&#39;t convert (some) non-string-like objects.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Handle the common case first for performance reasons.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    <span class=\"k\">if</span> <span class=\"n\">strings_only</span> <span class=\"ow\">and</span> <span class=\"n\">is_protected_type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">DjangoUnicodeDecodeError</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span></div>\n\n\n<div class=\"viewcode-block\" id=\"smart_bytes\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.smart_bytes\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">smart_bytes</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span> <span class=\"n\">strings_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s2\">&quot;strict&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a bytestring version of &#39;s&#39;, encoded as specified in &#39;encoding&#39;.</span>\n\n<span class=\"sd\">    If strings_only is True, don&#39;t convert (some) non-string-like objects.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">Promise</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The input is the result of a gettext_lazy() call.</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    <span class=\"k\">return</span> <span class=\"n\">force_bytes</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">strings_only</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"force_bytes\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.force_bytes\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">force_bytes</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span> <span class=\"n\">strings_only</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"o\">=</span><span class=\"s2\">&quot;strict&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Similar to smart_bytes, except that lazy instances are resolved to</span>\n<span class=\"sd\">    strings, rather than kept as lazy objects.</span>\n\n<span class=\"sd\">    If strings_only is True, don&#39;t convert (some) non-string-like objects.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Handle the common case first for performance reasons.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">encoding</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">s</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">strings_only</span> <span class=\"ow\">and</span> <span class=\"n\">is_protected_type</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"nb\">memoryview</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"iri_to_uri\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.iri_to_uri\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">iri_to_uri</span><span class=\"p\">(</span><span class=\"n\">iri</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert an Internationalized Resource Identifier (IRI) portion to a URI</span>\n<span class=\"sd\">    portion that is suitable for inclusion in a URL.</span>\n\n<span class=\"sd\">    This is the algorithm from RFC 3987 Section 3.1, slightly simplified since</span>\n<span class=\"sd\">    the input is assumed to be a string rather than an arbitrary byte stream.</span>\n\n<span class=\"sd\">    Take an IRI (string or UTF-8 bytes, e.g. &#39;/I \u2665 Django/&#39; or</span>\n<span class=\"sd\">    b&#39;/I \\xe2\\x99\\xa5 Django/&#39;) and return a string containing the encoded</span>\n<span class=\"sd\">    result with ASCII chars only (e.g. &#39;/I%20%E2%99%A5%20Django/&#39;).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># The list of safe characters here is constructed from the &quot;reserved&quot; and</span>\n    <span class=\"c1\"># &quot;unreserved&quot; characters specified in RFC 3986 Sections 2.2 and 2.3:</span>\n    <span class=\"c1\">#     reserved    = gen-delims / sub-delims</span>\n    <span class=\"c1\">#     gen-delims  = &quot;:&quot; / &quot;/&quot; / &quot;?&quot; / &quot;#&quot; / &quot;[&quot; / &quot;]&quot; / &quot;@&quot;</span>\n    <span class=\"c1\">#     sub-delims  = &quot;!&quot; / &quot;$&quot; / &quot;&amp;&quot; / &quot;&#39;&quot; / &quot;(&quot; / &quot;)&quot;</span>\n    <span class=\"c1\">#                   / &quot;*&quot; / &quot;+&quot; / &quot;,&quot; / &quot;;&quot; / &quot;=&quot;</span>\n    <span class=\"c1\">#     unreserved  = ALPHA / DIGIT / &quot;-&quot; / &quot;.&quot; / &quot;_&quot; / &quot;~&quot;</span>\n    <span class=\"c1\"># Of the unreserved characters, urllib.parse.quote() already considers all</span>\n    <span class=\"c1\"># but the ~ safe.</span>\n    <span class=\"c1\"># The % character is also added to the list of safe characters here, as the</span>\n    <span class=\"c1\"># end of RFC 3987 Section 3.1 specifically mentions that % must not be</span>\n    <span class=\"c1\"># converted.</span>\n    <span class=\"k\">if</span> <span class=\"n\">iri</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">iri</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">iri</span><span class=\"p\">,</span> <span class=\"n\">Promise</span><span class=\"p\">):</span>\n        <span class=\"n\">iri</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">iri</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">iri</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"s2\">&quot;/#%[]=:;$&amp;()+,!?*@&#39;~&quot;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"c1\"># List of byte values that uri_to_iri() decodes from percent encoding.</span>\n<span class=\"c1\"># First, the unreserved characters from RFC 3986:</span>\n<span class=\"n\">_ascii_ranges</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">45</span><span class=\"p\">,</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"mi\">95</span><span class=\"p\">,</span> <span class=\"mi\">126</span><span class=\"p\">],</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">91</span><span class=\"p\">),</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">97</span><span class=\"p\">,</span> <span class=\"mi\">123</span><span class=\"p\">)]</span>\n<span class=\"n\">_hextobyte</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"p\">(</span><span class=\"n\">fmt</span> <span class=\"o\">%</span> <span class=\"n\">char</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">():</span> <span class=\"nb\">bytes</span><span class=\"p\">((</span><span class=\"n\">char</span><span class=\"p\">,))</span>\n    <span class=\"k\">for</span> <span class=\"n\">ascii_range</span> <span class=\"ow\">in</span> <span class=\"n\">_ascii_ranges</span>\n    <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">ascii_range</span>\n    <span class=\"k\">for</span> <span class=\"n\">fmt</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;</span><span class=\"si\">%02x</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">%02X</span><span class=\"s2\">&quot;</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n<span class=\"c1\"># And then everything above 128, because bytes \u2265 128 are part of multibyte</span>\n<span class=\"c1\"># Unicode characters.</span>\n<span class=\"n\">_hexdig</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0123456789ABCDEFabcdef&quot;</span>\n<span class=\"n\">_hextobyte</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n    <span class=\"p\">{(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">():</span> <span class=\"nb\">bytes</span><span class=\"o\">.</span><span class=\"n\">fromhex</span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">a</span> <span class=\"ow\">in</span> <span class=\"n\">_hexdig</span><span class=\"p\">[</span><span class=\"mi\">8</span><span class=\"p\">:]</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">_hexdig</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"uri_to_iri\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.uri_to_iri\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">uri_to_iri</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert a Uniform Resource Identifier(URI) into an Internationalized</span>\n<span class=\"sd\">    Resource Identifier(IRI).</span>\n\n<span class=\"sd\">    This is the algorithm from RFC 3987 Section 3.2, excluding step 4.</span>\n\n<span class=\"sd\">    Take an URI in ASCII bytes (e.g. &#39;/I%20%E2%99%A5%20Django/&#39;) and return</span>\n<span class=\"sd\">    a string containing the encoded result (e.g. &#39;/I%20\u2665%20Django/&#39;).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">uri</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">uri</span>\n    <span class=\"n\">uri</span> <span class=\"o\">=</span> <span class=\"n\">force_bytes</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Fast selective unquote: First, split on &#39;%&#39; and then starting with the</span>\n    <span class=\"c1\"># second block, decode the first 2 bytes if they represent a hex code to</span>\n    <span class=\"c1\"># decode. The rest of the block is the part after &#39;%AB&#39;, not containing</span>\n    <span class=\"c1\"># any &#39;%&#39;. Add that to the output without further processing.</span>\n    <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">iri</span> <span class=\"o\">=</span> <span class=\"n\">uri</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]]</span>\n        <span class=\"n\">append</span> <span class=\"o\">=</span> <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span>\n        <span class=\"n\">hextobyte</span> <span class=\"o\">=</span> <span class=\"n\">_hextobyte</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]:</span>\n            <span class=\"nb\">hex</span> <span class=\"o\">=</span> <span class=\"n\">item</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hex</span> <span class=\"ow\">in</span> <span class=\"n\">hextobyte</span><span class=\"p\">:</span>\n                <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">hextobyte</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"p\">[:</span><span class=\"mi\">2</span><span class=\"p\">]])</span>\n                <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"n\">iri</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">repercent_broken_unicode</span><span class=\"p\">(</span><span class=\"n\">iri</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"escape_uri_path\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.escape_uri_path\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">escape_uri_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Escape the unsafe characters from the path portion of a Uniform Resource</span>\n<span class=\"sd\">    Identifier (URI).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># These are the &quot;reserved&quot; and &quot;unreserved&quot; characters specified in RFC</span>\n    <span class=\"c1\"># 3986 Sections 2.2 and 2.3:</span>\n    <span class=\"c1\">#   reserved    = &quot;;&quot; | &quot;/&quot; | &quot;?&quot; | &quot;:&quot; | &quot;@&quot; | &quot;&amp;&quot; | &quot;=&quot; | &quot;+&quot; | &quot;$&quot; | &quot;,&quot;</span>\n    <span class=\"c1\">#   unreserved  = alphanum | mark</span>\n    <span class=\"c1\">#   mark        = &quot;-&quot; | &quot;_&quot; | &quot;.&quot; | &quot;!&quot; | &quot;~&quot; | &quot;*&quot; | &quot;&#39;&quot; | &quot;(&quot; | &quot;)&quot;</span>\n    <span class=\"c1\"># The list of safe characters here is constructed subtracting &quot;;&quot;, &quot;=&quot;,</span>\n    <span class=\"c1\"># and &quot;?&quot; according to RFC 3986 Section 3.3.</span>\n    <span class=\"c1\"># The reason for not subtracting and escaping &quot;/&quot; is that we are escaping</span>\n    <span class=\"c1\"># the entire path, not a path segment.</span>\n    <span class=\"k\">return</span> <span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"s2\">&quot;/:@&amp;+$,-_.!~*&#39;()&quot;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">punycode</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return the Punycode of the given domain if it&#39;s non-ASCII.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;idna&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">repercent_broken_unicode</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    As per RFC 3987 Section 3.2, step three of converting a URI into an IRI,</span>\n<span class=\"sd\">    repercent-encode any octet produced that is not part of a strictly legal</span>\n<span class=\"sd\">    UTF-8 octet sequence.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># CVE-2019-14235: A recursion shouldn&#39;t be used since the exception</span>\n            <span class=\"c1\"># handling uses massive amounts of memory</span>\n            <span class=\"n\">repercent</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">start</span> <span class=\"p\">:</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">],</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">&quot;/#%[]=:;$&amp;()+,!?*@&#39;~&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">path</span><span class=\"p\">[:</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">repercent</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">end</span> <span class=\"p\">:]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span>\n\n\n<div class=\"viewcode-block\" id=\"filepath_to_uri\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.encoding.filepath_to_uri\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">filepath_to_uri</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Convert a file system path to a URI portion that is suitable for</span>\n<span class=\"sd\">    inclusion in a URL.</span>\n\n<span class=\"sd\">    Encode certain chars that would normally be recognized as special chars</span>\n<span class=\"sd\">    for URIs. Do not encode the &#39; character, as it is a valid character</span>\n<span class=\"sd\">    within URIs. See the encodeURIComponent() JavaScript function for details.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">path</span>\n    <span class=\"c1\"># I know about `os.sep` and `os.altsep` but I want to leave</span>\n    <span class=\"c1\"># some flexibility for hardcoding separators.</span>\n    <span class=\"k\">return</span> <span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">),</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"s2\">&quot;/~!*()&#39;&quot;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_system_encoding</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The encoding for the character type functions. Fallback to &#39;ascii&#39; if the</span>\n<span class=\"sd\">    #encoding is unsupported by Python or could not be determined. See tickets</span>\n<span class=\"sd\">    #10335 and #5846.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">locale</span><span class=\"o\">.</span><span class=\"n\">getlocale</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;ascii&quot;</span>\n        <span class=\"n\">codecs</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ascii&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">encoding</span>\n\n\n<span class=\"n\">DEFAULT_LOCALE_ENCODING</span> <span class=\"o\">=</span> <span class=\"n\">get_system_encoding</span><span class=\"p\">()</span>\n</pre></div>", "current_page_name": "_modules/django/utils/encoding", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
