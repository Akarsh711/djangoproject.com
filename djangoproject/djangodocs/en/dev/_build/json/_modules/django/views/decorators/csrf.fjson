{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.views.decorators.csrf", "body": "<h1>Source code for django.views.decorators.csrf</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.middleware.csrf</span> <span class=\"kn\">import</span> <span class=\"n\">CsrfViewMiddleware</span><span class=\"p\">,</span> <span class=\"n\">get_token</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">decorator_from_middleware</span>\n\n<span class=\"n\">csrf_protect</span> <span class=\"o\">=</span> <span class=\"n\">decorator_from_middleware</span><span class=\"p\">(</span><span class=\"n\">CsrfViewMiddleware</span><span class=\"p\">)</span>\n<span class=\"n\">csrf_protect</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;csrf_protect&quot;</span>\n<span class=\"n\">csrf_protect</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">This decorator adds CSRF protection in exactly the same way as</span>\n<span class=\"s2\">CsrfViewMiddleware, but it can be used on a per view basis.  Using both, or</span>\n<span class=\"s2\">using the decorator multiple times, is harmless and efficient.</span>\n<span class=\"s2\">&quot;&quot;&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_EnsureCsrfToken</span><span class=\"p\">(</span><span class=\"n\">CsrfViewMiddleware</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Behave like CsrfViewMiddleware but don&#39;t reject requests or log warnings.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_reject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n\n<span class=\"n\">requires_csrf_token</span> <span class=\"o\">=</span> <span class=\"n\">decorator_from_middleware</span><span class=\"p\">(</span><span class=\"n\">_EnsureCsrfToken</span><span class=\"p\">)</span>\n<span class=\"n\">requires_csrf_token</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;requires_csrf_token&quot;</span>\n<span class=\"n\">requires_csrf_token</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">Use this decorator on views that need a correct csrf_token available to</span>\n<span class=\"s2\">RequestContext, but without the CSRF protection that csrf_protect</span>\n<span class=\"s2\">enforces.</span>\n<span class=\"s2\">&quot;&quot;&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_EnsureCsrfCookie</span><span class=\"p\">(</span><span class=\"n\">CsrfViewMiddleware</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_reject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">callback_args</span><span class=\"p\">,</span> <span class=\"n\">callback_kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">process_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">callback_args</span><span class=\"p\">,</span> <span class=\"n\">callback_kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Force process_response to send the cookie</span>\n        <span class=\"n\">get_token</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">retval</span>\n\n\n<span class=\"n\">ensure_csrf_cookie</span> <span class=\"o\">=</span> <span class=\"n\">decorator_from_middleware</span><span class=\"p\">(</span><span class=\"n\">_EnsureCsrfCookie</span><span class=\"p\">)</span>\n<span class=\"n\">ensure_csrf_cookie</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ensure_csrf_cookie&quot;</span>\n<span class=\"n\">ensure_csrf_cookie</span><span class=\"o\">.</span><span class=\"vm\">__doc__</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">Use this decorator to ensure that a view sets a CSRF cookie, whether or not it</span>\n<span class=\"s2\">uses the csrf_token template tag, or the CsrfViewMiddleware is used.</span>\n<span class=\"s2\">&quot;&quot;&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"csrf_exempt\"><a class=\"viewcode-back\" href=\"../../../../../ref/csrf/#django.views.decorators.csrf.csrf_exempt\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">csrf_exempt</span><span class=\"p\">(</span><span class=\"n\">view_func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Mark a view function as being exempt from the CSRF view protection.&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># view_func.csrf_exempt = True would also work, but decorators are nicer</span>\n    <span class=\"c1\"># if they don&#39;t have side effects, so return a new function.</span>\n    <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">view_func</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper_view</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">view_func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"n\">wrapper_view</span><span class=\"o\">.</span><span class=\"n\">csrf_exempt</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">wrapper_view</span></div>\n</pre></div>", "current_page_name": "_modules/django/views/decorators/csrf", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}