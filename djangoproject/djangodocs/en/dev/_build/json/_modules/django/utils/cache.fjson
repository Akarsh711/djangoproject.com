{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.utils.cache", "body": "<h1>Source code for django.utils.cache</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module contains helper functions for controlling caching. It does so by</span>\n<span class=\"sd\">managing the &quot;Vary&quot; header of responses. It includes functions to patch the</span>\n<span class=\"sd\">header of response objects directly and decorators that change functions to do</span>\n<span class=\"sd\">that header-patching themselves.</span>\n\n<span class=\"sd\">For information on the Vary header, see RFC 9110 Section 12.5.5.</span>\n\n<span class=\"sd\">Essentially, the &quot;Vary&quot; HTTP header defines which headers a cache should take</span>\n<span class=\"sd\">into account when building its cache key. Requests with the same path but</span>\n<span class=\"sd\">different header content for headers named in &quot;Vary&quot; need to get different</span>\n<span class=\"sd\">cache keys to prevent delivery of wrong content.</span>\n\n<span class=\"sd\">An example: i18n middleware would need to distinguish caches by the</span>\n<span class=\"sd\">&quot;Accept-language&quot; header.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hashlib</span> <span class=\"kn\">import</span> <span class=\"n\">md5</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.cache</span> <span class=\"kn\">import</span> <span class=\"n\">caches</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span><span class=\"p\">,</span> <span class=\"n\">HttpResponseNotModified</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.http</span> <span class=\"kn\">import</span> <span class=\"n\">http_date</span><span class=\"p\">,</span> <span class=\"n\">parse_etags</span><span class=\"p\">,</span> <span class=\"n\">parse_http_date_safe</span><span class=\"p\">,</span> <span class=\"n\">quote_etag</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.log</span> <span class=\"kn\">import</span> <span class=\"n\">log_response</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.timezone</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_timezone_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">get_language</span>\n\n<span class=\"n\">cc_delim_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;\\s*,\\s*&quot;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"patch_cache_control\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.patch_cache_control\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">patch_cache_control</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Patch the Cache-Control header by adding all keyword arguments to it.</span>\n<span class=\"sd\">    The transformation is as follows:</span>\n\n<span class=\"sd\">    * All keyword parameter names are turned to lowercase, and underscores</span>\n<span class=\"sd\">      are converted to hyphens.</span>\n<span class=\"sd\">    * If the value of a parameter is True (exactly True, not just a</span>\n<span class=\"sd\">      true value), only the parameter name is added to the header.</span>\n<span class=\"sd\">    * All other parameters are added with their value, after applying</span>\n<span class=\"sd\">      str() to it.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dictitem</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dictvalue</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n    <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">cc_delim_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">]):</span>\n            <span class=\"n\">directive</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">dictitem</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">directive</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;no-cache&quot;</span><span class=\"p\">:</span>\n                <span class=\"c1\"># no-cache supports multiple field names.</span>\n                <span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"n\">directive</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"n\">directive</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"c1\"># If there&#39;s already a max-age header but we&#39;re being asked to set a new</span>\n    <span class=\"c1\"># max-age, use the minimum of the two ages. In practice this happens when</span>\n    <span class=\"c1\"># a decorator and a piece of middleware both operate on a given view.</span>\n    <span class=\"k\">if</span> <span class=\"s2\">&quot;max-age&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;max_age&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;max_age&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"s2\">&quot;max-age&quot;</span><span class=\"p\">]),</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;max_age&quot;</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># Allow overriding private caching and vice versa</span>\n    <span class=\"k\">if</span> <span class=\"s2\">&quot;private&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;public&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"s2\">&quot;private&quot;</span><span class=\"p\">]</span>\n    <span class=\"k\">elif</span> <span class=\"s2\">&quot;public&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;private&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"s2\">&quot;public&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">directive</span> <span class=\"o\">=</span> <span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;_&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">directive</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;no-cache&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># no-cache supports multiple field names.</span>\n            <span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"n\">directive</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"n\">directive</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">v</span>\n\n    <span class=\"n\">directives</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">directive</span><span class=\"p\">,</span> <span class=\"n\">values</span> <span class=\"ow\">in</span> <span class=\"n\">cc</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"nb\">set</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"kc\">True</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">:</span>\n                <span class=\"c1\"># True takes precedence.</span>\n                <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"kc\">True</span><span class=\"p\">}</span>\n            <span class=\"n\">directives</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">dictvalue</span><span class=\"p\">(</span><span class=\"n\">directive</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">values</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">directives</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">dictvalue</span><span class=\"p\">(</span><span class=\"n\">directive</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">))</span>\n    <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">directives</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cc</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_max_age\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.get_max_age\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_max_age</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the max-age from the response Cache-Control header as an integer,</span>\n<span class=\"sd\">    or None if it wasn&#39;t found or wasn&#39;t an integer.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span>\n    <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"n\">_to_tuple</span><span class=\"p\">(</span><span class=\"n\">el</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">el</span> <span class=\"ow\">in</span> <span class=\"n\">cc_delim_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">])</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">cc</span><span class=\"p\">[</span><span class=\"s2\">&quot;max-age&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">KeyError</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">set_response_etag</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming</span> <span class=\"ow\">and</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;ETag&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">quote_etag</span><span class=\"p\">(</span>\n            <span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">usedforsecurity</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">(),</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_precondition_failed</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">412</span><span class=\"p\">)</span>\n    <span class=\"n\">log_response</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;Precondition Failed: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span>\n        <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">,</span>\n        <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_not_modified</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">new_response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponseNotModified</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Preserve the headers required by RFC 9110 Section 15.4.5, as well as</span>\n        <span class=\"c1\"># Last-Modified.</span>\n        <span class=\"k\">for</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Content-Location&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Date&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;ETag&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Expires&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Last-Modified&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n                <span class=\"n\">new_response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># Preserve cookies as per the cookie specification: &quot;If a proxy server</span>\n        <span class=\"c1\"># receives a response which contains a Set-cookie header, it should</span>\n        <span class=\"c1\"># propagate the Set-cookie header to the client, regardless of whether</span>\n        <span class=\"c1\"># the response was 304 (Not Modified) or 200 (OK).</span>\n        <span class=\"c1\"># https://curl.haxx.se/rfc/cookie_spec.html</span>\n        <span class=\"n\">new_response</span><span class=\"o\">.</span><span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">cookies</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_response</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_conditional_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">etag</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">last_modified</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Only return conditional responses on successful requests.</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"mi\">200</span> <span class=\"o\">&lt;=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">&lt;</span> <span class=\"mi\">300</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n    <span class=\"c1\"># Get HTTP request headers.</span>\n    <span class=\"n\">if_match_etags</span> <span class=\"o\">=</span> <span class=\"n\">parse_etags</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_IF_MATCH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n    <span class=\"n\">if_unmodified_since</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_IF_UNMODIFIED_SINCE&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">if_unmodified_since</span> <span class=\"o\">=</span> <span class=\"n\">if_unmodified_since</span> <span class=\"ow\">and</span> <span class=\"n\">parse_http_date_safe</span><span class=\"p\">(</span>\n        <span class=\"n\">if_unmodified_since</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">if_none_match_etags</span> <span class=\"o\">=</span> <span class=\"n\">parse_etags</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_IF_NONE_MATCH&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n    <span class=\"n\">if_modified_since</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_IF_MODIFIED_SINCE&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">if_modified_since</span> <span class=\"o\">=</span> <span class=\"n\">if_modified_since</span> <span class=\"ow\">and</span> <span class=\"n\">parse_http_date_safe</span><span class=\"p\">(</span><span class=\"n\">if_modified_since</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Evaluation of request preconditions below follows RFC 9110 Section</span>\n    <span class=\"c1\"># 13.2.2.</span>\n    <span class=\"c1\"># Step 1: Test the If-Match precondition.</span>\n    <span class=\"k\">if</span> <span class=\"n\">if_match_etags</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">_if_match_passes</span><span class=\"p\">(</span><span class=\"n\">etag</span><span class=\"p\">,</span> <span class=\"n\">if_match_etags</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_precondition_failed</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Step 2: Test the If-Unmodified-Since precondition.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"ow\">not</span> <span class=\"n\">if_match_etags</span>\n        <span class=\"ow\">and</span> <span class=\"n\">if_unmodified_since</span>\n        <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">_if_unmodified_since_passes</span><span class=\"p\">(</span><span class=\"n\">last_modified</span><span class=\"p\">,</span> <span class=\"n\">if_unmodified_since</span><span class=\"p\">)</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_precondition_failed</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Step 3: Test the If-None-Match precondition.</span>\n    <span class=\"k\">if</span> <span class=\"n\">if_none_match_etags</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">_if_none_match_passes</span><span class=\"p\">(</span><span class=\"n\">etag</span><span class=\"p\">,</span> <span class=\"n\">if_none_match_etags</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HEAD&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">_not_modified</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">_precondition_failed</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Step 4: Test the If-Modified-Since precondition.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span>\n        <span class=\"ow\">not</span> <span class=\"n\">if_none_match_etags</span>\n        <span class=\"ow\">and</span> <span class=\"n\">if_modified_since</span>\n        <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">_if_modified_since_passes</span><span class=\"p\">(</span><span class=\"n\">last_modified</span><span class=\"p\">,</span> <span class=\"n\">if_modified_since</span><span class=\"p\">)</span>\n        <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HEAD&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_not_modified</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Step 5: Test the If-Range precondition (not supported).</span>\n    <span class=\"c1\"># Step 6: Return original response since there isn&#39;t a conditional response.</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_if_match_passes</span><span class=\"p\">(</span><span class=\"n\">target_etag</span><span class=\"p\">,</span> <span class=\"n\">etags</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test the If-Match comparison as defined in RFC 9110 Section 13.1.1.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">target_etag</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If there isn&#39;t an ETag, then there can&#39;t be a match.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">elif</span> <span class=\"n\">etags</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># The existence of an ETag means that there is &quot;a current</span>\n        <span class=\"c1\"># representation for the target resource&quot;, even if the ETag is weak,</span>\n        <span class=\"c1\"># so there is a match to &#39;*&#39;.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">elif</span> <span class=\"n\">target_etag</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;W/&quot;</span><span class=\"p\">):</span>\n        <span class=\"c1\"># A weak ETag can never strongly match another ETag.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Since the ETag is strong, this will only return True if there&#39;s a</span>\n        <span class=\"c1\"># strong match.</span>\n        <span class=\"k\">return</span> <span class=\"n\">target_etag</span> <span class=\"ow\">in</span> <span class=\"n\">etags</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_if_unmodified_since_passes</span><span class=\"p\">(</span><span class=\"n\">last_modified</span><span class=\"p\">,</span> <span class=\"n\">if_unmodified_since</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test the If-Unmodified-Since comparison as defined in RFC 9110 Section</span>\n<span class=\"sd\">    13.1.4.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">last_modified</span> <span class=\"ow\">and</span> <span class=\"n\">last_modified</span> <span class=\"o\">&lt;=</span> <span class=\"n\">if_unmodified_since</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_if_none_match_passes</span><span class=\"p\">(</span><span class=\"n\">target_etag</span><span class=\"p\">,</span> <span class=\"n\">etags</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test the If-None-Match comparison as defined in RFC 9110 Section 13.1.2.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">target_etag</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If there isn&#39;t an ETag, then there isn&#39;t a match.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"k\">elif</span> <span class=\"n\">etags</span> <span class=\"o\">==</span> <span class=\"p\">[</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">]:</span>\n        <span class=\"c1\"># The existence of an ETag means that there is &quot;a current</span>\n        <span class=\"c1\"># representation for the target resource&quot;, so there is a match to &#39;*&#39;.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># The comparison should be weak, so look for a match after stripping</span>\n        <span class=\"c1\"># off any weak indicators.</span>\n        <span class=\"n\">target_etag</span> <span class=\"o\">=</span> <span class=\"n\">target_etag</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">&quot;W/&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">etags</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">etag</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"s2\">&quot;W/&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">etag</span> <span class=\"ow\">in</span> <span class=\"n\">etags</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">target_etag</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">etags</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_if_modified_since_passes</span><span class=\"p\">(</span><span class=\"n\">last_modified</span><span class=\"p\">,</span> <span class=\"n\">if_modified_since</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Test the If-Modified-Since comparison as defined in RFC 9110 Section</span>\n<span class=\"sd\">    13.1.3.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"ow\">not</span> <span class=\"n\">last_modified</span> <span class=\"ow\">or</span> <span class=\"n\">last_modified</span> <span class=\"o\">&gt;</span> <span class=\"n\">if_modified_since</span>\n\n\n<div class=\"viewcode-block\" id=\"patch_response_headers\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.patch_response_headers\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">patch_response_headers</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">cache_timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Add HTTP caching headers to the given HttpResponse: Expires and</span>\n<span class=\"sd\">    Cache-Control.</span>\n\n<span class=\"sd\">    Each header is only added if it isn&#39;t already set.</span>\n\n<span class=\"sd\">    cache_timeout is in seconds. The CACHE_MIDDLEWARE_SECONDS setting is used</span>\n<span class=\"sd\">    by default.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">cache_timeout</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">cache_timeout</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_SECONDS</span>\n    <span class=\"k\">if</span> <span class=\"n\">cache_timeout</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">cache_timeout</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># Can&#39;t have max-age negative</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Expires&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Expires&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">http_date</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">cache_timeout</span><span class=\"p\">)</span>\n    <span class=\"n\">patch_cache_control</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"n\">cache_timeout</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"add_never_cache_headers\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.add_never_cache_headers\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">add_never_cache_headers</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Add headers to a response to indicate that a page should never be cached.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">patch_response_headers</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">cache_timeout</span><span class=\"o\">=-</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">patch_cache_control</span><span class=\"p\">(</span>\n        <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">no_cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">no_store</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">must_revalidate</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"patch_vary_headers\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.patch_vary_headers\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">patch_vary_headers</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">newheaders</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Add (or update) the &quot;Vary&quot; header in the given HttpResponse object.</span>\n<span class=\"sd\">    newheaders is a list of header names that should be in &quot;Vary&quot;. If headers</span>\n<span class=\"sd\">    contains an asterisk, then &quot;Vary&quot; header will consist of a single asterisk</span>\n<span class=\"sd\">    &#39;*&#39;. Otherwise, existing headers in &quot;Vary&quot; aren&#39;t removed.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Note that we need to keep the original order intact, because cache</span>\n    <span class=\"c1\"># implementations may rely on the order of the Vary contents in, say,</span>\n    <span class=\"c1\"># computing an MD5 hash.</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">vary_headers</span> <span class=\"o\">=</span> <span class=\"n\">cc_delim_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">vary_headers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># Use .lower() here so we treat headers as case-insensitive.</span>\n    <span class=\"n\">existing_headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"n\">vary_headers</span><span class=\"p\">}</span>\n    <span class=\"n\">additional_headers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">newheader</span>\n        <span class=\"k\">for</span> <span class=\"n\">newheader</span> <span class=\"ow\">in</span> <span class=\"n\">newheaders</span>\n        <span class=\"k\">if</span> <span class=\"n\">newheader</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">existing_headers</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">vary_headers</span> <span class=\"o\">+=</span> <span class=\"n\">additional_headers</span>\n    <span class=\"k\">if</span> <span class=\"s2\">&quot;*&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">vary_headers</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;*&quot;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">vary_headers</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">has_vary_header</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">header_query</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Check to see if the response has a given header name in its Vary header.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"n\">vary_headers</span> <span class=\"o\">=</span> <span class=\"n\">cc_delim_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">existing_headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"n\">vary_headers</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">header_query</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">in</span> <span class=\"n\">existing_headers</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_i18n_cache_key_suffix</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">cache_key</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;If necessary, add the current locale or time zone to the cache key.&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">USE_I18N</span><span class=\"p\">:</span>\n        <span class=\"c1\"># first check if LocaleMiddleware or another middleware added</span>\n        <span class=\"c1\"># LANGUAGE_CODE to request, then fall back to the active language</span>\n        <span class=\"c1\"># which in turn can also fall back to settings.LANGUAGE_CODE</span>\n        <span class=\"n\">cache_key</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;LANGUAGE_CODE&quot;</span><span class=\"p\">,</span> <span class=\"n\">get_language</span><span class=\"p\">())</span>\n    <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">USE_TZ</span><span class=\"p\">:</span>\n        <span class=\"n\">cache_key</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">get_current_timezone_name</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">cache_key</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_generate_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">headerlist</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return a cache key from the headers given in the header list.&quot;&quot;&quot;</span>\n    <span class=\"n\">ctx</span> <span class=\"o\">=</span> <span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">usedforsecurity</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"n\">headerlist</span><span class=\"p\">:</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">build_absolute_uri</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">),</span> <span class=\"n\">usedforsecurity</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;views.decorators.cache.cache_page.</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n        <span class=\"n\">key_prefix</span><span class=\"p\">,</span>\n        <span class=\"n\">method</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">(),</span>\n        <span class=\"n\">ctx</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">_i18n_cache_key_suffix</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">cache_key</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_generate_cache_header_key</span><span class=\"p\">(</span><span class=\"n\">key_prefix</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return a cache key for the header cache.&quot;&quot;&quot;</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">build_absolute_uri</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">),</span> <span class=\"n\">usedforsecurity</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;views.decorators.cache.cache_header.</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n        <span class=\"n\">key_prefix</span><span class=\"p\">,</span>\n        <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">(),</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">_i18n_cache_key_suffix</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">cache_key</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"get_cache_key\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.get_cache_key\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a cache key based on the request URL and query. It can be used</span>\n<span class=\"sd\">    in the request phase because it pulls the list of headers to take into</span>\n<span class=\"sd\">    account from the global URL registry and uses those to build a cache key</span>\n<span class=\"sd\">    to check against.</span>\n\n<span class=\"sd\">    If there isn&#39;t a headerlist stored, return None, indicating that the page</span>\n<span class=\"sd\">    needs to be rebuilt.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">key_prefix</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_KEY_PREFIX</span>\n    <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"n\">_generate_cache_header_key</span><span class=\"p\">(</span><span class=\"n\">key_prefix</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">cache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">caches</span><span class=\"p\">[</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_ALIAS</span><span class=\"p\">]</span>\n    <span class=\"n\">headerlist</span> <span class=\"o\">=</span> <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">headerlist</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">_generate_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">headerlist</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n\n\n<div class=\"viewcode-block\" id=\"learn_cache_key\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.cache.learn_cache_key\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">learn_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">cache_timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Learn what headers to take into account for some request URL from the</span>\n<span class=\"sd\">    response object. Store those headers in a global URL registry so that</span>\n<span class=\"sd\">    later access to that URL will know what headers to take into account</span>\n<span class=\"sd\">    without building the response object itself. The headers are named in the</span>\n<span class=\"sd\">    Vary header of the response, but we want to prevent response generation.</span>\n\n<span class=\"sd\">    The list of headers to use for cache key generation is stored in the same</span>\n<span class=\"sd\">    cache as the pages themselves. If the cache ages some data out of the</span>\n<span class=\"sd\">    cache, this just means that we have to build the response once to get at</span>\n<span class=\"sd\">    the Vary header and so at the list of headers to use for the cache key.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">key_prefix</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_KEY_PREFIX</span>\n    <span class=\"k\">if</span> <span class=\"n\">cache_timeout</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">cache_timeout</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_SECONDS</span>\n    <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"n\">_generate_cache_header_key</span><span class=\"p\">(</span><span class=\"n\">key_prefix</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">cache</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"n\">caches</span><span class=\"p\">[</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_ALIAS</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">is_accept_language_redundant</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">USE_I18N</span>\n        <span class=\"c1\"># If i18n is used, the generated cache key will be suffixed with the</span>\n        <span class=\"c1\"># current locale. Adding the raw value of Accept-Language is redundant</span>\n        <span class=\"c1\"># in that case and would result in storing the same content under</span>\n        <span class=\"c1\"># multiple keys in the cache. See #18191 for details.</span>\n        <span class=\"n\">headerlist</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"n\">cc_delim_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Vary&quot;</span><span class=\"p\">]):</span>\n            <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">header</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;ACCEPT_LANGUAGE&quot;</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">is_accept_language_redundant</span><span class=\"p\">:</span>\n                <span class=\"n\">headerlist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_&quot;</span> <span class=\"o\">+</span> <span class=\"n\">header</span><span class=\"p\">)</span>\n        <span class=\"n\">headerlist</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"p\">()</span>\n        <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">,</span> <span class=\"n\">headerlist</span><span class=\"p\">,</span> <span class=\"n\">cache_timeout</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">_generate_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">headerlist</span><span class=\"p\">,</span> <span class=\"n\">key_prefix</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># if there is no Vary header, we still need a cache key</span>\n        <span class=\"c1\"># for the request.build_absolute_uri()</span>\n        <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"n\">cache_timeout</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">_generate_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"p\">[],</span> <span class=\"n\">key_prefix</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_to_tuple</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"kc\">True</span>\n</pre></div>", "current_page_name": "_modules/django/utils/cache", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
