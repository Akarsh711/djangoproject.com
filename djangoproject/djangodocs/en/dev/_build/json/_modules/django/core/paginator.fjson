{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.core.paginator", "body": "<h1>Source code for django.core.paginator</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">collections.abc</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">math</span> <span class=\"kn\">import</span> <span class=\"n\">ceil</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.inspect</span> <span class=\"kn\">import</span> <span class=\"n\">method_has_no_args</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UnorderedObjectListWarning</span><span class=\"p\">(</span><span class=\"ne\">RuntimeWarning</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"InvalidPage\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.InvalidPage\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">InvalidPage</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"PageNotAnInteger\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.PageNotAnInteger\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">PageNotAnInteger</span><span class=\"p\">(</span><span class=\"n\">InvalidPage</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"EmptyPage\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.EmptyPage\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">EmptyPage</span><span class=\"p\">(</span><span class=\"n\">InvalidPage</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Paginator\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Paginator\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Paginator</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Translators: String used to replace omitted page numbers in elided page</span>\n    <span class=\"c1\"># range generated by paginators, e.g. [1, 2, &#39;\u2026&#39;, 5, 6, 7, &#39;\u2026&#39;, 9, 10].</span>\n    <span class=\"n\">ELLIPSIS</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u2026&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">default_error_messages</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;invalid_page&quot;</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;That page number is not an integer&quot;</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;min_page&quot;</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;That page number is less than 1&quot;</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;no_results&quot;</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;That page contains no results&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">object_list</span><span class=\"p\">,</span>\n        <span class=\"n\">per_page</span><span class=\"p\">,</span>\n        <span class=\"n\">orphans</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">allow_empty_first_page</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">error_messages</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"n\">object_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_object_list_is_ordered</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">per_page</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">per_page</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">orphans</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">orphans</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allow_empty_first_page</span> <span class=\"o\">=</span> <span class=\"n\">allow_empty_first_page</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_messages</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_error_messages</span>\n            <span class=\"k\">if</span> <span class=\"n\">error_messages</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_error_messages</span> <span class=\"o\">|</span> <span class=\"n\">error_messages</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">page_number</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page_range</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"n\">page_number</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">validate_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Validate the given 1-based page number.&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">number</span><span class=\"o\">.</span><span class=\"n\">is_integer</span><span class=\"p\">():</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n            <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">PageNotAnInteger</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_messages</span><span class=\"p\">[</span><span class=\"s2\">&quot;invalid_page&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">EmptyPage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_messages</span><span class=\"p\">[</span><span class=\"s2\">&quot;min_page&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">EmptyPage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_messages</span><span class=\"p\">[</span><span class=\"s2\">&quot;no_results&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">number</span>\n\n<div class=\"viewcode-block\" id=\"Paginator.get_page\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Paginator.get_page\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_page</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a valid page, even if the page argument isn&#39;t a number or isn&#39;t</span>\n<span class=\"sd\">        in range.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate_number</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">PageNotAnInteger</span><span class=\"p\">:</span>\n            <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"k\">except</span> <span class=\"n\">EmptyPage</span><span class=\"p\">:</span>\n            <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Paginator.page\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Paginator.page\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">page</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a Page object for the given 1-based page number.&quot;&quot;&quot;</span>\n        <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate_number</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n        <span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">per_page</span>\n        <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"n\">bottom</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">per_page</span>\n        <span class=\"k\">if</span> <span class=\"n\">top</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">orphans</span> <span class=\"o\">&gt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">:</span>\n            <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_page</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">[</span><span class=\"n\">bottom</span><span class=\"p\">:</span><span class=\"n\">top</span><span class=\"p\">],</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_page</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an instance of a single page.</span>\n\n<span class=\"sd\">        This hook can be used by subclasses to use an alternative to the</span>\n<span class=\"sd\">        standard :cls:`Page` object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Page</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">count</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the total number of objects, across all pages.&quot;&quot;&quot;</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;count&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isbuiltin</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">method_has_no_args</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">c</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">num_pages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the total number of pages.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allow_empty_first_page</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"n\">hits</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">-</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">orphans</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"n\">hits</span> <span class=\"o\">/</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">per_page</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">page_range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a 1-based range of pages for iterating through within</span>\n<span class=\"sd\">        a template for loop.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_object_list_is_ordered</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Warn if self.object_list is unordered (typically a QuerySet).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">ordered</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ordered&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ordered</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">ordered</span><span class=\"p\">:</span>\n            <span class=\"n\">obj_list_repr</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\"> </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"s2\">&quot;model&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"s2\">&quot;</span><span class=\"si\">{!r}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Pagination may yield inconsistent results with an unordered &quot;</span>\n                <span class=\"s2\">&quot;object_list: </span><span class=\"si\">{}</span><span class=\"s2\">.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">obj_list_repr</span><span class=\"p\">),</span>\n                <span class=\"n\">UnorderedObjectListWarning</span><span class=\"p\">,</span>\n                <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Paginator.get_elided_page_range\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Paginator.get_elided_page_range\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_elided_page_range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">on_each_side</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">on_ends</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a 1-based range of pages with some values elided.</span>\n\n<span class=\"sd\">        If the page range is larger than a given size, the whole range is not</span>\n<span class=\"sd\">        provided and a compact form is returned instead, e.g. for a paginator</span>\n<span class=\"sd\">        with 50 pages, if page 43 were the current page, the output, with the</span>\n<span class=\"sd\">        default arguments, would be:</span>\n\n<span class=\"sd\">            1, 2, \u2026, 40, 41, 42, 43, 44, 45, 46, \u2026, 49, 50.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">validate_number</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span> <span class=\"o\">&lt;=</span> <span class=\"p\">(</span><span class=\"n\">on_each_side</span> <span class=\"o\">+</span> <span class=\"n\">on_ends</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">yield from</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page_range</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">on_each_side</span> <span class=\"o\">+</span> <span class=\"n\">on_ends</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">yield from</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">on_ends</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ELLIPSIS</span>\n            <span class=\"k\">yield from</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">-</span> <span class=\"n\">on_each_side</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">yield from</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span> <span class=\"o\">-</span> <span class=\"n\">on_each_side</span> <span class=\"o\">-</span> <span class=\"n\">on_ends</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">yield from</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"n\">on_each_side</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ELLIPSIS</span>\n            <span class=\"k\">yield from</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span> <span class=\"o\">-</span> <span class=\"n\">on_ends</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">yield from</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">num_pages</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"Page\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Page</span><span class=\"p\">(</span><span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">abc</span><span class=\"o\">.</span><span class=\"n\">Sequence</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"n\">paginator</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"n\">object_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">paginator</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;Page </span><span class=\"si\">%s</span><span class=\"s2\"> of </span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">num_pages</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__len__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">slice</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Page indices must be integers or slices, not </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span>\n                <span class=\"o\">%</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n            <span class=\"p\">)</span>\n        <span class=\"c1\"># The object_list is converted to a list so that if it was a QuerySet</span>\n        <span class=\"c1\"># it won&#39;t be a database hit per __getitem__.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_list</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"Page.has_next\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.has_next\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">num_pages</span></div>\n\n<div class=\"viewcode-block\" id=\"Page.has_previous\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.has_previous\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_previous</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span></div>\n\n<div class=\"viewcode-block\" id=\"Page.has_other_pages\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.has_other_pages\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">has_other_pages</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_previous</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_next</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Page.next_page_number\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.next_page_number\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">next_page_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">validate_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Page.previous_page_number\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.previous_page_number\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">previous_page_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">validate_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Page.start_index\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.start_index\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">start_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the 1-based index of the first object on this page,</span>\n<span class=\"sd\">        relative to total objects in the paginator.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Special case, return zero if no items.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"mi\">0</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">per_page</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span></div>\n\n<div class=\"viewcode-block\" id=\"Page.end_index\"><a class=\"viewcode-back\" href=\"../../../../ref/paginator/#django.core.paginator.Page.end_index\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">end_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the 1-based index of the last object on this page,</span>\n<span class=\"sd\">        relative to total objects found (hits).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Special case for the last page because there can be orphans.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">num_pages</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">count</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"o\">*</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">per_page</span></div></div>\n</pre></div>", "current_page_name": "_modules/django/core/paginator", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
