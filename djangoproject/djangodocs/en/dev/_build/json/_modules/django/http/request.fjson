{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.http.request", "body": "<h1>Source code for django.http.request</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">codecs</span>\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n<span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">chain</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">parse_qsl</span><span class=\"p\">,</span> <span class=\"n\">quote</span><span class=\"p\">,</span> <span class=\"n\">urlencode</span><span class=\"p\">,</span> <span class=\"n\">urljoin</span><span class=\"p\">,</span> <span class=\"n\">urlsplit</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">signing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">DisallowedHost</span><span class=\"p\">,</span>\n    <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">,</span>\n    <span class=\"n\">RequestDataTooBig</span><span class=\"p\">,</span>\n    <span class=\"n\">TooManyFieldsSent</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files</span> <span class=\"kn\">import</span> <span class=\"n\">uploadhandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http.multipartparser</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">MultiPartParser</span><span class=\"p\">,</span>\n    <span class=\"n\">MultiPartParserError</span><span class=\"p\">,</span>\n    <span class=\"n\">TooManyFilesSent</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">CaseInsensitiveMapping</span><span class=\"p\">,</span>\n    <span class=\"n\">ImmutableList</span><span class=\"p\">,</span>\n    <span class=\"n\">MultiValueDict</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.encoding</span> <span class=\"kn\">import</span> <span class=\"n\">escape_uri_path</span><span class=\"p\">,</span> <span class=\"n\">iri_to_uri</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.http</span> <span class=\"kn\">import</span> <span class=\"n\">is_same_domain</span><span class=\"p\">,</span> <span class=\"n\">parse_header_parameters</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n\n<span class=\"n\">RAISE_ERROR</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n<span class=\"n\">host_validation_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^([a-z0-9.-]+|\\[[a-f0-9]*:[a-f0-9\\.:]+\\])(:[0-9]+)?$&quot;</span>\n<span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"UnreadablePostError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.http.UnreadablePostError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">UnreadablePostError</span><span class=\"p\">(</span><span class=\"ne\">OSError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RawPostDataException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    You cannot access raw_post_data from a request that has</span>\n<span class=\"sd\">    multipart/* POST data if it has been accessed via POST,</span>\n<span class=\"sd\">    FILES, etc..</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"HttpRequest\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpRequest</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;A basic HTTP request.&quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># The encoding used in GET/POST dicts. None means use default setting.</span>\n    <span class=\"n\">_encoding</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">_upload_handlers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># WARNING: The `WSGIRequest` subclass doesn&#39;t call `super`.</span>\n        <span class=\"c1\"># Any variable assignment made here should also happen in</span>\n        <span class=\"c1\"># `WSGIRequest.__init__()`.</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GET</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">POST</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">COOKIES</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">FILES</span> <span class=\"o\">=</span> <span class=\"n\">MultiValueDict</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_info</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolver_match</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_params</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_full_path</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%r</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_full_path</span><span class=\"p\">(),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">headers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpHeaders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">accepted_types</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a list of MediaType instances.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">parse_accept_header</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Accept&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;*/*&quot;</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.accepts\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.accepts\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">accepts</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">media_type</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span>\n            <span class=\"n\">accepted_type</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">media_type</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">accepted_type</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">accepted_types</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_content_type_params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">meta</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set content_type, content_params, and encoding.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_params</span> <span class=\"o\">=</span> <span class=\"n\">parse_header_parameters</span><span class=\"p\">(</span>\n            <span class=\"n\">meta</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;CONTENT_TYPE&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;charset&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_params</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">codecs</span><span class=\"o\">.</span><span class=\"n\">lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_params</span><span class=\"p\">[</span><span class=\"s2\">&quot;charset&quot;</span><span class=\"p\">])</span>\n            <span class=\"k\">except</span> <span class=\"ne\">LookupError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_params</span><span class=\"p\">[</span><span class=\"s2\">&quot;charset&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_raw_host</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the HTTP host using the environment or request headers. Skip</span>\n<span class=\"sd\">        allowed hosts protection, so may return an insecure host.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># We try three options, in order of decreasing preference.</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">USE_X_FORWARDED_HOST</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_X_FORWARDED_HOST&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">):</span>\n            <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">&quot;HTTP_X_FORWARDED_HOST&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">elif</span> <span class=\"s2\">&quot;HTTP_HOST&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">:</span>\n            <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">&quot;HTTP_HOST&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Reconstruct the host using the algorithm from PEP 333.</span>\n            <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">&quot;SERVER_NAME&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">server_port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_port</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">server_port</span> <span class=\"o\">!=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;443&quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_secure</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;80&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">server_port</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">host</span>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.get_host\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.get_host\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_host</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the HTTP host using the environment or request headers.&quot;&quot;&quot;</span>\n        <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_raw_host</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Allow variants of localhost if ALLOWED_HOSTS is empty and DEBUG=True.</span>\n        <span class=\"n\">allowed_hosts</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">ALLOWED_HOSTS</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">:</span>\n            <span class=\"n\">allowed_hosts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;.localhost&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;127.0.0.1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;[::1]&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">split_domain_port</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"ow\">and</span> <span class=\"n\">validate_host</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">host</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Invalid HTTP_HOST header: </span><span class=\"si\">%r</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">host</span>\n            <span class=\"k\">if</span> <span class=\"n\">domain</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; You may need to add </span><span class=\"si\">%r</span><span class=\"s2\"> to ALLOWED_HOSTS.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">domain</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"p\">(</span>\n                    <span class=\"s2\">&quot; The domain name provided is not valid according to RFC 1034/1035.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">DisallowedHost</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.get_port\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.get_port\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_port</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the port number for the request as a string.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">USE_X_FORWARDED_PORT</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;HTTP_X_FORWARDED_PORT&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">:</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">&quot;HTTP_X_FORWARDED_PORT&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">&quot;SERVER_PORT&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">port</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.get_full_path\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.get_full_path\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_full_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_append_slash</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_full_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">force_append_slash</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.get_full_path_info\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.get_full_path_info\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_full_path_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_append_slash</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_full_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path_info</span><span class=\"p\">,</span> <span class=\"n\">force_append_slash</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_full_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">force_append_slash</span><span class=\"p\">):</span>\n        <span class=\"c1\"># RFC 3986 requires query string arguments to be in the ASCII range.</span>\n        <span class=\"c1\"># Rather than crash if this doesn&#39;t happen, we encode defensively.</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">escape_uri_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;/&quot;</span> <span class=\"k\">if</span> <span class=\"n\">force_append_slash</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">(</span><span class=\"s2\">&quot;?&quot;</span> <span class=\"o\">+</span> <span class=\"n\">iri_to_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;QUERY_STRING&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)))</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;QUERY_STRING&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.get_signed_cookie\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.get_signed_cookie\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">RAISE_ERROR</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Attempt to return a signed cookie. If the signature fails or the</span>\n<span class=\"sd\">        cookie has expired, raise an exception, unless the `default` argument</span>\n<span class=\"sd\">        is provided,  in which case return that value.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cookie_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">COOKIES</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">default</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">RAISE_ERROR</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">default</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">get_cookie_signer</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"n\">salt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span>\n                <span class=\"n\">cookie_value</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"n\">max_age</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">BadSignature</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">default</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">RAISE_ERROR</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">default</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.build_absolute_uri\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.build_absolute_uri\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">build_absolute_uri</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Build an absolute URI from the location and the variables available in</span>\n<span class=\"sd\">        this request. If no ``location`` is specified, build the absolute URI</span>\n<span class=\"sd\">        using request.get_full_path(). If the location is absolute, convert it</span>\n<span class=\"sd\">        to an RFC 3987 compliant URI and return it. If location is relative or</span>\n<span class=\"sd\">        is scheme-relative (i.e., ``//example.com/``), urljoin() it to a base</span>\n<span class=\"sd\">        URL constructed from the request variables.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">location</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Make it an absolute url (but schemeless and domainless) for the</span>\n            <span class=\"c1\"># edge case that the path starts with &#39;//&#39;.</span>\n            <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;//</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_full_path</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Coerce lazy locations.</span>\n            <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">)</span>\n        <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"n\">urlsplit</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"ow\">and</span> <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">netloc</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Handle the simple, most common case. If the location is absolute</span>\n            <span class=\"c1\"># and a scheme or host (netloc) isn&#39;t provided, skip an expensive</span>\n            <span class=\"c1\"># urljoin() as long as no path segments are &#39;.&#39; or &#39;..&#39;.</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n                <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">scheme</span>\n                <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">netloc</span>\n                <span class=\"ow\">and</span> <span class=\"s2\">&quot;/./&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">path</span>\n                <span class=\"ow\">and</span> <span class=\"s2\">&quot;/../&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">bits</span><span class=\"o\">.</span><span class=\"n\">path</span>\n            <span class=\"p\">):</span>\n                <span class=\"c1\"># If location starts with &#39;//&#39; but has no netloc, reuse the</span>\n                <span class=\"c1\"># schema and netloc from the current request. Strip the double</span>\n                <span class=\"c1\"># slashes and continue as if it wasn&#39;t specified.</span>\n                <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_scheme_host</span> <span class=\"o\">+</span> <span class=\"n\">location</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">&quot;//&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Join the constructed URL with the provided location, which</span>\n                <span class=\"c1\"># allows the provided location to apply query strings to the</span>\n                <span class=\"c1\"># base path.</span>\n                <span class=\"n\">location</span> <span class=\"o\">=</span> <span class=\"n\">urljoin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_current_scheme_host</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">location</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">iri_to_uri</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_current_scheme_host</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}</span><span class=\"s2\">://</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scheme</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_host</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_scheme</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Hook for subclasses like WSGIRequest to implement. Return &#39;http&#39; by</span>\n<span class=\"sd\">        default.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;http&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">scheme</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SECURE_PROXY_SSL_HEADER</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">secure_value</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SECURE_PROXY_SSL_HEADER</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The SECURE_PROXY_SSL_HEADER setting must be a tuple containing &quot;</span>\n                    <span class=\"s2\">&quot;two values.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">header_value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">header_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">header_value</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">header_value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;https&quot;</span> <span class=\"k\">if</span> <span class=\"n\">header_value</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">secure_value</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;http&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_scheme</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.is_secure\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.is_secure\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">is_secure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;https&quot;</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">encoding</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span>\n\n    <span class=\"nd\">@encoding</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">encoding</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set the encoding used for GET/POST accesses. If the GET or POST</span>\n<span class=\"sd\">        dictionary has already been created, remove and recreate it on the</span>\n<span class=\"sd\">        next access (so that it is decoded correctly).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span> <span class=\"o\">=</span> <span class=\"n\">val</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">GET</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_post&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize_handlers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_upload_handlers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">uploadhandler</span><span class=\"o\">.</span><span class=\"n\">load_handler</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">handler</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FILE_UPLOAD_HANDLERS</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">upload_handlers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_upload_handlers</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If there are no upload handlers defined, initialize them from settings.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_handlers</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_upload_handlers</span>\n\n    <span class=\"nd\">@upload_handlers</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">upload_handlers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">upload_handlers</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_files&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You cannot set the upload handlers after the upload has been &quot;</span>\n                <span class=\"s2\">&quot;processed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_upload_handlers</span> <span class=\"o\">=</span> <span class=\"n\">upload_handlers</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_file_upload</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">META</span><span class=\"p\">,</span> <span class=\"n\">post_data</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a tuple of (POST QueryDict, FILES MultiValueDict).&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upload_handlers</span> <span class=\"o\">=</span> <span class=\"n\">ImmutableList</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upload_handlers</span><span class=\"p\">,</span>\n            <span class=\"n\">warning</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You cannot alter upload handlers after the upload has been &quot;</span>\n                <span class=\"s2\">&quot;processed.&quot;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">MultiPartParser</span><span class=\"p\">(</span><span class=\"n\">META</span><span class=\"p\">,</span> <span class=\"n\">post_data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">upload_handlers</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_body&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_started</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">RawPostDataException</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;You cannot access body after reading from request&#39;s data stream&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"c1\"># Limit the maximum request data size that will be handled in-memory.</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATA_UPLOAD_MAX_MEMORY_SIZE</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n                <span class=\"ow\">and</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;CONTENT_LENGTH&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n                <span class=\"o\">&gt;</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATA_UPLOAD_MAX_MEMORY_SIZE</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">RequestDataTooBig</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE.&quot;</span>\n                <span class=\"p\">)</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_body</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">UnreadablePostError</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n            <span class=\"k\">finally</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_body</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_body</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_mark_post_parse_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span> <span class=\"o\">=</span> <span class=\"n\">MultiValueDict</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_load_post_and_files</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Populate self._post and self._files if the content-type is a form type&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span><span class=\"p\">),</span>\n                <span class=\"n\">MultiValueDict</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_started</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_body&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mark_post_parse_error</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;multipart/form-data&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_body&quot;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Use already read data</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_body</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_file_upload</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"n\">MultiPartParserError</span><span class=\"p\">,</span> <span class=\"n\">TooManyFilesSent</span><span class=\"p\">):</span>\n                <span class=\"c1\"># An error occurred while parsing POST data. Since when</span>\n                <span class=\"c1\"># formatting the error the request handler might access</span>\n                <span class=\"c1\"># self.POST, set self._post and self._file to prevent</span>\n                <span class=\"c1\"># attempts to parse POST data again.</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mark_post_parse_error</span><span class=\"p\">()</span>\n                <span class=\"k\">raise</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;application/x-www-form-urlencoded&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span><span class=\"p\">),</span>\n                <span class=\"n\">MultiValueDict</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span><span class=\"p\">),</span>\n                <span class=\"n\">MultiValueDict</span><span class=\"p\">(),</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_files&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">from_iterable</span><span class=\"p\">(</span><span class=\"n\">list_</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">list_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_files</span><span class=\"o\">.</span><span class=\"n\">lists</span><span class=\"p\">()):</span>\n                <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># File-like and iterator interface.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Expects self._stream to be set to an appropriate source of bytes by</span>\n    <span class=\"c1\"># a corresponding request subclass (e.g. WSGIRequest).</span>\n    <span class=\"c1\"># Also when request data has already been read by request.POST or</span>\n    <span class=\"c1\"># request.body, self._stream points to a BytesIO instance</span>\n    <span class=\"c1\"># containing that data.</span>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.read\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.read\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_started</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">UnreadablePostError</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.readline\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.readline\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">readline</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_read_started</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_stream</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">UnreadablePostError</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.__iter__\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.__iter__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">readline</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpRequest.readlines\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpRequest.readlines\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">readlines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HttpHeaders</span><span class=\"p\">(</span><span class=\"n\">CaseInsensitiveMapping</span><span class=\"p\">):</span>\n    <span class=\"n\">HTTP_PREFIX</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;HTTP_&quot;</span>\n    <span class=\"c1\"># PEP 333 gives two headers which aren&#39;t prepended with HTTP_.</span>\n    <span class=\"n\">UNPREFIXED_HEADERS</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;CONTENT_TYPE&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CONTENT_LENGTH&quot;</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">environ</span><span class=\"p\">):</span>\n        <span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_header_name</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"p\">:</span>\n                <span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Allow header lookup using underscores in place of hyphens.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;_&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">parse_header_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">HTTP_PREFIX</span><span class=\"p\">):</span>\n            <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">HTTP_PREFIX</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">header</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">UNPREFIXED_HEADERS</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;_&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_wsgi_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">):</span>\n        <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">UNPREFIXED_HEADERS</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">header</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">HTTP_PREFIX</span><span class=\"si\">}{</span><span class=\"n\">header</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_asgi_name</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_wsgi_names</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">to_wsgi_name</span><span class=\"p\">(</span><span class=\"n\">header_name</span><span class=\"p\">):</span> <span class=\"n\">value</span>\n            <span class=\"k\">for</span> <span class=\"n\">header_name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">to_asgi_names</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">to_asgi_name</span><span class=\"p\">(</span><span class=\"n\">header_name</span><span class=\"p\">):</span> <span class=\"n\">value</span>\n            <span class=\"k\">for</span> <span class=\"n\">header_name</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n        <span class=\"p\">}</span>\n\n\n<div class=\"viewcode-block\" id=\"QueryDict\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">QueryDict</span><span class=\"p\">(</span><span class=\"n\">MultiValueDict</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A specialized MultiValueDict which represents a query string.</span>\n\n<span class=\"sd\">    A QueryDict can be used to represent GET or POST data. It subclasses</span>\n<span class=\"sd\">    MultiValueDict since keys in such data can be repeated, for instance</span>\n<span class=\"sd\">    in the data from a form with a &lt;select multiple&gt; field.</span>\n\n<span class=\"sd\">    By default QueryDicts are immutable, though the copy() method</span>\n<span class=\"sd\">    will always return a mutable copy.</span>\n\n<span class=\"sd\">    Both keys and values set on this class are converted from the given encoding</span>\n<span class=\"sd\">    (DEFAULT_CHARSET by default) to str.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># These are both reset in __init__, but is specified here at the class</span>\n    <span class=\"c1\"># level so that unpickling will have valid values</span>\n    <span class=\"n\">_mutable</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">_encoding</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<div class=\"viewcode-block\" id=\"QueryDict.__init__\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query_string</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">encoding</span> <span class=\"ow\">or</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CHARSET</span>\n        <span class=\"n\">query_string</span> <span class=\"o\">=</span> <span class=\"n\">query_string</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">parse_qsl_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;keep_blank_values&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;encoding&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;max_num_fields&quot;</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATA_UPLOAD_MAX_NUMBER_FIELDS</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">query_string</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n            <span class=\"c1\"># query_string normally contains URL-encoded data, a subset of ASCII.</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">query_string</span> <span class=\"o\">=</span> <span class=\"n\">query_string</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># ... but some user agents are misbehaving :-(</span>\n                <span class=\"n\">query_string</span> <span class=\"o\">=</span> <span class=\"n\">query_string</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;iso-8859-1&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">parse_qsl</span><span class=\"p\">(</span><span class=\"n\">query_string</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">parse_qsl_kwargs</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">appendlist</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># ValueError can also be raised if the strict_parsing argument to</span>\n            <span class=\"c1\"># parse_qsl() is True. As that is not used by Django, assume that</span>\n            <span class=\"c1\"># the exception was raised by exceeding the value of max_num_fields</span>\n            <span class=\"c1\"># instead of fragile checks of exception message strings.</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TooManyFieldsSent</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The number of GET/POST parameters exceeded &quot;</span>\n                <span class=\"s2\">&quot;settings.DATA_UPLOAD_MAX_NUMBER_FIELDS.&quot;</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mutable</span> <span class=\"o\">=</span> <span class=\"n\">mutable</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.fromkeys\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.fromkeys\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">fromkeys</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">iterable</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a new QueryDict with keys (may be repeated) from an iterable and</span>\n<span class=\"sd\">        values from value.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">iterable</span><span class=\"p\">:</span>\n            <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">appendlist</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">mutable</span><span class=\"p\">:</span>\n            <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">_mutable</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">q</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">encoding</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CHARSET</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span>\n\n    <span class=\"nd\">@encoding</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">encoding</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_encoding</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_assert_mutable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_mutable</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;This QueryDict instance is immutable&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"QueryDict.__setitem__\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.__setitem__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__delitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__delitem__</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__copy__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lists</span><span class=\"p\">():</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">setlist</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__deepcopy__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">memo</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"n\">memo</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)]</span> <span class=\"o\">=</span> <span class=\"n\">result</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lists</span><span class=\"p\">():</span>\n            <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">setlist</span><span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">memo</span><span class=\"p\">),</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">memo</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n<div class=\"viewcode-block\" id=\"QueryDict.setlist\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.setlist\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setlist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">list_</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"n\">list_</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">elt</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">elt</span> <span class=\"ow\">in</span> <span class=\"n\">list_</span><span class=\"p\">]</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setlist</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">list_</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.setlistdefault\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.setlistdefault\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setlistdefault</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default_list</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setlistdefault</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default_list</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.appendlist\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.appendlist\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">appendlist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">appendlist</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.pop\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.pop\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.popitem\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.popitem\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">popitem</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">popitem</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clear</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n\n<div class=\"viewcode-block\" id=\"QueryDict.setdefault\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.setdefault\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setdefault</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_assert_mutable</span><span class=\"p\">()</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.copy\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.copy\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a mutable copy of this object.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__deepcopy__</span><span class=\"p\">({})</span></div>\n\n<div class=\"viewcode-block\" id=\"QueryDict.urlencode\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.QueryDict.urlencode\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">urlencode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an encoded string of all query string arguments.</span>\n\n<span class=\"sd\">        `safe` specifies characters which don&#39;t require quoting, for example::</span>\n\n<span class=\"sd\">            &gt;&gt;&gt; q = QueryDict(mutable=True)</span>\n<span class=\"sd\">            &gt;&gt;&gt; q[&#39;next&#39;] = &#39;/a&amp;b/&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; q.urlencode()</span>\n<span class=\"sd\">            &#39;next=%2Fa%26b%2F&#39;</span>\n<span class=\"sd\">            &gt;&gt;&gt; q.urlencode(safe=&#39;/&#39;)</span>\n<span class=\"sd\">            &#39;next=/a%26b/&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">safe</span><span class=\"p\">:</span>\n            <span class=\"n\">safe</span> <span class=\"o\">=</span> <span class=\"n\">safe</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">((</span><span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"p\">),</span> <span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"p\">)))</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n\n            <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">urlencode</span><span class=\"p\">({</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">})</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">list_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lists</span><span class=\"p\">():</span>\n            <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n                <span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encoding</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">list_</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&amp;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MediaType</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">media_type_raw_line</span><span class=\"p\">):</span>\n        <span class=\"n\">full_type</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">parse_header_parameters</span><span class=\"p\">(</span>\n            <span class=\"n\">media_type_raw_line</span> <span class=\"k\">if</span> <span class=\"n\">media_type_raw_line</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_type</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sub_type</span> <span class=\"o\">=</span> <span class=\"n\">full_type</span><span class=\"o\">.</span><span class=\"n\">partition</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">params_str</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s2\">&quot;; </span><span class=\"si\">%s</span><span class=\"s2\">=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_type</span><span class=\"p\">,</span>\n            <span class=\"p\">(</span><span class=\"s2\">&quot;/</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sub_type</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sub_type</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">params_str</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_all_types</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;*&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sub_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;*&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_all_types</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">MediaType</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">main_type</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">main_type</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sub_type</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">sub_type</span><span class=\"p\">}:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<span class=\"c1\"># It&#39;s neither necessary nor appropriate to use</span>\n<span class=\"c1\"># django.utils.encoding.force_str() for parsing URLs and form inputs. Thus,</span>\n<span class=\"c1\"># this slightly more restricted function, used by QueryDict.</span>\n<span class=\"k\">def</span> <span class=\"nf\">bytes_to_text</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert bytes objects to strings, using the given encoding. Illegally</span>\n<span class=\"sd\">    encoded input characters are replaced with Unicode &quot;unknown&quot; codepoint</span>\n<span class=\"sd\">    (\\ufffd).</span>\n\n<span class=\"sd\">    Return any non-bytes objects without change.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"s2\">&quot;replace&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">s</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">split_domain_port</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a (domain, port) tuple from a given host.</span>\n\n<span class=\"sd\">    Returned domain is lowercased. If the host is invalid, the domain will be</span>\n<span class=\"sd\">    empty.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">host_validation_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">host</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;]&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># It&#39;s an IPv6 address without a port.</span>\n        <span class=\"k\">return</span> <span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">bits</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Remove a trailing dot (if present) from the domain.</span>\n    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">domain</span><span class=\"o\">.</span><span class=\"n\">removesuffix</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">port</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">validate_host</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Validate the given host for this site.</span>\n\n<span class=\"sd\">    Check that the host looks valid and matches a host or host pattern in the</span>\n<span class=\"sd\">    given list of ``allowed_hosts``. Any pattern beginning with a period</span>\n<span class=\"sd\">    matches a domain and all its subdomains (e.g. ``.example.com`` matches</span>\n<span class=\"sd\">    ``example.com`` and any subdomain), ``*`` matches anything, and anything</span>\n<span class=\"sd\">    else must match exactly.</span>\n\n<span class=\"sd\">    Note: This function assumes that the given host is lowercased and has</span>\n<span class=\"sd\">    already had the port, if any, stripped off.</span>\n\n<span class=\"sd\">    Return ``True`` for a valid host, ``False`` otherwise.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span>\n        <span class=\"n\">pattern</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;*&quot;</span> <span class=\"ow\">or</span> <span class=\"n\">is_same_domain</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"n\">allowed_hosts</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_accept_header</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">MediaType</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">token</span> <span class=\"ow\">in</span> <span class=\"n\">header</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()]</span>\n</pre></div>", "current_page_name": "_modules/django/http/request", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}