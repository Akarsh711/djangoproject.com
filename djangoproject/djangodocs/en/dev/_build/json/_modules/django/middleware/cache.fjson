{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.middleware.cache", "body": "<h1>Source code for django.middleware.cache</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Cache middleware. If enabled, each Django-powered page will be cached based on</span>\n<span class=\"sd\">URL. The canonical way to enable cache middleware is to set</span>\n<span class=\"sd\">``UpdateCacheMiddleware`` as your first piece of middleware, and</span>\n<span class=\"sd\">``FetchFromCacheMiddleware`` as the last::</span>\n\n<span class=\"sd\">    MIDDLEWARE = [</span>\n<span class=\"sd\">        &#39;django.middleware.cache.UpdateCacheMiddleware&#39;,</span>\n<span class=\"sd\">        ...</span>\n<span class=\"sd\">        &#39;django.middleware.cache.FetchFromCacheMiddleware&#39;</span>\n<span class=\"sd\">    ]</span>\n\n<span class=\"sd\">This is counter-intuitive, but correct: ``UpdateCacheMiddleware`` needs to run</span>\n<span class=\"sd\">last during the response phase, which processes middleware bottom-up;</span>\n<span class=\"sd\">``FetchFromCacheMiddleware`` needs to run last during the request phase, which</span>\n<span class=\"sd\">processes middleware top-down.</span>\n\n<span class=\"sd\">The single-class ``CacheMiddleware`` can be used for some simple sites.</span>\n<span class=\"sd\">However, if any other piece of middleware needs to affect the cache key, you&#39;ll</span>\n<span class=\"sd\">need to use the two-part ``UpdateCacheMiddleware`` and</span>\n<span class=\"sd\">``FetchFromCacheMiddleware``. This&#39;ll most often happen when you&#39;re using</span>\n<span class=\"sd\">Django&#39;s ``LocaleMiddleware``.</span>\n\n<span class=\"sd\">More details about how the caching works:</span>\n\n<span class=\"sd\">* Only GET or HEAD-requests with status code 200 are cached.</span>\n\n<span class=\"sd\">* The number of seconds each page is stored for is set by the &quot;max-age&quot; section</span>\n<span class=\"sd\">  of the response&#39;s &quot;Cache-Control&quot; header, falling back to the</span>\n<span class=\"sd\">  CACHE_MIDDLEWARE_SECONDS setting if the section was not found.</span>\n\n<span class=\"sd\">* This middleware expects that a HEAD request is answered with the same response</span>\n<span class=\"sd\">  headers exactly like the corresponding GET request.</span>\n\n<span class=\"sd\">* When a hit occurs, a shallow copy of the original response object is returned</span>\n<span class=\"sd\">  from process_request.</span>\n\n<span class=\"sd\">* Pages will be cached based on the contents of the request headers listed in</span>\n<span class=\"sd\">  the response&#39;s &quot;Vary&quot; header.</span>\n\n<span class=\"sd\">* This middleware also sets ETag, Last-Modified, Expires and Cache-Control</span>\n<span class=\"sd\">  headers on the response object.</span>\n\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.cache</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CACHE_ALIAS</span><span class=\"p\">,</span> <span class=\"n\">caches</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.cache</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">get_cache_key</span><span class=\"p\">,</span>\n    <span class=\"n\">get_max_age</span><span class=\"p\">,</span>\n    <span class=\"n\">has_vary_header</span><span class=\"p\">,</span>\n    <span class=\"n\">learn_cache_key</span><span class=\"p\">,</span>\n    <span class=\"n\">patch_response_headers</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">MiddlewareMixin</span>\n\n\n<div class=\"viewcode-block\" id=\"UpdateCacheMiddleware\"><a class=\"viewcode-back\" href=\"../../../../ref/middleware/#django.middleware.cache.UpdateCacheMiddleware\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">UpdateCacheMiddleware</span><span class=\"p\">(</span><span class=\"n\">MiddlewareMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Response-phase cache middleware that updates the cache if the response is</span>\n<span class=\"sd\">    cacheable.</span>\n\n<span class=\"sd\">    Must be used as part of the two-part update/fetch cache middleware.</span>\n<span class=\"sd\">    UpdateCacheMiddleware must be the first piece of middleware in MIDDLEWARE</span>\n<span class=\"sd\">    so that it&#39;ll get called last during the response phase.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">get_response</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">get_response</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_timeout</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_SECONDS</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page_timeout</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_KEY_PREFIX</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_alias</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_ALIAS</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cache</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">caches</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_alias</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_should_update_cache</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_cache_update_cache&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">_cache_update_cache</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the cache, if needed.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_should_update_cache</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n            <span class=\"c1\"># We don&#39;t need to update the cache, just return.</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming</span> <span class=\"ow\">or</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">304</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"c1\"># Don&#39;t cache responses that set a user-specific (and maybe security</span>\n        <span class=\"c1\"># sensitive) cookie in response to a cookie-less request.</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">COOKIES</span>\n            <span class=\"ow\">and</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">cookies</span>\n            <span class=\"ow\">and</span> <span class=\"n\">has_vary_header</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Cookie&quot;</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"c1\"># Don&#39;t cache a response with &#39;Cache-Control: private&#39;</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;private&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cache-Control&quot;</span><span class=\"p\">,</span> <span class=\"p\">()):</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"c1\"># Page timeout takes precedence over the &quot;max-age&quot; and the default</span>\n        <span class=\"c1\"># cache timeout.</span>\n        <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page_timeout</span>\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># The timeout from the &quot;max-age&quot; section of the &quot;Cache-Control&quot;</span>\n            <span class=\"c1\"># header takes precedence over the default cache timeout.</span>\n            <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"n\">get_max_age</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_timeout</span>\n            <span class=\"k\">elif</span> <span class=\"n\">timeout</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># max-age was set to 0, don&#39;t cache.</span>\n                <span class=\"k\">return</span> <span class=\"n\">response</span>\n        <span class=\"n\">patch_response_headers</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">timeout</span> <span class=\"ow\">and</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"n\">learn_cache_key</span><span class=\"p\">(</span>\n                <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_prefix</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;render&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">):</span>\n                <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">add_post_render_callback</span><span class=\"p\">(</span>\n                    <span class=\"k\">lambda</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span></div>\n\n\n<div class=\"viewcode-block\" id=\"FetchFromCacheMiddleware\"><a class=\"viewcode-back\" href=\"../../../../ref/middleware/#django.middleware.cache.FetchFromCacheMiddleware\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FetchFromCacheMiddleware</span><span class=\"p\">(</span><span class=\"n\">MiddlewareMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Request-phase cache middleware that fetches a page from the cache.</span>\n\n<span class=\"sd\">    Must be used as part of the two-part update/fetch cache middleware.</span>\n<span class=\"sd\">    FetchFromCacheMiddleware must be the last piece of middleware in MIDDLEWARE</span>\n<span class=\"sd\">    so that it&#39;ll get called last during the request phase.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">get_response</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">get_response</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_KEY_PREFIX</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_alias</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CACHE_MIDDLEWARE_ALIAS</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">cache</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">caches</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_alias</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check whether the page is already cached and return the cached</span>\n<span class=\"sd\">        version if available.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HEAD&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">_cache_update_cache</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Don&#39;t bother checking the cache.</span>\n\n        <span class=\"c1\"># try and get the cached GET response</span>\n        <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"n\">get_cache_key</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_prefix</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">cache_key</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">_cache_update_cache</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># No cache information available, need to rebuild.</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n        <span class=\"c1\"># if it wasn&#39;t found and we are looking for a HEAD, try looking just for that</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;HEAD&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">cache_key</span> <span class=\"o\">=</span> <span class=\"n\">get_cache_key</span><span class=\"p\">(</span>\n                <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_prefix</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HEAD&quot;</span><span class=\"p\">,</span> <span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">cache_key</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">response</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">_cache_update_cache</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>  <span class=\"c1\"># No cache information available, need to rebuild.</span>\n\n        <span class=\"c1\"># hit, return cached response</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">_cache_update_cache</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CacheMiddleware</span><span class=\"p\">(</span><span class=\"n\">UpdateCacheMiddleware</span><span class=\"p\">,</span> <span class=\"n\">FetchFromCacheMiddleware</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Cache middleware that provides basic behavior for many simple sites.</span>\n\n<span class=\"sd\">    Also used as the hook point for the cache decorator, which is generated</span>\n<span class=\"sd\">    using the decorator-from-middleware utility.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">get_response</span><span class=\"p\">,</span> <span class=\"n\">cache_timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">page_timeout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">get_response</span><span class=\"p\">)</span>\n        <span class=\"c1\"># We need to differentiate between &quot;provided, but using default value&quot;,</span>\n        <span class=\"c1\"># and &quot;not provided&quot;. If the value is provided using a default, then</span>\n        <span class=\"c1\"># we fall back to system defaults. If it is not provided at all,</span>\n        <span class=\"c1\"># we need to use middleware defaults.</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;key_prefix&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">key_prefix</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key_prefix</span> <span class=\"o\">=</span> <span class=\"n\">key_prefix</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cache_alias</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;cache_alias&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">cache_alias</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">cache_alias</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CACHE_ALIAS</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_alias</span> <span class=\"o\">=</span> <span class=\"n\">cache_alias</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">cache_timeout</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cache_timeout</span> <span class=\"o\">=</span> <span class=\"n\">cache_timeout</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">page_timeout</span> <span class=\"o\">=</span> <span class=\"n\">page_timeout</span>\n</pre></div>", "current_page_name": "_modules/django/middleware/cache", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}