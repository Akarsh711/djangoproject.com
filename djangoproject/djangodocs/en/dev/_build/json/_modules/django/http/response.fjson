{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.http.response", "body": "<h1>Source code for django.http.response</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">mimetypes</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">email.header</span> <span class=\"kn\">import</span> <span class=\"n\">Header</span>\n<span class=\"kn\">from</span> <span class=\"nn\">http.client</span> <span class=\"kn\">import</span> <span class=\"n\">responses</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urlparse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">asgiref.sync</span> <span class=\"kn\">import</span> <span class=\"n\">async_to_sync</span><span class=\"p\">,</span> <span class=\"n\">sync_to_async</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">signals</span><span class=\"p\">,</span> <span class=\"n\">signing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">DisallowedRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.serializers.json</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoJSONEncoder</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http.cookie</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleCookie</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"n\">CaseInsensitiveMapping</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.encoding</span> <span class=\"kn\">import</span> <span class=\"n\">iri_to_uri</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.http</span> <span class=\"kn\">import</span> <span class=\"n\">content_disposition_header</span><span class=\"p\">,</span> <span class=\"n\">http_date</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n\n<span class=\"n\">_charset_from_content_type_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;;\\s*charset=(?P&lt;charset&gt;[^\\s;]+)&quot;</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">I</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ResponseHeaders</span><span class=\"p\">(</span><span class=\"n\">CaseInsensitiveMapping</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Populate the initial data using __setitem__ to ensure values are</span>\n<span class=\"sd\">        correctly encoded.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_store</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_unpack_items</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_convert_to_charset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"p\">,</span> <span class=\"n\">mime_encode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Convert headers key/value to ascii/latin-1 native strings.</span>\n<span class=\"sd\">        `charset` must be &#39;ascii&#39; or &#39;latin-1&#39;. If `mime_encode` is True and</span>\n<span class=\"sd\">        `value` can&#39;t be represented in the given charset, apply MIME-encoding.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Ensure string is valid in given charset</span>\n                <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">charset</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Convert bytestring using given charset</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">charset</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Ensure string is valid in given charset.</span>\n                <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">charset</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\r</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">BadHeaderError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Header values can&#39;t contain newlines (got </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">!r}</span><span class=\"s2\">)&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">UnicodeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Encoding to a string of the specified charset failed, but we</span>\n            <span class=\"c1\"># don&#39;t know what type that value was, or if it contains newlines,</span>\n            <span class=\"c1\"># which we may need to check for before sending it to be</span>\n            <span class=\"c1\"># encoded for multiple character sets.</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span> <span class=\"ow\">or</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;</span><span class=\"se\">\\r</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n                <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\r</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"n\">BadHeaderError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;Header values can&#39;t contain newlines (got </span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">!r}</span><span class=\"s2\">)&quot;</span>\n                <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n            <span class=\"k\">if</span> <span class=\"n\">mime_encode</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Header</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span> <span class=\"n\">maxlinelen</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">maxsize</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">reason</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;, HTTP response headers must be in </span><span class=\"si\">%s</span><span class=\"s2\"> format&quot;</span> <span class=\"o\">%</span> <span class=\"n\">charset</span>\n                <span class=\"k\">raise</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__delitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_to_charset</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_to_charset</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;latin-1&quot;</span><span class=\"p\">,</span> <span class=\"n\">mime_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_store</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">pop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_store</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span> <span class=\"n\">default</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setdefault</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">key</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BadHeaderError</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseBase\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseBase\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseBase</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    An HTTP response base class with dictionary-accessed headers.</span>\n\n<span class=\"sd\">    This class doesn&#39;t handle content. It should not be used directly.</span>\n<span class=\"sd\">    Use the HttpResponse and StreamingHttpResponse subclasses instead.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">200</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"n\">ResponseHeaders</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charset</span> <span class=\"o\">=</span> <span class=\"n\">charset</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Content-Type&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">content_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;text/html; charset=</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">content_type</span>\n        <span class=\"k\">elif</span> <span class=\"n\">content_type</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;&#39;headers&#39; must not contain &#39;Content-Type&#39; when the &quot;</span>\n                <span class=\"s2\">&quot;&#39;content_type&#39; parameter is provided.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_closers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># This parameter is set by the handler. It&#39;s necessary to preserve the</span>\n        <span class=\"c1\"># historical behavior of request_finished.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_handler_class</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span> <span class=\"o\">=</span> <span class=\"n\">SimpleCookie</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">if</span> <span class=\"n\">status</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP status code must be an integer.&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"mi\">100</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">599</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP status code must be an integer from 100 to 599.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reason_phrase</span> <span class=\"o\">=</span> <span class=\"n\">reason</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reason_phrase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reason_phrase</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reason_phrase</span>\n        <span class=\"c1\"># Leave self._reason_phrase unset in order to use the default</span>\n        <span class=\"c1\"># reason phrase for status code.</span>\n        <span class=\"k\">return</span> <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Unknown Status Code&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@reason_phrase</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reason_phrase</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reason_phrase</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">charset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charset</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charset</span>\n        <span class=\"c1\"># The Content-Type header may not yet be set, because the charset is</span>\n        <span class=\"c1\"># being inserted *into* it.</span>\n        <span class=\"k\">if</span> <span class=\"n\">content_type</span> <span class=\"o\">:=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">matched</span> <span class=\"o\">:=</span> <span class=\"n\">_charset_from_content_type_re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">content_type</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Extract the charset and strip its double quotes.</span>\n                <span class=\"c1\"># Note that having parsed it from the Content-Type, we don&#39;t</span>\n                <span class=\"c1\"># store it back into the _charset for later intentionally, to</span>\n                <span class=\"c1\"># allow for the Content-Type to be switched again later.</span>\n                <span class=\"k\">return</span> <span class=\"n\">matched</span><span class=\"p\">[</span><span class=\"s2\">&quot;charset&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_CHARSET</span>\n\n    <span class=\"nd\">@charset</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">charset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_charset</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialize_headers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;HTTP headers as a bytestring.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;</span><span class=\"se\">\\r\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;: &quot;</span> <span class=\"o\">+</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;latin-1&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"fm\">__bytes__</span> <span class=\"o\">=</span> <span class=\"n\">serialize_headers</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_content_type_for_repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;, &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot;&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;Content-Type&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span>\n            <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__setitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__delitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">):</span>\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"n\">header</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_header</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Case-insensitive check for a header.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">header</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span>\n\n    <span class=\"fm\">__contains__</span> <span class=\"o\">=</span> <span class=\"n\">has_header</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">alternate</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">alternate</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_cookie</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">key</span><span class=\"p\">,</span>\n        <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">httponly</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">samesite</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set a cookie.</span>\n\n<span class=\"sd\">        ``expires`` can be:</span>\n<span class=\"sd\">        - a string in the correct format,</span>\n<span class=\"sd\">        - a naive ``datetime.datetime`` object in UTC,</span>\n<span class=\"sd\">        - an aware ``datetime.datetime`` object in any time zone.</span>\n<span class=\"sd\">        If it is a ``datetime.datetime`` object then calculate ``max_age``.</span>\n\n<span class=\"sd\">        ``max_age`` can be:</span>\n<span class=\"sd\">        - int/float specifying seconds,</span>\n<span class=\"sd\">        - ``datetime.timedelta`` object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"n\">expires</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expires</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">is_naive</span><span class=\"p\">(</span><span class=\"n\">expires</span><span class=\"p\">):</span>\n                    <span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">make_aware</span><span class=\"p\">(</span><span class=\"n\">expires</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span>\n                <span class=\"n\">delta</span> <span class=\"o\">=</span> <span class=\"n\">expires</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Add one second so the date matches exactly (a fraction of</span>\n                <span class=\"c1\"># time gets lost between converting to a timedelta and</span>\n                <span class=\"c1\"># then the date string).</span>\n                <span class=\"n\">delta</span> <span class=\"o\">+=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Just set max_age - the max_age logic will set expires.</span>\n                <span class=\"n\">expires</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">if</span> <span class=\"n\">max_age</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;expires&#39; and &#39;max_age&#39; can&#39;t be used together.&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">max_age</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">delta</span><span class=\"o\">.</span><span class=\"n\">days</span> <span class=\"o\">*</span> <span class=\"mi\">86400</span> <span class=\"o\">+</span> <span class=\"n\">delta</span><span class=\"o\">.</span><span class=\"n\">seconds</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;expires&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">expires</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;expires&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">max_age</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">max_age</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">):</span>\n                <span class=\"n\">max_age</span> <span class=\"o\">=</span> <span class=\"n\">max_age</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;max-age&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">max_age</span><span class=\"p\">)</span>\n            <span class=\"c1\"># IE requires expires, so set it if hasn&#39;t been already.</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">expires</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;expires&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">http_date</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">max_age</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">path</span>\n        <span class=\"k\">if</span> <span class=\"n\">domain</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;domain&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">domain</span>\n        <span class=\"k\">if</span> <span class=\"n\">secure</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;secure&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">httponly</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;httponly&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"n\">samesite</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">samesite</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s2\">&quot;lax&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;none&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;strict&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">&#39;samesite must be &quot;lax&quot;, &quot;none&quot;, or &quot;strict&quot;.&#39;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">][</span><span class=\"s2\">&quot;samesite&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">samesite</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setdefault</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set a header unless it has already been set.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_signed_cookie</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">get_cookie_signer</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">key</span> <span class=\"o\">+</span> <span class=\"n\">salt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete_cookie</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">samesite</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Browsers can ignore the Set-Cookie header if the cookie doesn&#39;t use</span>\n        <span class=\"c1\"># the secure flag and:</span>\n        <span class=\"c1\"># - the cookie name starts with &quot;__Host-&quot; or &quot;__Secure-&quot;, or</span>\n        <span class=\"c1\"># - the samesite is &quot;none&quot;.</span>\n        <span class=\"n\">secure</span> <span class=\"o\">=</span> <span class=\"n\">key</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">((</span><span class=\"s2\">&quot;__Secure-&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__Host-&quot;</span><span class=\"p\">))</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n            <span class=\"n\">samesite</span> <span class=\"ow\">and</span> <span class=\"n\">samesite</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;none&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span>\n            <span class=\"n\">key</span><span class=\"p\">,</span>\n            <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">,</span>\n            <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n            <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"n\">secure</span><span class=\"p\">,</span>\n            <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"s2\">&quot;Thu, 01 Jan 1970 00:00:00 GMT&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">samesite</span><span class=\"o\">=</span><span class=\"n\">samesite</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># Common methods used by subclasses</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_bytes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Turn a value into a bytestring encoded in the output charset.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># Per PEP 3333, this response body must be bytes. To avoid returning</span>\n        <span class=\"c1\"># an instance of a subclass, this function returns `bytes(value)`.</span>\n        <span class=\"c1\"># This doesn&#39;t make a copy when `value` already contains bytes.</span>\n\n        <span class=\"c1\"># Handle string types -- we can&#39;t rely on force_bytes here because:</span>\n        <span class=\"c1\"># - Python attempts str conversion first</span>\n        <span class=\"c1\"># - when self._charset != &#39;utf-8&#39; it re-encodes the content</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">memoryview</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Handle non-string types.</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># These methods partially implement the file-like object interface.</span>\n    <span class=\"c1\"># See https://docs.python.org/library/io.html#io.IOBase</span>\n\n    <span class=\"c1\"># The WSGI server must call this method upon completion of the request.</span>\n    <span class=\"c1\"># See http://blog.dscpl.com.au/2012/10/obligations-for-calling-close-on.html</span>\n    <span class=\"k\">def</span> <span class=\"nf\">close</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">closer</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_closers</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">closer</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"c1\"># Free resources that were still referenced.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_closers</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">closed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">signals</span><span class=\"o\">.</span><span class=\"n\">request_finished</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_handler_class</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">OSError</span><span class=\"p\">(</span><span class=\"s2\">&quot;This </span><span class=\"si\">%s</span><span class=\"s2\"> instance is not writable&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">flush</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">OSError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;This </span><span class=\"si\">%s</span><span class=\"s2\"> instance cannot tell its position&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"c1\"># These methods partially implement a stream-like object interface.</span>\n    <span class=\"c1\"># See https://docs.python.org/library/io.html#io.IOBase</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">readable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">seekable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">writable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">writelines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lines</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">OSError</span><span class=\"p\">(</span><span class=\"s2\">&quot;This </span><span class=\"si\">%s</span><span class=\"s2\"> instance is not writable&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponse\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">HttpResponseBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    An HTTP response class with a string as content.</span>\n\n<span class=\"sd\">    This content can be read, appended to, or replaced.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">streaming</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<div class=\"viewcode-block\" id=\"HttpResponse.__init__\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Content is a bytestring. See the `content` property methods.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">content</span></div>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%(cls)s</span><span class=\"s2\"> status_code=</span><span class=\"si\">%(status_code)d%(content_type)s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;cls&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;status_code&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;content_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type_for_repr</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Full HTTP message, including headers, as a bytestring.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">serialize_headers</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;</span><span class=\"se\">\\r\\n\\r\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span>\n\n    <span class=\"fm\">__bytes__</span> <span class=\"o\">=</span> <span class=\"n\">serialize</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_container</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@content</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Consume iterators upon assignment to allow repeated iteration.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__iter__&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span>\n            <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">memoryview</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_bytes</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;close&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_bytes</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Create a list of properly encoded bytestrings to support write().</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_container</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">content</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_container</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"HttpResponse.write\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse.write\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_container</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_bytes</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">))</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpResponse.tell\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse.tell\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">tell</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpResponse.getvalue\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse.getvalue\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">getvalue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpResponse.writable\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse.writable\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">writable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span></div>\n\n<div class=\"viewcode-block\" id=\"HttpResponse.writelines\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponse.writelines\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">writelines</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lines</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">lines</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"StreamingHttpResponse\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.StreamingHttpResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">StreamingHttpResponse</span><span class=\"p\">(</span><span class=\"n\">HttpResponseBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A streaming HTTP response class with an iterator as content.</span>\n\n<span class=\"sd\">    This should only be iterated once, when the response is streamed to the</span>\n<span class=\"sd\">    client. However, it can be appended to or replaced with a new iterator</span>\n<span class=\"sd\">    that wraps the original content (or yields entirely new content).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">streaming</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">streaming_content</span><span class=\"o\">=</span><span class=\"p\">(),</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># `streaming_content` should be an iterable of bytestrings.</span>\n        <span class=\"c1\"># See the `streaming_content` property methods.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span> <span class=\"o\">=</span> <span class=\"n\">streaming_content</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%(cls)s</span><span class=\"s2\"> status_code=</span><span class=\"si\">%(status_code)d%(content_type)s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;cls&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;status_code&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;content_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type_for_repr</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;This </span><span class=\"si\">%s</span><span class=\"s2\"> instance has no `content` attribute. Use &quot;</span>\n            <span class=\"s2\">&quot;`streaming_content` instead.&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">streaming_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_async</span><span class=\"p\">:</span>\n            <span class=\"c1\"># pull to lexical scope to capture fixed reference in case</span>\n            <span class=\"c1\"># streaming_content is set again later.</span>\n            <span class=\"n\">_iterator</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterator</span>\n\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">awrapper</span><span class=\"p\">():</span>\n                <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"n\">_iterator</span><span class=\"p\">:</span>\n                    <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_bytes</span><span class=\"p\">(</span><span class=\"n\">part</span><span class=\"p\">)</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">awrapper</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_bytes</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterator</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@streaming_content</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">streaming_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_set_streaming_content</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_streaming_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Ensure we can never iterate on &quot;value&quot; more than once.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterator</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_async</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterator</span> <span class=\"o\">=</span> <span class=\"n\">aiter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_async</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;close&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_closers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;StreamingHttpResponse must consume asynchronous iterators in order to &quot;</span>\n                <span class=\"s2\">&quot;serve them synchronously. Use a synchronous iterator instead.&quot;</span><span class=\"p\">,</span>\n                <span class=\"ne\">Warning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"c1\"># async iterator. Consume in async_to_sync and map back.</span>\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">to_list</span><span class=\"p\">(</span><span class=\"n\">_iterator</span><span class=\"p\">):</span>\n                <span class=\"n\">as_list</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">_iterator</span><span class=\"p\">:</span>\n                    <span class=\"n\">as_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">as_list</span>\n\n            <span class=\"k\">return</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">make_bytes</span><span class=\"p\">,</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">async_to_sync</span><span class=\"p\">(</span><span class=\"n\">to_list</span><span class=\"p\">)(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_iterator</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"fm\">__aiter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span><span class=\"p\">:</span>\n                <span class=\"k\">yield</span> <span class=\"n\">part</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;StreamingHttpResponse must consume synchronous iterators in order to &quot;</span>\n                <span class=\"s2\">&quot;serve them asynchronously. Use an asynchronous iterator instead.&quot;</span><span class=\"p\">,</span>\n                <span class=\"ne\">Warning</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"c1\"># sync iterator. Consume via sync_to_async and yield via async</span>\n            <span class=\"c1\"># generator.</span>\n            <span class=\"k\">for</span> <span class=\"n\">part</span> <span class=\"ow\">in</span> <span class=\"k\">await</span> <span class=\"n\">sync_to_async</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">)(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">part</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">getvalue</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"FileResponse\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.FileResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FileResponse</span><span class=\"p\">(</span><span class=\"n\">StreamingHttpResponse</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A streaming HTTP response class optimized for files.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">block_size</span> <span class=\"o\">=</span> <span class=\"mi\">4096</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">as_attachment</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_attachment</span> <span class=\"o\">=</span> <span class=\"n\">as_attachment</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">filename</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_no_explicit_content_type</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;content_type&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span> <span class=\"ow\">or</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;content_type&quot;</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_set_streaming_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;read&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_to_stream</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_set_streaming_content</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_to_stream</span> <span class=\"o\">=</span> <span class=\"n\">filelike</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">,</span> <span class=\"s2\">&quot;close&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resource_closers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_size</span><span class=\"p\">),</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_headers</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_set_streaming_content</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"FileResponse.set_headers\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.FileResponse.set_headers\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">set_headers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filelike</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set some common response headers (Content-Length, Content-Type, and</span>\n<span class=\"sd\">        Content-Disposition) based on the `filelike` response content.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">filename</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">seekable</span> <span class=\"o\">=</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">,</span> <span class=\"s2\">&quot;seek&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">,</span> <span class=\"s2\">&quot;seekable&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">seekable</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tell&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">seekable</span><span class=\"p\">:</span>\n                <span class=\"n\">initial_position</span> <span class=\"o\">=</span> <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"p\">()</span>\n                <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">SEEK_END</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">initial_position</span>\n                <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">initial_position</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"p\">,</span> <span class=\"s2\">&quot;getbuffer&quot;</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">getbuffer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nbytes</span> <span class=\"o\">-</span> <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"p\">()</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">getsize</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"p\">()</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">seekable</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">sum</span><span class=\"p\">(</span>\n                <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_size</span><span class=\"p\">)),</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">filelike</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]),</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">SEEK_END</span><span class=\"p\">)</span>\n\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"ow\">or</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_no_explicit_content_type</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">filename</span><span class=\"p\">:</span>\n                <span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"n\">encoding</span> <span class=\"o\">=</span> <span class=\"n\">mimetypes</span><span class=\"o\">.</span><span class=\"n\">guess_type</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Encoding isn&#39;t set to prevent browsers from automatically</span>\n                <span class=\"c1\"># uncompressing files.</span>\n                <span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;br&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/x-brotli&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;bzip2&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/x-bzip&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;compress&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/x-compress&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;gzip&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/gzip&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;xz&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/x-xz&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"n\">content_type</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;application/octet-stream&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;application/octet-stream&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">content_disposition</span> <span class=\"o\">:=</span> <span class=\"n\">content_disposition_header</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_attachment</span><span class=\"p\">,</span> <span class=\"n\">filename</span>\n        <span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Disposition&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">content_disposition</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HttpResponseRedirectBase</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">allowed_schemes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;http&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;https&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ftp&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">redirect_to</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s2\">&quot;Location&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">iri_to_uri</span><span class=\"p\">(</span><span class=\"n\">redirect_to</span><span class=\"p\">)</span>\n        <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">urlparse</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">redirect_to</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"ow\">and</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allowed_schemes</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">DisallowedRedirect</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Unsafe redirect to URL with protocol &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">scheme</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s2\">&quot;Location&quot;</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"s1\">&#39;&lt;</span><span class=\"si\">%(cls)s</span><span class=\"s1\"> status_code=</span><span class=\"si\">%(status_code)d%(content_type)s</span><span class=\"s1\">, url=&quot;</span><span class=\"si\">%(url)s</span><span class=\"s1\">&quot;&gt;&#39;</span>\n            <span class=\"o\">%</span> <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;cls&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;status_code&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;content_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type_for_repr</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">,</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseRedirect\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseRedirect\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"n\">HttpResponseRedirectBase</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">302</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponsePermanentRedirect\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponsePermanentRedirect\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponsePermanentRedirect</span><span class=\"p\">(</span><span class=\"n\">HttpResponseRedirectBase</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">301</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseNotModified\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseNotModified\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseNotModified</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">304</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s2\">&quot;content-type&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@HttpResponse</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You cannot set content to a 304 (Not Modified) response&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_container</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseBadRequest\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseBadRequest\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseBadRequest</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">400</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseNotFound\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseNotFound\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseNotFound</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">404</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseForbidden\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseForbidden\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseForbidden</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">403</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseNotAllowed\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseNotAllowed\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseNotAllowed</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">405</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">permitted_methods</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s2\">&quot;Allow&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">permitted_methods</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%(cls)s</span><span class=\"s2\"> [</span><span class=\"si\">%(methods)s</span><span class=\"s2\">] status_code=</span><span class=\"si\">%(status_code)d%(content_type)s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;cls&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;status_code&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;content_type&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type_for_repr</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;methods&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"s2\">&quot;Allow&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">}</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseGone\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseGone\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseGone</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">410</span></div>\n\n\n<div class=\"viewcode-block\" id=\"HttpResponseServerError\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.HttpResponseServerError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">HttpResponseServerError</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">status_code</span> <span class=\"o\">=</span> <span class=\"mi\">500</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Http404</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"JsonResponse\"><a class=\"viewcode-back\" href=\"../../../../ref/request-response/#django.http.JsonResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    An HTTP response class that consumes data to be serialized to JSON.</span>\n\n<span class=\"sd\">    :param data: Data to be dumped into json. By default only ``dict`` objects</span>\n<span class=\"sd\">      are allowed to be passed due to a security flaw before ECMAScript 5. See</span>\n<span class=\"sd\">      the ``safe`` parameter for more information.</span>\n<span class=\"sd\">    :param encoder: Should be a json encoder class. Defaults to</span>\n<span class=\"sd\">      ``django.core.serializers.json.DjangoJSONEncoder``.</span>\n<span class=\"sd\">    :param safe: Controls if only ``dict`` objects may be serialized. Defaults</span>\n<span class=\"sd\">      to ``True``.</span>\n<span class=\"sd\">    :param json_dumps_params: A dictionary of kwargs passed to json.dumps().</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">DjangoJSONEncoder</span><span class=\"p\">,</span>\n        <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">json_dumps_params</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">safe</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;In order to allow non-dict objects to be serialized set the &quot;</span>\n                <span class=\"s2\">&quot;safe parameter to False.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">json_dumps_params</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">json_dumps_params</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;content_type&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;application/json&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">encoder</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">json_dumps_params</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/django/http/response", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}