{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.views.decorators.debug", "body": "<h1>Source code for django.views.decorators.debug</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpRequest</span>\n\n\n<div class=\"viewcode-block\" id=\"sensitive_variables\"><a class=\"viewcode-back\" href=\"../../../../../howto/error-reporting/#django.views.decorators.debug.sensitive_variables\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">sensitive_variables</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">variables</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Indicate which variables used in the decorated function are sensitive so</span>\n<span class=\"sd\">    that those variables can later be treated in a special way, for example</span>\n<span class=\"sd\">    by hiding them when logging unhandled exceptions.</span>\n\n<span class=\"sd\">    Accept two forms:</span>\n\n<span class=\"sd\">    * with specified variable names:</span>\n\n<span class=\"sd\">        @sensitive_variables(&#39;user&#39;, &#39;password&#39;, &#39;credit_card&#39;)</span>\n<span class=\"sd\">        def my_function(user):</span>\n<span class=\"sd\">            password = user.pass_word</span>\n<span class=\"sd\">            credit_card = user.credit_card_number</span>\n<span class=\"sd\">            ...</span>\n\n<span class=\"sd\">    * without any specified variable names, in which case consider all</span>\n<span class=\"sd\">      variables are sensitive:</span>\n\n<span class=\"sd\">        @sensitive_variables()</span>\n<span class=\"sd\">        def my_function()</span>\n<span class=\"sd\">            ...</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">variables</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">variables</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;sensitive_variables() must be called to use it as a decorator, &quot;</span>\n            <span class=\"s2\">&quot;e.g., use @sensitive_variables(), not @sensitive_variables.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decorator</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">sensitive_variables_wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">func_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">func_kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">variables</span><span class=\"p\">:</span>\n                <span class=\"n\">sensitive_variables_wrapper</span><span class=\"o\">.</span><span class=\"n\">sensitive_variables</span> <span class=\"o\">=</span> <span class=\"n\">variables</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">sensitive_variables_wrapper</span><span class=\"o\">.</span><span class=\"n\">sensitive_variables</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;__ALL__&quot;</span>\n            <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">func_args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">func_kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sensitive_variables_wrapper</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">decorator</span></div>\n\n\n<div class=\"viewcode-block\" id=\"sensitive_post_parameters\"><a class=\"viewcode-back\" href=\"../../../../../howto/error-reporting/#django.views.decorators.debug.sensitive_post_parameters\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">sensitive_post_parameters</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">parameters</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Indicate which POST parameters used in the decorated view are sensitive,</span>\n<span class=\"sd\">    so that those parameters can later be treated in a special way, for example</span>\n<span class=\"sd\">    by hiding them when logging unhandled exceptions.</span>\n\n<span class=\"sd\">    Accept two forms:</span>\n\n<span class=\"sd\">    * with specified parameters:</span>\n\n<span class=\"sd\">        @sensitive_post_parameters(&#39;password&#39;, &#39;credit_card&#39;)</span>\n<span class=\"sd\">        def my_view(request):</span>\n<span class=\"sd\">            pw = request.POST[&#39;password&#39;]</span>\n<span class=\"sd\">            cc = request.POST[&#39;credit_card&#39;]</span>\n<span class=\"sd\">            ...</span>\n\n<span class=\"sd\">    * without any specified parameters, in which case consider all</span>\n<span class=\"sd\">      variables are sensitive:</span>\n\n<span class=\"sd\">        @sensitive_post_parameters()</span>\n<span class=\"sd\">        def my_view(request)</span>\n<span class=\"sd\">            ...</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">parameters</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;sensitive_post_parameters() must be called to use it as a &quot;</span>\n            <span class=\"s2\">&quot;decorator, e.g., use @sensitive_post_parameters(), not &quot;</span>\n            <span class=\"s2\">&quot;@sensitive_post_parameters.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decorator</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">):</span>\n        <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span>\n        <span class=\"k\">def</span> <span class=\"nf\">sensitive_post_parameters_wrapper</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">HttpRequest</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;sensitive_post_parameters didn&#39;t receive an HttpRequest &quot;</span>\n                    <span class=\"s2\">&quot;object. If you are decorating a classmethod, make sure &quot;</span>\n                    <span class=\"s2\">&quot;to use @method_decorator.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">parameters</span><span class=\"p\">:</span>\n                <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">sensitive_post_parameters</span> <span class=\"o\">=</span> <span class=\"n\">parameters</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">sensitive_post_parameters</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;__ALL__&quot;</span>\n            <span class=\"k\">return</span> <span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">sensitive_post_parameters_wrapper</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">decorator</span></div>\n</pre></div>", "current_page_name": "_modules/django/views/decorators/debug", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}