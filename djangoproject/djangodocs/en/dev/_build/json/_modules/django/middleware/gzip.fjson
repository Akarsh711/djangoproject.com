{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.middleware.gzip", "body": "<h1>Source code for django.middleware.gzip</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.cache</span> <span class=\"kn\">import</span> <span class=\"n\">patch_vary_headers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">MiddlewareMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.text</span> <span class=\"kn\">import</span> <span class=\"n\">compress_sequence</span><span class=\"p\">,</span> <span class=\"n\">compress_string</span>\n\n<span class=\"n\">re_accepts_gzip</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;\\bgzip\\b&quot;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"GZipMiddleware\"><a class=\"viewcode-back\" href=\"../../../../ref/middleware/#django.middleware.gzip.GZipMiddleware\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">GZipMiddleware</span><span class=\"p\">(</span><span class=\"n\">MiddlewareMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Compress content if the browser allows gzip compression.</span>\n<span class=\"sd\">    Set the Vary header accordingly, so that caches will base their storage</span>\n<span class=\"sd\">    on the Accept-Encoding header.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">max_random_bytes</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"c1\"># It&#39;s not worth attempting to compress really short responses.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">200</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"c1\"># Avoid gzipping if we&#39;ve already got a content-encoding.</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Content-Encoding&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"n\">patch_vary_headers</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"s2\">&quot;Accept-Encoding&quot;</span><span class=\"p\">,))</span>\n\n        <span class=\"n\">ae</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_ACCEPT_ENCODING&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">re_accepts_gzip</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">ae</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">is_async</span><span class=\"p\">:</span>\n                <span class=\"c1\"># pull to lexical scope to capture fixed reference in case</span>\n                <span class=\"c1\"># streaming_content is set again later.</span>\n                <span class=\"n\">orignal_iterator</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span>\n\n                <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">gzip_wrapper</span><span class=\"p\">():</span>\n                    <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">orignal_iterator</span><span class=\"p\">:</span>\n                        <span class=\"k\">yield</span> <span class=\"n\">compress_string</span><span class=\"p\">(</span>\n                            <span class=\"n\">chunk</span><span class=\"p\">,</span>\n                            <span class=\"n\">max_random_bytes</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_random_bytes</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n\n                <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span> <span class=\"o\">=</span> <span class=\"n\">gzip_wrapper</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span> <span class=\"o\">=</span> <span class=\"n\">compress_sequence</span><span class=\"p\">(</span>\n                    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming_content</span><span class=\"p\">,</span>\n                    <span class=\"n\">max_random_bytes</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_random_bytes</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"c1\"># Delete the `Content-Length` header for streaming content, because</span>\n            <span class=\"c1\"># we won&#39;t know the compressed size until we stream it.</span>\n            <span class=\"k\">del</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Return the compressed content only if it&#39;s actually shorter.</span>\n            <span class=\"n\">compressed_content</span> <span class=\"o\">=</span> <span class=\"n\">compress_string</span><span class=\"p\">(</span>\n                <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span>\n                <span class=\"n\">max_random_bytes</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_random_bytes</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">compressed_content</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">response</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">compressed_content</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># If there is a strong ETag, make it weak to fulfill the requirements</span>\n        <span class=\"c1\"># of RFC 9110 Section 8.8.1 while also allowing conditional request</span>\n        <span class=\"c1\"># matches on ETags.</span>\n        <span class=\"n\">etag</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;ETag&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">etag</span> <span class=\"ow\">and</span> <span class=\"n\">etag</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">):</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;ETag&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;W/&quot;</span> <span class=\"o\">+</span> <span class=\"n\">etag</span>\n        <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Encoding&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gzip&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span></div>\n</pre></div>", "current_page_name": "_modules/django/middleware/gzip", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}