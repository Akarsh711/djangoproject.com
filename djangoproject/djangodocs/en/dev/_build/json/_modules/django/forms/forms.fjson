{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.forms.forms", "body": "<h1>Source code for django.forms.forms</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Form classes</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">NON_FIELD_ERRORS</span><span class=\"p\">,</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.forms.fields</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">FileField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.forms.utils</span> <span class=\"kn\">import</span> <span class=\"n\">ErrorDict</span><span class=\"p\">,</span> <span class=\"n\">ErrorList</span><span class=\"p\">,</span> <span class=\"n\">RenderableFormMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.forms.widgets</span> <span class=\"kn\">import</span> <span class=\"n\">Media</span><span class=\"p\">,</span> <span class=\"n\">MediaDefiningClass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"n\">MultiValueDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.renderers</span> <span class=\"kn\">import</span> <span class=\"n\">get_default_renderer</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;BaseForm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Form&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DeclarativeFieldsMetaclass</span><span class=\"p\">(</span><span class=\"n\">MediaDefiningClass</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Collect Fields declared on the base classes.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"n\">mcs</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Collect fields from current class and remove them from attrs.</span>\n        <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s2\">&quot;declared_fields&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n            <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">attrs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n        <span class=\"n\">new_class</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__new__</span><span class=\"p\">(</span><span class=\"n\">mcs</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bases</span><span class=\"p\">,</span> <span class=\"n\">attrs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Walk through the MRO.</span>\n        <span class=\"n\">declared_fields</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">base</span> <span class=\"ow\">in</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">new_class</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Collect fields from base class.</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"s2\">&quot;declared_fields&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">declared_fields</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">declared_fields</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># Field shadowing.</span>\n            <span class=\"k\">for</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">base</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">declared_fields</span><span class=\"p\">:</span>\n                    <span class=\"n\">declared_fields</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n\n        <span class=\"n\">new_class</span><span class=\"o\">.</span><span class=\"n\">base_fields</span> <span class=\"o\">=</span> <span class=\"n\">declared_fields</span>\n        <span class=\"n\">new_class</span><span class=\"o\">.</span><span class=\"n\">declared_fields</span> <span class=\"o\">=</span> <span class=\"n\">declared_fields</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">new_class</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BaseForm</span><span class=\"p\">(</span><span class=\"n\">RenderableFormMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The main implementation of all the Form logic. Note that this class is</span>\n<span class=\"sd\">    different than Form. See the comments by the Form class for more info. Any</span>\n<span class=\"sd\">    improvements to the form API should be made to this class, not to the Form</span>\n<span class=\"sd\">    class.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">default_renderer</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">field_order</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">use_required_attribute</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"n\">template_name_div</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django/forms/div.html&quot;</span>\n    <span class=\"n\">template_name_p</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django/forms/p.html&quot;</span>\n    <span class=\"n\">template_name_table</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django/forms/table.html&quot;</span>\n    <span class=\"n\">template_name_ul</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django/forms/ul.html&quot;</span>\n    <span class=\"n\">template_name_label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django/forms/label.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">files</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">auto_id</span><span class=\"o\">=</span><span class=\"s2\">&quot;id_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">error_class</span><span class=\"o\">=</span><span class=\"n\">ErrorList</span><span class=\"p\">,</span>\n        <span class=\"n\">label_suffix</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">empty_permitted</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">field_order</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">use_required_attribute</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span> <span class=\"o\">=</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"n\">files</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">MultiValueDict</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">data</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">data</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"n\">MultiValueDict</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">files</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">files</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">auto_id</span> <span class=\"o\">=</span> <span class=\"n\">auto_id</span>\n        <span class=\"k\">if</span> <span class=\"n\">prefix</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"n\">initial</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span> <span class=\"o\">=</span> <span class=\"n\">error_class</span>\n        <span class=\"c1\"># Translators: This is the default suffix added to form field labels</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label_suffix</span> <span class=\"o\">=</span> <span class=\"n\">label_suffix</span> <span class=\"k\">if</span> <span class=\"n\">label_suffix</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">empty_permitted</span> <span class=\"o\">=</span> <span class=\"n\">empty_permitted</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Stores the errors after clean() has been called.</span>\n\n        <span class=\"c1\"># The base_fields class attribute is the *class-wide* definition of</span>\n        <span class=\"c1\"># fields. Because a particular *instance* of the class might want to</span>\n        <span class=\"c1\"># alter self.fields, we create self.fields here by copying base_fields.</span>\n        <span class=\"c1\"># Instances should always modify self.fields; they should not modify</span>\n        <span class=\"c1\"># self.base_fields.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">deepcopy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_fields</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_fields_cache</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">order_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_order</span> <span class=\"k\">if</span> <span class=\"n\">field_order</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">field_order</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">use_required_attribute</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_required_attribute</span> <span class=\"o\">=</span> <span class=\"n\">use_required_attribute</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">empty_permitted</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_required_attribute</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The empty_permitted and use_required_attribute arguments may &quot;</span>\n                <span class=\"s2\">&quot;not both be True.&quot;</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Initialize form renderer. Use a global default if not specified</span>\n        <span class=\"c1\"># either as an argument or as self.default_renderer.</span>\n        <span class=\"k\">if</span> <span class=\"n\">renderer</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_renderer</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">get_default_renderer</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_renderer</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_renderer</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n                    <span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span> <span class=\"o\">=</span> <span class=\"n\">renderer</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">order_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field_order</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Rearrange the fields according to field_order.</span>\n\n<span class=\"sd\">        field_order is a list of field names specifying the order. Append fields</span>\n<span class=\"sd\">        not included in the list in the default order for backward compatibility</span>\n<span class=\"sd\">        with subclasses not overriding field_order. If field_order is None,</span>\n<span class=\"sd\">        keep all fields in the order defined in the class. Ignore unknown</span>\n<span class=\"sd\">        fields in field_order to allow disabling fields in form subclasses</span>\n<span class=\"sd\">        without redefining ordering.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">field_order</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"n\">field_order</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>  <span class=\"c1\"># ignore unknown fields</span>\n                <span class=\"k\">pass</span>\n        <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">)</span>  <span class=\"c1\"># add remaining fields in original order</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">fields</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Unknown&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">is_valid</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%(cls)s</span><span class=\"s2\"> bound=</span><span class=\"si\">%(bound)s</span><span class=\"s2\">, valid=</span><span class=\"si\">%(valid)s</span><span class=\"s2\">, fields=(</span><span class=\"si\">%(fields)s</span><span class=\"s2\">)&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;cls&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;bound&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;valid&quot;</span><span class=\"p\">:</span> <span class=\"n\">is_valid</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_bound_items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Yield (name, bf) pairs, where bf is a BoundField object.&quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Yield the form&#39;s fields as BoundField objects.&quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a BoundField with the given name.&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">KeyError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Key &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; not found in &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;. Choices are: </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span>\n                <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">name</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">)),</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_fields_cache</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_fields_cache</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">get_bound_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_fields_cache</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">errors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return an ErrorDict for the data provided for the form.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">full_clean</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return True if the form has no errors, or False otherwise.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_prefix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the field name with a prefix appended, if this Form has a</span>\n<span class=\"sd\">        prefix set.</span>\n\n<span class=\"sd\">        Subclasses may wish to override.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">-</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix</span> <span class=\"k\">else</span> <span class=\"n\">field_name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_initial_prefix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add an &#39;initial&#39; prefix for checking dynamic initial values.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;initial-</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_prefix</span><span class=\"p\">(</span><span class=\"n\">field_name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_widget_data_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"p\">,</span> <span class=\"n\">html_name</span><span class=\"p\">):</span>\n        <span class=\"c1\"># value_from_datadict() gets the data from the data dictionaries.</span>\n        <span class=\"c1\"># Each widget type knows how to retrieve its own data, because some</span>\n        <span class=\"c1\"># widgets split data over several HTML fields.</span>\n        <span class=\"k\">return</span> <span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">value_from_datadict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">files</span><span class=\"p\">,</span> <span class=\"n\">html_name</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">template_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span><span class=\"o\">.</span><span class=\"n\">form_template_name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">hidden_fields</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">top_errors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">non_field_errors</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bf</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_items</span><span class=\"p\">():</span>\n            <span class=\"n\">bf_errors</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span><span class=\"p\">(</span><span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">is_hidden</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">bf_errors</span><span class=\"p\">:</span>\n                    <span class=\"n\">top_errors</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n                        <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;(Hidden field </span><span class=\"si\">%(name)s</span><span class=\"s2\">) </span><span class=\"si\">%(error)s</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n                        <span class=\"o\">%</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;error&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)}</span>\n                        <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">bf_errors</span>\n                    <span class=\"p\">]</span>\n                <span class=\"n\">hidden_fields</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bf</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">errors_str</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">bf_errors</span><span class=\"p\">)</span>\n                <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">bf</span><span class=\"p\">,</span> <span class=\"n\">errors_str</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;form&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"n\">fields</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hidden_fields&quot;</span><span class=\"p\">:</span> <span class=\"n\">hidden_fields</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;errors&quot;</span><span class=\"p\">:</span> <span class=\"n\">top_errors</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">non_field_errors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an ErrorList of errors that aren&#39;t associated with a particular</span>\n<span class=\"sd\">        field -- i.e., from Form.clean(). Return an empty ErrorList if there</span>\n<span class=\"sd\">        are none.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"n\">NON_FIELD_ERRORS</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span><span class=\"p\">(</span><span class=\"n\">error_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;nonfield&quot;</span><span class=\"p\">,</span> <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Update the content of `self._errors`.</span>\n\n<span class=\"sd\">        The `field` argument is the name of the field to which the errors</span>\n<span class=\"sd\">        should be added. If it&#39;s None, treat the errors as NON_FIELD_ERRORS.</span>\n\n<span class=\"sd\">        The `error` argument can be a single error, a list of errors, or a</span>\n<span class=\"sd\">        dictionary that maps field names to lists of errors. An &quot;error&quot; can be</span>\n<span class=\"sd\">        either a simple string or an instance of ValidationError with its</span>\n<span class=\"sd\">        message attribute set and a &quot;list or dictionary&quot; can be an actual</span>\n<span class=\"sd\">        `list` or `dict` or an instance of ValidationError with its</span>\n<span class=\"sd\">        `error_list` or `error_dict` attribute set.</span>\n\n<span class=\"sd\">        If `error` is a dictionary, the `field` argument *must* be None and</span>\n<span class=\"sd\">        errors will be added to the fields that correspond to the keys of the</span>\n<span class=\"sd\">        dictionary.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"n\">ValidationError</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Normalize to ValidationError and let its constructor</span>\n            <span class=\"c1\"># do the hard work of making sense of the input.</span>\n            <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">,</span> <span class=\"s2\">&quot;error_dict&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The argument `field` must be `None` when the `error` &quot;</span>\n                    <span class=\"s2\">&quot;argument contains errors for multiple fields.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">error_dict</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">field</span> <span class=\"ow\">or</span> <span class=\"n\">NON_FIELD_ERRORS</span><span class=\"p\">:</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">error_list</span><span class=\"p\">}</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">error_list</span> <span class=\"ow\">in</span> <span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"o\">!=</span> <span class=\"n\">NON_FIELD_ERRORS</span> <span class=\"ow\">and</span> <span class=\"n\">field</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; has no field named &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;.&quot;</span>\n                        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"o\">==</span> <span class=\"n\">NON_FIELD_ERRORS</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span><span class=\"p\">(</span>\n                        <span class=\"n\">error_class</span><span class=\"o\">=</span><span class=\"s2\">&quot;nonfield&quot;</span><span class=\"p\">,</span> <span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span><span class=\"p\">(</span><span class=\"n\">renderer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">renderer</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n            <span class=\"n\">code</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n            <span class=\"ow\">or</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"o\">.</span><span class=\"n\">code</span> <span class=\"o\">==</span> <span class=\"n\">code</span> <span class=\"k\">for</span> <span class=\"n\">error</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">as_data</span><span class=\"p\">()[</span><span class=\"n\">field</span><span class=\"p\">])</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">full_clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Clean all of self.data and populate self._errors and self.cleaned_data.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"n\">ErrorDict</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_bound</span><span class=\"p\">:</span>  <span class=\"c1\"># Stop further processing.</span>\n            <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"c1\"># If the form is permitted to be empty, and none of the form data has</span>\n        <span class=\"c1\"># changed from the initial data, short circuit any validation.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">empty_permitted</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">has_changed</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clean_fields</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clean_form</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post_clean</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_clean_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bf</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_items</span><span class=\"p\">():</span>\n            <span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">field</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">initial</span> <span class=\"k\">if</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">disabled</span> <span class=\"k\">else</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">data</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">FileField</span><span class=\"p\">):</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n                <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;clean_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n                    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;clean_</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">)()</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_error</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_clean_form</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">cleaned_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">clean</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_error</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">cleaned_data</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span> <span class=\"o\">=</span> <span class=\"n\">cleaned_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_post_clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        An internal hook for performing additional cleaning after form cleaning</span>\n<span class=\"sd\">        is complete. Used for model validation in model forms.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Hook for doing any extra form-wide cleaning after Field.clean() has been</span>\n<span class=\"sd\">        called on every field. Any ValidationError raised by this method will</span>\n<span class=\"sd\">        not be associated with a particular field; it will have a special-case</span>\n<span class=\"sd\">        association with the field named &#39;__all__&#39;.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_changed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return True if data differs from initial.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">changed_data</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">changed_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">bf</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_bound_items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">_has_changed</span><span class=\"p\">()]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">media</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return all media required to render the widgets on this form.&quot;&quot;&quot;</span>\n        <span class=\"n\">media</span> <span class=\"o\">=</span> <span class=\"n\">Media</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">media</span> <span class=\"o\">+=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">media</span>\n        <span class=\"k\">return</span> <span class=\"n\">media</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_multipart</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return True if the form needs to be multipart-encoded, i.e. it has</span>\n<span class=\"sd\">        FileInput, or False otherwise.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">needs_multipart_form</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">hidden_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a list of all the BoundField objects that are hidden fields.</span>\n<span class=\"sd\">        Useful for manual form layout in templates.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span> <span class=\"k\">if</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">is_hidden</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">visible_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a list of BoundField objects that aren&#39;t hidden fields.</span>\n<span class=\"sd\">        The opposite of the hidden_fields() method.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">field</span> <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">is_hidden</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_initial_for_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">field_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return initial data for field on form. Use initial data from the form</span>\n<span class=\"sd\">        or the field, in that order. Evaluate callable values.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">field_name</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">()</span>\n        <span class=\"c1\"># If this is an auto-generated default date, nix the microseconds</span>\n        <span class=\"c1\"># for standardized handling. See #22502.</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">))</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">supports_microseconds</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">microsecond</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n\n<div class=\"viewcode-block\" id=\"Form\"><a class=\"viewcode-back\" href=\"../../../../ref/forms/api/#django.forms.Form\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Form</span><span class=\"p\">(</span><span class=\"n\">BaseForm</span><span class=\"p\">,</span> <span class=\"n\">metaclass</span><span class=\"o\">=</span><span class=\"n\">DeclarativeFieldsMetaclass</span><span class=\"p\">):</span>\n    <span class=\"s2\">&quot;A collection of Fields, plus their associated data.&quot;</span></div>\n    <span class=\"c1\"># This is a separate class from BaseForm in order to abstract the way</span>\n    <span class=\"c1\"># self.fields is specified. This class (Form) is the one that does the</span>\n    <span class=\"c1\"># fancy metaclass stuff purely for the semantic sugar -- it allows one</span>\n    <span class=\"c1\"># to define a form using declarative syntax.</span>\n    <span class=\"c1\"># BaseForm itself has no way of designating self.fields.</span>\n</pre></div>", "current_page_name": "_modules/django/forms/forms", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
