{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.middleware.common", "body": "<h1>Source code for django.middleware.common</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urlparse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionDenied</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">mail_managers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponsePermanentRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">is_valid_path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">MiddlewareMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.http</span> <span class=\"kn\">import</span> <span class=\"n\">escape_leading_slashes</span>\n\n\n<div class=\"viewcode-block\" id=\"CommonMiddleware\"><a class=\"viewcode-back\" href=\"../../../../ref/middleware/#django.middleware.common.CommonMiddleware\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">CommonMiddleware</span><span class=\"p\">(</span><span class=\"n\">MiddlewareMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    &quot;Common&quot; middleware for taking care of some basic operations:</span>\n\n<span class=\"sd\">        - Forbid access to User-Agents in settings.DISALLOWED_USER_AGENTS</span>\n\n<span class=\"sd\">        - URL rewriting: Based on the APPEND_SLASH and PREPEND_WWW settings,</span>\n<span class=\"sd\">          append missing slashes and/or prepends missing &quot;www.&quot;s.</span>\n\n<span class=\"sd\">            - If APPEND_SLASH is set and the initial URL doesn&#39;t end with a</span>\n<span class=\"sd\">              slash, and it is not found in urlpatterns, form a new URL by</span>\n<span class=\"sd\">              appending a slash at the end. If this new URL is found in</span>\n<span class=\"sd\">              urlpatterns, return an HTTP redirect to this new URL; otherwise</span>\n<span class=\"sd\">              process the initial URL as usual.</span>\n\n<span class=\"sd\">          This behavior can be customized by subclassing CommonMiddleware and</span>\n<span class=\"sd\">          overriding the response_redirect_class attribute.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">response_redirect_class</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponsePermanentRedirect</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check for denied User-Agents and rewrite the URL based on</span>\n<span class=\"sd\">        settings.APPEND_SLASH and settings.PREPEND_WWW</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n        <span class=\"c1\"># Check for denied User-Agents</span>\n        <span class=\"n\">user_agent</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_USER_AGENT&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">user_agent</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">user_agent_regex</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DISALLOWED_USER_AGENTS</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">user_agent_regex</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">user_agent</span><span class=\"p\">):</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">PermissionDenied</span><span class=\"p\">(</span><span class=\"s2\">&quot;Forbidden user agent&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check for a redirect based on settings.PREPEND_WWW</span>\n        <span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_host</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PREPEND_WWW</span> <span class=\"ow\">and</span> <span class=\"n\">host</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;www.&quot;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Check if we also need to append a slash so we can do it all</span>\n            <span class=\"c1\"># with a single redirect. (This check may be somewhat expensive,</span>\n            <span class=\"c1\"># so we only do it if we already know we&#39;re sending a redirect,</span>\n            <span class=\"c1\"># or in process_response if we get a 404.)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">should_redirect_with_slash</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n                <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_full_path_with_slash</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_full_path</span><span class=\"p\">()</span>\n\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response_redirect_class</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">scheme</span><span class=\"si\">}</span><span class=\"s2\">://www.</span><span class=\"si\">{</span><span class=\"n\">host</span><span class=\"si\">}{</span><span class=\"n\">path</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">should_redirect_with_slash</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return True if settings.APPEND_SLASH is True and appending a slash to</span>\n<span class=\"sd\">        the request path turns an invalid path into a valid one.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">APPEND_SLASH</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path_info</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">urlconf</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;urlconf&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_valid_path</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path_info</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"p\">):</span>\n                <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">is_valid_path</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">/&quot;</span> <span class=\"o\">%</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">path_info</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n                    <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">func</span>\n                    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"s2\">&quot;should_append_slash&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_full_path_with_slash</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the full path of the request with a trailing slash appended.</span>\n\n<span class=\"sd\">        Raise a RuntimeError if settings.DEBUG is True and request.method is</span>\n<span class=\"sd\">        POST, PUT, or PATCH.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">new_path</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_full_path</span><span class=\"p\">(</span><span class=\"n\">force_append_slash</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Prevent construction of scheme relative urls.</span>\n        <span class=\"n\">new_path</span> <span class=\"o\">=</span> <span class=\"n\">escape_leading_slashes</span><span class=\"p\">(</span><span class=\"n\">new_path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span> <span class=\"ow\">and</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PUT&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PATCH&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You called this URL via </span><span class=\"si\">%(method)s</span><span class=\"s2\">, but the URL doesn&#39;t end &quot;</span>\n                <span class=\"s2\">&quot;in a slash and you have APPEND_SLASH set. Django can&#39;t &quot;</span>\n                <span class=\"s2\">&quot;redirect to the slash URL while maintaining </span><span class=\"si\">%(method)s</span><span class=\"s2\"> data. &quot;</span>\n                <span class=\"s2\">&quot;Change your form to point to </span><span class=\"si\">%(url)s</span><span class=\"s2\"> (note the trailing &quot;</span>\n                <span class=\"s2\">&quot;slash), or set APPEND_SLASH=False in your Django settings.&quot;</span>\n                <span class=\"o\">%</span> <span class=\"p\">{</span>\n                    <span class=\"s2\">&quot;method&quot;</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;url&quot;</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_host</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">new_path</span><span class=\"p\">,</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">new_path</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        When the status code of the response is 404, it may redirect to a path</span>\n<span class=\"sd\">        with an appended slash if should_redirect_with_slash() returns True.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># If the given URL is &quot;Not Found&quot;, then check if we should redirect to</span>\n        <span class=\"c1\"># a path with a slash appended.</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">should_redirect_with_slash</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">response_redirect_class</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_full_path_with_slash</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Add the Content-Length header to non-streaming responses if not</span>\n        <span class=\"c1\"># already set.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">streaming</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">has_header</span><span class=\"p\">(</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Content-Length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">))</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">response</span></div>\n\n\n<div class=\"viewcode-block\" id=\"BrokenLinkEmailsMiddleware\"><a class=\"viewcode-back\" href=\"../../../../ref/middleware/#django.middleware.common.BrokenLinkEmailsMiddleware\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">BrokenLinkEmailsMiddleware</span><span class=\"p\">(</span><span class=\"n\">MiddlewareMixin</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Send broken link emails for relevant 404 NOT FOUND responses.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span> <span class=\"o\">==</span> <span class=\"mi\">404</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">:</span>\n            <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_host</span><span class=\"p\">()</span>\n            <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_full_path</span><span class=\"p\">()</span>\n            <span class=\"n\">referer</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_REFERER&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_ignorable_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">referer</span><span class=\"p\">):</span>\n                <span class=\"n\">ua</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;HTTP_USER_AGENT&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt;none&gt;&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">ip</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;REMOTE_ADDR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt;none&gt;&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">mail_managers</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Broken </span><span class=\"si\">%s</span><span class=\"s2\">link on </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span>\n                    <span class=\"o\">%</span> <span class=\"p\">(</span>\n                        <span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;INTERNAL &quot;</span>\n                            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_internal_request</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">referer</span><span class=\"p\">)</span>\n                            <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n                        <span class=\"p\">),</span>\n                        <span class=\"n\">domain</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"s2\">&quot;Referrer: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">Requested URL: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">User agent: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                    <span class=\"s2\">&quot;IP address: </span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">referer</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">ua</span><span class=\"p\">,</span> <span class=\"n\">ip</span><span class=\"p\">),</span>\n                    <span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_internal_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">referer</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return True if the referring URL is the same domain as the current</span>\n<span class=\"sd\">        request.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Different subdomains are treated as different domains.</span>\n        <span class=\"k\">return</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"s2\">&quot;^https?://</span><span class=\"si\">%s</span><span class=\"s2\">/&quot;</span> <span class=\"o\">%</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">),</span> <span class=\"n\">referer</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">is_ignorable_request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">uri</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">referer</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return True if the given request *shouldn&#39;t* notify the site managers</span>\n<span class=\"sd\">        according to project settings or in situations outlined by the inline</span>\n<span class=\"sd\">        comments.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># The referer is empty.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">referer</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># APPEND_SLASH is enabled and the referer is equal to the current URL</span>\n        <span class=\"c1\"># without a trailing slash indicating an internal redirect.</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">APPEND_SLASH</span> <span class=\"ow\">and</span> <span class=\"n\">uri</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">referer</span> <span class=\"o\">==</span> <span class=\"n\">uri</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># A &#39;?&#39; in referer is identified as a search engine source.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_internal_request</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">referer</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;?&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">referer</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># The referer is equal to the current URL, ignoring the scheme (assumed</span>\n        <span class=\"c1\"># to be a poorly implemented bot).</span>\n        <span class=\"n\">parsed_referer</span> <span class=\"o\">=</span> <span class=\"n\">urlparse</span><span class=\"p\">(</span><span class=\"n\">referer</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">parsed_referer</span><span class=\"o\">.</span><span class=\"n\">netloc</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">parsed_referer</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"n\">uri</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">uri</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">IGNORABLE_404_URLS</span><span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/django/middleware/common", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}