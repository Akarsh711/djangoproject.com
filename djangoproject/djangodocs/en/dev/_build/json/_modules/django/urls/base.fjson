{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.urls.base", "body": "<h1>Source code for django.urls.base</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">unquote</span><span class=\"p\">,</span> <span class=\"n\">urlsplit</span><span class=\"p\">,</span> <span class=\"n\">urlunsplit</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">asgiref.local</span> <span class=\"kn\">import</span> <span class=\"n\">Local</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">lazy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">override</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">,</span> <span class=\"n\">Resolver404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.resolvers</span> <span class=\"kn\">import</span> <span class=\"n\">_get_cached_resolver</span><span class=\"p\">,</span> <span class=\"n\">get_ns_resolver</span><span class=\"p\">,</span> <span class=\"n\">get_resolver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_callable</span>\n\n<span class=\"c1\"># SCRIPT_NAME prefixes for each thread are stored here. If there&#39;s no entry for</span>\n<span class=\"c1\"># the current thread (which is the only one we ever access), it is assumed to</span>\n<span class=\"c1\"># be empty.</span>\n<span class=\"n\">_prefixes</span> <span class=\"o\">=</span> <span class=\"n\">Local</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Overridden URLconfs for each thread are stored here.</span>\n<span class=\"n\">_urlconfs</span> <span class=\"o\">=</span> <span class=\"n\">Local</span><span class=\"p\">()</span>\n\n\n<div class=\"viewcode-block\" id=\"resolve\"><a class=\"viewcode-back\" href=\"../../../../ref/urlresolvers/#django.urls.resolve\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">urlconf</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">urlconf</span> <span class=\"o\">=</span> <span class=\"n\">get_urlconf</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_resolver</span><span class=\"p\">(</span><span class=\"n\">urlconf</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"reverse\"><a class=\"viewcode-back\" href=\"../../../../ref/urlresolvers/#django.urls.reverse\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"n\">viewname</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">current_app</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">urlconf</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">urlconf</span> <span class=\"o\">=</span> <span class=\"n\">get_urlconf</span><span class=\"p\">()</span>\n    <span class=\"n\">resolver</span> <span class=\"o\">=</span> <span class=\"n\">get_resolver</span><span class=\"p\">(</span><span class=\"n\">urlconf</span><span class=\"p\">)</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"p\">[]</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n\n    <span class=\"n\">prefix</span> <span class=\"o\">=</span> <span class=\"n\">get_script_prefix</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">viewname</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">viewname</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"o\">*</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">viewname</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">current_app</span><span class=\"p\">:</span>\n            <span class=\"n\">current_path</span> <span class=\"o\">=</span> <span class=\"n\">current_app</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">current_path</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">current_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">resolved_path</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">ns_pattern</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">ns_converters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">ns</span> <span class=\"ow\">in</span> <span class=\"n\">path</span><span class=\"p\">:</span>\n            <span class=\"n\">current_ns</span> <span class=\"o\">=</span> <span class=\"n\">current_path</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">current_path</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n            <span class=\"c1\"># Lookup the name to see if it could be an app identifier.</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">app_list</span> <span class=\"o\">=</span> <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">app_dict</span><span class=\"p\">[</span><span class=\"n\">ns</span><span class=\"p\">]</span>\n                <span class=\"c1\"># Yes! Path part matches an app in the current Resolver.</span>\n                <span class=\"k\">if</span> <span class=\"n\">current_ns</span> <span class=\"ow\">and</span> <span class=\"n\">current_ns</span> <span class=\"ow\">in</span> <span class=\"n\">app_list</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># If we are reversing for a particular app, use that</span>\n                    <span class=\"c1\"># namespace.</span>\n                    <span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">current_ns</span>\n                <span class=\"k\">elif</span> <span class=\"n\">ns</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">app_list</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># The name isn&#39;t shared by one of the instances (i.e.,</span>\n                    <span class=\"c1\"># the default) so pick the first instance as the default.</span>\n                    <span class=\"n\">ns</span> <span class=\"o\">=</span> <span class=\"n\">app_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">ns</span> <span class=\"o\">!=</span> <span class=\"n\">current_ns</span><span class=\"p\">:</span>\n                <span class=\"n\">current_path</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">extra</span><span class=\"p\">,</span> <span class=\"n\">resolver</span> <span class=\"o\">=</span> <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">namespace_dict</span><span class=\"p\">[</span><span class=\"n\">ns</span><span class=\"p\">]</span>\n                <span class=\"n\">resolved_path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ns</span><span class=\"p\">)</span>\n                <span class=\"n\">ns_pattern</span> <span class=\"o\">+=</span> <span class=\"n\">extra</span>\n                <span class=\"n\">ns_converters</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">KeyError</span> <span class=\"k\">as</span> <span class=\"n\">key</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">resolved_path</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> is not a registered namespace inside &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span>\n                        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">resolved_path</span><span class=\"p\">))</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> is not a registered namespace&quot;</span> <span class=\"o\">%</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">ns_pattern</span><span class=\"p\">:</span>\n            <span class=\"n\">resolver</span> <span class=\"o\">=</span> <span class=\"n\">get_ns_resolver</span><span class=\"p\">(</span>\n                <span class=\"n\">ns_pattern</span><span class=\"p\">,</span> <span class=\"n\">resolver</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">ns_converters</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">_reverse_with_prefix</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<span class=\"n\">reverse_lazy</span> <span class=\"o\">=</span> <span class=\"n\">lazy</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">clear_url_caches</span><span class=\"p\">():</span>\n    <span class=\"n\">get_callable</span><span class=\"o\">.</span><span class=\"n\">cache_clear</span><span class=\"p\">()</span>\n    <span class=\"n\">_get_cached_resolver</span><span class=\"o\">.</span><span class=\"n\">cache_clear</span><span class=\"p\">()</span>\n    <span class=\"n\">get_ns_resolver</span><span class=\"o\">.</span><span class=\"n\">cache_clear</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">set_script_prefix</span><span class=\"p\">(</span><span class=\"n\">prefix</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Set the script prefix for the current thread.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">prefix</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">prefix</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;/&quot;</span>\n    <span class=\"n\">_prefixes</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">prefix</span>\n\n\n<div class=\"viewcode-block\" id=\"get_script_prefix\"><a class=\"viewcode-back\" href=\"../../../../ref/urlresolvers/#django.urls.get_script_prefix\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_script_prefix</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the currently active script prefix. Useful for client code that</span>\n<span class=\"sd\">    wishes to construct their own URLs manually (although accessing the request</span>\n<span class=\"sd\">    instance is normally going to be a lot cleaner).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">_prefixes</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">clear_script_prefix</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Unset the script prefix for the current thread.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">_prefixes</span><span class=\"o\">.</span><span class=\"n\">value</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">set_urlconf</span><span class=\"p\">(</span><span class=\"n\">urlconf_name</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Set the URLconf for the current thread (overriding the default one in</span>\n<span class=\"sd\">    settings). If urlconf_name is None, revert back to the default.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">urlconf_name</span><span class=\"p\">:</span>\n        <span class=\"n\">_urlconfs</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">urlconf_name</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">_urlconfs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">del</span> <span class=\"n\">_urlconfs</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_urlconf</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the root URLconf to use for the current thread if it has been</span>\n<span class=\"sd\">    changed from the default one.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">_urlconfs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_valid_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the ResolverMatch if the given path resolves against the default URL</span>\n<span class=\"sd\">    resolver, False otherwise. This is a convenience method to make working</span>\n<span class=\"sd\">    with &quot;is this a match?&quot; cases easier, avoiding try...except blocks.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">urlconf</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Resolver404</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">translate_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">lang_code</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Given a URL (absolute or relative), try to get its translated version in</span>\n<span class=\"sd\">    the `lang_code` language (either by i18n_patterns or by translated regex).</span>\n<span class=\"sd\">    Return the original URL if no translated version is found.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">parsed</span> <span class=\"o\">=</span> <span class=\"n\">urlsplit</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># URL may be encoded.</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"n\">Resolver404</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">to_be_reversed</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">url_name</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">namespace</span>\n            <span class=\"k\">else</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">url_name</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"n\">override</span><span class=\"p\">(</span><span class=\"n\">lang_code</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">to_be_reversed</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">urlunsplit</span><span class=\"p\">(</span>\n                    <span class=\"p\">(</span><span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">scheme</span><span class=\"p\">,</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">netloc</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">parsed</span><span class=\"o\">.</span><span class=\"n\">fragment</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">url</span>\n</pre></div>", "current_page_name": "_modules/django/urls/base", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
