{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "django"}], "title": "django.db.models.functions.comparison", "body": "<h1>Source code for django.db.models.functions.comparison</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;Database functions that do comparisons or type conversions.&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">NotSupportedError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.expressions</span> <span class=\"kn\">import</span> <span class=\"n\">Func</span><span class=\"p\">,</span> <span class=\"n\">Value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.fields</span> <span class=\"kn\">import</span> <span class=\"n\">TextField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.fields.json</span> <span class=\"kn\">import</span> <span class=\"n\">JSONField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n\n\n<div class=\"viewcode-block\" id=\"Cast\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Cast\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Cast</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Coerce an expression to a new field type.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CAST&quot;</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> AS </span><span class=\"si\">%(db_type)s</span><span class=\"s2\">)&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">output_field</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"n\">output_field</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">extra_context</span><span class=\"p\">[</span><span class=\"s2\">&quot;db_type&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">cast_db_type</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">db_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">db_type</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">db_type</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"s2\">&quot;datetime&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;time&quot;</span><span class=\"p\">}:</span>\n            <span class=\"c1\"># Use strftime as datetime/time don&#39;t keep fractional seconds.</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;strftime(</span><span class=\"si\">%%</span><span class=\"s2\">s, </span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)&quot;</span>\n            <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n                <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;%H:%M:</span><span class=\"si\">%f</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"n\">db_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;time&quot;</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;%Y-%m-</span><span class=\"si\">%d</span><span class=\"s2\"> %H:%M:</span><span class=\"si\">%f</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span>\n        <span class=\"k\">elif</span> <span class=\"n\">db_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;date&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;date(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)&quot;</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n                <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">output_type</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_internal_type</span><span class=\"p\">()</span>\n        <span class=\"c1\"># MySQL doesn&#39;t support explicit cast to float.</span>\n        <span class=\"k\">if</span> <span class=\"n\">output_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;FloatField&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> + 0.0)&quot;</span>\n        <span class=\"c1\"># MariaDB doesn&#39;t support explicit cast to JSON.</span>\n        <span class=\"k\">elif</span> <span class=\"n\">output_type</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;JSONField&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">mysql_is_mariadb</span><span class=\"p\">:</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;JSON_EXTRACT(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">, &#39;$&#39;)&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_postgresql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"c1\"># CAST would be valid too, but the :: shortcut syntax is more readable.</span>\n        <span class=\"c1\"># &#39;expressions&#39; is wrapped in parentheses in case it&#39;s a complex</span>\n        <span class=\"c1\"># expression.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)::</span><span class=\"si\">%(db_type)s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_internal_type</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;JSONField&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Oracle doesn&#39;t support explicit cast to JSON.</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;JSON_QUERY(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">, &#39;$&#39;)&quot;</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n                <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Coalesce\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Coalesce\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Coalesce</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return, from left to right, the first non-null expression.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;COALESCE&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Coalesce must take at least two expressions&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">empty_result_set_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">():</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">empty_result_set_value</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"bp\">NotImplemented</span> <span class=\"ow\">or</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">result</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Oracle prohibits mixing TextField (NCLOB) and CharField (NVARCHAR2),</span>\n        <span class=\"c1\"># so convert all fields to NCLOB when that type is expected.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_field</span><span class=\"o\">.</span><span class=\"n\">get_internal_type</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;TextField&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n            <span class=\"n\">clone</span><span class=\"o\">.</span><span class=\"n\">set_source_expressions</span><span class=\"p\">(</span>\n                <span class=\"p\">[</span>\n                    <span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;TO_NCLOB&quot;</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n                <span class=\"p\">]</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Coalesce</span><span class=\"p\">,</span> <span class=\"n\">clone</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Collate\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Collate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Collate</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;COLLATE&quot;</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> </span><span class=\"si\">%(function)s</span><span class=\"s2\"> </span><span class=\"si\">%(collation)s</span><span class=\"s2\">&quot;</span>\n    <span class=\"n\">allowed_default</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"c1\"># Inspired from</span>\n    <span class=\"c1\"># https://www.postgresql.org/docs/current/sql-syntax-lexical.html#SQL-SYNTAX-IDENTIFIERS</span>\n    <span class=\"n\">collation_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^[\\w\\-]+$&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">collation</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">collation</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">collation_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">collation</span><span class=\"p\">)):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid collation name: </span><span class=\"si\">%r</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">collation</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">collation</span> <span class=\"o\">=</span> <span class=\"n\">collation</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">extra_context</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;collation&quot;</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">quote_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">collation</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Greatest\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Greatest\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Greatest</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the maximum expression.</span>\n\n<span class=\"sd\">    If any expression is null the return value is database-specific:</span>\n<span class=\"sd\">    On PostgreSQL, the maximum not-null expression is returned.</span>\n<span class=\"sd\">    On MySQL, Oracle, and SQLite, if any expression is null, null is returned.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;GREATEST&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Greatest must take at least two expressions&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Use the MAX function on SQLite.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sqlite</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;MAX&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"JSONObject\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.JSONObject\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">JSONObject</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;JSON_OBJECT&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">JSONField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">fields</span><span class=\"p\">):</span>\n        <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">),</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">has_json_object_function</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">NotSupportedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;JSONObject() is not supported on this database backend.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_postgresql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">set_source_expressions</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">Cast</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">TextField</span><span class=\"p\">())</span> <span class=\"k\">if</span> <span class=\"n\">index</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">expression</span>\n                <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">())</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">JSONObject</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;JSONB_BUILD_OBJECT&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">class</span> <span class=\"nc\">ArgJoiner</span><span class=\"p\">:</span>\n            <span class=\"k\">def</span> <span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">):</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot; VALUE &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">::</span><span class=\"mi\">2</span><span class=\"p\">])]</span>\n                <span class=\"k\">return</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">arg_joiner</span><span class=\"o\">=</span><span class=\"n\">ArgJoiner</span><span class=\"p\">(),</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> RETURNING CLOB)&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Least\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Least\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Least</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the minimum expression.</span>\n\n<span class=\"sd\">    If any expression is null the return value is database-specific:</span>\n<span class=\"sd\">    On PostgreSQL, return the minimum not-null expression.</span>\n<span class=\"sd\">    On MySQL, Oracle, and SQLite, if any expression is null, return null.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LEAST&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Least must take at least two expressions&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Use the MIN function on SQLite.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sqlite</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;MIN&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"NullIf\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.NullIf\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">NullIf</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;NULLIF&quot;</span>\n    <span class=\"n\">arity</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">expression1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expression1</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">expression1</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Oracle does not allow Value(None) for expression1.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/django/db/models/functions/comparison", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
