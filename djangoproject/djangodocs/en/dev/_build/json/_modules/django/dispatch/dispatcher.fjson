{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.dispatch.dispatcher", "body": "<h1>Source code for django.dispatch.dispatcher</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">weakref</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">asgiref.sync</span> <span class=\"kn\">import</span> <span class=\"n\">async_to_sync</span><span class=\"p\">,</span> <span class=\"n\">iscoroutinefunction</span><span class=\"p\">,</span> <span class=\"n\">sync_to_async</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.inspect</span> <span class=\"kn\">import</span> <span class=\"n\">func_accepts_kwargs</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">&quot;django.dispatch&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_make_id</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__func__&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"vm\">__self__</span><span class=\"p\">),</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"vm\">__func__</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"nb\">id</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">NONE_ID</span> <span class=\"o\">=</span> <span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># A marker for caching</span>\n<span class=\"n\">NO_RECEIVERS</span> <span class=\"o\">=</span> <span class=\"nb\">object</span><span class=\"p\">()</span>\n\n\n<div class=\"viewcode-block\" id=\"Signal\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Signal</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Base class for all signals</span>\n\n<span class=\"sd\">    Internal attributes:</span>\n\n<span class=\"sd\">        receivers</span>\n<span class=\"sd\">            { receiverkey (id) : weakref(receiver) }</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">use_caching</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create a new signal.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lock</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Lock</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_caching</span> <span class=\"o\">=</span> <span class=\"n\">use_caching</span>\n        <span class=\"c1\"># For convenience we create empty caches even if they are not used.</span>\n        <span class=\"c1\"># A note about caching: if use_caching is defined, then for each</span>\n        <span class=\"c1\"># distinct sender we cache the receivers that sender has in</span>\n        <span class=\"c1\"># &#39;sender_receivers_cache&#39;. The cache is cleaned when .connect() or</span>\n        <span class=\"c1\"># .disconnect() is called and populated on send().</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span> <span class=\"o\">=</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">WeakKeyDictionary</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">use_caching</span> <span class=\"k\">else</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dead_receivers</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<div class=\"viewcode-block\" id=\"Signal.connect\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal.connect\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">weak</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Connect receiver to sender for signal.</span>\n\n<span class=\"sd\">        Arguments:</span>\n\n<span class=\"sd\">            receiver</span>\n<span class=\"sd\">                A function or an instance method which is to receive signals.</span>\n<span class=\"sd\">                Receivers must be hashable objects. Receivers can be</span>\n<span class=\"sd\">                asynchronous.</span>\n\n<span class=\"sd\">                If weak is True, then receiver must be weak referenceable.</span>\n\n<span class=\"sd\">                Receivers must be able to accept keyword arguments.</span>\n\n<span class=\"sd\">                If a receiver is connected with a dispatch_uid argument, it</span>\n<span class=\"sd\">                will not be added if another receiver was already connected</span>\n<span class=\"sd\">                with that dispatch_uid.</span>\n\n<span class=\"sd\">            sender</span>\n<span class=\"sd\">                The sender to which the receiver should respond. Must either be</span>\n<span class=\"sd\">                a Python object, or None to receive events from any sender.</span>\n\n<span class=\"sd\">            weak</span>\n<span class=\"sd\">                Whether to use weak references to the receiver. By default, the</span>\n<span class=\"sd\">                module will attempt to use weak references to the receiver</span>\n<span class=\"sd\">                objects. If this parameter is false, then strong references will</span>\n<span class=\"sd\">                be used.</span>\n\n<span class=\"sd\">            dispatch_uid</span>\n<span class=\"sd\">                An identifier used to uniquely identify a particular instance of</span>\n<span class=\"sd\">                a receiver. This will usually be a string, though it may be</span>\n<span class=\"sd\">                anything hashable.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n        <span class=\"c1\"># If DEBUG is on, check that we got a good receiver</span>\n        <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">configured</span> <span class=\"ow\">and</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Signal receivers must be callable.&quot;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Check for **kwargs</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">func_accepts_kwargs</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Signal receivers must accept keyword arguments (**kwargs).&quot;</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">dispatch_uid</span><span class=\"p\">:</span>\n            <span class=\"n\">lookup_key</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">dispatch_uid</span><span class=\"p\">,</span> <span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lookup_key</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">),</span> <span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">))</span>\n\n        <span class=\"n\">is_async</span> <span class=\"o\">=</span> <span class=\"n\">iscoroutinefunction</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">weak</span><span class=\"p\">:</span>\n            <span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ref</span>\n            <span class=\"n\">receiver_object</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span>\n            <span class=\"c1\"># Check for bound methods</span>\n            <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__self__&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__func__&quot;</span><span class=\"p\">):</span>\n                <span class=\"n\">ref</span> <span class=\"o\">=</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">WeakMethod</span>\n                <span class=\"n\">receiver_object</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"o\">.</span><span class=\"vm\">__self__</span>\n            <span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"n\">ref</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n            <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">finalize</span><span class=\"p\">(</span><span class=\"n\">receiver_object</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_remove_receiver</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clear_dead_receivers</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">r_key</span> <span class=\"o\">==</span> <span class=\"n\">lookup_key</span> <span class=\"k\">for</span> <span class=\"n\">r_key</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">lookup_key</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">is_async</span><span class=\"p\">))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"Signal.disconnect\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal.disconnect\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">disconnect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">dispatch_uid</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Disconnect receiver from sender for signal.</span>\n\n<span class=\"sd\">        If weak references are used, disconnect need not be called. The receiver</span>\n<span class=\"sd\">        will be removed from dispatch automatically.</span>\n\n<span class=\"sd\">        Arguments:</span>\n\n<span class=\"sd\">            receiver</span>\n<span class=\"sd\">                The registered receiver to disconnect. May be none if</span>\n<span class=\"sd\">                dispatch_uid is specified.</span>\n\n<span class=\"sd\">            sender</span>\n<span class=\"sd\">                The registered sender to disconnect</span>\n\n<span class=\"sd\">            dispatch_uid</span>\n<span class=\"sd\">                the unique identifier of the receiver to disconnect</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">dispatch_uid</span><span class=\"p\">:</span>\n            <span class=\"n\">lookup_key</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">dispatch_uid</span><span class=\"p\">,</span> <span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lookup_key</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">),</span> <span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">))</span>\n\n        <span class=\"n\">disconnected</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clear_dead_receivers</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span><span class=\"p\">)):</span>\n                <span class=\"n\">r_key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">r_key</span> <span class=\"o\">==</span> <span class=\"n\">lookup_key</span><span class=\"p\">:</span>\n                    <span class=\"n\">disconnected</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n                    <span class=\"k\">break</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">disconnected</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_listeners</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">sync_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_receivers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_live_receivers</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">sync_receivers</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">async_receivers</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Signal.send\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal.send\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Send signal from sender to all connected receivers.</span>\n\n<span class=\"sd\">        If any receiver raises an error, the error propagates back through send,</span>\n<span class=\"sd\">        terminating the dispatch loop. So it&#39;s possible that all receivers</span>\n<span class=\"sd\">        won&#39;t be called if an error is raised.</span>\n\n<span class=\"sd\">        If any receivers are asynchronous, they are called after all the</span>\n<span class=\"sd\">        synchronous receivers via a single call to async_to_sync(). They are</span>\n<span class=\"sd\">        also executed concurrently with asyncio.gather().</span>\n\n<span class=\"sd\">        Arguments:</span>\n\n<span class=\"sd\">            sender</span>\n<span class=\"sd\">                The sender of the signal. Either a specific object or None.</span>\n\n<span class=\"sd\">            named</span>\n<span class=\"sd\">                Named arguments which will be passed to receivers.</span>\n\n<span class=\"sd\">        Return a list of tuple pairs [(receiver, response), ... ].</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">NO_RECEIVERS</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">sync_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_receivers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_live_receivers</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">sync_receivers</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n            <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">async_receivers</span><span class=\"p\">:</span>\n\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">asend</span><span class=\"p\">():</span>\n                <span class=\"n\">async_responses</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"p\">(</span>\n                        <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">async_receivers</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">async_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_responses</span><span class=\"p\">)</span>\n\n            <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">async_to_sync</span><span class=\"p\">(</span><span class=\"n\">asend</span><span class=\"p\">)())</span>\n        <span class=\"k\">return</span> <span class=\"n\">responses</span></div>\n\n<div class=\"viewcode-block\" id=\"Signal.asend\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal.asend\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">asend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Send signal from sender to all connected receivers in async mode.</span>\n\n<span class=\"sd\">        All sync receivers will be wrapped by sync_to_async()</span>\n<span class=\"sd\">        If any receiver raises an error, the error propagates back through</span>\n<span class=\"sd\">        send, terminating the dispatch loop. So it&#39;s possible that all</span>\n<span class=\"sd\">        receivers won&#39;t be called if an error is raised.</span>\n\n<span class=\"sd\">        If any receivers are synchronous, they are grouped and called behind a</span>\n<span class=\"sd\">        sync_to_async() adaption before executing any asynchronous receivers.</span>\n\n<span class=\"sd\">        If any receivers are asynchronous, they are grouped and executed</span>\n<span class=\"sd\">        concurrently with asyncio.gather().</span>\n\n<span class=\"sd\">        Arguments:</span>\n\n<span class=\"sd\">            sender</span>\n<span class=\"sd\">                The sender of the signal. Either a specific object or None.</span>\n\n<span class=\"sd\">            named</span>\n<span class=\"sd\">                Named arguments which will be passed to receivers.</span>\n\n<span class=\"sd\">        Return a list of tuple pairs [(receiver, response), ...].</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">NO_RECEIVERS</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"n\">sync_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_receivers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_live_receivers</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">sync_receivers</span><span class=\"p\">:</span>\n\n            <span class=\"nd\">@sync_to_async</span>\n            <span class=\"k\">def</span> <span class=\"nf\">sync_send</span><span class=\"p\">():</span>\n                <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">sync_receivers</span><span class=\"p\">:</span>\n                    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n                    <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">responses</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sync_send</span> <span class=\"o\">=</span> <span class=\"nb\">list</span>\n\n        <span class=\"n\">responses</span><span class=\"p\">,</span> <span class=\"n\">async_responses</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n            <span class=\"n\">sync_send</span><span class=\"p\">(),</span>\n            <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n                <span class=\"o\">*</span><span class=\"p\">(</span>\n                    <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">async_receivers</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">async_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_responses</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">responses</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_log_robust_failure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Error calling </span><span class=\"si\">%s</span><span class=\"s2\"> in Signal.send_robust() (</span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">receiver</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n            <span class=\"n\">err</span><span class=\"p\">,</span>\n            <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"n\">err</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Signal.send_robust\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal.send_robust\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">send_robust</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Send signal from sender to all connected receivers catching errors.</span>\n\n<span class=\"sd\">        If any receivers are asynchronous, they are called after all the</span>\n<span class=\"sd\">        synchronous receivers via a single call to async_to_sync(). They are</span>\n<span class=\"sd\">        also executed concurrently with asyncio.gather().</span>\n\n<span class=\"sd\">        Arguments:</span>\n\n<span class=\"sd\">            sender</span>\n<span class=\"sd\">                The sender of the signal. Can be any Python object (normally one</span>\n<span class=\"sd\">                registered with a connect if you actually want something to</span>\n<span class=\"sd\">                occur).</span>\n\n<span class=\"sd\">            named</span>\n<span class=\"sd\">                Named arguments which will be passed to receivers.</span>\n\n<span class=\"sd\">        Return a list of tuple pairs [(receiver, response), ... ].</span>\n\n<span class=\"sd\">        If any receiver raises an error (specifically any subclass of</span>\n<span class=\"sd\">        Exception), return the error instance as the result for that receiver.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">NO_RECEIVERS</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Call each receiver with whatever arguments it can accept.</span>\n        <span class=\"c1\"># Return a list of tuple pairs [(receiver, response), ... ].</span>\n        <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">sync_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_receivers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_live_receivers</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">sync_receivers</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_log_robust_failure</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n                <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">async_receivers</span><span class=\"p\">:</span>\n\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">asend_and_wrap_exception</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">):</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_log_robust_failure</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">err</span>\n                <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n            <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">asend</span><span class=\"p\">():</span>\n                <span class=\"n\">async_responses</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n                    <span class=\"o\">*</span><span class=\"p\">(</span>\n                        <span class=\"n\">asend_and_wrap_exception</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">async_receivers</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">async_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_responses</span><span class=\"p\">)</span>\n\n            <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">async_to_sync</span><span class=\"p\">(</span><span class=\"n\">asend</span><span class=\"p\">)())</span>\n        <span class=\"k\">return</span> <span class=\"n\">responses</span></div>\n\n<div class=\"viewcode-block\" id=\"Signal.asend_robust\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.Signal.asend_robust\">[docs]</a>    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">asend_robust</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Send signal from sender to all connected receivers catching errors.</span>\n\n<span class=\"sd\">        If any receivers are synchronous, they are grouped and called behind a</span>\n<span class=\"sd\">        sync_to_async() adaption before executing any asynchronous receivers.</span>\n\n<span class=\"sd\">        If any receivers are asynchronous, they are grouped and executed</span>\n<span class=\"sd\">        concurrently with asyncio.gather.</span>\n\n<span class=\"sd\">        Arguments:</span>\n\n<span class=\"sd\">            sender</span>\n<span class=\"sd\">                The sender of the signal. Can be any Python object (normally one</span>\n<span class=\"sd\">                registered with a connect if you actually want something to</span>\n<span class=\"sd\">                occur).</span>\n\n<span class=\"sd\">            named</span>\n<span class=\"sd\">                Named arguments which will be passed to receivers.</span>\n\n<span class=\"sd\">        Return a list of tuple pairs [(receiver, response), ... ].</span>\n\n<span class=\"sd\">        If any receiver raises an error (specifically any subclass of</span>\n<span class=\"sd\">        Exception), return the error instance as the result for that receiver.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span>\n            <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">NO_RECEIVERS</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># Call each receiver with whatever arguments it can accept.</span>\n        <span class=\"c1\"># Return a list of tuple pairs [(receiver, response), ... ].</span>\n        <span class=\"n\">sync_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_receivers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_live_receivers</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">sync_receivers</span><span class=\"p\">:</span>\n\n            <span class=\"nd\">@sync_to_async</span>\n            <span class=\"k\">def</span> <span class=\"nf\">sync_send</span><span class=\"p\">():</span>\n                <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">sync_receivers</span><span class=\"p\">:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_log_robust_failure</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n                        <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">))</span>\n                <span class=\"k\">return</span> <span class=\"n\">responses</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">sync_send</span> <span class=\"o\">=</span> <span class=\"nb\">list</span>\n\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">asend_and_wrap_exception</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">named</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_log_robust_failure</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">err</span>\n            <span class=\"k\">return</span> <span class=\"n\">response</span>\n\n        <span class=\"n\">responses</span><span class=\"p\">,</span> <span class=\"n\">async_responses</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n            <span class=\"n\">sync_send</span><span class=\"p\">(),</span>\n            <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span>\n                <span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">asend_and_wrap_exception</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">receiver</span> <span class=\"ow\">in</span> <span class=\"n\">async_receivers</span><span class=\"p\">),</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">async_receivers</span><span class=\"p\">,</span> <span class=\"n\">async_responses</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">responses</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_clear_dead_receivers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Note: caller is assumed to hold self.lock.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dead_receivers</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dead_receivers</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">r</span>\n                <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ReferenceType</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">r</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]()</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_live_receivers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Filter sequence of receivers to get resolved, live receivers.</span>\n\n<span class=\"sd\">        This checks for weak references and resolves them, then returning only</span>\n<span class=\"sd\">        live receivers.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">receivers</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_caching</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dead_receivers</span><span class=\"p\">:</span>\n            <span class=\"n\">receivers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n            <span class=\"c1\"># We could end up here with NO_RECEIVERS even if we do check this case in</span>\n            <span class=\"c1\"># .send() prior to calling _live_receivers() due to concurrent .send() call.</span>\n            <span class=\"k\">if</span> <span class=\"n\">receivers</span> <span class=\"ow\">is</span> <span class=\"n\">NO_RECEIVERS</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">receivers</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clear_dead_receivers</span><span class=\"p\">()</span>\n                <span class=\"n\">senderkey</span> <span class=\"o\">=</span> <span class=\"n\">_make_id</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n                <span class=\"n\">receivers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">_receiverkey</span><span class=\"p\">,</span> <span class=\"n\">r_senderkey</span><span class=\"p\">),</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">is_async</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">receivers</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">r_senderkey</span> <span class=\"o\">==</span> <span class=\"n\">NONE_ID</span> <span class=\"ow\">or</span> <span class=\"n\">r_senderkey</span> <span class=\"o\">==</span> <span class=\"n\">senderkey</span><span class=\"p\">:</span>\n                        <span class=\"n\">receivers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">is_async</span><span class=\"p\">))</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">use_caching</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">receivers</span><span class=\"p\">:</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"p\">[</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">NO_RECEIVERS</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># Note, we must cache the weakref versions.</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sender_receivers_cache</span><span class=\"p\">[</span><span class=\"n\">sender</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">receivers</span>\n        <span class=\"n\">non_weak_sync_receivers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">non_weak_async_receivers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">is_async</span> <span class=\"ow\">in</span> <span class=\"n\">receivers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">weakref</span><span class=\"o\">.</span><span class=\"n\">ReferenceType</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Dereference the weak reference.</span>\n                <span class=\"n\">receiver</span> <span class=\"o\">=</span> <span class=\"n\">receiver</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">receiver</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">is_async</span><span class=\"p\">:</span>\n                        <span class=\"n\">non_weak_async_receivers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">non_weak_sync_receivers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">is_async</span><span class=\"p\">:</span>\n                    <span class=\"n\">non_weak_async_receivers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">non_weak_sync_receivers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">non_weak_sync_receivers</span><span class=\"p\">,</span> <span class=\"n\">non_weak_async_receivers</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_remove_receiver</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">receiver</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Mark that the self.receivers list has dead weakrefs. If so, we will</span>\n        <span class=\"c1\"># clean those up in connect, disconnect and _live_receivers while</span>\n        <span class=\"c1\"># holding self.lock. Note that doing the cleanup here isn&#39;t a good</span>\n        <span class=\"c1\"># idea, _remove_receiver() will be called as side effect of garbage</span>\n        <span class=\"c1\"># collection, and so the call can happen while we are already holding</span>\n        <span class=\"c1\"># self.lock.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dead_receivers</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"receiver\"><a class=\"viewcode-back\" href=\"../../../../topics/signals/#django.dispatch.receiver\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">receiver</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A decorator for connecting receivers to signals. Used by passing in the</span>\n<span class=\"sd\">    signal (or list of signals) and keyword arguments to connect::</span>\n\n<span class=\"sd\">        @receiver(post_save, sender=MyModel)</span>\n<span class=\"sd\">        def signal_receiver(sender, **kwargs):</span>\n<span class=\"sd\">            ...</span>\n\n<span class=\"sd\">        @receiver([post_save, post_delete], sender=MyModel)</span>\n<span class=\"sd\">        def signals_receiver(sender, **kwargs):</span>\n<span class=\"sd\">            ...</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_decorator</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">signal</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">signal</span><span class=\"p\">:</span>\n                <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">_decorator</span></div>\n</pre></div>", "current_page_name": "_modules/django/dispatch/dispatcher", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}