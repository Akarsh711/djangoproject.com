{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.test.runner", "body": "<h1>Source code for django.test.runner</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ctypes</span>\n<span class=\"kn\">import</span> <span class=\"nn\">faulthandler</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">textwrap</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">defaultdict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">contextlib</span> <span class=\"kn\">import</span> <span class=\"n\">contextmanager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sqlparse</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">django</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.management</span> <span class=\"kn\">import</span> <span class=\"n\">call_command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connections</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleTestCase</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">NullTimeKeeper</span><span class=\"p\">,</span> <span class=\"n\">TimeKeeper</span><span class=\"p\">,</span> <span class=\"n\">iter_test_cases</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">setup_databases</span> <span class=\"k\">as</span> <span class=\"n\">_setup_databases</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">setup_test_environment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">teardown_databases</span> <span class=\"k\">as</span> <span class=\"n\">_teardown_databases</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">teardown_test_environment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"n\">OrderedSet</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">ipdb</span> <span class=\"k\">as</span> <span class=\"nn\">pdb</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">pdb</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">tblib.pickling_support</span>\n<span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n    <span class=\"n\">tblib</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DebugSQLTextTestResult</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TextTestResult</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">descriptions</span><span class=\"p\">,</span> <span class=\"n\">verbosity</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">&quot;django.db.backends&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">setLevel</span><span class=\"p\">(</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">stream</span><span class=\"p\">,</span> <span class=\"n\">descriptions</span><span class=\"p\">,</span> <span class=\"n\">verbosity</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">startTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">StreamHandler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">addHandler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">stopTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stopTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">removeHandler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">showAll</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addError</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addError</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Error before tests e.g. in setUpTestData().</span>\n            <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addFailure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addFailure</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failures</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failures</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addSubTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addSubTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failures</span>\n                <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">failureException</span><span class=\"p\">)</span>\n                <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">errors</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql_stream</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">printErrorList</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">flavour</span><span class=\"p\">,</span> <span class=\"n\">errors</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">sql_debug</span> <span class=\"ow\">in</span> <span class=\"n\">errors</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator1</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">flavour</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">getDescription</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)))</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator2</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator2</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stream</span><span class=\"o\">.</span><span class=\"n\">writeln</span><span class=\"p\">(</span>\n                <span class=\"n\">sqlparse</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sql_debug</span><span class=\"p\">,</span> <span class=\"n\">reindent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">keyword_case</span><span class=\"o\">=</span><span class=\"s2\">&quot;upper&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PDBDebugResult</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TextTestResult</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Custom result class that triggers a PDB session when an error or failure</span>\n<span class=\"sd\">    occurs.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addError</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addError</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addFailure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addFailure</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addSubTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addSubTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">debug</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_restoreStdout</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">traceback</span> <span class=\"o\">=</span> <span class=\"n\">error</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">Opening PDB: </span><span class=\"si\">%r</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">exc_value</span><span class=\"p\">)</span>\n        <span class=\"n\">pdb</span><span class=\"o\">.</span><span class=\"n\">post_mortem</span><span class=\"p\">(</span><span class=\"n\">traceback</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DummyList</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Dummy list class for faking storage of results in unittest.TestResult.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RemoteTestResult</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestResult</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Extend unittest.TestResult to record events in the child processes so they</span>\n<span class=\"sd\">    can be replayed in the parent process. Events include things like which</span>\n<span class=\"sd\">    tests succeeded or failed.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Fake storage of results to reduce memory usage. These are used by the</span>\n        <span class=\"c1\"># unittest default methods, but here &#39;events&#39; is used instead.</span>\n        <span class=\"n\">dummy_list</span> <span class=\"o\">=</span> <span class=\"n\">DummyList</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failures</span> <span class=\"o\">=</span> <span class=\"n\">dummy_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">dummy_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">skipped</span> <span class=\"o\">=</span> <span class=\"n\">dummy_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expectedFailures</span> <span class=\"o\">=</span> <span class=\"n\">dummy_list</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unexpectedSuccesses</span> <span class=\"o\">=</span> <span class=\"n\">dummy_list</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">tblib</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">tblib</span><span class=\"o\">.</span><span class=\"n\">pickling_support</span><span class=\"o\">.</span><span class=\"n\">install</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Make this class picklable by removing the file-like buffer</span>\n        <span class=\"c1\"># attributes. This is possible since they aren&#39;t used after unpickling</span>\n        <span class=\"c1\"># after being sent to ParallelTestSuite.</span>\n        <span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;_stdout_buffer&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;_stderr_buffer&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;_original_stdout&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">state</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;_original_stderr&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">state</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">testsRun</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_confirm_picklable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Confirm that obj can be pickled and unpickled as multiprocessing will</span>\n<span class=\"sd\">        need to pickle the exception in the child process and unpickle it in</span>\n<span class=\"sd\">        the parent process. Let the exception rise, if not.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_print_unpicklable_subtest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">pickle_exc</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span>\n            <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Subtest failed:</span>\n\n<span class=\"sd\">    test: {}</span>\n<span class=\"sd\"> subtest: {}</span>\n\n<span class=\"sd\">Unfortunately, the subtest that failed cannot be pickled, so the parallel</span>\n<span class=\"sd\">test runner cannot handle it cleanly. Here is the pickling error:</span>\n\n<span class=\"sd\">&gt; {}</span>\n\n<span class=\"sd\">You should re-run this test with --parallel=1 to reproduce the failure</span>\n<span class=\"sd\">with a cleaner failure message.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">pickle_exc</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check_picklable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Ensure that sys.exc_info() tuples are picklable. This displays a</span>\n        <span class=\"c1\"># clear multiprocessing.pool.RemoteTraceback generated in the child</span>\n        <span class=\"c1\"># process instead of a multiprocessing.pool.MaybeEncodingError, making</span>\n        <span class=\"c1\"># the root cause easier to figure out for users who aren&#39;t familiar</span>\n        <span class=\"c1\"># with the multiprocessing module. Since we&#39;re in a forked process,</span>\n        <span class=\"c1\"># our best chance to communicate with them is to print to stdout.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_confirm_picklable</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"n\">original_exc_txt</span> <span class=\"o\">=</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n            <span class=\"n\">original_exc_txt</span> <span class=\"o\">=</span> <span class=\"n\">textwrap</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span>\n                <span class=\"n\">original_exc_txt</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">initial_indent</span><span class=\"o\">=</span><span class=\"s2\">&quot;    &quot;</span><span class=\"p\">,</span> <span class=\"n\">subsequent_indent</span><span class=\"o\">=</span><span class=\"s2\">&quot;    &quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">pickle_exc_txt</span> <span class=\"o\">=</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">)</span>\n            <span class=\"n\">pickle_exc_txt</span> <span class=\"o\">=</span> <span class=\"n\">textwrap</span><span class=\"o\">.</span><span class=\"n\">fill</span><span class=\"p\">(</span>\n                <span class=\"n\">pickle_exc_txt</span><span class=\"p\">,</span> <span class=\"mi\">75</span><span class=\"p\">,</span> <span class=\"n\">initial_indent</span><span class=\"o\">=</span><span class=\"s2\">&quot;    &quot;</span><span class=\"p\">,</span> <span class=\"n\">subsequent_indent</span><span class=\"o\">=</span><span class=\"s2\">&quot;    &quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">tblib</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span>\n                    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">{} failed:</span>\n\n<span class=\"sd\">{}</span>\n\n<span class=\"sd\">Unfortunately, tracebacks cannot be pickled, making it impossible for the</span>\n<span class=\"sd\">parallel test runner to handle this exception cleanly.</span>\n\n<span class=\"sd\">In order to see the traceback, you should install tblib:</span>\n\n<span class=\"sd\">    python -m pip install tblib</span>\n<span class=\"sd\">&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">original_exc_txt</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span>\n                    <span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"sd\">{} failed:</span>\n\n<span class=\"sd\">{}</span>\n\n<span class=\"sd\">Unfortunately, the exception it raised cannot be pickled, making it impossible</span>\n<span class=\"sd\">for the parallel test runner to handle it cleanly.</span>\n\n<span class=\"sd\">Here&#39;s the error encountered while trying to pickle the exception:</span>\n\n<span class=\"sd\">{}</span>\n\n<span class=\"sd\">You should re-run this test with the --parallel=1 option to reproduce the</span>\n<span class=\"sd\">failure and get a correct traceback.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                        <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">original_exc_txt</span><span class=\"p\">,</span> <span class=\"n\">pickle_exc_txt</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">raise</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check_subtest_picklable</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_confirm_picklable</span><span class=\"p\">(</span><span class=\"n\">subtest</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_print_unpicklable_subtest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">startTestRun</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startTestRun</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;startTestRun&quot;</span><span class=\"p\">,))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">stopTestRun</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stopTestRun</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;stopTestRun&quot;</span><span class=\"p\">,))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">startTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">startTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;startTest&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">stopTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">stopTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;stopTest&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addError</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_picklable</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addError&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addError</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addFailure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_picklable</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addFailure&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addFailure</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addSubTest</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Follow Python&#39;s implementation of unittest.TestResult.addSubTest() by</span>\n        <span class=\"c1\"># not doing anything when a subtest is successful.</span>\n        <span class=\"k\">if</span> <span class=\"n\">err</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Call check_picklable() before check_subtest_picklable() since</span>\n            <span class=\"c1\"># check_picklable() performs the tblib check.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_picklable</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_subtest_picklable</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addSubTest&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addSubTest</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">subtest</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addSuccess</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addSuccess&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addSuccess</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addSkip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addSkip&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addSkip</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">reason</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addExpectedFailure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">):</span>\n        <span class=\"c1\"># If tblib isn&#39;t installed, pickling the traceback will always fail.</span>\n        <span class=\"c1\"># However we don&#39;t want tblib to be required for running the tests</span>\n        <span class=\"c1\"># when they pass or fail as expected. Drop the traceback when an</span>\n        <span class=\"c1\"># expected failure occurs.</span>\n        <span class=\"k\">if</span> <span class=\"n\">tblib</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">err</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">err</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_picklable</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addExpectedFailure&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addExpectedFailure</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">addUnexpectedSuccess</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">&quot;addUnexpectedSuccess&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_index</span><span class=\"p\">))</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">addUnexpectedSuccess</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">wasSuccessful</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Tells whether or not this result was a success.&quot;&quot;&quot;</span>\n        <span class=\"n\">failure_types</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;addError&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addFailure&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addSubTest&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;addUnexpectedSuccess&quot;</span><span class=\"p\">}</span>\n        <span class=\"k\">return</span> <span class=\"nb\">all</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">failure_types</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_exc_info_to_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Make this method no-op. It only powers the default unittest behavior</span>\n        <span class=\"c1\"># for recording errors, but this class pickles errors into &#39;events&#39;</span>\n        <span class=\"c1\"># instead.</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RemoteTestRunner</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Run tests and record everything but don&#39;t display anything.</span>\n\n<span class=\"sd\">    The implementation matches the unpythonic coding style of unittest2.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">resultclass</span> <span class=\"o\">=</span> <span class=\"n\">RemoteTestResult</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">failfast</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">resultclass</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span> <span class=\"o\">=</span> <span class=\"n\">failfast</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span>\n        <span class=\"k\">if</span> <span class=\"n\">resultclass</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resultclass</span> <span class=\"o\">=</span> <span class=\"n\">resultclass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">):</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resultclass</span><span class=\"p\">()</span>\n        <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">registerResult</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">failfast</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span>\n        <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span>\n        <span class=\"n\">test</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_max_test_processes</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The maximum number of test processes when using the --parallel option.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># The current implementation of the parallel test runner requires</span>\n    <span class=\"c1\"># multiprocessing to start subprocesses with fork() or spawn().</span>\n    <span class=\"k\">if</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">get_start_method</span><span class=\"p\">()</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fork&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;spawn&quot;</span><span class=\"p\">}:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">1</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">&quot;DJANGO_TEST_PROCESSES&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">cpu_count</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parallel_type</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Parse value passed to the --parallel option.&quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentTypeError</span><span class=\"p\">(</span>\n            <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">value</span><span class=\"si\">!r}</span><span class=\"s2\"> is not an integer or the string &#39;auto&#39;&quot;</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"n\">_worker_id</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_init_worker</span><span class=\"p\">(</span>\n    <span class=\"n\">counter</span><span class=\"p\">,</span>\n    <span class=\"n\">initial_settings</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">serialized_contents</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">process_setup</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">process_setup_args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">debug_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Switch to databases dedicated to this worker.</span>\n\n<span class=\"sd\">    This helper lives at module-level because of the multiprocessing module&#39;s</span>\n<span class=\"sd\">    requirements.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">global</span> <span class=\"n\">_worker_id</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">get_lock</span><span class=\"p\">():</span>\n        <span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">_worker_id</span> <span class=\"o\">=</span> <span class=\"n\">counter</span><span class=\"o\">.</span><span class=\"n\">value</span>\n\n    <span class=\"n\">start_method</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">get_start_method</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">start_method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;spawn&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">process_setup</span> <span class=\"ow\">and</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">process_setup</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">process_setup_args</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">process_setup_args</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n            <span class=\"n\">process_setup</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">process_setup_args</span><span class=\"p\">)</span>\n        <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n        <span class=\"n\">setup_test_environment</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"n\">debug_mode</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"n\">connections</span><span class=\"p\">:</span>\n        <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">alias</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">start_method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;spawn&quot;</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Restore initial settings in spawned processes.</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">settings_dict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">initial_settings</span><span class=\"p\">[</span><span class=\"n\">alias</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"o\">:=</span> <span class=\"n\">serialized_contents</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"p\">):</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">_test_serialized_contents</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">creation</span><span class=\"o\">.</span><span class=\"n\">setup_worker_connection</span><span class=\"p\">(</span><span class=\"n\">_worker_id</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_run_subsuite</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Run a suite of tests with a RemoteTestRunner and return a RemoteTestResult.</span>\n\n<span class=\"sd\">    This helper lives at module-level and its arguments are wrapped in a tuple</span>\n<span class=\"sd\">    because of the multiprocessing module&#39;s requirements.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">runner_class</span><span class=\"p\">,</span> <span class=\"n\">subsuite_index</span><span class=\"p\">,</span> <span class=\"n\">subsuite</span><span class=\"p\">,</span> <span class=\"n\">failfast</span><span class=\"p\">,</span> <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n    <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"n\">runner_class</span><span class=\"p\">(</span><span class=\"n\">failfast</span><span class=\"o\">=</span><span class=\"n\">failfast</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">subsuite</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">subsuite_index</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">events</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_process_setup_stub</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Stub method to simplify run() implementation.&quot;&quot;&quot;</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ParallelTestSuite</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestSuite</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Run a series of tests in parallel in several processes.</span>\n\n<span class=\"sd\">    While the unittest module&#39;s documentation implies that orchestrating the</span>\n<span class=\"sd\">    execution of tests is the responsibility of the test runner, in practice,</span>\n<span class=\"sd\">    it appears that TestRunner classes are more concerned with formatting and</span>\n<span class=\"sd\">    displaying test results.</span>\n\n<span class=\"sd\">    Since there are fewer use cases for customizing TestSuite than TestRunner,</span>\n<span class=\"sd\">    implementing parallelization at the level of the TestSuite improves</span>\n<span class=\"sd\">    interoperability with existing custom test runners. A single instance of a</span>\n<span class=\"sd\">    test runner can still collect results from all tests without being aware</span>\n<span class=\"sd\">    that they have been run in parallel.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># In case someone wants to modify these in a subclass.</span>\n    <span class=\"n\">init_worker</span> <span class=\"o\">=</span> <span class=\"n\">_init_worker</span>\n    <span class=\"n\">process_setup</span> <span class=\"o\">=</span> <span class=\"n\">_process_setup_stub</span>\n    <span class=\"n\">process_setup_args</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n    <span class=\"n\">run_subsuite</span> <span class=\"o\">=</span> <span class=\"n\">_run_subsuite</span>\n    <span class=\"n\">runner_class</span> <span class=\"o\">=</span> <span class=\"n\">RemoteTestRunner</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">subsuites</span><span class=\"p\">,</span> <span class=\"n\">processes</span><span class=\"p\">,</span> <span class=\"n\">failfast</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">debug_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subsuites</span> <span class=\"o\">=</span> <span class=\"n\">subsuites</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">processes</span> <span class=\"o\">=</span> <span class=\"n\">processes</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span> <span class=\"o\">=</span> <span class=\"n\">failfast</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_mode</span> <span class=\"o\">=</span> <span class=\"n\">debug_mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial_settings</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">serialized_contents</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Distribute test cases across workers.</span>\n\n<span class=\"sd\">        Return an identifier of each test case with its result in order to use</span>\n<span class=\"sd\">        imap_unordered to show results as soon as they&#39;re available.</span>\n\n<span class=\"sd\">        To minimize pickling errors when getting results from workers:</span>\n\n<span class=\"sd\">        - pass back numeric indexes in self.subsuites instead of tests</span>\n<span class=\"sd\">        - make tracebacks picklable with tblib, if available</span>\n\n<span class=\"sd\">        Even with tblib, errors may still occur for dynamically created</span>\n<span class=\"sd\">        exception classes which cannot be unpickled.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initialize_suite</span><span class=\"p\">()</span>\n        <span class=\"n\">counter</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">ctypes</span><span class=\"o\">.</span><span class=\"n\">c_int</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span>\n            <span class=\"n\">processes</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">processes</span><span class=\"p\">,</span>\n            <span class=\"n\">initializer</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">init_worker</span><span class=\"o\">.</span><span class=\"vm\">__func__</span><span class=\"p\">,</span>\n            <span class=\"n\">initargs</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                <span class=\"n\">counter</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial_settings</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">serialized_contents</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_setup</span><span class=\"o\">.</span><span class=\"vm\">__func__</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_setup_args</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_mode</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">runner_class</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">subsuite</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">subsuite</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subsuites</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"n\">test_results</span> <span class=\"o\">=</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">imap_unordered</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_subsuite</span><span class=\"o\">.</span><span class=\"vm\">__func__</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">shouldStop</span><span class=\"p\">:</span>\n                <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">terminate</span><span class=\"p\">()</span>\n                <span class=\"k\">break</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">subsuite_index</span><span class=\"p\">,</span> <span class=\"n\">events</span> <span class=\"o\">=</span> <span class=\"n\">test_results</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">(</span><span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">TimeoutError</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">except</span> <span class=\"ne\">StopIteration</span><span class=\"p\">:</span>\n                <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                <span class=\"k\">break</span>\n\n            <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subsuites</span><span class=\"p\">[</span><span class=\"n\">subsuite_index</span><span class=\"p\">])</span>\n            <span class=\"k\">for</span> <span class=\"n\">event</span> <span class=\"ow\">in</span> <span class=\"n\">events</span><span class=\"p\">:</span>\n                <span class=\"n\">event_name</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">event_name</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">handler</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">tests</span><span class=\"p\">[</span><span class=\"n\">event</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]]</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n                <span class=\"n\">handler</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n        <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">subsuites</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">initialize_suite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">multiprocessing</span><span class=\"o\">.</span><span class=\"n\">get_start_method</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;spawn&quot;</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial_settings</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"n\">alias</span><span class=\"p\">:</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">alias</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">settings_dict</span> <span class=\"k\">for</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"n\">connections</span>\n            <span class=\"p\">}</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">serialized_contents</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"n\">alias</span><span class=\"p\">:</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">alias</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">_test_serialized_contents</span>\n                <span class=\"k\">for</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"n\">connections</span>\n                <span class=\"k\">if</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">serialized_aliases</span>\n            <span class=\"p\">}</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Shuffler</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This class implements shuffling with a special consistency property.</span>\n<span class=\"sd\">    Consistency means that, for a given seed and key function, if two sets of</span>\n<span class=\"sd\">    items are shuffled, the resulting order will agree on the intersection of</span>\n<span class=\"sd\">    the two sets. For example, if items are removed from an original set, the</span>\n<span class=\"sd\">    shuffled order for the new set will be the shuffled order of the original</span>\n<span class=\"sd\">    set restricted to the smaller set.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># This doesn&#39;t need to be cryptographically strong, so use what&#39;s fastest.</span>\n    <span class=\"n\">hash_algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;md5&quot;</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_hash_text</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">):</span>\n        <span class=\"n\">h</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">new</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">hash_algorithm</span><span class=\"p\">,</span> <span class=\"n\">usedforsecurity</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">h</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">seed</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Limit seeds to 10 digits for simpler output.</span>\n            <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"o\">**</span><span class=\"mi\">10</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n            <span class=\"n\">seed_source</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;generated&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">seed_source</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;given&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"n\">seed</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed_source</span> <span class=\"o\">=</span> <span class=\"n\">seed_source</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">seed_display</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"si\">!r}</span><span class=\"s2\"> (</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed_source</span><span class=\"si\">}</span><span class=\"s2\">)&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_hash_item</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">{}{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hash_text</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">shuffle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">items</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a new list of the items in a shuffled order.</span>\n\n<span class=\"sd\">        The `key` is a function that accepts an item in `items` and returns</span>\n<span class=\"sd\">        a string unique for that item that can be viewed as a string id. The</span>\n<span class=\"sd\">        order of the return value is deterministic. It depends on the seed</span>\n<span class=\"sd\">        and key function but not on the original order.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">hashes</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">items</span><span class=\"p\">:</span>\n            <span class=\"n\">hashed</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_hash_item</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">hashed</span> <span class=\"ow\">in</span> <span class=\"n\">hashes</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;item </span><span class=\"si\">{!r}</span><span class=\"s2\"> has same hash </span><span class=\"si\">{!r}</span><span class=\"s2\"> as item </span><span class=\"si\">{!r}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">item</span><span class=\"p\">,</span>\n                    <span class=\"n\">hashed</span><span class=\"p\">,</span>\n                    <span class=\"n\">hashes</span><span class=\"p\">[</span><span class=\"n\">hashed</span><span class=\"p\">],</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"n\">hashes</span><span class=\"p\">[</span><span class=\"n\">hashed</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">item</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">hashes</span><span class=\"p\">[</span><span class=\"n\">hashed</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">hashed</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">hashes</span><span class=\"p\">)]</span>\n\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DiscoverRunner</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;A Django test runner that uses unittest2 test discovery.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">test_suite</span> <span class=\"o\">=</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestSuite</span>\n    <span class=\"n\">parallel_test_suite</span> <span class=\"o\">=</span> <span class=\"n\">ParallelTestSuite</span>\n    <span class=\"n\">test_runner</span> <span class=\"o\">=</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TextTestRunner</span>\n    <span class=\"n\">test_loader</span> <span class=\"o\">=</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">defaultTestLoader</span>\n    <span class=\"n\">reorder_by</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">SimpleTestCase</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">top_level</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">interactive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">failfast</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">keepdb</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">debug_mode</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">debug_sql</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">exclude_tags</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">test_name_patterns</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">pdb</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">enable_faulthandler</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">timing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">shuffle</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">logger</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">pattern</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top_level</span> <span class=\"o\">=</span> <span class=\"n\">top_level</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span> <span class=\"o\">=</span> <span class=\"n\">verbosity</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span> <span class=\"o\">=</span> <span class=\"n\">interactive</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span> <span class=\"o\">=</span> <span class=\"n\">failfast</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keepdb</span> <span class=\"o\">=</span> <span class=\"n\">keepdb</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reverse</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_mode</span> <span class=\"o\">=</span> <span class=\"n\">debug_mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql</span> <span class=\"o\">=</span> <span class=\"n\">debug_sql</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span> <span class=\"o\">=</span> <span class=\"n\">parallel</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">tags</span> <span class=\"ow\">or</span> <span class=\"p\">[])</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exclude_tags</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">exclude_tags</span> <span class=\"ow\">or</span> <span class=\"p\">[])</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">faulthandler</span><span class=\"o\">.</span><span class=\"n\">is_enabled</span><span class=\"p\">()</span> <span class=\"ow\">and</span> <span class=\"n\">enable_faulthandler</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">faulthandler</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">())</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">AttributeError</span><span class=\"p\">,</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">UnsupportedOperation</span><span class=\"p\">):</span>\n                <span class=\"n\">faulthandler</span><span class=\"o\">.</span><span class=\"n\">enable</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">__stderr__</span><span class=\"o\">.</span><span class=\"n\">fileno</span><span class=\"p\">())</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pdb</span> <span class=\"o\">=</span> <span class=\"n\">pdb</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pdb</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;You cannot use --pdb with parallel tests; pass --parallel=1 to use it.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">buffer</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_name_patterns</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_keeper</span> <span class=\"o\">=</span> <span class=\"n\">TimeKeeper</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">timing</span> <span class=\"k\">else</span> <span class=\"n\">NullTimeKeeper</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">test_name_patterns</span><span class=\"p\">:</span>\n            <span class=\"c1\"># unittest does not export the _convert_select_pattern function</span>\n            <span class=\"c1\"># that converts command-line arguments to patterns.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_name_patterns</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n                <span class=\"n\">pattern</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;*&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">pattern</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;*</span><span class=\"si\">%s</span><span class=\"s2\">*&quot;</span> <span class=\"o\">%</span> <span class=\"n\">pattern</span>\n                <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"n\">test_name_patterns</span>\n            <span class=\"p\">}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shuffle</span> <span class=\"o\">=</span> <span class=\"n\">shuffle</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logger</span>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.add_arguments\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.add_arguments\">[docs]</a>    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;-t&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--top-level-directory&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">&quot;top_level&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Top level of project for unittest discovery.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;-p&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--pattern&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s2\">&quot;test*.py&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;The test matching pattern. Defaults to test*.py.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--keepdb&quot;</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span> <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Preserves the test DB between runs.&quot;</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--shuffle&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">&quot;?&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s2\">&quot;SEED&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Shuffles test case order.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;-r&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--reverse&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Reverses test case order.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--debug-mode&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Sets settings.DEBUG to True.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;-d&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--debug-sql&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Prints logged SQL queries on failure.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--parallel&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">&quot;?&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">const</span><span class=\"o\">=</span><span class=\"s2\">&quot;auto&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">parallel_type</span><span class=\"p\">,</span>\n            <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s2\">&quot;N&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Run tests using up to N parallel processes. Use the value &quot;</span>\n                <span class=\"s1\">&#39;&quot;auto&quot; to run one test process for each processor core.&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--tag&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;append&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">&quot;tags&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Run only tests with the specified tag. Can be used multiple times.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--exclude-tag&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;append&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">&quot;exclude_tags&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Do not run tests with the specified tag. Can be used multiple times.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--pdb&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Runs a debugger (pdb, or ipdb if installed) on error or failure.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;-b&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--buffer&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Discard output from passing tests.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--no-faulthandler&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_false&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">&quot;enable_faulthandler&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Disables the Python faulthandler module during tests.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--timing&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;Output timings, including database set up and total run time.&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;-k&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;append&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">dest</span><span class=\"o\">=</span><span class=\"s2\">&quot;test_name_patterns&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Only run test methods and classes that match the pattern &quot;</span>\n                <span class=\"s2\">&quot;or substring. Can be used multiple times. Same as &quot;</span>\n                <span class=\"s2\">&quot;unittest -k option.&quot;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">shuffle_seed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span><span class=\"o\">.</span><span class=\"n\">seed</span>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.log\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.log\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Log the message at the given logging level (the default is INFO).</span>\n\n<span class=\"sd\">        If a logger isn&#39;t set, the message is instead printed to the console,</span>\n<span class=\"sd\">        respecting the configured verbosity. A verbosity of 0 prints no output,</span>\n<span class=\"sd\">        a verbosity of 1 prints INFO and above, and a verbosity of 2 or higher</span>\n<span class=\"sd\">        prints all levels.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">level</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">level</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">0</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"n\">level</span> <span class=\"o\">&lt;</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.setup_test_environment\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.setup_test_environment\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setup_test_environment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">setup_test_environment</span><span class=\"p\">(</span><span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_mode</span><span class=\"p\">)</span>\n        <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">installHandler</span><span class=\"p\">()</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setup_shuffler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shuffle</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">shuffler</span> <span class=\"o\">=</span> <span class=\"n\">Shuffler</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Using shuffle seed: </span><span class=\"si\">{</span><span class=\"n\">shuffler</span><span class=\"o\">.</span><span class=\"n\">seed_display</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span> <span class=\"o\">=</span> <span class=\"n\">shuffler</span>\n\n    <span class=\"nd\">@contextmanager</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_with_patterns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">original_test_name_patterns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_loader</span><span class=\"o\">.</span><span class=\"n\">testNamePatterns</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_loader</span><span class=\"o\">.</span><span class=\"n\">testNamePatterns</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_name_patterns</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">yield</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Restore the original patterns.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_loader</span><span class=\"o\">.</span><span class=\"n\">testNamePatterns</span> <span class=\"o\">=</span> <span class=\"n\">original_test_name_patterns</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_tests_for_label</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">discover_kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">label_as_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n        <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># If a module, or &quot;module.ClassName[.method_name]&quot;, just run those.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">label_as_path</span><span class=\"p\">):</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">load_with_patterns</span><span class=\"p\">():</span>\n                <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_loader</span><span class=\"o\">.</span><span class=\"n\">loadTestsFromName</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">tests</span><span class=\"o\">.</span><span class=\"n\">countTestCases</span><span class=\"p\">():</span>\n                <span class=\"k\">return</span> <span class=\"n\">tests</span>\n        <span class=\"c1\"># Try discovery if &quot;label&quot; is a package or directory.</span>\n        <span class=\"n\">is_importable</span><span class=\"p\">,</span> <span class=\"n\">is_package</span> <span class=\"o\">=</span> <span class=\"n\">try_importing</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_importable</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_package</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">tests</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">label_as_path</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">label_as_path</span><span class=\"p\">):</span>\n                <span class=\"k\">assert</span> <span class=\"n\">tests</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;One of the test labels is a path to a file: </span><span class=\"si\">{</span><span class=\"n\">label</span><span class=\"si\">!r}</span><span class=\"s2\">, &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;which is not supported. Use a dotted module name or &quot;</span>\n                    <span class=\"sa\">f</span><span class=\"s2\">&quot;path to a directory instead.&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">tests</span>\n\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">discover_kwargs</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">label_as_path</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top_level</span><span class=\"p\">:</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;top_level_dir&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">find_top_level</span><span class=\"p\">(</span><span class=\"n\">label_as_path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">load_with_patterns</span><span class=\"p\">():</span>\n            <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_loader</span><span class=\"o\">.</span><span class=\"n\">discover</span><span class=\"p\">(</span><span class=\"n\">start_dir</span><span class=\"o\">=</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Make unittest forget the top-level dir it calculated from this run,</span>\n        <span class=\"c1\"># to support running tests from two different top-levels.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_loader</span><span class=\"o\">.</span><span class=\"n\">_top_level_dir</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">return</span> <span class=\"n\">tests</span>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.build_suite\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.build_suite\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">build_suite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test_labels</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">test_labels</span> <span class=\"o\">=</span> <span class=\"n\">test_labels</span> <span class=\"ow\">or</span> <span class=\"p\">[</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">]</span>\n\n        <span class=\"n\">discover_kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">discover_kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;pattern&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top_level</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">discover_kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;top_level_dir&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">top_level</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_shuffler</span><span class=\"p\">()</span>\n\n        <span class=\"n\">all_tests</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"n\">test_labels</span><span class=\"p\">:</span>\n            <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">load_tests_for_label</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">discover_kwargs</span><span class=\"p\">)</span>\n            <span class=\"n\">all_tests</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">iter_test_cases</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">))</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exclude_tags</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Including test tag(s): </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">)),</span>\n                    <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exclude_tags</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Excluding test tag(s): </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exclude_tags</span><span class=\"p\">)),</span>\n                    <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">all_tests</span> <span class=\"o\">=</span> <span class=\"n\">filter_tests_by_tags</span><span class=\"p\">(</span><span class=\"n\">all_tests</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exclude_tags</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Put the failures detected at load time first for quicker feedback.</span>\n        <span class=\"c1\"># _FailedTest objects include things like test modules that couldn&#39;t be</span>\n        <span class=\"c1\"># found or that couldn&#39;t be loaded due to syntax errors.</span>\n        <span class=\"n\">test_types</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">_FailedTest</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reorder_by</span><span class=\"p\">)</span>\n        <span class=\"n\">all_tests</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span>\n            <span class=\"n\">reorder_tests</span><span class=\"p\">(</span>\n                <span class=\"n\">all_tests</span><span class=\"p\">,</span>\n                <span class=\"n\">test_types</span><span class=\"p\">,</span>\n                <span class=\"n\">shuffler</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span><span class=\"p\">,</span>\n                <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"s2\">&quot;Found </span><span class=\"si\">%d</span><span class=\"s2\"> test(s).&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_tests</span><span class=\"p\">))</span>\n        <span class=\"n\">suite</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_suite</span><span class=\"p\">(</span><span class=\"n\">all_tests</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">subsuites</span> <span class=\"o\">=</span> <span class=\"n\">partition_suite_by_case</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Since tests are distributed across processes on a per-TestCase</span>\n            <span class=\"c1\"># basis, there&#39;s no need for more processes than TestCases.</span>\n            <span class=\"n\">processes</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">subsuites</span><span class=\"p\">))</span>\n            <span class=\"c1\"># Update also &quot;parallel&quot; because it&#39;s used to determine the number</span>\n            <span class=\"c1\"># of test databases.</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span> <span class=\"o\">=</span> <span class=\"n\">processes</span>\n            <span class=\"k\">if</span> <span class=\"n\">processes</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"n\">suite</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel_test_suite</span><span class=\"p\">(</span>\n                    <span class=\"n\">subsuites</span><span class=\"p\">,</span>\n                    <span class=\"n\">processes</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_mode</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">suite</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.setup_databases\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.setup_databases\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">setup_databases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_setup_databases</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">interactive</span><span class=\"p\">,</span>\n            <span class=\"n\">time_keeper</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_keeper</span><span class=\"p\">,</span>\n            <span class=\"n\">keepdb</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keepdb</span><span class=\"p\">,</span>\n            <span class=\"n\">debug_sql</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql</span><span class=\"p\">,</span>\n            <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_resultclass</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug_sql</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">DebugSQLTextTestResult</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pdb</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">PDBDebugResult</span>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.get_test_runner_kwargs\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.get_test_runner_kwargs\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_test_runner_kwargs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;failfast&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">failfast</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;resultclass&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_resultclass</span><span class=\"p\">(),</span>\n            <span class=\"s2\">&quot;verbosity&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;buffer&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">buffer</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.run_checks\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.run_checks\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run_checks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">databases</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Checks are run after database creation since some checks require</span>\n        <span class=\"c1\"># database access.</span>\n        <span class=\"n\">call_command</span><span class=\"p\">(</span><span class=\"s2\">&quot;check&quot;</span><span class=\"p\">,</span> <span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span><span class=\"p\">,</span> <span class=\"n\">databases</span><span class=\"o\">=</span><span class=\"n\">databases</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.run_suite\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.run_suite\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run_suite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_test_runner_kwargs</span><span class=\"p\">()</span>\n        <span class=\"n\">runner</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">test_runner</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">runner</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">seed_display</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_shuffler</span><span class=\"o\">.</span><span class=\"n\">seed_display</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Used shuffle seed: </span><span class=\"si\">{</span><span class=\"n\">seed_display</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.teardown_databases\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.teardown_databases\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown_databases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">old_config</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Destroy all the non-mirror databases.&quot;&quot;&quot;</span>\n        <span class=\"n\">_teardown_databases</span><span class=\"p\">(</span>\n            <span class=\"n\">old_config</span><span class=\"p\">,</span>\n            <span class=\"n\">verbosity</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbosity</span><span class=\"p\">,</span>\n            <span class=\"n\">parallel</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallel</span><span class=\"p\">,</span>\n            <span class=\"n\">keepdb</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">keepdb</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.teardown_test_environment\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.teardown_test_environment\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">teardown_test_environment</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">removeHandler</span><span class=\"p\">()</span>\n        <span class=\"n\">teardown_test_environment</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.suite_result\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.suite_result\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">suite_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">failures</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">unexpectedSuccesses</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_databases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suite</span><span class=\"p\">):</span>\n        <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">test</span> <span class=\"ow\">in</span> <span class=\"n\">iter_test_cases</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">):</span>\n            <span class=\"n\">test_databases</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s2\">&quot;databases&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">test_databases</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__all__&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">test_databases</span> <span class=\"o\">=</span> <span class=\"n\">connections</span>\n            <span class=\"k\">if</span> <span class=\"n\">test_databases</span><span class=\"p\">:</span>\n                <span class=\"n\">serialized_rollback</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s2\">&quot;serialized_rollback&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n                    <span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"p\">,</span> <span class=\"n\">serialized_rollback</span> <span class=\"ow\">or</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">))</span>\n                    <span class=\"k\">for</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"n\">test_databases</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">databases</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_databases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">suite</span><span class=\"p\">):</span>\n        <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_databases</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n        <span class=\"n\">unused_databases</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">alias</span> <span class=\"k\">for</span> <span class=\"n\">alias</span> <span class=\"ow\">in</span> <span class=\"n\">connections</span> <span class=\"k\">if</span> <span class=\"n\">alias</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">databases</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">unused_databases</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Skipping setup of unused database(s): </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span>\n                <span class=\"o\">%</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">unused_databases</span><span class=\"p\">)),</span>\n                <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">databases</span>\n\n<div class=\"viewcode-block\" id=\"DiscoverRunner.run_tests\"><a class=\"viewcode-back\" href=\"../../../../topics/testing/advanced/#django.test.runner.DiscoverRunner.run_tests\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">run_tests</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">test_labels</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Run the unit tests for all the test labels in the provided list.</span>\n\n<span class=\"sd\">        Test labels should be dotted Python paths to test modules, test</span>\n<span class=\"sd\">        classes, or test methods.</span>\n\n<span class=\"sd\">        Return the number of tests that failed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_test_environment</span><span class=\"p\">()</span>\n        <span class=\"n\">suite</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">build_suite</span><span class=\"p\">(</span><span class=\"n\">test_labels</span><span class=\"p\">)</span>\n        <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_databases</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n        <span class=\"n\">suite</span><span class=\"o\">.</span><span class=\"n\">serialized_aliases</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span>\n            <span class=\"n\">alias</span> <span class=\"k\">for</span> <span class=\"n\">alias</span><span class=\"p\">,</span> <span class=\"n\">serialize</span> <span class=\"ow\">in</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">serialize</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_keeper</span><span class=\"o\">.</span><span class=\"n\">timed</span><span class=\"p\">(</span><span class=\"s2\">&quot;Total database setup&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">old_config</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">setup_databases</span><span class=\"p\">(</span>\n                <span class=\"n\">aliases</span><span class=\"o\">=</span><span class=\"n\">databases</span><span class=\"p\">,</span>\n                <span class=\"n\">serialized_aliases</span><span class=\"o\">=</span><span class=\"n\">suite</span><span class=\"o\">.</span><span class=\"n\">serialized_aliases</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">run_failed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_checks</span><span class=\"p\">(</span><span class=\"n\">databases</span><span class=\"p\">)</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">run_suite</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"n\">run_failed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">raise</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_keeper</span><span class=\"o\">.</span><span class=\"n\">timed</span><span class=\"p\">(</span><span class=\"s2\">&quot;Total database teardown&quot;</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">teardown_databases</span><span class=\"p\">(</span><span class=\"n\">old_config</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">teardown_test_environment</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Silence teardown exceptions if an exception was raised during</span>\n                <span class=\"c1\"># runs to avoid shadowing it.</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">run_failed</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_keeper</span><span class=\"o\">.</span><span class=\"n\">print_results</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">suite_result</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">)</span></div></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">try_importing</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Try importing a test label, and return (is_importable, is_package).</span>\n\n<span class=\"sd\">    Relative labels like &quot;.&quot; and &quot;..&quot; are seen as directories.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ImportError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__path__&quot;</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">find_top_level</span><span class=\"p\">(</span><span class=\"n\">top_level</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Try to be a bit smarter than unittest about finding the default top-level</span>\n    <span class=\"c1\"># for a given directory path, to avoid breaking relative imports.</span>\n    <span class=\"c1\"># (Unittest&#39;s default is to set top-level equal to the path, which means</span>\n    <span class=\"c1\"># relative imports will result in &quot;Attempted relative import in</span>\n    <span class=\"c1\"># non-package.&quot;).</span>\n\n    <span class=\"c1\"># We&#39;d be happy to skip this and require dotted module paths (which don&#39;t</span>\n    <span class=\"c1\"># cause this problem) instead of file paths (which do), but in the case of</span>\n    <span class=\"c1\"># a directory in the cwd, which would be equally valid if considered as a</span>\n    <span class=\"c1\"># top-level module or as a directory path, unittest unfortunately prefers</span>\n    <span class=\"c1\"># the latter.</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">init_py</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">top_level</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__init__.py&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">init_py</span><span class=\"p\">):</span>\n            <span class=\"k\">break</span>\n        <span class=\"n\">try_next</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">top_level</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">try_next</span> <span class=\"o\">==</span> <span class=\"n\">top_level</span><span class=\"p\">:</span>\n            <span class=\"c1\"># __init__.py all the way down? give up.</span>\n            <span class=\"k\">break</span>\n        <span class=\"n\">top_level</span> <span class=\"o\">=</span> <span class=\"n\">try_next</span>\n    <span class=\"k\">return</span> <span class=\"n\">top_level</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_class_shuffle_key</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"si\">}</span><span class=\"s2\">.</span><span class=\"si\">{</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">shuffle_tests</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">shuffler</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return an iterator over the given tests in a shuffled order, keeping tests</span>\n<span class=\"sd\">    next to other tests of their class.</span>\n\n<span class=\"sd\">    `tests` should be an iterable of tests.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">tests_by_type</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">class_tests</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n        <span class=\"n\">class_tests</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">class_tests</span><span class=\"p\">)</span>\n        <span class=\"n\">test_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">class_tests</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"n\">class_tests</span> <span class=\"o\">=</span> <span class=\"n\">shuffler</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">class_tests</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">test</span><span class=\"p\">:</span> <span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">())</span>\n        <span class=\"n\">tests_by_type</span><span class=\"p\">[</span><span class=\"n\">test_type</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">class_tests</span>\n\n    <span class=\"n\">classes</span> <span class=\"o\">=</span> <span class=\"n\">shuffler</span><span class=\"o\">.</span><span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">tests_by_type</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">_class_shuffle_key</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"n\">tests_by_type</span><span class=\"p\">[</span><span class=\"bp\">cls</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"bp\">cls</span> <span class=\"ow\">in</span> <span class=\"n\">classes</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reorder_test_bin</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">shuffler</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return an iterator that reorders the given tests, keeping tests next to</span>\n<span class=\"sd\">    other tests of their class.</span>\n\n<span class=\"sd\">    `tests` should be an iterable of tests that supports reversed().</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">shuffler</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">reverse</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">)</span>\n        <span class=\"c1\"># The function must return an iterator.</span>\n        <span class=\"k\">return</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">)</span>\n\n    <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"n\">shuffle_tests</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">shuffler</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">reverse</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">tests</span>\n    <span class=\"c1\"># Arguments to reversed() must be reversible.</span>\n    <span class=\"k\">return</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reorder_tests</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">shuffler</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Reorder an iterable of tests, grouping by the given TestCase classes.</span>\n\n<span class=\"sd\">    This function also removes any duplicates and reorders so that tests of the</span>\n<span class=\"sd\">    same type are consecutive.</span>\n\n<span class=\"sd\">    The result is returned as an iterator. `classes` is a sequence of types.</span>\n<span class=\"sd\">    Tests that are instances of `classes[0]` are grouped first, followed by</span>\n<span class=\"sd\">    instances of `classes[1]`, etc. Tests that are not instances of any of the</span>\n<span class=\"sd\">    classes are grouped last.</span>\n\n<span class=\"sd\">    If `reverse` is True, the tests within each `classes` group are reversed,</span>\n<span class=\"sd\">    but without reversing the order of `classes` itself.</span>\n\n<span class=\"sd\">    The `shuffler` argument is an optional instance of this module&#39;s `Shuffler`</span>\n<span class=\"sd\">    class. If provided, tests will be shuffled within each `classes` group, but</span>\n<span class=\"sd\">    keeping tests with other tests of their TestCase class. Reversing is</span>\n<span class=\"sd\">    applied after shuffling to allow reversing the same random order.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Each bin maps TestCase class to OrderedSet of tests. This permits tests</span>\n    <span class=\"c1\"># to be grouped by TestCase class even if provided non-consecutively.</span>\n    <span class=\"n\">bins</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"n\">OrderedSet</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">classes</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n    <span class=\"o\">*</span><span class=\"n\">class_bins</span><span class=\"p\">,</span> <span class=\"n\">last_bin</span> <span class=\"o\">=</span> <span class=\"n\">bins</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">test</span> <span class=\"ow\">in</span> <span class=\"n\">tests</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">test_bin</span><span class=\"p\">,</span> <span class=\"n\">test_class</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">class_bins</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">test_class</span><span class=\"p\">):</span>\n                <span class=\"k\">break</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">test_bin</span> <span class=\"o\">=</span> <span class=\"n\">last_bin</span>\n        <span class=\"n\">test_bin</span><span class=\"p\">[</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)]</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">test_bin</span> <span class=\"ow\">in</span> <span class=\"n\">bins</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Call list() since reorder_test_bin()&#39;s input must support reversed().</span>\n        <span class=\"n\">tests</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">from_iterable</span><span class=\"p\">(</span><span class=\"n\">test_bin</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()))</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">reorder_test_bin</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">shuffler</span><span class=\"o\">=</span><span class=\"n\">shuffler</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"n\">reverse</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">partition_suite_by_case</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Partition a test suite by test case, preserving the order of tests.&quot;&quot;&quot;</span>\n    <span class=\"n\">suite_class</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n    <span class=\"n\">all_tests</span> <span class=\"o\">=</span> <span class=\"n\">iter_test_cases</span><span class=\"p\">(</span><span class=\"n\">suite</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">suite_class</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">tests</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">(</span><span class=\"n\">all_tests</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_match_tags</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">exclude_tags</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">_FailedTest</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Tests that couldn&#39;t load always match to prevent tests from falsely</span>\n        <span class=\"c1\"># passing due e.g. to syntax errors.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n    <span class=\"n\">test_tags</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tags&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n    <span class=\"n\">test_fn_name</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_testMethodName&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">test_fn_name</span><span class=\"p\">):</span>\n        <span class=\"n\">test_fn</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">test_fn_name</span><span class=\"p\">)</span>\n        <span class=\"n\">test_fn_tags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">test_fn</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tags&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n        <span class=\"n\">test_tags</span> <span class=\"o\">=</span> <span class=\"n\">test_tags</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">test_fn_tags</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">tags</span> <span class=\"ow\">and</span> <span class=\"n\">test_tags</span><span class=\"o\">.</span><span class=\"n\">isdisjoint</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">return</span> <span class=\"n\">test_tags</span><span class=\"o\">.</span><span class=\"n\">isdisjoint</span><span class=\"p\">(</span><span class=\"n\">exclude_tags</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">filter_tests_by_tags</span><span class=\"p\">(</span><span class=\"n\">tests</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">exclude_tags</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return the matching tests as an iterator.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">test</span> <span class=\"k\">for</span> <span class=\"n\">test</span> <span class=\"ow\">in</span> <span class=\"n\">tests</span> <span class=\"k\">if</span> <span class=\"n\">test_match_tags</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"p\">,</span> <span class=\"n\">exclude_tags</span><span class=\"p\">))</span>\n</pre></div>", "current_page_name": "_modules/django/test/runner", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}