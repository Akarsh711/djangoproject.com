{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.apps.config", "body": "<h1>Source code for django.apps.config</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.module_loading</span> <span class=\"kn\">import</span> <span class=\"n\">import_string</span><span class=\"p\">,</span> <span class=\"n\">module_has_submodule</span>\n\n<span class=\"n\">APPS_MODULE_NAME</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;apps&quot;</span>\n<span class=\"n\">MODELS_MODULE_NAME</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;models&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"AppConfig\"><a class=\"viewcode-back\" href=\"../../../../ref/applications/#django.apps.AppConfig\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">AppConfig</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;Class representing a Django application and its configuration.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app_name</span><span class=\"p\">,</span> <span class=\"n\">app_module</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Full Python path to the application e.g. &#39;django.contrib.admin&#39;.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">app_name</span>\n\n        <span class=\"c1\"># Root module for the application e.g. &lt;module &#39;django.contrib.admin&#39;</span>\n        <span class=\"c1\"># from &#39;django/contrib/admin/__init__.py&#39;&gt;.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">app_module</span>\n\n        <span class=\"c1\"># Reference to the Apps registry that holds this AppConfig. Set by the</span>\n        <span class=\"c1\"># registry when it registers the AppConfig instance.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># The following attributes could be defined at the class level in a</span>\n        <span class=\"c1\"># subclass, hence the test-and-set pattern.</span>\n\n        <span class=\"c1\"># Last component of the Python path to the application e.g. &#39;admin&#39;.</span>\n        <span class=\"c1\"># This value must be unique across a Django project.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;label&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"n\">app_name</span><span class=\"o\">.</span><span class=\"n\">rpartition</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">isidentifier</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The app label &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; is not a valid Python identifier.&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Human-readable name for the application e.g. &quot;Admin&quot;.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;verbose_name&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Filesystem path to the application directory e.g.</span>\n        <span class=\"c1\"># &#39;/path/to/django/contrib/admin&#39;.</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_path_from_module</span><span class=\"p\">(</span><span class=\"n\">app_module</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Module containing models e.g. &lt;module &#39;django.contrib.admin.models&#39;</span>\n        <span class=\"c1\"># from &#39;django/contrib/admin/models.py&#39;&gt;. Set by import_models().</span>\n        <span class=\"c1\"># None if the application doesn&#39;t have a models module.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">models_module</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># Mapping of lowercase model names to model classes. Initially set to</span>\n        <span class=\"c1\"># None to prevent accidental access before import_models() runs.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_auto_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_AUTO_FIELD</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_is_default_auto_field_overridden</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"n\">default_auto_field</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">AppConfig</span><span class=\"o\">.</span><span class=\"n\">default_auto_field</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_path_from_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">module</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Attempt to determine app&#39;s filesystem path from its module.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># See #21874 for extended discussion of the behavior of this method in</span>\n        <span class=\"c1\"># various cases.</span>\n        <span class=\"c1\"># Convert to list because __path__ may not support indexing.</span>\n        <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__path__&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__file__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">filename</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)]</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># For unknown reasons, sometimes the list returned by __path__</span>\n                <span class=\"c1\"># contains duplicates that must be removed (#25246).</span>\n                <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The app module </span><span class=\"si\">%r</span><span class=\"s2\"> has multiple filesystem locations (</span><span class=\"si\">%r</span><span class=\"s2\">); &quot;</span>\n                <span class=\"s2\">&quot;you must configure this app with an AppConfig subclass &quot;</span>\n                <span class=\"s2\">&quot;with a &#39;path&#39; class attribute.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">paths</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">paths</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The app module </span><span class=\"si\">%r</span><span class=\"s2\"> has no filesystem location, &quot;</span>\n                <span class=\"s2\">&quot;you must configure this app with an AppConfig subclass &quot;</span>\n                <span class=\"s2\">&quot;with a &#39;path&#39; class attribute.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">module</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">paths</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">entry</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Factory that creates an app config from an entry in INSTALLED_APPS.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># create() eventually returns app_config_class(app_name, app_module).</span>\n        <span class=\"n\">app_config_class</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">app_module</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># If import_module succeeds, entry points to the app module.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">app_module</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If app_module has an apps submodule that defines a single</span>\n            <span class=\"c1\"># AppConfig subclass, use it automatically.</span>\n            <span class=\"c1\"># To prevent this, an AppConfig subclass can declare a class</span>\n            <span class=\"c1\"># variable default = False.</span>\n            <span class=\"c1\"># If the apps module defines more than one AppConfig subclass,</span>\n            <span class=\"c1\"># the default one can declare default = True.</span>\n            <span class=\"k\">if</span> <span class=\"n\">module_has_submodule</span><span class=\"p\">(</span><span class=\"n\">app_module</span><span class=\"p\">,</span> <span class=\"n\">APPS_MODULE_NAME</span><span class=\"p\">):</span>\n                <span class=\"n\">mod_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">,</span> <span class=\"n\">APPS_MODULE_NAME</span><span class=\"p\">)</span>\n                <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">mod_path</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Check if there&#39;s exactly one AppConfig candidate,</span>\n                <span class=\"c1\"># excluding those that explicitly define default = False.</span>\n                <span class=\"n\">app_configs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">candidate</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmembers</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">,</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isclass</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span>\n                        <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span>\n                        <span class=\"ow\">and</span> <span class=\"n\">candidate</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">cls</span>\n                        <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                <span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                    <span class=\"n\">app_config_class</span> <span class=\"o\">=</span> <span class=\"n\">app_configs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Check if there&#39;s exactly one AppConfig subclass,</span>\n                    <span class=\"c1\"># among those that explicitly define default = True.</span>\n                    <span class=\"n\">app_configs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                        <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">candidate</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">app_configs</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">,</span> <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n                    <span class=\"p\">]</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">candidates</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"n\">app_configs</span><span class=\"p\">]</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> declares more than one default AppConfig: &quot;</span>\n                            <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">mod_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"p\">))</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                        <span class=\"n\">app_config_class</span> <span class=\"o\">=</span> <span class=\"n\">app_configs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n            <span class=\"c1\"># Use the default app config class if we didn&#39;t find anything.</span>\n            <span class=\"k\">if</span> <span class=\"n\">app_config_class</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">app_config_class</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span>\n                <span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"n\">entry</span>\n\n        <span class=\"c1\"># If import_string succeeds, entry is an app config class.</span>\n        <span class=\"k\">if</span> <span class=\"n\">app_config_class</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">app_config_class</span> <span class=\"o\">=</span> <span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n        <span class=\"c1\"># If both import_module and import_string failed, it means that entry</span>\n        <span class=\"c1\"># doesn&#39;t have a valid value.</span>\n        <span class=\"k\">if</span> <span class=\"n\">app_module</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">app_config_class</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If the last component of entry starts with an uppercase letter,</span>\n            <span class=\"c1\"># then it was likely intended to be an app config class; if not,</span>\n            <span class=\"c1\"># an app module. Provide a nice error message in both cases.</span>\n            <span class=\"n\">mod_path</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">cls_name</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">rpartition</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">mod_path</span> <span class=\"ow\">and</span> <span class=\"n\">cls_name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">isupper</span><span class=\"p\">():</span>\n                <span class=\"c1\"># We could simply re-trigger the string import exception, but</span>\n                <span class=\"c1\"># we&#39;re going the extra mile and providing a better error</span>\n                <span class=\"c1\"># message for typos in INSTALLED_APPS.</span>\n                <span class=\"c1\"># This may raise ImportError, which is the best exception</span>\n                <span class=\"c1\"># possible if the module at mod_path cannot be imported.</span>\n                <span class=\"n\">mod</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">mod_path</span><span class=\"p\">)</span>\n                <span class=\"n\">candidates</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                    <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getmembers</span><span class=\"p\">(</span><span class=\"n\">mod</span><span class=\"p\">,</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isclass</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">candidate</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"bp\">cls</span>\n                <span class=\"p\">]</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Module &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; does not contain a &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; class.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">mod_path</span><span class=\"p\">,</span>\n                    <span class=\"n\">cls_name</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">candidates</span><span class=\"p\">:</span>\n                    <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; Choices are: </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Re-trigger the module import exception.</span>\n                <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check for obvious errors. (This check prevents duck typing, but</span>\n        <span class=\"c1\"># it could be removed if it became a problem in practice.)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">app_config_class</span><span class=\"p\">,</span> <span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; isn&#39;t a subclass of AppConfig.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">entry</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Obtain app name here rather than in AppClass.__init__ to keep</span>\n        <span class=\"c1\"># all error checking for entries in INSTALLED_APPS in one place.</span>\n        <span class=\"k\">if</span> <span class=\"n\">app_name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"n\">app_config_class</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; must supply a name attribute.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">entry</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Ensure app_name points to a valid module.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">app_module</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot import &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;. Check that &#39;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">.name&#39; is correct.&quot;</span>\n                <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">app_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">app_config_class</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span>\n                    <span class=\"n\">app_config_class</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Entry is a path to an app config class.</span>\n        <span class=\"k\">return</span> <span class=\"n\">app_config_class</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"p\">,</span> <span class=\"n\">app_module</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"AppConfig.get_model\"><a class=\"viewcode-back\" href=\"../../../../ref/applications/#django.apps.AppConfig.get_model\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"p\">,</span> <span class=\"n\">require_ready</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the model with the given case-insensitive model_name.</span>\n\n<span class=\"sd\">        Raise LookupError if no model exists with this name.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">require_ready</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">check_models_ready</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">check_apps_ready</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"p\">[</span><span class=\"n\">model_name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">LookupError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;App &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; doesn&#39;t have a &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; model.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">model_name</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"AppConfig.get_models\"><a class=\"viewcode-back\" href=\"../../../../ref/applications/#django.apps.AppConfig.get_models\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_models</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">include_auto_created</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">include_swapped</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an iterable of models.</span>\n\n<span class=\"sd\">        By default, the following models aren&#39;t included:</span>\n\n<span class=\"sd\">        - auto-created models for many-to-many relations without</span>\n<span class=\"sd\">          an explicit intermediate table,</span>\n<span class=\"sd\">        - models that have been swapped out.</span>\n\n<span class=\"sd\">        Set the corresponding keyword argument to True to include such models.</span>\n<span class=\"sd\">        Keyword arguments aren&#39;t documented; they&#39;re a private API.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">check_models_ready</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">auto_created</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">include_auto_created</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">if</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">swapped</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">include_swapped</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">yield</span> <span class=\"n\">model</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">import_models</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Dictionary of models for this app, primarily maintained in the</span>\n        <span class=\"c1\"># &#39;all_models&#39; attribute of the Apps this AppConfig is attached to.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">all_models</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">module_has_submodule</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">MODELS_MODULE_NAME</span><span class=\"p\">):</span>\n            <span class=\"n\">models_module_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">MODELS_MODULE_NAME</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">models_module</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">models_module_name</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"AppConfig.ready\"><a class=\"viewcode-back\" href=\"../../../../ref/applications/#django.apps.AppConfig.ready\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Override this method in subclasses to run code when Django starts.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span></div></div>\n</pre></div>", "current_page_name": "_modules/django/apps/config", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
