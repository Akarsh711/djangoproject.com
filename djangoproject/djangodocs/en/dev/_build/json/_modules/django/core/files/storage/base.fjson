{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "django"}, {"link": "../", "title": "django.core.files.storage"}], "title": "django.core.files.storage.base", "body": "<h1>Source code for django.core.files.storage.base</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">SuspiciousFileOperation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files.utils</span> <span class=\"kn\">import</span> <span class=\"n\">validate_file_name</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.crypto</span> <span class=\"kn\">import</span> <span class=\"n\">get_random_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.text</span> <span class=\"kn\">import</span> <span class=\"n\">get_valid_filename</span>\n\n\n<div class=\"viewcode-block\" id=\"Storage\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Storage</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A base storage class, providing some default behaviors that all other</span>\n<span class=\"sd\">    storage systems can inherit or override, as necessary.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># The following methods represent a public interface to private methods.</span>\n    <span class=\"c1\"># These shouldn&#39;t be overridden by subclasses unless absolutely necessary.</span>\n\n<div class=\"viewcode-block\" id=\"Storage.open\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.open\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Retrieve the specified file from storage.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.save\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.save\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Save new content to the file specified by name. The content should be</span>\n<span class=\"sd\">        a proper File object or any Python file-like object, ready to be read</span>\n<span class=\"sd\">        from the beginning.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Get the proper name for the file, as it will actually be saved.</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"s2\">&quot;chunks&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_available_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"n\">max_length</span><span class=\"p\">)</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_save</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Ensure that the name returned from the storage system is still valid.</span>\n        <span class=\"n\">validate_file_name</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">allow_relative_path</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div>\n\n    <span class=\"c1\"># These methods are part of the public API, with default implementations.</span>\n\n<div class=\"viewcode-block\" id=\"Storage.get_valid_name\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.get_valid_name\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_valid_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a filename, based on the provided filename, that&#39;s suitable for</span>\n<span class=\"sd\">        use in the target storage system.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_valid_filename</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.get_alternative_name\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.get_alternative_name\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_alternative_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_root</span><span class=\"p\">,</span> <span class=\"n\">file_ext</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an alternative filename, by adding an underscore and a random 7</span>\n<span class=\"sd\">        character alphanumeric string (before the file extension, if one</span>\n<span class=\"sd\">        exists) to the filename.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">_</span><span class=\"si\">%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">file_root</span><span class=\"p\">,</span> <span class=\"n\">get_random_string</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"n\">file_ext</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.get_available_name\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.get_available_name\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_available_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a filename that&#39;s free on the target storage system and</span>\n<span class=\"sd\">        available for new content to be written to.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">dir_name</span><span class=\"p\">,</span> <span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;..&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"n\">dir_name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SuspiciousFileOperation</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Detected path traversal attempt in &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">dir_name</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">validate_file_name</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span>\n        <span class=\"n\">file_root</span><span class=\"p\">,</span> <span class=\"n\">file_ext</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">splitext</span><span class=\"p\">(</span><span class=\"n\">file_name</span><span class=\"p\">)</span>\n        <span class=\"c1\"># If the filename already exists, generate an alternative filename</span>\n        <span class=\"c1\"># until it doesn&#39;t exist.</span>\n        <span class=\"c1\"># Truncate original name if required, so the new filename does not</span>\n        <span class=\"c1\"># exceed the max_length.</span>\n        <span class=\"k\">while</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span><span class=\"n\">max_length</span> <span class=\"ow\">and</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_length</span><span class=\"p\">):</span>\n            <span class=\"c1\"># file_ext includes the dot.</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                <span class=\"n\">dir_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_alternative_name</span><span class=\"p\">(</span><span class=\"n\">file_root</span><span class=\"p\">,</span> <span class=\"n\">file_ext</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">max_length</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">continue</span>\n            <span class=\"c1\"># Truncate file_root if max_length exceeded.</span>\n            <span class=\"n\">truncation</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">max_length</span>\n            <span class=\"k\">if</span> <span class=\"n\">truncation</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">file_root</span> <span class=\"o\">=</span> <span class=\"n\">file_root</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"n\">truncation</span><span class=\"p\">]</span>\n                <span class=\"c1\"># Entire file_root was truncated in attempt to find an</span>\n                <span class=\"c1\"># available filename.</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">file_root</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">SuspiciousFileOperation</span><span class=\"p\">(</span>\n                        <span class=\"s1\">&#39;Storage can not find an available filename for &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot;. &#39;</span>\n                        <span class=\"s2\">&quot;Please make sure that the corresponding file field &quot;</span>\n                        <span class=\"s1\">&#39;allows sufficient &quot;max_length&quot;.&#39;</span> <span class=\"o\">%</span> <span class=\"n\">name</span>\n                    <span class=\"p\">)</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                    <span class=\"n\">dir_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_alternative_name</span><span class=\"p\">(</span><span class=\"n\">file_root</span><span class=\"p\">,</span> <span class=\"n\">file_ext</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.generate_filename\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.generate_filename\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">generate_filename</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Validate the filename by calling get_valid_name() and return a filename</span>\n<span class=\"sd\">        to be passed to the save() method.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># `filename` may include a path as returned by FileField.upload_to.</span>\n        <span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;..&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">PurePath</span><span class=\"p\">(</span><span class=\"n\">dirname</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SuspiciousFileOperation</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Detected path traversal attempt in &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">dirname</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">normpath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dirname</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_valid_name</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)))</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.path\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.path\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a local filesystem path where the file can be retrieved using</span>\n<span class=\"sd\">        Python&#39;s built-in open() function. Storage systems that can&#39;t be</span>\n<span class=\"sd\">        accessed using open() should *not* implement this method.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;This backend doesn&#39;t support absolute paths.&quot;</span><span class=\"p\">)</span></div>\n\n    <span class=\"c1\"># The following methods form the public API for storage systems, but with</span>\n    <span class=\"c1\"># no default implementations. Subclasses must implement *all* of these.</span>\n\n<div class=\"viewcode-block\" id=\"Storage.delete\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.delete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Delete the specified file from the storage system.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Storage must provide a delete() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.exists\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.exists\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return True if a file referenced by the given name already exists in the</span>\n<span class=\"sd\">        storage system, or False if the name is available for a new file.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Storage must provide an exists() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.listdir\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.listdir\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        List the contents of the specified path. Return a 2-tuple of lists:</span>\n<span class=\"sd\">        the first item being directories, the second item being files.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Storage must provide a listdir() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.size\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.size\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the total size, in bytes, of the file specified by name.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;subclasses of Storage must provide a size() method&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.url\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.url\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an absolute URL where the file&#39;s contents can be accessed</span>\n<span class=\"sd\">        directly by a web browser.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;subclasses of Storage must provide a url() method&quot;</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.get_accessed_time\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.get_accessed_time\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_accessed_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the last accessed time (as a datetime) of the file specified by</span>\n<span class=\"sd\">        name. The datetime will be timezone-aware if USE_TZ=True.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Storage must provide a get_accessed_time() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.get_created_time\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.get_created_time\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_created_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the creation time (as a datetime) of the file specified by name.</span>\n<span class=\"sd\">        The datetime will be timezone-aware if USE_TZ=True.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Storage must provide a get_created_time() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Storage.get_modified_time\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.Storage.get_modified_time\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_modified_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the last modified time (as a datetime) of the file specified by</span>\n<span class=\"sd\">        name. The datetime will be timezone-aware if USE_TZ=True.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Storage must provide a get_modified_time() method&quot;</span>\n        <span class=\"p\">)</span></div></div>\n</pre></div>", "current_page_name": "_modules/django/core/files/storage/base", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}