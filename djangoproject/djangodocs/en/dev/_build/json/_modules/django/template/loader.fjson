{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.template.loader", "body": "<h1>Source code for django.template.loader</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">engines</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateDoesNotExist</span>\n\n\n<div class=\"viewcode-block\" id=\"get_template\"><a class=\"viewcode-back\" href=\"../../../../topics/templates/#django.template.loader.get_template\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Load and return a template for the given name.</span>\n\n<span class=\"sd\">    Raise TemplateDoesNotExist if no such template exists.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">chain</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">engines</span> <span class=\"o\">=</span> <span class=\"n\">_engine_list</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">engine</span> <span class=\"ow\">in</span> <span class=\"n\">engines</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n    <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">chain</span><span class=\"o\">=</span><span class=\"n\">chain</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"select_template\"><a class=\"viewcode-back\" href=\"../../../../topics/templates/#django.template.loader.select_template\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">select_template</span><span class=\"p\">(</span><span class=\"n\">template_name_list</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Load and return a template for one of the given names.</span>\n\n<span class=\"sd\">    Try names in order and return the first template found.</span>\n\n<span class=\"sd\">    Raise TemplateDoesNotExist if no such template exists.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">template_name_list</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;select_template() takes an iterable of template names but got a &quot;</span>\n            <span class=\"s2\">&quot;string: </span><span class=\"si\">%r</span><span class=\"s2\">. Use get_template() if you want to load a single &quot;</span>\n            <span class=\"s2\">&quot;template by name.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">template_name_list</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"n\">chain</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">engines</span> <span class=\"o\">=</span> <span class=\"n\">_engine_list</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">template_name</span> <span class=\"ow\">in</span> <span class=\"n\">template_name_list</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">engine</span> <span class=\"ow\">in</span> <span class=\"n\">engines</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">chain</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">template_name_list</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">template_name_list</span><span class=\"p\">),</span> <span class=\"n\">chain</span><span class=\"o\">=</span><span class=\"n\">chain</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"s2\">&quot;No template names provided&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"render_to_string\"><a class=\"viewcode-back\" href=\"../../../../topics/templates/#django.template.loader.render_to_string\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">render_to_string</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Load a template and render it with a context. Return a string.</span>\n\n<span class=\"sd\">    template_name may be a string or a list of strings.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">select_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_engine_list</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">using</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"n\">engines</span><span class=\"p\">[</span><span class=\"n\">using</span><span class=\"p\">]]</span>\n</pre></div>", "current_page_name": "_modules/django/template/loader", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
