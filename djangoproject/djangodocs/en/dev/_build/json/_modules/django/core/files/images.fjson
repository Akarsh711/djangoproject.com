{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.core.files.images", "body": "<h1>Source code for django.core.files.images</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Utility functions for handling images.</span>\n\n<span class=\"sd\">Requires Pillow as you might imagine.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">struct</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zlib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n\n\n<div class=\"viewcode-block\" id=\"ImageFile\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/file/#django.core.files.images.ImageFile\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ImageFile</span><span class=\"p\">(</span><span class=\"n\">File</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A mixin for use alongside django.core.files.base.File, which provides</span>\n<span class=\"sd\">    additional features for dealing with images.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">width</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_image_dimensions</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">height</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_get_image_dimensions</span><span class=\"p\">()[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_image_dimensions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_dimensions_cache&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">close</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">closed</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dimensions_cache</span> <span class=\"o\">=</span> <span class=\"n\">get_image_dimensions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">close</span><span class=\"o\">=</span><span class=\"n\">close</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_dimensions_cache</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_image_dimensions</span><span class=\"p\">(</span><span class=\"n\">file_or_path</span><span class=\"p\">,</span> <span class=\"n\">close</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the (width, height) of an image, given an open file or a path.  Set</span>\n<span class=\"sd\">    &#39;close&#39; to True to close the file at the end if it is initially in an open</span>\n<span class=\"sd\">    state.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">ImageFile</span> <span class=\"k\">as</span> <span class=\"n\">PillowImageFile</span>\n\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PillowImageFile</span><span class=\"o\">.</span><span class=\"n\">Parser</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">file_or_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;read&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">file_or_path</span>\n        <span class=\"n\">file_pos</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">tell</span><span class=\"p\">()</span>\n        <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_or_path</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">close</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Most of the time Pillow only needs a small chunk to parse the image</span>\n        <span class=\"c1\"># and get the dimensions, but with some TIFF files Pillow needs to</span>\n        <span class=\"c1\"># parse the whole file.</span>\n        <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span>\n        <span class=\"k\">while</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">chunk_size</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">feed</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">zlib</span><span class=\"o\">.</span><span class=\"n\">error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"c1\"># ignore zlib complaining on truncated stream, just feed more</span>\n                <span class=\"c1\"># data to parser (ticket #19457).</span>\n                <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error -5&quot;</span><span class=\"p\">):</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span>\n            <span class=\"k\">except</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Ignore PIL failing on a too short buffer when reads return</span>\n                <span class=\"c1\"># less bytes than expected. Skip and feed more data to the</span>\n                <span class=\"c1\"># parser (ticket #24544).</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">except</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># e.g. &quot;RuntimeError: could not create decoder object&quot; for</span>\n                <span class=\"c1\"># WebP files. A different chunk_size may work.</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">size</span>\n            <span class=\"n\">chunk_size</span> <span class=\"o\">*=</span> <span class=\"mi\">2</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">close</span><span class=\"p\">:</span>\n            <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">file_pos</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/django/core/files/images", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}