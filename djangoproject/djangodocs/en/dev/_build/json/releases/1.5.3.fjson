{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.5.4/", "title": "Django 1.5.4 release notes"}, "next": {"link": "../1.5.2/", "title": "Django 1.5.2 release notes"}, "title": "Django 1.5.3 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-5-3-release-notes\">\n<span id=\"django-1-5-3-release-notes\"></span><h1>Django 1.5.3 release notes<a class=\"headerlink\" href=\"#django-1-5-3-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>September 10, 2013</em></p>\n<p>This is Django 1.5.3, the third release in the Django 1.5 series. It addresses\none security issue and also contains an opt-in feature to enhance the security\nof <a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a>.</p>\n<div class=\"section\" id=\"s-directory-traversal-vulnerability-in-ssi-template-tag\">\n<span id=\"directory-traversal-vulnerability-in-ssi-template-tag\"></span><h2>Directory traversal vulnerability in <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> template tag<a class=\"headerlink\" href=\"#directory-traversal-vulnerability-in-ssi-template-tag\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In previous versions of Django it was possible to bypass the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ALLOWED_INCLUDE_ROOTS</span></code> setting used for security with the <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code>\ntemplate tag by specifying a relative path that starts with one of the allowed\nroots. For example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">ALLOWED_INCLUDE_ROOTS</span> <span class=\"pre\">=</span> <span class=\"pre\">(&quot;/var/www&quot;,)</span></code> the following\nwould be possible:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">ssi</span> <span class=\"s2\">&quot;/var/www/../../etc/passwd&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>In practice this is not a very common problem, as it would require the template\nauthor to put the <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> file in a user-controlled variable, but it\u2019s possible\nin principle.</p>\n</div>\n<div class=\"section\" id=\"s-mitigating-a-remote-code-execution-vulnerability-in-django-contrib-sessions\">\n<span id=\"mitigating-a-remote-code-execution-vulnerability-in-django-contrib-sessions\"></span><h2>Mitigating a remote-code execution vulnerability in <a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a><a class=\"headerlink\" href=\"#mitigating-a-remote-code-execution-vulnerability-in-django-contrib-sessions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a> currently uses <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a> to serialize\nsession data before storing it in the backend. If you\u2019re using the <a class=\"reference internal\" href=\"../../topics/http/sessions/#cookie-session-backend\"><span class=\"std std-ref\">signed\ncookie session backend</span></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> is\nknown by an attacker (there isn\u2019t an inherent vulnerability in Django that\nwould cause it to leak), the attacker could insert a string into their session\nwhich, when unpickled, executes arbitrary code on the server. The technique for\ndoing so is simple and easily available on the internet. Although the cookie\nsession storage signs the cookie-stored data to prevent tampering, a\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> leak immediately escalates to a remote code execution\nvulnerability.</p>\n<p>This attack can be mitigated by serializing session data using JSON rather\nthan <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a>. To facilitate this, Django 1.5.3 introduces a new setting,\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SESSION_SERIALIZER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SERIALIZER</span></code></a>, to customize the session serialization format.\nFor backwards compatibility, this setting defaults to using <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a>.\nWhile JSON serialization does not support all Python objects like <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a>\ndoes, we highly recommend switching to JSON-serialized values. Also,\nas JSON requires string keys, you will likely run into problems if you are\nusing non-string keys in <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code>. See the\n<a class=\"reference internal\" href=\"../../topics/http/sessions/#session-serialization\"><span class=\"std std-ref\">Session serialization</span></a> documentation for more details.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.5.2", "Django 1.5.2 release notes", "N", "next"], ["releases/1.5.4", "Django 1.5.4 release notes", "P", "previous"]], "sourcename": "releases/1.5.3.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.5.3 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#directory-traversal-vulnerability-in-ssi-template-tag\">Directory traversal vulnerability in <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> template tag</a></li>\n<li><a class=\"reference internal\" href=\"#mitigating-a-remote-code-execution-vulnerability-in-django-contrib-sessions\">Mitigating a remote-code execution vulnerability in <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.5.3", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
