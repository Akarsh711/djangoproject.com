{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.5.1/", "title": "Django 1.5.1 release notes"}, "next": {"link": "../1.4.22/", "title": "Django 1.4.22 release notes"}, "title": "Django 1.5 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-5-release-notes\">\n<span id=\"django-1-5-release-notes\"></span><h1>Django 1.5 release notes<a class=\"headerlink\" href=\"#django-1-5-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>February 26, 2013</em></p>\n<p>Welcome to Django 1.5!</p>\n<p>These release notes cover the <a class=\"reference internal\" href=\"#whats-new-1-5\"><span class=\"std std-ref\">new features</span></a>, as well as\nsome <a class=\"reference internal\" href=\"#backwards-incompatible-1-5\"><span class=\"std std-ref\">backwards incompatible changes</span></a> you\u2019ll\nwant to be aware of when upgrading from Django 1.4 or older versions. We\u2019ve\nalso dropped some features, which are detailed in <a class=\"reference internal\" href=\"../../internals/deprecation/#deprecation-removed-in-1-5\"><span class=\"std std-ref\">our deprecation plan</span></a>, and we\u2019ve <a class=\"reference internal\" href=\"#deprecated-features-1-5\"><span class=\"std std-ref\">begun the deprecation process\nfor some features</span></a>.</p>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The biggest new feature in Django 1.5 is the <a class=\"reference internal\" href=\"#configurable-user-model\">configurable User model</a>. Before\nDjango 1.5, applications that wanted to use Django\u2019s auth framework\n(<a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a>) were forced to use Django\u2019s definition of a \u201cuser\u201d.\nIn Django 1.5, you can now swap out the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model for one that you write\nyourself. This could be a simple extension to the existing <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model \u2013 for\nexample, you could add a Twitter or Facebook ID field \u2013 or you could completely\nreplace the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> with one totally customized for your site.</p>\n<p>Django 1.5 is also the first release with <a class=\"reference internal\" href=\"#python-3-support\">Python 3 support</a>! We\u2019re labeling\nthis support \u201cexperimental\u201d because we don\u2019t yet consider it production-ready,\nbut everything\u2019s in place for you to start porting your apps to Python 3.\nOur next release, Django 1.6, will support Python 3 without reservations.</p>\n<p>Other notable new features in Django 1.5 include:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"#support-for-saving-a-subset-of-model-s-fields\">Support for saving a subset of model\u2019s fields</a> -\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a> now accepts an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> argument, letting you specify which fields are\nwritten back to the database when you call <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>. This can help\nin high-concurrency operations, and can improve performance.</li>\n<li>Better <a class=\"reference external\" href=\"#explicit-streaming-responses\">support for streaming responses</a> via\nthe new  <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> response class.</li>\n<li><a class=\"reference internal\" href=\"#geodjango\">GeoDjango</a> now supports PostGIS 2.0.</li>\n<li>\u2026 and more; <a class=\"reference external\" href=\"#what-s-new-in-django-1-5\">see below</a>.</li>\n</ul>\n<p>Wherever possible we try to introduce new features in a backwards-compatible\nmanner per <a class=\"reference internal\" href=\"../../misc/api-stability/\"><span class=\"doc\">our API stability policy</span></a>.\nHowever, as with previous releases, Django 1.5 ships with some minor\n<a class=\"reference internal\" href=\"#backwards-incompatible-1-5\"><span class=\"std std-ref\">backwards incompatible changes</span></a>; people\nupgrading from previous versions of Django should read that list carefully.</p>\n<p>One deprecated feature worth noting is the shift to \u201cnew-style\u201d <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-url\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">url</span></code></a> tag.\nPrior to Django 1.3, syntax like <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">myview</span> <span class=\"pre\">%}</span></code> was interpreted\nincorrectly (Django considered <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;myview&quot;</span></code> to be a literal name of a view, not\na template variable named <code class=\"docutils literal notranslate\"><span class=\"pre\">myview</span></code>). Django 1.3 and above introduced the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">url</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> syntax to bring in the corrected behavior where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myview</span></code> was seen as a variable.</p>\n<p>The upshot of this is that if you are not using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">url</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code>\nin your templates, you\u2019ll need to change tags like <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">myview</span> <span class=\"pre\">%}</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">&quot;myview&quot;</span> <span class=\"pre\">%}</span></code>. If you <em>were</em> using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">url</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> you\ncan simply remove that line under Django 1.5</p>\n</div>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.5 requires Python 2.6.5 or above, though we <strong>highly recommend</strong>\nPython 2.7.3 or above. Support for Python 2.5 and below has been dropped.</p>\n<p>This change should affect only a small number of Django users, as most\noperating-system vendors today are shipping Python 2.6 or newer as their default\nversion. If you\u2019re still using Python 2.5, however, you\u2019ll need to stick to\nDjango 1.4 until you can upgrade your Python version. Per <a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">our support\npolicy</span></a>, Django 1.4 will continue to receive\nsecurity support until the release of Django 1.6.</p>\n<p>Django 1.5 does not run on a Jython final release, because Jython\u2019s latest\nrelease doesn\u2019t currently support Python 2.6. However, Jython currently does\noffer an alpha release featuring 2.7 support, and Django 1.5 supports that alpha\nrelease.</p>\n<div class=\"section\" id=\"s-python-3-support\">\n<span id=\"python-3-support\"></span><h3>Python 3 support<a class=\"headerlink\" href=\"#python-3-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.5 introduces support for Python 3 - specifically, Python\n3.2 and above. This comes in the form of a <strong>single</strong> codebase; you don\u2019t\nneed to install a different version of Django on Python 3. This means that\nyou can write applications targeted for just Python 2, just Python 3, or single\napplications that support both platforms.</p>\n<p>However, we\u2019re labeling this support \u201cexperimental\u201d for now: although it\u2019s\nreceived extensive testing via our automated test suite, it\u2019s received very\nlittle real-world testing. We\u2019ve done our best to eliminate bugs, but we can\u2019t\nbe sure we covered all possible uses of Django.</p>\n<p>Some features of Django aren\u2019t available because they depend on third-party\nsoftware that hasn\u2019t been ported to Python 3 yet, including:</p>\n<ul class=\"simple\">\n<li>the MySQL database backend (depends on MySQLdb)</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a> (depends on PIL)</li>\n<li><a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a> (depends on Selenium WebDriver)</li>\n</ul>\n<p>Further, Django\u2019s more than a web framework; it\u2019s an ecosystem of pluggable\ncomponents. At this point, very few third-party applications have been ported\nto Python 3, so it\u2019s unlikely that a real-world application will have all its\ndependencies satisfied under Python 3.</p>\n<p>Thus, we\u2019re recommending that Django 1.5 not be used in production under Python\n3. Instead, use this opportunity to begin porting applications to Python 3. If\nyou\u2019re an author of a pluggable component, we encourage you to start porting\nnow.</p>\n<p>We plan to offer first-class, production-ready support for Python 3 in our next\nrelease, Django 1.6.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-5\">\n<span id=\"s-whats-new-1-5\"></span><span id=\"what-s-new-in-django-1-5\"></span><span id=\"whats-new-1-5\"></span><h2>What\u2019s new in Django 1.5<a class=\"headerlink\" href=\"#what-s-new-in-django-1-5\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-configurable-user-model\">\n<span id=\"configurable-user-model\"></span><h3>Configurable User model<a class=\"headerlink\" href=\"#configurable-user-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In Django 1.5, you can now use your own model as the store for user-related\ndata. If your project needs a username with more than 30 characters, or if\nyou want to store user\u2019s names in a format other than first name/last name,\nor you want to put custom profile information onto your User object, you can\nnow do so.</p>\n<p>If you have a third-party reusable application that references the User model,\nyou may need to make some changes to the way you reference User instances. You\nshould also document any specific features of the User model that your\napplication relies upon.</p>\n<p>See the <a class=\"reference internal\" href=\"../../topics/auth/customizing/#auth-custom-user\"><span class=\"std std-ref\">documentation on custom user models</span></a> for\nmore details.</p>\n</div>\n<div class=\"section\" id=\"s-support-for-saving-a-subset-of-model-s-fields\">\n<span id=\"support-for-saving-a-subset-of-model-s-fields\"></span><h3>Support for saving a subset of model\u2019s fields<a class=\"headerlink\" href=\"#support-for-saving-a-subset-of-model-s-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The method <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a> has a new\nkeyword argument <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code>. By using this argument it is possible to\nsave only a select list of model\u2019s fields. This can be useful for performance\nreasons or when trying to avoid overwriting concurrent changes.</p>\n<p>Deferred instances (those loaded by <code class=\"docutils literal notranslate\"><span class=\"pre\">.only()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">.defer()</span></code>) will\nautomatically save just the loaded fields. If any field is set manually after\nload, that field will also get updated on save.</p>\n<p>See the <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a> documentation for\nmore details.</p>\n</div>\n<div class=\"section\" id=\"s-caching-of-related-model-instances\">\n<span id=\"caching-of-related-model-instances\"></span><h3>Caching of related model instances<a class=\"headerlink\" href=\"#caching-of-related-model-instances\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When traversing relations, the ORM will avoid re-fetching objects that were\npreviously loaded. For example, with the tutorial\u2019s models:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first_poll</span> <span class=\"o\">=</span> <span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first_choice</span> <span class=\"o\">=</span> <span class=\"n\">first_poll</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first_choice</span><span class=\"o\">.</span><span class=\"n\">poll</span> <span class=\"ow\">is</span> <span class=\"n\">first_poll</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>In Django 1.5, the third line no longer triggers a new SQL query to fetch\n<code class=\"docutils literal notranslate\"><span class=\"pre\">first_choice.poll</span></code>; it was set by the second line.</p>\n<p>For one-to-one relationships, both sides can be cached. For many-to-one\nrelationships, only the single side of the relationship can be cached. This\nis particularly helpful in combination with <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-explicit-support-for-streaming-responses\">\n<span id=\"s-explicit-streaming-responses\"></span><span id=\"explicit-support-for-streaming-responses\"></span><span id=\"explicit-streaming-responses\"></span><h3>Explicit support for streaming responses<a class=\"headerlink\" href=\"#explicit-support-for-streaming-responses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Before Django 1.5, it was possible to create a streaming response by passing\nan iterator to <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>. But this was unreliable:\nany middleware that accessed the <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.content\" title=\"django.http.HttpResponse.content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">content</span></code></a>\nattribute would consume the iterator prematurely.</p>\n<p>You can now explicitly generate a streaming response with the new\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> class. This class exposes a\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.StreamingHttpResponse.streaming_content\" title=\"django.http.StreamingHttpResponse.streaming_content\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">streaming_content</span></code></a> attribute which\nis an iterator.</p>\n<p>Since <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> does not have a <code class=\"docutils literal notranslate\"><span class=\"pre\">content</span></code>\nattribute, middleware that needs access to the response content must test for\nstreaming responses and behave accordingly.</p>\n</div>\n<div class=\"section\" id=\"s-verbatim-template-tag\">\n<span id=\"verbatim-template-tag\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">verbatim</span> <span class=\"pre\">%}</span></code> template tag<a class=\"headerlink\" href=\"#verbatim-template-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To make it easier to deal with JavaScript templates which collide with Django\u2019s\nsyntax, you can now use the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-verbatim\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">verbatim</span></code></a> block tag to avoid parsing the\ntag\u2019s content.</p>\n</div>\n<div class=\"section\" id=\"s-retrieval-of-contenttype-instances-associated-with-proxy-models\">\n<span id=\"retrieval-of-contenttype-instances-associated-with-proxy-models\"></span><h3>Retrieval of <code class=\"docutils literal notranslate\"><span class=\"pre\">ContentType</span></code> instances associated with proxy models<a class=\"headerlink\" href=\"#retrieval-of-contenttype-instances-associated-with-proxy-models\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The methods <a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.models.ContentTypeManager.get_for_model\" title=\"django.contrib.contenttypes.models.ContentTypeManager.get_for_model\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ContentTypeManager.get_for_model()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.models.ContentTypeManager.get_for_models\" title=\"django.contrib.contenttypes.models.ContentTypeManager.get_for_models\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ContentTypeManager.get_for_models()</span></code></a>\nhave a new keyword argument \u2013 respectively <code class=\"docutils literal notranslate\"><span class=\"pre\">for_concrete_model</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">for_concrete_models</span></code>.\nBy passing <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> using this argument it is now possible to retrieve the\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.models.ContentType\" title=\"django.contrib.contenttypes.models.ContentType\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ContentType</span></code></a>\nassociated with proxy models.</p>\n</div>\n<div class=\"section\" id=\"s-new-view-variable-in-class-based-views-context\">\n<span id=\"new-view-variable-in-class-based-views-context\"></span><h3>New <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> variable in class-based views context<a class=\"headerlink\" href=\"#new-view-variable-in-class-based-views-context\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In all <a class=\"reference internal\" href=\"../../topics/class-based-views/\"><span class=\"doc\">generic class-based views</span></a>\n(or any class-based view inheriting from <code class=\"docutils literal notranslate\"><span class=\"pre\">ContextMixin</span></code>), the context dictionary\ncontains a <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> variable that points to the <code class=\"docutils literal notranslate\"><span class=\"pre\">View</span></code> instance.</p>\n</div>\n<div class=\"section\" id=\"s-geodjango\">\n<span id=\"geodjango\"></span><h3>GeoDjango<a class=\"headerlink\" href=\"#geodjango\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.LineString\" title=\"django.contrib.gis.geos.LineString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LineString</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.MultiLineString\" title=\"django.contrib.gis.geos.MultiLineString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiLineString</span></code></a> GEOS objects now support the\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry.interpolate\" title=\"django.contrib.gis.geos.GEOSGeometry.interpolate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">interpolate()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry.project\" title=\"django.contrib.gis.geos.GEOSGeometry.project\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">project()</span></code></a> methods\n(so-called linear referencing).</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">wkb</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">hex</span></code> properties of\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry\" title=\"django.contrib.gis.geos.GEOSGeometry\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GEOSGeometry</span></code></a> objects preserve the Z\ndimension.</li>\n<li>Support for PostGIS 2.0 has been added and support for GDAL &lt; 1.5 has been\ndropped.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-new-tutorials\">\n<span id=\"new-tutorials\"></span><h3>New tutorials<a class=\"headerlink\" href=\"#new-tutorials\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Additions to the docs include a revamped <a class=\"reference internal\" href=\"../../intro/tutorial03/\"><span class=\"doc\">Tutorial 3</span></a>\nand a new <a class=\"reference internal\" href=\"../../intro/tutorial05/\"><span class=\"doc\">tutorial on testing</span></a>. A new section,\n\u201cAdvanced Tutorials\u201d, offers <a class=\"reference internal\" href=\"../../intro/reusable-apps/\"><span class=\"doc\">How to write reusable apps</span></a> as well as a step-by-step guide for new contributors in\n<a class=\"reference internal\" href=\"../../intro/contributing/\"><span class=\"doc\">Writing your first patch for Django</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-minor-features\">\n<span id=\"minor-features\"></span><h3>Minor features<a class=\"headerlink\" href=\"#minor-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.5 also includes several smaller improvements worth noting:</p>\n<ul>\n<li><p class=\"first\">The template engine now interprets <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as the\ncorresponding Python objects.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/utils/#module-django.utils.timezone\" title=\"django.utils.timezone: Timezone support.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.utils.timezone</span></code></a> provides a helper for converting aware\ndatetimes between time zones. See <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.timezone.localtime\" title=\"django.utils.timezone.localtime\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">localtime()</span></code></a>.</p>\n</li>\n<li><p class=\"first\">The generic views support OPTIONS requests.</p>\n</li>\n<li><p class=\"first\">Management commands do not raise <code class=\"docutils literal notranslate\"><span class=\"pre\">SystemExit</span></code> any more when called by code\nfrom <a class=\"reference internal\" href=\"../../ref/django-admin/#django.core.management.call_command\" title=\"django.core.management.call_command\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">call_command()</span></code></a>. Any exception raised by\nthe command (mostly <a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.CommandError\" title=\"django.core.management.CommandError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CommandError</span></code></a>) is\npropagated.</p>\n<p>Moreover, when you output errors or messages in your custom commands, you\nshould now use <code class=\"docutils literal notranslate\"><span class=\"pre\">self.stdout.write('message')</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.stderr.write('error')</span></code> (see the note on\n<a class=\"reference internal\" href=\"../../howto/custom-management-commands/#management-commands-output\"><span class=\"std std-ref\">management commands output</span></a>).</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> management command outputs one row at a time,\npreventing out-of-memory errors when dumping large datasets.</p>\n</li>\n<li><p class=\"first\">In the localflavor for Canada, <code class=\"docutils literal notranslate\"><span class=\"pre\">pq</span></code> was added to the acceptable codes for\nQuebec. It\u2019s an old abbreviation.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../topics/signals/#connecting-receiver-functions\"><span class=\"std std-ref\">receiver</span></a> decorator is now able to\nconnect to more than one signal by supplying a list of signals.</p>\n</li>\n<li><p class=\"first\">In the admin, you can now filter users by groups which they are members of.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.bulk_create()</span></code></a> now has a batch_size\nargument. By default the batch_size is unlimited except for SQLite where\nsingle batch is limited so that 999 parameters per query isn\u2019t exceeded.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOGIN_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOGIN_URL</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOGIN_REDIRECT_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOGIN_REDIRECT_URL</span></code></a> settings now also\naccept view function names and\n<a class=\"reference internal\" href=\"../../topics/http/urls/#naming-url-patterns\"><span class=\"std std-ref\">named URL patterns</span></a>. This allows you to reduce\nconfiguration duplication. More information can be found in the\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.decorators.login_required\" title=\"django.contrib.auth.decorators.login_required\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">login_required()</span></code></a> documentation.</p>\n</li>\n<li><p class=\"first\">Django now provides a mod_wsgi <a class=\"reference internal\" href=\"../../howto/deployment/wsgi/apache-auth/\"><span class=\"doc\">auth handler</span></a>.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.delete()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.delete()</span></code></a> can now take\nfast-path in some cases. The fast-path allows for less queries and less\nobjects fetched into memory. See <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.delete()</span></code></a> for details.</p>\n</li>\n<li><p class=\"first\">An instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">ResolverMatch</span></code> is stored on the request as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">resolver_match</span></code>.</p>\n</li>\n<li><p class=\"first\">By default, all logging messages reaching the <code class=\"docutils literal notranslate\"><span class=\"pre\">django</span></code> logger when\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> are sent to the console (unless you redefine the\nlogger in your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOGGING\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOGGING</span></code></a> setting).</p>\n</li>\n<li><p class=\"first\">When using <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a>, it is now possible to\nlook up permissions by using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">if</span> <span class=\"pre\">'someapp.someperm'</span> <span class=\"pre\">in</span> <span class=\"pre\">perms</span> <span class=\"pre\">%}</span></code>\nin templates.</p>\n</li>\n<li><p class=\"first\">It\u2019s not required any more to have <code class=\"docutils literal notranslate\"><span class=\"pre\">404.html</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">500.html</span></code> templates in\nthe root templates directory. Django will output some basic error messages for\nboth situations when those templates are not found. It\u2019s still recommended as\ngood practice to provide those templates in order to present pretty error\npages to the user.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a> provides a new signal that is emitted\nwhenever a user fails to login successfully. See\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.signals.user_login_failed\" title=\"django.contrib.auth.signals.user_login_failed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">user_login_failed</span></code></a></p>\n</li>\n<li><p class=\"first\">The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-loaddata-ignorenonexistent\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">loaddata</span> <span class=\"pre\">--ignorenonexistent</span></code></a> option ignore data for fields\nthat no longer exist.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertXMLEqual\" title=\"django.test.SimpleTestCase.assertXMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertXMLEqual()</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertXMLNotEqual\" title=\"django.test.SimpleTestCase.assertXMLNotEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertXMLNotEqual()</span></code></a> new assertions allow\nyou to test equality for XML content at a semantic level, without caring for\nsyntax differences (spaces, attribute order, etc.).</p>\n</li>\n<li><p class=\"first\">RemoteUserMiddleware now forces logout when the REMOTE_USER header\ndisappears during the same browser session.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../topics/http/sessions/#cached-sessions-backend\"><span class=\"std std-ref\">cache-based session backend</span></a> can store\nsession data in a non-default cache.</p>\n</li>\n<li><p class=\"first\">Multi-column indexes can now be created on models. Read the\n<a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.index_together\" title=\"django.db.models.Options.index_together\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">index_together</span></code></a> documentation for more\ninformation.</p>\n</li>\n<li><p class=\"first\">During Django\u2019s logging configuration verbose Deprecation warnings are\nenabled and warnings are captured into the logging system. Logged warnings\nare routed through the <code class=\"docutils literal notranslate\"><span class=\"pre\">console</span></code> logging handler, which by default requires\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> to be True for output to be generated. The result is that\nDeprecationWarnings should be printed to the console in development\nenvironments the way they have been in Python versions &lt; 2.7.</p>\n</li>\n<li><p class=\"first\">The API for <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.message_user\" title=\"django.contrib.admin.ModelAdmin.message_user\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.ModelAdmin.message_user()</span></code></a> method has\nbeen modified to accept additional arguments adding capabilities similar to\n<a class=\"reference internal\" href=\"../../ref/contrib/messages/#django.contrib.messages.add_message\" title=\"django.contrib.messages.add_message\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.messages.add_message()</span></code></a>. This is useful for generating\nerror messages from admin actions.</p>\n</li>\n<li><p class=\"first\">The admin\u2019s list filters can now be customized per-request thanks to the new\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_list_filter\" title=\"django.contrib.admin.ModelAdmin.get_list_filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.ModelAdmin.get_list_filter()</span></code></a> method.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-5\">\n<span id=\"s-backwards-incompatible-1-5\"></span><span id=\"backwards-incompatible-changes-in-1-5\"></span><span id=\"backwards-incompatible-1-5\"></span><h2>Backwards incompatible changes in 1.5<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-5\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">In addition to the changes outlined in this section, be sure to review the\n<a class=\"reference internal\" href=\"../../internals/deprecation/#deprecation-removed-in-1-5\"><span class=\"std std-ref\">deprecation plan</span></a> for any features that\nhave been removed. If you haven\u2019t updated your code within the\ndeprecation timeline for a given feature, its removal may appear as a\nbackwards incompatible change.</p>\n</div>\n<div class=\"section\" id=\"s-allowed-hosts-required-in-production\">\n<span id=\"allowed-hosts-required-in-production\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code> required in production<a class=\"headerlink\" href=\"#allowed-hosts-required-in-production\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The new <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> setting validates the request\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code>\nheader and protects against host-poisoning attacks. This setting is now\nrequired whenever <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, or else\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.http.HttpRequest.get_host()</span></code></a> will raise\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.SuspiciousOperation\" title=\"django.core.exceptions.SuspiciousOperation\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SuspiciousOperation</span></code></a>. For more details see the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">full</span> <span class=\"pre\">documentation</span></code></a> for the new setting.</p>\n</div>\n<div class=\"section\" id=\"s-managers-on-abstract-models\">\n<span id=\"managers-on-abstract-models\"></span><h3>Managers on abstract models<a class=\"headerlink\" href=\"#managers-on-abstract-models\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Abstract models are able to define a custom manager, and that manager\n<a class=\"reference internal\" href=\"../../topics/db/managers/#custom-managers-and-inheritance\"><span class=\"std std-ref\">will be inherited by any concrete models extending the abstract model</span></a>. However, if you try to use the abstract\nmodel to call a method on the manager, an exception will now be raised.\nPreviously, the call would have been permitted, but would have failed as soon\nas any database operation was attempted (usually with a \u201ctable does not exist\u201d\nerror from the database).</p>\n<p>If you have functionality on a manager that you have been invoking using\nthe abstract class, you should migrate that logic to a Python\n<code class=\"docutils literal notranslate\"><span class=\"pre\">staticmethod</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">classmethod</span></code> on the abstract class.</p>\n</div>\n<div class=\"section\" id=\"s-context-in-year-archive-class-based-views\">\n<span id=\"context-in-year-archive-class-based-views\"></span><h3>Context in year archive class-based views<a class=\"headerlink\" href=\"#context-in-year-archive-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For consistency with the other date-based generic views,\n<a class=\"reference internal\" href=\"../../ref/class-based-views/generic-date-based/#django.views.generic.dates.YearArchiveView\" title=\"django.views.generic.dates.YearArchiveView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">YearArchiveView</span></code></a> now passes <code class=\"docutils literal notranslate\"><span class=\"pre\">year</span></code> in\nthe context as a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.date</span></code></a> rather than a string.  If you are\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">year</span> <span class=\"pre\">}}</span></code> in your templates, you must replace it with <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span>\n<span class=\"pre\">year|date:&quot;Y&quot;</span> <span class=\"pre\">}}</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">next_year</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">previous_year</span></code> were also added in the context. They are\ncalculated according to <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_empty</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_future</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-context-in-year-and-month-archive-class-based-views\">\n<span id=\"context-in-year-and-month-archive-class-based-views\"></span><h3>Context in year and month archive class-based views<a class=\"headerlink\" href=\"#context-in-year-and-month-archive-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/class-based-views/generic-date-based/#django.views.generic.dates.YearArchiveView\" title=\"django.views.generic.dates.YearArchiveView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">YearArchiveView</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/class-based-views/generic-date-based/#django.views.generic.dates.MonthArchiveView\" title=\"django.views.generic.dates.MonthArchiveView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MonthArchiveView</span></code></a> were documented to\nprovide a <code class=\"docutils literal notranslate\"><span class=\"pre\">date_list</span></code> sorted in ascending order in the context, like their\nfunction-based predecessors, but it actually was in descending order. In 1.5,\nthe documented order was restored. You may want to add (or remove) the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reversed</span></code> keyword when you\u2019re iterating on <code class=\"docutils literal notranslate\"><span class=\"pre\">date_list</span></code> in a template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">date</span> <span class=\"k\">in</span> <span class=\"nv\">date_list</span> <span class=\"k\">reversed</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"../../ref/class-based-views/generic-date-based/#django.views.generic.dates.ArchiveIndexView\" title=\"django.views.generic.dates.ArchiveIndexView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArchiveIndexView</span></code></a> still provides a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">date_list</span></code> in descending order.</p>\n</div>\n<div class=\"section\" id=\"s-context-in-templateview\">\n<span id=\"context-in-templateview\"></span><h3>Context in TemplateView<a class=\"headerlink\" href=\"#context-in-templateview\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For consistency with the design of the other generic views,\n<a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> no longer passes a <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>\ndictionary into the context, instead passing the variables from the URLconf\ndirectly into the context.</p>\n</div>\n<div class=\"section\" id=\"s-non-form-data-in-http-requests\">\n<span id=\"non-form-data-in-http-requests\"></span><h3>Non-form data in HTTP requests<a class=\"headerlink\" href=\"#non-form-data-in-http-requests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.POST\" title=\"django.http.HttpRequest.POST\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">request.POST</span></code></a> will no longer include data\nposted via HTTP requests with non form-specific content-types in the header.\nIn prior versions, data posted with content-types other than\n<em class=\"mimetype\">multipart/form-data</em> or\n<em class=\"mimetype\">application/x-www-form-urlencoded</em> would still end up represented in\nthe <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.POST\" title=\"django.http.HttpRequest.POST\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">request.POST</span></code></a> attribute. Developers\nwishing to access the raw POST data for these cases, should use the\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.body\" title=\"django.http.HttpRequest.body\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">request.body</span></code></a> attribute instead.</p>\n</div>\n<div class=\"section\" id=\"s-request-finished-signal\">\n<span id=\"request-finished-signal\"></span><h3><a class=\"reference internal\" href=\"../../ref/signals/#django.core.signals.request_finished\" title=\"django.core.signals.request_finished\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">request_finished</span></code></a> signal<a class=\"headerlink\" href=\"#request-finished-signal\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django used to send the <a class=\"reference internal\" href=\"../../ref/signals/#django.core.signals.request_finished\" title=\"django.core.signals.request_finished\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">request_finished</span></code></a> signal\nas soon as the view function returned a response. This interacted badly with\n<a class=\"reference internal\" href=\"../../ref/request-response/#httpresponse-streaming\"><span class=\"std std-ref\">streaming responses</span></a> that delay content\ngeneration.</p>\n<p>This signal is now sent after the content is fully consumed by the WSGI\ngateway. This might be backwards incompatible if you rely on the signal being\nfired before sending the response content to the client. If you do, you should\nconsider using <a class=\"reference internal\" href=\"../../topics/http/middleware/\"><span class=\"doc\">middleware</span></a> instead.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Some WSGI servers and middleware do not always call <code class=\"docutils literal notranslate\"><span class=\"pre\">close</span></code> on the\nresponse object after handling a request, most notably uWSGI prior to 1.2.6\nand Sentry\u2019s error reporting middleware up to 2.0.7. In those cases the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request_finished</span></code> signal isn\u2019t sent at all. This can result in idle\nconnections to database and memcache servers.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-options-put-and-delete-requests-in-the-test-client\">\n<span id=\"options-put-and-delete-requests-in-the-test-client\"></span><h3>OPTIONS, PUT and DELETE requests in the test client<a class=\"headerlink\" href=\"#options-put-and-delete-requests-in-the-test-client\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Unlike GET and POST, these HTTP methods aren\u2019t implemented by web browsers.\nRather, they\u2019re used in APIs, which transfer data in various formats such as\nJSON or XML. Since such requests may contain arbitrary data, Django doesn\u2019t\nattempt to decode their body.</p>\n<p>However, the test client used to build a query string for OPTIONS and DELETE\nrequests like for GET, and a request body for PUT requests like for POST. This\nencoding was arbitrary and inconsistent with Django\u2019s behavior when it\nreceives the requests, so it was removed in Django 1.5.</p>\n<p>If you were using the <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> parameter in an OPTIONS or a DELETE request,\nyou must convert it to a query string and append it to the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> parameter.</p>\n<p>If you were using the <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> parameter in a PUT request without a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>, you must encode your data before passing it to the test\nclient and set the <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> argument.</p>\n</div>\n<div class=\"section\" id=\"s-system-version-of-simplejson-no-longer-used\">\n<span id=\"s-simplejson-incompatibilities\"></span><span id=\"system-version-of-simplejson-no-longer-used\"></span><span id=\"simplejson-incompatibilities\"></span><h3>System version of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> no longer used<a class=\"headerlink\" href=\"#system-version-of-simplejson-no-longer-used\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"#simplejson-deprecation\"><span class=\"std std-ref\">As explained below</span></a>, Django 1.5 deprecates\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.simplejson</span></code> in favor of Python 2.6\u2019s built-in <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a>\nmodule. In theory, this change is harmless. Unfortunately, because of\nincompatibilities between versions of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code>, it may trigger errors\nin some circumstances.</p>\n<p>JSON-related features in Django 1.4 always used <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.simplejson</span></code>.\nThis module was actually:</p>\n<ul class=\"simple\">\n<li>A system version of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code>, if one was available (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span>\n<span class=\"pre\">simplejson</span></code> works), if it was more recent than Django\u2019s built-in copy or it\nhad the C speedups, or</li>\n<li>The <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> module from the standard library, if it was available (i.e.\nPython 2.6 or greater), or</li>\n<li>A built-in copy of version 2.0.7 of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code>.</li>\n</ul>\n<p>In Django 1.5, those features use Python\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> module, which is based\non version 2.0.9 of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code>.</p>\n<p>There are no known incompatibilities between Django\u2019s copy of version 2.0.7 and\nPython\u2019s copy of version 2.0.9. However, there are some incompatibilities\nbetween other versions of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code>:</p>\n<ul class=\"simple\">\n<li>While the <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> API is documented as always returning Unicode\nstrings, the optional C implementation can return a bytestring. This was\nfixed in Python 2.7.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson.JSONEncoder</span></code> gained a <code class=\"docutils literal notranslate\"><span class=\"pre\">namedtuple_as_object</span></code> keyword\nargument in version 2.2.</li>\n</ul>\n<p>More information on these incompatibilities is available in\n<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/18023#comment:10\">ticket #18023</a>.</p>\n<p>The net result is that, if you have installed <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> and your code\nuses Django\u2019s serialization internals directly \u2013 for instance\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.serializers.json.DjangoJSONEncoder</span></code>, the switch from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> to <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> could break your code. (In general, changes to\ninternals aren\u2019t documented; we\u2019re making an exception here.)</p>\n<p>At this point, the maintainers of Django believe that using <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> from\nthe standard library offers the strongest guarantee of backwards-compatibility.\nThey recommend to use it from now on.</p>\n</div>\n<div class=\"section\" id=\"s-string-types-of-hasher-method-parameters\">\n<span id=\"string-types-of-hasher-method-parameters\"></span><h3>String types of hasher method parameters<a class=\"headerlink\" href=\"#string-types-of-hasher-method-parameters\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you have written a <a class=\"reference internal\" href=\"../../topics/auth/passwords/#auth-password-storage\"><span class=\"std std-ref\">custom password hasher</span></a>,\nyour <code class=\"docutils literal notranslate\"><span class=\"pre\">encode()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">verify()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">safe_summary()</span></code> methods should accept\nUnicode parameters (<code class=\"docutils literal notranslate\"><span class=\"pre\">password</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">salt</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">encoded</span></code>). If any of the\nhashing methods need bytestrings, you can use the\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.encoding.force_bytes\" title=\"django.utils.encoding.force_bytes\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">force_bytes()</span></code></a> utility to encode the strings.</p>\n</div>\n<div class=\"section\" id=\"s-validation-of-previous-page-number-and-next-page-number\">\n<span id=\"validation-of-previous-page-number-and-next-page-number\"></span><h3>Validation of previous_page_number and next_page_number<a class=\"headerlink\" href=\"#validation-of-previous-page-number-and-next-page-number\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When using <a class=\"reference internal\" href=\"../../topics/pagination/\"><span class=\"doc\">object pagination</span></a>,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">previous_page_number()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">next_page_number()</span></code> methods of the\n<a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.Page\" title=\"django.core.paginator.Page\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Page</span></code></a> object did not check if the returned\nnumber was inside the existing page range.\nIt does check it now and raises an <a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.InvalidPage\" title=\"django.core.paginator.InvalidPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">InvalidPage</span></code></a>\nexception when the number is either too low or too high.</p>\n</div>\n<div class=\"section\" id=\"s-behavior-of-autocommit-database-option-on-postgresql-changed\">\n<span id=\"behavior-of-autocommit-database-option-on-postgresql-changed\"></span><h3>Behavior of autocommit database option on PostgreSQL changed<a class=\"headerlink\" href=\"#behavior-of-autocommit-database-option-on-postgresql-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>PostgreSQL\u2019s autocommit option didn\u2019t work as advertised previously. It did\nwork for single transaction block, but after the first block was left the\nautocommit behavior was never restored. This bug is now fixed in 1.5. While\nthis is only a bug fix, it is worth checking your applications behavior if\nyou are using PostgreSQL together with the autocommit option.</p>\n</div>\n<div class=\"section\" id=\"s-session-not-saved-on-500-responses\">\n<span id=\"session-not-saved-on-500-responses\"></span><h3>Session not saved on 500 responses<a class=\"headerlink\" href=\"#session-not-saved-on-500-responses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s session middleware will skip saving the session data if the\nresponse\u2019s status code is 500.</p>\n</div>\n<div class=\"section\" id=\"s-email-checks-on-failed-admin-login\">\n<span id=\"email-checks-on-failed-admin-login\"></span><h3>Email checks on failed admin login<a class=\"headerlink\" href=\"#email-checks-on-failed-admin-login\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.5, if you attempted to log into the admin interface and\nmistakenly used your email address instead of your username, the admin\ninterface would provide a warning advising that your email address was\nnot your username. In Django 1.5, the introduction of\n<a class=\"reference internal\" href=\"../../topics/auth/customizing/#auth-custom-user\"><span class=\"std std-ref\">custom user models</span></a> has required the removal of this\nwarning. This doesn\u2019t change the login behavior of the admin site; it only\naffects the warning message that is displayed under one particular mode of\nlogin failure.</p>\n</div>\n<div class=\"section\" id=\"s-changes-in-tests-execution\">\n<span id=\"changes-in-tests-execution\"></span><h3>Changes in tests execution<a class=\"headerlink\" href=\"#changes-in-tests-execution\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some changes have been introduced in the execution of tests that might be\nbackward-incompatible for some testing setups:</p>\n<div class=\"section\" id=\"s-database-flushing-in-django-test-transactiontestcase\">\n<span id=\"database-flushing-in-django-test-transactiontestcase\"></span><h4>Database flushing in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.TransactionTestCase</span></code><a class=\"headerlink\" href=\"#database-flushing-in-django-test-transactiontestcase\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Previously, the test database was truncated <em>before</em> each test run in a\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a>.</p>\n<p>In order to be able to run unit tests in any order and to make sure they are\nalways isolated from each other, <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> will\nnow reset the database <em>after</em> each test run instead.</p>\n</div>\n<div class=\"section\" id=\"s-no-more-implicit-db-sequences-reset\">\n<span id=\"no-more-implicit-db-sequences-reset\"></span><h4>No more implicit DB sequences reset<a class=\"headerlink\" href=\"#no-more-implicit-db-sequences-reset\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> tests used to reset primary key\nsequences automatically together with the database flushing actions described\nabove.</p>\n<p>This has been changed so no sequences are implicitly reset. This can cause\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> tests that depend on hard-coded\nprimary key values to break.</p>\n<p>The new <a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.TransactionTestCase.reset_sequences\" title=\"django.test.TransactionTestCase.reset_sequences\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">reset_sequences</span></code></a> attribute can\nbe used to force the old behavior for <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a>\nthat might need it.</p>\n</div>\n<div class=\"section\" id=\"s-ordering-of-tests\">\n<span id=\"ordering-of-tests\"></span><h4>Ordering of tests<a class=\"headerlink\" href=\"#ordering-of-tests\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In order to make sure all <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> code starts with a clean database,\ntests are now executed in the following order:</p>\n<ul class=\"simple\">\n<li>First, all unit tests (including <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a>,\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a>, <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a>) are run with no particular ordering\nguaranteed nor enforced among them.</li>\n<li>Then any other tests (e.g. doctests) that may alter the database without\nrestoring it to its original state are run.</li>\n</ul>\n<p>This should not cause any problems unless you have existing doctests which\nassume a <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> executed earlier left some\ndatabase state behind or unit tests that rely on some form of state being\npreserved after the execution of other tests. Such tests are already very\nfragile, and must now be changed to be able to run independently.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-cleaned-data-dictionary-kept-for-invalid-forms\">\n<span id=\"cleaned-data-dictionary-kept-for-invalid-forms\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">cleaned_data</span></code> dictionary kept for invalid forms<a class=\"headerlink\" href=\"#cleaned-data-dictionary-kept-for-invalid-forms\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.cleaned_data\" title=\"django.forms.Form.cleaned_data\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">cleaned_data</span></code></a> dictionary is now always present\nafter form validation. When the form doesn\u2019t validate, it contains only the\nfields that passed validation. You should test the success of the validation\nwith the <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.is_valid\" title=\"django.forms.Form.is_valid\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code></a> method and not with the\npresence or absence of the <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.cleaned_data\" title=\"django.forms.Form.cleaned_data\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">cleaned_data</span></code></a> attribute\non the form.</p>\n</div>\n<div class=\"section\" id=\"s-behavior-of-syncdb-with-multiple-databases\">\n<span id=\"behavior-of-syncdb-with-multiple-databases\"></span><h3>Behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> with multiple databases<a class=\"headerlink\" href=\"#behavior-of-syncdb-with-multiple-databases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> now queries the database routers to determine if content\ntypes (when <a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes\" title=\"django.contrib.contenttypes: Provides generic interface to installed models.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contenttypes</span></code></a> is enabled) and permissions\n(when <a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">auth</span></code></a> is enabled) should be created in the target\ndatabase. Previously, it created them in the default database, even when\nanother database was specified with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--database</span></code> option.</p>\n<p>If you use <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> on multiple databases, you should ensure that\nyour routers allow synchronizing content types and permissions to only one of\nthem. See the docs on the <a class=\"reference internal\" href=\"../../topics/db/multi-db/#contrib-app-multiple-databases\"><span class=\"std std-ref\">behavior of contrib apps with multiple\ndatabases</span></a> for more information.</p>\n</div>\n<div class=\"section\" id=\"s-xml-deserializer-will-not-parse-documents-with-a-dtd\">\n<span id=\"xml-deserializer-will-not-parse-documents-with-a-dtd\"></span><h3>XML deserializer will not parse documents with a DTD<a class=\"headerlink\" href=\"#xml-deserializer-will-not-parse-documents-with-a-dtd\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In order to prevent exposure to denial-of-service attacks related to external\nentity references and entity expansion, the XML model deserializer now refuses\nto parse XML documents containing a DTD (DOCTYPE definition). Since the XML\nserializer does not output a DTD, this will not impact typical usage, only\ncases where custom-created XML documents are passed to Django\u2019s model\ndeserializer.</p>\n</div>\n<div class=\"section\" id=\"s-formsets-default-max-num\">\n<span id=\"formsets-default-max-num\"></span><h3>Formsets default <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code><a class=\"headerlink\" href=\"#formsets-default-max-num\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A (default) value of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> argument to a formset factory\nno longer defaults to allowing any number of forms in the formset. Instead, in\norder to prevent memory-exhaustion attacks, it now defaults to a limit of 1000\nforms. This limit can be raised by explicitly setting a higher value for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-miscellaneous\">\n<span id=\"miscellaneous\"></span><h3>Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ModelMultipleChoiceField\" title=\"django.forms.ModelMultipleChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.forms.ModelMultipleChoiceField</span></code></a> now returns an empty\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> as the empty value instead of an empty list.</li>\n<li><a class=\"reference internal\" href=\"../../ref/utils/#django.utils.http.int_to_base36\" title=\"django.utils.http.int_to_base36\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">int_to_base36()</span></code></a> properly raises a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#TypeError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TypeError</span></code></a> instead of <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> for non-integer inputs.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">slugify</span></code> template filter is now available as a standard Python\nfunction at <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.text.slugify\" title=\"django.utils.text.slugify\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.text.slugify()</span></code></a>. Similarly, <code class=\"docutils literal notranslate\"><span class=\"pre\">remove_tags</span></code> is\navailable at <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.remove_tags()</span></code>.</li>\n<li>Uploaded files are no longer created as executable by default. If you need\nthem to be executable change <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FILE_UPLOAD_PERMISSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FILE_UPLOAD_PERMISSIONS</span></code></a> to your\nneeds. The new default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">0o666</span></code> (octal) and the current umask value\nis first masked out.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> supported bitwise operators by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>. These operators are now available using <code class=\"docutils literal notranslate\"><span class=\"pre\">.bitand()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.bitor()</span></code> instead. The removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code> was done to be\nconsistent with <a class=\"reference internal\" href=\"../../topics/db/queries/#complex-lookups-with-q\"><span class=\"std std-ref\">Q() expressions</span></a> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> combining where the operators are used as boolean AND and OR\noperators.</li>\n<li>In a <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> call, when <a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a>\ncontained lookups spanning multi-valued relations, they didn\u2019t always reuse\nthe same relations as other lookups along the same chain. This was changed,\nand now F() expressions will always use the same relations as other lookups\nwithin the same <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> call.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> template tag is no longer enclosed in a div. If you need\nHTML validation against pre-HTML5 Strict DTDs, you should add a div around it\nin your pages.</li>\n<li>The template tags library <code class=\"docutils literal notranslate\"><span class=\"pre\">adminmedia</span></code>, which only contained the\ndeprecated template tag <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">admin_media_prefix</span> <span class=\"pre\">%}</span></code>, was removed.\nAttempting to load it with <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">adminmedia</span> <span class=\"pre\">%}</span></code> will fail. If your\ntemplates still contain that line you must remove it.</li>\n<li>Because of an implementation oversight, it was possible to use\n<a class=\"reference internal\" href=\"../../ref/contrib/redirects/\"><span class=\"doc\">django.contrib.redirects</span></a> without enabling\n<a class=\"reference internal\" href=\"../../ref/contrib/sites/\"><span class=\"doc\">django.contrib.sites</span></a>. This isn\u2019t allowed any\nlonger. If you\u2019re using <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.redirects</span></code>, make sure\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> contains <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField.label_tag\" title=\"django.forms.BoundField.label_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">BoundField.label_tag</span></code></a> now\nescapes its <code class=\"docutils literal notranslate\"><span class=\"pre\">contents</span></code> argument. To avoid the HTML escaping, use\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.mark_safe\" title=\"django.utils.safestring.mark_safe\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.safestring.mark_safe()</span></code></a> on the argument before passing it.</li>\n<li>Accessing reverse one-to-one relations fetched via\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> now raises\n<a class=\"reference internal\" href=\"../../ref/models/class/#django.db.models.Model.DoesNotExist\" title=\"django.db.models.Model.DoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code></a> instead of returning <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-5\">\n<span id=\"s-deprecated-features-1-5\"></span><span id=\"features-deprecated-in-1-5\"></span><span id=\"deprecated-features-1-5\"></span><h2>Features deprecated in 1.5<a class=\"headerlink\" href=\"#features-deprecated-in-1-5\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-django-contrib-localflavor\">\n<span id=\"django-contrib-localflavor\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.localflavor</span></code><a class=\"headerlink\" href=\"#django-contrib-localflavor\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The localflavor contrib app has been split into separate packages.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.localflavor</span></code> itself will be removed in Django 1.6,\nafter an accelerated deprecation.</p>\n<p>The new packages are available on GitHub. The core team cannot\nefficiently maintain these packages in the long term \u2014 it spans just a\ndozen countries at this time; similar to translations, maintenance\nwill be handed over to interested members of the community.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-markup\">\n<span id=\"django-contrib-markup\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.markup</span></code><a class=\"headerlink\" href=\"#django-contrib-markup\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The markup contrib module has been deprecated and will follow an accelerated\ndeprecation schedule. Direct use of Python markup libraries or 3rd party tag\nlibraries is preferred to Django maintaining this functionality in the\nframework.</p>\n</div>\n<div class=\"section\" id=\"s-auth-profile-module\">\n<span id=\"auth-profile-module\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_PROFILE_MODULE</span></code><a class=\"headerlink\" href=\"#auth-profile-module\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>With the introduction of <a class=\"reference internal\" href=\"../../topics/auth/customizing/#auth-custom-user\"><span class=\"std std-ref\">custom user models</span></a>, there is\nno longer any need for a built-in mechanism to store user profile data.</p>\n<p>You can still define user profiles models that have a one-to-one relation with\nthe User model - in fact, for many applications needing to associate data with\na User account, this will be an appropriate design pattern to follow. However,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_PROFILE_MODULE</span></code> setting, and the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.User.get_profile()</span></code> method for accessing\nthe user profile model, should not be used any longer.</p>\n</div>\n<div class=\"section\" id=\"s-streaming-behavior-of-httpresponse\">\n<span id=\"streaming-behavior-of-httpresponse\"></span><h3>Streaming behavior of <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a><a class=\"headerlink\" href=\"#streaming-behavior-of-httpresponse\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.5 deprecates the ability to stream a response by passing an iterator\nto <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>. If you rely on this behavior, switch to\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a>. See\n<a class=\"reference internal\" href=\"#explicit-streaming-responses\"><span class=\"std std-ref\">Explicit support for streaming responses</span></a> above.</p>\n<p>In Django 1.7 and above, the iterator will be consumed immediately by\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-simplejson\">\n<span id=\"s-simplejson-deprecation\"></span><span id=\"django-utils-simplejson\"></span><span id=\"simplejson-deprecation\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.simplejson</span></code><a class=\"headerlink\" href=\"#django-utils-simplejson\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Since Django 1.5 drops support for Python 2.5, we can now rely on the\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> module being available in Python\u2019s standard library, so we\u2019ve\nremoved our own copy of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code>. You should now import <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a>\ninstead of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.simplejson</span></code>.</p>\n<p>Unfortunately, this change might have unwanted side-effects, because of\nincompatibilities between versions of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> \u2013 see the\n<a class=\"reference internal\" href=\"#simplejson-incompatibilities\"><span class=\"std std-ref\">backwards-incompatible changes</span></a> section.\nIf you rely on features added to <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> after it became Python\u2019s\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a>, you should import <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> explicitly.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-encoding-strandunicode\">\n<span id=\"django-utils-encoding-strandunicode\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.encoding.StrAndUnicode</span></code><a class=\"headerlink\" href=\"#django-utils-encoding-strandunicode\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.encoding.StrAndUnicode</span></code> mix-in has been deprecated.\nDefine a <code class=\"docutils literal notranslate\"><span class=\"pre\">__str__</span></code> method and apply the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.encoding.python_2_unicode_compatible</span></code> decorator instead.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-itercompat-product\">\n<span id=\"django-utils-itercompat-product\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.itercompat.product</span></code><a class=\"headerlink\" href=\"#django-utils-itercompat-product\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.itercompat.product</span></code> function has been deprecated. Use\nthe built-in <a class=\"reference external\" href=\"https://docs.python.org/3/library/itertools.html#itertools.product\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">itertools.product()</span></code></a> instead.</p>\n</div>\n<div class=\"section\" id=\"s-cleanup-management-command\">\n<span id=\"cleanup-management-command\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> management command<a class=\"headerlink\" href=\"#cleanup-management-command\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> management command has been deprecated and replaced by\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-clearsessions\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">clearsessions</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-daily-cleanup-py-script\">\n<span id=\"daily-cleanup-py-script\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">daily_cleanup.py</span></code> script<a class=\"headerlink\" href=\"#daily-cleanup-py-script\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The undocumented <code class=\"docutils literal notranslate\"><span class=\"pre\">daily_cleanup.py</span></code> script has been deprecated. Use the\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-clearsessions\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">clearsessions</span></code></a> management command instead.</p>\n</div>\n<div class=\"section\" id=\"s-depth-keyword-argument-in-select-related\">\n<span id=\"depth-keyword-argument-in-select-related\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">depth</span></code> keyword argument in <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code><a class=\"headerlink\" href=\"#depth-keyword-argument-in-select-related\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">depth</span></code> keyword argument in\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> has been deprecated.\nYou should use field names instead.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.4.22", "Django 1.4.22 release notes", "N", "next"], ["releases/1.5.1", "Django 1.5.1 release notes", "P", "previous"]], "sourcename": "releases/1.5.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.5 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a><ul>\n<li><a class=\"reference internal\" href=\"#python-3-support\">Python 3 support</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-5\">What\u2019s new in Django 1.5</a><ul>\n<li><a class=\"reference internal\" href=\"#configurable-user-model\">Configurable User model</a></li>\n<li><a class=\"reference internal\" href=\"#support-for-saving-a-subset-of-model-s-fields\">Support for saving a subset of model\u2019s fields</a></li>\n<li><a class=\"reference internal\" href=\"#caching-of-related-model-instances\">Caching of related model instances</a></li>\n<li><a class=\"reference internal\" href=\"#explicit-support-for-streaming-responses\">Explicit support for streaming responses</a></li>\n<li><a class=\"reference internal\" href=\"#verbatim-template-tag\"><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">verbatim</span> <span class=\"pre\">%}</span></code> template tag</a></li>\n<li><a class=\"reference internal\" href=\"#retrieval-of-contenttype-instances-associated-with-proxy-models\">Retrieval of <code class=\"docutils literal notranslate\"><span class=\"pre\">ContentType</span></code> instances associated with proxy models</a></li>\n<li><a class=\"reference internal\" href=\"#new-view-variable-in-class-based-views-context\">New <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> variable in class-based views context</a></li>\n<li><a class=\"reference internal\" href=\"#geodjango\">GeoDjango</a></li>\n<li><a class=\"reference internal\" href=\"#new-tutorials\">New tutorials</a></li>\n<li><a class=\"reference internal\" href=\"#minor-features\">Minor features</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-5\">Backwards incompatible changes in 1.5</a><ul>\n<li><a class=\"reference internal\" href=\"#allowed-hosts-required-in-production\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code> required in production</a></li>\n<li><a class=\"reference internal\" href=\"#managers-on-abstract-models\">Managers on abstract models</a></li>\n<li><a class=\"reference internal\" href=\"#context-in-year-archive-class-based-views\">Context in year archive class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#context-in-year-and-month-archive-class-based-views\">Context in year and month archive class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#context-in-templateview\">Context in TemplateView</a></li>\n<li><a class=\"reference internal\" href=\"#non-form-data-in-http-requests\">Non-form data in HTTP requests</a></li>\n<li><a class=\"reference internal\" href=\"#request-finished-signal\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">request_finished</span></code> signal</a></li>\n<li><a class=\"reference internal\" href=\"#options-put-and-delete-requests-in-the-test-client\">OPTIONS, PUT and DELETE requests in the test client</a></li>\n<li><a class=\"reference internal\" href=\"#system-version-of-simplejson-no-longer-used\">System version of <code class=\"docutils literal notranslate\"><span class=\"pre\">simplejson</span></code> no longer used</a></li>\n<li><a class=\"reference internal\" href=\"#string-types-of-hasher-method-parameters\">String types of hasher method parameters</a></li>\n<li><a class=\"reference internal\" href=\"#validation-of-previous-page-number-and-next-page-number\">Validation of previous_page_number and next_page_number</a></li>\n<li><a class=\"reference internal\" href=\"#behavior-of-autocommit-database-option-on-postgresql-changed\">Behavior of autocommit database option on PostgreSQL changed</a></li>\n<li><a class=\"reference internal\" href=\"#session-not-saved-on-500-responses\">Session not saved on 500 responses</a></li>\n<li><a class=\"reference internal\" href=\"#email-checks-on-failed-admin-login\">Email checks on failed admin login</a></li>\n<li><a class=\"reference internal\" href=\"#changes-in-tests-execution\">Changes in tests execution</a><ul>\n<li><a class=\"reference internal\" href=\"#database-flushing-in-django-test-transactiontestcase\">Database flushing in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.TransactionTestCase</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#no-more-implicit-db-sequences-reset\">No more implicit DB sequences reset</a></li>\n<li><a class=\"reference internal\" href=\"#ordering-of-tests\">Ordering of tests</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cleaned-data-dictionary-kept-for-invalid-forms\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cleaned_data</span></code> dictionary kept for invalid forms</a></li>\n<li><a class=\"reference internal\" href=\"#behavior-of-syncdb-with-multiple-databases\">Behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> with multiple databases</a></li>\n<li><a class=\"reference internal\" href=\"#xml-deserializer-will-not-parse-documents-with-a-dtd\">XML deserializer will not parse documents with a DTD</a></li>\n<li><a class=\"reference internal\" href=\"#formsets-default-max-num\">Formsets default <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#miscellaneous\">Miscellaneous</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-5\">Features deprecated in 1.5</a><ul>\n<li><a class=\"reference internal\" href=\"#django-contrib-localflavor\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.localflavor</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-markup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.markup</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#auth-profile-module\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_PROFILE_MODULE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#streaming-behavior-of-httpresponse\">Streaming behavior of <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-simplejson\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.simplejson</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-encoding-strandunicode\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.encoding.StrAndUnicode</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-itercompat-product\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.itercompat.product</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cleanup-management-command\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> management command</a></li>\n<li><a class=\"reference internal\" href=\"#daily-cleanup-py-script\"><code class=\"docutils literal notranslate\"><span class=\"pre\">daily_cleanup.py</span></code> script</a></li>\n<li><a class=\"reference internal\" href=\"#depth-keyword-argument-in-select-related\"><code class=\"docutils literal notranslate\"><span class=\"pre\">depth</span></code> keyword argument in <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.5", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
