{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.6.1/", "title": "Django 1.6.1 release notes"}, "next": {"link": "../1.5.12/", "title": "Django 1.5.12 release notes"}, "title": "Django 1.6 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-6-release-notes\">\n<span id=\"django-1-6-release-notes\"></span><h1>Django 1.6 release notes<a class=\"headerlink\" href=\"#django-1-6-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Dedicated to Malcolm Tredinnick</p>\n<p>On March 17, 2013, the Django project and the free software community lost\na very dear friend and developer.</p>\n<p>Malcolm was a long-time contributor to Django, a model community member, a\nbrilliant mind, and a friend. His contributions to Django \u2014 and to many other\nopen source projects \u2014 are nearly impossible to enumerate. Many on the core\nDjango team had their first patches reviewed by him; his mentorship enriched\nus. His consideration, patience, and dedication will always be an inspiration\nto us.</p>\n<p>This release of Django is for Malcolm.</p>\n<p class=\"last\">\u2013 The Django Developers</p>\n</div>\n<p><em>November 6, 2013</em></p>\n<p>Welcome to Django 1.6!</p>\n<p>These release notes cover the <a class=\"reference internal\" href=\"#whats-new-1-6\"><span class=\"std std-ref\">new features</span></a>, as well as\nsome <a class=\"reference internal\" href=\"#backwards-incompatible-1-6\"><span class=\"std std-ref\">backwards incompatible changes</span></a> you\u2019ll\nwant to be aware of when upgrading from Django 1.5 or older versions. We\u2019ve\nalso dropped some features, which are detailed in <a class=\"reference internal\" href=\"../../internals/deprecation/#deprecation-removed-in-1-6\"><span class=\"std std-ref\">our deprecation plan</span></a>, and we\u2019ve <a class=\"reference internal\" href=\"#deprecated-features-1-6\"><span class=\"std std-ref\">begun the deprecation process\nfor some features</span></a>.</p>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.6, like Django 1.5, requires Python 2.6.5 or above. Python 3 is also\nofficially supported. We <strong>highly recommend</strong> the latest minor release for each\nsupported Python series (2.6.X, 2.7.X, 3.2.X, and 3.3.X).</p>\n<p>Django 1.6 will be the final release series to support Python 2.6; beginning\nwith Django 1.7, the minimum supported Python version will be 2.7.</p>\n<p>Python 3.4 is not supported, but support will be added in Django 1.7.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-6\">\n<span id=\"s-whats-new-1-6\"></span><span id=\"what-s-new-in-django-1-6\"></span><span id=\"whats-new-1-6\"></span><h2>What\u2019s new in Django 1.6<a class=\"headerlink\" href=\"#what-s-new-in-django-1-6\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-simplified-default-project-and-app-templates\">\n<span id=\"simplified-default-project-and-app-templates\"></span><h3>Simplified default project and app templates<a class=\"headerlink\" href=\"#simplified-default-project-and-app-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The default templates used by <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-startproject\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startproject</span></code></a> and <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-startapp\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startapp</span></code></a>\nhave been simplified and modernized. The <a class=\"reference internal\" href=\"../../ref/contrib/admin/\"><span class=\"doc\">admin</span></a> is now enabled by default in new projects; the\n<a class=\"reference internal\" href=\"../../ref/contrib/sites/\"><span class=\"doc\">sites</span></a> framework no longer is. <a class=\"reference internal\" href=\"../../ref/clickjacking/#clickjacking-prevention\"><span class=\"std std-ref\">clickjacking\nprevention</span></a> is now on and the database defaults to\nSQLite.</p>\n<p>If the default templates don\u2019t suit your tastes, you can use <a class=\"reference internal\" href=\"../../ref/django-admin/#custom-app-and-project-templates\"><span class=\"std std-ref\">custom\nproject and app templates</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-improved-transaction-management\">\n<span id=\"improved-transaction-management\"></span><h3>Improved transaction management<a class=\"headerlink\" href=\"#improved-transaction-management\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s transaction management was overhauled. Database-level autocommit is\nnow turned on by default. This makes transaction handling more explicit and\nshould improve performance. The existing APIs were deprecated, and new APIs\nwere introduced, as described in the <a class=\"reference internal\" href=\"../../topics/db/transactions/\"><span class=\"doc\">transaction management docs</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-persistent-database-connections\">\n<span id=\"persistent-database-connections\"></span><h3>Persistent database connections<a class=\"headerlink\" href=\"#persistent-database-connections\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now supports reusing the same database connection for several requests.\nThis avoids the overhead of reestablishing a connection at the beginning of\neach request. For backwards compatibility, this feature is disabled by\ndefault. See <a class=\"reference internal\" href=\"../../ref/databases/#persistent-database-connections\"><span class=\"std std-ref\">Persistent connections</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-discovery-of-tests-in-any-test-module\">\n<span id=\"discovery-of-tests-in-any-test-module\"></span><h3>Discovery of tests in any test module<a class=\"headerlink\" href=\"#discovery-of-tests-in-any-test-module\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.6 ships with a new test runner that allows more flexibility in the\nlocation of tests. The previous runner\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.simple.DjangoTestSuiteRunner</span></code>) found tests only in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code> modules of a Python package in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<p>The new runner (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.runner.DiscoverRunner</span></code>) uses the test discovery\nfeatures built into <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> (the version of <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code> in the\nPython 2.7+ standard library, and bundled with Django). With test discovery,\ntests can be located in any module whose name matches the pattern <code class=\"docutils literal notranslate\"><span class=\"pre\">test*.py</span></code>.</p>\n<p>In addition, the test labels provided to <code class=\"docutils literal notranslate\"><span class=\"pre\">./manage.py</span> <span class=\"pre\">test</span></code> to nominate\nspecific tests to run must now be full Python dotted paths (or directory\npaths), rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">applabel.TestCase.test_method_name</span></code> pseudo-paths. This\nallows running tests located anywhere in your codebase, rather than only in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>. For more details, see <a class=\"reference internal\" href=\"../../topics/testing/\"><span class=\"doc\">Testing in Django</span></a>.</p>\n<p>This change is backwards-incompatible; see the <a class=\"reference internal\" href=\"#new-test-runner\"><span class=\"std std-ref\">backwards-incompatibility\nnotes</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-time-zone-aware-aggregation\">\n<span id=\"time-zone-aware-aggregation\"></span><h3>Time zone aware aggregation<a class=\"headerlink\" href=\"#time-zone-aware-aggregation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The support for <a class=\"reference internal\" href=\"../../topics/i18n/timezones/\"><span class=\"doc\">time zones</span></a> introduced in\nDjango 1.4 didn\u2019t work well with <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.dates\" title=\"django.db.models.query.QuerySet.dates\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code></a>: aggregation was always performed in\nUTC. This limitation was lifted in Django 1.6. Use <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.datetimes\" title=\"django.db.models.query.QuerySet.datetimes\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code></a> to perform time zone aware\naggregation on a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-support-for-savepoints-in-sqlite\">\n<span id=\"support-for-savepoints-in-sqlite\"></span><h3>Support for savepoints in SQLite<a class=\"headerlink\" href=\"#support-for-savepoints-in-sqlite\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.6 adds support for savepoints in SQLite, with some <a class=\"reference internal\" href=\"../../topics/db/transactions/#savepoints-in-sqlite\"><span class=\"std std-ref\">limitations</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-binaryfield-model-field\">\n<span id=\"binaryfield-model-field\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BinaryField</span></code> model field<a class=\"headerlink\" href=\"#binaryfield-model-field\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A new <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.BinaryField\" title=\"django.db.models.BinaryField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.BinaryField</span></code></a> model field allows storage of raw\nbinary data in the database.</p>\n</div>\n<div class=\"section\" id=\"s-geodjango-form-widgets\">\n<span id=\"geodjango-form-widgets\"></span><h3>GeoDjango form widgets<a class=\"headerlink\" href=\"#geodjango-form-widgets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>GeoDjango now provides <a class=\"reference internal\" href=\"../../ref/contrib/gis/forms-api/\"><span class=\"doc\">form fields and widgets</span></a>\nfor its geo-specialized fields. They are OpenLayers-based by default, but they\ncan be customized to use any other JS framework.</p>\n</div>\n<div class=\"section\" id=\"s-check-management-command-added-for-verifying-compatibility\">\n<span id=\"check-management-command-added-for-verifying-compatibility\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">check</span></code> management command added for verifying compatibility<a class=\"headerlink\" href=\"#check-management-command-added-for-verifying-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-check\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">check</span></code></a> management command was added, enabling you to verify if your\ncurrent configuration (currently oriented at settings) is compatible with the\ncurrent version of Django.</p>\n</div>\n<div class=\"section\" id=\"s-model-save-algorithm-changed\">\n<span id=\"model-save-algorithm-changed\"></span><h3><a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a> algorithm changed<a class=\"headerlink\" href=\"#model-save-algorithm-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a> method now\ntries to directly <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> the database if the instance has a primary\nkey value. Previously <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> was performed to determine if <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code> were needed. The new algorithm needs only one query for\nupdating an existing row while the old algorithm needed two. See\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a> for more details.</p>\n<p>In some rare cases the database doesn\u2019t report that a matching row was\nfound when doing an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>. An example is the PostgreSQL <code class=\"docutils literal notranslate\"><span class=\"pre\">ON</span> <span class=\"pre\">UPDATE</span></code>\ntrigger which returns <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>. In such cases it is possible to set\n<a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.select_on_save\" title=\"django.db.models.Options.select_on_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.db.models.Options.select_on_save</span></code></a> flag to force saving to\nuse the old algorithm.</p>\n</div>\n<div class=\"section\" id=\"s-minor-features\">\n<span id=\"minor-features\"></span><h3>Minor features<a class=\"headerlink\" href=\"#minor-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Authentication backends can raise <code class=\"docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code> to immediately fail\nthe authentication chain.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpOnly</span></code> flag can be set on the CSRF cookie with\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code></a>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">assertQuerysetEqual()</span></code> now checks\nfor undefined order and raises <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> if undefined\norder is spotted. The order is seen as undefined if the given <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>\nisn\u2019t ordered and there is more than one ordered value to compare against.</li>\n<li>Added <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.earliest\" title=\"django.db.models.query.QuerySet.earliest\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">earliest()</span></code></a> for symmetry with\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.latest\" title=\"django.db.models.query.QuerySet.latest\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">latest()</span></code></a>.</li>\n<li>In addition to <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-year\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">year</span></code></a>, <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-month\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">month</span></code></a> and <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-day\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">day</span></code></a>, the ORM\nnow supports <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-hour\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">hour</span></code></a>, <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-minute\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">minute</span></code></a> and <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-second\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">second</span></code></a> lookups.</li>\n<li>Django now wraps all <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0249/\"><strong>PEP 249</strong></a> exceptions.</li>\n<li>The default widgets for <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.EmailField\" title=\"django.forms.EmailField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailField</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.URLField\" title=\"django.forms.URLField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">URLField</span></code></a>, <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.IntegerField\" title=\"django.forms.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.FloatField\" title=\"django.forms.FloatField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FloatField</span></code></a> and <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.DecimalField\" title=\"django.forms.DecimalField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DecimalField</span></code></a> use\nthe new type attributes available in HTML5 (<code class=\"docutils literal notranslate\"><span class=\"pre\">type='email'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">type='url'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">type='number'</span></code>). Note that due to erratic support of the <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code>\ninput type with localized numbers in current browsers, Django only uses it\nwhen numeric fields are not localized.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> argument for <a class=\"reference internal\" href=\"../../topics/i18n/translation/#lazy-plural-translations\"><span class=\"std std-ref\">lazy plural translations</span></a> can be provided at translation time rather than\nat definition time.</li>\n<li>For custom management commands: Verification of the presence of valid\nsettings in commands that ask for it by using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand.can_import_settings</span></code> internal\noption is now performed independently from handling of the locale that\nshould be active during the execution of the command. The latter can now be\ninfluenced by the new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand.leave_locale_alone</span></code> internal\noption. See <a class=\"reference internal\" href=\"../../howto/custom-management-commands/#management-commands-and-locales\"><span class=\"std std-ref\">Management commands and locales</span></a> for more details.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.DeletionMixin.success_url\" title=\"django.views.generic.edit.DeletionMixin.success_url\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">success_url</span></code></a> of\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.DeletionMixin\" title=\"django.views.generic.edit.DeletionMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeletionMixin</span></code></a> is now interpolated with\nits <code class=\"docutils literal notranslate\"><span class=\"pre\">object</span></code>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">__dict__</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponseRedirect\" title=\"django.http.HttpResponseRedirect\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseRedirect</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponsePermanentRedirect\" title=\"django.http.HttpResponsePermanentRedirect\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponsePermanentRedirect</span></code></a> now provide an <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code>\nattribute (equivalent to the URL the response will redirect to).</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">MemcachedCache</span></code> cache backend now uses the latest <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a>\nprotocol available.</li>\n<li>Added <a class=\"reference internal\" href=\"../../ref/contrib/messages/#django.contrib.messages.views.SuccessMessageMixin\" title=\"django.contrib.messages.views.SuccessMessageMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SuccessMessageMixin</span></code></a> which\nprovides a <code class=\"docutils literal notranslate\"><span class=\"pre\">success_message</span></code> attribute for\n<a class=\"reference internal\" href=\"../../ref/class-based-views/generic-editing/#django.views.generic.edit.FormView\" title=\"django.views.generic.edit.FormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormView</span></code></a> based classes.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey.db_constraint\" title=\"django.db.models.ForeignKey.db_constraint\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.db.models.ForeignKey.db_constraint</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ManyToManyField.db_constraint\" title=\"django.db.models.ManyToManyField.db_constraint\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.db.models.ManyToManyField.db_constraint</span></code></a> options.</li>\n<li>The jQuery library embedded in the admin has been upgraded to version 1.9.1.</li>\n<li>Syndication feeds (<a class=\"reference internal\" href=\"../../ref/contrib/syndication/#module-django.contrib.syndication\" title=\"django.contrib.syndication: A framework for generating syndication feeds, in RSS and Atom, quite easily.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication</span></code></a>) can now pass extra\ncontext through to feed templates using a new\n<a class=\"reference internal\" href=\"../../ref/contrib/syndication/#django.contrib.syndication.Feed.get_context_data\" title=\"django.contrib.syndication.Feed.get_context_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Feed.get_context_data()</span></code></a> callback.</li>\n<li>The admin list columns have a <code class=\"docutils literal notranslate\"><span class=\"pre\">column-&lt;field_name&gt;</span></code> class in the HTML\nso the columns header can be styled with CSS, e.g. to set a column width.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/databases/#database-isolation-level\"><span class=\"std std-ref\">isolation level</span></a> can be customized under\nPostgreSQL.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/i18n/translation/#std-templatetag-blocktrans\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">blocktrans</span></code></a> template tag now respects\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_STRING_IF_INVALID</span></code> for variables not present in the\ncontext, just like other template constructs.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleLazyObject</span></code>s will now present more helpful representations in shell\ndebugging situations.</li>\n<li>Generic <a class=\"reference internal\" href=\"../../ref/contrib/gis/model-api/#django.contrib.gis.db.models.GeometryField\" title=\"django.contrib.gis.db.models.GeometryField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeometryField</span></code></a> is now editable\nwith the OpenLayers widget in the admin.</li>\n<li>The documentation contains a <a class=\"reference internal\" href=\"../../howto/deployment/checklist/\"><span class=\"doc\">deployment checklist</span></a>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-diffsettings\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">diffsettings</span></code></a> command gained a <code class=\"docutils literal notranslate\"><span class=\"pre\">--all</span></code> option.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.fields.Field.__init__</span></code> now calls <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code>, allowing\nfield mixins to implement <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> methods that will reliably be\ncalled.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_max</span></code> parameter was added to <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseFormSet</span></code> and\n<a class=\"reference internal\" href=\"../../ref/forms/formsets/#django.forms.formsets.formset_factory\" title=\"django.forms.formsets.formset_factory\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">formset_factory()</span></code></a>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> and inline\nversions of the same.  The behavior of validation for formsets with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> was clarified.  The previously undocumented behavior that\nhardened formsets against memory exhaustion attacks was documented,\nand the undocumented limit of the higher of 1000 or <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> forms\nwas changed so it is always 1000 more than <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code>.</li>\n<li>Added <code class=\"docutils literal notranslate\"><span class=\"pre\">BCryptSHA256PasswordHasher</span></code> to resolve the password truncation issue\nwith bcrypt.</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/Pillow/\">Pillow</a> is now the preferred image manipulation library to use with\nDjango. <a class=\"reference external\" href=\"https://pypi.org/project/PIL/\">PIL</a> is pending deprecation (support to be removed in Django\n1.8). To upgrade, you should <strong>first</strong> uninstall PIL, <strong>then</strong> install\nPillow.</li>\n<li><a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a> accepts several new <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code>\noptions.<ul>\n<li>Fields included in the <code class=\"docutils literal notranslate\"><span class=\"pre\">localized_fields</span></code> list will be localized\n(by setting <code class=\"docutils literal notranslate\"><span class=\"pre\">localize</span></code> on the form field).</li>\n<li>The  <code class=\"docutils literal notranslate\"><span class=\"pre\">labels</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">help_texts</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">error_messages</span></code> options may be used\nto customize the default fields, see\n<a class=\"reference internal\" href=\"../../topics/forms/modelforms/#modelforms-overriding-default-fields\"><span class=\"std std-ref\">Overriding the default fields</span></a> for details.</li>\n</ul>\n</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> argument to model fields now accepts an iterable of iterables\ninstead of requiring an iterable of lists or tuples.</li>\n<li>The reason phrase can be customized in HTTP responses using\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.reason_phrase\" title=\"django.http.HttpResponse.reason_phrase\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code></a>.</li>\n<li>When giving the URL of the next page for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.logout()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm()</span></code>,\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_change()</span></code>, you can now pass\nURL names and they will be resolved.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-dumpdata-pks\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">dumpdata</span> <span class=\"pre\">--pks</span></code></a> option specifies the primary keys of objects\nto dump. This option can only be used with one model.</li>\n<li>Added <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.first\" title=\"django.db.models.query.QuerySet.first\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">first()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.last\" title=\"django.db.models.query.QuerySet.last\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">last()</span></code></a> which are convenience\nmethods returning the first or last object matching the filters. Returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if there are no objects matching.</li>\n<li><a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.View\" title=\"django.views.generic.base.View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView\" title=\"django.views.generic.base.RedirectView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RedirectView</span></code></a> now support HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">PATCH</span></code>\nmethod.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code> now takes an optional <code class=\"docutils literal notranslate\"><span class=\"pre\">for_concrete_model</span></code> argument,\nwhich when set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> allows the field to reference proxy models. The\ndefault is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to retain the old behavior.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.locale.LocaleMiddleware\" title=\"django.middleware.locale.LocaleMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocaleMiddleware</span></code></a> now stores the active\nlanguage in session if it is not present there. This prevents loss of\nlanguage settings after session flush, e.g. logout.</li>\n<li><a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.SuspiciousOperation\" title=\"django.core.exceptions.SuspiciousOperation\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SuspiciousOperation</span></code></a> has been differentiated\ninto a number of subclasses, and each will log to a matching named logger\nunder the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.security</span></code> logging hierarchy. Along with this change,\na <code class=\"docutils literal notranslate\"><span class=\"pre\">handler400</span></code> mechanism and default view are used whenever\na <code class=\"docutils literal notranslate\"><span class=\"pre\">SuspiciousOperation</span></code> reaches the WSGI handler to return an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponseBadRequest</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/models/class/#django.db.models.Model.DoesNotExist\" title=\"django.db.models.Model.DoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code></a> exception now includes a\nmessage indicating the name of the attribute used for the lookup.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.get_or_create\" title=\"django.db.models.query.QuerySet.get_or_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code></a> method no longer\nrequires at least one keyword argument.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a> class includes a new assertion\nhelper for testing formset errors:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.SimpleTestCase.assertFormsetError()</span></code>.</li>\n<li>The list of related fields added to a\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> by\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> can be cleared using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related(None)</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin.get_extra\" title=\"django.contrib.admin.InlineModelAdmin.get_extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_extra()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin.get_max_num\" title=\"django.contrib.admin.InlineModelAdmin.get_max_num\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_max_num()</span></code></a> methods on\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin\" title=\"django.contrib.admin.InlineModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InlineModelAdmin</span></code></a> may be overridden to\ncustomize the extra and maximum number of inline forms.</li>\n<li>Formsets now have a\n<a class=\"reference internal\" href=\"../../topics/forms/formsets/#django.forms.formsets.BaseFormSet.total_error_count\" title=\"django.forms.formsets.BaseFormSet.total_error_count\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">total_error_count()</span></code></a> method.</li>\n<li><a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a> fields can now override error messages\ndefined in model fields by using the\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.error_messages\" title=\"django.forms.Field.error_messages\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">error_messages</span></code></a> argument of a <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>\u2019s\nconstructor. To take advantage of this new feature with your custom fields,\n<a class=\"reference internal\" href=\"../../ref/forms/validation/#raising-validation-error\"><span class=\"std std-ref\">see the updated recommendation</span></a> for raising\na <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> now preserves filters on the list view\nafter creating, editing or deleting an object. It\u2019s possible to restore the previous\nbehavior of clearing filters by setting the\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.preserve_filters\" title=\"django.contrib.admin.ModelAdmin.preserve_filters\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">preserve_filters</span></code></a> attribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n<li>Added\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.get_prefix\" title=\"django.views.generic.edit.FormMixin.get_prefix\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">FormMixin.get_prefix</span></code></a>\n(which returns\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.prefix\" title=\"django.views.generic.edit.FormMixin.prefix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">FormMixin.prefix</span></code></a> by\ndefault) to allow customizing the <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.prefix\" title=\"django.forms.Form.prefix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">prefix</span></code></a> of the\nform.</li>\n<li>Raw queries (<code class=\"docutils literal notranslate\"><span class=\"pre\">Manager.raw()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.execute()</span></code>) can now use the\n\u201cpyformat\u201d parameter style, where placeholders in the query are given as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(name)s'</span></code> and the parameters are passed as a dictionary rather than\na list (except on SQLite). This has long been possible (but not officially\nsupported) on MySQL and PostgreSQL, and is now also available on Oracle.</li>\n<li>The default iteration count for the PBKDF2 password hasher has been\nincreased by 20%. This backwards compatible change will not affect\nexisting passwords or users who have subclassed\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></code> to change the\ndefault value. Passwords <a class=\"reference internal\" href=\"../../topics/auth/passwords/#password-upgrades\"><span class=\"std std-ref\">will be upgraded</span></a> to use\nthe new iteration count as necessary.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-6\">\n<span id=\"s-backwards-incompatible-1-6\"></span><span id=\"backwards-incompatible-changes-in-1-6\"></span><span id=\"backwards-incompatible-1-6\"></span><h2>Backwards incompatible changes in 1.6<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-6\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">In addition to the changes outlined in this section, be sure to review the\n<a class=\"reference internal\" href=\"../../internals/deprecation/#deprecation-removed-in-1-6\"><span class=\"std std-ref\">deprecation plan</span></a> for any features that\nhave been removed. If you haven\u2019t updated your code within the\ndeprecation timeline for a given feature, its removal may appear as a\nbackwards incompatible change.</p>\n</div>\n<div class=\"section\" id=\"s-new-transaction-management-model\">\n<span id=\"new-transaction-management-model\"></span><h3>New transaction management model<a class=\"headerlink\" href=\"#new-transaction-management-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-behavior-changes\">\n<span id=\"behavior-changes\"></span><h4>Behavior changes<a class=\"headerlink\" href=\"#behavior-changes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Database-level autocommit is enabled by default in Django 1.6. While this\ndoesn\u2019t change the general spirit of Django\u2019s transaction management, there\nare a few backwards-incompatibilities.</p>\n</div>\n<div class=\"section\" id=\"s-savepoints-and-assertnumqueries\">\n<span id=\"savepoints-and-assertnumqueries\"></span><h4>Savepoints and <code class=\"docutils literal notranslate\"><span class=\"pre\">assertNumQueries</span></code><a class=\"headerlink\" href=\"#savepoints-and-assertnumqueries\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The changes in transaction management may result in additional statements to\ncreate, release or rollback savepoints. This is more likely to happen with\nSQLite, since it didn\u2019t support savepoints until this release.</p>\n<p>If tests using <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase.assertNumQueries\" title=\"django.test.TransactionTestCase.assertNumQueries\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertNumQueries()</span></code></a> fail\nbecause of a higher number of queries than expected, check that the extra\nqueries are related to savepoints, and adjust the expected number of queries\naccordingly.</p>\n</div>\n<div class=\"section\" id=\"s-autocommit-option-for-postgresql\">\n<span id=\"autocommit-option-for-postgresql\"></span><h4>Autocommit option for PostgreSQL<a class=\"headerlink\" href=\"#autocommit-option-for-postgresql\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In previous versions, database-level autocommit was only an option for\nPostgreSQL, and it was disabled by default. This option is now ignored and can\nbe removed.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-new-test-runner\">\n<span id=\"s-id1\"></span><span id=\"new-test-runner\"></span><span id=\"id1\"></span><h3>New test runner<a class=\"headerlink\" href=\"#new-test-runner\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In order to maintain greater consistency with Python\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code> module, the\nnew test runner (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.runner.DiscoverRunner</span></code>) does not automatically\nsupport some types of tests that were supported by the previous runner:</p>\n<ul class=\"simple\">\n<li>Tests in <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tests/__init__.py</span></code> files will no longer be\nfound and run. Move them to a file whose name begins with <code class=\"docutils literal notranslate\"><span class=\"pre\">test</span></code>.</li>\n<li>Doctests will no longer be automatically discovered. To integrate doctests in\nyour test suite, follow the <a class=\"reference external\" href=\"https://docs.python.org/3/library/doctest.html#doctest-unittest-api\" title=\"(in Python v3.11)\"><span class=\"xref std std-ref\">recommendations in the Python documentation</span></a>.</li>\n</ul>\n<p>Django bundles a modified version of the <a class=\"reference external\" href=\"https://docs.python.org/3/library/doctest.html#module-doctest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">doctest</span></code></a> module from the Python\nstandard library (in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test._doctest</span></code>) and includes some additional\ndoctest utilities. These utilities are deprecated and will be removed in Django\n1.8; doctest suites should be updated to work with the standard library\u2019s\ndoctest module (or converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code>-compatible tests).</p>\n<p>If you wish to delay updates to your test suite, you can set your\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEST_RUNNER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_RUNNER</span></code></a> setting to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.simple.DjangoTestSuiteRunner</span></code>\nto fully restore the old test behavior. <code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTestSuiteRunner</span></code> is deprecated\nbut will not be removed from Django until version 1.8.</p>\n</div>\n<div class=\"section\" id=\"s-removal-of-django-contrib-gis-tests-geodjangotestsuiterunner-geodjango-custom-test-runner\">\n<span id=\"removal-of-django-contrib-gis-tests-geodjangotestsuiterunner-geodjango-custom-test-runner\"></span><h3>Removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.tests.GeoDjangoTestSuiteRunner</span></code> GeoDjango custom test runner<a class=\"headerlink\" href=\"#removal-of-django-contrib-gis-tests-geodjangotestsuiterunner-geodjango-custom-test-runner\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This is for developers working on the GeoDjango application itself and related\nto the item above about changes in the test runners:</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.tests.GeoDjangoTestSuiteRunner</span></code> test runner has been\nremoved and the standalone GeoDjango tests execution setup it implemented isn\u2019t\nsupported anymore. To run the GeoDjango tests simply use the new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code> and specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code> app.</p>\n</div>\n<div class=\"section\" id=\"s-custom-user-models-in-tests\">\n<span id=\"custom-user-models-in-tests\"></span><h3>Custom user models in tests<a class=\"headerlink\" href=\"#custom-user-models-in-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The introduction of the new test runner has also slightly changed the way that\ntest models are imported. As a result, any test that overrides <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code>\nto test behavior with one of Django\u2019s test user models (\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.tests.custom_user.CustomUser</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.tests.custom_user.ExtensionUser</span></code>) must now\nexplicitly import the User model in your test module:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.tests.custom_user</span> <span class=\"kn\">import</span> <span class=\"n\">CustomUser</span>\n\n\n<span class=\"nd\">@override_settings</span><span class=\"p\">(</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"o\">=</span><span class=\"s2\">&quot;auth.CustomUser&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomUserFeatureTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Test code here</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>This import forces the custom user model to be registered. Without this import,\nthe test will be unable to swap in the custom user model, and you will get an\nerror reporting:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">ImproperlyConfigured: AUTH_USER_MODEL refers to model &#39;auth.CustomUser&#39; that has not been installed</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-time-zone-aware-day-month-and-week-day-lookups\">\n<span id=\"time-zone-aware-day-month-and-week-day-lookups\"></span><h3>Time zone-aware <code class=\"docutils literal notranslate\"><span class=\"pre\">day</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">month</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">week_day</span></code> lookups<a class=\"headerlink\" href=\"#time-zone-aware-day-month-and-week-day-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.6 introduces time zone support for <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-day\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">day</span></code></a>, <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-month\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">month</span></code></a>,\nand <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-week_day\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">week_day</span></code></a> lookups when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. These\nlookups were previously performed in UTC regardless of the current time zone.</p>\n<p>This requires <a class=\"reference internal\" href=\"../../ref/models/querysets/#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions in the database</span></a>. If you\u2019re using SQLite, you must install\n<a class=\"reference external\" href=\"http://pytz.sourceforge.net/\">pytz</a>. If you\u2019re using MySQL, you must install <a class=\"reference external\" href=\"http://pytz.sourceforge.net/\">pytz</a> and load the time zone\ntables with <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html\">mysql_tzinfo_to_sql</a>.</p>\n</div>\n<div class=\"section\" id=\"s-addition-of-queryset-datetimes\">\n<span id=\"addition-of-queryset-datetimes\"></span><h3>Addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code><a class=\"headerlink\" href=\"#addition-of-queryset-datetimes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When the <a class=\"reference internal\" href=\"../../topics/i18n/timezones/\"><span class=\"doc\">time zone support</span></a> added in Django 1.4\nwas active, <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.dates\" title=\"django.db.models.query.QuerySet.dates\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code></a>\nlookups returned unexpected results, because the aggregation was performed in\nUTC. To fix this, Django 1.6 introduces a new API, <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.datetimes\" title=\"django.db.models.query.QuerySet.datetimes\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code></a>. This requires a few changes in\nyour code.</p>\n<div class=\"section\" id=\"s-queryset-dates-returns-date-objects\">\n<span id=\"queryset-dates-returns-date-objects\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code> objects<a class=\"headerlink\" href=\"#queryset-dates-returns-date-objects\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.dates\" title=\"django.db.models.query.QuerySet.dates\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code></a> now returns a\nlist of <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">date</span></code></a>. It used to return a list of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a>.</p>\n<p><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.datetimes\" title=\"django.db.models.query.QuerySet.datetimes\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code></a>\nreturns a list of <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-queryset-dates-no-longer-usable-on-datetimefield\">\n<span id=\"queryset-dates-no-longer-usable-on-datetimefield\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code> no longer usable on <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code><a class=\"headerlink\" href=\"#queryset-dates-no-longer-usable-on-datetimefield\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.dates\" title=\"django.db.models.query.QuerySet.dates\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code></a> raises an\nerror if it\u2019s used on <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> when time\nzone support is active. Use <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.datetimes\" title=\"django.db.models.query.QuerySet.datetimes\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code></a> instead.</p>\n</div>\n<div class=\"section\" id=\"s-date-hierarchy-requires-time-zone-definitions\">\n<span id=\"date-hierarchy-requires-time-zone-definitions\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">date_hierarchy</span></code> requires time zone definitions<a class=\"headerlink\" href=\"#date-hierarchy-requires-time-zone-definitions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.date_hierarchy\" title=\"django.contrib.admin.ModelAdmin.date_hierarchy\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">date_hierarchy</span></code></a> feature of the\nadmin now relies on <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.datetimes\" title=\"django.db.models.query.QuerySet.datetimes\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code></a> when it\u2019s used on a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>.</p>\n<p>This requires time zone definitions in the database when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. <a class=\"reference internal\" href=\"../../ref/models/querysets/#database-time-zone-definitions\"><span class=\"std std-ref\">Learn more</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-date-list-in-generic-views-requires-time-zone-definitions\">\n<span id=\"date-list-in-generic-views-requires-time-zone-definitions\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">date_list</span></code> in generic views requires time zone definitions<a class=\"headerlink\" href=\"#date-list-in-generic-views-requires-time-zone-definitions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For the same reason, accessing <code class=\"docutils literal notranslate\"><span class=\"pre\">date_list</span></code> in the context of a date-based\ngeneric view requires time zone definitions in the database when the view is\nbased on a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. <a class=\"reference internal\" href=\"../../ref/models/querysets/#database-time-zone-definitions\"><span class=\"std std-ref\">Learn more</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-new-lookups-may-clash-with-model-fields\">\n<span id=\"new-lookups-may-clash-with-model-fields\"></span><h3>New lookups may clash with model fields<a class=\"headerlink\" href=\"#new-lookups-may-clash-with-model-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.6 introduces <code class=\"docutils literal notranslate\"><span class=\"pre\">hour</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">minute</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code> lookups on\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>. If you had model fields called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">hour</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">minute</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code>, the new lookups will clash with you field\nnames. Append an explicit <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-exact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">exact</span></code></a> lookup if this is an issue.</p>\n</div>\n<div class=\"section\" id=\"s-booleanfield-no-longer-defaults-to-false\">\n<span id=\"booleanfield-no-longer-defaults-to-false\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> no longer defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code><a class=\"headerlink\" href=\"#booleanfield-no-longer-defaults-to-false\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a> doesn\u2019t have an explicit\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a>, the implicit default value is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. In previous version of Django, it was <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, but that didn\u2019t\nrepresent accurately the lack of a value.</p>\n<p>Code that relies on the default value being <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> may raise an exception\nwhen saving new model instances to the database, because <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> isn\u2019t an\nacceptable value for a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a>. You should\neither specify <code class=\"docutils literal notranslate\"><span class=\"pre\">default=False</span></code> in the field definition, or ensure the field\nis set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> before saving the object.</p>\n</div>\n<div class=\"section\" id=\"s-translations-and-comments-in-templates\">\n<span id=\"translations-and-comments-in-templates\"></span><h3>Translations and comments in templates<a class=\"headerlink\" href=\"#translations-and-comments-in-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-extraction-of-translations-after-comments\">\n<span id=\"extraction-of-translations-after-comments\"></span><h4>Extraction of translations after comments<a class=\"headerlink\" href=\"#extraction-of-translations-after-comments\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Extraction of translatable literals from templates with the\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemessages</span></code></a> command now correctly detects i18n constructs when\nthey are located after a <code class=\"docutils literal notranslate\"><span class=\"pre\">{#</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">#}</span></code>-type comment on the same line. E.g.:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c\">{# A comment #}</span><span class=\"cp\">{%</span> <span class=\"k\">trans</span> <span class=\"s2\">&quot;This literal was incorrectly ignored. Not anymore&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-location-of-translator-comments\">\n<span id=\"location-of-translator-comments\"></span><h4>Location of translator comments<a class=\"headerlink\" href=\"#location-of-translator-comments\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference internal\" href=\"../../topics/i18n/translation/#translator-comments-in-templates\"><span class=\"std std-ref\">Comments for translators in templates</span></a> specified using <code class=\"docutils literal notranslate\"><span class=\"pre\">{#</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">#}</span></code> need to\nbe at the end of a line. If they are not, the comments are ignored and\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemessages</span></code></a> will generate a warning. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c\">{# Translators: This is ignored #}</span><span class=\"cp\">{%</span> <span class=\"k\">trans</span> <span class=\"s2\">&quot;Translate me&quot;</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">title</span> <span class=\"cp\">}}</span><span class=\"c\">{# Translators: Extracted and associated with &#39;Welcome&#39; below #}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">trans</span> <span class=\"s2\">&quot;Welcome&quot;</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-quoting-in-reverse\">\n<span id=\"quoting-in-reverse\"></span><h3>Quoting in <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code><a class=\"headerlink\" href=\"#quoting-in-reverse\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When reversing URLs, Django didn\u2019t apply <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.http.urlquote</span></code>\nto arguments before interpolating them in URL patterns. This bug is fixed in\nDjango 1.6. If you worked around this bug by applying URL quoting before\npassing arguments to <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code>, this may result in double-quoting. If this\nhappens, simply remove the URL quoting from your code. You will also have to\nreplace special characters in URLs used in\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertRedirects\" title=\"django.test.SimpleTestCase.assertRedirects\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">assertRedirects()</span></code></a> with their encoded\nversions.</p>\n</div>\n<div class=\"section\" id=\"s-storage-of-ip-addresses-in-the-comments-app\">\n<span id=\"storage-of-ip-addresses-in-the-comments-app\"></span><h3>Storage of IP addresses in the comments app<a class=\"headerlink\" href=\"#storage-of-ip-addresses-in-the-comments-app\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The comments app now uses a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GenericIPAddressField</span></code> for storing commenters\u2019 IP addresses, to support\ncomments submitted from IPv6 addresses. Until now, it stored them in an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IPAddressField</span></code>, which is only meant to support IPv4. When saving a comment\nmade from an IPv6 address, the address would be silently truncated on MySQL\ndatabases, and raise an exception on Oracle. You will need to change the\ncolumn type in your database to benefit from this change.</p>\n<p>For MySQL, execute this query on your project\u2019s database:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">django_comments</span><span class=\"w\"> </span><span class=\"k\">MODIFY</span><span class=\"w\"> </span><span class=\"n\">ip_address</span><span class=\"w\"> </span><span class=\"nb\">VARCHAR</span><span class=\"p\">(</span><span class=\"mi\">39</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>For Oracle, execute this query:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">DJANGO_COMMENTS</span><span class=\"w\"> </span><span class=\"k\">MODIFY</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">ip_address</span><span class=\"w\"> </span><span class=\"n\">VARCHAR2</span><span class=\"p\">(</span><span class=\"mi\">39</span><span class=\"p\">));</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>If you do not apply this change, the behavior is unchanged: on MySQL, IPv6\naddresses are silently truncated; on Oracle, an exception is generated. No\ndatabase change is needed for SQLite or PostgreSQL databases.</p>\n</div>\n<div class=\"section\" id=\"s-percent-literals-in-cursor-execute-queries\">\n<span id=\"percent-literals-in-cursor-execute-queries\"></span><h3>Percent literals in <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.execute</span></code> queries<a class=\"headerlink\" href=\"#percent-literals-in-cursor-execute-queries\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you are running raw SQL queries through the\n<a class=\"reference internal\" href=\"../../topics/db/sql/#executing-custom-sql\"><span class=\"std std-ref\">cursor.execute</span></a> method, the rule about doubling\npercent literals (<code class=\"docutils literal notranslate\"><span class=\"pre\">%</span></code>) inside the query has been unified. Past behavior\ndepended on the database backend. Now, across all backends, you only need to\ndouble literal percent characters if you are also providing replacement\nparameters. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># No parameters, no percent doubling</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT foo FROM bar WHERE baz = &#39;30%&#39;&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Parameters passed, non-placeholders have to be doubled</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT foo FROM bar WHERE baz = &#39;30</span><span class=\"si\">%%</span><span class=\"s2\">&#39; and id = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SQLite</span></code> users need to check and update such queries.</p>\n</div>\n<div class=\"section\" id=\"s-help-text-of-model-form-fields-for-manytomanyfield-fields\">\n<span id=\"s-m2m-help-text\"></span><span id=\"help-text-of-model-form-fields-for-manytomanyfield-fields\"></span><span id=\"m2m-help-text\"></span><h3>Help text of model form fields for ManyToManyField fields<a class=\"headerlink\" href=\"#help-text-of-model-form-fields-for-manytomanyfield-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>HTML rendering of model form fields corresponding to\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> model fields used to get the\nhard-coded sentence:</p>\n<blockquote>\n<div><em>Hold down \u201cControl\u201d, or \u201cCommand\u201d on a Mac, to select more than one.</em></div></blockquote>\n<p>(or its translation to the active locale) imposed as the help legend shown along\nthem if neither <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.help_text\" title=\"django.db.models.Field.help_text\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">model</span></code></a> nor <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.help_text\" title=\"django.forms.Field.help_text\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">form</span></code></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">help_text</span></code> attributes were specified by the\nuser (or this string was appended to any <code class=\"docutils literal notranslate\"><span class=\"pre\">help_text</span></code> that was provided).</p>\n<p>Since this happened at the model layer, there was no way to prevent the text\nfrom appearing in cases where it wasn\u2019t applicable such as form fields that\nimplement user interactions that don\u2019t involve a keyboard and/or a mouse.</p>\n<p>Starting with Django 1.6, as an ad-hoc temporary backward-compatibility\nprovision, the logic to add the \u201cHold down\u2026\u201d sentence has been moved to the\nmodel form field layer and modified to add the text only when the associated\nwidget is <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.SelectMultiple\" title=\"django.forms.SelectMultiple\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectMultiple</span></code></a> or selected subclasses.</p>\n<p>The change can affect you in a backward incompatible way if you employ custom\nmodel form fields and/or widgets for <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> model fields whose UIs\ndo rely on the automatic provision of the mentioned hard-coded sentence. These\nform field implementations need to adapt to the new scenario by providing their\nown handling of the <code class=\"docutils literal notranslate\"><span class=\"pre\">help_text</span></code> attribute.</p>\n<p>Applications that use Django <a class=\"reference internal\" href=\"../../topics/forms/modelforms/\"><span class=\"doc\">model form</span></a>\nfacilities together with Django built-in form <a class=\"reference internal\" href=\"../../ref/forms/fields/\"><span class=\"doc\">fields</span></a>\nand <a class=\"reference internal\" href=\"../../ref/forms/widgets/\"><span class=\"doc\">widgets</span></a> aren\u2019t affected but need to be aware of\nwhat\u2019s described in <a class=\"reference internal\" href=\"#m2m-help-text-deprecation\"><span class=\"std std-ref\">Munging of help text of model form fields for ManyToManyField fields</span></a> below.</p>\n</div>\n<div class=\"section\" id=\"s-queryset-iteration\">\n<span id=\"queryset-iteration\"></span><h3>QuerySet iteration<a class=\"headerlink\" href=\"#queryset-iteration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> iteration was changed to immediately convert all fetched\nrows to <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> objects. In Django 1.5 and earlier the fetched rows were\nconverted to <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> objects in chunks of 100.</p>\n<p>Existing code will work, but the amount of rows converted to objects\nmight change in certain use cases. Such usages include partially looping\nover a queryset or any usage which ends up doing <code class=\"docutils literal notranslate\"><span class=\"pre\">__bool__</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__contains__</span></code>.</p>\n<p>Notably most database backends did fetch all the rows in one go already in\n1.5.</p>\n<p>It is still possible to convert the fetched rows to <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> objects\nlazily by using the <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.iterator\" title=\"django.db.models.query.QuerySet.iterator\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">iterator()</span></code></a>\nmethod.</p>\n</div>\n<div class=\"section\" id=\"s-boundfield-label-tag-now-includes-the-form-s-label-suffix\">\n<span id=\"boundfield-label-tag-now-includes-the-form-s-label-suffix\"></span><h3><a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField.label_tag\" title=\"django.forms.BoundField.label_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">BoundField.label_tag</span></code></a> now includes the form\u2019s <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.label_suffix\" title=\"django.forms.Form.label_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code></a><a class=\"headerlink\" href=\"#boundfield-label-tag-now-includes-the-form-s-label-suffix\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This is consistent with how methods like\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.as_p\" title=\"django.forms.Form.as_p\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.as_p</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.as_ul\" title=\"django.forms.Form.as_ul\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.as_ul</span></code></a> render labels.</p>\n<p>If you manually render <code class=\"docutils literal notranslate\"><span class=\"pre\">label_tag</span></code> in your templates:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">form.my_field.label_tag</span> <span class=\"cp\">}}</span>: <span class=\"cp\">{{</span> <span class=\"nv\">form.my_field</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>you\u2019ll want to remove the colon (or whatever other separator you may be\nusing) to avoid duplicating it when upgrading to Django 1.6. The following\ntemplate in Django 1.6 will render identically to the above template in Django\n1.5, except that the colon will appear inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> element.</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">form.my_field.label_tag</span> <span class=\"cp\">}}</span> <span class=\"cp\">{{</span> <span class=\"nv\">form.my_field</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>will render something like:</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;id_my_field&quot;</span><span class=\"p\">&gt;</span>My Field:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span> <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;id_my_field&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;my_field&quot;</span> <span class=\"p\">/&gt;</span>\n</pre></div>\n</div>\n<p>If you want to keep the current behavior of rendering <code class=\"docutils literal notranslate\"><span class=\"pre\">label_tag</span></code> without\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code>, instantiate the form <code class=\"docutils literal notranslate\"><span class=\"pre\">label_suffix=''</span></code>. You can also\ncustomize the <code class=\"docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code> on a per-field basis using the new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code> parameter on <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField.label_tag\" title=\"django.forms.BoundField.label_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">label_tag()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-admin-views-changelist-filters-get-parameter\">\n<span id=\"admin-views-changelist-filters-get-parameter\"></span><h3>Admin views <code class=\"docutils literal notranslate\"><span class=\"pre\">_changelist_filters</span></code> GET parameter<a class=\"headerlink\" href=\"#admin-views-changelist-filters-get-parameter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To achieve preserving and restoring list view filters, admin views now\npass around the <code class=\"docutils literal notranslate\"><span class=\"pre\">_changelist_filters</span></code> GET parameter. It\u2019s important that you\naccount for that change if you have custom admin templates or if your tests\nrely on the previous URLs. If you want to revert to the original behavior you\ncan set the\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.preserve_filters\" title=\"django.contrib.admin.ModelAdmin.preserve_filters\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">preserve_filters</span></code></a> attribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-auth-password-reset-uses-base-64-encoding-of-user-pk\">\n<span id=\"django-contrib-auth-password-reset-uses-base-64-encoding-of-user-pk\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code> password reset uses base 64 encoding of <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> PK<a class=\"headerlink\" href=\"#django-contrib-auth-password-reset-uses-base-64-encoding-of-user-pk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Past versions of Django used base 36 encoding of the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> primary key in\nthe password reset views and URLs\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm()</span></code>). Base 36 encoding is\nsufficient if the user primary key is an integer, however, with the\nintroduction of custom user models in Django 1.5, that assumption may no longer\nbe true.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm()</span></code> has been modified to\ntake a <code class=\"docutils literal notranslate\"><span class=\"pre\">uidb64</span></code> parameter instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">uidb36</span></code>. If you are reversing this\nview, for example in a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">password_reset_email.html</span></code> template, be sure\nto update your code.</p>\n<p>A temporary shim for <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm()</span></code>\nthat will allow password reset links generated prior to Django 1.6 to continue\nto work has been added to provide backwards compatibility; this will be removed\nin Django 1.7. Thus, as long as your site has been running Django 1.6 for more\nthan <code class=\"docutils literal notranslate\"><span class=\"pre\">PASSWORD_RESET_TIMEOUT_DAYS</span></code>, this change will have no effect.\nIf not (for example, if you upgrade directly from Django 1.5 to Django 1.7),\nthen any password reset links generated before you upgrade to Django 1.7 or\nlater won\u2019t work after the upgrade.</p>\n<p>In addition, if you have any custom password reset URLs, you will need to\nupdate them by replacing <code class=\"docutils literal notranslate\"><span class=\"pre\">uidb36</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">uidb64</span></code> and the dash that follows\nthat pattern with a slash. Also add <code class=\"docutils literal notranslate\"><span class=\"pre\">_\\-</span></code> to the list of characters that may\nmatch the <code class=\"docutils literal notranslate\"><span class=\"pre\">uidb64</span></code> pattern.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">url</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^reset/(?P&lt;uidb36&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.views.password_reset_confirm&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;password_reset_confirm&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">),</span>\n</pre></div>\n</div>\n<p>becomes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">url</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^reset/(?P&lt;uidb64&gt;[0-9A-Za-z_\\-]+)/(?P&lt;token&gt;.+)/$&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.views.password_reset_confirm&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;password_reset_confirm&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">),</span>\n</pre></div>\n</div>\n<p>You may also want to add the shim to support the old style reset links. Using\nthe example above, you would modify the existing url by replacing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm</span></code> with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm_uidb36</span></code> and also remove\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> argument so it doesn\u2019t conflict with the new url:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">url</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^reset/(?P&lt;uidb36&gt;[0-9A-Za-z]+)-(?P&lt;token&gt;.+)/$&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.views.password_reset_confirm_uidb36&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">),</span>\n</pre></div>\n</div>\n<p>You can remove this URL pattern after your app has been deployed with Django\n1.6 for <code class=\"docutils literal notranslate\"><span class=\"pre\">PASSWORD_RESET_TIMEOUT_DAYS</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-default-session-serialization-switched-to-json\">\n<span id=\"default-session-serialization-switched-to-json\"></span><h3>Default session serialization switched to JSON<a class=\"headerlink\" href=\"#default-session-serialization-switched-to-json\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Historically, <a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a> used <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a> to serialize\nsession data before storing it in the backend. If you\u2019re using the <a class=\"reference internal\" href=\"../../topics/http/sessions/#cookie-session-backend\"><span class=\"std std-ref\">signed\ncookie session backend</span></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> is\nknown by an attacker (there isn\u2019t an inherent vulnerability in Django that\nwould cause it to leak), the attacker could insert a string into their session\nwhich, when unpickled, executes arbitrary code on the server. The technique for\ndoing so is simple and easily available on the internet. Although the cookie\nsession storage signs the cookie-stored data to prevent tampering, a\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> leak immediately escalates to a remote code execution\nvulnerability.</p>\n<p>This attack can be mitigated by serializing session data using JSON rather\nthan <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a>. To facilitate this, Django 1.5.3 introduced a new setting,\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SESSION_SERIALIZER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SERIALIZER</span></code></a>, to customize the session serialization format.\nFor backwards compatibility, this setting defaulted to using <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a>\nin Django 1.5.3, but we\u2019ve changed the default to JSON in 1.6. If you upgrade\nand switch from pickle to JSON, sessions created before the upgrade will be\nlost. While JSON serialization does not support all Python objects like\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a> does, we highly recommend using JSON-serialized sessions. Be\naware of the following when checking your code to determine if JSON\nserialization will work for your application:</p>\n<ul class=\"simple\">\n<li>JSON requires string keys, so you will likely run into problems if you are\nusing non-string keys in <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code>.</li>\n<li>Setting session expiration by passing <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> values to\n<a class=\"reference internal\" href=\"../../topics/http/sessions/#django.contrib.sessions.backends.base.SessionBase.set_expiry\" title=\"django.contrib.sessions.backends.base.SessionBase.set_expiry\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_expiry()</span></code></a> will\nnot work as <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> values are not serializable in JSON. You can use\ninteger values instead.</li>\n</ul>\n<p>See the <a class=\"reference internal\" href=\"../../topics/http/sessions/#session-serialization\"><span class=\"std std-ref\">Session serialization</span></a> documentation for more details.</p>\n</div>\n<div class=\"section\" id=\"s-object-relational-mapper-changes\">\n<span id=\"object-relational-mapper-changes\"></span><h3>Object Relational Mapper changes<a class=\"headerlink\" href=\"#object-relational-mapper-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.6 contains many changes to the ORM. These changes fall mostly in\nthree categories:</p>\n<ol class=\"arabic simple\">\n<li>Bug fixes (e.g. proper join clauses for generic relations, query combining,\njoin promotion, and join trimming fixes)</li>\n<li>Preparation for new features. For example the ORM is now internally ready\nfor multicolumn foreign keys.</li>\n<li>General cleanup.</li>\n</ol>\n<p>These changes can result in some compatibility problems. For example, some\nqueries will now generate different table aliases. This can affect\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.extra\" title=\"django.db.models.query.QuerySet.extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.extra()</span></code></a>. In addition\nsome queries will now produce different results. An example is\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude(condition)</span></code></a>\nwhere the condition is a complex one (referencing multijoins inside\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">objects</span></code></a>). In many cases the affected\nqueries didn\u2019t produce correct results in Django 1.5 but do now.\nUnfortunately there are also cases that produce different results, but\nneither Django 1.5 nor 1.6 produce correct results.</p>\n<p>Finally, there have been many changes to the ORM internal APIs.</p>\n</div>\n<div class=\"section\" id=\"s-miscellaneous\">\n<span id=\"miscellaneous\"></span><h3>Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.query.EmptyQuerySet</span></code> can\u2019t be instantiated any more -\nit is only usable as a marker class for checking if\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.none\" title=\"django.db.models.query.QuerySet.none\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">none()</span></code></a> has been called:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">isinstance(qs.none(),</span> <span class=\"pre\">EmptyQuerySet)</span></code></p>\n</li>\n<li><p class=\"first\">If your CSS/JavaScript code used to access HTML input widgets by type, you\nshould review it as <code class=\"docutils literal notranslate\"><span class=\"pre\">type='text'</span></code> widgets might be now output as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">type='email'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">type='url'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">type='number'</span></code> depending on their\ncorresponding field type.</p>\n</li>\n<li><p class=\"first\">Form field\u2019s <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.error_messages\" title=\"django.forms.Field.error_messages\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">error_messages</span></code></a> that contain a\nplaceholder should now always use a named placeholder (<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Value</span> <span class=\"pre\">'%(value)s'</span> <span class=\"pre\">is</span>\n<span class=\"pre\">too</span> <span class=\"pre\">big&quot;</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Value</span> <span class=\"pre\">'%s'</span> <span class=\"pre\">is</span> <span class=\"pre\">too</span> <span class=\"pre\">big&quot;</span></code>). See the corresponding\nfield documentation for details about the names of the placeholders. The\nchanges in 1.6 particularly affect <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.DecimalField\" title=\"django.forms.DecimalField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DecimalField</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ModelMultipleChoiceField\" title=\"django.forms.ModelMultipleChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code></a>.</p>\n</li>\n<li><p class=\"first\">Some <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.error_messages\" title=\"django.forms.Field.error_messages\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">error_messages</span></code></a> for\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.IntegerField\" title=\"django.forms.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a>, <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.EmailField\" title=\"django.forms.EmailField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailField</span></code></a>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IPAddressField</span></code>, <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.GenericIPAddressField\" title=\"django.forms.GenericIPAddressField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericIPAddressField</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.SlugField\" title=\"django.forms.SlugField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlugField</span></code></a> have been suppressed because they\nduplicated error messages already provided by validators tied to the fields.</p>\n</li>\n<li><p class=\"first\">Due to a change in the form validation workflow,\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.TypedChoiceField\" title=\"django.forms.TypedChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypedChoiceField</span></code></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">coerce</span></code> method should always\nreturn a value present in the <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> field attribute. That limitation\nshould be lift again in Django 1.7.</p>\n</li>\n<li><p class=\"first\">There have been changes in the way timeouts are handled in cache backends.\nExplicitly passing in <code class=\"docutils literal notranslate\"><span class=\"pre\">timeout=None</span></code> no longer results in using the\ndefault timeout. It will now set a non-expiring timeout. Passing 0 into the\nmemcache backend no longer uses the default timeout, and now will\nset-and-expire-immediately the value.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.flatpages</span></code> app used to set custom HTTP headers for\ndebugging purposes. This functionality was not documented and made caching\nineffective so it has been removed, along with its generic implementation,\npreviously available in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.xheaders</span></code>.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">XViewMiddleware</span></code> has been moved from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.doc</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs.middleware</span></code> because it is an implementation\ndetail of admindocs, proven not to be reusable in general.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.GenericIPAddressField\" title=\"django.db.models.GenericIPAddressField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericIPAddressField</span></code></a> will now only allow\n<code class=\"docutils literal notranslate\"><span class=\"pre\">blank</span></code> values if <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> values are also allowed. Creating a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GenericIPAddressField</span></code> where <code class=\"docutils literal notranslate\"><span class=\"pre\">blank</span></code> is allowed but <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> is not\nwill trigger a model validation error because <code class=\"docutils literal notranslate\"><span class=\"pre\">blank</span></code> values are always\nstored as <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code>. Previously, storing a <code class=\"docutils literal notranslate\"><span class=\"pre\">blank</span></code> value in a field which\ndid not allow <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> would cause a database exception at runtime.</p>\n</li>\n<li><p class=\"first\">If a <code class=\"docutils literal notranslate\"><span class=\"pre\">NoReverseMatch</span></code> exception is raised from a method when rendering a\ntemplate, it is not silenced. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">obj.view_href</span> <span class=\"pre\">}}</span></code> will\ncause template rendering to fail if <code class=\"docutils literal notranslate\"><span class=\"pre\">view_href()</span></code> raises\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NoReverseMatch</span></code>. There is no change to the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-url\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">%}</span></code></a>&nbsp;tag, it\ncauses template rendering to fail like always when <code class=\"docutils literal notranslate\"><span class=\"pre\">NoReverseMatch</span></code> is\nraised.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client.logout\" title=\"django.test.Client.logout\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.test.Client.logout()</span></code></a> now calls\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.logout\" title=\"django.contrib.auth.logout\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.logout()</span></code></a> which will send the\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.signals.user_logged_out\" title=\"django.contrib.auth.signals.user_logged_out\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">user_logged_out()</span></code></a> signal.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../topics/auth/default/#built-in-auth-views\"><span class=\"std std-ref\">Authentication views</span></a> are now reversed by name,\nnot their locations in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views</span></code>. If you are using the\nviews without a <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, you should update your <code class=\"docutils literal notranslate\"><span class=\"pre\">urlpatterns</span></code> to use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.url()</span></code> with the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> parameter. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^reset/done/$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django.contrib.auth.views.password_reset_complete&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>becomes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">url</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^reset/done/$&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.views.password_reset_complete&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;password_reset_complete&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView\" title=\"django.views.generic.base.RedirectView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RedirectView</span></code></a> now has a <code class=\"docutils literal notranslate\"><span class=\"pre\">pattern_name</span></code>\nattribute which allows it to choose the target by reversing the URL.</p>\n</li>\n<li><p class=\"first\">In Django 1.4 and 1.5, a blank string was unintentionally not considered to\nbe a valid password. This meant\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.set_password\" title=\"django.contrib.auth.models.User.set_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_password()</span></code></a> would save a blank\npassword as an unusable password like\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.set_unusable_password\" title=\"django.contrib.auth.models.User.set_unusable_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_unusable_password()</span></code></a> does, and\nthus <a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.check_password\" title=\"django.contrib.auth.models.User.check_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">check_password()</span></code></a> always\nreturned <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> for blank passwords. This has been corrected in this\nrelease: blank passwords are now valid.</p>\n</li>\n<li><p class=\"first\">The admin <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.changelist_view\" title=\"django.contrib.admin.ModelAdmin.changelist_view\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">changelist_view</span></code></a> previously\naccepted a <code class=\"docutils literal notranslate\"><span class=\"pre\">pop</span></code> GET parameter to signify it was to be displayed in a popup.\nThis parameter has been renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">_popup</span></code> to be consistent with the rest\nof the admin views. You should update your custom templates if they use the\nprevious parameter name.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.validate_email\" title=\"django.core.validators.validate_email\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">validate_email()</span></code></a> now accepts email addresses\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">localhost</span></code> as the domain.</p>\n</li>\n<li><p class=\"first\">The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-makemessages-keep-pot\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">makemessages</span> <span class=\"pre\">--keep-pot</span></code></a> option prevents deleting the\ntemporary <code class=\"docutils literal notranslate\"><span class=\"pre\">.pot</span></code> file generated before creating the <code class=\"docutils literal notranslate\"><span class=\"pre\">.po</span></code> file.</p>\n</li>\n<li><p class=\"first\">The undocumented <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.servers.basehttp.WSGIServerException</span></code> has\nbeen removed. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">socket.error</span></code> provided by the standard library instead.\nThis change was also released in Django 1.5.5.</p>\n</li>\n<li><p class=\"first\">The signature of <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView.get_redirect_url\" title=\"django.views.generic.base.RedirectView.get_redirect_url\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.views.generic.base.RedirectView.get_redirect_url()</span></code></a>\nhas changed and now accepts positional arguments as well (<code class=\"docutils literal notranslate\"><span class=\"pre\">*args,</span> <span class=\"pre\">**kwargs</span></code>).\nAny unnamed captured group will now be passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_redirect_url()</span></code>\nwhich may result in a <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code> if you don\u2019t update the signature of your\ncustom method.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-6\">\n<span id=\"s-deprecated-features-1-6\"></span><span id=\"features-deprecated-in-1-6\"></span><span id=\"deprecated-features-1-6\"></span><h2>Features deprecated in 1.6<a class=\"headerlink\" href=\"#features-deprecated-in-1-6\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-transaction-management-apis\">\n<span id=\"transaction-management-apis\"></span><h3>Transaction management APIs<a class=\"headerlink\" href=\"#transaction-management-apis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Transaction management was completely overhauled in Django 1.6, and the\ncurrent APIs are deprecated:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.transaction.TransactionMiddleware</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction.autocommit</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction.commit_on_success</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction.commit_manually</span></code></li>\n<li>the <code class=\"docutils literal notranslate\"><span class=\"pre\">TRANSACTIONS_MANAGED</span></code> setting</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-comments\">\n<span id=\"django-contrib-comments\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.comments</span></code><a class=\"headerlink\" href=\"#django-contrib-comments\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s comment framework has been deprecated and is no longer supported. It\nwill be available in Django 1.6 and 1.7, and removed in Django 1.8. Most users\nwill be better served with a custom solution, or a hosted product like <a class=\"reference external\" href=\"https://disqus.com/\">Disqus</a>.</p>\n<p>The code formerly known as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.comments</span></code> is <a class=\"reference external\" href=\"https://github.com/django/django-contrib-comments\">still available\nin an external repository</a>.</p>\n</div>\n<div class=\"section\" id=\"s-support-for-postgresql-versions-older-than-8-4\">\n<span id=\"support-for-postgresql-versions-older-than-8-4\"></span><h3>Support for PostgreSQL versions older than 8.4<a class=\"headerlink\" href=\"#support-for-postgresql-versions-older-than-8-4\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The end of upstream support periods was reached in December 2011 for\nPostgreSQL 8.2 and in February 2013 for 8.3. As a consequence, Django 1.6 sets\n8.4 as the minimum PostgreSQL version it officially supports.</p>\n<p>You\u2019re strongly encouraged to use the most recent version of PostgreSQL\navailable, because of performance improvements and to take advantage of the\nnative streaming replication available in PostgreSQL 9.x.</p>\n</div>\n<div class=\"section\" id=\"s-changes-to-cycle-and-firstof\">\n<span id=\"changes-to-cycle-and-firstof\"></span><h3>Changes to <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> and <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-firstof\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a><a class=\"headerlink\" href=\"#changes-to-cycle-and-firstof\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system generally escapes all variables to avoid XSS attacks.\nHowever, due to an accident of history, the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> and <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-firstof\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a>\ntags render their arguments as-is.</p>\n<p>Django 1.6 starts a process to correct this inconsistency. The <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code>\ntemplate library provides alternate implementations of <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-firstof\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a> that autoescape their inputs. If you\u2019re using these tags,\nyou\u2019re encouraged to include the following line at the top of your templates to\nenable the new behavior:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">cycle</span> <span class=\"nv\">from</span> <span class=\"nv\">future</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>or:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">firstof</span> <span class=\"nv\">from</span> <span class=\"nv\">future</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The tags implementing the old behavior have been deprecated, and in Django\n1.8, the old behavior will be replaced with the new behavior. To ensure\ncompatibility with future versions of Django, existing templates should be\nmodified to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> versions.</p>\n<p>If necessary, you can temporarily disable auto-escaping with\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.mark_safe\" title=\"django.utils.safestring.mark_safe\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">mark_safe()</span></code></a> or <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">autoescape</span> <span class=\"pre\">off</span> <span class=\"pre\">%}</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-cache-middleware-anonymous-only-setting\">\n<span id=\"cache-middleware-anonymous-only-setting\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">CACHE_MIDDLEWARE_ANONYMOUS_ONLY</span></code> setting<a class=\"headerlink\" href=\"#cache-middleware-anonymous-only-setting\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">CacheMiddleware</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateCacheMiddleware</span></code> used to provide a way to\ncache requests only if they weren\u2019t made by a logged-in user. This mechanism\nwas largely ineffective because the middleware correctly takes into account the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Vary:</span> <span class=\"pre\">Cookie</span></code> HTTP header, and this header is being set on a variety of\noccasions, such as:</p>\n<ul class=\"simple\">\n<li>accessing the session, or</li>\n<li>using CSRF protection, which is turned on by default, or</li>\n<li>using a client-side library which sets cookies, like <a class=\"reference external\" href=\"https://marketingplatform.google.com/about/analytics/\">Google Analytics</a>.</li>\n</ul>\n<p>This makes the cache effectively work on a per-session basis regardless of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CACHE_MIDDLEWARE_ANONYMOUS_ONLY</span></code> setting.</p>\n</div>\n<div class=\"section\" id=\"s-send-broken-link-emails-setting\">\n<span id=\"send-broken-link-emails-setting\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SEND_BROKEN_LINK_EMAILS</span></code> setting<a class=\"headerlink\" href=\"#send-broken-link-emails-setting\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.CommonMiddleware\" title=\"django.middleware.common.CommonMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CommonMiddleware</span></code></a> used to provide basic\nreporting of broken links by email when <code class=\"docutils literal notranslate\"><span class=\"pre\">SEND_BROKEN_LINK_EMAILS</span></code> is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>Because of intractable ordering problems between\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.CommonMiddleware\" title=\"django.middleware.common.CommonMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CommonMiddleware</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.locale.LocaleMiddleware\" title=\"django.middleware.locale.LocaleMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocaleMiddleware</span></code></a>, this feature was split\nout into a new middleware:\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.BrokenLinkEmailsMiddleware\" title=\"django.middleware.common.BrokenLinkEmailsMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BrokenLinkEmailsMiddleware</span></code></a>.</p>\n<p>If you\u2019re relying on this feature, you should add\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.middleware.common.BrokenLinkEmailsMiddleware'</span></code> to your\n<code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code> setting and remove <code class=\"docutils literal notranslate\"><span class=\"pre\">SEND_BROKEN_LINK_EMAILS</span></code>\nfrom your settings.</p>\n</div>\n<div class=\"section\" id=\"s-has-changed-method-on-widgets\">\n<span id=\"has-changed-method-on-widgets\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">_has_changed</span></code> method on widgets<a class=\"headerlink\" href=\"#has-changed-method-on-widgets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you defined your own form widgets and defined the <code class=\"docutils literal notranslate\"><span class=\"pre\">_has_changed</span></code> method\non a widget, you should now define this method on the form field itself.</p>\n</div>\n<div class=\"section\" id=\"s-module-name-model-meta-attribute\">\n<span id=\"module-name-model-meta-attribute\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">module_name</span></code> model _meta attribute<a class=\"headerlink\" href=\"#module-name-model-meta-attribute\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta.module_name</span></code> was renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">model_name</span></code>. Despite being a\nprivate API, it will go through a regular deprecation path.</p>\n</div>\n<div class=\"section\" id=\"s-get-add-change-delete-permission-model-meta-methods\">\n<span id=\"get-add-change-delete-permission-model-meta-methods\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">get_(add|change|delete)_permission</span></code> model _meta methods<a class=\"headerlink\" href=\"#get-add-change-delete-permission-model-meta-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta.get_(add|change|delete)_permission</span></code> methods were deprecated.\nEven if they were not part of the public API they\u2019ll also go through\na regular deprecation path. You can replace them with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.get_permission_codename('action',</span> <span class=\"pre\">Model._meta)</span></code> where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'action'</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">'add'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'change'</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">'delete'</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-get-query-set-and-similar-methods-renamed-to-get-queryset\">\n<span id=\"get-query-set-and-similar-methods-renamed-to-get-queryset\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">get_query_set</span></code> and similar methods renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code><a class=\"headerlink\" href=\"#get-query-set-and-similar-methods-renamed-to-get-queryset\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Methods that return a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> such as <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager.get_query_set</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.queryset</span></code> have been renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code>.</p>\n<p>If you are writing a library that implements, for example, a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Manager.get_query_set</span></code> method, and you need to support old Django versions,\nyou should rename the method and conditionally add an alias with the old name:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CustomManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>  <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">VERSION</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n        <span class=\"n\">get_query_set</span> <span class=\"o\">=</span> <span class=\"n\">get_queryset</span>\n\n    <span class=\"c1\"># For Django &gt;= 1.6, models.Manager provides a get_query_set fallback</span>\n    <span class=\"c1\"># that emits a warning when used.</span>\n</pre></div>\n</div>\n<p>If you are writing a library that needs to call the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code> method and\nmust support old Django versions, you should write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">get_queryset</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">some_manager</span><span class=\"o\">.</span><span class=\"n\">get_query_set</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">some_manager</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_query_set&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span> <span class=\"n\">some_manager</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span>\n<span class=\"p\">)</span>\n<span class=\"k\">return</span> <span class=\"n\">get_queryset</span><span class=\"p\">()</span>  <span class=\"c1\"># etc</span>\n</pre></div>\n</div>\n<p>In the general case of a custom manager that both implements its own\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code> method and calls that method, and needs to work with older Django\nversions, and libraries that have not been updated yet, it is useful to define\na <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset_compat</span></code> method as below and use it internally to your manager:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">YourCustomManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">YourCustomQuerySet</span><span class=\"p\">()</span>  <span class=\"c1\"># for example</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">VERSION</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">):</span>\n        <span class=\"n\">get_query_set</span> <span class=\"o\">=</span> <span class=\"n\">get_queryset</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">active</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># for example</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_queryset_compat</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">active</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset_compat</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">get_queryset</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_query_set</span> <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_query_set&quot;</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_queryset</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This helps to minimize the changes that are needed, but also works correctly in\nthe case of subclasses (such as <code class=\"docutils literal notranslate\"><span class=\"pre\">RelatedManagers</span></code> from Django 1.5) which might\noverride either <code class=\"docutils literal notranslate\"><span class=\"pre\">get_query_set</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-shortcut-view-and-urlconf\">\n<span id=\"shortcut-view-and-urlconf\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">shortcut</span></code> view and URLconf<a class=\"headerlink\" href=\"#shortcut-view-and-urlconf\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">shortcut</span></code> view was moved from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.defaults</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.views</span></code> shortly after the 1.0 release, but the\nold location was never deprecated. This oversight was corrected in Django 1.6\nand you should now use the new location.</p>\n<p>The URLconf <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.shortcut</span></code> was also deprecated. If you\u2019re\nincluding it in an URLconf, simply replace:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^prefix/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">&quot;django.conf.urls.shortcut&quot;</span><span class=\"p\">)),</span>\n</pre></div>\n</div>\n<p>with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^prefix/(?P&lt;content_type_id&gt;\\d+)/(?P&lt;object_id&gt;.*)/$&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.contenttypes.views.shortcut&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">),</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-modelform-without-fields-or-exclude\">\n<span id=\"modelform-without-fields-or-exclude\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> without <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code><a class=\"headerlink\" href=\"#modelform-without-fields-or-exclude\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previously, if you wanted a <a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a> to use all fields on\nthe model, you could simply omit the <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.fields</span></code> attribute, and all fields\nwould be used.</p>\n<p>This can lead to security problems where fields are added to the model and,\nunintentionally, automatically become editable by end users. In some cases,\nparticular with boolean fields, it is possible for this problem to be completely\ninvisible. This is a form of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Mass_assignment_vulnerability\">Mass assignment vulnerability</a>.</p>\n<p>For this reason, this behavior is deprecated, and using the <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.exclude</span></code>\noption is strongly discouraged. Instead, all fields that are intended for\ninclusion in the form should be listed explicitly in the <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code> attribute.</p>\n<p>If this security concern really does not apply in your case, there is a shortcut\nto explicitly indicate that all fields should be used - use the special value\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;__all__&quot;</span></code> for the fields attribute:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyModelForm</span><span class=\"p\">(</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;__all__&quot;</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span>\n</pre></div>\n</div>\n<p>If you have custom <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForms</span></code> that only need to be used in the admin, there\nis another option. The admin has its own methods for defining fields\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">fieldsets</span></code> etc.), and so adding a list of fields to the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> is\nredundant. Instead, simply omit the <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> inner class of the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code>,\nor omit the <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.model</span></code> attribute. Since the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> subclass knows\nwhich model it is for, it can add the necessary attributes to derive a\nfunctioning <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code>. This behavior also works for earlier Django\nversions.</p>\n</div>\n<div class=\"section\" id=\"s-updateview-and-createview-without-explicit-fields\">\n<span id=\"updateview-and-createview-without-explicit-fields\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateView</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CreateView</span></code> without explicit fields<a class=\"headerlink\" href=\"#updateview-and-createview-without-explicit-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The generic views <a class=\"reference internal\" href=\"../../ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView\" title=\"django.views.generic.edit.CreateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CreateView</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/class-based-views/generic-editing/#django.views.generic.edit.UpdateView\" title=\"django.views.generic.edit.UpdateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UpdateView</span></code></a>, and anything else derived from\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.ModelFormMixin\" title=\"django.views.generic.edit.ModelFormMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelFormMixin</span></code></a>, are vulnerable to the\nsecurity problem described in the section above, because they can automatically\ncreate a <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> that uses all fields for a model.</p>\n<p>For this reason, if you use these views for editing models, you must also supply\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code> attribute (new in Django 1.6), which is a list of model fields\nand works in the same way as the <a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.fields</span></code> attribute. Alternatively, you can set the <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code>\nattribute to a <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> that explicitly defines the fields to be used.\nDefining an <code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateView</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">CreateView</span></code> subclass to be used with a model\nbut without an explicit list of fields is deprecated.</p>\n</div>\n<div class=\"section\" id=\"s-munging-of-help-text-of-model-form-fields-for-manytomanyfield-fields\">\n<span id=\"s-m2m-help-text-deprecation\"></span><span id=\"munging-of-help-text-of-model-form-fields-for-manytomanyfield-fields\"></span><span id=\"m2m-help-text-deprecation\"></span><h3>Munging of help text of model form fields for <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> fields<a class=\"headerlink\" href=\"#munging-of-help-text-of-model-form-fields-for-manytomanyfield-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All special handling of the <code class=\"docutils literal notranslate\"><span class=\"pre\">help_text</span></code> attribute of <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> model\nfields performed by standard model or model form fields as described in\n<a class=\"reference internal\" href=\"#m2m-help-text\"><span class=\"std std-ref\">Help text of model form fields for ManyToManyField fields</span></a> above is deprecated and will be removed in Django 1.8.</p>\n<p>Help text of these fields will need to be handled either by applications, custom\nform fields or widgets, just like happens with the rest of the model field\ntypes.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.5.12", "Django 1.5.12 release notes", "N", "next"], ["releases/1.6.1", "Django 1.6.1 release notes", "P", "previous"]], "sourcename": "releases/1.6.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.6 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-6\">What\u2019s new in Django 1.6</a><ul>\n<li><a class=\"reference internal\" href=\"#simplified-default-project-and-app-templates\">Simplified default project and app templates</a></li>\n<li><a class=\"reference internal\" href=\"#improved-transaction-management\">Improved transaction management</a></li>\n<li><a class=\"reference internal\" href=\"#persistent-database-connections\">Persistent database connections</a></li>\n<li><a class=\"reference internal\" href=\"#discovery-of-tests-in-any-test-module\">Discovery of tests in any test module</a></li>\n<li><a class=\"reference internal\" href=\"#time-zone-aware-aggregation\">Time zone aware aggregation</a></li>\n<li><a class=\"reference internal\" href=\"#support-for-savepoints-in-sqlite\">Support for savepoints in SQLite</a></li>\n<li><a class=\"reference internal\" href=\"#binaryfield-model-field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BinaryField</span></code> model field</a></li>\n<li><a class=\"reference internal\" href=\"#geodjango-form-widgets\">GeoDjango form widgets</a></li>\n<li><a class=\"reference internal\" href=\"#check-management-command-added-for-verifying-compatibility\"><code class=\"docutils literal notranslate\"><span class=\"pre\">check</span></code> management command added for verifying compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#model-save-algorithm-changed\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code> algorithm changed</a></li>\n<li><a class=\"reference internal\" href=\"#minor-features\">Minor features</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-6\">Backwards incompatible changes in 1.6</a><ul>\n<li><a class=\"reference internal\" href=\"#new-transaction-management-model\">New transaction management model</a><ul>\n<li><a class=\"reference internal\" href=\"#behavior-changes\">Behavior changes</a></li>\n<li><a class=\"reference internal\" href=\"#savepoints-and-assertnumqueries\">Savepoints and <code class=\"docutils literal notranslate\"><span class=\"pre\">assertNumQueries</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#autocommit-option-for-postgresql\">Autocommit option for PostgreSQL</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#new-test-runner\">New test runner</a></li>\n<li><a class=\"reference internal\" href=\"#removal-of-django-contrib-gis-tests-geodjangotestsuiterunner-geodjango-custom-test-runner\">Removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.tests.GeoDjangoTestSuiteRunner</span></code> GeoDjango custom test runner</a></li>\n<li><a class=\"reference internal\" href=\"#custom-user-models-in-tests\">Custom user models in tests</a></li>\n<li><a class=\"reference internal\" href=\"#time-zone-aware-day-month-and-week-day-lookups\">Time zone-aware <code class=\"docutils literal notranslate\"><span class=\"pre\">day</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">month</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">week_day</span></code> lookups</a></li>\n<li><a class=\"reference internal\" href=\"#addition-of-queryset-datetimes\">Addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.datetimes()</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#queryset-dates-returns-date-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code> objects</a></li>\n<li><a class=\"reference internal\" href=\"#queryset-dates-no-longer-usable-on-datetimefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.dates()</span></code> no longer usable on <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#date-hierarchy-requires-time-zone-definitions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">date_hierarchy</span></code> requires time zone definitions</a></li>\n<li><a class=\"reference internal\" href=\"#date-list-in-generic-views-requires-time-zone-definitions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">date_list</span></code> in generic views requires time zone definitions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#new-lookups-may-clash-with-model-fields\">New lookups may clash with model fields</a></li>\n<li><a class=\"reference internal\" href=\"#booleanfield-no-longer-defaults-to-false\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> no longer defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#translations-and-comments-in-templates\">Translations and comments in templates</a><ul>\n<li><a class=\"reference internal\" href=\"#extraction-of-translations-after-comments\">Extraction of translations after comments</a></li>\n<li><a class=\"reference internal\" href=\"#location-of-translator-comments\">Location of translator comments</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#quoting-in-reverse\">Quoting in <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#storage-of-ip-addresses-in-the-comments-app\">Storage of IP addresses in the comments app</a></li>\n<li><a class=\"reference internal\" href=\"#percent-literals-in-cursor-execute-queries\">Percent literals in <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.execute</span></code> queries</a></li>\n<li><a class=\"reference internal\" href=\"#help-text-of-model-form-fields-for-manytomanyfield-fields\">Help text of model form fields for ManyToManyField fields</a></li>\n<li><a class=\"reference internal\" href=\"#queryset-iteration\">QuerySet iteration</a></li>\n<li><a class=\"reference internal\" href=\"#boundfield-label-tag-now-includes-the-form-s-label-suffix\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">BoundField.label_tag</span></code> now includes the form\u2019s <code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#admin-views-changelist-filters-get-parameter\">Admin views <code class=\"docutils literal notranslate\"><span class=\"pre\">_changelist_filters</span></code> GET parameter</a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-auth-password-reset-uses-base-64-encoding-of-user-pk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code> password reset uses base 64 encoding of <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> PK</a></li>\n<li><a class=\"reference internal\" href=\"#default-session-serialization-switched-to-json\">Default session serialization switched to JSON</a></li>\n<li><a class=\"reference internal\" href=\"#object-relational-mapper-changes\">Object Relational Mapper changes</a></li>\n<li><a class=\"reference internal\" href=\"#miscellaneous\">Miscellaneous</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-6\">Features deprecated in 1.6</a><ul>\n<li><a class=\"reference internal\" href=\"#transaction-management-apis\">Transaction management APIs</a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-comments\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.comments</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#support-for-postgresql-versions-older-than-8-4\">Support for PostgreSQL versions older than 8.4</a></li>\n<li><a class=\"reference internal\" href=\"#changes-to-cycle-and-firstof\">Changes to <code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code> and <code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cache-middleware-anonymous-only-setting\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CACHE_MIDDLEWARE_ANONYMOUS_ONLY</span></code> setting</a></li>\n<li><a class=\"reference internal\" href=\"#send-broken-link-emails-setting\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SEND_BROKEN_LINK_EMAILS</span></code> setting</a></li>\n<li><a class=\"reference internal\" href=\"#has-changed-method-on-widgets\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_has_changed</span></code> method on widgets</a></li>\n<li><a class=\"reference internal\" href=\"#module-name-model-meta-attribute\"><code class=\"docutils literal notranslate\"><span class=\"pre\">module_name</span></code> model _meta attribute</a></li>\n<li><a class=\"reference internal\" href=\"#get-add-change-delete-permission-model-meta-methods\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_(add|change|delete)_permission</span></code> model _meta methods</a></li>\n<li><a class=\"reference internal\" href=\"#get-query-set-and-similar-methods-renamed-to-get-queryset\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_query_set</span></code> and similar methods renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#shortcut-view-and-urlconf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">shortcut</span></code> view and URLconf</a></li>\n<li><a class=\"reference internal\" href=\"#modelform-without-fields-or-exclude\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> without <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#updateview-and-createview-without-explicit-fields\"><code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateView</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CreateView</span></code> without explicit fields</a></li>\n<li><a class=\"reference internal\" href=\"#munging-of-help-text-of-model-form-fields-for-manytomanyfield-fields\">Munging of help text of model form fields for <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> fields</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.6", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}