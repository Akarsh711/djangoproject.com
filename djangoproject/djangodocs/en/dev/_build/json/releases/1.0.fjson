{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.0.1/", "title": "Django 1.0.1 release notes"}, "next": {"link": "../1.0-porting-guide/", "title": "Porting your apps from Django 0.96 to 1.0"}, "title": "Django 1.0 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-0-release-notes\">\n<span id=\"django-1-0-release-notes\"></span><h1>Django 1.0 release notes<a class=\"headerlink\" href=\"#django-1-0-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Welcome to Django 1.0!</p>\n<p>We\u2019ve been looking forward to this moment for over three years, and it\u2019s finally\nhere. Django 1.0 represents the largest milestone in Django\u2019s development to\ndate: a web framework that a group of perfectionists can truly be proud of.</p>\n<p>Django 1.0 represents over three years of community development as an Open\nSource project. Django\u2019s received contributions from hundreds of developers,\nbeen translated into fifty languages, and today is used by developers on every\ncontinent and in every kind of job.</p>\n<p>An interesting historical note: when Django was first released in July 2005, the\ninitial released version of Django came from an internal repository at revision\nnumber 8825. Django 1.0 represents revision 8961 of our public repository. It\nseems fitting that our 1.0 release comes at the moment where community\ncontributions overtake those made privately.</p>\n<div class=\"section\" id=\"s-stability-and-forwards-compatibility\">\n<span id=\"stability-and-forwards-compatibility\"></span><h2>Stability and forwards-compatibility<a class=\"headerlink\" href=\"#stability-and-forwards-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The release of Django 1.0 comes with a promise of API\nstability and forwards-compatibility. In a nutshell, this means that code you\ndevelop against Django 1.0 will continue to work against 1.1 unchanged, and you\nshould need to make only minor changes for any 1.X release.</p>\n<p>See the <a class=\"reference internal\" href=\"../../misc/api-stability/\"><span class=\"doc\">API stability guide</span></a> for full details.</p>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes\">\n<span id=\"backwards-incompatible-changes\"></span><h2>Backwards-incompatible changes<a class=\"headerlink\" href=\"#backwards-incompatible-changes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.0 has a number of backwards-incompatible changes from Django 0.96. If\nyou have apps written against Django 0.96 that you need to port, see our\ndetailed porting guide:</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"../1.0-porting-guide/\">Porting your apps from Django 0.96 to 1.0</a></li>\n</ul>\n</div>\n<p>A complete list of backwards-incompatible changes can be found at\n<a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges\">https://code.djangoproject.com/wiki/BackwardsIncompatibleChanges</a>.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-0\">\n<span id=\"what-s-new-in-django-1-0\"></span><h2>What\u2019s new in Django 1.0<a class=\"headerlink\" href=\"#what-s-new-in-django-1-0\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A <em>lot</em>!</p>\n<p>Since Django 0.96, we\u2019ve made over 4,000 code commits, fixed more than 2,000\nbugs, and edited, added, or removed around 350,000 lines of code. We\u2019ve also\nadded 40,000 lines of new documentation, and greatly improved what was already\nthere.</p>\n<p>In fact, new documentation is one of our favorite features of Django 1.0, so we\nmight as well start there. First, there\u2019s a new documentation site:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://docs.djangoproject.com/\">https://docs.djangoproject.com/</a></li>\n</ul>\n<p>The documentation has been greatly improved, cleaned up, and generally made\nawesome. There\u2019s now dedicated search, indexes, and more.</p>\n<p>We can\u2019t possibly document everything that\u2019s new in 1.0, but the documentation\nwill be your definitive guide. Anywhere you see something like:</p>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 1.0:</span> <p>This feature is new in Django 1.0</p>\n</div>\n<p>You\u2019ll know that you\u2019re looking at something new or changed.</p>\n<p>The other major highlights of Django 1.0 are:</p>\n<div class=\"section\" id=\"s-refactored-admin-application\">\n<span id=\"refactored-admin-application\"></span><h3>Refactored admin application<a class=\"headerlink\" href=\"#refactored-admin-application\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The Django administrative interface (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code>) has been\ncompletely refactored; admin definitions are now completely decoupled from model\ndefinitions (no more <code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">Admin</span></code> declaration in models!), rewritten to use\nDjango\u2019s new form-handling library (introduced in the 0.96 release as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.newforms</span></code>, and now available as simply <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms</span></code>) and\nredesigned with extensibility and customization in mind. Full documentation for\nthe admin application is available online in the official Django documentation:</p>\n<p>See the <a class=\"reference internal\" href=\"../../ref/contrib/admin/\"><span class=\"doc\">admin reference</span></a> for details</p>\n</div>\n<div class=\"section\" id=\"s-improved-unicode-handling\">\n<span id=\"improved-unicode-handling\"></span><h3>Improved Unicode handling<a class=\"headerlink\" href=\"#improved-unicode-handling\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s internals have been refactored to use Unicode throughout; this\ndrastically simplifies the task of dealing with non-Western-European content and\ndata in Django. Additionally, utility functions have been provided to ease\ninteroperability with third-party libraries and systems which may or may not\nhandle Unicode gracefully. Details are available in Django\u2019s Unicode-handling\ndocumentation.</p>\n<p>See <a class=\"reference internal\" href=\"../../ref/unicode/\"><span class=\"doc\">Unicode data</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-an-improved-orm\">\n<span id=\"an-improved-orm\"></span><h3>An improved ORM<a class=\"headerlink\" href=\"#an-improved-orm\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s object-relational mapper \u2013 the component which provides the mapping\nbetween Django model classes and your database, and which mediates your database\nqueries \u2013 has been dramatically improved by a massive refactoring. For most\nusers of Django this is backwards-compatible; the public-facing API for database\nquerying underwent a few minor changes, but most of the updates took place in\nthe ORM\u2019s internals. A guide to the changes, including backwards-incompatible\nmodifications and mentions of new features opened up by this refactoring, is\n<a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/QuerysetRefactorBranch\">available on the Django wiki</a>.</p>\n</div>\n<div class=\"section\" id=\"s-automatic-escaping-of-template-variables\">\n<span id=\"automatic-escaping-of-template-variables\"></span><h3>Automatic escaping of template variables<a class=\"headerlink\" href=\"#automatic-escaping-of-template-variables\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To provide improved security against cross-site scripting (XSS) vulnerabilities,\nDjango\u2019s template system now automatically escapes the output of variables. This\nbehavior is configurable, and allows both variables and larger template\nconstructs to be marked as safe (requiring no escaping) or unsafe (requiring\nescaping). A full guide to this feature is in the documentation for the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> tag.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-gis-geodjango\">\n<span id=\"django-contrib-gis-geodjango\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code> (GeoDjango)<a class=\"headerlink\" href=\"#django-contrib-gis-geodjango\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A project over a year in the making, this adds world-class GIS (<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Geographic_information_system\">Geographic\nInformation Systems</a>) support to Django, in the form of a <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code>\napplication. Its documentation is currently being maintained externally, and\nwill be merged into the main Django documentation shortly. Huge thanks go to\nJustin Bronn, Jeremy Dunck, Brett Hoerner and Travis Pinney for their efforts in\ncreating and completing this feature.</p>\n<p>See <a class=\"reference internal\" href=\"../../ref/contrib/gis/\"><span class=\"doc\">GeoDjango</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-pluggable-file-storage\">\n<span id=\"pluggable-file-storage\"></span><h3>Pluggable file storage<a class=\"headerlink\" href=\"#pluggable-file-storage\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s built-in <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageField</span></code> now can take advantage of\npluggable file-storage backends, allowing extensive customization of where and\nhow uploaded files get stored by Django. For details, see <a class=\"reference internal\" href=\"../../topics/files/\"><span class=\"doc\">the files\ndocumentation</span></a>; big thanks go to Marty Alchin for putting in the\nhard work to get this completed.</p>\n</div>\n<div class=\"section\" id=\"s-jython-compatibility\">\n<span id=\"jython-compatibility\"></span><h3>Jython compatibility<a class=\"headerlink\" href=\"#jython-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Thanks to a lot of work from Leo Soto during a Google Summer of Code project,\nDjango\u2019s codebase has been refactored to remove incompatibilities with\n<a class=\"reference external\" href=\"https://www.jython.org/\">Jython</a>, an implementation of Python written in Java, which runs Python code\non the Java Virtual Machine. Django is now compatible with the forthcoming\nJython 2.5 release.</p>\n</div>\n<div class=\"section\" id=\"s-generic-relations-in-forms-and-admin\">\n<span id=\"generic-relations-in-forms-and-admin\"></span><h3>Generic relations in forms and admin<a class=\"headerlink\" href=\"#generic-relations-in-forms-and-admin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Classes are now included in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes</span></code> which can be used to\nsupport generic relations in both the admin interface and in end-user forms. See\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#generic-relations\"><span class=\"std std-ref\">the documentation for generic relations</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-insert-update-distinction\">\n<span id=\"insert-update-distinction\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> distinction<a class=\"headerlink\" href=\"#insert-update-distinction\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Although Django\u2019s default behavior of having a model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method\nautomatically determine whether to perform an <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code> or an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> at the\nSQL level is suitable for the majority of cases, there are occasional situations\nwhere forcing one or the other is useful. As a result, models can now support an\nadditional parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> which can force a specific operation.</p>\n<p>See <a class=\"reference internal\" href=\"../../ref/models/instances/#ref-models-force-insert\"><span class=\"std std-ref\">Forcing an INSERT or UPDATE</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-split-cachemiddleware\">\n<span id=\"split-cachemiddleware\"></span><h3>Split <code class=\"docutils literal notranslate\"><span class=\"pre\">CacheMiddleware</span></code><a class=\"headerlink\" href=\"#split-cachemiddleware\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">CacheMiddleware</span></code> has been split into three classes:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CacheMiddleware</span></code> itself still exists and retains all of its previous\nfunctionality, but it is now built from two separate middleware classes which\nhandle the two parts of caching (inserting into and reading from the cache)\nseparately, offering additional flexibility for situations where combining these\nfunctions into a single middleware posed problems.</p>\n<p>Full details, including updated notes on appropriate use, are in <a class=\"reference internal\" href=\"../../topics/cache/\"><span class=\"doc\">the\ncaching documentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-refactored-django-contrib-comments\">\n<span id=\"refactored-django-contrib-comments\"></span><h3>Refactored <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.comments</span></code><a class=\"headerlink\" href=\"#refactored-django-contrib-comments\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As part of a Google Summer of Code project, Thejaswi Puthraya carried out a\nmajor rewrite and refactoring of Django\u2019s bundled comment system, greatly\nincreasing its flexibility and customizability.</p>\n</div>\n<div class=\"section\" id=\"s-removal-of-deprecated-features\">\n<span id=\"removal-of-deprecated-features\"></span><h3>Removal of deprecated features<a class=\"headerlink\" href=\"#removal-of-deprecated-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A number of features and methods which had previously been marked as deprecated,\nand which were scheduled for removal prior to the 1.0 release, are no longer\npresent in Django. These include imports of the form library from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.newforms</span></code> (now located simply at <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms</span></code>), the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">form_for_model</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">form_for_instance</span></code> helper functions (which have been\nreplaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code>) and a number of deprecated features which were\nreplaced by the dispatcher, file-uploading and file-storage refactoring\nintroduced in the Django 1.0 alpha releases.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-known-issues\">\n<span id=\"known-issues\"></span><h2>Known issues<a class=\"headerlink\" href=\"#known-issues\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We\u2019ve done our best to make Django 1.0 as solid as possible, but unfortunately\nthere are a couple of issues that we know about in the release.</p>\n<div class=\"section\" id=\"s-multi-table-model-inheritance-with-to-field\">\n<span id=\"multi-table-model-inheritance-with-to-field\"></span><h3>Multi-table model inheritance with <code class=\"docutils literal notranslate\"><span class=\"pre\">to_field</span></code><a class=\"headerlink\" href=\"#multi-table-model-inheritance-with-to-field\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re using <a class=\"reference internal\" href=\"../../topics/db/models/#multi-table-inheritance\"><span class=\"std std-ref\">multiple table model inheritance</span></a>, be aware of this caveat: child models using a custom\n<code class=\"docutils literal notranslate\"><span class=\"pre\">parent_link</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">to_field</span></code> will cause database integrity errors. A set of\nmodels like the following are <strong>not valid</strong>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Parent</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">other_value</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Child</span><span class=\"p\">(</span><span class=\"n\">Parent</span><span class=\"p\">):</span>\n    <span class=\"n\">father</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n        <span class=\"n\">Parent</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">to_field</span><span class=\"o\">=</span><span class=\"s2\">&quot;other_value&quot;</span><span class=\"p\">,</span> <span class=\"n\">parent_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This bug will be fixed in the next release of Django.</p>\n</div>\n<div class=\"section\" id=\"s-caveats-with-support-of-certain-databases\">\n<span id=\"caveats-with-support-of-certain-databases\"></span><h3>Caveats with support of certain databases<a class=\"headerlink\" href=\"#caveats-with-support-of-certain-databases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django attempts to support as many features as possible on all database\nbackends. However, not all database backends are alike, and in particular many of the supported database differ greatly from version to version. It\u2019s a good idea to checkout our <a class=\"reference internal\" href=\"../../ref/databases/\"><span class=\"doc\">notes on supported database</span></a>:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/databases/#mysql-notes\"><span class=\"std std-ref\">MySQL notes</span></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/databases/#sqlite-notes\"><span class=\"std std-ref\">SQLite notes</span></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/databases/#oracle-notes\"><span class=\"std std-ref\">Oracle notes</span></a></li>\n</ul>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.0-porting-guide", "Porting your apps from Django 0.96 to 1.0", "N", "next"], ["releases/1.0.1", "Django 1.0.1 release notes", "P", "previous"]], "sourcename": "releases/1.0.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.0 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#stability-and-forwards-compatibility\">Stability and forwards-compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes\">Backwards-incompatible changes</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-0\">What\u2019s new in Django 1.0</a><ul>\n<li><a class=\"reference internal\" href=\"#refactored-admin-application\">Refactored admin application</a></li>\n<li><a class=\"reference internal\" href=\"#improved-unicode-handling\">Improved Unicode handling</a></li>\n<li><a class=\"reference internal\" href=\"#an-improved-orm\">An improved ORM</a></li>\n<li><a class=\"reference internal\" href=\"#automatic-escaping-of-template-variables\">Automatic escaping of template variables</a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-gis-geodjango\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code> (GeoDjango)</a></li>\n<li><a class=\"reference internal\" href=\"#pluggable-file-storage\">Pluggable file storage</a></li>\n<li><a class=\"reference internal\" href=\"#jython-compatibility\">Jython compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#generic-relations-in-forms-and-admin\">Generic relations in forms and admin</a></li>\n<li><a class=\"reference internal\" href=\"#insert-update-distinction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> distinction</a></li>\n<li><a class=\"reference internal\" href=\"#split-cachemiddleware\">Split <code class=\"docutils literal notranslate\"><span class=\"pre\">CacheMiddleware</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#refactored-django-contrib-comments\">Refactored <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.comments</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#removal-of-deprecated-features\">Removal of deprecated features</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#known-issues\">Known issues</a><ul>\n<li><a class=\"reference internal\" href=\"#multi-table-model-inheritance-with-to-field\">Multi-table model inheritance with <code class=\"docutils literal notranslate\"><span class=\"pre\">to_field</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#caveats-with-support-of-certain-databases\">Caveats with support of certain databases</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.0", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}