{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.7.4/", "title": "Django 1.7.4 release notes"}, "next": {"link": "../1.7.2/", "title": "Django 1.7.2 release notes"}, "title": "Django 1.7.3 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-7-3-release-notes\">\n<span id=\"django-1-7-3-release-notes\"></span><h1>Django 1.7.3 release notes<a class=\"headerlink\" href=\"#django-1-7-3-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>January 13, 2015</em></p>\n<p>Django 1.7.3 fixes several security issues and bugs in 1.7.2.</p>\n<div class=\"section\" id=\"s-wsgi-header-spoofing-via-underscore-dash-conflation\">\n<span id=\"wsgi-header-spoofing-via-underscore-dash-conflation\"></span><h2>WSGI header spoofing via underscore/dash conflation<a class=\"headerlink\" href=\"#wsgi-header-spoofing-via-underscore-dash-conflation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When HTTP headers are placed into the WSGI environ, they are normalized by\nconverting to uppercase, converting all dashes to underscores, and prepending\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_</span></code>. For instance, a header <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Auth-User</span></code> would become\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_X_AUTH_USER</span></code> in the WSGI environ (and thus also in Django\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.META</span></code> dictionary).</p>\n<p>Unfortunately, this means that the WSGI environ cannot distinguish between\nheaders containing dashes and headers containing underscores: <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Auth-User</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Auth_User</span></code> both become <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_X_AUTH_USER</span></code>. This means that if a\nheader is used in a security-sensitive way (for instance, passing\nauthentication information along from a front-end proxy), even if the proxy\ncarefully strips any incoming value for <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Auth-User</span></code>, an attacker may be\nable to provide an <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Auth_User</span></code> header (with underscore) and bypass this\nprotection.</p>\n<p>In order to prevent such attacks, both Nginx and Apache 2.4+ strip all headers\ncontaining underscores from incoming requests by default. Django\u2019s built-in\ndevelopment server now does the same. Django\u2019s development server is not\nrecommended for production use, but matching the behavior of common production\nservers reduces the surface area for behavior changes during deployment.</p>\n</div>\n<div class=\"section\" id=\"s-mitigated-possible-xss-attack-via-user-supplied-redirect-urls\">\n<span id=\"mitigated-possible-xss-attack-via-user-supplied-redirect-urls\"></span><h2>Mitigated possible XSS attack via user-supplied redirect URLs<a class=\"headerlink\" href=\"#mitigated-possible-xss-attack-via-user-supplied-redirect-urls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django relies on user input in some cases (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.login()</span></code> and <a class=\"reference internal\" href=\"../../topics/i18n/\"><span class=\"doc\">i18n</span></a>)\nto redirect the user to an \u201con success\u201d URL. The security checks for these\nredirects (namely <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.http.is_safe_url()</span></code>) didn\u2019t strip leading\nwhitespace on the tested URL and as such considered URLs like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">\\njavascript:...</span></code> safe. If a developer relied on <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe_url()</span></code> to\nprovide safe redirect targets and put such a URL into a link, they could suffer\nfrom a XSS attack. This bug doesn\u2019t affect Django currently, since we only put\nthis URL into the <code class=\"docutils literal notranslate\"><span class=\"pre\">Location</span></code> response header and browsers seem to ignore\nJavaScript there.</p>\n</div>\n<div class=\"section\" id=\"s-denial-of-service-attack-against-django-views-static-serve\">\n<span id=\"denial-of-service-attack-against-django-views-static-serve\"></span><h2>Denial-of-service attack against <code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.static.serve</span></code><a class=\"headerlink\" href=\"#denial-of-service-attack-against-django-views-static-serve\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In older versions of Django, the <a class=\"reference internal\" href=\"../../ref/views/#django.views.static.serve\" title=\"django.views.static.serve\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.views.static.serve()</span></code></a> view read\nthe files it served one line at a time. Therefore, a big file with no newlines\nwould result in memory usage equal to the size of that file. An attacker could\nexploit this and launch a denial-of-service attack by simultaneously requesting\nmany large files. This view now reads the file in chunks to prevent large\nmemory usage.</p>\n<p>Note, however, that this view has always carried a warning that it is not\nhardened for production use and should be used only as a development aid. Now\nmay be a good time to audit your project and serve your files in production\nusing a real front-end web server if you are not doing so.</p>\n</div>\n<div class=\"section\" id=\"s-database-denial-of-service-with-modelmultiplechoicefield\">\n<span id=\"database-denial-of-service-with-modelmultiplechoicefield\"></span><h2>Database denial-of-service with <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code><a class=\"headerlink\" href=\"#database-denial-of-service-with-modelmultiplechoicefield\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Given a form that uses <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">show_hidden_initial=True</span></code> (not a documented API), it was possible for a user\nto cause an unreasonable number of SQL queries by submitting duplicate values\nfor the field\u2019s data. The validation logic in <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code> now\ndeduplicates submitted values to address this issue.</p>\n</div>\n<div class=\"section\" id=\"s-bugfixes\">\n<span id=\"bugfixes\"></span><h2>Bugfixes<a class=\"headerlink\" href=\"#bugfixes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>The default iteration count for the PBKDF2 password hasher has been\nincreased by 25%. This part of the normal major release process was\ninadvertently omitted in 1.7. This backwards compatible change will not\naffect users who have subclassed\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></code> to change the\ndefault value.</li>\n<li>Fixed a crash in the CSRF middleware when handling non-ASCII referer header\n(<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/23815\">#23815</a>).</li>\n<li>Fixed a crash in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.redirect_to_login</span></code> view when\npassing a <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse_lazy()</span></code> result on Python 3 (<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/24097\">#24097</a>).</li>\n<li>Added correct formats for Greek (<code class=\"docutils literal notranslate\"><span class=\"pre\">el</span></code>) (<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/23967\">#23967</a>).</li>\n<li>Fixed a migration crash when unapplying a migration where multiple operations\ninteract with the same model (<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/24110\">#24110</a>).</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.7.2", "Django 1.7.2 release notes", "N", "next"], ["releases/1.7.4", "Django 1.7.4 release notes", "P", "previous"]], "sourcename": "releases/1.7.3.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.7.3 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#wsgi-header-spoofing-via-underscore-dash-conflation\">WSGI header spoofing via underscore/dash conflation</a></li>\n<li><a class=\"reference internal\" href=\"#mitigated-possible-xss-attack-via-user-supplied-redirect-urls\">Mitigated possible XSS attack via user-supplied redirect URLs</a></li>\n<li><a class=\"reference internal\" href=\"#denial-of-service-attack-against-django-views-static-serve\">Denial-of-service attack against <code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.static.serve</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#database-denial-of-service-with-modelmultiplechoicefield\">Database denial-of-service with <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bugfixes\">Bugfixes</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.7.3", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
