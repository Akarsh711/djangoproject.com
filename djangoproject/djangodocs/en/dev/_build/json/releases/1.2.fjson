{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.2.1/", "title": "Django 1.2.1 release notes"}, "next": {"link": "../1.1.4/", "title": "Django 1.1.4 release notes"}, "title": "Django 1.2 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-2-release-notes\">\n<span id=\"django-1-2-release-notes\"></span><h1>Django 1.2 release notes<a class=\"headerlink\" href=\"#django-1-2-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>May 17, 2010.</em></p>\n<p>Welcome to Django 1.2!</p>\n<p>Nearly a year in the making, Django 1.2 packs an impressive list of <a class=\"reference internal\" href=\"#whats-new-1-2\"><span class=\"std std-ref\">new\nfeatures</span></a> and lots of bug fixes. These release notes cover\nthe new features, as well as important changes you\u2019ll want to be aware of when\nupgrading from Django 1.1 or older versions.</p>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.2 introduces several large, important new features, including:</p>\n<ul class=\"simple\">\n<li>Support for <a class=\"reference internal\" href=\"#support-for-multiple-databases\"><span class=\"std std-ref\">multiple database connections</span></a> in a single Django instance.</li>\n<li><a class=\"reference internal\" href=\"#model-validation\">Model validation</a> inspired by Django\u2019s form validation.</li>\n<li>Vastly <a class=\"reference internal\" href=\"#improved-csrf-protection\"><span class=\"std std-ref\">improved protection against Cross-Site Request Forgery</span></a> (CSRF).</li>\n<li>A new <a class=\"reference internal\" href=\"#messages-framework\"><span class=\"std std-ref\">user \u201cmessages\u201d framework</span></a> with support for\ncookie- and session-based message for both anonymous and authenticated users.</li>\n<li>Hooks for <a class=\"reference internal\" href=\"#object-level-permissions\">object-level permissions</a>, <a class=\"reference internal\" href=\"#permissions-for-anonymous-users\">permissions for anonymous users</a>,\nand <a class=\"reference internal\" href=\"#relaxed-requirements-for-usernames\"><span class=\"std std-ref\">more flexible username requirements</span></a>.</li>\n<li>Customization of email sending via <a class=\"reference internal\" href=\"#email-backends\">email backends</a>.</li>\n<li>New <a class=\"reference internal\" href=\"#new-in-1-2-smart-if\"><span class=\"std std-ref\">\u201csmart\u201d if template tag</span></a> which supports\ncomparison operators.</li>\n</ul>\n<p>These are just the highlights; full details and a complete list of features\n<a class=\"reference internal\" href=\"#whats-new-1-2\"><span class=\"std std-ref\">may be found below</span></a>.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference external\" href=\"https://github.com/djangoadvent/djangoadvent-articles\">Django Advent</a> covered the release of Django 1.2 with a series of\narticles and tutorials that cover some of the new features in depth.</p>\n</div>\n<p>Wherever possible these features have been introduced in a backwards-compatible\nmanner per <a class=\"reference internal\" href=\"../../misc/api-stability/\"><span class=\"doc\">our API stability policy</span></a> policy.</p>\n<p>However, a handful of features <em>have</em> changed in ways that, for some users, will be\nbackwards-incompatible. The big changes are:</p>\n<ul>\n<li><p class=\"first\">Support for Python 2.3 has been dropped. See the full notes\nbelow.</p>\n</li>\n<li><p class=\"first\">The new CSRF protection framework is not backwards-compatible with\nthe old system. Users of the old system will not be affected until\nthe old system is removed in Django 1.4.</p>\n<p>However, upgrading to the new CSRF protection framework requires a few\nimportant backwards-incompatible changes, detailed in <a class=\"reference internal\" href=\"#csrf-protection\">CSRF Protection</a>,\nbelow.</p>\n</li>\n<li><p class=\"first\">Authors of custom <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> subclasses should be\naware that a number of methods have had a change in prototype, detailed\nunder <a class=\"reference internal\" href=\"#get-db-prep-methods-on-field\">get_db_prep_*() methods on Field</a>, below.</p>\n</li>\n<li><p class=\"first\">The internals of template tags have changed somewhat; authors of custom\ntemplate tags that need to store state (e.g. custom control flow tags)\nshould ensure that their code follows the new rules for <a class=\"reference internal\" href=\"#stateful-template-tags\">stateful template\ntags</a></p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.decorators.user_passes_test\" title=\"django.contrib.auth.decorators.user_passes_test\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">user_passes_test()</span></code></a>,\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.decorators.login_required\" title=\"django.contrib.auth.decorators.login_required\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">login_required()</span></code></a>, and\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.decorators.permission_required\" title=\"django.contrib.auth.decorators.permission_required\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">permission_required()</span></code></a>, decorators\nfrom <a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a> only apply to functions and no longer\nwork on methods. There\u2019s a simple one-line fix <a class=\"reference internal\" href=\"#user-passes-test-login-required-permission-required\"><span class=\"std std-ref\">detailed below</span></a>.</p>\n</li>\n</ul>\n<p>Again, these are just the big features that will affect the most users. Users\nupgrading from previous versions of Django are heavily encouraged to consult\nthe complete list of <a class=\"reference internal\" href=\"#backwards-incompatible-changes-1-2\"><span class=\"std std-ref\">backwards-incompatible changes</span></a> and the list of <a class=\"reference internal\" href=\"#deprecated-features-1-2\"><span class=\"std std-ref\">deprecated\nfeatures</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>While not a new feature, it\u2019s important to note that Django 1.2\nintroduces the first shift in our Python compatibility policy since\nDjango\u2019s initial public debut. Previous Django releases were tested\nand supported on 2.x Python versions from 2.3 up; Django 1.2, however,\ndrops official support for Python 2.3. As such, the minimum Python\nversion required for Django is now 2.4, and Django is tested and\nsupported on Python 2.4, 2.5 and 2.6, and will be supported on the\nas-yet-unreleased Python 2.7.</p>\n<p>This change should affect only a small number of Django users, as most\noperating-system vendors today are shipping Python 2.4 or newer as\ntheir default version. If you\u2019re still using Python 2.3, however,\nyou\u2019ll need to stick to Django 1.1 until you can upgrade; per\n<a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">our support policy</span></a>, Django 1.1 will\ncontinue to receive security support until the release of Django 1.3.</p>\n<p>A roadmap for Django\u2019s overall 2.x Python support, and eventual\ntransition to Python 3.x, is currently being developed, and will be\nannounced prior to the release of Django 1.3.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-2\">\n<span id=\"s-whats-new-1-2\"></span><span id=\"what-s-new-in-django-1-2\"></span><span id=\"whats-new-1-2\"></span><h2>What\u2019s new in Django 1.2<a class=\"headerlink\" href=\"#what-s-new-in-django-1-2\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-support-for-multiple-databases\">\n<span id=\"s-id1\"></span><span id=\"support-for-multiple-databases\"></span><span id=\"id1\"></span><h3>Support for multiple databases<a class=\"headerlink\" href=\"#support-for-multiple-databases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.2 adds the ability to use <a class=\"reference internal\" href=\"../../topics/db/multi-db/\"><span class=\"doc\">more than one database</span></a> in your Django project. Queries can be issued at a\nspecific database with the <code class=\"docutils literal notranslate\"><span class=\"pre\">using()</span></code> method on <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> objects.\nIndividual objects can be saved to a specific database by providing a <code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code>\nargument when you call <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-model-validation\">\n<span id=\"model-validation\"></span><h3>Model validation<a class=\"headerlink\" href=\"#model-validation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Model instances now have support for <a class=\"reference internal\" href=\"../../ref/models/instances/#validating-objects\"><span class=\"std std-ref\">validating their own data</span></a>, and both model and form fields now accept configurable\nlists of <a class=\"reference internal\" href=\"../../ref/validators/\"><span class=\"doc\">validators</span></a> specifying reusable, encapsulated\nvalidation behavior. Note, however, that validation must still be performed\nexplicitly. Simply invoking a model instance\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method will not\nperform any validation of the instance\u2019s data.</p>\n</div>\n<div class=\"section\" id=\"s-improved-csrf-protection\">\n<span id=\"s-id2\"></span><span id=\"improved-csrf-protection\"></span><span id=\"id2\"></span><h3>Improved CSRF protection<a class=\"headerlink\" href=\"#improved-csrf-protection\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now has much improved protection against <a class=\"reference internal\" href=\"../../ref/csrf/\"><span class=\"doc\">Cross-Site Request Forgery\n(CSRF) attacks</span></a>. This type of attack occurs when a malicious\nwebsite contains a link, a form button or some JavaScript that is intended to\nperform some action on your website, using the credentials of a logged-in user\nwho visits the malicious site in their browser. A related type of attack, \u201clogin\nCSRF,\u201d where an attacking site tricks a user\u2019s browser into logging into a site\nwith someone else\u2019s credentials, is also covered.</p>\n</div>\n<div class=\"section\" id=\"s-messages-framework\">\n<span id=\"s-id3\"></span><span id=\"messages-framework\"></span><span id=\"id3\"></span><h3>Messages framework<a class=\"headerlink\" href=\"#messages-framework\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now includes a robust and configurable <a class=\"reference internal\" href=\"../../ref/contrib/messages/\"><span class=\"doc\">messages framework</span></a> with built-in support for cookie- and session-based\nmessaging, for both anonymous and authenticated clients. The messages framework\nreplaces the deprecated user message API and allows you to temporarily store\nmessages in one request and retrieve them for display in a subsequent request\n(usually the next one).</p>\n</div>\n<div class=\"section\" id=\"s-object-level-permissions\">\n<span id=\"object-level-permissions\"></span><h3>Object-level permissions<a class=\"headerlink\" href=\"#object-level-permissions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A foundation for specifying permissions at the per-object level has been added.\nAlthough there is no implementation of this in core, a custom authentication\nbackend can provide this implementation and it will be used by\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.User</span></code></a>. See the <a class=\"reference internal\" href=\"../../topics/auth/\"><span class=\"doc\">authentication docs</span></a> for more information.</p>\n</div>\n<div class=\"section\" id=\"s-permissions-for-anonymous-users\">\n<span id=\"permissions-for-anonymous-users\"></span><h3>Permissions for anonymous users<a class=\"headerlink\" href=\"#permissions-for-anonymous-users\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you provide a custom auth backend with <code class=\"docutils literal notranslate\"><span class=\"pre\">supports_anonymous_user</span></code> set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, AnonymousUser will check the backend for permissions, just like\nUser already did.  This is useful for centralizing permission handling - apps\ncan always delegate the question of whether something is allowed or not to\nthe authorization/authentication backend. See the <a class=\"reference internal\" href=\"../../topics/auth/\"><span class=\"doc\">authentication\ndocs</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-relaxed-requirements-for-usernames\">\n<span id=\"s-id4\"></span><span id=\"relaxed-requirements-for-usernames\"></span><span id=\"id4\"></span><h3>Relaxed requirements for usernames<a class=\"headerlink\" href=\"#relaxed-requirements-for-usernames\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The built-in <a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> model\u2019s\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.username\" title=\"django.contrib.auth.models.User.username\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">username</span></code></a> field now allows a wider range\nof characters, including <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">+</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">-</span></code> characters.</p>\n</div>\n<div class=\"section\" id=\"s-email-backends\">\n<span id=\"email-backends\"></span><h3>Email backends<a class=\"headerlink\" href=\"#email-backends\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can now <a class=\"reference internal\" href=\"../../topics/email/#topic-email-backends\"><span class=\"std std-ref\">configure the way that Django sends email</span></a>. Instead of using SMTP to send all email, you\ncan now choose a configurable email backend to send messages. If your\nhosting provider uses a sandbox or some other non-SMTP technique for\nsending mail, you can now construct an email backend that will allow\nDjango\u2019s standard <a class=\"reference internal\" href=\"../../topics/email/\"><span class=\"doc\">mail sending methods</span></a> to use\nthose facilities.</p>\n<p>This also makes it easier to debug mail sending. Django ships with\nbackend implementations that allow you to send email to a\n<a class=\"reference internal\" href=\"../../topics/email/#topic-email-file-backend\"><span class=\"std std-ref\">file</span></a>, to the\n<a class=\"reference internal\" href=\"../../topics/email/#topic-email-console-backend\"><span class=\"std std-ref\">console</span></a>, or to\n<a class=\"reference internal\" href=\"../../topics/email/#topic-email-memory-backend\"><span class=\"std std-ref\">memory</span></a>. You can even configure all\nemail to be <a class=\"reference internal\" href=\"../../topics/email/#topic-email-dummy-backend\"><span class=\"std std-ref\">thrown away</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-smart-if-tag\">\n<span id=\"s-new-in-1-2-smart-if\"></span><span id=\"smart-if-tag\"></span><span id=\"new-in-1-2-smart-if\"></span><h3>\u201cSmart\u201d <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag<a class=\"headerlink\" href=\"#smart-if-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag has been upgraded to be much more powerful. First, we\u2019ve\nadded support for comparison operators. No longer will you have to type:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">ifnotequal</span> <span class=\"nv\">a</span> <span class=\"nv\">b</span> <span class=\"cp\">%}</span>\n ...\n<span class=\"cp\">{%</span> <span class=\"k\">endifnotequal</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can now do this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">a</span> <span class=\"o\">!=</span> <span class=\"nv\">b</span> <span class=\"cp\">%}</span>\n ...\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>There\u2019s really no reason to use <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">ifequal</span> <span class=\"pre\">%}</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">ifnotequal</span> <span class=\"pre\">%}</span></code>\nanymore, unless you\u2019re the nostalgic type.</p>\n<p>The operators supported are <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">!=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></code>, all of which work like the Python operators, in addition\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">not</span></code>, which were already supported.</p>\n<p>Also, filters may now be used in the <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> expression. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">user.email</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"o\">==</span> <span class=\"nv\">message.recipient</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"cp\">%}</span>\n    <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;highlight&quot;</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">message</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-template-caching\">\n<span id=\"template-caching\"></span><h3>Template caching<a class=\"headerlink\" href=\"#template-caching\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In previous versions of Django, every time you rendered a template, it\nwould be reloaded from disk. In Django 1.2, you can use a <a class=\"reference internal\" href=\"../../ref/templates/api/#template-loaders\"><span class=\"std std-ref\">cached\ntemplate loader</span></a> to load templates once, then\ncache the result for every subsequent render. This can lead to a\nsignificant performance improvement if your templates are broken into\nlots of smaller subtemplates (using the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">%}</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span>\n<span class=\"pre\">include</span> <span class=\"pre\">%}</span></code> tags).</p>\n<p>As a side effect, it is now much easier to support non-Django template\nlanguages.</p>\n</div>\n<div class=\"section\" id=\"s-class-based-template-loaders\">\n<span id=\"class-based-template-loaders\"></span><h3>Class-based template loaders<a class=\"headerlink\" href=\"#class-based-template-loaders\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As part of the changes made to introduce <a class=\"reference internal\" href=\"#template-caching\">Template caching</a>  and following\na general trend in Django, the template loaders API has been modified\nto use template loading mechanisms that are encapsulated in Python classes as\nopposed to functions, the only method available until Django 1.1.</p>\n<p>All the template loaders <a class=\"reference internal\" href=\"../../ref/templates/api/#template-loaders\"><span class=\"std std-ref\">shipped with Django</span></a> have\nbeen ported to the new API but they still implement the function-based API and\nthe template core machinery still accepts function-based loaders (builtin or\nthird party) so there is no immediate need to modify your <code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_LOADERS</span></code>\nsetting in existing projects, things will keep working if you leave it\nuntouched up to and including the Django 1.3 release.</p>\n<p>If you have developed your own custom template loaders we suggest to consider\nporting them to a class-based implementation because the code for backwards\ncompatibility with function-based loaders starts its deprecation process in\nDjango 1.2 and will be removed in Django 1.4.  There is a description of the\nAPI these loader classes must implement in the template API reference and you\ncan also examine the source code of the loaders shipped with Django.</p>\n</div>\n<div class=\"section\" id=\"s-natural-keys-in-fixtures\">\n<span id=\"natural-keys-in-fixtures\"></span><h3>Natural keys in fixtures<a class=\"headerlink\" href=\"#natural-keys-in-fixtures\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Fixtures can now refer to remote objects using\n<a class=\"reference internal\" href=\"../../topics/serialization/#topics-serialization-natural-keys\"><span class=\"std std-ref\">Natural keys</span></a>. This lookup scheme is an\nalternative to the normal primary-key based object references in a\nfixture, improving readability and resolving problems referring to\nobjects whose primary key value may not be predictable or known.</p>\n</div>\n<div class=\"section\" id=\"s-fast-failure-for-tests\">\n<span id=\"fast-failure-for-tests\"></span><h3>Fast failure for tests<a class=\"headerlink\" href=\"#fast-failure-for-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Both the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-test\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">test</span></code></a> subcommand of <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin.py</span></code> and the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code> script used to run Django\u2019s own test suite now support a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--failfast</span></code> option. When specified, this option causes the test runner to\nexit after encountering a failure instead of continuing with the test run. In\naddition, the handling of <code class=\"docutils literal notranslate\"><span class=\"pre\">Ctrl-C</span></code> during a test run has been improved to\ntrigger a graceful exit from the test run that reports details of the tests that\nwere run before the interruption.</p>\n</div>\n<div class=\"section\" id=\"s-bigintegerfield\">\n<span id=\"bigintegerfield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BigIntegerField</span></code><a class=\"headerlink\" href=\"#bigintegerfield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Models can now use a 64-bit <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.BigIntegerField\" title=\"django.db.models.BigIntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BigIntegerField</span></code></a> type.</p>\n</div>\n<div class=\"section\" id=\"s-improved-localization\">\n<span id=\"improved-localization\"></span><h3>Improved localization<a class=\"headerlink\" href=\"#improved-localization\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s <a class=\"reference internal\" href=\"../../topics/i18n/\"><span class=\"doc\">internationalization framework</span></a> has been expanded\nwith locale-aware formatting and form processing. That means, if enabled, dates\nand numbers on templates will be displayed using the format specified for the\ncurrent locale. Django will also use localized formats when parsing data in\nforms. See <a class=\"reference internal\" href=\"../../topics/i18n/formatting/\"><span class=\"doc\">Format localization</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-readonly-fields-in-modeladmin\">\n<span id=\"readonly-fields-in-modeladmin\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">readonly_fields</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code><a class=\"headerlink\" href=\"#readonly-fields-in-modeladmin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.readonly_fields\" title=\"django.contrib.admin.ModelAdmin.readonly_fields\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.ModelAdmin.readonly_fields</span></code></a> has been added to\nenable non-editable fields in add/change pages for models and inlines. Field\nand calculated values can be displayed alongside editable fields.</p>\n</div>\n<div class=\"section\" id=\"s-customizable-syntax-highlighting\">\n<span id=\"customizable-syntax-highlighting\"></span><h3>Customizable syntax highlighting<a class=\"headerlink\" href=\"#customizable-syntax-highlighting\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can now use a <span class=\"target\" id=\"index-0\"></span><a class=\"reference internal\" href=\"../../ref/django-admin/#envvar-DJANGO_COLORS\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_COLORS</span></code></a> environment variable to modify or\ndisable the colors used by <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin.py</span></code> to provide <a class=\"reference internal\" href=\"../../ref/django-admin/#syntax-coloring\"><span class=\"std std-ref\">syntax\nhighlighting</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-syndication-feeds-as-views\">\n<span id=\"syndication-feeds-as-views\"></span><h3>Syndication feeds as views<a class=\"headerlink\" href=\"#syndication-feeds-as-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/contrib/syndication/\"><span class=\"doc\">Syndication feeds</span></a> can now be used directly as\nviews in your <a class=\"reference internal\" href=\"../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a>. This means that you can\nmaintain complete control over the URL structure of your feeds. Like any other\nview, feeds views are passed a <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> object, so you can do anything you\nwould normally do with a view, like user based access control, or making a feed\na named URL.</p>\n</div>\n<div class=\"section\" id=\"s-geodjango\">\n<span id=\"geodjango\"></span><h3>GeoDjango<a class=\"headerlink\" href=\"#geodjango\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The most significant new feature for <a class=\"reference internal\" href=\"../../ref/contrib/gis/\"><span class=\"doc\">GeoDjango</span></a>\nin 1.2 is support for multiple spatial databases.  As a result,\nthe following <a class=\"reference internal\" href=\"../../ref/contrib/gis/db-api/#spatial-backends\"><span class=\"std std-ref\">spatial database backends</span></a>\nare now included:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends.postgis</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends.mysql</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends.oracle</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends.spatialite</span></code></li>\n</ul>\n<p>GeoDjango now supports the rich capabilities added in the PostGIS 1.5 release.\nNew features include support for the <a class=\"reference internal\" href=\"../../ref/contrib/gis/model-api/#geography-type\"><span class=\"std std-ref\">geography type</span></a>\nand enabling of <a class=\"reference internal\" href=\"../../ref/contrib/gis/db-api/#distance-queries\"><span class=\"std std-ref\">distance queries</span></a>\nwith non-point geometries on geographic coordinate systems.</p>\n<p>Support for 3D geometry fields was added, and may be enabled\nby setting the <a class=\"reference internal\" href=\"../../ref/contrib/gis/model-api/#django.contrib.gis.db.models.GeometryField.dim\" title=\"django.contrib.gis.db.models.GeometryField.dim\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">dim</span></code></a>\nkeyword to 3 in your <a class=\"reference internal\" href=\"../../ref/contrib/gis/model-api/#django.contrib.gis.db.models.GeometryField\" title=\"django.contrib.gis.db.models.GeometryField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeometryField</span></code></a>.\nThe <a class=\"reference internal\" href=\"../../ref/contrib/gis/geoquerysets/#django.contrib.gis.db.models.Extent3D\" title=\"django.contrib.gis.db.models.Extent3D\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Extent3D</span></code></a> aggregate\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">extent3d()</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> method were added as a part of this feature.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">force_rhr()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse_geom()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">geohash()</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code>\nmethods are new.</p>\n<p>The GEOS interface was updated to use thread-safe C library functions when\navailable on the platform.</p>\n<p>The GDAL interface now allows the user to set a\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/gdal/#django.contrib.gis.gdal.Layer.spatial_filter\" title=\"django.contrib.gis.gdal.Layer.spatial_filter\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">spatial_filter</span></code></a> on the features returned\nwhen iterating over a <a class=\"reference internal\" href=\"../../ref/contrib/gis/gdal/#django.contrib.gis.gdal.Layer\" title=\"django.contrib.gis.gdal.Layer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Layer</span></code></a>.</p>\n<p>Finally, <a class=\"reference internal\" href=\"../../ref/contrib/gis/\"><span class=\"doc\">GeoDjango\u2019s documentation</span></a> is now\nincluded with Django\u2019s and is no longer hosted separately at <code class=\"docutils literal notranslate\"><span class=\"pre\">geodjango.org</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-javascript-assisted-handling-of-inline-related-objects-in-the-admin\">\n<span id=\"s-js-assisted-inlines\"></span><span id=\"javascript-assisted-handling-of-inline-related-objects-in-the-admin\"></span><span id=\"js-assisted-inlines\"></span><h3>JavaScript-assisted handling of inline related objects in the admin<a class=\"headerlink\" href=\"#javascript-assisted-handling-of-inline-related-objects-in-the-admin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If a user has JavaScript enabled in their browser, the interface for\ninline objects in the admin now allows inline objects to be\ndynamically added and removed. Users without JavaScript-enabled\nbrowsers will see no change in the behavior of inline objects.</p>\n</div>\n<div class=\"section\" id=\"s-new-now-template-tag-format-specifier-characters-c-and-u\">\n<span id=\"new-now-template-tag-format-specifier-characters-c-and-u\"></span><h3>New <code class=\"docutils literal notranslate\"><span class=\"pre\">now</span></code> template tag format specifier characters: <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code><a class=\"headerlink\" href=\"#new-now-template-tag-format-specifier-characters-c-and-u\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The argument to the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-now\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">now</span></code></a> has gained two new format characters:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code> to specify that a datetime value should be formatted in ISO 8601\nformat, and <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code> that allows output of the microseconds part of a\ndatetime or time value.</p>\n<p>These are also available in others parts like the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-date\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">date</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-time\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">time</span></code></a> template filters, the <code class=\"docutils literal notranslate\"><span class=\"pre\">humanize</span></code> template tag library\nand the new <a class=\"reference internal\" href=\"#improved-localization\">format localization</a> framework.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-2\">\n<span id=\"s-backwards-incompatible-changes-1-2\"></span><span id=\"backwards-incompatible-changes-in-1-2\"></span><span id=\"backwards-incompatible-changes-1-2\"></span><h2>Backwards-incompatible changes in 1.2<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-2\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Wherever possible the new features above have been introduced in a\nbackwards-compatible manner per <a class=\"reference internal\" href=\"../../misc/api-stability/\"><span class=\"doc\">our API stability policy</span></a> policy. This means that practically all existing\ncode which worked with Django 1.1 will continue to work with Django\n1.2; such code will, however, begin issuing warnings (see below for\ndetails).</p>\n<p>However, a handful of features <em>have</em> changed in ways that, for some\nusers, will be immediately backwards-incompatible. Those changes are\ndetailed below.</p>\n<div class=\"section\" id=\"s-csrf-protection\">\n<span id=\"csrf-protection\"></span><h3>CSRF Protection<a class=\"headerlink\" href=\"#csrf-protection\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We\u2019ve made large changes to the way CSRF protection works, detailed in\n<a class=\"reference internal\" href=\"../../ref/csrf/\"><span class=\"doc\">the CSRF documentation</span></a>. Here are the major changes you\nshould be aware of:</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfResponseMiddleware</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfMiddleware</span></code> have been deprecated and\nwill be removed completely in Django 1.4, in favor of a template tag that\nshould be inserted into forms.</p>\n</li>\n<li><p class=\"first\">All contrib apps use a <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code> decorator to protect the view. This\nrequires the use of the <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code> template tag in the template. If you\nhave used custom templates for contrib views, you MUST READ THE UPGRADE\nINSTRUCTIONS to fix those templates.</p>\n<div class=\"admonition-documentation-removed admonition\">\n<p class=\"first admonition-title\">Documentation removed</p>\n<p class=\"last\">The upgrade notes have been removed in current Django docs. Please refer\nto the docs for Django 1.3 or older to find these instructions.</p>\n</div>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> is included in <code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code> by\ndefault. This turns on CSRF protection by default, so views that accept\nPOST requests need to be written to work with the middleware. Instructions\non how to do this are found in the CSRF docs.</p>\n</li>\n<li><p class=\"first\">All of the CSRF has moved from contrib to core (with backwards\ncompatible imports in the old locations, which are deprecated and\nwill cease to be supported in Django 1.4).</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-get-db-prep-methods-on-field\">\n<span id=\"get-db-prep-methods-on-field\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_*()</span></code> methods on <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code><a class=\"headerlink\" href=\"#get-db-prep-methods-on-field\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.2, a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> had the option of defining\nseveral functions to support conversion of Python values into\ndatabase-compatible values. A custom field might look something like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CustomModelField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lookup_type</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>In 1.2, these three methods have undergone a change in prototype, and\ntwo extra methods have been introduced:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CustomModelField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lookup_type</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">prepared</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_db_prep_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lookup_type</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">prepared</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>These changes are required to support multiple databases \u2013\n<code class=\"docutils literal notranslate\"><span class=\"pre\">db_type</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_*</span></code> can no longer make any assumptions\nregarding the database for which it is preparing. The <code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code>\nargument now provides the preparation methods with the specific\nconnection for which the value is being prepared.</p>\n<p>The two new methods exist to differentiate general data-preparation\nrequirements from requirements that are database-specific. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">prepared</span></code> argument is used to indicate to the database-preparation\nmethods whether generic value preparation has been performed. If\nan unprepared (i.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">prepared=False</span></code>) value is provided to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_*()</span></code> calls, they should invoke the corresponding\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_prep_*()</span></code> calls to perform generic data preparation.</p>\n<p>We\u2019ve provided conversion functions that will transparently\nconvert functions adhering to the old prototype into functions\ncompatible with the new prototype. However, these conversion functions\nwill be removed in Django 1.4, so you should upgrade your <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>\ndefinitions to use the new prototype as soon as possible.</p>\n<p>If your <code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_*()</span></code> methods made no use of the database\nconnection, you should be able to upgrade by renaming\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_value()</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_prep_value()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_lookup()</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_prep_lookup()</span></code>. If you require\ndatabase specific conversions, then you will need to provide an\nimplementation <code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_*</span></code> that uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code>\nargument to resolve database-specific values.</p>\n</div>\n<div class=\"section\" id=\"s-stateful-template-tags\">\n<span id=\"stateful-template-tags\"></span><h3>Stateful template tags<a class=\"headerlink\" href=\"#stateful-template-tags\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Template tags that store rendering state on their <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> subclass\nhave always been vulnerable to thread-safety and other issues; as of\nDjango 1.2, however, they may also cause problems when used with the\nnew <a class=\"reference internal\" href=\"../../ref/templates/api/#template-loaders\"><span class=\"std std-ref\">cached template loader</span></a>.</p>\n<p>All of the built-in Django template tags are safe to use with the cached\nloader, but if you\u2019re using custom template tags that come from third\nparty packages, or from your own code, you should ensure that the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> implementation for each tag is thread-safe. For more\ninformation, see\n<a class=\"reference internal\" href=\"../../howto/custom-template-tags/#template-tag-thread-safety\"><span class=\"std std-ref\">template tag thread safety considerations</span></a>.</p>\n<p>You may also need to update your templates if you were relying on the\nimplementation of Django\u2019s template tags <em>not</em> being thread safe. The\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> tag is the most likely to be affected in this way,\nespecially when used in conjunction with the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag.\nConsider the following template fragment:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">object</span> <span class=\"k\">in</span> <span class=\"nv\">object_list</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;subtemplate.html&quot;</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>with a <code class=\"docutils literal notranslate\"><span class=\"pre\">subtemplate.html</span></code> that reads:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;even&#39;</span> <span class=\"s1\">&#39;odd&#39;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Using the non-thread-safe, pre-Django 1.2 renderer, this would output:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>even odd even odd ...\n</pre></div>\n</div>\n<p>Using the thread-safe Django 1.2 renderer, you will instead get:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>even even even even ...\n</pre></div>\n</div>\n<p>This is because each rendering of the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag is an\nindependent rendering. When the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> tag was not thread safe,\nthe state of the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> tag would leak between multiple\nrenderings of the same <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a>. Now that the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> tag\nis thread safe, this leakage no longer occurs.</p>\n</div>\n<div class=\"section\" id=\"s-user-passes-test-login-required-and-permission-required\">\n<span id=\"s-user-passes-test-login-required-permission-required\"></span><span id=\"user-passes-test-login-required-and-permission-required\"></span><span id=\"user-passes-test-login-required-permission-required\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">user_passes_test</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">login_required</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">permission_required</span></code><a class=\"headerlink\" href=\"#user-passes-test-login-required-and-permission-required\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.decorators</span></code> provides the decorators\n<code class=\"docutils literal notranslate\"><span class=\"pre\">login_required</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">permission_required</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">user_passes_test</span></code>. Previously it was possible to use these\ndecorators both on functions (where the first argument is \u2018request\u2019)\nand on methods (where the first argument is \u2018self\u2019, and the second\nargument is \u2018request\u2019). Unfortunately, flaws were discovered in the\ncode supporting this: it only works in limited circumstances, and\nproduces errors that are very difficult to debug when it does not\nwork.</p>\n<p>For this reason, the \u2018auto adapt\u2019 behavior has been removed, and if\nyou are using these decorators on methods, you will need to manually\napply <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.decorators.method_decorator\" title=\"django.utils.decorators.method_decorator\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.decorators.method_decorator()</span></code></a> to convert the\ndecorator to one that works with methods. For example, you would\nchange code from this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@login_required</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>to this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">method_decorator</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>or:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">method_decorator</span>\n\n<span class=\"n\">login_required_m</span> <span class=\"o\">=</span> <span class=\"n\">method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyClass</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"nd\">@login_required_m</span>\n    <span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>For those of you who\u2019ve been following the development trunk, this\nchange also applies to other decorators introduced since 1.1,\nincluding <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">cache_control</span></code> and anything created\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">decorator_from_middleware</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-if-tag-changes\">\n<span id=\"if-tag-changes\"></span><h3><a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag changes<a class=\"headerlink\" href=\"#if-tag-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Due to new features in the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> template tag, it no longer\naccepts \u2018and\u2019, \u2018or\u2019 and \u2018not\u2019 as valid <strong>variable</strong> names. Previously,\nthese strings could be used as variable names. Now, the keyword status\nis always enforced, and template code such as <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">if</span> <span class=\"pre\">not</span> <span class=\"pre\">%}</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span>\n<span class=\"pre\">if</span> <span class=\"pre\">and</span> <span class=\"pre\">%}</span></code> will throw a <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateSyntaxError</span></code>. Also, <code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code> is a\nnew keyword and so is not a valid variable name in this tag.</p>\n</div>\n<div class=\"section\" id=\"s-lazyobject\">\n<span id=\"lazyobject\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code><a class=\"headerlink\" href=\"#lazyobject\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code> is an undocumented-but-often-used utility class used for lazily\nwrapping other objects of unknown type.</p>\n<p>In Django 1.1 and earlier, it handled introspection in a non-standard way,\ndepending on wrapped objects implementing a public method named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_members()</span></code>. Since this could easily lead to name clashes, it has been\nchanged to use the standard Python introspection method, involving\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__members__</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">__dir__()</span></code>.</p>\n<p>If you used <code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code> in your own code\nand implemented the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_members()</span></code> method for wrapped objects, you\u2019ll need\nto make a couple of changes:</p>\n<p>First, if your class does not have special requirements for introspection (i.e.,\nyou have not implemented <code class=\"docutils literal notranslate\"><span class=\"pre\">__getattr__()</span></code> or other methods that allow for\nattributes not discoverable by normal mechanisms), you can simply remove the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_members()</span></code> method. The default implementation on <code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code> will\ndo the right thing.</p>\n<p>If you have more complex requirements for introspection, first rename the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_members()</span></code> method to <code class=\"docutils literal notranslate\"><span class=\"pre\">__dir__()</span></code>. This is the standard\nintrospection method for Python 2.6 and above. If you require support for Python\nversions earlier than 2.6, add the following code to the class:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">__members__</span> <span class=\"o\">=</span> <span class=\"nb\">property</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"fm\">__dir__</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-dict-on-model-instances\">\n<span id=\"dict-on-model-instances\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">__dict__</span></code> on model instances<a class=\"headerlink\" href=\"#dict-on-model-instances\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Historically, the <code class=\"docutils literal notranslate\"><span class=\"pre\">__dict__</span></code> attribute of a model instance has only contained\nattributes corresponding to the fields on a model.</p>\n<p>In order to support multiple database configurations, Django 1.2 has\nadded a <code class=\"docutils literal notranslate\"><span class=\"pre\">_state</span></code> attribute to object instances. This attribute will\nappear in <code class=\"docutils literal notranslate\"><span class=\"pre\">__dict__</span></code> for a model instance. If your code relies on\niterating over <code class=\"docutils literal notranslate\"><span class=\"pre\">__dict__</span></code> to obtain a list of fields, you must now\nbe prepared to handle or filter out the <code class=\"docutils literal notranslate\"><span class=\"pre\">_state</span></code> attribute.</p>\n</div>\n<div class=\"section\" id=\"s-test-runner-exit-status-code\">\n<span id=\"test-runner-exit-status-code\"></span><h3>Test runner exit status code<a class=\"headerlink\" href=\"#test-runner-exit-status-code\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The exit status code of the test runners (<code class=\"docutils literal notranslate\"><span class=\"pre\">tests/runtests.py</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span>\n<span class=\"pre\">manage.py</span> <span class=\"pre\">test</span></code>) no longer represents the number of failed tests, because a\nfailure of 256 or more tests resulted in a wrong exit status code. The exit\nstatus code for the test runner is now 0 for success (no failing tests) and 1\nfor any number of test failures. If needed, the number of test failures can be\nfound at the end of the test runner\u2019s output.</p>\n</div>\n<div class=\"section\" id=\"s-cookie-encoding\">\n<span id=\"cookie-encoding\"></span><h3>Cookie encoding<a class=\"headerlink\" href=\"#cookie-encoding\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To fix bugs with cookies in Internet Explorer, Safari, and possibly\nother browsers, our encoding of cookie values was changed so that the\ncomma and semicolon are treated as non-safe characters, and are\ntherefore encoded as <code class=\"docutils literal notranslate\"><span class=\"pre\">\\054</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">\\073</span></code> respectively.  This could\nproduce backwards incompatibilities, especially if you are storing\ncomma or semi-colon in cookies and have JavaScript code that parses\nand manipulates cookie values client-side.</p>\n</div>\n<div class=\"section\" id=\"s-modelform-is-valid-and-modelform-errors\">\n<span id=\"modelform-is-valid-and-modelform-errors\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.is_valid()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.errors</span></code><a class=\"headerlink\" href=\"#modelform-is-valid-and-modelform-errors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Much of the validation work for ModelForms has been moved down to the model\nlevel. As a result, the first time you call <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.is_valid()</span></code>, access\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.errors</span></code> or otherwise trigger form validation, your model will be\ncleaned in-place. This conversion used to happen when the model was saved. If\nyou need an unmodified instance of your model, you should pass a copy to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> constructor.</p>\n</div>\n<div class=\"section\" id=\"s-booleanfield-on-mysql\">\n<span id=\"booleanfield-on-mysql\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> on MySQL<a class=\"headerlink\" href=\"#booleanfield-on-mysql\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In previous versions of Django, a model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> under MySQL\nwould return its value as either <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>; for most people this wasn\u2019t a problem because <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>\nis a subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> in Python. In Django 1.2, however,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> on MySQL correctly returns a real <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>.  The only\ntime this should ever be an issue is if you were expecting the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">repr</span></code> of a <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> to print <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-changes-to-the-interpretation-of-max-num-in-formsets\">\n<span id=\"changes-to-the-interpretation-of-max-num-in-formsets\"></span><h3>Changes to the interpretation of <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> in FormSets<a class=\"headerlink\" href=\"#changes-to-the-interpretation-of-max-num-in-formsets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As part of enhancements made to the handling of FormSets, the default\nvalue and interpretation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> parameter to the\n<a class=\"reference internal\" href=\"../../topics/forms/formsets/#formsets-max-num\"><span class=\"std std-ref\">django.forms.formsets.formset_factory()</span></a> and\n<a class=\"reference internal\" href=\"../../topics/forms/modelforms/#model-formsets-max-num\"><span class=\"std std-ref\">django.forms.models.modelformset_factory()</span></a> functions has changed slightly. This\nchange also affects the way the\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin.max_num\" title=\"django.contrib.admin.InlineModelAdmin.max_num\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">max_num</span></code></a> argument is used for\ninline admin objects.</p>\n<p>Previously, the default value for <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> was <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> (zero).\nFormSets then used the boolean value of <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> to determine if a\nlimit was to be imposed on the number of generated forms. The default\nvalue of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> meant that there was no default limit on the number of\nforms in a FormSet.</p>\n<p>Starting with 1.2, the default value for <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> has been changed\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, and FormSets will differentiate between a value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> and a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>. A value of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> indicates that no\nlimit on the number of forms is to be imposed; a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>\nindicates that a maximum of 0 forms should be imposed. This doesn\u2019t\nnecessarily mean that no forms will be displayed \u2013 see the\n<a class=\"reference internal\" href=\"../../topics/forms/modelforms/#model-formsets-max-num\"><span class=\"std std-ref\">ModelFormSet documentation</span></a> for more\ndetails.</p>\n<p>If you were manually specifying a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code>, you\nwill need to update your FormSet and/or admin definitions.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"#js-assisted-inlines\"><span class=\"std std-ref\">JavaScript-assisted handling of inline related objects in the admin</span></a></p>\n</div>\n</div>\n<div class=\"section\" id=\"s-email-re\">\n<span id=\"email-re\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">email_re</span></code><a class=\"headerlink\" href=\"#email-re\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>An undocumented regular expression for validating email addresses has been moved\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">django.form.fields</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.validators</span></code>. You will need to\nupdate your imports if you are using it.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-2\">\n<span id=\"s-deprecated-features-1-2\"></span><span id=\"features-deprecated-in-1-2\"></span><span id=\"deprecated-features-1-2\"></span><h2>Features deprecated in 1.2<a class=\"headerlink\" href=\"#features-deprecated-in-1-2\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Finally, Django 1.2 deprecates some features from earlier releases.\nThese features are still supported, but will be gradually phased out\nover the next few release cycles.</p>\n<p>Code taking advantage of any of the features below will raise a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">PendingDeprecationWarning</span></code> in Django 1.2. This warning will be\nsilent by default, but may be turned on using Python\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/warnings.html#module-warnings\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code></a>\nmodule, or by running Python with a <code class=\"docutils literal notranslate\"><span class=\"pre\">-Wd</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">-Wall</span></code> flag.</p>\n<p>In Django 1.3, these warnings will become a <code class=\"docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>,\nwhich is <em>not</em> silent. In Django 1.4 support for these features will\nbe removed entirely.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">For more details, see the documentation <a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">Django\u2019s release process</span></a> and our <a class=\"reference internal\" href=\"../../internals/deprecation/\"><span class=\"doc\">deprecation timeline</span></a>.`</p>\n</div>\n<div class=\"section\" id=\"s-specifying-databases\">\n<span id=\"s-id5\"></span><span id=\"specifying-databases\"></span><span id=\"id5\"></span><h3>Specifying databases<a class=\"headerlink\" href=\"#specifying-databases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.2, Django used a number of settings to control\naccess to a single database. Django 1.2 introduces support for\nmultiple databases, and as a result the way you define database\nsettings has changed.</p>\n<p>Any existing Django settings file will continue to work as expected\nuntil Django 1.4. Until then, old-style database settings will be\nautomatically translated to the new-style format.</p>\n<p>In the old-style (pre 1.2) format, you had a number of <code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_</span></code>\nsettings in your settings file. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASE_NAME</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;test_db&quot;</span>\n<span class=\"n\">DATABASE_ENGINE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;postgresql_psycopg2&quot;</span>\n<span class=\"n\">DATABASE_USER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;myusername&quot;</span>\n<span class=\"n\">DATABASE_PASSWORD</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;s3krit&quot;</span>\n</pre></div>\n</div>\n<p>These settings are now in a dictionary named\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>. Each item in the dictionary corresponds to a\nsingle database connection, with the name <code class=\"docutils literal notranslate\"><span class=\"pre\">'default'</span></code> describing the\ndefault database connection. The setting names have also been\nshortened. The previous sample settings would now look like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;test_db&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.postgresql_psycopg2&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;USER&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;myusername&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;s3krit&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>This affects the following settings:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"54%\" />\n<col width=\"46%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Old setting</th>\n<th class=\"head\">New Setting</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_ENGINE</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ENGINE</span></code></a></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_HOST</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_NAME</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_OPTIONS</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_PASSWORD</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD</span></code></a></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_PORT</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">DATABASE_USER</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">TEST_DATABASE_CHARSET</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEST_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_CHARSET</span></code></a></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">TEST_DATABASE_COLLATION</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEST_COLLATION\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_COLLATION</span></code></a></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">TEST_DATABASE_NAME</span></code></td>\n<td><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEST_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_NAME</span></code></a></td>\n</tr>\n</tbody>\n</table>\n<p>These changes are also required if you have manually created a database\nconnection using <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseWrapper()</span></code> from your database backend of choice.</p>\n<p>In addition to the change in structure, Django 1.2 removes the special\nhandling for the built-in database backends. All database backends\nmust now be specified by a fully qualified module name (i.e.,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql_psycopg2</span></code>, rather than just\n<code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql_psycopg2</span></code>).</p>\n</div>\n<div class=\"section\" id=\"s-postgresql-database-backend\">\n<span id=\"postgresql-database-backend\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code> database backend<a class=\"headerlink\" href=\"#postgresql-database-backend\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">psycopg1</span></code> library has not been updated since October 2005. As a\nresult, the <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code> database backend, which uses this library,\nhas been deprecated.</p>\n<p>If you are currently using the <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code> backend, you should\nmigrate to using the <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql_psycopg2</span></code> backend. To update your\ncode, install the <code class=\"docutils literal notranslate\"><span class=\"pre\">psycopg2</span></code> library and change the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ENGINE</span></code></a> setting to use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql_psycopg2</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-csrf-response-rewriting-middleware\">\n<span id=\"csrf-response-rewriting-middleware\"></span><h3>CSRF response-rewriting middleware<a class=\"headerlink\" href=\"#csrf-response-rewriting-middleware\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfResponseMiddleware</span></code>, the middleware that automatically inserted\nCSRF tokens into <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> forms in outgoing pages, has been deprecated\nin favor of a template tag method (see above), and will be removed\ncompletely in Django 1.4. <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfMiddleware</span></code>, which includes the\nfunctionality of <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfResponseMiddleware</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code>, has likewise been deprecated.</p>\n<p>Also, the CSRF module has moved from contrib to core, and the old\nimports are deprecated, as described in the upgrading notes.</p>\n<div class=\"admonition-documentation-removed admonition\">\n<p class=\"first admonition-title\">Documentation removed</p>\n<p class=\"last\">The upgrade notes have been removed in current Django docs. Please refer\nto the docs for Django 1.3 or older to find these instructions.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-smtpconnection\">\n<span id=\"smtpconnection\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SMTPConnection</span></code><a class=\"headerlink\" href=\"#smtpconnection\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">SMTPConnection</span></code> class has been deprecated in favor of a generic\nemail backend API. Old code that explicitly instantiated an instance\nof an SMTPConnection:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">SMTPConnection</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">SMTPConnection</span><span class=\"p\">()</span>\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">get_notification_email</span><span class=\"p\">()</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026should now call <a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.get_connection\" title=\"django.core.mail.get_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_connection()</span></code></a> to\ninstantiate a generic email connection:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">get_connection</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">get_connection</span><span class=\"p\">()</span>\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">get_notification_email</span><span class=\"p\">()</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Depending on the value of the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_BACKEND\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_BACKEND</span></code></a> setting, this\nmay not return an SMTP connection. If you explicitly require an SMTP\nconnection with which to send email, you can explicitly request an\nSMTP connection:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">get_connection</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"s2\">&quot;django.core.mail.backends.smtp.EmailBackend&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">get_notification_email</span><span class=\"p\">()</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If your call to construct an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">SMTPConnection</span></code> required\nadditional arguments, those arguments can be passed to the\n<a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.get_connection\" title=\"django.core.mail.get_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_connection()</span></code></a> call:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;django.core.mail.backends.smtp.EmailBackend&quot;</span><span class=\"p\">,</span> <span class=\"n\">hostname</span><span class=\"o\">=</span><span class=\"s2\">&quot;localhost&quot;</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">1234</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-user-messages-api\">\n<span id=\"user-messages-api\"></span><h3>User Messages API<a class=\"headerlink\" href=\"#user-messages-api\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The API for storing messages in the user <code class=\"docutils literal notranslate\"><span class=\"pre\">Message</span></code> model (via\n<code class=\"docutils literal notranslate\"><span class=\"pre\">user.message_set.create</span></code>) is now deprecated and will be removed in Django\n1.4 according to the standard <a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">release process</span></a>.</p>\n<p>To upgrade your code, you need to replace any instances of this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">message_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">&quot;a message&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026with the following:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">messages</span>\n\n<span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">add_message</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a message&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Additionally, if you make use of the method, you need to replace the\nfollowing:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_and_delete_messages</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>\u2026with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">messages</span>\n\n<span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">get_messages</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>For more information, see the full\n<a class=\"reference internal\" href=\"../../ref/contrib/messages/\"><span class=\"doc\">messages documentation</span></a>. You should begin to\nupdate your code to use the new API immediately.</p>\n</div>\n<div class=\"section\" id=\"s-date-format-helper-functions\">\n<span id=\"date-format-helper-functions\"></span><h3>Date format helper functions<a class=\"headerlink\" href=\"#date-format-helper-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.translation.get_date_formats()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.translation.get_partial_date_formats()</span></code> have been deprecated\nin favor of the appropriate calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.formats.get_format()</span></code>,\nwhich is locale-aware when <code class=\"docutils literal notranslate\"><span class=\"pre\">USE_L10N</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, and falls\nback to default settings if set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<p>To get the different date formats, instead of writing this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">get_date_formats</span>\n\n<span class=\"n\">date_format</span><span class=\"p\">,</span> <span class=\"n\">datetime_format</span><span class=\"p\">,</span> <span class=\"n\">time_format</span> <span class=\"o\">=</span> <span class=\"n\">get_date_formats</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>\u2026use:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">formats</span>\n\n<span class=\"n\">date_format</span> <span class=\"o\">=</span> <span class=\"n\">formats</span><span class=\"o\">.</span><span class=\"n\">get_format</span><span class=\"p\">(</span><span class=\"s2\">&quot;DATE_FORMAT&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">datetime_format</span> <span class=\"o\">=</span> <span class=\"n\">formats</span><span class=\"o\">.</span><span class=\"n\">get_format</span><span class=\"p\">(</span><span class=\"s2\">&quot;DATETIME_FORMAT&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">time_format</span> <span class=\"o\">=</span> <span class=\"n\">formats</span><span class=\"o\">.</span><span class=\"n\">get_format</span><span class=\"p\">(</span><span class=\"s2\">&quot;TIME_FORMAT&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Or, when directly formatting a date value:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">formats</span>\n\n<span class=\"n\">value_formatted</span> <span class=\"o\">=</span> <span class=\"n\">formats</span><span class=\"o\">.</span><span class=\"n\">date_format</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DATETIME_FORMAT&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The same applies to the globals found in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.fields</span></code>:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">DEFAULT_DATE_INPUT_FORMATS</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">DEFAULT_TIME_INPUT_FORMATS</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">DEFAULT_DATETIME_INPUT_FORMATS</span></code></li>\n</ul>\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.formats.get_format()</span></code> to get the appropriate formats.</p>\n</div>\n<div class=\"section\" id=\"s-function-based-test-runners\">\n<span id=\"function-based-test-runners\"></span><h3>Function-based test runners<a class=\"headerlink\" href=\"#function-based-test-runners\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.2 changes the test runner tools to use a class-based\napproach. Old style function-based test runners will still work, but\nshould be updated to use the new <a class=\"reference internal\" href=\"../../topics/testing/advanced/#topics-testing-test-runner\"><span class=\"std std-ref\">class-based runners</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-feed-in-django-contrib-syndication-feeds\">\n<span id=\"s-updating-feeds\"></span><span id=\"feed-in-django-contrib-syndication-feeds\"></span><span id=\"updating-feeds\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication.feeds</span></code><a class=\"headerlink\" href=\"#feed-in-django-contrib-syndication-feeds\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication.feeds.Feed</span></code> class has been\nreplaced by the <a class=\"reference internal\" href=\"../../ref/contrib/syndication/#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication.views.Feed</span></code></a> class.\nThe old <code class=\"docutils literal notranslate\"><span class=\"pre\">feeds.Feed</span></code> class is deprecated, and will be removed in\nDjango 1.4.</p>\n<p>The new class has an almost identical API, but allows instances to be\nused as views. For example, consider the use of the old framework in\nthe following <a class=\"reference internal\" href=\"../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.defaults</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myproject.feeds</span> <span class=\"kn\">import</span> <span class=\"n\">LatestEntries</span><span class=\"p\">,</span> <span class=\"n\">LatestEntriesByCategory</span>\n\n<span class=\"n\">feeds</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;latest&quot;</span><span class=\"p\">:</span> <span class=\"n\">LatestEntries</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;categories&quot;</span><span class=\"p\">:</span> <span class=\"n\">LatestEntriesByCategory</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s2\">&quot;^feeds/(?P&lt;url&gt;.*)/$&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;django.contrib.syndication.views.feed&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span><span class=\"s2\">&quot;feed_dict&quot;</span><span class=\"p\">:</span> <span class=\"n\">feeds</span><span class=\"p\">},</span>\n    <span class=\"p\">),</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Using the new Feed class, these feeds can be deployed directly as views:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.defaults</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myproject.feeds</span> <span class=\"kn\">import</span> <span class=\"n\">LatestEntries</span><span class=\"p\">,</span> <span class=\"n\">LatestEntriesByCategory</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^feeds/latest/$&quot;</span><span class=\"p\">,</span> <span class=\"n\">LatestEntries</span><span class=\"p\">()),</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^feeds/categories/(?P&lt;category_id&gt;\\d+)/$&quot;</span><span class=\"p\">,</span> <span class=\"n\">LatestEntriesByCategory</span><span class=\"p\">()),</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you currently use the <code class=\"docutils literal notranslate\"><span class=\"pre\">feed()</span></code> view, the <code class=\"docutils literal notranslate\"><span class=\"pre\">LatestEntries</span></code> class would\noften not need to be modified apart from subclassing the new\n<a class=\"reference internal\" href=\"../../ref/contrib/syndication/#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class. The exception is if\nDjango was automatically working out the name of the template to use to render\nthe feed\u2019s description and title elements (if you were not specifying the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">title_template</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">description_template</span></code> attributes). You should ensure\nthat you always specify <code class=\"docutils literal notranslate\"><span class=\"pre\">title_template</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">description_template</span></code>\nattributes, or provide <code class=\"docutils literal notranslate\"><span class=\"pre\">item_title()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">item_description()</span></code> methods.</p>\n<p>However, <code class=\"docutils literal notranslate\"><span class=\"pre\">LatestEntriesByCategory</span></code> uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code> method\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">bits</span></code> argument to specify a specific category to show. In\nthe new <a class=\"reference internal\" href=\"../../ref/contrib/syndication/#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code> method takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> and arguments from the\nURL, so it would look like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.syndication.views</span> <span class=\"kn\">import</span> <span class=\"n\">Feed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myproject.models</span> <span class=\"kn\">import</span> <span class=\"n\">Category</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LatestEntriesByCategory</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">category_id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Category</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">category_id</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>Additionally, the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_feed()</span></code> method on <code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> classes now take\ndifferent arguments, which may impact you if you use the <code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code>\nclasses directly. Instead of just taking an optional <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> argument,\nit now takes two arguments: the object returned by its own\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code> method, and the current <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> object.</p>\n<p>To take into account <code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> classes not being initialized for each\nrequest, the <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method now takes no arguments by default.\nPreviously it would have taken the <code class=\"docutils literal notranslate\"><span class=\"pre\">slug</span></code> from the URL and the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> object.</p>\n<p>In accordance with <a class=\"reference external\" href=\"https://www.rssboard.org/rss-profile\">RSS best practices</a>, RSS feeds will now include\nan <code class=\"docutils literal notranslate\"><span class=\"pre\">atom:link</span></code> element. You may need to update your tests to take\nthis into account.</p>\n<p>For more information, see the full <a class=\"reference internal\" href=\"../../ref/contrib/syndication/\"><span class=\"doc\">syndication framework\ndocumentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-technical-message-ids\">\n<span id=\"technical-message-ids\"></span><h3>Technical message IDs<a class=\"headerlink\" href=\"#technical-message-ids\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Up to version 1.1 Django used technical message IDs\nto provide localizers the possibility to translate date and time formats. They\nwere translatable <a class=\"reference internal\" href=\"../../topics/i18n/#term-translation-string\"><span class=\"xref std std-term\">translation strings</span></a> that could\nbe recognized because they were all upper case (for example\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATETIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATETIME_FORMAT</span></code></a>, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATE_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATE_FORMAT</span></code></a>, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_FORMAT</span></code></a>).\nThey have been deprecated in favor of the new <a class=\"reference internal\" href=\"../../topics/i18n/formatting/\"><span class=\"doc\">Format localization</span></a>\ninfrastructure that allows localizers to specify that information in a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">formats.py</span></code> file in the corresponding <code class=\"docutils literal notranslate\"><span class=\"pre\">django/conf/locale/&lt;locale</span> <span class=\"pre\">name&gt;/</span></code>\ndirectory.</p>\n</div>\n<div class=\"section\" id=\"s-id6\">\n<span id=\"id6\"></span><h3>GeoDjango<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To allow support for multiple databases, the GeoDjango database internals were\nchanged substantially.  The largest backwards-incompatible change is that\nthe module <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backend</span></code> was renamed to\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/db-api/#module-django.contrib.gis.db.backends\" title=\"django.contrib.gis.db.backends: GeoDjango's spatial database backends.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends</span></code></a>, where the full-fledged\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/db-api/#spatial-backends\"><span class=\"std std-ref\">spatial database backends</span></a> now exist.  The\nfollowing sections provide information on the most-popular APIs that\nwere affected by these changes.</p>\n<div class=\"section\" id=\"s-spatialbackend\">\n<span id=\"spatialbackend\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialBackend</span></code><a class=\"headerlink\" href=\"#spatialbackend\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Prior to the creation of the separate spatial backends, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backend.SpatialBackend</span></code> object was\nprovided as an abstraction to introspect on the capabilities of\nthe spatial database.  All of the attributes and routines provided by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialBackend</span></code> are now a part of the <code class=\"docutils literal notranslate\"><span class=\"pre\">ops</span></code> attribute of the\ndatabase backend.</p>\n<p>The old module <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backend</span></code> is still provided\nfor backwards-compatibility access to a <code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialBackend</span></code> object,\nwhich is just an alias to the <code class=\"docutils literal notranslate\"><span class=\"pre\">ops</span></code> module of the\n<em>default</em> spatial database connection.</p>\n<p>Users that were relying on undocumented modules and objects\nwithin <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backend</span></code>, rather the abstractions\nprovided by <code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialBackend</span></code>, are required to modify their code.\nFor example, the following import which would work in 1.1 and\nbelow:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.gis.db.backend.postgis</span> <span class=\"kn\">import</span> <span class=\"n\">PostGISAdaptor</span>\n</pre></div>\n</div>\n<p>Would need to be changed:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n\n<span class=\"n\">PostGISAdaptor</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">Adapter</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-spatialrefsys-and-geometrycolumns-models\">\n<span id=\"spatialrefsys-and-geometrycolumns-models\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialRefSys</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryColumns</span></code> models<a class=\"headerlink\" href=\"#spatialrefsys-and-geometrycolumns-models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In previous versions of GeoDjango, <a class=\"reference internal\" href=\"../../ref/contrib/gis/model-api/#module-django.contrib.gis.db.models\" title=\"django.contrib.gis.db.models: GeoDjango model and field API.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.models</span></code></a>\nhad <code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialRefSys</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryColumns</span></code> models for querying\nthe OGC spatial metadata tables <code class=\"docutils literal notranslate\"><span class=\"pre\">spatial_ref_sys</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">geometry_columns</span></code>,\nrespectively.</p>\n<p>While these aliases are still provided, they are only for the\n<em>default</em> database connection and exist only if the default connection\nis using a supported spatial database backend.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Because the table structure of the OGC spatial metadata tables\ndiffers across spatial databases, the <code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialRefSys</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryColumns</span></code> models can no longer be associated with\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">gis</span></code> application name.  Thus, no models will be returned\nwhen using the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_models</span></code> method in the following example:</p>\n<div class=\"last highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">get_app</span><span class=\"p\">,</span> <span class=\"n\">get_models</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">get_models</span><span class=\"p\">(</span><span class=\"n\">get_app</span><span class=\"p\">(</span><span class=\"s2\">&quot;gis&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">[]</span>\n</pre></div>\n</div>\n</div>\n<p>To get the correct <code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialRefSys</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryColumns</span></code>\nfor your spatial database use the methods provided by the spatial backend:</p>\n<blockquote>\n<div><div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connections</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SpatialRefSys</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"s2\">&quot;my_spatialite&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">spatial_ref_sys</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">GeometryColumns</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"s2\">&quot;my_postgis&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">geometry_columns</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div></blockquote>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>When using the models returned from the <code class=\"docutils literal notranslate\"><span class=\"pre\">spatial_ref_sys()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">geometry_columns()</span></code> method, you\u2019ll still need to use the\ncorrect database alias when querying on the non-default connection.\nIn other words, to ensure that the models in the example above\nuse the correct database:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">sr_qs</span> <span class=\"o\">=</span> <span class=\"n\">SpatialRefSys</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_spatialite&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">gc_qs</span> <span class=\"o\">=</span> <span class=\"n\">GeometryColumns</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_postgis&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-language-code-no\">\n<span id=\"language-code-no\"></span><h3>Language code <code class=\"docutils literal notranslate\"><span class=\"pre\">no</span></code><a class=\"headerlink\" href=\"#language-code-no\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The currently used language code for Norwegian Bokm\u00e5l <code class=\"docutils literal notranslate\"><span class=\"pre\">no</span></code> is being\nreplaced by the more common language code <code class=\"docutils literal notranslate\"><span class=\"pre\">nb</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-function-based-template-loaders\">\n<span id=\"function-based-template-loaders\"></span><h3>Function-based template loaders<a class=\"headerlink\" href=\"#function-based-template-loaders\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.2 changes the template loading mechanism to use a class-based\napproach. Old style function-based template loaders will still work, but should\nbe updated to use the new class-based template loaders.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.1.4", "Django 1.1.4 release notes", "N", "next"], ["releases/1.2.1", "Django 1.2.1 release notes", "P", "previous"]], "sourcename": "releases/1.2.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.2 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-2\">What\u2019s new in Django 1.2</a><ul>\n<li><a class=\"reference internal\" href=\"#support-for-multiple-databases\">Support for multiple databases</a></li>\n<li><a class=\"reference internal\" href=\"#model-validation\">Model validation</a></li>\n<li><a class=\"reference internal\" href=\"#improved-csrf-protection\">Improved CSRF protection</a></li>\n<li><a class=\"reference internal\" href=\"#messages-framework\">Messages framework</a></li>\n<li><a class=\"reference internal\" href=\"#object-level-permissions\">Object-level permissions</a></li>\n<li><a class=\"reference internal\" href=\"#permissions-for-anonymous-users\">Permissions for anonymous users</a></li>\n<li><a class=\"reference internal\" href=\"#relaxed-requirements-for-usernames\">Relaxed requirements for usernames</a></li>\n<li><a class=\"reference internal\" href=\"#email-backends\">Email backends</a></li>\n<li><a class=\"reference internal\" href=\"#smart-if-tag\">\u201cSmart\u201d <code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code> tag</a></li>\n<li><a class=\"reference internal\" href=\"#template-caching\">Template caching</a></li>\n<li><a class=\"reference internal\" href=\"#class-based-template-loaders\">Class-based template loaders</a></li>\n<li><a class=\"reference internal\" href=\"#natural-keys-in-fixtures\">Natural keys in fixtures</a></li>\n<li><a class=\"reference internal\" href=\"#fast-failure-for-tests\">Fast failure for tests</a></li>\n<li><a class=\"reference internal\" href=\"#bigintegerfield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BigIntegerField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#improved-localization\">Improved localization</a></li>\n<li><a class=\"reference internal\" href=\"#readonly-fields-in-modeladmin\"><code class=\"docutils literal notranslate\"><span class=\"pre\">readonly_fields</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#customizable-syntax-highlighting\">Customizable syntax highlighting</a></li>\n<li><a class=\"reference internal\" href=\"#syndication-feeds-as-views\">Syndication feeds as views</a></li>\n<li><a class=\"reference internal\" href=\"#geodjango\">GeoDjango</a></li>\n<li><a class=\"reference internal\" href=\"#javascript-assisted-handling-of-inline-related-objects-in-the-admin\">JavaScript-assisted handling of inline related objects in the admin</a></li>\n<li><a class=\"reference internal\" href=\"#new-now-template-tag-format-specifier-characters-c-and-u\">New <code class=\"docutils literal notranslate\"><span class=\"pre\">now</span></code> template tag format specifier characters: <code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-2\">Backwards-incompatible changes in 1.2</a><ul>\n<li><a class=\"reference internal\" href=\"#csrf-protection\">CSRF Protection</a></li>\n<li><a class=\"reference internal\" href=\"#get-db-prep-methods-on-field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_db_prep_*()</span></code> methods on <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#stateful-template-tags\">Stateful template tags</a></li>\n<li><a class=\"reference internal\" href=\"#user-passes-test-login-required-and-permission-required\"><code class=\"docutils literal notranslate\"><span class=\"pre\">user_passes_test</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">login_required</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">permission_required</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#if-tag-changes\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code> tag changes</a></li>\n<li><a class=\"reference internal\" href=\"#lazyobject\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dict-on-model-instances\"><code class=\"docutils literal notranslate\"><span class=\"pre\">__dict__</span></code> on model instances</a></li>\n<li><a class=\"reference internal\" href=\"#test-runner-exit-status-code\">Test runner exit status code</a></li>\n<li><a class=\"reference internal\" href=\"#cookie-encoding\">Cookie encoding</a></li>\n<li><a class=\"reference internal\" href=\"#modelform-is-valid-and-modelform-errors\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.is_valid()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.errors</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#booleanfield-on-mysql\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> on MySQL</a></li>\n<li><a class=\"reference internal\" href=\"#changes-to-the-interpretation-of-max-num-in-formsets\">Changes to the interpretation of <code class=\"docutils literal notranslate\"><span class=\"pre\">max_num</span></code> in FormSets</a></li>\n<li><a class=\"reference internal\" href=\"#email-re\"><code class=\"docutils literal notranslate\"><span class=\"pre\">email_re</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-2\">Features deprecated in 1.2</a><ul>\n<li><a class=\"reference internal\" href=\"#specifying-databases\">Specifying databases</a></li>\n<li><a class=\"reference internal\" href=\"#postgresql-database-backend\"><code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code> database backend</a></li>\n<li><a class=\"reference internal\" href=\"#csrf-response-rewriting-middleware\">CSRF response-rewriting middleware</a></li>\n<li><a class=\"reference internal\" href=\"#smtpconnection\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SMTPConnection</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#user-messages-api\">User Messages API</a></li>\n<li><a class=\"reference internal\" href=\"#date-format-helper-functions\">Date format helper functions</a></li>\n<li><a class=\"reference internal\" href=\"#function-based-test-runners\">Function-based test runners</a></li>\n<li><a class=\"reference internal\" href=\"#feed-in-django-contrib-syndication-feeds\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication.feeds</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#technical-message-ids\">Technical message IDs</a></li>\n<li><a class=\"reference internal\" href=\"#id6\">GeoDjango</a><ul>\n<li><a class=\"reference internal\" href=\"#spatialbackend\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialBackend</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#spatialrefsys-and-geometrycolumns-models\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialRefSys</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryColumns</span></code> models</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#language-code-no\">Language code <code class=\"docutils literal notranslate\"><span class=\"pre\">no</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#function-based-template-loaders\">Function-based template loaders</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.2", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
