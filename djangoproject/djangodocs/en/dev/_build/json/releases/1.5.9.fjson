{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.5.10/", "title": "Django 1.5.10 release notes"}, "next": {"link": "../1.5.8/", "title": "Django 1.5.8 release notes"}, "title": "Django 1.5.9 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-5-9-release-notes\">\n<span id=\"django-1-5-9-release-notes\"></span><h1>Django 1.5.9 release notes<a class=\"headerlink\" href=\"#django-1-5-9-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>August 20, 2014</em></p>\n<p>Django 1.5.9 fixes several security issues in 1.5.8.</p>\n<div class=\"section\" id=\"s-reverse-could-generate-urls-pointing-to-other-hosts\">\n<span id=\"reverse-could-generate-urls-pointing-to-other-hosts\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> could generate URLs pointing to other hosts<a class=\"headerlink\" href=\"#reverse-could-generate-urls-pointing-to-other-hosts\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In certain situations, URL reversing could generate scheme-relative URLs  (URLs\nstarting with two slashes), which could unexpectedly redirect a user  to a\ndifferent host. An attacker could exploit this, for example, by redirecting\nusers to a phishing site designed to ask for user\u2019s passwords.</p>\n<p>To remedy this, URL reversing now ensures that no URL starts with two slashes\n(//), replacing the second slash with its URL encoded counterpart (%2F). This\napproach ensures that semantics stay the same, while making the URL relative to\nthe domain and not to the scheme.</p>\n</div>\n<div class=\"section\" id=\"s-file-upload-denial-of-service\">\n<span id=\"file-upload-denial-of-service\"></span><h2>File upload denial-of-service<a class=\"headerlink\" href=\"#file-upload-denial-of-service\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Before this release, Django\u2019s file upload handing in its default configuration\nmay degrade to producing a huge number of <code class=\"docutils literal notranslate\"><span class=\"pre\">os.stat()</span></code> system calls when a\nduplicate filename is uploaded. Since <code class=\"docutils literal notranslate\"><span class=\"pre\">stat()</span></code> may invoke IO, this may produce\na huge data-dependent slowdown that slowly worsens over time. The net result is\nthat given enough time, a user with the ability to upload files can cause poor\nperformance in the upload handler, eventually causing it to become very slow\nsimply by uploading 0-byte files. At this point, even a slow network connection\nand few HTTP requests would be all that is necessary to make a site unavailable.</p>\n<p>We\u2019ve remedied the issue by changing the algorithm for generating file names\nif a file with the uploaded name already exists.\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.get_available_name\" title=\"django.core.files.storage.Storage.get_available_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.get_available_name()</span></code></a> now appends an\nunderscore plus a random 7 character alphanumeric string (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_x3a1gho&quot;</span></code>),\nrather than iterating through an underscore followed by a number (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_1&quot;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_2&quot;</span></code>, etc.).</p>\n</div>\n<div class=\"section\" id=\"s-remoteusermiddleware-session-hijacking\">\n<span id=\"remoteusermiddleware-session-hijacking\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">RemoteUserMiddleware</span></code> session hijacking<a class=\"headerlink\" href=\"#remoteusermiddleware-session-hijacking\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When using the <a class=\"reference internal\" href=\"../../ref/middleware/#django.contrib.auth.middleware.RemoteUserMiddleware\" title=\"django.contrib.auth.middleware.RemoteUserMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RemoteUserMiddleware</span></code></a>\nand the <code class=\"docutils literal notranslate\"><span class=\"pre\">RemoteUserBackend</span></code>, a change to the <code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_USER</span></code> header between\nrequests without an intervening logout could result in the prior user\u2019s session\nbeing co-opted by the subsequent user. The middleware now logs the user out on\na failed login attempt.</p>\n</div>\n<div class=\"section\" id=\"s-data-leakage-via-query-string-manipulation-in-contrib-admin\">\n<span id=\"data-leakage-via-query-string-manipulation-in-contrib-admin\"></span><h2>Data leakage via query string manipulation in <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code><a class=\"headerlink\" href=\"#data-leakage-via-query-string-manipulation-in-contrib-admin\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In older versions of Django it was possible to reveal any field\u2019s data by\nmodifying the \u201cpopup\u201d and \u201cto_field\u201d parameters of the query string on an admin\nchange form page. For example, requesting a URL like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/admin/auth/user/?pop=1&amp;t=password</span></code> and viewing the page\u2019s HTML allowed\nviewing the password hash of each user. While the admin requires users to have\npermissions to view the change form pages in the first place, this could leak\ndata if you rely on users having access to view only certain fields on a model.</p>\n<p>To address the issue, an exception will now be raised if a <code class=\"docutils literal notranslate\"><span class=\"pre\">to_field</span></code> value\nthat isn\u2019t a related field to a model that has been registered with the admin\nis specified.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.5.8", "Django 1.5.8 release notes", "N", "next"], ["releases/1.5.10", "Django 1.5.10 release notes", "P", "previous"]], "sourcename": "releases/1.5.9.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.5.9 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#reverse-could-generate-urls-pointing-to-other-hosts\"><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> could generate URLs pointing to other hosts</a></li>\n<li><a class=\"reference internal\" href=\"#file-upload-denial-of-service\">File upload denial-of-service</a></li>\n<li><a class=\"reference internal\" href=\"#remoteusermiddleware-session-hijacking\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RemoteUserMiddleware</span></code> session hijacking</a></li>\n<li><a class=\"reference internal\" href=\"#data-leakage-via-query-string-manipulation-in-contrib-admin\">Data leakage via query string manipulation in <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.5.9", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}