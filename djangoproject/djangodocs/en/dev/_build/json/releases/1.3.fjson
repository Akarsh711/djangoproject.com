{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.3.1/", "title": "Django 1.3.1 release notes"}, "next": {"link": "../1.2.7/", "title": "Django 1.2.7 release notes"}, "title": "Django 1.3 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-3-release-notes\">\n<span id=\"django-1-3-release-notes\"></span><h1>Django 1.3 release notes<a class=\"headerlink\" href=\"#django-1-3-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>March 23, 2011</em></p>\n<p>Welcome to Django 1.3!</p>\n<p>Nearly a year in the making, Django 1.3 includes quite a few <a class=\"reference internal\" href=\"#whats-new-1-3\"><span class=\"std std-ref\">new features</span></a> and plenty of bug fixes and improvements to existing features.\nThese release notes cover the new features in 1.3, as well as some\n<a class=\"reference internal\" href=\"#backwards-incompatible-changes-1-3\"><span class=\"std std-ref\">backwards-incompatible changes</span></a>\nyou\u2019ll want to be aware of when upgrading from Django 1.2 or older versions.</p>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.3\u2019s focus has mostly been on resolving smaller, long-standing\nfeature requests, but that hasn\u2019t prevented a few fairly significant\nnew features from landing, including:</p>\n<ul class=\"simple\">\n<li>A framework for writing <a class=\"reference internal\" href=\"#class-based-views\">class-based views</a>.</li>\n<li>Built-in support for <a class=\"reference internal\" href=\"#logging\">using Python\u2019s logging facilities</a>.</li>\n<li>Contrib support for <a class=\"reference internal\" href=\"#extended-static-files-handling\">easy handling of static files</a>.</li>\n<li>Django\u2019s testing framework now supports (and ships with a copy of)\n<a class=\"reference internal\" href=\"#unittest2-support\">the unittest2 library</a>.</li>\n</ul>\n<p>Wherever possible, new features are introduced in a backwards-compatible manner\nper <a class=\"reference internal\" href=\"../../misc/api-stability/\"><span class=\"doc\">our API stability policy</span></a> policy. As a result\nof this policy, Django 1.3 <a class=\"reference internal\" href=\"#deprecated-features-1-3\"><span class=\"std std-ref\">begins the deprecation process for some\nfeatures</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The release of Django 1.2 was notable for having the first shift in\nDjango\u2019s Python compatibility policy; prior to Django 1.2, Django\nsupported any 2.x version of Python from 2.3 up. As of Django 1.2, the\nminimum requirement was raised to Python 2.4.</p>\n<p>Django 1.3 continues to support Python 2.4, but will be the final\nDjango release series to do so; beginning with Django 1.4, the minimum\nsupported Python version will be 2.5. A document outlining our full\ntimeline for deprecating Python 2.x and moving to Python 3.x will be\npublished shortly after the release of Django 1.3.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-3\">\n<span id=\"s-whats-new-1-3\"></span><span id=\"what-s-new-in-django-1-3\"></span><span id=\"whats-new-1-3\"></span><h2>What\u2019s new in Django 1.3<a class=\"headerlink\" href=\"#what-s-new-in-django-1-3\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-class-based-views\">\n<span id=\"class-based-views\"></span><h3>Class-based views<a class=\"headerlink\" href=\"#class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 adds a framework that allows you to use a class as a view.\nThis means you can compose a view out of a collection of methods that\ncan be subclassed and overridden to provide common views of data without\nhaving to write too much code.</p>\n<p>Analogs of all the old function-based generic views have been\nprovided, along with a completely generic view base class that can be\nused as the basis for reusable applications that can be easily\nextended.</p>\n<p>See <a class=\"reference internal\" href=\"../../topics/class-based-views/\"><span class=\"doc\">the documentation on class-based generic views</span></a>\nfor more details. There is also a document to help you <a class=\"reference external\" href=\"https://raw.githubusercontent.com/django/django/ea9dc9f4b03ae034c1dc080730422dda7a9c2e47/docs/topics/generic-views-migration.txt\">convert\nyour function-based generic views to class-based\nviews</a>.</p>\n</div>\n<div class=\"section\" id=\"s-logging\">\n<span id=\"logging\"></span><h3>Logging<a class=\"headerlink\" href=\"#logging\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 adds framework-level support for Python\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">logging</span></code>\nmodule.  This means you can now easily configure and control logging\nas part of your Django project. A number of logging handlers and\nlogging calls have been added to Django\u2019s own code as well \u2013 most\nnotably, the error emails sent on an HTTP 500 server error are now\nhandled as a logging activity. See <a class=\"reference internal\" href=\"../../topics/logging/\"><span class=\"doc\">the documentation on Django\u2019s\nlogging interface</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-extended-static-files-handling\">\n<span id=\"extended-static-files-handling\"></span><h3>Extended static files handling<a class=\"headerlink\" href=\"#extended-static-files-handling\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 ships with a new contrib app \u2013\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code> \u2013 to help developers handle the static\nmedia files (images, CSS, JavaScript, etc.) that are needed to render\na complete web page.</p>\n<p>In previous versions of Django, it was common to place static assets\nin <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_ROOT</span></code></a> along with user-uploaded files, and serve\nthem both at <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a>. Part of the purpose of introducing\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> app is to make it easier to keep static files\nseparate from user-uploaded files. Static assets should now go in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">static/</span></code> subdirectories of your apps or in other static assets\ndirectories listed in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATICFILES_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATICFILES_DIRS</span></code></a>, and will be served\nat <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a>.</p>\n<p>See the <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/\"><span class=\"doc\">reference documentation of the app</span></a>\nfor more details or learn how to <a class=\"reference internal\" href=\"../../howto/static-files/\"><span class=\"doc\">manage static files</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-unittest2-support\">\n<span id=\"unittest2-support\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> support<a class=\"headerlink\" href=\"#unittest2-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Python 2.7 introduced some major changes to the <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code> library,\nadding some extremely useful features. To ensure that every Django\nproject can benefit from these new features, Django ships with a copy\nof <a class=\"reference external\" href=\"https://pypi.org/project/unittest2/\">unittest2</a>, a copy of the Python 2.7 <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code> library,\nbackported for Python 2.4 compatibility.</p>\n<p>To access this library, Django provides the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.unittest</span></code>\nmodule alias. If you are using Python 2.7, or you have installed\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> locally, Django will map the alias to the installed\nversion of the <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code> library. Otherwise, Django will use its own\nbundled version of <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code>.</p>\n<p>To take advantage of this alias, simply use:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">unittest</span>\n</pre></div>\n</div>\n<p>wherever you would have historically used:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n</pre></div>\n</div>\n<p>If you want to continue to use the base <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest</span></code> library, you can \u2013\nyou just won\u2019t get any of the nice new <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> features.</p>\n</div>\n<div class=\"section\" id=\"s-transaction-context-managers\">\n<span id=\"transaction-context-managers\"></span><h3>Transaction context managers<a class=\"headerlink\" href=\"#transaction-context-managers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Users of Python 2.5 and above may now use transaction management functions as\ncontext managers. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">autocommit</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-configurable-delete-cascade\">\n<span id=\"configurable-delete-cascade\"></span><h3>Configurable delete-cascade<a class=\"headerlink\" href=\"#configurable-delete-cascade\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> now accept an\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey.on_delete\" title=\"django.db.models.ForeignKey.on_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">on_delete</span></code></a> argument to customize behavior\nwhen the referenced object is deleted. Previously, deletes were always\ncascaded; available alternatives now include set null, set default, set to any\nvalue, protect, or do nothing.</p>\n<p>For more information, see the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey.on_delete\" title=\"django.db.models.ForeignKey.on_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">on_delete</span></code></a>\ndocumentation.</p>\n</div>\n<div class=\"section\" id=\"s-contextual-markers-and-comments-for-translatable-strings\">\n<span id=\"contextual-markers-and-comments-for-translatable-strings\"></span><h3>Contextual markers and comments for translatable strings<a class=\"headerlink\" href=\"#contextual-markers-and-comments-for-translatable-strings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For translation strings with ambiguous meaning, you can now\nuse the <code class=\"docutils literal notranslate\"><span class=\"pre\">pgettext</span></code> function to specify the context of the string.</p>\n<p>And if you just want to add some information for translators, you\ncan also add special translator comments in the source.</p>\n<p>For more information, see <a class=\"reference internal\" href=\"../../topics/i18n/translation/#contextual-markers\"><span class=\"std std-ref\">Contextual markers</span></a> and\n<a class=\"reference internal\" href=\"../../topics/i18n/translation/#translator-comments\"><span class=\"std std-ref\">Comments for translators</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-improvements-to-built-in-template-tags\">\n<span id=\"improvements-to-built-in-template-tags\"></span><h3>Improvements to built-in template tags<a class=\"headerlink\" href=\"#improvements-to-built-in-template-tags\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A number of improvements have been made to Django\u2019s built-in template tags:</p>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag now accepts a <code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code> option, allowing\nyou to specify context variables to the included template</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag now accepts an <code class=\"docutils literal notranslate\"><span class=\"pre\">only</span></code> option, allowing\nyou to exclude the current context from the included context</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-with\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">with</span></code></a> tag now allows you to define multiple context\nvariables in a single <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-with\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">with</span></code></a> block.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">load</span></code></a> tag now accepts a <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span></code> argument, allowing\nyou to load a single tag or filter from a library.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-templateresponse\">\n<span id=\"templateresponse\"></span><h3>TemplateResponse<a class=\"headerlink\" href=\"#templateresponse\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It can sometimes be beneficial to allow decorators or middleware to\nmodify a response <em>after</em> it has been constructed by the view. For\nexample, you may want to change the template that is used, or put\nadditional data into the context.</p>\n<p>However, you can\u2019t (easily) modify the content of a basic\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> after it has been constructed. To\novercome this limitation, Django 1.3 adds a new\n<a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> class. Unlike basic\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> objects,\n<a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> objects retain the details\nof the template and context that was provided by the view to compute\nthe response. The final output of the response is not computed until\nit is needed, later in the response process.</p>\n<p>For more details, see the <a class=\"reference internal\" href=\"../../ref/template-response/\"><span class=\"doc\">documentation</span></a>\non the <a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> class.</p>\n</div>\n<div class=\"section\" id=\"s-caching-changes\">\n<span id=\"caching-changes\"></span><h3>Caching changes<a class=\"headerlink\" href=\"#caching-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 sees the introduction of several improvements to the\nDjango\u2019s caching infrastructure.</p>\n<p>Firstly, Django now supports multiple named caches. In the same way\nthat Django 1.2 introduced support for multiple database connections,\nDjango 1.3 allows you to use the new <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> setting to\ndefine multiple named cache connections.</p>\n<p>Secondly, <a class=\"reference internal\" href=\"../../topics/cache/#cache-versioning\"><span class=\"std std-ref\">versioning</span></a>, <a class=\"reference internal\" href=\"../../topics/cache/#cache-key-prefixing\"><span class=\"std std-ref\">site-wide\nprefixing</span></a> and <a class=\"reference internal\" href=\"../../topics/cache/#cache-key-transformation\"><span class=\"std std-ref\">transformation</span></a> have been added to the cache API.</p>\n<p>Thirdly, <a class=\"reference internal\" href=\"../../topics/cache/#using-vary-headers\"><span class=\"std std-ref\">cache key creation</span></a> has been\nupdated to take the request query string into account on <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>\nrequests.</p>\n<p>Finally, support for <a class=\"reference external\" href=\"http://sendapatch.se/projects/pylibmc/\">pylibmc</a> has been added to the memcached cache\nbackend.</p>\n<p>For more details, see the <a class=\"reference internal\" href=\"../../topics/cache/\"><span class=\"doc\">documentation on\ncaching in Django</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-permissions-for-inactive-users\">\n<span id=\"permissions-for-inactive-users\"></span><h3>Permissions for inactive users<a class=\"headerlink\" href=\"#permissions-for-inactive-users\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you provide a custom auth backend with <code class=\"docutils literal notranslate\"><span class=\"pre\">supports_inactive_user</span></code>\nset to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, an inactive <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> instance will check the backend\nfor permissions.  This is useful for further centralizing the\npermission handling. See the <a class=\"reference internal\" href=\"../../topics/auth/\"><span class=\"doc\">authentication docs</span></a>\nfor more details.</p>\n</div>\n<div class=\"section\" id=\"s-geodjango\">\n<span id=\"geodjango\"></span><h3>GeoDjango<a class=\"headerlink\" href=\"#geodjango\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The GeoDjango test suite is now included when\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-code/unit-tests/#running-unit-tests\"><span class=\"std std-ref\">running the Django test suite</span></a> with <code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code>\nwhen using <a class=\"reference internal\" href=\"../../ref/contrib/gis/db-api/#spatial-backends\"><span class=\"std std-ref\">spatial database backends</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-media-url-and-static-url-must-end-in-a-slash\">\n<span id=\"media-url-and-static-url-must-end-in-a-slash\"></span><h3><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a> must end in a slash<a class=\"headerlink\" href=\"#media-url-and-static-url-must-end-in-a-slash\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previously, the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> setting only required a trailing slash if\nit contained a suffix beyond the domain name.</p>\n<p>A trailing slash is now <em>required</em> for <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> and the new\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a> setting as long as it is not blank. This ensures there is\na consistent way to combine paths in templates.</p>\n<p>Project settings which provide either of both settings without a trailing\nslash will now raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">PendingDeprecationWarning</span></code>.</p>\n<p>In Django 1.4 this same condition will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>,\nand in Django 1.5 will raise an <code class=\"docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code> exception.</p>\n</div>\n<div class=\"section\" id=\"s-everything-else\">\n<span id=\"everything-else\"></span><h3>Everything else<a class=\"headerlink\" href=\"#everything-else\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django <a class=\"reference internal\" href=\"../1.1/\"><span class=\"doc\">1.1</span></a> and <a class=\"reference internal\" href=\"../1.2/\"><span class=\"doc\">1.2</span></a> added\nlots of big ticket items to Django, like multiple-database support,\nmodel validation, and a session-based messages framework. However,\nthis focus on big features came at the cost of lots of smaller\nfeatures.</p>\n<p>To compensate for this, the focus of the Django 1.3 development\nprocess has been on adding lots of smaller, long standing feature\nrequests. These include:</p>\n<ul class=\"simple\">\n<li>Improved tools for accessing and manipulating the current\n<a class=\"reference internal\" href=\"../../ref/contrib/sites/#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> object in\n<a class=\"reference internal\" href=\"../../ref/contrib/sites/\"><span class=\"doc\">the sites framework</span></a>.</li>\n<li>A <a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.RequestFactory\" title=\"django.test.RequestFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestFactory</span></code></a> for mocking requests\nin tests.</li>\n<li>A new test assertion \u2013\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase.assertNumQueries\" title=\"django.test.TransactionTestCase.assertNumQueries\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertNumQueries()</span></code></a> \u2013 making it\neasier to test the database activity associated with a view.</li>\n<li>Support for lookups spanning relations in admin\u2019s\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter\" title=\"django.contrib.admin.ModelAdmin.list_filter\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">list_filter</span></code></a>.</li>\n<li>Support for <a class=\"reference external\" href=\"https://owasp.org/www-community/HttpOnly\">HttpOnly</a> cookies.</li>\n<li><a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.mail_admins\" title=\"django.core.mail.mail_admins\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">mail_admins()</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.mail_managers\" title=\"django.core.mail.mail_managers\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">mail_managers()</span></code></a> now support easily attaching\nHTML content to messages.</li>\n<li><a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> now supports CC\u2019s.</li>\n<li>Error emails now include more of the detail and formatting of the\ndebug server error page.</li>\n<li><a class=\"reference internal\" href=\"../../howto/custom-template-tags/#django.template.Library.simple_tag\" title=\"django.template.Library.simple_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">simple_tag()</span></code></a> now accepts a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context</span></code> argument, making it easier to write simple\ntemplate tags that require access to template context.</li>\n<li>A new <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">render()</span></code></a> shortcut \u2013 an alternative\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render_to_response()</span></code> providing a\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a> by default.</li>\n<li>Support for combining <a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a>\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">timedelta</span></code> values when retrieving or updating database values.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-3\">\n<span id=\"s-backwards-incompatible-changes-1-3\"></span><span id=\"backwards-incompatible-changes-in-1-3\"></span><span id=\"backwards-incompatible-changes-1-3\"></span><h2>Backwards-incompatible changes in 1.3<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-3\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-csrf-validation-now-applies-to-ajax-requests\">\n<span id=\"csrf-validation-now-applies-to-ajax-requests\"></span><h3>CSRF validation now applies to AJAX requests<a class=\"headerlink\" href=\"#csrf-validation-now-applies-to-ajax-requests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.2.5, Django\u2019s CSRF-prevention system exempted AJAX\nrequests from CSRF verification; due to <a class=\"reference external\" href=\"https://www.djangoproject.com/weblog/2011/feb/08/security/\">security issues</a> reported to\nus, however, <em>all</em> requests are now subjected to CSRF\nverification. Consult <a class=\"reference internal\" href=\"../../ref/csrf/\"><span class=\"doc\">the Django CSRF documentation</span></a> for details on how to handle CSRF verification in\nAJAX requests.</p>\n</div>\n<div class=\"section\" id=\"s-restricted-filters-in-admin-interface\">\n<span id=\"restricted-filters-in-admin-interface\"></span><h3>Restricted filters in admin interface<a class=\"headerlink\" href=\"#restricted-filters-in-admin-interface\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.2.5, the Django administrative interface allowed\nfiltering on any model field or relation \u2013 not just those specified\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code> \u2013 via query string manipulation. Due to security\nissues reported to us, however, query string lookup arguments in the\nadmin must be for fields or relations specified in <code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">date_hierarchy</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-deleting-a-model-doesn-t-delete-associated-files\">\n<span id=\"deleting-a-model-doesn-t-delete-associated-files\"></span><h3>Deleting a model doesn\u2019t delete associated files<a class=\"headerlink\" href=\"#deleting-a-model-doesn-t-delete-associated-files\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In earlier Django versions, when a model instance containing a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> was deleted,\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> took it upon itself to also delete the\nfile from the backend storage. This opened the door to several data-loss\nscenarios, including rolled-back transactions and fields on different models\nreferencing the same file. In Django 1.3, when a model is deleted the\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> method won\u2019t be called. If\nyou need cleanup of orphaned files, you\u2019ll need to handle it yourself (for\ninstance, with a custom management command that can be run manually or\nscheduled to run periodically via e.g. cron).</p>\n</div>\n<div class=\"section\" id=\"s-passwordinput-default-rendering-behavior\">\n<span id=\"passwordinput-default-rendering-behavior\"></span><h3>PasswordInput default rendering behavior<a class=\"headerlink\" href=\"#passwordinput-default-rendering-behavior\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.PasswordInput\" title=\"django.forms.PasswordInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PasswordInput</span></code></a> form widget, intended for use\nwith form fields which represent passwords, accepts a boolean keyword\nargument <code class=\"docutils literal notranslate\"><span class=\"pre\">render_value</span></code> indicating whether to send its data back to\nthe browser when displaying a submitted form with errors. Prior to\nDjango 1.3, this argument defaulted to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, meaning that the\nsubmitted password would be sent back to the browser as part of the\nform. Developers who wished to add a bit of additional security by\nexcluding that value from the redisplayed form could instantiate a\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.PasswordInput\" title=\"django.forms.PasswordInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PasswordInput</span></code></a> passing <code class=\"docutils literal notranslate\"><span class=\"pre\">render_value=False</span></code> .</p>\n<p>Due to the sensitive nature of passwords, however, Django 1.3 takes\nthis step automatically; the default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">render_value</span></code> is now\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, and developers who want the password value returned to the\nbrowser on a submission with errors (the previous behavior) must now\nexplicitly indicate this. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">LoginForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">PasswordInput</span><span class=\"p\">(</span><span class=\"n\">render_value</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-clearable-default-widget-for-filefield\">\n<span id=\"clearable-default-widget-for-filefield\"></span><h3>Clearable default widget for FileField<a class=\"headerlink\" href=\"#clearable-default-widget-for-filefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 now includes a <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.ClearableFileInput\" title=\"django.forms.ClearableFileInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClearableFileInput</span></code></a> form widget\nin addition to <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.FileInput\" title=\"django.forms.FileInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileInput</span></code></a>. <code class=\"docutils literal notranslate\"><span class=\"pre\">ClearableFileInput</span></code> renders\nwith a checkbox to clear the field\u2019s value (if the field has a value and is not\nrequired); <code class=\"docutils literal notranslate\"><span class=\"pre\">FileInput</span></code> provided no means for clearing an existing file from\na <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">ClearableFileInput</span></code> is now the default widget for a <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code>, so\nexisting forms including <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> without assigning a custom widget will\nneed to account for the possible extra checkbox in the rendered form output.</p>\n<p>To return to the previous rendering (without the ability to clear the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code>), use the <code class=\"docutils literal notranslate\"><span class=\"pre\">FileInput</span></code> widget in place of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ClearableFileInput</span></code>. For instance, in a <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> for a hypothetical\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Document</span></code> model with a <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> named <code class=\"docutils literal notranslate\"><span class=\"pre\">document</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DocumentForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Document</span>\n        <span class=\"n\">widgets</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;document&quot;</span><span class=\"p\">:</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">FileInput</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-new-index-on-database-session-table\">\n<span id=\"new-index-on-database-session-table\"></span><h3>New index on database session table<a class=\"headerlink\" href=\"#new-index-on-database-session-table\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.3, the database table used by the database backend\nfor the <a class=\"reference internal\" href=\"../../topics/http/sessions/\"><span class=\"doc\">sessions</span></a> app had no index on\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">expire_date</span></code> column. As a result, date-based queries on the\nsession table \u2013 such as the query that is needed to purge old\nsessions \u2013 would be very slow if there were lots of sessions.</p>\n<p>If you have an existing project that is using the database session\nbackend, you don\u2019t have to do anything to accommodate this change.\nHowever, you may get a significant performance boost if you manually\nadd the new index to the session table. The SQL that will add the\nindex can be found by running the <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlindexes</span></code> admin command:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>python manage.py sqlindexes sessions\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-no-more-naughty-words\">\n<span id=\"no-more-naughty-words\"></span><h3>No more naughty words<a class=\"headerlink\" href=\"#no-more-naughty-words\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django has historically provided (and enforced) a list of profanities.\nThe comments app has enforced this list of profanities, preventing people from\nsubmitting comments that contained one of those profanities.</p>\n<p>Unfortunately, the technique used to implement this profanities list\nwas woefully naive, and prone to the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scunthorpe_problem\">Scunthorpe problem</a>. Improving\nthe built-in filter to fix this problem would require significant\neffort, and since natural language processing isn\u2019t the normal domain\nof a web framework, we have \u201cfixed\u201d the problem by making the list of\nprohibited words an empty list.</p>\n<p>If you want to restore the old behavior, simply put a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">PROFANITIES_LIST</span></code> setting in your settings file that includes the\nwords that you want to prohibit (see the <a class=\"reference external\" href=\"https://github.com/django/django/commit/edd767d2612d891a906268cf590571f541dd164f\">commit that implemented this\nchange</a> if you want to see the list\nof words that was historically prohibited). However, if avoiding profanities is\nimportant to you, you would be well advised to seek out a better, less naive\napproach to the problem.</p>\n</div>\n<div class=\"section\" id=\"s-localflavor-changes\">\n<span id=\"localflavor-changes\"></span><h3>Localflavor changes<a class=\"headerlink\" href=\"#localflavor-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 introduces the following backwards-incompatible changes to\nlocal flavors:</p>\n<ul class=\"simple\">\n<li>Canada (ca) \u2013 The province \u201cNewfoundland and Labrador\u201d has had its\nprovince code updated to \u201cNL\u201d, rather than the older \u201cNF\u201d. In\naddition, the Yukon Territory has had its province code corrected to\n\u201cYT\u201d, instead of \u201cYK\u201d.</li>\n<li>Indonesia (id) \u2013 The province \u201cNanggroe Aceh Darussalam (NAD)\u201d has\nbeen removed from the province list in favor of the new official\ndesignation \u201cAceh (ACE)\u201d.</li>\n<li>United States of America (us) \u2013 The list of \u201cstates\u201d used by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">USStateField</span></code> has expanded to include Armed Forces postal\ncodes. This is backwards-incompatible if you were relying on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">USStateField</span></code> not including them.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-formset-updates\">\n<span id=\"formset-updates\"></span><h3>FormSet updates<a class=\"headerlink\" href=\"#formset-updates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In Django 1.3 <code class=\"docutils literal notranslate\"><span class=\"pre\">FormSet</span></code> creation behavior is modified slightly. Historically\nthe class didn\u2019t make a distinction between not being passed data and being\npassed empty dictionary. This was inconsistent with behavior in other parts of\nthe framework. Starting with 1.3 if you pass in empty dictionary the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">FormSet</span></code> will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code>.</p>\n<p>For example with a <code class=\"docutils literal notranslate\"><span class=\"pre\">FormSet</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">ArticleForm</span><span class=\"p\">(</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">DateField</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ArticleFormSet</span> <span class=\"o\">=</span> <span class=\"n\">formset_factory</span><span class=\"p\">(</span><span class=\"n\">ArticleForm</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>the following code will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ArticleFormSet</span><span class=\"p\">({})</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValidationError</span>: <span class=\"n\">[u&#39;ManagementForm data is missing or has been tampered with&#39;]</span>\n</pre></div>\n</div>\n<p>if you need to instantiate an empty <code class=\"docutils literal notranslate\"><span class=\"pre\">FormSet</span></code>, don\u2019t pass in the data or use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">formset</span> <span class=\"o\">=</span> <span class=\"n\">ArticleFormSet</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">formset</span> <span class=\"o\">=</span> <span class=\"n\">ArticleFormSet</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-callables-in-templates\">\n<span id=\"callables-in-templates\"></span><h3>Callables in templates<a class=\"headerlink\" href=\"#callables-in-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previously, a callable in a template would only be called automatically as part\nof the variable resolution process if it was retrieved via attribute\nlookup. This was an inconsistency that could result in confusing and unhelpful\nbehavior:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;{{ user.get_full_name }}&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;user&quot;</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"p\">}))</span>\n<span class=\"go\">u&#39;Joe Bloggs&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;{{ full_name }}&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;full_name&quot;</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">get_full_name</span><span class=\"p\">}))</span>\n<span class=\"go\">u&#39;&amp;lt;bound method User.get_full_name of &amp;lt;...</span>\n</pre></div>\n</div>\n<p>This has been resolved in Django 1.3 - the result in both cases will be <code class=\"docutils literal notranslate\"><span class=\"pre\">u'Joe</span>\n<span class=\"pre\">Bloggs'</span></code>. Although the previous behavior was not useful for a template language\ndesigned for web designers, and was never deliberately supported, it is possible\nthat some templates may be broken by this change.</p>\n</div>\n<div class=\"section\" id=\"s-use-of-custom-sql-to-load-initial-data-in-tests\">\n<span id=\"use-of-custom-sql-to-load-initial-data-in-tests\"></span><h3>Use of custom SQL to load initial data in tests<a class=\"headerlink\" href=\"#use-of-custom-sql-to-load-initial-data-in-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django provides a custom SQL hooks as a way to inject hand-crafted SQL\ninto the database synchronization process. One of the possible uses\nfor this custom SQL is to insert data into your database. If your\ncustom SQL contains <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code> statements, those insertions will be\nperformed every time your database is synchronized. This includes the\nsynchronization of any test databases that are created when you run a\ntest suite.</p>\n<p>However, in the process of testing the Django 1.3, it was discovered\nthat this feature has never completely worked as advertised. When\nusing database backends that don\u2019t support transactions, or when using\na TransactionTestCase, data that has been inserted using custom SQL\nwill not be visible during the testing process.</p>\n<p>Unfortunately, there was no way to rectify this problem without\nintroducing a backwards incompatibility. Rather than leave\nSQL-inserted initial data in an uncertain state, Django now enforces\nthe policy that data inserted by custom SQL will <em>not</em> be visible\nduring testing.</p>\n<p>This change only affects the testing process. You can still use custom\nSQL to load data into your production database as part of the <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code>\nprocess. If you require data to exist during test conditions, you\nshould either insert it using <a class=\"reference internal\" href=\"../../topics/testing/tools/#topics-testing-fixtures\"><span class=\"std std-ref\">test fixtures</span></a>, or using the <code class=\"docutils literal notranslate\"><span class=\"pre\">setUp()</span></code> method of your\ntest case.</p>\n</div>\n<div class=\"section\" id=\"s-changed-priority-of-translation-loading\">\n<span id=\"changed-priority-of-translation-loading\"></span><h3>Changed priority of translation loading<a class=\"headerlink\" href=\"#changed-priority-of-translation-loading\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Work has been done to simplify, rationalize and properly document the algorithm\nused by Django at runtime to build translations from the different translations\nfound on disk, namely:</p>\n<p>For translatable literals found in Python code and templates (<code class=\"docutils literal notranslate\"><span class=\"pre\">'django'</span></code>\ngettext domain):</p>\n<ul class=\"simple\">\n<li>Priorities of translations included with applications listed in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting were changed. To provide a behavior\nconsistent with other parts of Django that also use such setting (templates,\netc.) now, when building the translation that will be made available, the\napps listed first have higher precedence than the ones listed later.</li>\n<li>Now it is possible to override the translations shipped with applications by\nusing the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOCALE_PATHS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOCALE_PATHS</span></code></a> setting whose translations have now higher\nprecedence than the translations of <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> applications.\nThe relative priority among the values listed in this setting has also been\nmodified so the paths listed first have higher precedence than the\nones listed later.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">locale</span></code> subdirectory of the directory containing the settings, that\nusually coincides with and is known as the <em>project directory</em> is being\ndeprecated in this release as a source of translations. (the precedence of\nthese translations is intermediate between applications and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOCALE_PATHS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOCALE_PATHS</span></code></a>\ntranslations). See the <a class=\"reference internal\" href=\"#loading-of-project-level-translations\">corresponding deprecated features section</a>\nof this document.</li>\n</ul>\n<p>For translatable literals found in JavaScript code (<code class=\"docutils literal notranslate\"><span class=\"pre\">'djangojs'</span></code> gettext\ndomain):</p>\n<ul class=\"simple\">\n<li>Similarly to the <code class=\"docutils literal notranslate\"><span class=\"pre\">'django'</span></code> domain translations: Overriding of\ntranslations shipped with applications by using the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOCALE_PATHS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOCALE_PATHS</span></code></a>\nsetting is now possible for this domain too. These translations have higher\nprecedence than the translations of Python packages passed to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">javascript_catalog()</span></code> view. Paths listed first have higher precedence than\nthe ones listed later.</li>\n<li>Translations under the <code class=\"docutils literal notranslate\"><span class=\"pre\">locale</span></code> subdirectory of the <em>project directory</em>\nhave never been taken in account for JavaScript translations and remain in\nthe same situation considering the deprecation of such location.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-transaction-management\">\n<span id=\"transaction-management\"></span><h3>Transaction management<a class=\"headerlink\" href=\"#transaction-management\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When using managed transactions \u2013 that is, anything but the default\nautocommit mode \u2013 it is important when a transaction is marked as\n\u201cdirty\u201d. Dirty transactions are committed by the <code class=\"docutils literal notranslate\"><span class=\"pre\">commit_on_success</span></code>\ndecorator or the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.transaction.TransactionMiddleware</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">commit_manually</span></code> forces them to be closed explicitly; clean transactions\n\u201cget a pass\u201d, which means they are usually rolled back at the end of a request\nwhen the connection is closed.</p>\n<p>Until Django 1.3, transactions were only marked dirty when Django was\naware of a modifying operation performed in them; that is, either some\nmodel was saved, some bulk update or delete was performed, or the user\nexplicitly called <code class=\"docutils literal notranslate\"><span class=\"pre\">transaction.set_dirty()</span></code>. In Django 1.3, a\ntransaction is marked dirty when <em>any</em> database operation is\nperformed.</p>\n<p>As a result of this change, you no longer need to set a transaction\ndirty explicitly when you execute raw SQL or use a data-modifying\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code>. However, you <em>do</em> need to explicitly close any read-only\ntransactions that are being managed using <code class=\"docutils literal notranslate\"><span class=\"pre\">commit_manually()</span></code>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@transaction</span><span class=\"o\">.</span><span class=\"n\">commit_manually</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">MyObject</span><span class=\"p\">,</span> <span class=\"n\">name__iexact</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"s2\">&quot;template&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;object&quot;</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>Prior to Django 1.3, this would work without error. However, under\nDjango 1.3, this will raise a\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.db.transaction.TransactionManagementError\" title=\"django.db.transaction.TransactionManagementError\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionManagementError</span></code></a> because\nthe read operation that retrieves the <code class=\"docutils literal notranslate\"><span class=\"pre\">MyObject</span></code> instance leaves the\ntransaction in a dirty state.</p>\n</div>\n<div class=\"section\" id=\"s-no-password-reset-for-inactive-users\">\n<span id=\"no-password-reset-for-inactive-users\"></span><h3>No password reset for inactive users<a class=\"headerlink\" href=\"#no-password-reset-for-inactive-users\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Django 1.3, inactive users were able to request a password reset email\nand reset their password. In Django 1.3 inactive users will receive the same\nmessage as a nonexistent account.</p>\n</div>\n<div class=\"section\" id=\"s-password-reset-view-now-accepts-from-email\">\n<span id=\"password-reset-view-now-accepts-from-email\"></span><h3>Password reset view now accepts <code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code><a class=\"headerlink\" href=\"#password-reset-view-now-accepts-from-email\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset()</span></code> view now accepts a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code> parameter, which is passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">password_reset_form</span></code>\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method as a keyword argument. If you are using this view with a\ncustom password reset form, then you will need to ensure your form\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>\nmethod accepts this keyword argument.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-3\">\n<span id=\"s-deprecated-features-1-3\"></span><span id=\"features-deprecated-in-1-3\"></span><span id=\"deprecated-features-1-3\"></span><h2>Features deprecated in 1.3<a class=\"headerlink\" href=\"#features-deprecated-in-1-3\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.3 deprecates some features from earlier releases.\nThese features are still supported, but will be gradually phased out\nover the next few release cycles.</p>\n<p>Code taking advantage of any of the features below will raise a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">PendingDeprecationWarning</span></code> in Django 1.3. This warning will be\nsilent by default, but may be turned on using Python\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/warnings.html#module-warnings\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">warnings</span></code></a>\nmodule, or by running Python with a <code class=\"docutils literal notranslate\"><span class=\"pre\">-Wd</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">-Wall</span></code> flag.</p>\n<p>In Django 1.4, these warnings will become a <code class=\"docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>,\nwhich is <em>not</em> silent. In Django 1.5 support for these features will\nbe removed entirely.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">For more details, see the documentation <a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">Django\u2019s release process</span></a> and our <a class=\"reference internal\" href=\"../../internals/deprecation/\"><span class=\"doc\">deprecation timeline</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-mod-python-support\">\n<span id=\"mod-python-support\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">mod_python</span></code> support<a class=\"headerlink\" href=\"#mod-python-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">mod_python</span></code> library has not had a release since 2007 or a commit since\n2008. The Apache Foundation board voted to remove <code class=\"docutils literal notranslate\"><span class=\"pre\">mod_python</span></code> from the set\nof active projects in its version control repositories, and its lead developer\nhas shifted all of his efforts toward the lighter, slimmer, more stable, and\nmore flexible <code class=\"docutils literal notranslate\"><span class=\"pre\">mod_wsgi</span></code> backend.</p>\n<p>If you are currently using the <code class=\"docutils literal notranslate\"><span class=\"pre\">mod_python</span></code> request handler, you\nshould redeploy your Django projects using another request handler.\n<a class=\"reference internal\" href=\"../../howto/deployment/wsgi/modwsgi/\"><span class=\"doc\">mod_wsgi</span></a> is the request handler\nrecommended by the Django project, but FastCGI is also supported. Support for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mod_python</span></code> deployment will be removed in Django 1.5.</p>\n</div>\n<div class=\"section\" id=\"s-function-based-generic-views\">\n<span id=\"function-based-generic-views\"></span><h3>Function-based generic views<a class=\"headerlink\" href=\"#function-based-generic-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As a result of the introduction of class-based generic views, the\nfunction-based generic views provided by Django have been deprecated.\nThe following modules and the views they contain have been deprecated:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.create_update</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.date_based</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.list_detail</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.simple</span></code></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-test-client-response-template-attribute\">\n<span id=\"test-client-response-template-attribute\"></span><h3>Test client response <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> attribute<a class=\"headerlink\" href=\"#test-client-response-template-attribute\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s <a class=\"reference internal\" href=\"../../topics/testing/tools/#test-client\"><span class=\"std std-ref\">test client</span></a> returns\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Response\" title=\"django.test.Response\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Response</span></code></a> objects annotated with extra testing\ninformation. In Django versions prior to 1.3, this included a <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code>\nattribute containing information about templates rendered in generating the\nresponse: either None, a single <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> object, or a\nlist of <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> objects. This inconsistency in\nreturn values (sometimes a list, sometimes not) made the attribute difficult\nto work with.</p>\n<p>In Django 1.3 the <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> attribute is deprecated in favor of a new\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Response.templates\" title=\"django.test.Response.templates\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">templates</span></code></a> attribute, which is always a\nlist, even if it has only a single element or no elements.</p>\n</div>\n<div class=\"section\" id=\"s-djangotestrunner\">\n<span id=\"djangotestrunner\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTestRunner</span></code><a class=\"headerlink\" href=\"#djangotestrunner\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As a result of the introduction of support for <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code>, the features\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.simple.DjangoTestRunner</span></code> (including fail-fast\nand Ctrl-C test termination) have been made redundant. In view of this\nredundancy, <code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTestRunner</span></code> has been turned into an empty placeholder\nclass, and will be removed entirely in Django 1.5.</p>\n</div>\n<div class=\"section\" id=\"s-changes-to-url-and-ssi\">\n<span id=\"changes-to-url-and-ssi\"></span><h3>Changes to <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code><a class=\"headerlink\" href=\"#changes-to-url-and-ssi\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Most template tags will allow you to pass in either constants or\nvariables as arguments \u2013 for example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base.html&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>allows you to specify a base template as a constant, but if you have a\ncontext variable <code class=\"docutils literal notranslate\"><span class=\"pre\">templ</span></code> that contains the value <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"nv\">templ</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>is also legal.</p>\n<p>However, due to an accident of history, the <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> are different.\nThese tags use the second, quoteless syntax, but interpret the argument as a\nconstant. This means it isn\u2019t possible to use a context variable as the target\nof a <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> tag.</p>\n<p>Django 1.3 marks the start of the process to correct this historical\naccident. Django 1.3 adds a new template library \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> \u2013 that\nprovides alternate implementations of the <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code>\ntemplate tags. This <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> library implement behavior that makes\nthe handling of the first argument consistent with the handling of all\nother variables. So, an existing template that contains:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"nv\">sample</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>should be replaced with:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">url</span> <span class=\"nv\">from</span> <span class=\"nv\">future</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;sample&#39;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The tags implementing the old behavior have been deprecated, and in\nDjango 1.5, the old behavior will be replaced with the new behavior.\nTo ensure compatibility with future versions of Django, existing\ntemplates should be modified to use the new <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> libraries and\nsyntax.</p>\n</div>\n<div class=\"section\" id=\"s-changes-to-the-login-methods-of-the-admin\">\n<span id=\"changes-to-the-login-methods-of-the-admin\"></span><h3>Changes to the login methods of the admin<a class=\"headerlink\" href=\"#changes-to-the-login-methods-of-the-admin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In previous version the admin app defined login methods in multiple locations\nand ignored the almost identical implementation in the already used auth app.\nA side effect of this duplication was the missing adoption of the changes made\nin <a class=\"reference external\" href=\"https://github.com/django/django/commit/c8015052d935a99a5c8f96434b2d0cd16d8a4e14\">r12634</a> to support a\nbroader set of characters for usernames.</p>\n<p>This release refactors the admin\u2019s login mechanism to use a subclass of the\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.forms.AuthenticationForm\" title=\"django.contrib.auth.forms.AuthenticationForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationForm</span></code></a> instead of a manual\nform validation. The previously undocumented method\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.admin.sites.AdminSite.display_login_form'</span></code> has been removed\nin favor of a new <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.login_form\" title=\"django.contrib.admin.AdminSite.login_form\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">login_form</span></code></a>\nattribute.</p>\n</div>\n<div class=\"section\" id=\"s-reset-and-sqlreset-management-commands\">\n<span id=\"reset-and-sqlreset-management-commands\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">reset</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlreset</span></code> management commands<a class=\"headerlink\" href=\"#reset-and-sqlreset-management-commands\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Those commands have been deprecated. The <code class=\"docutils literal notranslate\"><span class=\"pre\">flush</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlflush</span></code> commands\ncan be used to delete everything. You can also use ALTER TABLE or DROP TABLE\nstatements manually.</p>\n</div>\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h3>GeoDjango<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>The function-based <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEST_RUNNER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_RUNNER</span></code></a> previously used to execute\nthe GeoDjango test suite, <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.tests.run_gis_tests</span></code>, was\ndeprecated for the class-based runner,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.tests.GeoDjangoTestSuiteRunner</span></code>.</li>\n<li>Previously, calling\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry.transform\" title=\"django.contrib.gis.geos.GEOSGeometry.transform\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">transform()</span></code></a> would\nsilently do nothing when GDAL wasn\u2019t available.  Now, a\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSException\" title=\"django.contrib.gis.geos.GEOSException\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GEOSException</span></code></a> is properly raised\nto indicate possible faulty application code.  A warning is now\nraised if <a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry.transform\" title=\"django.contrib.gis.geos.GEOSGeometry.transform\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">transform()</span></code></a> is\ncalled when the SRID of the geometry is less than 0 or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-czbirthnumberfield-clean\">\n<span id=\"czbirthnumberfield-clean\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">CZBirthNumberField.clean</span></code><a class=\"headerlink\" href=\"#czbirthnumberfield-clean\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previously this field\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">clean()</span></code> method accepted a second, gender, argument\nwhich allowed stronger validation checks to be made, however since this\nargument could never actually be passed from the Django form machinery it is\nnow pending deprecation.</p>\n</div>\n<div class=\"section\" id=\"s-compatcookie\">\n<span id=\"compatcookie\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">CompatCookie</span></code><a class=\"headerlink\" href=\"#compatcookie\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previously, <code class=\"docutils literal notranslate\"><span class=\"pre\">django.http</span></code> exposed an undocumented <code class=\"docutils literal notranslate\"><span class=\"pre\">CompatCookie</span></code> class,\nwhich was a bugfix wrapper around the standard library <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleCookie</span></code>. As the\nfixes are moving upstream, this is now deprecated - you should use <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span>\n<span class=\"pre\">django.http</span> <span class=\"pre\">import</span> <span class=\"pre\">SimpleCookie</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-loading-of-project-level-translations\">\n<span id=\"s-id2\"></span><span id=\"loading-of-project-level-translations\"></span><span id=\"id2\"></span><h3>Loading of <em>project-level</em> translations<a class=\"headerlink\" href=\"#loading-of-project-level-translations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This release of Django starts the deprecation process for inclusion of\ntranslations located under the so-called <em>project path</em> in the translation\nbuilding process performed at runtime. The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOCALE_PATHS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOCALE_PATHS</span></code></a> setting can\nbe used for the same task by adding the filesystem path to a <code class=\"docutils literal notranslate\"><span class=\"pre\">locale</span></code>\ndirectory containing project-level translations to the value of that setting.</p>\n<p>Rationale for this decision:</p>\n<ul>\n<li><p class=\"first\">The <em>project path</em> has always been a loosely defined concept\n(actually, the directory used for locating project-level\ntranslations is the directory containing the settings module) and\nthere has been a shift in other parts of the framework to stop using\nit as a reference for location of assets at runtime.</p>\n</li>\n<li><p class=\"first\">Detection of the <code class=\"docutils literal notranslate\"><span class=\"pre\">locale</span></code> subdirectory tends to fail when the\ndeployment scenario is more complex than the basic one. e.g. it\nfails when the settings module is a directory (ticket #10765).</p>\n</li>\n<li><p class=\"first\">There are potential strange development- and deployment-time\nproblems like the fact that the <code class=\"docutils literal notranslate\"><span class=\"pre\">project_dir/locale/</span></code> subdir can\ngenerate spurious error messages when the project directory is added\nto the Python path (<code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">runserver</span></code> does this) and then it\nclashes with the equally named standard library module, this is a\ntypical warning message:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">/usr/lib/python2.6/gettext.py:49: ImportWarning: Not importing directory &#39;/path/to/project/locale&#39;: missing __init__.py.</span>\n<span class=\"x\">import locale, copy, os, re, struct, sys</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">This location wasn\u2019t included in the translation building process\nfor JavaScript literals. This deprecation removes such\ninconsistency.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-permwrapper-moved-to-django-contrib-auth-context-processors\">\n<span id=\"permwrapper-moved-to-django-contrib-auth-context-processors\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">PermWrapper</span></code> moved to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors</span></code><a class=\"headerlink\" href=\"#permwrapper-moved-to-django-contrib-auth-context-processors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In Django 1.2, we began the process of changing the location of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">auth</span></code> context processor from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.context_processors</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors</span></code>. However, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">PermWrapper</span></code> support class was mistakenly omitted from that\nmigration. In Django 1.3, the <code class=\"docutils literal notranslate\"><span class=\"pre\">PermWrapper</span></code> class has also been\nmoved to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors</span></code>, along with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">PermLookupDict</span></code> support class. The new classes are functionally\nidentical to their old versions; only the module location has changed.</p>\n</div>\n<div class=\"section\" id=\"s-removal-of-xmlfield\">\n<span id=\"removal-of-xmlfield\"></span><h3>Removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code><a class=\"headerlink\" href=\"#removal-of-xmlfield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When Django was first released, Django included an <code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code> that performed\nautomatic XML validation for any field input. However, this validation function\nhasn\u2019t been performed since the introduction of <code class=\"docutils literal notranslate\"><span class=\"pre\">newforms</span></code>, prior to the 1.0\nrelease. As a result, <code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code> as currently implemented is functionally\nindistinguishable from a simple <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.TextField\" title=\"django.db.models.TextField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextField</span></code></a>.</p>\n<p>For this reason, Django 1.3 has fast-tracked the deprecation of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code> \u2013 instead of a two-release deprecation, <code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code>\nwill be removed entirely in Django 1.4.</p>\n<p>It\u2019s easy to update your code to accommodate this change \u2013 just\nreplace all uses of <code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code>, and remove the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">schema_path</span></code> keyword argument (if it is specified).</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.2.7", "Django 1.2.7 release notes", "N", "next"], ["releases/1.3.1", "Django 1.3.1 release notes", "P", "previous"]], "sourcename": "releases/1.3.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.3 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-3\">What\u2019s new in Django 1.3</a><ul>\n<li><a class=\"reference internal\" href=\"#class-based-views\">Class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#logging\">Logging</a></li>\n<li><a class=\"reference internal\" href=\"#extended-static-files-handling\">Extended static files handling</a></li>\n<li><a class=\"reference internal\" href=\"#unittest2-support\"><code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> support</a></li>\n<li><a class=\"reference internal\" href=\"#transaction-context-managers\">Transaction context managers</a></li>\n<li><a class=\"reference internal\" href=\"#configurable-delete-cascade\">Configurable delete-cascade</a></li>\n<li><a class=\"reference internal\" href=\"#contextual-markers-and-comments-for-translatable-strings\">Contextual markers and comments for translatable strings</a></li>\n<li><a class=\"reference internal\" href=\"#improvements-to-built-in-template-tags\">Improvements to built-in template tags</a></li>\n<li><a class=\"reference internal\" href=\"#templateresponse\">TemplateResponse</a></li>\n<li><a class=\"reference internal\" href=\"#caching-changes\">Caching changes</a></li>\n<li><a class=\"reference internal\" href=\"#permissions-for-inactive-users\">Permissions for inactive users</a></li>\n<li><a class=\"reference internal\" href=\"#geodjango\">GeoDjango</a></li>\n<li><a class=\"reference internal\" href=\"#media-url-and-static-url-must-end-in-a-slash\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code> and <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code> must end in a slash</a></li>\n<li><a class=\"reference internal\" href=\"#everything-else\">Everything else</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-3\">Backwards-incompatible changes in 1.3</a><ul>\n<li><a class=\"reference internal\" href=\"#csrf-validation-now-applies-to-ajax-requests\">CSRF validation now applies to AJAX requests</a></li>\n<li><a class=\"reference internal\" href=\"#restricted-filters-in-admin-interface\">Restricted filters in admin interface</a></li>\n<li><a class=\"reference internal\" href=\"#deleting-a-model-doesn-t-delete-associated-files\">Deleting a model doesn\u2019t delete associated files</a></li>\n<li><a class=\"reference internal\" href=\"#passwordinput-default-rendering-behavior\">PasswordInput default rendering behavior</a></li>\n<li><a class=\"reference internal\" href=\"#clearable-default-widget-for-filefield\">Clearable default widget for FileField</a></li>\n<li><a class=\"reference internal\" href=\"#new-index-on-database-session-table\">New index on database session table</a></li>\n<li><a class=\"reference internal\" href=\"#no-more-naughty-words\">No more naughty words</a></li>\n<li><a class=\"reference internal\" href=\"#localflavor-changes\">Localflavor changes</a></li>\n<li><a class=\"reference internal\" href=\"#formset-updates\">FormSet updates</a></li>\n<li><a class=\"reference internal\" href=\"#callables-in-templates\">Callables in templates</a></li>\n<li><a class=\"reference internal\" href=\"#use-of-custom-sql-to-load-initial-data-in-tests\">Use of custom SQL to load initial data in tests</a></li>\n<li><a class=\"reference internal\" href=\"#changed-priority-of-translation-loading\">Changed priority of translation loading</a></li>\n<li><a class=\"reference internal\" href=\"#transaction-management\">Transaction management</a></li>\n<li><a class=\"reference internal\" href=\"#no-password-reset-for-inactive-users\">No password reset for inactive users</a></li>\n<li><a class=\"reference internal\" href=\"#password-reset-view-now-accepts-from-email\">Password reset view now accepts <code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-3\">Features deprecated in 1.3</a><ul>\n<li><a class=\"reference internal\" href=\"#mod-python-support\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mod_python</span></code> support</a></li>\n<li><a class=\"reference internal\" href=\"#function-based-generic-views\">Function-based generic views</a></li>\n<li><a class=\"reference internal\" href=\"#test-client-response-template-attribute\">Test client response <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> attribute</a></li>\n<li><a class=\"reference internal\" href=\"#djangotestrunner\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTestRunner</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#changes-to-url-and-ssi\">Changes to <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#changes-to-the-login-methods-of-the-admin\">Changes to the login methods of the admin</a></li>\n<li><a class=\"reference internal\" href=\"#reset-and-sqlreset-management-commands\"><code class=\"docutils literal notranslate\"><span class=\"pre\">reset</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlreset</span></code> management commands</a></li>\n<li><a class=\"reference internal\" href=\"#id1\">GeoDjango</a></li>\n<li><a class=\"reference internal\" href=\"#czbirthnumberfield-clean\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CZBirthNumberField.clean</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#compatcookie\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CompatCookie</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#loading-of-project-level-translations\">Loading of <em>project-level</em> translations</a></li>\n<li><a class=\"reference internal\" href=\"#permwrapper-moved-to-django-contrib-auth-context-processors\"><code class=\"docutils literal notranslate\"><span class=\"pre\">PermWrapper</span></code> moved to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#removal-of-xmlfield\">Removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">XMLField</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.3", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}