{"parents": [{"link": "../", "title": "Getting started"}], "prev": {"link": "../whatsnext/", "title": "What to read next"}, "next": {"link": "../../topics/", "title": "Using Django"}, "title": "Writing your first patch for Django", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-your-first-patch-for-django\">\n<span id=\"writing-your-first-patch-for-django\"></span><h1>Writing your first patch for Django<a class=\"headerlink\" href=\"#writing-your-first-patch-for-django\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-introduction\">\n<span id=\"introduction\"></span><h2>Introduction<a class=\"headerlink\" href=\"#introduction\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Interested in giving back to the community a little? Maybe you\u2019ve found a bug\nin Django that you\u2019d like to see fixed, or maybe there\u2019s a small feature you\nwant added.</p>\n<p>Contributing back to Django itself is the best way to see your own concerns\naddressed. This may seem daunting at first, but it\u2019s a well-traveled path with\ndocumentation, tooling, and a community to support you. We\u2019ll walk you through\nthe entire process, so you can learn by example.</p>\n<div class=\"section\" id=\"s-who-s-this-tutorial-for\">\n<span id=\"who-s-this-tutorial-for\"></span><h3>Who\u2019s this tutorial for?<a class=\"headerlink\" href=\"#who-s-this-tutorial-for\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">If you are looking for a reference on the details of making code\ncontributions, see the <a class=\"reference internal\" href=\"../../internals/contributing/writing-code/\"><span class=\"doc\">Writing code</span></a>\ndocumentation.</p>\n</div>\n<p>For this tutorial, we expect that you have at least a basic understanding of\nhow Django works. This means you should be comfortable going through the\nexisting tutorials on <a class=\"reference internal\" href=\"../tutorial01/\"><span class=\"doc\">writing your first Django app</span></a>.\nIn addition, you should have a good understanding of Python itself. But if you\ndon\u2019t, <a class=\"reference external\" href=\"https://diveinto.org/python3/table-of-contents.html\">Dive Into Python</a> is a fantastic (and free) online book for\nbeginning Python programmers.</p>\n<p>Those of you who are unfamiliar with version control systems and Trac will find\nthat this tutorial and its links include just enough information to get started.\nHowever, you\u2019ll probably want to read some more about these different tools if\nyou plan on contributing to Django regularly.</p>\n<p>For the most part though, this tutorial tries to explain as much as possible,\nso that it can be of use to the widest audience.</p>\n<div class=\"admonition-where-to-get-help admonition\">\n<p class=\"first admonition-title\">Where to get help:</p>\n<p class=\"last\">If you\u2019re having trouble going through this tutorial, please post a message\non the <a class=\"reference external\" href=\"https://forum.djangoproject.com/\">Django Forum</a>, <a class=\"reference internal\" href=\"../../internals/mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a>, or drop by\n<a class=\"reference external\" href=\"https://web.libera.chat/#django-dev\">#django-dev on irc.libera.chat</a> to chat with other Django users who\nmight be able to help.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-what-does-this-tutorial-cover\">\n<span id=\"what-does-this-tutorial-cover\"></span><h3>What does this tutorial cover?<a class=\"headerlink\" href=\"#what-does-this-tutorial-cover\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We\u2019ll be walking you through contributing a patch to Django for the first time.\nBy the end of this tutorial, you should have a basic understanding of both the\ntools and the processes involved. Specifically, we\u2019ll be covering the following:</p>\n<ul class=\"simple\">\n<li>Installing Git.</li>\n<li>Downloading a copy of Django\u2019s development version.</li>\n<li>Running Django\u2019s test suite.</li>\n<li>Writing a test for your patch.</li>\n<li>Writing the code for your patch.</li>\n<li>Testing your patch.</li>\n<li>Submitting a pull request.</li>\n<li>Where to look for more information.</li>\n</ul>\n<p>Once you\u2019re done with the tutorial, you can look through the rest of\n<a class=\"reference internal\" href=\"../../internals/contributing/\"><span class=\"doc\">Django\u2019s documentation on contributing</span></a>.\nIt contains lots of great information and is a must read for anyone who\u2019d like\nto become a regular contributor to Django. If you\u2019ve got questions, it\u2019s\nprobably got the answers.</p>\n<div class=\"admonition-python-3-required admonition\">\n<p class=\"first admonition-title\">Python 3 required!</p>\n<p class=\"last\">The current version of Django doesn\u2019t support Python 2.7. Get Python 3 at\n<a class=\"reference external\" href=\"https://www.python.org/downloads/\">Python\u2019s download page</a> or with your\noperating system\u2019s package manager.</p>\n</div>\n<div class=\"admonition-for-windows-users admonition\">\n<p class=\"first admonition-title\">For Windows users</p>\n<p class=\"last\">See <a class=\"reference internal\" href=\"../../howto/windows/#install-python-windows\"><span class=\"std std-ref\">Install Python</span></a> on Windows docs for additional guidance.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-code-of-conduct\">\n<span id=\"code-of-conduct\"></span><h2>Code of Conduct<a class=\"headerlink\" href=\"#code-of-conduct\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As a contributor, you can help us keep the Django community open and inclusive.\nPlease read and follow our <a class=\"reference external\" href=\"https://www.djangoproject.com/conduct/\">Code of Conduct</a>.</p>\n</div>\n<div class=\"section\" id=\"s-installing-git\">\n<span id=\"installing-git\"></span><h2>Installing Git<a class=\"headerlink\" href=\"#installing-git\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For this tutorial, you\u2019ll need Git installed to download the current\ndevelopment version of Django and to generate patch files for the changes you\nmake.</p>\n<p>To check whether or not you have Git installed, enter <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span></code> into the command\nline. If you get messages saying that this command could not be found, you\u2019ll\nhave to download and install it, see <a class=\"reference external\" href=\"https://git-scm.com/download\">Git\u2019s download page</a>.</p>\n<p>If you\u2019re not that familiar with Git, you can always find out more about its\ncommands (once it\u2019s installed) by typing <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">help</span></code> into the command line.</p>\n</div>\n<div class=\"section\" id=\"s-getting-a-copy-of-django-s-development-version\">\n<span id=\"getting-a-copy-of-django-s-development-version\"></span><h2>Getting a copy of Django\u2019s development version<a class=\"headerlink\" href=\"#getting-a-copy-of-django-s-development-version\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The first step to contributing to Django is to get a copy of the source code.\nFirst, <a class=\"reference external\" href=\"https://github.com/django/django/fork\">fork Django on GitHub</a>. Then,\nfrom the command line, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">cd</span></code> command to navigate to the directory\nwhere you\u2019ll want your local copy of Django to live.</p>\n<p>Download the Django source code repository using the following command:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git clone https://github.com/YourGitHubName/django.git\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git clone https://github.com/YourGitHubName/django.git\n</pre></div>\n</section>\n</div>\n<div class=\"admonition-low-bandwidth-connection admonition\">\n<p class=\"first admonition-title\">Low bandwidth connection?</p>\n<p class=\"last\">You can add the <code class=\"docutils literal notranslate\"><span class=\"pre\">--depth</span> <span class=\"pre\">1</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">clone</span></code> to skip downloading\nall of Django\u2019s commit history, which reduces data transfer from  ~250 MB\nto ~70 MB.</p>\n</div>\n<p>Now that you have a local copy of Django, you can install it just like you would\ninstall any package using <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code>. The most convenient way to do so is by using\na <em>virtual environment</em>, which is a feature built into Python that allows you\nto keep a separate directory of installed packages for each of your projects so\nthat they don\u2019t interfere with each other.</p>\n<p>It\u2019s a good idea to keep all your virtual environments in one place, for\nexample in <code class=\"docutils literal notranslate\"><span class=\"pre\">.virtualenvs/</span></code> in your home directory.</p>\n<p>Create a new virtual environment by running:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python3 -m venv ~/.virtualenvs/djangodev\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m venv <span class=\"nv\">%HOMEPATH%</span>\\.virtualenvs\\djangodev\n</pre></div>\n</section>\n</div>\n<p>The path is where the new environment will be saved on your computer.</p>\n<p>The final step in setting up your virtual environment is to activate it:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">source</span> ~/.virtualenvs/djangodev/bin/activate\n</pre></div>\n</div>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">source</span></code> command is not available, you can try using a dot instead:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>. ~/.virtualenvs/djangodev/bin/activate\n</pre></div>\n</div>\n<p>You have to activate the virtual environment whenever you open a new\nterminal window.</p>\n<div class=\"admonition-for-windows-users admonition\">\n<p class=\"first admonition-title\">For Windows users</p>\n<p>To activate your virtual environment on Windows, run:</p>\n<div class=\"last highlight-doscon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> <span class=\"nv\">%HOMEPATH%</span>\\.virtualenvs\\djangodev\\Scripts\\activate.bat\n</pre></div>\n</div>\n</div>\n<p>The name of the currently activated virtual environment is displayed on the\ncommand line to help you keep track of which one you are using. Anything you\ninstall through <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code> while this name is displayed will be installed in that\nvirtual environment, isolated from other environments and system-wide packages.</p>\n<p id=\"intro-contributing-install-local-copy\">Go ahead and install the previously cloned copy of Django:</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install -e /path/to/your/local/clone/django/\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install -e \\path\\to\\your\\local\\clone\\django\\\n</pre></div>\n</section>\n</div>\n<p>The installed version of Django is now pointing at your local copy by installing\nin editable mode. You will immediately see any changes you make to it, which is\nof great help when writing your first patch.</p>\n<div class=\"section\" id=\"s-creating-projects-with-a-local-copy-of-django\">\n<span id=\"creating-projects-with-a-local-copy-of-django\"></span><h3>Creating projects with a local copy of Django<a class=\"headerlink\" href=\"#creating-projects-with-a-local-copy-of-django\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It may be helpful to test your local changes with a Django project. First you\nhave to create a new virtual environment, <a class=\"reference internal\" href=\"#intro-contributing-install-local-copy\"><span class=\"std std-ref\">install the previously cloned\nlocal copy of Django in editable mode</span></a>,\nand create a new Django project outside of your local copy of Django. You will\nimmediately see any changes you make to Django in your new project, which is\nof great help when writing your first patch.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-running-django-s-test-suite-for-the-first-time\">\n<span id=\"running-django-s-test-suite-for-the-first-time\"></span><h2>Running Django\u2019s test suite for the first time<a class=\"headerlink\" href=\"#running-django-s-test-suite-for-the-first-time\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When contributing to Django it\u2019s very important that your code changes don\u2019t\nintroduce bugs into other areas of Django. One way to check that Django still\nworks after you make your changes is by running Django\u2019s test suite. If all\nthe tests still pass, then you can be reasonably sure that your changes\nwork and haven\u2019t broken other parts of Django. If you\u2019ve never run Django\u2019s test\nsuite before, it\u2019s a good idea to run it once beforehand to get familiar with\nits output.</p>\n<p>Before running the test suite, enter the Django <code class=\"docutils literal notranslate\"><span class=\"pre\">tests/</span></code> directory using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cd</span> <span class=\"pre\">tests</span></code> command, and install test dependencies by running:</p>\n<div class=\"console-block\" id=\"console-block-3\">\n<input class=\"c-tab-unix\" id=\"c-tab-3-unix\" type=\"radio\" name=\"console-3\" checked>\n<label for=\"c-tab-3-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-3-win\" type=\"radio\" name=\"console-3\">\n<label for=\"c-tab-3-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-3-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install -r requirements/py3.txt\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-3-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install -r requirements\\py3.txt\n</pre></div>\n</section>\n</div>\n<p>If you encounter an error during the installation, your system might be missing\na dependency for one or more of the Python packages. Consult the failing\npackage\u2019s documentation or search the web with the error message that you\nencounter.</p>\n<p>Now we are ready to run the test suite. If you\u2019re using GNU/Linux, macOS, or\nsome other flavor of Unix, run:</p>\n<div class=\"console-block\" id=\"console-block-4\">\n<input class=\"c-tab-unix\" id=\"c-tab-4-unix\" type=\"radio\" name=\"console-4\" checked>\n<label for=\"c-tab-4-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-4-win\" type=\"radio\" name=\"console-4\">\n<label for=\"c-tab-4-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-4-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-4-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py \n</pre></div>\n</section>\n</div>\n<p>Now sit back and relax. Django\u2019s entire test suite has thousands of tests, and\nit takes at least a few minutes to run, depending on the speed of your\ncomputer.</p>\n<p>While Django\u2019s test suite is running, you\u2019ll see a stream of characters\nrepresenting the status of each test as it completes. <code class=\"docutils literal notranslate\"><span class=\"pre\">E</span></code> indicates that an\nerror was raised during a test, and <code class=\"docutils literal notranslate\"><span class=\"pre\">F</span></code> indicates that a test\u2019s assertions\nfailed. Both of these are considered to be test failures. Meanwhile, <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">s</span></code> indicated expected failures and skipped tests, respectively. Dots indicate\npassing tests.</p>\n<p>Skipped tests are typically due to missing external libraries required to run\nthe test; see <a class=\"reference internal\" href=\"../../internals/contributing/writing-code/unit-tests/#running-unit-tests-dependencies\"><span class=\"std std-ref\">Running all the tests</span></a> for a list of dependencies\nand be sure to install any for tests related to the changes you are making (we\nwon\u2019t need any for this tutorial). Some tests are specific to a particular\ndatabase backend and will be skipped if not testing with that backend. SQLite\nis the database backend for the default settings. To run the tests using a\ndifferent backend, see <a class=\"reference internal\" href=\"../../internals/contributing/writing-code/unit-tests/#running-unit-tests-settings\"><span class=\"std std-ref\">Using another settings module</span></a>.</p>\n<p>Once the tests complete, you should be greeted with a message informing you\nwhether the test suite passed or failed. Since you haven\u2019t yet made any changes\nto Django\u2019s code, the entire test suite <strong>should</strong> pass. If you get failures or\nerrors make sure you\u2019ve followed all of the previous steps properly. See\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-code/unit-tests/#running-unit-tests\"><span class=\"std std-ref\">Running the unit tests</span></a> for more information.</p>\n<p>Note that the latest Django \u201cmain\u201d branch may not always be stable. When\ndeveloping against \u201cmain\u201d, you can check <a class=\"reference external\" href=\"https://djangoci.com\">Django\u2019s continuous integration\nbuilds</a> to determine if the failures are specific to your machine or if they\nare also present in Django\u2019s official builds. If you click to view a particular\nbuild, you can view the \u201cConfiguration Matrix\u201d which shows failures broken down\nby Python version and database backend.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">For this tutorial and the ticket we\u2019re working on, testing against SQLite\nis sufficient, however, it\u2019s possible (and sometimes necessary) to\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-code/unit-tests/#running-unit-tests-settings\"><span class=\"std std-ref\">run the tests using a different database</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-working-on-a-feature\">\n<span id=\"working-on-a-feature\"></span><h2>Working on a feature<a class=\"headerlink\" href=\"#working-on-a-feature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For this tutorial, we\u2019ll work on a \u201cfake ticket\u201d as a case study. Here are the\nimaginary details:</p>\n<div class=\"admonition-ticket-99999-allow-making-toast admonition\">\n<p class=\"first admonition-title\">Ticket #99999 \u2013 Allow making toast</p>\n<p class=\"last\">Django should provide a function <code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.make_toast()</span></code> that\nreturns <code class=\"docutils literal notranslate\"><span class=\"pre\">'toast'</span></code>.</p>\n</div>\n<p>We\u2019ll now implement this feature and associated tests.</p>\n</div>\n<div class=\"section\" id=\"s-creating-a-branch-for-your-patch\">\n<span id=\"creating-a-branch-for-your-patch\"></span><h2>Creating a branch for your patch<a class=\"headerlink\" href=\"#creating-a-branch-for-your-patch\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Before making any changes, create a new branch for the ticket:</p>\n<div class=\"console-block\" id=\"console-block-5\">\n<input class=\"c-tab-unix\" id=\"c-tab-5-unix\" type=\"radio\" name=\"console-5\" checked>\n<label for=\"c-tab-5-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-5-win\" type=\"radio\" name=\"console-5\">\n<label for=\"c-tab-5-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-5-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git checkout -b ticket_99999\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-5-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git checkout -b ticket_99999\n</pre></div>\n</section>\n</div>\n<p>You can choose any name that you want for the branch, \u201cticket_99999\u201d is an\nexample. All changes made in this branch will be specific to the ticket and\nwon\u2019t affect the main copy of the code that we cloned earlier.</p>\n</div>\n<div class=\"section\" id=\"s-writing-some-tests-for-your-ticket\">\n<span id=\"writing-some-tests-for-your-ticket\"></span><h2>Writing some tests for your ticket<a class=\"headerlink\" href=\"#writing-some-tests-for-your-ticket\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In most cases, for a patch to be accepted into Django it has to include tests.\nFor bug fix patches, this means writing a regression test to ensure that the\nbug is never reintroduced into Django later on. A regression test should be\nwritten in such a way that it will fail while the bug still exists and pass\nonce the bug has been fixed. For patches containing new features, you\u2019ll need\nto include tests which ensure that the new features are working correctly.\nThey too should fail when the new feature is not present, and then pass once it\nhas been implemented.</p>\n<p>A good way to do this is to write your new tests first, before making any\nchanges to the code. This style of development is called\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven development</a> and can be applied to both entire projects and\nsingle patches. After writing your tests, you then run them to make sure that\nthey do indeed fail (since you haven\u2019t fixed that bug or added that feature\nyet). If your new tests don\u2019t fail, you\u2019ll need to fix them so that they do.\nAfter all, a regression test that passes regardless of whether a bug is present\nis not very helpful at preventing that bug from reoccurring down the road.</p>\n<p>Now for our hands-on example.</p>\n<div class=\"section\" id=\"s-writing-a-test-for-ticket-99999\">\n<span id=\"writing-a-test-for-ticket-99999\"></span><h3>Writing a test for ticket #99999<a class=\"headerlink\" href=\"#writing-a-test-for-ticket-99999\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In order to resolve this ticket, we\u2019ll add a <code class=\"docutils literal notranslate\"><span class=\"pre\">make_toast()</span></code> function to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts</span></code> module. First we are going to write a test that tries to\nuse the function and check that its output looks correct.</p>\n<p>Navigate to Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">tests/shortcuts/</span></code> folder and create a new file\n<code class=\"docutils literal notranslate\"><span class=\"pre\">test_make_toast.py</span></code>. Add the following code:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">make_toast</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleTestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MakeToastTests</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_make_toast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">make_toast</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;toast&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This test checks that the <code class=\"docutils literal notranslate\"><span class=\"pre\">make_toast()</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">'toast'</span></code>.</p>\n<div class=\"admonition-but-this-testing-thing-looks-kinda-hard admonition\">\n<p class=\"first admonition-title\">But this testing thing looks kinda hard\u2026</p>\n<p>If you\u2019ve never had to deal with tests before, they can look a little hard\nto write at first glance. Fortunately, testing is a <em>very</em> big subject in\ncomputer programming, so there\u2019s lots of information out there:</p>\n<ul class=\"last simple\">\n<li>A good first look at writing tests for Django can be found in the\ndocumentation on <a class=\"reference internal\" href=\"../../topics/testing/overview/\"><span class=\"doc\">Writing and running tests</span></a>.</li>\n<li>Dive Into Python (a free online book for beginning Python developers)\nincludes a great <a class=\"reference external\" href=\"https://diveinto.org/python3/unit-testing.html\">introduction to Unit Testing</a>.</li>\n<li>After reading those, if you want something a little meatier to sink\nyour teeth into, there\u2019s always the Python <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a> documentation.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-running-your-new-test\">\n<span id=\"running-your-new-test\"></span><h3>Running your new test<a class=\"headerlink\" href=\"#running-your-new-test\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Since we haven\u2019t made any modifications to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts</span></code> yet, our test\nshould fail. Let\u2019s run all the tests in the <code class=\"docutils literal notranslate\"><span class=\"pre\">shortcuts</span></code> folder to make sure\nthat\u2019s really what happens. <code class=\"docutils literal notranslate\"><span class=\"pre\">cd</span></code> to the Django <code class=\"docutils literal notranslate\"><span class=\"pre\">tests/</span></code> directory and run:</p>\n<div class=\"console-block\" id=\"console-block-6\">\n<input class=\"c-tab-unix\" id=\"c-tab-6-unix\" type=\"radio\" name=\"console-6\" checked>\n<label for=\"c-tab-6-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-6-win\" type=\"radio\" name=\"console-6\">\n<label for=\"c-tab-6-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-6-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py shortcuts\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-6-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py shortcuts\n</pre></div>\n</section>\n</div>\n<p>If the tests ran correctly, you should see one failure corresponding to the test\nmethod we added, with this error:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">ImportError: cannot import name &#39;make_toast&#39; from &#39;django.shortcuts&#39;</span>\n</pre></div>\n</div>\n<p>If all of the tests passed, then you\u2019ll want to make sure that you added the\nnew test shown above to the appropriate folder and file name.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-the-code-for-your-ticket\">\n<span id=\"writing-the-code-for-your-ticket\"></span><h2>Writing the code for your ticket<a class=\"headerlink\" href=\"#writing-the-code-for-your-ticket\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Next we\u2019ll be adding the <code class=\"docutils literal notranslate\"><span class=\"pre\">make_toast()</span></code> function.</p>\n<p>Navigate to the <code class=\"docutils literal notranslate\"><span class=\"pre\">django/</span></code> folder and open the <code class=\"docutils literal notranslate\"><span class=\"pre\">shortcuts.py</span></code> file. At the\nbottom, add:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">make_toast</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;toast&quot;</span>\n</pre></div>\n</div>\n<p>Now we need to make sure that the test we wrote earlier passes, so we can see\nwhether the code we added is working correctly. Again, navigate to the Django\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tests/</span></code> directory and run:</p>\n<div class=\"console-block\" id=\"console-block-7\">\n<input class=\"c-tab-unix\" id=\"c-tab-7-unix\" type=\"radio\" name=\"console-7\" checked>\n<label for=\"c-tab-7-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-7-win\" type=\"radio\" name=\"console-7\">\n<label for=\"c-tab-7-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-7-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py shortcuts\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-7-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py shortcuts\n</pre></div>\n</section>\n</div>\n<p>Everything should pass. If it doesn\u2019t, make sure you correctly added the\nfunction to the correct file.</p>\n</div>\n<div class=\"section\" id=\"s-running-django-s-test-suite-for-the-second-time\">\n<span id=\"running-django-s-test-suite-for-the-second-time\"></span><h2>Running Django\u2019s test suite for the second time<a class=\"headerlink\" href=\"#running-django-s-test-suite-for-the-second-time\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once you\u2019ve verified that your patch and your test are working correctly, it\u2019s\na good idea to run the entire Django test suite to verify that your change\nhasn\u2019t introduced any bugs into other areas of Django. While successfully\npassing the entire test suite doesn\u2019t guarantee your code is bug free, it does\nhelp identify many bugs and regressions that might otherwise go unnoticed.</p>\n<p>To run the entire Django test suite, <code class=\"docutils literal notranslate\"><span class=\"pre\">cd</span></code> into the Django <code class=\"docutils literal notranslate\"><span class=\"pre\">tests/</span></code>\ndirectory and run:</p>\n<div class=\"console-block\" id=\"console-block-8\">\n<input class=\"c-tab-unix\" id=\"c-tab-8-unix\" type=\"radio\" name=\"console-8\" checked>\n<label for=\"c-tab-8-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-8-win\" type=\"radio\" name=\"console-8\">\n<label for=\"c-tab-8-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-8-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-8-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py \n</pre></div>\n</section>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-documentation\">\n<span id=\"writing-documentation\"></span><h2>Writing Documentation<a class=\"headerlink\" href=\"#writing-documentation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This is a new feature, so it should be documented. Open the file\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/topics/http/shortcuts.txt</span></code> and add the following at the end of the\nfile:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">``make_toast()``</span>\n<span class=\"gh\">================</span>\n\n<span class=\"p\">..</span> <span class=\"ow\">function</span><span class=\"p\">::</span> make_toast()\n\n<span class=\"p\">..</span> <span class=\"ow\">versionadded</span><span class=\"p\">::</span> 2.2\n\nReturns <span class=\"s\">``&#39;toast&#39;``</span>.\n</pre></div>\n</div>\n<p>Since this new feature will be in an upcoming release it is also added to the\nrelease notes for the next version of Django. Open the release notes for the\nlatest version in <code class=\"docutils literal notranslate\"><span class=\"pre\">docs/releases/</span></code>, which at time of writing is <code class=\"docutils literal notranslate\"><span class=\"pre\">2.2.txt</span></code>.\nAdd a note under the \u201cMinor Features\u201d header:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">:mod:`django.shortcuts`</span>\n<span class=\"gh\">~~~~~~~~~~~~~~~~~~~~~~~</span>\n\n<span class=\"m\">*</span> The new <span class=\"na\">:func:</span><span class=\"nv\">`django.shortcuts.make_toast`</span> function returns <span class=\"s\">``&#39;toast&#39;``</span>.\n</pre></div>\n</div>\n<p>For more information on writing documentation, including an explanation of what\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">versionadded</span></code> bit is all about, see\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-documentation/\"><span class=\"doc\">Writing documentation</span></a>. That page also includes\nan explanation of how to build a copy of the documentation locally, so you can\npreview the HTML that will be generated.</p>\n</div>\n<div class=\"section\" id=\"s-previewing-your-changes\">\n<span id=\"previewing-your-changes\"></span><h2>Previewing your changes<a class=\"headerlink\" href=\"#previewing-your-changes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now it\u2019s time to go through all the changes made in our patch. To stage all the\nchanges ready for commit, run:</p>\n<div class=\"console-block\" id=\"console-block-9\">\n<input class=\"c-tab-unix\" id=\"c-tab-9-unix\" type=\"radio\" name=\"console-9\" checked>\n<label for=\"c-tab-9-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-9-win\" type=\"radio\" name=\"console-9\">\n<label for=\"c-tab-9-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-9-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git add --all\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-9-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git add --all\n</pre></div>\n</section>\n</div>\n<p>Then display the differences between your current copy of Django (with your\nchanges) and the revision that you initially checked out earlier in the\ntutorial with:</p>\n<div class=\"console-block\" id=\"console-block-10\">\n<input class=\"c-tab-unix\" id=\"c-tab-10-unix\" type=\"radio\" name=\"console-10\" checked>\n<label for=\"c-tab-10-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-10-win\" type=\"radio\" name=\"console-10\">\n<label for=\"c-tab-10-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-10-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git diff --cached\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-10-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git diff --cached\n</pre></div>\n</section>\n</div>\n<p>Use the arrow keys to move up and down.</p>\n<div class=\"highlight-diff notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">diff --git a/django/shortcuts.py b/django/shortcuts.py</span><span class=\"w\"></span>\n<span class=\"gh\">index 7ab1df0e9d..8dde9e28d9 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/django/shortcuts.py</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/django/shortcuts.py</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -156,3 +156,7 @@ def resolve_url(to, *args, **kwargs):</span><span class=\"w\"></span>\n\n<span class=\"w\"> </span>    # Finally, fall back and assume it&#39;s a URL<span class=\"w\"></span>\n<span class=\"w\"> </span>    return to<span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+def make_toast():</span><span class=\"w\"></span>\n<span class=\"gi\">+    return &#39;toast&#39;</span><span class=\"w\"></span>\n<span class=\"gh\">diff --git a/docs/releases/2.2.txt b/docs/releases/2.2.txt</span><span class=\"w\"></span>\n<span class=\"gh\">index 7d85d30c4a..81518187b3 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/docs/releases/2.2.txt</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/docs/releases/2.2.txt</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -40,6 +40,11 @@ database constraints. Constraints are added to models using the</span><span class=\"w\"></span>\n<span class=\"w\"> </span>Minor features<span class=\"w\"></span>\n<span class=\"w\"> </span>--------------<span class=\"w\"></span>\n\n<span class=\"gi\">+:mod:`django.shortcuts`</span><span class=\"w\"></span>\n<span class=\"gi\">+~~~~~~~~~~~~~~~~~~~~~~~</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+* The new :func:`django.shortcuts.make_toast` function returns ``&#39;toast&#39;``.</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"w\"> </span>:mod:`django.contrib.admin`<span class=\"w\"></span>\n<span class=\"w\"> </span>~~~~~~~~~~~~~~~~~~~~~~~~~~~<span class=\"w\"></span>\n\n<span class=\"gh\">diff --git a/docs/topics/http/shortcuts.txt b/docs/topics/http/shortcuts.txt</span><span class=\"w\"></span>\n<span class=\"gh\">index 7b3a3a2c00..711bf6bb6d 100644</span><span class=\"w\"></span>\n<span class=\"gd\">--- a/docs/topics/http/shortcuts.txt</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/docs/topics/http/shortcuts.txt</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -271,3 +271,12 @@ This example is equivalent to::</span><span class=\"w\"></span>\n<span class=\"w\"> </span>        my_objects = list(MyModel.objects.filter(published=True))<span class=\"w\"></span>\n<span class=\"w\"> </span>        if not my_objects:<span class=\"w\"></span>\n<span class=\"w\"> </span>            raise Http404(&quot;No MyModel matches the given query.&quot;)<span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+``make_toast()``</span><span class=\"w\"></span>\n<span class=\"gi\">+================</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+.. function:: make_toast()</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+.. versionadded:: 2.2</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+Returns ``&#39;toast&#39;``.</span><span class=\"w\"></span>\n<span class=\"gh\">diff --git a/tests/shortcuts/test_make_toast.py b/tests/shortcuts/test_make_toast.py</span><span class=\"w\"></span>\n<span class=\"w\">new file mode 100644</span>\n<span class=\"gh\">index 0000000000..6f4c627b6e</span><span class=\"w\"></span>\n<span class=\"gd\">--- /dev/null</span><span class=\"w\"></span>\n<span class=\"gi\">+++ b/tests/shortcuts/test_make_toast.py</span><span class=\"w\"></span>\n<span class=\"gu\">@@ -0,0 +1,7 @@</span><span class=\"w\"></span>\n<span class=\"gi\">+from django.shortcuts import make_toast</span><span class=\"w\"></span>\n<span class=\"gi\">+from django.test import SimpleTestCase</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+</span><span class=\"w\"></span>\n<span class=\"gi\">+class MakeToastTests(SimpleTestCase):</span><span class=\"w\"></span>\n<span class=\"gi\">+    def test_make_toast(self):</span><span class=\"w\"></span>\n<span class=\"gi\">+        self.assertEqual(make_toast(), &#39;toast&#39;)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>When you\u2019re done previewing the patch, hit the <code class=\"docutils literal notranslate\"><span class=\"pre\">q</span></code> key to return to the\ncommand line. If the patch\u2019s content looked okay, it\u2019s time to commit the\nchanges.</p>\n</div>\n<div class=\"section\" id=\"s-committing-the-changes-in-the-patch\">\n<span id=\"committing-the-changes-in-the-patch\"></span><h2>Committing the changes in the patch<a class=\"headerlink\" href=\"#committing-the-changes-in-the-patch\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To commit the changes:</p>\n<div class=\"console-block\" id=\"console-block-11\">\n<input class=\"c-tab-unix\" id=\"c-tab-11-unix\" type=\"radio\" name=\"console-11\" checked>\n<label for=\"c-tab-11-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-11-win\" type=\"radio\" name=\"console-11\">\n<label for=\"c-tab-11-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-11-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git commit\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-11-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git commit\n</pre></div>\n</section>\n</div>\n<p>This opens up a text editor to type the commit message. Follow the <a class=\"reference internal\" href=\"../../internals/contributing/committing-code/#committing-guidelines\"><span class=\"std std-ref\">commit\nmessage guidelines</span></a> and write a message like:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>Fixed #99999 -- Added a shortcut function to make toast.\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-pushing-the-commit-and-making-a-pull-request\">\n<span id=\"pushing-the-commit-and-making-a-pull-request\"></span><h2>Pushing the commit and making a pull request<a class=\"headerlink\" href=\"#pushing-the-commit-and-making-a-pull-request\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>After committing the patch, send it to your fork on GitHub (substitute\n\u201cticket_99999\u201d with the name of your branch if it\u2019s different):</p>\n<div class=\"console-block\" id=\"console-block-12\">\n<input class=\"c-tab-unix\" id=\"c-tab-12-unix\" type=\"radio\" name=\"console-12\" checked>\n<label for=\"c-tab-12-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-12-win\" type=\"radio\" name=\"console-12\">\n<label for=\"c-tab-12-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-12-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git push origin ticket_99999\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-12-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git push origin ticket_99999\n</pre></div>\n</section>\n</div>\n<p>You can create a pull request by visiting the <a class=\"reference external\" href=\"https://github.com/django/django/\">Django GitHub page</a>. You\u2019ll see your branch under \u201cYour\nrecently pushed branches\u201d. Click \u201cCompare &amp; pull request\u201d next to it.</p>\n<p>Please don\u2019t do it for this tutorial, but on the next page that displays a\npreview of the patch, you would click \u201cCreate pull request\u201d.</p>\n</div>\n<div class=\"section\" id=\"s-next-steps\">\n<span id=\"next-steps\"></span><h2>Next steps<a class=\"headerlink\" href=\"#next-steps\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Congratulations, you\u2019ve learned how to make a pull request to Django! Details\nof more advanced techniques you may need are in\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-code/working-with-git/\"><span class=\"doc\">Working with Git and GitHub</span></a>.</p>\n<p>Now you can put those skills to good use by helping to improve Django\u2019s\ncodebase.</p>\n<div class=\"section\" id=\"s-more-information-for-new-contributors\">\n<span id=\"more-information-for-new-contributors\"></span><h3>More information for new contributors<a class=\"headerlink\" href=\"#more-information-for-new-contributors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Before you get too into writing patches for Django, there\u2019s a little more\ninformation on contributing that you should probably take a look at:</p>\n<ul class=\"simple\">\n<li>You should make sure to read Django\u2019s documentation on\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-code/submitting-patches/\"><span class=\"doc\">claiming tickets and submitting patches</span></a>.\nIt covers Trac etiquette, how to claim tickets for yourself, expected\ncoding style for patches, and many other important details.</li>\n<li>First time contributors should also read Django\u2019s <a class=\"reference internal\" href=\"../../internals/contributing/new-contributors/\"><span class=\"doc\">documentation\nfor first time contributors</span></a>.\nIt has lots of good advice for those of us who are new to helping out\nwith Django.</li>\n<li>After those, if you\u2019re still hungry for more information about\ncontributing, you can always browse through the rest of\n<a class=\"reference internal\" href=\"../../internals/contributing/\"><span class=\"doc\">Django\u2019s documentation on contributing</span></a>.\nIt contains a ton of useful information and should be your first source\nfor answering any questions you might have.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-finding-your-first-real-ticket\">\n<span id=\"finding-your-first-real-ticket\"></span><h3>Finding your first real ticket<a class=\"headerlink\" href=\"#finding-your-first-real-ticket\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Once you\u2019ve looked through some of that information, you\u2019ll be ready to go out\nand find a ticket of your own to write a patch for. Pay special attention to\ntickets with the \u201ceasy pickings\u201d criterion. These tickets are often much\nsimpler in nature and are great for first time contributors. Once you\u2019re\nfamiliar with contributing to Django, you can move on to writing patches for\nmore difficult and complicated tickets.</p>\n<p>If you just want to get started already (and nobody would blame you!), try\ntaking a look at the list of <a class=\"reference external\" href=\"https://code.djangoproject.com/query?status=new&amp;status=reopened&amp;has_patch=0&amp;easy=1&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=milestone&amp;order=priority\">easy tickets that need patches</a> and the\n<a class=\"reference external\" href=\"https://code.djangoproject.com/query?status=new&amp;status=reopened&amp;needs_better_patch=1&amp;easy=1&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=milestone&amp;order=priority\">easy tickets that have patches which need improvement</a>. If you\u2019re familiar\nwith writing tests, you can also look at the list of\n<a class=\"reference external\" href=\"https://code.djangoproject.com/query?status=new&amp;status=reopened&amp;needs_tests=1&amp;easy=1&amp;col=id&amp;col=summary&amp;col=status&amp;col=owner&amp;col=type&amp;col=milestone&amp;order=priority\">easy tickets that need tests</a>. Remember to follow the guidelines about\nclaiming tickets that were mentioned in the link to Django\u2019s documentation on\n<a class=\"reference internal\" href=\"../../internals/contributing/writing-code/submitting-patches/\"><span class=\"doc\">claiming tickets and submitting patches</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-next-after-creating-a-pull-request\">\n<span id=\"what-s-next-after-creating-a-pull-request\"></span><h3>What\u2019s next after creating a pull request?<a class=\"headerlink\" href=\"#what-s-next-after-creating-a-pull-request\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>After a ticket has a patch, it needs to be reviewed by a second set of eyes.\nAfter submitting a pull request, update the ticket metadata by setting the\nflags on the ticket to say \u201chas patch\u201d, \u201cdoesn\u2019t need tests\u201d, etc, so others\ncan find it for review. Contributing doesn\u2019t necessarily always mean writing a\npatch from scratch. Reviewing existing patches is also a very helpful\ncontribution. See <a class=\"reference internal\" href=\"../../internals/contributing/triaging-tickets/\"><span class=\"doc\">Triaging tickets</span></a> for details.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/index", "Using Django", "N", "next"], ["intro/whatsnext", "What to read next", "P", "previous"]], "sourcename": "intro/contributing.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing your first patch for Django</a><ul>\n<li><a class=\"reference internal\" href=\"#introduction\">Introduction</a><ul>\n<li><a class=\"reference internal\" href=\"#who-s-this-tutorial-for\">Who\u2019s this tutorial for?</a></li>\n<li><a class=\"reference internal\" href=\"#what-does-this-tutorial-cover\">What does this tutorial cover?</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#code-of-conduct\">Code of Conduct</a></li>\n<li><a class=\"reference internal\" href=\"#installing-git\">Installing Git</a></li>\n<li><a class=\"reference internal\" href=\"#getting-a-copy-of-django-s-development-version\">Getting a copy of Django\u2019s development version</a><ul>\n<li><a class=\"reference internal\" href=\"#creating-projects-with-a-local-copy-of-django\">Creating projects with a local copy of Django</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#running-django-s-test-suite-for-the-first-time\">Running Django\u2019s test suite for the first time</a></li>\n<li><a class=\"reference internal\" href=\"#working-on-a-feature\">Working on a feature</a></li>\n<li><a class=\"reference internal\" href=\"#creating-a-branch-for-your-patch\">Creating a branch for your patch</a></li>\n<li><a class=\"reference internal\" href=\"#writing-some-tests-for-your-ticket\">Writing some tests for your ticket</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-a-test-for-ticket-99999\">Writing a test for ticket #99999</a></li>\n<li><a class=\"reference internal\" href=\"#running-your-new-test\">Running your new test</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#writing-the-code-for-your-ticket\">Writing the code for your ticket</a></li>\n<li><a class=\"reference internal\" href=\"#running-django-s-test-suite-for-the-second-time\">Running Django\u2019s test suite for the second time</a></li>\n<li><a class=\"reference internal\" href=\"#writing-documentation\">Writing Documentation</a></li>\n<li><a class=\"reference internal\" href=\"#previewing-your-changes\">Previewing your changes</a></li>\n<li><a class=\"reference internal\" href=\"#committing-the-changes-in-the-patch\">Committing the changes in the patch</a></li>\n<li><a class=\"reference internal\" href=\"#pushing-the-commit-and-making-a-pull-request\">Pushing the commit and making a pull request</a></li>\n<li><a class=\"reference internal\" href=\"#next-steps\">Next steps</a><ul>\n<li><a class=\"reference internal\" href=\"#more-information-for-new-contributors\">More information for new contributors</a></li>\n<li><a class=\"reference internal\" href=\"#finding-your-first-real-ticket\">Finding your first real ticket</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-next-after-creating-a-pull-request\">What\u2019s next after creating a pull request?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "intro/contributing", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
