{"parents": [{"link": "../", "title": "Getting started"}], "prev": {"link": "../tutorial06/", "title": "Writing your first Django app, part 6"}, "next": {"link": "../tutorial08/", "title": "Writing your first Django app, part 8"}, "title": "Writing your first Django app, part 7", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-your-first-django-app-part-7\">\n<span id=\"writing-your-first-django-app-part-7\"></span><h1>Writing your first Django app, part 7<a class=\"headerlink\" href=\"#writing-your-first-django-app-part-7\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This tutorial begins where <a class=\"reference internal\" href=\"../tutorial06/\"><span class=\"doc\">Tutorial 6</span></a> left off. We\u2019re\ncontinuing the web-poll application and will focus on customizing Django\u2019s\nautomatically-generated admin site that we first explored in <a class=\"reference internal\" href=\"../tutorial02/\"><span class=\"doc\">Tutorial 2</span></a>.</p>\n<div class=\"admonition-where-to-get-help admonition\">\n<p class=\"first admonition-title\">Where to get help:</p>\n<p class=\"last\">If you\u2019re having trouble going through this tutorial, please head over to\nthe <a class=\"reference internal\" href=\"../../faq/help/\"><span class=\"doc\">Getting Help</span></a> section of the FAQ.</p>\n</div>\n<div class=\"section\" id=\"s-customize-the-admin-form\">\n<span id=\"customize-the-admin-form\"></span><h2>Customize the admin form<a class=\"headerlink\" href=\"#customize-the-admin-form\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By registering the <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> model with <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.site.register(Question)</span></code>,\nDjango was able to construct a default form representation. Often, you\u2019ll want\nto customize how the admin form looks and works. You\u2019ll do this by telling\nDjango the options you want when you register the object.</p>\n<p>Let\u2019s see how this works by reordering the fields on the edit form. Replace\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.site.register(Question)</span></code> line with:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuestionAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;question_text&quot;</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">QuestionAdmin</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>You\u2019ll follow this pattern \u2013 create a model admin class, then pass it as the\nsecond argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.site.register()</span></code> \u2013 any time you need to change the\nadmin options for a model.</p>\n<p>This particular change above makes the \u201cPublication date\u201d come before the\n\u201cQuestion\u201d field:</p>\n<img alt=\"Fields have been reordered\" src=\"../../_images/admin07.png\" />\n<p>This isn\u2019t impressive with only two fields, but for admin forms with dozens\nof fields, choosing an intuitive order is an important usability detail.</p>\n<p>And speaking of forms with dozens of fields, you might want to split the form\nup into fieldsets:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuestionAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;question_text&quot;</span><span class=\"p\">]}),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;Date information&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">]}),</span>\n    <span class=\"p\">]</span>\n\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">QuestionAdmin</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>The first element of each tuple in\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.fieldsets\" title=\"django.contrib.admin.ModelAdmin.fieldsets\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">fieldsets</span></code></a> is the title of the fieldset.\nHere\u2019s what our form looks like now:</p>\n<img alt=\"Form has fieldsets now\" src=\"../../_images/admin08t.png\" />\n</div>\n<div class=\"section\" id=\"s-adding-related-objects\">\n<span id=\"adding-related-objects\"></span><h2>Adding related objects<a class=\"headerlink\" href=\"#adding-related-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>OK, we have our Question admin page, but a <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> has multiple\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code>s, and the admin page doesn\u2019t display choices.</p>\n<p>Yet.</p>\n<p>There are two ways to solve this problem. The first is to register <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code>\nwith the admin just as we did with <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n<span class=\"c1\"># ...</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Choice</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Now \u201cChoices\u201d is an available option in the Django admin. The \u201cAdd choice\u201d form\nlooks like this:</p>\n<img alt=\"Choice admin page\" src=\"../../_images/admin09.png\" />\n<p>In that form, the \u201cQuestion\u201d field is a select box containing every question in the\ndatabase. Django knows that a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> should be\nrepresented in the admin as a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;select&gt;</span></code> box. In our case, only one question\nexists at this point.</p>\n<p>Also note the \u201cAdd another question\u201d link next to \u201cQuestion.\u201d Every object with\na <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> relationship to another gets this for free. When you click\n\u201cAdd another question\u201d, you\u2019ll get a popup window with the \u201cAdd question\u201d form.\nIf you add a question in that window and click \u201cSave\u201d, Django will save the\nquestion to the database and dynamically add it as the selected choice on the\n\u201cAdd choice\u201d form you\u2019re looking at.</p>\n<p>But, really, this is an inefficient way of adding <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> objects to the system.\nIt\u2019d be better if you could add a bunch of Choices directly when you create the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> object. Let\u2019s make that happen.</p>\n<p>Remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">register()</span></code> call for the <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> model. Then, edit the <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>\nregistration code to read:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ChoiceInline</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">StackedInline</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Choice</span>\n    <span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuestionAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;question_text&quot;</span><span class=\"p\">]}),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;Date information&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;classes&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;collapse&quot;</span><span class=\"p\">]}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">inlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">ChoiceInline</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">QuestionAdmin</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>This tells Django: \u201c<code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> objects are edited on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> admin page. By\ndefault, provide enough fields for 3 choices.\u201d</p>\n<p>Load the \u201cAdd question\u201d page to see how that looks:</p>\n<img alt=\"Add question page now has choices on it\" src=\"../../_images/admin10t.png\" />\n<p>It works like this: There are three slots for related Choices \u2013 as specified\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> \u2013 and each time you come back to the \u201cChange\u201d page for an\nalready-created object, you get another three extra slots.</p>\n<p>At the end of the three current slots you will find an \u201cAdd another Choice\u201d\nlink.  If you click on it, a new slot will be added. If you want to remove the\nadded slot, you can click on the X to the top right of the added slot. This\nimage shows an added slot:</p>\n<img alt=\"Additional slot added dynamically\" src=\"../../_images/admin14t.png\" />\n<p>One small problem, though. It takes a lot of screen space to display all the\nfields for entering related <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> objects. For that reason, Django offers a\ntabular way of displaying inline related objects. To use it, change the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ChoiceInline</span></code> declaration to read:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ChoiceInline</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">TabularInline</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n<p>With that <code class=\"docutils literal notranslate\"><span class=\"pre\">TabularInline</span></code> (instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">StackedInline</span></code>), the\nrelated objects are displayed in a more compact, table-based format:</p>\n<img alt=\"Add question page now has more compact choices\" src=\"../../_images/admin11t.png\" />\n<p>Note that there is an extra \u201cDelete?\u201d column that allows removing rows added\nusing the \u201cAdd another Choice\u201d button and rows that have already been saved.</p>\n</div>\n<div class=\"section\" id=\"s-customize-the-admin-change-list\">\n<span id=\"customize-the-admin-change-list\"></span><h2>Customize the admin change list<a class=\"headerlink\" href=\"#customize-the-admin-change-list\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now that the Question admin page is looking good, let\u2019s make some tweaks to the\n\u201cchange list\u201d page \u2013 the one that displays all the questions in the system.</p>\n<p>Here\u2019s what it looks like at this point:</p>\n<img alt=\"Polls change list page\" src=\"../../_images/admin04t.png\" />\n<p>By default, Django displays the <code class=\"docutils literal notranslate\"><span class=\"pre\">str()</span></code> of each object. But sometimes it\u2019d be\nmore helpful if we could display individual fields. To do that, use the\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display\" title=\"django.contrib.admin.ModelAdmin.list_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">list_display</span></code></a> admin option, which is a\ntuple of field names to display, as columns, on the change list page for the\nobject:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">QuestionAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;question_text&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>For good measure, let\u2019s also include the <code class=\"docutils literal notranslate\"><span class=\"pre\">was_published_recently()</span></code> method\nfrom <a class=\"reference internal\" href=\"../tutorial02/\"><span class=\"doc\">Tutorial 2</span></a>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">QuestionAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;question_text&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;was_published_recently&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Now the question change list page looks like this:</p>\n<img alt=\"Polls change list page, updated\" src=\"../../_images/admin12t.png\" />\n<p>You can click on the column headers to sort by those values \u2013 except in the\ncase of the <code class=\"docutils literal notranslate\"><span class=\"pre\">was_published_recently</span></code> header, because sorting by the output\nof an arbitrary method is not supported. Also note that the column header for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">was_published_recently</span></code> is, by default, the name of the method (with\nunderscores replaced with spaces), and that each line contains the string\nrepresentation of the output.</p>\n<p>You can improve that by using the <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.display\" title=\"django.contrib.admin.display\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">display()</span></code></a>\ndecorator on that method (in <code class=\"file docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code>), as follows:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code></span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">display</span><span class=\"p\">(</span>\n        <span class=\"n\">boolean</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">ordering</span><span class=\"o\">=</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;Published recently?&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">was_published_recently</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"o\">&lt;=</span> <span class=\"n\">now</span>\n</pre></div>\n</div>\n</div>\n<p>For more information on the properties configurable via the decorator, see\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display\" title=\"django.contrib.admin.ModelAdmin.list_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">list_display</span></code></a>.</p>\n<p>Edit your <code class=\"file docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code> file again and add an improvement to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> change list page: filters using the\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter\" title=\"django.contrib.admin.ModelAdmin.list_filter\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">list_filter</span></code></a>. Add the following line to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuestionAdmin</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>That adds a \u201cFilter\u201d sidebar that lets people filter the change list by the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> field:</p>\n<img alt=\"Polls change list page, updated\" src=\"../../_images/admin13t.png\" />\n<p>The type of filter displayed depends on the type of field you\u2019re filtering on.\nBecause <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>, Django\nknows to give appropriate filter options: \u201cAny date\u201d, \u201cToday\u201d, \u201cPast 7 days\u201d,\n\u201cThis month\u201d, \u201cThis year\u201d.</p>\n<p>This is shaping up well. Let\u2019s add some search capability:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">search_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;question_text&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>That adds a search box at the top of the change list. When somebody enters\nsearch terms, Django will search the <code class=\"docutils literal notranslate\"><span class=\"pre\">question_text</span></code> field. You can use as many\nfields as you\u2019d like \u2013 although because it uses a <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> query behind the\nscenes, limiting the number of search fields to a reasonable number will make\nit easier for your database to do the search.</p>\n<p>Now\u2019s also a good time to note that change lists give you free pagination. The\ndefault is to display 100 items per page. <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_per_page\" title=\"django.contrib.admin.ModelAdmin.list_per_page\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Change</span> <span class=\"pre\">list</span> <span class=\"pre\">pagination</span></code></a>, <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.search_fields\" title=\"django.contrib.admin.ModelAdmin.search_fields\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">search</span> <span class=\"pre\">boxes</span></code></a>, <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter\" title=\"django.contrib.admin.ModelAdmin.list_filter\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">filters</span></code></a>, <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.date_hierarchy\" title=\"django.contrib.admin.ModelAdmin.date_hierarchy\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">date-hierarchies</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display\" title=\"django.contrib.admin.ModelAdmin.list_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">column-header-ordering</span></code></a>\nall work together like you think they should.</p>\n</div>\n<div class=\"section\" id=\"s-customize-the-admin-look-and-feel\">\n<span id=\"customize-the-admin-look-and-feel\"></span><h2>Customize the admin look and feel<a class=\"headerlink\" href=\"#customize-the-admin-look-and-feel\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Clearly, having \u201cDjango administration\u201d at the top of each admin page is\nridiculous. It\u2019s just placeholder text.</p>\n<p>You can change it, though, using Django\u2019s template system. The Django admin is\npowered by Django itself, and its interfaces use Django\u2019s own template system.</p>\n<div class=\"section\" id=\"s-customizing-your-project-s-templates\">\n<span id=\"s-ref-customizing-your-projects-templates\"></span><span id=\"customizing-your-project-s-templates\"></span><span id=\"ref-customizing-your-projects-templates\"></span><h3>Customizing your <em>project\u2019s</em> templates<a class=\"headerlink\" href=\"#customizing-your-project-s-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> directory in your project directory (the one that\ncontains <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>). Templates can live anywhere on your filesystem that\nDjango can access. (Django runs as whatever user your server runs.) However,\nkeeping your templates within the project is a good convention to follow.</p>\n<p>Open your settings file (<code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code>, remember) and add a\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> option in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code></span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;DIRS&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">],</span>\n        <span class=\"s2\">&quot;APP_DIRS&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;context_processors&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">&quot;django.template.context_processors.debug&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;django.template.context_processors.request&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;django.contrib.auth.context_processors.auth&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;django.contrib.messages.context_processors.messages&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> is a list of filesystem directories to check\nwhen loading Django templates; it\u2019s a search path.</p>\n<div class=\"admonition-organizing-templates admonition\">\n<p class=\"first admonition-title\">Organizing templates</p>\n<p class=\"last\">Just like the static files, we <em>could</em> have all our templates together, in\none big templates directory, and it would work perfectly well. However,\ntemplates that belong to a particular application should be placed in that\napplication\u2019s template directory (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates</span></code>) rather than the\nproject\u2019s (<code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code>). We\u2019ll discuss in more detail in the\n<a class=\"reference internal\" href=\"../reusable-apps/\"><span class=\"doc\">reusable apps tutorial</span></a> <em>why</em> we do this.</p>\n</div>\n<p>Now create a directory called <code class=\"docutils literal notranslate\"><span class=\"pre\">admin</span></code> inside <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code>, and copy the\ntemplate <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code> from within the default Django admin\ntemplate directory in the source code of Django itself\n(<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/contrib/admin/templates\">django/contrib/admin/templates</a>) into that directory.</p>\n<div class=\"admonition-where-are-the-django-source-files admonition\">\n<p class=\"first admonition-title\">Where are the Django source files?</p>\n<p>If you have difficulty finding where the Django source files are located\non your system, run the following command:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"last highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -c <span class=\"s2\">&quot;import django; print(django.__path__)&quot;</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -c <span class=\"s2\">&quot;import django; print(django.__path__)&quot;</span>\n</pre></div>\n</section>\n</div>\n</div>\n<p>Then, edit the file and replace\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">site_header|default:_('Django</span> <span class=\"pre\">administration')</span> <span class=\"pre\">}}</span></code> (including the curly\nbraces) with your own site\u2019s name as you see fit. You should end up with\na section of code like:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">branding</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;site-name&quot;</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;admin:index&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>Polls Administration<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>We use this approach to teach you how to override templates. In an actual\nproject, you would probably use\nthe <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.site_header\" title=\"django.contrib.admin.AdminSite.site_header\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.AdminSite.site_header</span></code></a> attribute to more easily\nmake this particular customization.</p>\n<p>This template file contains lots of text like <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">branding</span> <span class=\"pre\">%}</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">title</span> <span class=\"pre\">}}</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span></code> tags are part of Django\u2019s\ntemplate language. When Django renders <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code>, this\ntemplate language will be evaluated to produce the final HTML page, just like\nwe saw in <a class=\"reference internal\" href=\"../tutorial03/\"><span class=\"doc\">Tutorial 3</span></a>.</p>\n<p>Note that any of Django\u2019s default admin templates can be overridden. To\noverride a template, do the same thing you did with <code class=\"docutils literal notranslate\"><span class=\"pre\">base_site.html</span></code> \u2013 copy\nit from the default directory into your custom directory, and make changes.</p>\n</div>\n<div class=\"section\" id=\"s-customizing-your-application-s-templates\">\n<span id=\"customizing-your-application-s-templates\"></span><h3>Customizing your <em>application\u2019s</em> templates<a class=\"headerlink\" href=\"#customizing-your-application-s-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Astute readers will ask: But if <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> was empty by\ndefault, how was Django finding the default admin templates? The answer is\nthat, since <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-APP_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APP_DIRS</span></code></a> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>,\nDjango automatically looks for a <code class=\"docutils literal notranslate\"><span class=\"pre\">templates/</span></code> subdirectory within each\napplication package, for use as a fallback (don\u2019t forget that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code> is an application).</p>\n<p>Our poll application is not very complex and doesn\u2019t need custom admin\ntemplates. But if it grew more sophisticated and required modification of\nDjango\u2019s standard admin templates for some of its functionality, it would be\nmore sensible to modify the <em>application\u2019s</em> templates, rather than those in the\n<em>project</em>. That way, you could include the polls application in any new project\nand be assured that it would find the custom templates it needed.</p>\n<p>See the <a class=\"reference internal\" href=\"../../topics/templates/#template-loading\"><span class=\"std std-ref\">template loading documentation</span></a> for more\ninformation about how Django finds its templates.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-customize-the-admin-index-page\">\n<span id=\"customize-the-admin-index-page\"></span><h2>Customize the admin index page<a class=\"headerlink\" href=\"#customize-the-admin-index-page\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>On a similar note, you might want to customize the look and feel of the Django\nadmin index page.</p>\n<p>By default, it displays all the apps in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> that have been\nregistered with the admin application, in alphabetical order. You may want to\nmake significant changes to the layout. After all, the index is probably the\nmost important page of the admin, and it should be easy to use.</p>\n<p>The template to customize is <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/index.html</span></code>. (Do the same as with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code> in the previous section \u2013 copy it from the default\ndirectory to your custom template directory). Edit the file, and you\u2019ll see it\nuses a template variable called <code class=\"docutils literal notranslate\"><span class=\"pre\">app_list</span></code>. That variable contains every\ninstalled Django app. Instead of using that, you can hard-code links to\nobject-specific admin pages in whatever way you think is best.</p>\n<p>When you\u2019re comfortable with the admin, read <a class=\"reference internal\" href=\"../tutorial08/\"><span class=\"doc\">part 8 of this\ntutorial</span></a> to learn how to use third-party packages.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["intro/tutorial08", "Writing your first Django app, part 8", "N", "next"], ["intro/tutorial06", "Writing your first Django app, part 6", "P", "previous"]], "sourcename": "intro/tutorial07.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing your first Django app, part 7</a><ul>\n<li><a class=\"reference internal\" href=\"#customize-the-admin-form\">Customize the admin form</a></li>\n<li><a class=\"reference internal\" href=\"#adding-related-objects\">Adding related objects</a></li>\n<li><a class=\"reference internal\" href=\"#customize-the-admin-change-list\">Customize the admin change list</a></li>\n<li><a class=\"reference internal\" href=\"#customize-the-admin-look-and-feel\">Customize the admin look and feel</a><ul>\n<li><a class=\"reference internal\" href=\"#customizing-your-project-s-templates\">Customizing your <em>project\u2019s</em> templates</a></li>\n<li><a class=\"reference internal\" href=\"#customizing-your-application-s-templates\">Customizing your <em>application\u2019s</em> templates</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#customize-the-admin-index-page\">Customize the admin index page</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "intro/tutorial07", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
