{"parents": [{"link": "../", "title": "Getting started"}], "prev": {"link": "../tutorial04/", "title": "Writing your first Django app, part 4"}, "next": {"link": "../tutorial06/", "title": "Writing your first Django app, part 6"}, "title": "Writing your first Django app, part 5", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-your-first-django-app-part-5\">\n<span id=\"writing-your-first-django-app-part-5\"></span><h1>Writing your first Django app, part 5<a class=\"headerlink\" href=\"#writing-your-first-django-app-part-5\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This tutorial begins where <a class=\"reference internal\" href=\"../tutorial04/\"><span class=\"doc\">Tutorial 4</span></a> left off.\nWe\u2019ve built a web-poll application, and we\u2019ll now create some automated tests\nfor it.</p>\n<div class=\"admonition-where-to-get-help admonition\">\n<p class=\"first admonition-title\">Where to get help:</p>\n<p class=\"last\">If you\u2019re having trouble going through this tutorial, please head over to\nthe <a class=\"reference internal\" href=\"../../faq/help/\"><span class=\"doc\">Getting Help</span></a> section of the FAQ.</p>\n</div>\n<div class=\"section\" id=\"s-introducing-automated-testing\">\n<span id=\"introducing-automated-testing\"></span><h2>Introducing automated testing<a class=\"headerlink\" href=\"#introducing-automated-testing\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-what-are-automated-tests\">\n<span id=\"what-are-automated-tests\"></span><h3>What are automated tests?<a class=\"headerlink\" href=\"#what-are-automated-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Tests are routines that check the operation of your code.</p>\n<p>Testing operates at different levels. Some tests might apply to a tiny detail\n(<em>does a particular model method return values as expected?</em>) while others\nexamine the overall operation of the software (<em>does a sequence of user inputs\non the site produce the desired result?</em>). That\u2019s no different from the kind of\ntesting you did earlier in <a class=\"reference internal\" href=\"../tutorial02/\"><span class=\"doc\">Tutorial 2</span></a>, using the\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a> to examine the behavior of a method, or running the\napplication and entering data to check how it behaves.</p>\n<p>What\u2019s different in <em>automated</em> tests is that the testing work is done for\nyou by the system. You create a set of tests once, and then as you make changes\nto your app, you can check that your code still works as you originally\nintended, without having to perform time consuming manual testing.</p>\n</div>\n<div class=\"section\" id=\"s-why-you-need-to-create-tests\">\n<span id=\"why-you-need-to-create-tests\"></span><h3>Why you need to create tests<a class=\"headerlink\" href=\"#why-you-need-to-create-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>So why create tests, and why now?</p>\n<p>You may feel that you have quite enough on your plate just learning\nPython/Django, and having yet another thing to learn and do may seem\noverwhelming and perhaps unnecessary. After all, our polls application is\nworking quite happily now; going through the trouble of creating automated\ntests is not going to make it work any better. If creating the polls\napplication is the last bit of Django programming you will ever do, then true,\nyou don\u2019t need to know how to create automated tests. But, if that\u2019s not the\ncase, now is an excellent time to learn.</p>\n<div class=\"section\" id=\"s-tests-will-save-you-time\">\n<span id=\"tests-will-save-you-time\"></span><h4>Tests will save you time<a class=\"headerlink\" href=\"#tests-will-save-you-time\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Up to a certain point, \u2018checking that it seems to work\u2019 will be a satisfactory\ntest. In a more sophisticated application, you might have dozens of complex\ninteractions between components.</p>\n<p>A change in any of those components could have unexpected consequences on the\napplication\u2019s behavior. Checking that it still \u2018seems to work\u2019 could mean\nrunning through your code\u2019s functionality with twenty different variations of\nyour test data to make sure you haven\u2019t broken something - not a good use\nof your time.</p>\n<p>That\u2019s especially true when automated tests could do this for you in seconds.\nIf something\u2019s gone wrong, tests will also assist in identifying the code\nthat\u2019s causing the unexpected behavior.</p>\n<p>Sometimes it may seem a chore to tear yourself away from your productive,\ncreative programming work to face the unglamorous and unexciting business\nof writing tests, particularly when you know your code is working properly.</p>\n<p>However, the task of writing tests is a lot more fulfilling than spending hours\ntesting your application manually or trying to identify the cause of a\nnewly-introduced problem.</p>\n</div>\n<div class=\"section\" id=\"s-tests-don-t-just-identify-problems-they-prevent-them\">\n<span id=\"tests-don-t-just-identify-problems-they-prevent-them\"></span><h4>Tests don\u2019t just identify problems, they prevent them<a class=\"headerlink\" href=\"#tests-don-t-just-identify-problems-they-prevent-them\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>It\u2019s a mistake to think of tests merely as a negative aspect of development.</p>\n<p>Without tests, the purpose or intended behavior of an application might be\nrather opaque. Even when it\u2019s your own code, you will sometimes find yourself\npoking around in it trying to find out what exactly it\u2019s doing.</p>\n<p>Tests change that; they light up your code from the inside, and when something\ngoes wrong, they focus light on the part that has gone wrong - <em>even if you\nhadn\u2019t even realized it had gone wrong</em>.</p>\n</div>\n<div class=\"section\" id=\"s-tests-make-your-code-more-attractive\">\n<span id=\"tests-make-your-code-more-attractive\"></span><h4>Tests make your code more attractive<a class=\"headerlink\" href=\"#tests-make-your-code-more-attractive\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You might have created a brilliant piece of software, but you will find that\nmany other developers will refuse to look at it because it lacks tests; without\ntests, they won\u2019t trust it. Jacob Kaplan-Moss, one of Django\u2019s original\ndevelopers, says \u201cCode without tests is broken by design.\u201d</p>\n<p>That other developers want to see tests in your software before they take it\nseriously is yet another reason for you to start writing tests.</p>\n</div>\n<div class=\"section\" id=\"s-tests-help-teams-work-together\">\n<span id=\"tests-help-teams-work-together\"></span><h4>Tests help teams work together<a class=\"headerlink\" href=\"#tests-help-teams-work-together\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The previous points are written from the point of view of a single developer\nmaintaining an application. Complex applications will be maintained by teams.\nTests guarantee that colleagues don\u2019t inadvertently break your code (and that\nyou don\u2019t break theirs without knowing). If you want to make a living as a\nDjango programmer, you must be good at writing tests!</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-basic-testing-strategies\">\n<span id=\"basic-testing-strategies\"></span><h2>Basic testing strategies<a class=\"headerlink\" href=\"#basic-testing-strategies\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are many ways to approach writing tests.</p>\n<p>Some programmers follow a discipline called \u201c<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Test-driven_development\">test-driven development</a>\u201d; they\nactually write their tests before they write their code. This might seem\ncounter-intuitive, but in fact it\u2019s similar to what most people will often do\nanyway: they describe a problem, then create some code to solve it. Test-driven\ndevelopment formalizes the problem in a Python test case.</p>\n<p>More often, a newcomer to testing will create some code and later decide that\nit should have some tests. Perhaps it would have been better to write some\ntests earlier, but it\u2019s never too late to get started.</p>\n<p>Sometimes it\u2019s difficult to figure out where to get started with writing tests.\nIf you have written several thousand lines of Python, choosing something to\ntest might not be easy. In such a case, it\u2019s fruitful to write your first test\nthe next time you make a change, either when you add a new feature or fix a bug.</p>\n<p>So let\u2019s do that right away.</p>\n</div>\n<div class=\"section\" id=\"s-writing-our-first-test\">\n<span id=\"writing-our-first-test\"></span><h2>Writing our first test<a class=\"headerlink\" href=\"#writing-our-first-test\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-we-identify-a-bug\">\n<span id=\"we-identify-a-bug\"></span><h3>We identify a bug<a class=\"headerlink\" href=\"#we-identify-a-bug\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Fortunately, there\u2019s a little bug in the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> application for us to fix\nright away: the <code class=\"docutils literal notranslate\"><span class=\"pre\">Question.was_published_recently()</span></code> method returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> was published within the last day (which is correct) but also if\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> field is in the future (which certainly isn\u2019t).</p>\n<p>Confirm the bug by using the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a> to check the method on a question\nwhose date lies in the future:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py shell\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py shell\n</pre></div>\n</section>\n</div>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create a Question instance with pub_date 30 days in the future</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">future_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># was it published recently?</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">future_question</span><span class=\"o\">.</span><span class=\"n\">was_published_recently</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Since things in the future are not \u2018recent\u2019, this is clearly wrong.</p>\n</div>\n<div class=\"section\" id=\"s-create-a-test-to-expose-the-bug\">\n<span id=\"create-a-test-to-expose-the-bug\"></span><h3>Create a test to expose the bug<a class=\"headerlink\" href=\"#create-a-test-to-expose-the-bug\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>What we\u2019ve just done in the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a> to test for the problem is exactly\nwhat we can do in an automated test, so let\u2019s turn that into an automated test.</p>\n<p>A conventional place for an application\u2019s tests is in the application\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code> file; the testing system will automatically find tests in any file\nwhose name begins with <code class=\"docutils literal notranslate\"><span class=\"pre\">test</span></code>.</p>\n<p>Put the following in the <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code> file in the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> application:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/tests.py</span></code></span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuestionModelTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_was_published_recently_with_future_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        was_published_recently() returns False for questions whose pub_date</span>\n<span class=\"sd\">        is in the future.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">future_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIs</span><span class=\"p\">(</span><span class=\"n\">future_question</span><span class=\"o\">.</span><span class=\"n\">was_published_recently</span><span class=\"p\">(),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Here we have created a <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a> subclass with a method that\ncreates a <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> instance with a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> in the future. We then check\nthe output of <code class=\"docutils literal notranslate\"><span class=\"pre\">was_published_recently()</span></code> - which <em>ought</em> to be False.</p>\n</div>\n<div class=\"section\" id=\"s-running-tests\">\n<span id=\"running-tests\"></span><h3>Running tests<a class=\"headerlink\" href=\"#running-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In the terminal, we can run our test:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py <span class=\"nb\">test</span> polls\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py test polls\n</pre></div>\n</section>\n</div>\n<p>and you\u2019ll see something like:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>Creating <span class=\"nb\">test</span> database <span class=\"k\">for</span> <span class=\"nb\">alias</span> <span class=\"s1\">&#39;default&#39;</span>...\nSystem check identified no issues <span class=\"o\">(</span><span class=\"m\">0</span> silenced<span class=\"o\">)</span>.\n<span class=\"nv\">F</span>\n<span class=\"o\">======================================================================</span>\nFAIL: test_was_published_recently_with_future_question <span class=\"o\">(</span>polls.tests.QuestionModelTests<span class=\"o\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"o\">(</span>most recent call last<span class=\"o\">)</span>:\n  File <span class=\"s2\">&quot;/path/to/mysite/polls/tests.py&quot;</span>, line <span class=\"m\">16</span>, <span class=\"k\">in</span> test_was_published_recently_with_future_question\n    self.assertIs<span class=\"o\">(</span>future_question.was_published_recently<span class=\"o\">()</span>, False<span class=\"o\">)</span>\nAssertionError: True is not False\n\n----------------------------------------------------------------------\nRan <span class=\"m\">1</span> <span class=\"nb\">test</span> <span class=\"k\">in</span> <span class=\"m\">0</span>.001s\n\nFAILED <span class=\"o\">(</span><span class=\"nv\">failures</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"o\">)</span>\nDestroying <span class=\"nb\">test</span> database <span class=\"k\">for</span> <span class=\"nb\">alias</span> <span class=\"s1\">&#39;default&#39;</span>...\n</pre></div>\n</div>\n<div class=\"admonition-different-error admonition\">\n<p class=\"first admonition-title\">Different error?</p>\n<p class=\"last\">If instead you\u2019re getting a <code class=\"docutils literal notranslate\"><span class=\"pre\">NameError</span></code> here, you may have missed a step\nin <a class=\"reference internal\" href=\"../tutorial02/#tutorial02-import-timezone\"><span class=\"std std-ref\">Part 2</span></a> where we added imports of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">timezone</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code>. Copy the imports from\nthat section, and try running your tests again.</p>\n</div>\n<p>What happened is this:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">test</span> <span class=\"pre\">polls</span></code> looked for tests in the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> application</li>\n<li>it found a subclass of the <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a> class</li>\n<li>it created a special database for the purpose of testing</li>\n<li>it looked for test methods - ones whose names begin with <code class=\"docutils literal notranslate\"><span class=\"pre\">test</span></code></li>\n<li>in <code class=\"docutils literal notranslate\"><span class=\"pre\">test_was_published_recently_with_future_question</span></code> it created a <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>\ninstance whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> field is 30 days in the future</li>\n<li>\u2026 and using the <code class=\"docutils literal notranslate\"><span class=\"pre\">assertIs()</span></code> method, it discovered that its\n<code class=\"docutils literal notranslate\"><span class=\"pre\">was_published_recently()</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, though we wanted it to return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code></li>\n</ul>\n<p>The test informs us which test failed and even the line on which the failure\noccurred.</p>\n</div>\n<div class=\"section\" id=\"s-fixing-the-bug\">\n<span id=\"fixing-the-bug\"></span><h3>Fixing the bug<a class=\"headerlink\" href=\"#fixing-the-bug\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We already know what the problem is: <code class=\"docutils literal notranslate\"><span class=\"pre\">Question.was_published_recently()</span></code> should\nreturn <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if its <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is in the future. Amend the method in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code>, so that it will only return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the date is also in the\npast:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">was_published_recently</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"o\">&lt;=</span> <span class=\"n\">now</span>\n</pre></div>\n</div>\n</div>\n<p>and run the test again:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">Creating test database for alias &#39;default&#39;...</span>\n<span class=\"x\">System check identified no issues (0 silenced).</span>\n<span class=\"x\">.</span>\n<span class=\"x\">----------------------------------------------------------------------</span>\n<span class=\"x\">Ran 1 test in 0.001s</span>\n\n<span class=\"x\">OK</span>\n<span class=\"x\">Destroying test database for alias &#39;default&#39;...</span>\n</pre></div>\n</div>\n<p>After identifying a bug, we wrote a test that exposes it and corrected the bug\nin the code so our test passes.</p>\n<p>Many other things might go wrong with our application in the future, but we can\nbe sure that we won\u2019t inadvertently reintroduce this bug, because running the\ntest will warn us immediately. We can consider this little portion of the\napplication pinned down safely forever.</p>\n</div>\n<div class=\"section\" id=\"s-more-comprehensive-tests\">\n<span id=\"more-comprehensive-tests\"></span><h3>More comprehensive tests<a class=\"headerlink\" href=\"#more-comprehensive-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>While we\u2019re here, we can further pin down the <code class=\"docutils literal notranslate\"><span class=\"pre\">was_published_recently()</span></code>\nmethod; in fact, it would be positively embarrassing if in fixing one bug we had\nintroduced another.</p>\n<p>Add two more test methods to the same class, to test the behavior of the method\nmore comprehensively:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/tests.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_was_published_recently_with_old_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    was_published_recently() returns False for questions whose pub_date</span>\n<span class=\"sd\">    is older than 1 day.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">old_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIs</span><span class=\"p\">(</span><span class=\"n\">old_question</span><span class=\"o\">.</span><span class=\"n\">was_published_recently</span><span class=\"p\">(),</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_was_published_recently_with_recent_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    was_published_recently() returns True for questions whose pub_date</span>\n<span class=\"sd\">    is within the last day.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"n\">minutes</span><span class=\"o\">=</span><span class=\"mi\">59</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">59</span><span class=\"p\">)</span>\n    <span class=\"n\">recent_question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIs</span><span class=\"p\">(</span><span class=\"n\">recent_question</span><span class=\"o\">.</span><span class=\"n\">was_published_recently</span><span class=\"p\">(),</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>And now we have three tests that confirm that <code class=\"docutils literal notranslate\"><span class=\"pre\">Question.was_published_recently()</span></code>\nreturns sensible values for past, recent, and future questions.</p>\n<p>Again, <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> is a minimal application, but however complex it grows in the\nfuture and whatever other code it interacts with, we now have some guarantee\nthat the method we have written tests for will behave in expected ways.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-test-a-view\">\n<span id=\"test-a-view\"></span><h2>Test a view<a class=\"headerlink\" href=\"#test-a-view\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The polls application is fairly undiscriminating: it will publish any question,\nincluding ones whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> field lies in the future. We should improve\nthis. Setting a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> in the future should mean that the Question is\npublished at that moment, but invisible until then.</p>\n<div class=\"section\" id=\"s-a-test-for-a-view\">\n<span id=\"a-test-for-a-view\"></span><h3>A test for a view<a class=\"headerlink\" href=\"#a-test-for-a-view\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When we fixed the bug above, we wrote the test first and then the code to fix\nit. In fact that was an example of test-driven development, but it doesn\u2019t\nreally matter in which order we do the work.</p>\n<p>In our first test, we focused closely on the internal behavior of the code. For\nthis test, we want to check its behavior as it would be experienced by a user\nthrough a web browser.</p>\n<p>Before we try to fix anything, let\u2019s have a look at the tools at our disposal.</p>\n</div>\n<div class=\"section\" id=\"s-the-django-test-client\">\n<span id=\"the-django-test-client\"></span><h3>The Django test client<a class=\"headerlink\" href=\"#the-django-test-client\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django provides a test <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client\" title=\"django.test.Client\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Client</span></code></a> to simulate a user\ninteracting with the code at the view level.  We can use it in <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code>\nor even in the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a>.</p>\n<p>We will start again with the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a>, where we need to do a couple of\nthings that won\u2019t be necessary in <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code>. The first is to set up the test\nenvironment in the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a>:</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py shell\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py shell\n</pre></div>\n</section>\n</div>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">setup_test_environment</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">setup_test_environment</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.utils.setup_test_environment\" title=\"django.test.utils.setup_test_environment\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setup_test_environment()</span></code></a> installs a template renderer\nwhich will allow us to examine some additional attributes on responses such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">response.context</span></code> that otherwise wouldn\u2019t be available. Note that this\nmethod <em>does not</em> set up a test database, so the following will be run against\nthe existing database and the output may differ slightly depending on what\nquestions you already created. You might get unexpected results if your\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code> isn\u2019t correct. If you don\u2019t remember setting\nit earlier, check it before continuing.</p>\n<p>Next we need to import the test client class (later in <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code> we will use\nthe <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a> class, which comes with its own client, so\nthis won\u2019t be required):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># create an instance of the client for our use</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With that ready, we can ask the client to do some work for us:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># get a response from &#39;/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Not Found: /</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># we should expect a 404 from that address; if you instead see an</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># &quot;Invalid HTTP_HOST header&quot; error and a 400 response, you probably</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># omitted the setup_test_environment() call described earlier.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"go\">404</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># on the other hand we should expect to find something at &#39;/polls/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># we&#39;ll use &#39;reverse()&#39; rather than a hardcoded URL</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:index&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"go\">200</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span>\n<span class=\"go\">b&#39;\\n    &lt;ul&gt;\\n    \\n        &lt;li&gt;&lt;a href=&quot;/polls/1/&quot;&gt;What&amp;#x27;s up?&lt;/a&gt;&lt;/li&gt;\\n    \\n    &lt;/ul&gt;\\n\\n&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-improving-our-view\">\n<span id=\"improving-our-view\"></span><h3>Improving our view<a class=\"headerlink\" href=\"#improving-our-view\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The list of polls shows polls that aren\u2019t published yet (i.e. those that have a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> in the future). Let\u2019s fix that.</p>\n<p>In <a class=\"reference internal\" href=\"../tutorial04/\"><span class=\"doc\">Tutorial 4</span></a> we introduced a class-based view,\nbased on <a class=\"reference internal\" href=\"../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">IndexView</span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;polls/index.html&quot;</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;latest_question_list&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the last five published questions.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>We need to amend the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code> method and change it so that it also\nchecks the date by comparing it with <code class=\"docutils literal notranslate\"><span class=\"pre\">timezone.now()</span></code>. First we need to add\nan import:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n</pre></div>\n</div>\n</div>\n<p>and then we must amend the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code> method like so:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the last five published questions (not including those set to be</span>\n<span class=\"sd\">    published in the future).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__lte</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[</span>\n        <span class=\"p\">:</span><span class=\"mi\">5</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Question.objects.filter(pub_date__lte=timezone.now())</span></code> returns a queryset\ncontaining <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>s whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is less than or equal to - that\nis, earlier than or equal to - <code class=\"docutils literal notranslate\"><span class=\"pre\">timezone.now</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-testing-our-new-view\">\n<span id=\"testing-our-new-view\"></span><h3>Testing our new view<a class=\"headerlink\" href=\"#testing-our-new-view\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Now you can satisfy yourself that this behaves as expected by firing up\n<code class=\"docutils literal notranslate\"><span class=\"pre\">runserver</span></code>, loading the site in your browser, creating <code class=\"docutils literal notranslate\"><span class=\"pre\">Questions</span></code> with\ndates in the past and future, and checking that only those that have been\npublished are listed. You don\u2019t want to have to do that <em>every single time you\nmake any change that might affect this</em> - so let\u2019s also create a test, based on\nour <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-shell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">shell</span></code></a> session above.</p>\n<p>Add the following to <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/tests.py</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/tests.py</span></code></span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n</pre></div>\n</div>\n</div>\n<p>and we\u2019ll create a shortcut function to create questions as well as a new test\nclass:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/tests.py</span></code></span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Create a question with the given `question_text` and published the</span>\n<span class=\"sd\">    given number of `days` offset to now (negative for questions published</span>\n<span class=\"sd\">    in the past, positive for questions that have yet to be published).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"n\">days</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"n\">question_text</span><span class=\"p\">,</span> <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">time</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QuestionIndexViewTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_no_questions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        If no questions exist, an appropriate message is displayed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:index&quot;</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;No polls are available.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertQuerySetEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_past_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Questions with a pub_date in the past are displayed on the</span>\n<span class=\"sd\">        index page.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Past question.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=-</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:index&quot;</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertQuerySetEqual</span><span class=\"p\">(</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">question</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_future_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Questions with a pub_date in the future aren&#39;t displayed on</span>\n<span class=\"sd\">        the index page.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Future question.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:index&quot;</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;No polls are available.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertQuerySetEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">],</span> <span class=\"p\">[])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_future_question_and_past_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Even if both past and future questions exist, only past questions</span>\n<span class=\"sd\">        are displayed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Past question.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=-</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Future question.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:index&quot;</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertQuerySetEqual</span><span class=\"p\">(</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">question</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_two_past_questions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The questions index page may display multiple questions.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">question1</span> <span class=\"o\">=</span> <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Past question 1.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=-</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n        <span class=\"n\">question2</span> <span class=\"o\">=</span> <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Past question 2.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=-</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:index&quot;</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertQuerySetEqual</span><span class=\"p\">(</span>\n            <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">[</span><span class=\"n\">question2</span><span class=\"p\">,</span> <span class=\"n\">question1</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Let\u2019s look at some of these more closely.</p>\n<p>First is a question shortcut function, <code class=\"docutils literal notranslate\"><span class=\"pre\">create_question</span></code>, to take some\nrepetition out of the process of creating questions.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">test_no_questions</span></code> doesn\u2019t create any questions, but checks the message:\n\u201cNo polls are available.\u201d and verifies the <code class=\"docutils literal notranslate\"><span class=\"pre\">latest_question_list</span></code> is empty.\nNote that the <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a> class provides some additional\nassertion methods. In these examples, we use\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertContains\" title=\"django.test.SimpleTestCase.assertContains\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertContains()</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase.assertQuerySetEqual\" title=\"django.test.TransactionTestCase.assertQuerySetEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertQuerySetEqual()</span></code></a>.</p>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">test_past_question</span></code>, we create a question and verify that it appears in\nthe list.</p>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">test_future_question</span></code>, we create a question with a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> in the\nfuture. The database is reset for each test method, so the first question is no\nlonger there, and so again the index shouldn\u2019t have any questions in it.</p>\n<p>And so on. In effect, we are using the tests to tell a story of admin input\nand user experience on the site, and checking that at every state and for every\nnew change in the state of the system, the expected results are published.</p>\n</div>\n<div class=\"section\" id=\"s-testing-the-detailview\">\n<span id=\"testing-the-detailview\"></span><h3>Testing the <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code><a class=\"headerlink\" href=\"#testing-the-detailview\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>What we have works well; however, even though future questions don\u2019t appear in\nthe <em>index</em>, users can still reach them if they know or guess the right URL. So\nwe need to add a similar  constraint to <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">DetailView</span><span class=\"p\">(</span><span class=\"n\">generic</span><span class=\"o\">.</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Excludes any questions that aren&#39;t published yet.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__lte</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n</div>\n<p>We should then add some tests, to check that a <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code>\nis in the past can be displayed, and that one with a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> in the future\nis not:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id10\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/tests.py</span></code></span><a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">QuestionDetailViewTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_future_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The detail view of a question with a pub_date in the future</span>\n<span class=\"sd\">        returns a 404 not found.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">future_question</span> <span class=\"o\">=</span> <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Future question.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:detail&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">future_question</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,))</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">404</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_past_question</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The detail view of a question with a pub_date in the past</span>\n<span class=\"sd\">        displays the question&#39;s text.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">past_question</span> <span class=\"o\">=</span> <span class=\"n\">create_question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Past Question.&quot;</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"o\">=-</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls:detail&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">past_question</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,))</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">past_question</span><span class=\"o\">.</span><span class=\"n\">question_text</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-ideas-for-more-tests\">\n<span id=\"ideas-for-more-tests\"></span><h3>Ideas for more tests<a class=\"headerlink\" href=\"#ideas-for-more-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We ought to add a similar <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code> method to <code class=\"docutils literal notranslate\"><span class=\"pre\">ResultsView</span></code> and\ncreate a new test class for that view. It\u2019ll be very similar to what we have\njust created; in fact there will be a lot of repetition.</p>\n<p>We could also improve our application in other ways, adding tests along the\nway. For example, it\u2019s silly that <code class=\"docutils literal notranslate\"><span class=\"pre\">Questions</span></code> can be published on the site\nthat have no <code class=\"docutils literal notranslate\"><span class=\"pre\">Choices</span></code>. So, our views could check for this, and exclude such\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Questions</span></code>. Our tests would create a <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> without <code class=\"docutils literal notranslate\"><span class=\"pre\">Choices</span></code> and\nthen test that it\u2019s not published, as well as create a similar <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>\n<em>with</em> <code class=\"docutils literal notranslate\"><span class=\"pre\">Choices</span></code>, and test that it <em>is</em> published.</p>\n<p>Perhaps logged-in admin users should be allowed to see unpublished\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Questions</span></code>, but not ordinary visitors. Again: whatever needs to be added to\nthe software to accomplish this should be accompanied by a test, whether you\nwrite the test first and then make the code pass the test, or work out the\nlogic in your code first and then write a test to prove it.</p>\n<p>At a certain point you are bound to look at your tests and wonder whether your\ncode is suffering from test bloat, which brings us to:</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-when-testing-more-is-better\">\n<span id=\"when-testing-more-is-better\"></span><h2>When testing, more is better<a class=\"headerlink\" href=\"#when-testing-more-is-better\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It might seem that our tests are growing out of control. At this rate there will\nsoon be more code in our tests than in our application, and the repetition\nis unaesthetic, compared to the elegant conciseness of the rest of our code.</p>\n<p><strong>It doesn\u2019t matter</strong>. Let them grow. For the most part, you can write a test\nonce and then forget about it. It will continue performing its useful function\nas you continue to develop your program.</p>\n<p>Sometimes tests will need to be updated. Suppose that we amend our views so that\nonly <code class=\"docutils literal notranslate\"><span class=\"pre\">Questions</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">Choices</span></code> are published. In that case, many of our\nexisting tests will fail - <em>telling us exactly which tests need to be amended to\nbring them up to date</em>, so to that extent tests help look after themselves.</p>\n<p>At worst, as you continue developing, you might find that you have some tests\nthat are now redundant. Even that\u2019s not a problem; in testing redundancy is\na <em>good</em> thing.</p>\n<p>As long as your tests are sensibly arranged, they won\u2019t become unmanageable.\nGood rules-of-thumb include having:</p>\n<ul class=\"simple\">\n<li>a separate <code class=\"docutils literal notranslate\"><span class=\"pre\">TestClass</span></code> for each model or view</li>\n<li>a separate test method for each set of conditions you want to test</li>\n<li>test method names that describe their function</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-further-testing\">\n<span id=\"further-testing\"></span><h2>Further testing<a class=\"headerlink\" href=\"#further-testing\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This tutorial only introduces some of the basics of testing. There\u2019s a great\ndeal more you can do, and a number of very useful tools at your disposal to\nachieve some very clever things.</p>\n<p>For example, while our tests here have covered some of the internal logic of a\nmodel and the way our views publish information, you can use an \u201cin-browser\u201d\nframework such as <a class=\"reference external\" href=\"https://www.selenium.dev/\">Selenium</a> to test the way your HTML actually renders in a\nbrowser. These tools allow you to check not just the behavior of your Django\ncode, but also, for example, of your JavaScript. It\u2019s quite something to see\nthe tests launch a browser, and start interacting with your site, as if a human\nbeing were driving it! Django includes <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a>\nto facilitate integration with tools like Selenium.</p>\n<p>If you have a complex application, you may want to run tests automatically\nwith every commit for the purposes of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Continuous_integration\">continuous integration</a>, so that\nquality control is itself - at least partially - automated.</p>\n<p>A good way to spot untested parts of your application is to check code\ncoverage. This also helps identify fragile or even dead code. If you can\u2019t test\na piece of code, it usually means that code should be refactored or removed.\nCoverage will help to identify dead code. See\n<a class=\"reference internal\" href=\"../../topics/testing/advanced/#topics-testing-code-coverage\"><span class=\"std std-ref\">Integration with coverage.py</span></a> for details.</p>\n<p><a class=\"reference internal\" href=\"../../topics/testing/\"><span class=\"doc\">Testing in Django</span></a> has comprehensive\ninformation about testing.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-next\">\n<span id=\"what-s-next\"></span><h2>What\u2019s next?<a class=\"headerlink\" href=\"#what-s-next\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For full details on testing, see <a class=\"reference internal\" href=\"../../topics/testing/\"><span class=\"doc\">Testing in Django</span></a>.</p>\n<p>When you\u2019re comfortable with testing Django views, read\n<a class=\"reference internal\" href=\"../tutorial06/\"><span class=\"doc\">part 6 of this tutorial</span></a> to learn about\nstatic files management.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["intro/tutorial06", "Writing your first Django app, part 6", "N", "next"], ["intro/tutorial04", "Writing your first Django app, part 4", "P", "previous"]], "sourcename": "intro/tutorial05.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing your first Django app, part 5</a><ul>\n<li><a class=\"reference internal\" href=\"#introducing-automated-testing\">Introducing automated testing</a><ul>\n<li><a class=\"reference internal\" href=\"#what-are-automated-tests\">What are automated tests?</a></li>\n<li><a class=\"reference internal\" href=\"#why-you-need-to-create-tests\">Why you need to create tests</a><ul>\n<li><a class=\"reference internal\" href=\"#tests-will-save-you-time\">Tests will save you time</a></li>\n<li><a class=\"reference internal\" href=\"#tests-don-t-just-identify-problems-they-prevent-them\">Tests don\u2019t just identify problems, they prevent them</a></li>\n<li><a class=\"reference internal\" href=\"#tests-make-your-code-more-attractive\">Tests make your code more attractive</a></li>\n<li><a class=\"reference internal\" href=\"#tests-help-teams-work-together\">Tests help teams work together</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#basic-testing-strategies\">Basic testing strategies</a></li>\n<li><a class=\"reference internal\" href=\"#writing-our-first-test\">Writing our first test</a><ul>\n<li><a class=\"reference internal\" href=\"#we-identify-a-bug\">We identify a bug</a></li>\n<li><a class=\"reference internal\" href=\"#create-a-test-to-expose-the-bug\">Create a test to expose the bug</a></li>\n<li><a class=\"reference internal\" href=\"#running-tests\">Running tests</a></li>\n<li><a class=\"reference internal\" href=\"#fixing-the-bug\">Fixing the bug</a></li>\n<li><a class=\"reference internal\" href=\"#more-comprehensive-tests\">More comprehensive tests</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#test-a-view\">Test a view</a><ul>\n<li><a class=\"reference internal\" href=\"#a-test-for-a-view\">A test for a view</a></li>\n<li><a class=\"reference internal\" href=\"#the-django-test-client\">The Django test client</a></li>\n<li><a class=\"reference internal\" href=\"#improving-our-view\">Improving our view</a></li>\n<li><a class=\"reference internal\" href=\"#testing-our-new-view\">Testing our new view</a></li>\n<li><a class=\"reference internal\" href=\"#testing-the-detailview\">Testing the <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ideas-for-more-tests\">Ideas for more tests</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#when-testing-more-is-better\">When testing, more is better</a></li>\n<li><a class=\"reference internal\" href=\"#further-testing\">Further testing</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-next\">What\u2019s next?</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "intro/tutorial05", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
