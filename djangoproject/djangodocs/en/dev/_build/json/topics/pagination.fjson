{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../logging/", "title": "Logging"}, "next": {"link": "../security/", "title": "Security in Django"}, "title": "Pagination", "meta": {}, "body": "<div class=\"section\" id=\"s-pagination\">\n<span id=\"pagination\"></span><h1>Pagination<a class=\"headerlink\" href=\"#pagination\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django provides high-level and low-level ways to help you manage paginated data\n\u2013 that is, data that\u2019s split across several pages, with \u201cPrevious/Next\u201d links.</p>\n<div class=\"section\" id=\"s-the-paginator-class\">\n<span id=\"the-paginator-class\"></span><h2>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> class<a class=\"headerlink\" href=\"#the-paginator-class\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Under the hood, all methods of pagination use the\n<a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.Paginator\" title=\"django.core.paginator.Paginator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Paginator</span></code></a> class. It does all the heavy lifting\nof actually splitting a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> into <a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.Page\" title=\"django.core.paginator.Page\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Page</span></code></a>\nobjects.</p>\n</div>\n<div class=\"section\" id=\"s-example\">\n<span id=\"example\"></span><h2>Example<a class=\"headerlink\" href=\"#example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Give <a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.Paginator\" title=\"django.core.paginator.Paginator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Paginator</span></code></a> a list of objects, plus the\nnumber of items you\u2019d like to have on each page, and it gives you methods for\naccessing the items for each page:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.paginator</span> <span class=\"kn\">import</span> <span class=\"n\">Paginator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;john&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;paul&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;george&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ringo&quot;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"p\">(</span><span class=\"n\">objects</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">count</span>\n<span class=\"go\">4</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">num_pages</span>\n<span class=\"go\">2</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">page_range</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;class &#39;range_iterator&#39;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">page_range</span>\n<span class=\"go\">range(1, 3)</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page1</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page1</span>\n<span class=\"go\">&lt;Page 1 of 2&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page1</span><span class=\"o\">.</span><span class=\"n\">object_list</span>\n<span class=\"go\">[&#39;john&#39;, &#39;paul&#39;]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">object_list</span>\n<span class=\"go\">[&#39;george&#39;, &#39;ringo&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">has_next</span><span class=\"p\">()</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">has_previous</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">has_other_pages</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">next_page_number</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">EmptyPage</span>: <span class=\"n\">That page contains no results</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">previous_page_number</span><span class=\"p\">()</span>\n<span class=\"go\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">start_index</span><span class=\"p\">()</span>  <span class=\"c1\"># The 1-based index of the first item on this page</span>\n<span class=\"go\">3</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">page2</span><span class=\"o\">.</span><span class=\"n\">end_index</span><span class=\"p\">()</span>  <span class=\"c1\"># The 1-based index of the last item on this page</span>\n<span class=\"go\">4</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">EmptyPage</span>: <span class=\"n\">That page number is less than 1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">EmptyPage</span>: <span class=\"n\">That page contains no results</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Note that you can give <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> a list/tuple, a Django <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>,\nor any other object with a <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">__len__()</span></code> method. When\ndetermining the number of objects contained in the passed object,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> will first try calling <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code>, then fallback to using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">len()</span></code> if the passed object has no <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> method. This allows\nobjects such as Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> to use a more efficient <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code>\nmethod when available.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-paginating-a-listview\">\n<span id=\"s-paginating-a-list-view\"></span><span id=\"paginating-a-listview\"></span><span id=\"paginating-a-list-view\"></span><h2>Paginating a <code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code><a class=\"headerlink\" href=\"#paginating-a-listview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference internal\" href=\"../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.views.generic.list.ListView</span></code></a> provides a builtin way to paginate\nthe displayed list. You can do this by adding a\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.paginate_by\" title=\"django.views.generic.list.MultipleObjectMixin.paginate_by\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">paginate_by</span></code></a> attribute to\nyour view class, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Contact</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ContactListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">paginate_by</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Contact</span>\n</pre></div>\n</div>\n<p>This limits the number of objects per page and adds a <code class=\"docutils literal notranslate\"><span class=\"pre\">paginator</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">page_obj</span></code> to the <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code>. To allow your users to navigate between pages,\nadd links to the next and previous page, in your template like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">contact</span> <span class=\"k\">in</span> <span class=\"nv\">page_obj</span> <span class=\"cp\">%}</span>\n    <span class=\"c\">{# Each &quot;contact&quot; is a Contact model object. #}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">contact.full_name</span><span class=\"o\">|</span><span class=\"nf\">upper</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;</span><span class=\"nt\">br</span><span class=\"p\">&gt;</span>\n    ...\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;pagination&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;step-links&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">page_obj.has_previous</span> <span class=\"cp\">%}</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;?page=1&quot;</span><span class=\"p\">&gt;</span><span class=\"ni\">&amp;laquo;</span> first<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;?page=</span><span class=\"cp\">{{</span> <span class=\"nv\">page_obj.previous_page_number</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>previous<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;current&quot;</span><span class=\"p\">&gt;</span>\n            Page <span class=\"cp\">{{</span> <span class=\"nv\">page_obj.number</span> <span class=\"cp\">}}</span> of <span class=\"cp\">{{</span> <span class=\"nv\">page_obj.paginator.num_pages</span> <span class=\"cp\">}}</span>.\n        <span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n\n        <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">page_obj.has_next</span> <span class=\"cp\">%}</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;?page=</span><span class=\"cp\">{{</span> <span class=\"nv\">page_obj.next_page_number</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>next<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;?page=</span><span class=\"cp\">{{</span> <span class=\"nv\">page_obj.paginator.num_pages</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>last <span class=\"ni\">&amp;raquo;</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-paginator-in-a-view-function\">\n<span id=\"s-using-paginator-in-view\"></span><span id=\"using-paginator-in-a-view-function\"></span><span id=\"using-paginator-in-view\"></span><h2>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> in a view function<a class=\"headerlink\" href=\"#using-paginator-in-a-view-function\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Here\u2019s an example using <a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.Paginator\" title=\"django.core.paginator.Paginator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Paginator</span></code></a> in a view\nfunction to paginate a queryset:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.paginator</span> <span class=\"kn\">import</span> <span class=\"n\">Paginator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Contact</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">listing</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">contact_list</span> <span class=\"o\">=</span> <span class=\"n\">Contact</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"p\">(</span><span class=\"n\">contact_list</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>  <span class=\"c1\"># Show 25 contacts per page.</span>\n\n    <span class=\"n\">page_number</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;page&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">page_obj</span> <span class=\"o\">=</span> <span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">get_page</span><span class=\"p\">(</span><span class=\"n\">page_number</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;list.html&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;page_obj&quot;</span><span class=\"p\">:</span> <span class=\"n\">page_obj</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>In the template <code class=\"file docutils literal notranslate\"><span class=\"pre\">list.html</span></code>, you can include navigation between pages in\nthe same way as in the template for the <code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code> above.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/security", "Security in Django", "N", "next"], ["topics/logging", "Logging", "P", "previous"]], "sourcename": "topics/pagination.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Pagination</a><ul>\n<li><a class=\"reference internal\" href=\"#the-paginator-class\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> class</a></li>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n<li><a class=\"reference internal\" href=\"#paginating-a-listview\">Paginating a <code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-paginator-in-a-view-function\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> in a view function</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/pagination", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}