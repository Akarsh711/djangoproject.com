{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../conditional-view-processing/", "title": "Conditional View Processing"}, "next": {"link": "../email/", "title": "Sending email"}, "title": "Cryptographic signing", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.core.signing\">\n<span id=\"s-cryptographic-signing\"></span><span id=\"module-django.core.signing\"></span><span id=\"cryptographic-signing\"></span><h1>Cryptographic signing<a class=\"headerlink\" href=\"#module-django.core.signing\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The golden rule of web application security is to never trust data from\nuntrusted sources. Sometimes it can be useful to pass data through an\nuntrusted medium. Cryptographically signed values can be passed through an\nuntrusted channel safe in the knowledge that any tampering will be detected.</p>\n<p>Django provides both a low-level API for signing values and a high-level API\nfor setting and reading signed cookies, one of the most common uses of\nsigning in web applications.</p>\n<p>You may also find signing useful for the following:</p>\n<ul class=\"simple\">\n<li>Generating \u201crecover my account\u201d URLs for sending to users who have\nlost their password.</li>\n<li>Ensuring data stored in hidden form fields has not been tampered with.</li>\n<li>Generating one-time secret URLs for allowing temporary access to a\nprotected resource, for example a downloadable file that a user has\npaid for.</li>\n</ul>\n<div class=\"section\" id=\"s-protecting-secret-key-and-secret-key-fallbacks\">\n<span id=\"protecting-secret-key-and-secret-key-fallbacks\"></span><h2>Protecting <code class=\"docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code><a class=\"headerlink\" href=\"#protecting-secret-key-and-secret-key-fallbacks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you create a new Django project using <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-startproject\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startproject</span></code></a>, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code> file is generated automatically and gets a random\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> value. This value is the key to securing signed\ndata \u2013 it is vital you keep this secure, or attackers could use it to\ngenerate their own signed values.</p>\n<p><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY_FALLBACKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code></a> can be used to rotate secret keys. The\nvalues will not be used to sign data, but if specified, they will be used to\nvalidate signed data and must be kept secure.</p>\n</div>\n<div class=\"section\" id=\"s-using-the-low-level-api\">\n<span id=\"using-the-low-level-api\"></span><h2>Using the low-level API<a class=\"headerlink\" href=\"#using-the-low-level-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django\u2019s signing methods live in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.signing</span></code> module.\nTo sign a value, first instantiate a <code class=\"docutils literal notranslate\"><span class=\"pre\">Signer</span></code> instance:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.signing</span> <span class=\"kn\">import</span> <span class=\"n\">Signer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span> <span class=\"o\">=</span> <span class=\"n\">Signer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"s2\">&quot;My string&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span>\n<span class=\"go\">&#39;My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w&#39;</span>\n</pre></div>\n</div>\n<p>The signature is appended to the end of the string, following the colon.\nYou can retrieve the original value using the <code class=\"docutils literal notranslate\"><span class=\"pre\">unsign</span></code> method:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">original</span>\n<span class=\"go\">&#39;My string&#39;</span>\n</pre></div>\n</div>\n<p>If you pass a non-string value to <code class=\"docutils literal notranslate\"><span class=\"pre\">sign</span></code>, the value will be forced to string\nbefore being signed, and the <code class=\"docutils literal notranslate\"><span class=\"pre\">unsign</span></code> result will give you that string\nvalue:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signed</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"mf\">2.5</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">signed</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">original</span>\n<span class=\"go\">&#39;2.5&#39;</span>\n</pre></div>\n</div>\n<p>If you wish to protect a list, tuple, or dictionary you can do so using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sign_object()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">unsign_object()</span></code> methods:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signed_obj</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign_object</span><span class=\"p\">({</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Hello!&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signed_obj</span>\n<span class=\"go\">&#39;eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign_object</span><span class=\"p\">(</span><span class=\"n\">signed_obj</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span>\n<span class=\"go\">{&#39;message&#39;: &#39;Hello!&#39;}</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#signing-complex-data\"><span class=\"std std-ref\">Protecting complex data structures</span></a> for more details.</p>\n<p>If the signature or value have been altered in any way, a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.signing.BadSignature</span></code> exception will be raised:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">signing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;m&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">try</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">original</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"k\">except</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">BadSignature</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tampering detected!&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n</pre></div>\n</div>\n<p>By default, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Signer</span></code> class uses the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> setting to\ngenerate signatures. You can use a different secret by passing it to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Signer</span></code> constructor:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span> <span class=\"o\">=</span> <span class=\"n\">Signer</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"s2\">&quot;my-other-secret&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"s2\">&quot;My string&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span>\n<span class=\"go\">&#39;My string:EkfQJafvGyiofrdGnuthdxImIJw&#39;</span>\n</pre></div>\n</div>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.Signer\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Signer</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">sep</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">':'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">algorithm</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fallback_keys</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/signing/#Signer\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.signing.Signer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a signer which uses <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> to generate signatures and <code class=\"docutils literal notranslate\"><span class=\"pre\">sep</span></code> to\nseparate values. <code class=\"docutils literal notranslate\"><span class=\"pre\">sep</span></code> cannot be in the <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc4648.html#section-5\"><strong>URL safe base64 alphabet</strong></a>. This alphabet contains alphanumeric characters, hyphens,\nand underscores. <code class=\"docutils literal notranslate\"><span class=\"pre\">algorithm</span></code> must be an algorithm supported by\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/hashlib.html#module-hashlib\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">hashlib</span></code></a>, it defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">'sha256'</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">fallback_keys</span></code> is a list\nof additional values used to validate signed data, defaults to\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY_FALLBACKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code></a>.</p>\n<div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span>Support for passing positional arguments is deprecated.</p>\n</div>\n</dd></dl>\n\n<div class=\"section\" id=\"s-using-the-salt-argument\">\n<span id=\"using-the-salt-argument\"></span><h3>Using the <code class=\"docutils literal notranslate\"><span class=\"pre\">salt</span></code> argument<a class=\"headerlink\" href=\"#using-the-salt-argument\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you do not wish for every occurrence of a particular string to have the same\nsignature hash, you can use the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">salt</span></code> argument to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Signer</span></code>\nclass. Using a salt will seed the signing hash function with both the salt and\nyour <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span> <span class=\"o\">=</span> <span class=\"n\">Signer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"s2\">&quot;My string&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;My string:GdMGD6HNQ_qdgxYP8yBZAdAIV1w&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign_object</span><span class=\"p\">({</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Hello!&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&#39;eyJtZXNzYWdlIjoiSGVsbG8hIn0:Xdc-mOFDjs22KsQAqfVfi8PQSPdo3ckWJxPWwQOFhR4&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span> <span class=\"o\">=</span> <span class=\"n\">Signer</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;extra&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"s2\">&quot;My string&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"s2\">&quot;My string:Ee7vGi-ING6n02gkcJ-QLHg6vFw&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;My string&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign_object</span><span class=\"p\">({</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Hello!&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&#39;eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign_object</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;eyJtZXNzYWdlIjoiSGVsbG8hIn0:-UWSLCE-oUAHzhkHviYz3SOZYBjFKllEOyVZNuUtM-I&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;message&#39;: &#39;Hello!&#39;}</span>\n</pre></div>\n</div>\n<p>Using salt in this way puts the different signatures into different\nnamespaces.  A signature that comes from one namespace (a particular salt\nvalue) cannot be used to validate the same plaintext string in a different\nnamespace that is using a different salt setting. The result is to prevent an\nattacker from using a signed string generated in one place in the code as input\nto another piece of code that is generating (and verifying) signatures using a\ndifferent salt.</p>\n<p>Unlike your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a>, your salt argument does not need to stay\nsecret.</p>\n</div>\n<div class=\"section\" id=\"s-verifying-timestamped-values\">\n<span id=\"verifying-timestamped-values\"></span><h3>Verifying timestamped values<a class=\"headerlink\" href=\"#verifying-timestamped-values\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">TimestampSigner</span></code> is a subclass of <a class=\"reference internal\" href=\"#django.core.signing.Signer\" title=\"django.core.signing.Signer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Signer</span></code></a> that appends a signed\ntimestamp to the value. This allows you to confirm that a signed value was\ncreated within a specified period of time:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.signing</span> <span class=\"kn\">import</span> <span class=\"n\">TimestampSigner</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span> <span class=\"o\">=</span> <span class=\"n\">TimestampSigner</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span>\n<span class=\"go\">&#39;hello:1NMg5H:oPVuCqlJWmChm1rA2lyTUtelC-c&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;hello&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">SignatureExpired: Signature age 15.5289158821 &gt; 10 seconds</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;hello&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">))</span>\n<span class=\"go\">&#39;hello&#39;</span>\n</pre></div>\n</div>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.TimestampSigner\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TimestampSigner</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">sep</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">':'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">algorithm</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'sha256'</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/signing/#TimestampSigner\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.signing.TimestampSigner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.TimestampSigner.sign\">\n<code class=\"sig-name descname\"><span class=\"pre\">sign</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/signing/#TimestampSigner.sign\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.signing.TimestampSigner.sign\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sign <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> and append current timestamp to it.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.TimestampSigner.unsign\">\n<code class=\"sig-name descname\"><span class=\"pre\">unsign</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_age</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/signing/#TimestampSigner.unsign\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.signing.TimestampSigner.unsign\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> was signed less than <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> seconds ago,\notherwise raises <code class=\"docutils literal notranslate\"><span class=\"pre\">SignatureExpired</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> parameter can\naccept an integer or a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.timedelta</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.TimestampSigner.sign_object\">\n<code class=\"sig-name descname\"><span class=\"pre\">sign_object</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span></em>, <em><span class=\"n\"><span class=\"pre\">serializer</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">JSONSerializer</span></span></em>, <em><span class=\"n\"><span class=\"pre\">compress</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.core.signing.TimestampSigner.sign_object\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Encode, optionally compress, append current timestamp, and sign complex\ndata structure (e.g. list, tuple, or dictionary).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.TimestampSigner.unsign_object\">\n<code class=\"sig-name descname\"><span class=\"pre\">unsign_object</span></code>(<em><span class=\"n\"><span class=\"pre\">signed_obj</span></span></em>, <em><span class=\"n\"><span class=\"pre\">serializer</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">JSONSerializer</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_age</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.core.signing.TimestampSigner.unsign_object\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks if <code class=\"docutils literal notranslate\"><span class=\"pre\">signed_obj</span></code> was signed less than <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> seconds ago,\notherwise raises <code class=\"docutils literal notranslate\"><span class=\"pre\">SignatureExpired</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> parameter can\naccept an integer or a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.timedelta</span></code></a> object.</p>\n</dd></dl>\n\n<div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span>Support for passing positional arguments is deprecated.</p>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-protecting-complex-data-structures\">\n<span id=\"s-signing-complex-data\"></span><span id=\"protecting-complex-data-structures\"></span><span id=\"signing-complex-data\"></span><h3>Protecting complex data structures<a class=\"headerlink\" href=\"#protecting-complex-data-structures\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you wish to protect a list, tuple or dictionary you can do so using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Signer.sign_object()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">unsign_object()</span></code> methods, or signing module\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dumps()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">loads()</span></code> functions (which are shortcuts for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TimestampSigner(salt='django.core.signing').sign_object()/unsign_object()</span></code>).\nThese use JSON serialization under the hood. JSON ensures that even if your\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> is stolen an attacker will not be able to execute\narbitrary commands by exploiting the pickle format:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">signing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span> <span class=\"o\">=</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">TimestampSigner</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">sign_object</span><span class=\"p\">({</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span>\n<span class=\"go\">&#39;eyJmb28iOiJiYXIifQ:1kx6R3:D4qGKiptAqo5QW9iv4eNLc6xl4RwiFfes6oOcYhkYnc&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signer</span><span class=\"o\">.</span><span class=\"n\">unsign_object</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;foo&#39;: &#39;bar&#39;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span>\n<span class=\"go\">&#39;eyJmb28iOiJiYXIifQ:1kx6Rf:LBB39RQmME-SRvilheUe5EmPYRbuDBgQp2tCAi7KGLk&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;foo&#39;: &#39;bar&#39;}</span>\n</pre></div>\n</div>\n<p>Because of the nature of JSON (there is no native distinction between lists\nand tuples) if you pass in a tuple, you will get a list from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">signing.loads(object)</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">signing</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">((</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;c&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span>\n</pre></div>\n</div>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.dumps\">\n<code class=\"sig-name descname\"><span class=\"pre\">dumps</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span></em>, <em><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'django.core.signing'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">serializer</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">JSONSerializer</span></span></em>, <em><span class=\"n\"><span class=\"pre\">compress</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/signing/#dumps\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.signing.dumps\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns URL-safe, signed base64 compressed JSON string. Serialized object\nis signed using <a class=\"reference internal\" href=\"#django.core.signing.TimestampSigner\" title=\"django.core.signing.TimestampSigner\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TimestampSigner</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.signing.loads\">\n<code class=\"sig-name descname\"><span class=\"pre\">loads</span></code>(<em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"n\"><span class=\"pre\">key</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'django.core.signing'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">serializer</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">JSONSerializer</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_age</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fallback_keys</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/signing/#loads\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.signing.loads\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Reverse of <code class=\"docutils literal notranslate\"><span class=\"pre\">dumps()</span></code>, raises <code class=\"docutils literal notranslate\"><span class=\"pre\">BadSignature</span></code> if signature fails.\nChecks <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> (in seconds) if given.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/email", "Sending email", "N", "next"], ["topics/conditional-view-processing", "Conditional View Processing", "P", "previous"]], "sourcename": "topics/signing.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Cryptographic signing</a><ul>\n<li><a class=\"reference internal\" href=\"#protecting-secret-key-and-secret-key-fallbacks\">Protecting <code class=\"docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-the-low-level-api\">Using the low-level API</a><ul>\n<li><a class=\"reference internal\" href=\"#using-the-salt-argument\">Using the <code class=\"docutils literal notranslate\"><span class=\"pre\">salt</span></code> argument</a></li>\n<li><a class=\"reference internal\" href=\"#verifying-timestamped-values\">Verifying timestamped values</a></li>\n<li><a class=\"reference internal\" href=\"#protecting-complex-data-structures\">Protecting complex data structures</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/signing", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}