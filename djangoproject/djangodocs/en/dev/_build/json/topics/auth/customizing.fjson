{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "User authentication in Django"}], "prev": {"link": "../passwords/", "title": "Password management in Django"}, "next": {"link": "../../cache/", "title": "Django\u2019s cache framework"}, "title": "Customizing authentication in Django", "meta": null, "body": "<div class=\"section\" id=\"s-customizing-authentication-in-django\">\n<span id=\"customizing-authentication-in-django\"></span><h1>Customizing authentication in Django<a class=\"headerlink\" href=\"#customizing-authentication-in-django\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The authentication that comes with Django is good enough for most common cases,\nbut you may have needs not met by the out-of-the-box defaults. Customizing\nauthentication in your projects requires understanding what points of the\nprovided system are extensible or replaceable. This document provides details\nabout how the auth system can be customized.</p>\n<p><a class=\"reference internal\" href=\"#authentication-backends\"><span class=\"std std-ref\">Authentication backends</span></a> provide an extensible\nsystem for when a username and password stored with the user model need to be\nauthenticated against a different service than Django\u2019s default.</p>\n<p>You can give your models <a class=\"reference internal\" href=\"#custom-permissions\"><span class=\"std std-ref\">custom permissions</span></a> that\ncan be checked through Django\u2019s authorization system.</p>\n<p>You can <a class=\"reference internal\" href=\"#extending-user\"><span class=\"std std-ref\">extend</span></a> the default <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model, or\n<a class=\"reference internal\" href=\"#auth-custom-user\"><span class=\"std std-ref\">substitute</span></a> a completely customized model.</p>\n<div class=\"section\" id=\"s-other-authentication-sources\">\n<span id=\"s-authentication-backends\"></span><span id=\"other-authentication-sources\"></span><span id=\"authentication-backends\"></span><h2>Other authentication sources<a class=\"headerlink\" href=\"#other-authentication-sources\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There may be times you have the need to hook into another authentication source\n\u2013 that is, another source of usernames and passwords or authentication\nmethods.</p>\n<p>For example, your company may already have an LDAP setup that stores a username\nand password for every employee. It\u2019d be a hassle for both the network\nadministrator and the users themselves if users had separate accounts in LDAP\nand the Django-based applications.</p>\n<p>So, to handle situations like this, the Django authentication system lets you\nplug in other authentication sources. You can override Django\u2019s default\ndatabase-based scheme, or you can use the default system in tandem with other\nsystems.</p>\n<p>See the <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#authentication-backends-reference\"><span class=\"std std-ref\">authentication backend reference</span></a> for information on the authentication\nbackends included with Django.</p>\n<div class=\"section\" id=\"s-specifying-authentication-backends\">\n<span id=\"specifying-authentication-backends\"></span><h3>Specifying authentication backends<a class=\"headerlink\" href=\"#specifying-authentication-backends\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Behind the scenes, Django maintains a list of \u201cauthentication backends\u201d that it\nchecks for authentication. When somebody calls\n<a class=\"reference internal\" href=\"../default/#django.contrib.auth.authenticate\" title=\"django.contrib.auth.authenticate\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.authenticate()</span></code></a> \u2013 as described in <a class=\"reference internal\" href=\"../default/#how-to-log-a-user-in\"><span class=\"std std-ref\">How to log\na user in</span></a> \u2013 Django tries authenticating across\nall of its authentication backends. If the first authentication method fails,\nDjango tries the second one, and so on, until all backends have been attempted.</p>\n<p>The list of authentication backends to use is specified in the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTHENTICATION_BACKENDS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTHENTICATION_BACKENDS</span></code></a> setting. This should be a list of Python\npath names that point to Python classes that know how to authenticate. These\nclasses can be anywhere on your Python path.</p>\n<p>By default, <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTHENTICATION_BACKENDS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTHENTICATION_BACKENDS</span></code></a> is set to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"s2\">&quot;django.contrib.auth.backends.ModelBackend&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>That\u2019s the basic authentication backend that checks the Django users database\nand queries the built-in permissions. It does not provide protection against\nbrute force attacks via any rate limiting mechanism. You may either implement\nyour own rate limiting mechanism in a custom auth backend, or use the\nmechanisms provided by most web servers.</p>\n<p>The order of <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTHENTICATION_BACKENDS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTHENTICATION_BACKENDS</span></code></a> matters, so if the same\nusername and password is valid in multiple backends, Django will stop\nprocessing at the first positive match.</p>\n<p>If a backend raises a <a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.PermissionDenied\" title=\"django.core.exceptions.PermissionDenied\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code></a>\nexception, authentication will immediately fail. Django won\u2019t check the\nbackends that follow.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Once a user has authenticated, Django stores which backend was used to\nauthenticate the user in the user\u2019s session, and reuses the same backend\nfor the duration of that session whenever access to the currently\nauthenticated user is needed. This effectively means that authentication\nsources are cached on a per-session basis, so if you change\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTHENTICATION_BACKENDS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTHENTICATION_BACKENDS</span></code></a>, you\u2019ll need to clear out session data if\nyou need to force users to re-authenticate using different methods. A\nsimple way to do that is to execute <code class=\"docutils literal notranslate\"><span class=\"pre\">Session.objects.all().delete()</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-an-authentication-backend\">\n<span id=\"writing-an-authentication-backend\"></span><h3>Writing an authentication backend<a class=\"headerlink\" href=\"#writing-an-authentication-backend\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>An authentication backend is a class that implements two required methods:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_user(user_id)</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">authenticate(request,</span> <span class=\"pre\">**credentials)</span></code>, as well as\na set of optional permission related <a class=\"reference internal\" href=\"#authorization-methods\"><span class=\"std std-ref\">authorization methods</span></a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">get_user</span></code> method takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">user_id</span></code> \u2013 which could be a username,\ndatabase ID or whatever, but has to be the primary key of your user object \u2013\nand returns a user object or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">authenticate</span></code> method takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> argument and credentials as\nkeyword arguments. Most of the time, it\u2019ll look like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.backends</span> <span class=\"kn\">import</span> <span class=\"n\">BaseBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBackend</span><span class=\"p\">(</span><span class=\"n\">BaseBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">authenticate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Check the username/password and return a user.</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>But it could also authenticate a token, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.backends</span> <span class=\"kn\">import</span> <span class=\"n\">BaseBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyBackend</span><span class=\"p\">(</span><span class=\"n\">BaseBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">authenticate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Check the token and return a user.</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Either way, <code class=\"docutils literal notranslate\"><span class=\"pre\">authenticate()</span></code> should check the credentials it gets and return\na user object that matches those credentials if the credentials are valid. If\nthey\u2019re not valid, it should return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> is an <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> and may be <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it\nwasn\u2019t provided to <a class=\"reference internal\" href=\"../default/#django.contrib.auth.authenticate\" title=\"django.contrib.auth.authenticate\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">authenticate()</span></code></a> (which passes it\non to the backend).</p>\n<p>The Django admin is tightly coupled to the Django <a class=\"reference internal\" href=\"../default/#user-objects\"><span class=\"std std-ref\">User object</span></a>. The best way to deal with this is to create a Django <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code>\nobject for each user that exists for your backend (e.g., in your LDAP\ndirectory, your external SQL database, etc.) You can either write a script to\ndo this in advance, or your <code class=\"docutils literal notranslate\"><span class=\"pre\">authenticate</span></code> method can do it the first time a\nuser logs in.</p>\n<p>Here\u2019s an example backend that authenticates against a username and password\nvariable defined in your <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code> file and creates a Django <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code>\nobject the first time a user authenticates:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.backends</span> <span class=\"kn\">import</span> <span class=\"n\">BaseBackend</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.hashers</span> <span class=\"kn\">import</span> <span class=\"n\">check_password</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SettingsBackend</span><span class=\"p\">(</span><span class=\"n\">BaseBackend</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Authenticate against the settings ADMIN_LOGIN and ADMIN_PASSWORD.</span>\n\n<span class=\"sd\">    Use the login name and a hash of the password. For example:</span>\n\n<span class=\"sd\">    ADMIN_LOGIN = &#39;admin&#39;</span>\n<span class=\"sd\">    ADMIN_PASSWORD = &#39;pbkdf2_sha256$30000$Vo0VlMnkR4Bk$qEvtdyZRWTcOsCnI/oQ7fVOu1XAURIZYoOZ3iq8Dr4M=&#39;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">authenticate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">login_valid</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">ADMIN_LOGIN</span> <span class=\"o\">==</span> <span class=\"n\">username</span>\n        <span class=\"n\">pwd_valid</span> <span class=\"o\">=</span> <span class=\"n\">check_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">ADMIN_PASSWORD</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">login_valid</span> <span class=\"ow\">and</span> <span class=\"n\">pwd_valid</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Create a new user. There&#39;s no need to set a password</span>\n                <span class=\"c1\"># because only the password from settings.py is checked.</span>\n                <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">)</span>\n                <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_staff</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">user</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_id</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">user_id</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-handling-authorization-in-custom-backends\">\n<span id=\"s-authorization-methods\"></span><span id=\"handling-authorization-in-custom-backends\"></span><span id=\"authorization-methods\"></span><h3>Handling authorization in custom backends<a class=\"headerlink\" href=\"#handling-authorization-in-custom-backends\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Custom auth backends can provide their own permissions.</p>\n<p>The user model and its manager will delegate permission lookup functions\n(<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.get_user_permissions\" title=\"django.contrib.auth.models.User.get_user_permissions\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_user_permissions()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.get_group_permissions\" title=\"django.contrib.auth.models.User.get_group_permissions\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_group_permissions()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.get_all_permissions\" title=\"django.contrib.auth.models.User.get_all_permissions\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_all_permissions()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.has_perm\" title=\"django.contrib.auth.models.User.has_perm\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_perm()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.has_module_perms\" title=\"django.contrib.auth.models.User.has_module_perms\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_module_perms()</span></code></a>, and\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.UserManager.with_perm\" title=\"django.contrib.auth.models.UserManager.with_perm\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">with_perm()</span></code></a>) to any\nauthentication backend that implements these functions.</p>\n<p>The permissions given to the user will be the superset of all permissions\nreturned by all backends. That is, Django grants a permission to a user that\nany one backend grants.</p>\n<p>If a backend raises a <a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.PermissionDenied\" title=\"django.core.exceptions.PermissionDenied\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code></a>\nexception in <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.has_perm\" title=\"django.contrib.auth.models.User.has_perm\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_perm()</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.has_module_perms\" title=\"django.contrib.auth.models.User.has_module_perms\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_module_perms()</span></code></a>, the authorization\nwill immediately fail and Django won\u2019t check the backends that follow.</p>\n<p>A backend could implement permissions for the magic admin like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.backends</span> <span class=\"kn\">import</span> <span class=\"n\">BaseBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MagicAdminBackend</span><span class=\"p\">(</span><span class=\"n\">BaseBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">has_perm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">user_obj</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">user_obj</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">==</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">ADMIN_LOGIN</span>\n</pre></div>\n</div>\n<p>This gives full permissions to the user granted access in the above example.\nNotice that in addition to the same arguments given to the associated\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.User</span></code></a> functions, the backend auth functions\nall take the user object, which may be an anonymous user, as an argument.</p>\n<p>A full authorization implementation can be found in the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelBackend</span></code> class\nin <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/contrib/auth/backends.py\">django/contrib/auth/backends.py</a>, which is the default backend and\nqueries the <code class=\"docutils literal notranslate\"><span class=\"pre\">auth_permission</span></code> table most of the time.</p>\n<div class=\"section\" id=\"s-authorization-for-anonymous-users\">\n<span id=\"s-anonymous-auth\"></span><span id=\"authorization-for-anonymous-users\"></span><span id=\"anonymous-auth\"></span><h4>Authorization for anonymous users<a class=\"headerlink\" href=\"#authorization-for-anonymous-users\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>An anonymous user is one that is not authenticated i.e. they have provided no\nvalid authentication details. However, that does not necessarily mean they are\nnot authorized to do anything. At the most basic level, most websites\nauthorize anonymous users to browse most of the site, and many allow anonymous\nposting of comments etc.</p>\n<p>Django\u2019s permission framework does not have a place to store permissions for\nanonymous users. However, the user object passed to an authentication backend\nmay be an <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.AnonymousUser\" title=\"django.contrib.auth.models.AnonymousUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.AnonymousUser</span></code></a> object, allowing\nthe backend to specify custom authorization behavior for anonymous users. This\nis especially useful for the authors of reusable apps, who can delegate all\nquestions of authorization to the auth backend, rather than needing settings,\nfor example, to control anonymous access.</p>\n</div>\n<div class=\"section\" id=\"s-authorization-for-inactive-users\">\n<span id=\"s-inactive-auth\"></span><span id=\"authorization-for-inactive-users\"></span><span id=\"inactive-auth\"></span><h4>Authorization for inactive users<a class=\"headerlink\" href=\"#authorization-for-inactive-users\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>An inactive user is one that has its\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_active\" title=\"django.contrib.auth.models.User.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_active</span></code></a> field set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. The\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.backends.ModelBackend\" title=\"django.contrib.auth.backends.ModelBackend\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelBackend</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.backends.RemoteUserBackend\" title=\"django.contrib.auth.backends.RemoteUserBackend\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RemoteUserBackend</span></code></a> authentication\nbackends prohibits these users from authenticating. If a custom user model\ndoesn\u2019t have an <a class=\"reference internal\" href=\"#django.contrib.auth.models.CustomUser.is_active\" title=\"django.contrib.auth.models.CustomUser.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_active</span></code></a> field,\nall users will be allowed to authenticate.</p>\n<p>You can use <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.backends.AllowAllUsersModelBackend\" title=\"django.contrib.auth.backends.AllowAllUsersModelBackend\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AllowAllUsersModelBackend</span></code></a>\nor <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.backends.AllowAllUsersRemoteUserBackend\" title=\"django.contrib.auth.backends.AllowAllUsersRemoteUserBackend\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AllowAllUsersRemoteUserBackend</span></code></a> if you\nwant to allow inactive users to authenticate.</p>\n<p>The support for anonymous users in the permission system allows for a scenario\nwhere anonymous users have permissions to do something while inactive\nauthenticated users do not.</p>\n<p>Do not forget to test for the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_active</span></code> attribute of the user in your own\nbackend permission methods.</p>\n</div>\n<div class=\"section\" id=\"s-handling-object-permissions\">\n<span id=\"handling-object-permissions\"></span><h4>Handling object permissions<a class=\"headerlink\" href=\"#handling-object-permissions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Django\u2019s permission framework has a foundation for object permissions, though\nthere is no implementation for it in the core. That means that checking for\nobject permissions will always return <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> or an empty list (depending on\nthe check performed). An authentication backend will receive the keyword\nparameters <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">user_obj</span></code> for each object related authorization\nmethod and can return the object level permission as appropriate.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-permissions\">\n<span id=\"s-id1\"></span><span id=\"custom-permissions\"></span><span id=\"id1\"></span><h2>Custom permissions<a class=\"headerlink\" href=\"#custom-permissions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To create custom permissions for a given model object, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">permissions</span></code>\n<a class=\"reference internal\" href=\"../../db/models/#meta-options\"><span class=\"std std-ref\">model Meta attribute</span></a>.</p>\n<p>This example <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code> model creates two custom permissions, i.e., actions users\ncan or cannot do with <code class=\"docutils literal notranslate\"><span class=\"pre\">Task</span></code> instances, specific to your application:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">permissions</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s2\">&quot;change_task_status&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Can change the status of tasks&quot;</span><span class=\"p\">),</span>\n            <span class=\"p\">(</span><span class=\"s2\">&quot;close_task&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Can remove a task by setting its status as closed&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>The only thing this does is create those extra permissions when you run\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code></a> (the function that creates permissions\nis connected to the <a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> signal).\nYour code is in charge of checking the value of these permissions when a user\nis trying to access the functionality provided by the application (changing the\nstatus of tasks or closing tasks.) Continuing the above example, the following\nchecks if a user may close tasks:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">has_perm</span><span class=\"p\">(</span><span class=\"s2\">&quot;app.close_task&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-extending-the-existing-user-model\">\n<span id=\"s-extending-user\"></span><span id=\"extending-the-existing-user-model\"></span><span id=\"extending-user\"></span><h2>Extending the existing <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model<a class=\"headerlink\" href=\"#extending-the-existing-user-model\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are two ways to extend the default\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> model without substituting your own\nmodel. If the changes you need are purely behavioral, and don\u2019t require any\nchange to what is stored in the database, you can create a <a class=\"reference internal\" href=\"../../db/models/#proxy-models\"><span class=\"std std-ref\">proxy model</span></a> based on <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a>. This\nallows for any of the features offered by proxy models including default\nordering, custom managers, or custom model methods.</p>\n<p>If you wish to store information related to <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code>, you can use a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> to a model containing the fields for\nadditional information. This one-to-one model is often called a profile model,\nas it might store non-auth related information about a site user. For example\nyou might create an Employee model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Employee</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">department</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Assuming an existing Employee Fred Smith who has both a User and Employee\nmodel, you can access the related information using Django\u2019s standard related\nmodel conventions:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;fsmith&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">freds_department</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">employee</span><span class=\"o\">.</span><span class=\"n\">department</span>\n</pre></div>\n</div>\n<p>To add a profile model\u2019s fields to the user page in the admin, define an\n<a class=\"reference internal\" href=\"../../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin\" title=\"django.contrib.admin.InlineModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InlineModelAdmin</span></code></a> (for this example, we\u2019ll use a\n<a class=\"reference internal\" href=\"../../../ref/contrib/admin/#django.contrib.admin.StackedInline\" title=\"django.contrib.admin.StackedInline\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StackedInline</span></code></a>) in your app\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.py</span></code> and\nadd it to a <code class=\"docutils literal notranslate\"><span class=\"pre\">UserAdmin</span></code> class which is registered with the\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> class:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.admin</span> <span class=\"kn\">import</span> <span class=\"n\">UserAdmin</span> <span class=\"k\">as</span> <span class=\"n\">BaseUserAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">my_user_profile_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Employee</span>\n\n\n<span class=\"c1\"># Define an inline admin descriptor for Employee model</span>\n<span class=\"c1\"># which acts a bit like a singleton</span>\n<span class=\"k\">class</span> <span class=\"nc\">EmployeeInline</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">StackedInline</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Employee</span>\n    <span class=\"n\">can_delete</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;employee&quot;</span>\n\n\n<span class=\"c1\"># Define a new User admin</span>\n<span class=\"k\">class</span> <span class=\"nc\">UserAdmin</span><span class=\"p\">(</span><span class=\"n\">BaseUserAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">inlines</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">EmployeeInline</span><span class=\"p\">]</span>\n\n\n<span class=\"c1\"># Re-register UserAdmin</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">UserAdmin</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>These profile models are not special in any way - they are just Django models\nthat happen to have a one-to-one link with a user model. As such, they aren\u2019t\nauto created when a user is created, but\na <a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.db.models.signals.post_save</span></code></a> could be used to create or update\nrelated models as appropriate.</p>\n<p>Using related models results in additional queries or joins to retrieve the\nrelated data. Depending on your needs, a custom user model that includes the\nrelated fields may be your better option, however, existing relations to the\ndefault user model within your project\u2019s apps may justify the extra database\nload.</p>\n</div>\n<div class=\"section\" id=\"s-substituting-a-custom-user-model\">\n<span id=\"s-auth-custom-user\"></span><span id=\"substituting-a-custom-user-model\"></span><span id=\"auth-custom-user\"></span><h2>Substituting a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model<a class=\"headerlink\" href=\"#substituting-a-custom-user-model\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Some kinds of projects may have authentication requirements for which Django\u2019s\nbuilt-in <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> model is not always\nappropriate. For instance, on some sites it makes more sense to use an email\naddress as your identification token instead of a username.</p>\n<p>Django allows you to override the default user model by providing a value for\nthe <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> setting that references a custom model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">AUTH_USER_MODEL</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;myapp.MyUser&quot;</span>\n</pre></div>\n</div>\n<p>This dotted pair describes the <a class=\"reference internal\" href=\"../../../ref/applications/#django.apps.AppConfig.label\" title=\"django.apps.AppConfig.label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label</span></code></a> of the\nDjango app (which must be in your <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>), and the name of\nthe Django model that you wish to use as your user model.</p>\n<div class=\"section\" id=\"s-using-a-custom-user-model-when-starting-a-project\">\n<span id=\"using-a-custom-user-model-when-starting-a-project\"></span><h3>Using a custom user model when starting a project<a class=\"headerlink\" href=\"#using-a-custom-user-model-when-starting-a-project\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re starting a new project, it\u2019s highly recommended to set up a custom\nuser model, even if the default <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> model\nis sufficient for you. This model behaves identically to the default user\nmodel, but you\u2019ll be able to customize it in the future if the need arises:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractUser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">AbstractUser</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>Don\u2019t forget to point <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> to it. Do this before creating\nany migrations or running <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code> for the first time.</p>\n<p>Also, register the model in the app\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.admin</span> <span class=\"kn\">import</span> <span class=\"n\">UserAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">,</span> <span class=\"n\">UserAdmin</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-changing-to-a-custom-user-model-mid-project\">\n<span id=\"changing-to-a-custom-user-model-mid-project\"></span><h3>Changing to a custom user model mid-project<a class=\"headerlink\" href=\"#changing-to-a-custom-user-model-mid-project\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Changing <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> after you\u2019ve created database tables is\nsignificantly more difficult since it affects foreign keys and many-to-many\nrelationships, for example.</p>\n<p>This change can\u2019t be done automatically and requires manually fixing your\nschema, moving your data from the old user table, and possibly manually\nreapplying some migrations. See <a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/25313\">#25313</a> for an outline of the steps.</p>\n<p>Due to limitations of Django\u2019s dynamic dependency feature for swappable\nmodels, the model referenced by <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> must be created in\nthe first migration of its app (usually called <code class=\"docutils literal notranslate\"><span class=\"pre\">0001_initial</span></code>); otherwise,\nyou\u2019ll have dependency issues.</p>\n<p>In addition, you may run into a <code class=\"docutils literal notranslate\"><span class=\"pre\">CircularDependencyError</span></code> when running your\nmigrations as Django won\u2019t be able to automatically break the dependency loop\ndue to the dynamic dependency. If you see this error, you should break the loop\nby moving the models depended on by your user model into a second migration.\n(You can try making two normal models that have a <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> to each other\nand seeing how <code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code> resolves that circular dependency if you want\nto see how it\u2019s usually done.)</p>\n</div>\n<div class=\"section\" id=\"s-reusable-apps-and-auth-user-model\">\n<span id=\"reusable-apps-and-auth-user-model\"></span><h3>Reusable apps and <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code><a class=\"headerlink\" href=\"#reusable-apps-and-auth-user-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Reusable apps shouldn\u2019t implement a custom user model. A project may use many\napps, and two reusable apps that implemented a custom user model couldn\u2019t be\nused together. If you need to store per user information in your app, use\na <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.AUTH_USER_MODEL</span></code>\nas described below.</p>\n</div>\n<div class=\"section\" id=\"s-referencing-the-user-model\">\n<span id=\"referencing-the-user-model\"></span><h3>Referencing the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model<a class=\"headerlink\" href=\"#referencing-the-user-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you reference <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> directly (for\nexample, by referring to it in a foreign key), your code will not work in\nprojects where the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> setting has been changed to a\ndifferent user model.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.get_user_model\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_user_model</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/#get_user_model\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.get_user_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instead of referring to <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> directly,\nyou should reference the user model using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.get_user_model()</span></code>. This method will return the\ncurrently active user model \u2013 the custom user model if one is specified, or\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> otherwise.</p>\n<p>When you define a foreign key or many-to-many relations to the user model,\nyou should specify the custom model using the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a>\nsetting. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>When connecting to signals sent by the user model, you should specify\nthe custom model using the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> setting. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_save</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">post_save_receiver</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"n\">created</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">post_save</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">post_save_receiver</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">AUTH_USER_MODEL</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Generally speaking, it\u2019s easiest to refer to the user model with the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> setting in code that\u2019s executed at import time,\nhowever, it\u2019s also possible to call <code class=\"docutils literal notranslate\"><span class=\"pre\">get_user_model()</span></code> while Django\nis importing models, so you could use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models.ForeignKey(get_user_model(),</span> <span class=\"pre\">...)</span></code>.</p>\n<p>If your app is tested with multiple user models, using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;override_settings(AUTH_USER_MODEL=...)</span></code> for example, and you cache the\nresult of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_user_model()</span></code> in a module-level variable, you may need to\nlisten to the  <a class=\"reference internal\" href=\"../../../ref/signals/#django.test.signals.setting_changed\" title=\"django.test.signals.setting_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">setting_changed</span></code></a> signal to clear\nthe cache. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">get_user_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.signals</span> <span class=\"kn\">import</span> <span class=\"n\">setting_changed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">setting_changed</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_model_swapped</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">setting</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">setting</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;AUTH_USER_MODEL&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">clear_cache</span><span class=\"p\">()</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">some_module</span>\n\n        <span class=\"n\">some_module</span><span class=\"o\">.</span><span class=\"n\">UserModel</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-specifying-a-custom-user-model\">\n<span id=\"s-specifying-custom-user-model\"></span><span id=\"specifying-a-custom-user-model\"></span><span id=\"specifying-custom-user-model\"></span><h3>Specifying a custom user model<a class=\"headerlink\" href=\"#specifying-a-custom-user-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you start your project with a custom user model, stop to consider if this\nis the right choice for your project.</p>\n<p>Keeping all user related information in one model removes the need for\nadditional or more complex database queries to retrieve related models. On the\nother hand, it may be more suitable to store app-specific user information in a\nmodel that has a relation with your custom user model. That allows each app to\nspecify its own user data requirements without potentially conflicting or\nbreaking assumptions by other apps. It also means that you would keep your user\nmodel as simple as possible, focused on authentication, and following the\nminimum requirements Django expects custom user models to meet.</p>\n<p>If you use the default authentication backend, then your model must have a\nsingle unique field that can be used for identification purposes. This can\nbe a username, an email address, or any other unique attribute. A non-unique\nusername field is allowed if you use a custom authentication backend that\ncan support it.</p>\n<p>The easiest way to construct a compliant custom user model is to inherit from\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>.\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a> provides the core\nimplementation of a user model, including hashed passwords and tokenized\npassword resets. You must then provide some key implementation details:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">CustomUser</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser.USERNAME_FIELD\">\n<code class=\"sig-name descname\"><span class=\"pre\">USERNAME_FIELD</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser.USERNAME_FIELD\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string describing the name of the field on the user model that is\nused as the unique identifier. This will usually be a username of some\nkind, but it can also be an email address, or any other unique\nidentifier. The field <em>must</em> be unique (e.g. have <code class=\"docutils literal notranslate\"><span class=\"pre\">unique=True</span></code> set\nin its definition), unless you use a custom authentication backend that\ncan support non-unique usernames.</p>\n<p>In the following example, the field <code class=\"docutils literal notranslate\"><span class=\"pre\">identifier</span></code> is used\nas the identifying field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">):</span>\n    <span class=\"n\">identifier</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">USERNAME_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;identifier&quot;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser.EMAIL_FIELD\">\n<code class=\"sig-name descname\"><span class=\"pre\">EMAIL_FIELD</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser.EMAIL_FIELD\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string describing the name of the email field on the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model.\nThis value is returned by\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser.get_email_field_name\" title=\"django.contrib.auth.models.AbstractBaseUser.get_email_field_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_email_field_name()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser.REQUIRED_FIELDS\">\n<code class=\"sig-name descname\"><span class=\"pre\">REQUIRED_FIELDS</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A list of the field names that will be prompted for when creating a\nuser via the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-createsuperuser\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">createsuperuser</span></code></a> management command. The user\nwill be prompted to supply a value for each of these fields. It must\ninclude any field for which <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.blank\" title=\"django.db.models.Field.blank\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">blank</span></code></a> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> or undefined and may include additional fields you want\nprompted for when a user is created interactively.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">REQUIRED_FIELDS</span></code> has no effect in other parts of Django, like\ncreating a user in the admin.</p>\n<p>For example, here is the partial definition for a user model that\ndefines two required fields - a date of birth and height:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">date_of_birth</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FloatField</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">REQUIRED_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;height&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">REQUIRED_FIELDS</span></code> must contain all required fields on your user\nmodel, but should <em>not</em> contain the <code class=\"docutils literal notranslate\"><span class=\"pre\">USERNAME_FIELD</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">password</span></code> as these fields will always be prompted for.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser.is_active\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_active</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser.is_active\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A boolean attribute that indicates whether the user is considered\n\u201cactive\u201d.  This attribute is provided as an attribute on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code> defaulting to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. How you choose to\nimplement it will depend on the details of your chosen auth backends.\nSee the documentation of the <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_active\" title=\"django.contrib.auth.models.User.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_active</span> <span class=\"pre\">attribute</span> <span class=\"pre\">on</span> <span class=\"pre\">the</span> <span class=\"pre\">built-in</span>\n<span class=\"pre\">user</span> <span class=\"pre\">model</span></code></a> for details.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser.get_full_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_full_name</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser.get_full_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. A longer formal identifier for the user such as their full\nname. If implemented, this appears alongside the username in an\nobject\u2019s history in <a class=\"reference internal\" href=\"../../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUser.get_short_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_short_name</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUser.get_short_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. A short, informal identifier for the user such as their\nfirst name. If implemented, this replaces the username in the greeting\nto the user in the header of <a class=\"reference internal\" href=\"../../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a>.</p>\n</dd></dl>\n\n<div class=\"admonition-importing-abstractbaseuser admonition\">\n<p class=\"first admonition-title\">Importing <code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseUserManager</span></code> are importable from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.base_user</span></code> so that they can be imported without\nincluding <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code> in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n</div>\n</dd></dl>\n\n<p>The following attributes and methods are available on any subclass of\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">AbstractBaseUser</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.get_username\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_username</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.get_username\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value of the field nominated by <code class=\"docutils literal notranslate\"><span class=\"pre\">USERNAME_FIELD</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.clean\">\n<code class=\"sig-name descname\"><span class=\"pre\">clean</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.clean\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalizes the username by calling <a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser.normalize_username\" title=\"django.contrib.auth.models.AbstractBaseUser.normalize_username\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">normalize_username()</span></code></a>. If you\noverride this method, be sure to call <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> to retain the\nnormalization.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.get_email_field_name\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">get_email_field_name</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.get_email_field_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the name of the email field specified by the\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.CustomUser.EMAIL_FIELD\" title=\"django.contrib.auth.models.CustomUser.EMAIL_FIELD\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">EMAIL_FIELD</span></code></a> attribute. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'email'</span></code> if <code class=\"docutils literal notranslate\"><span class=\"pre\">EMAIL_FIELD</span></code> isn\u2019t specified.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.normalize_username\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">normalize_username</span></code>(<em><span class=\"n\"><span class=\"pre\">username</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.normalize_username\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Applies NFKC Unicode normalization to usernames so that visually\nidentical characters with different Unicode code points are considered\nidentical.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.is_authenticated\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_authenticated</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.is_authenticated\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read-only attribute which is always <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> (as opposed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AnonymousUser.is_authenticated</span></code> which is always <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>).\nThis is a way to tell if the user has been authenticated. This does not\nimply any permissions and doesn\u2019t check if the user is active or has\na valid session. Even though normally you will check this attribute on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.user</span></code> to find out whether it has been populated by the\n<a class=\"reference internal\" href=\"../../../ref/middleware/#django.contrib.auth.middleware.AuthenticationMiddleware\" title=\"django.contrib.auth.middleware.AuthenticationMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationMiddleware</span></code></a>\n(representing the currently logged-in user), you should know this\nattribute is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> for any <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> instance.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.is_anonymous\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_anonymous</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.is_anonymous\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read-only attribute which is always <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. This is a way of\ndifferentiating <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> and <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.AnonymousUser\" title=\"django.contrib.auth.models.AnonymousUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AnonymousUser</span></code></a>\nobjects. Generally, you should prefer using\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_authenticated\" title=\"django.contrib.auth.models.User.is_authenticated\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_authenticated</span></code></a> to this attribute.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.set_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">set_password</span></code>(<em><span class=\"n\"><span class=\"pre\">raw_password</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.set_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the user\u2019s password to the given raw string, taking care of the\npassword hashing. Doesn\u2019t save the\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a> object.</p>\n<p>When the raw_password is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the password will be set to an\nunusable password, as if\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser.set_unusable_password\" title=\"django.contrib.auth.models.AbstractBaseUser.set_unusable_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_unusable_password()</span></code></a>\nwere used.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.check_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">check_password</span></code>(<em><span class=\"n\"><span class=\"pre\">raw_password</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.check_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.acheck_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">acheck_password</span></code>(<em><span class=\"n\"><span class=\"pre\">raw_password</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.acheck_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">acheck_password()</span></code></p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the given raw string is the correct password for\nthe user. (This takes care of the password hashing in making the\ncomparison.)</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">acheck_password()</span></code> method was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.set_unusable_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">set_unusable_password</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.set_unusable_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Marks the user as having no password set.  This isn\u2019t the same as\nhaving a blank string for a password.\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser.check_password\" title=\"django.contrib.auth.models.AbstractBaseUser.check_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">check_password()</span></code></a> for this user\nwill never return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Doesn\u2019t save the\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a> object.</p>\n<p>You may need this if authentication for your application takes place\nagainst an existing external source such as an LDAP directory.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.has_usable_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">has_usable_password</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.has_usable_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser.set_unusable_password\" title=\"django.contrib.auth.models.AbstractBaseUser.set_unusable_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_unusable_password()</span></code></a> has\nbeen called for this user.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_session_auth_hash</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an HMAC of the password field. Used for\n<a class=\"reference internal\" href=\"../default/#session-invalidation-on-password-change\"><span class=\"std std-ref\">Session invalidation on password change</span></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractBaseUser.get_session_auth_fallback_hash\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_session_auth_fallback_hash</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractBaseUser.get_session_auth_fallback_hash\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"versionadded\">\n<span class=\"title\">New in Django 4.1.8.</span> </div>\n<p>Yields the HMAC of the password field using\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SECRET_KEY_FALLBACKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code></a>. Used by <code class=\"docutils literal notranslate\"><span class=\"pre\">get_user()</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p><a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractUser\" title=\"django.contrib.auth.models.AbstractUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractUser</span></code></a> subclasses <a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractUser\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">AbstractUser</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractUser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.AbstractUser.clean\">\n<code class=\"sig-name descname\"><span class=\"pre\">clean</span></code>()<a class=\"headerlink\" href=\"#django.contrib.auth.models.AbstractUser.clean\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalizes the email by calling\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.BaseUserManager.normalize_email\" title=\"django.contrib.auth.models.BaseUserManager.normalize_email\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">BaseUserManager.normalize_email()</span></code></a>. If you override this method,\nbe sure to call <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> to retain the normalization.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-writing-a-manager-for-a-custom-user-model\">\n<span id=\"writing-a-manager-for-a-custom-user-model\"></span><h3>Writing a manager for a custom user model<a class=\"headerlink\" href=\"#writing-a-manager-for-a-custom-user-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You should also define a custom manager for your user model. If your user model\ndefines <code class=\"docutils literal notranslate\"><span class=\"pre\">username</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">email</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">is_staff</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">is_active</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">is_superuser</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">last_login</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">date_joined</span></code> fields the same as Django\u2019s default user,\nyou can install Django\u2019s <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.UserManager\" title=\"django.contrib.auth.models.UserManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UserManager</span></code></a>;\nhowever, if your user model defines different fields, you\u2019ll need to define a\ncustom manager that extends <a class=\"reference internal\" href=\"#django.contrib.auth.models.BaseUserManager\" title=\"django.contrib.auth.models.BaseUserManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseUserManager</span></code></a>\nproviding two additional methods:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUserManager\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">CustomUserManager</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUserManager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUserManager.create_user\">\n<code class=\"sig-name descname\"><span class=\"pre\">create_user</span></code>(<em><span class=\"n\"><span class=\"pre\">username_field</span></span></em>, <em><span class=\"n\"><span class=\"pre\">password</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">other_fields</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUserManager.create_user\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The prototype of <code class=\"docutils literal notranslate\"><span class=\"pre\">create_user()</span></code> should accept the username field,\nplus all required fields as arguments. For example, if your user model\nuses <code class=\"docutils literal notranslate\"><span class=\"pre\">email</span></code> as the username field, and has <code class=\"docutils literal notranslate\"><span class=\"pre\">date_of_birth</span></code> as a\nrequired field, then <code class=\"docutils literal notranslate\"><span class=\"pre\">create_user</span></code> should be defined as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">date_of_birth</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create user here</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.CustomUserManager.create_superuser\">\n<code class=\"sig-name descname\"><span class=\"pre\">create_superuser</span></code>(<em><span class=\"n\"><span class=\"pre\">username_field</span></span></em>, <em><span class=\"n\"><span class=\"pre\">password</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">other_fields</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.CustomUserManager.create_superuser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The prototype of <code class=\"docutils literal notranslate\"><span class=\"pre\">create_superuser()</span></code> should accept the username\nfield, plus all required fields as arguments. For example, if your user\nmodel uses <code class=\"docutils literal notranslate\"><span class=\"pre\">email</span></code> as the username field, and has <code class=\"docutils literal notranslate\"><span class=\"pre\">date_of_birth</span></code>\nas a required field, then <code class=\"docutils literal notranslate\"><span class=\"pre\">create_superuser</span></code> should be defined as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">create_superuser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">date_of_birth</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"c1\"># create superuser here</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</dd></dl>\n\n<p>For a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> in <a class=\"reference internal\" href=\"#django.contrib.auth.models.CustomUser.USERNAME_FIELD\" title=\"django.contrib.auth.models.CustomUser.USERNAME_FIELD\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">USERNAME_FIELD</span></code></a> or\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS\" title=\"django.contrib.auth.models.CustomUser.REQUIRED_FIELDS\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">REQUIRED_FIELDS</span></code></a>, these methods receive the value of the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.to_field\" title=\"django.db.models.ForeignKey.to_field\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">to_field</span></code></a> (the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key</span></code></a>\nby default) of an existing instance.</p>\n<p><a class=\"reference internal\" href=\"#django.contrib.auth.models.BaseUserManager\" title=\"django.contrib.auth.models.BaseUserManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseUserManager</span></code></a> provides the following\nutility methods:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.BaseUserManager\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">BaseUserManager</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.BaseUserManager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.BaseUserManager.normalize_email\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">normalize_email</span></code>(<em><span class=\"n\"><span class=\"pre\">email</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.BaseUserManager.normalize_email\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normalizes email addresses by lowercasing the domain portion of the\nemail address.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.BaseUserManager.get_by_natural_key\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_by_natural_key</span></code>(<em><span class=\"n\"><span class=\"pre\">username</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.BaseUserManager.get_by_natural_key\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Retrieves a user instance using the contents of the field\nnominated by <code class=\"docutils literal notranslate\"><span class=\"pre\">USERNAME_FIELD</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.BaseUserManager.make_random_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">make_random_password</span></code>(<em><span class=\"n\"><span class=\"pre\">length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">10</span></span></em>, <em><span class=\"n\"><span class=\"pre\">allowed_chars</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'abcdefghjkmnpqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ23456789'</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.BaseUserManager.make_random_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2.</span></p>\n</div>\n<p>Returns a random password with the given length and given string of\nallowed characters. Note that the default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">allowed_chars</span></code>\ndoesn\u2019t contain letters that can cause user confusion, including:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">l</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">I</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> (lowercase letter i, lowercase\nletter L, uppercase letter i, and the number one)</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">o</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">O</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> (lowercase letter o, uppercase letter o,\nand zero)</li>\n</ul>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-extending-django-s-default-user\">\n<span id=\"extending-django-s-default-user\"></span><h3>Extending Django\u2019s default <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code><a class=\"headerlink\" href=\"#extending-django-s-default-user\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re entirely happy with Django\u2019s <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a>\nmodel, but you want to add some additional profile information, you could\nsubclass <a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractUser\" title=\"django.contrib.auth.models.AbstractUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.AbstractUser</span></code></a> and add your custom\nprofile fields, although we\u2019d recommend a separate model as described in\n<a class=\"reference internal\" href=\"#specifying-custom-user-model\"><span class=\"std std-ref\">Specifying a custom user model</span></a>. <code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractUser</span></code> provides the full\nimplementation of the default <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> as an\n<a class=\"reference internal\" href=\"../../db/models/#abstract-base-classes\"><span class=\"std std-ref\">abstract model</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-custom-users-and-the-built-in-auth-forms\">\n<span id=\"s-id2\"></span><span id=\"custom-users-and-the-built-in-auth-forms\"></span><span id=\"id2\"></span><h3>Custom users and the built-in auth forms<a class=\"headerlink\" href=\"#custom-users-and-the-built-in-auth-forms\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s built-in <a class=\"reference internal\" href=\"../default/#built-in-auth-forms\"><span class=\"std std-ref\">forms</span></a> and <a class=\"reference internal\" href=\"../default/#built-in-auth-views\"><span class=\"std std-ref\">views</span></a> make certain assumptions about the user model that they\nare working with.</p>\n<p>The following forms are compatible with any subclass of\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.AuthenticationForm\" title=\"django.contrib.auth.forms.AuthenticationForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationForm</span></code></a>: Uses the username\nfield specified by <a class=\"reference internal\" href=\"#django.contrib.auth.models.CustomUser.USERNAME_FIELD\" title=\"django.contrib.auth.models.CustomUser.USERNAME_FIELD\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">USERNAME_FIELD</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.SetPasswordForm\" title=\"django.contrib.auth.forms.SetPasswordForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SetPasswordForm</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.PasswordChangeForm\" title=\"django.contrib.auth.forms.PasswordChangeForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PasswordChangeForm</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.AdminPasswordChangeForm\" title=\"django.contrib.auth.forms.AdminPasswordChangeForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AdminPasswordChangeForm</span></code></a></li>\n</ul>\n<p>The following forms make assumptions about the user model and can be used as-is\nif those assumptions are met:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.PasswordResetForm\" title=\"django.contrib.auth.forms.PasswordResetForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PasswordResetForm</span></code></a>: Assumes that the user\nmodel has a field that stores the user\u2019s email address with the name returned\nby <a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser.get_email_field_name\" title=\"django.contrib.auth.models.AbstractBaseUser.get_email_field_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_email_field_name()</span></code></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">email</span></code> by\ndefault) that can be used to identify the user and a boolean field named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">is_active</span></code> to prevent password resets for inactive users.</li>\n</ul>\n<p>Finally, the following forms are tied to\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> and need to be rewritten or extended\nto work with a custom user model:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.UserCreationForm\" title=\"django.contrib.auth.forms.UserCreationForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UserCreationForm</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.UserChangeForm\" title=\"django.contrib.auth.forms.UserChangeForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UserChangeForm</span></code></a></li>\n</ul>\n<p>If your custom user model is a subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractUser</span></code>, then you can\nextend these forms in this manner:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.forms</span> <span class=\"kn\">import</span> <span class=\"n\">UserCreationForm</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">CustomUser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomUserCreationForm</span><span class=\"p\">(</span><span class=\"n\">UserCreationForm</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">UserCreationForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CustomUser</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">UserCreationForm</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"o\">.</span><span class=\"n\">fields</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot;custom_field&quot;</span><span class=\"p\">,)</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>In older versions, <a class=\"reference internal\" href=\"../default/#django.contrib.auth.forms.UserCreationForm\" title=\"django.contrib.auth.forms.UserCreationForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UserCreationForm</span></code></a>\ndidn\u2019t save many-to-many form fields for a custom user model.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-users-and-django-contrib-admin\">\n<span id=\"custom-users-and-django-contrib-admin\"></span><h3>Custom users and <a class=\"reference internal\" href=\"../../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a><a class=\"headerlink\" href=\"#custom-users-and-django-contrib-admin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you want your custom user model to also work with the admin, your user model\nmust define some additional attributes and methods. These methods allow the\nadmin to control access of the user to admin content:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">CustomUser</span></code></dt>\n<dd></dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.is_staff\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_staff</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.is_staff\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user is allowed to have access to the admin site.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.is_active\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_active</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.is_active\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user account is currently active.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\">\n<code class=\"sig-name descname\"><span class=\"pre\">has_perm(perm,</span> <span class=\"pre\">obj=None):</span></code></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user has the named permission. If <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is\nprovided, the permission needs to be checked against a specific object\ninstance.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\">\n<code class=\"sig-name descname\"><span class=\"pre\">has_module_perms(app_label):</span></code></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user has permission to access models in\nthe given app.</p>\n</dd></dl>\n\n<p>You will also need to register your custom user model with the admin. If\nyour custom user model extends <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.AbstractUser</span></code>,\nyou can use Django\u2019s existing <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.admin.UserAdmin</span></code>\nclass. However, if your user model extends\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>, you\u2019ll need to define\na custom <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> class. It may be possible to subclass the default\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.admin.UserAdmin</span></code>; however, you\u2019ll need to\noverride any of the definitions that refer to fields on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.AbstractUser</span></code> that aren\u2019t on your\ncustom user class.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>If you are using a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> which is a subclass of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.admin.UserAdmin</span></code>, then you need to add your custom\nfields to <code class=\"docutils literal notranslate\"><span class=\"pre\">fieldsets</span></code> (for fields to be used in editing users) and to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">add_fieldsets</span></code> (for fields to be used when creating a user). For\nexample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.admin</span> <span class=\"kn\">import</span> <span class=\"n\">UserAdmin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomUserAdmin</span><span class=\"p\">(</span><span class=\"n\">UserAdmin</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">fieldsets</span> <span class=\"o\">=</span> <span class=\"n\">UserAdmin</span><span class=\"o\">.</span><span class=\"n\">fieldsets</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;custom_field&quot;</span><span class=\"p\">]}),)</span>\n    <span class=\"n\">add_fieldsets</span> <span class=\"o\">=</span> <span class=\"n\">UserAdmin</span><span class=\"o\">.</span><span class=\"n\">add_fieldsets</span> <span class=\"o\">+</span> <span class=\"p\">((</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;custom_field&quot;</span><span class=\"p\">]}),)</span>\n</pre></div>\n</div>\n<p class=\"last\">See <a class=\"reference internal\" href=\"#custom-users-admin-full-example\"><span class=\"std std-ref\">a full example</span></a> for more\ndetails.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-users-and-permissions\">\n<span id=\"custom-users-and-permissions\"></span><h3>Custom users and permissions<a class=\"headerlink\" href=\"#custom-users-and-permissions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To make it easy to include Django\u2019s permission framework into your own user\nclass, Django provides <a class=\"reference internal\" href=\"#django.contrib.auth.models.PermissionsMixin\" title=\"django.contrib.auth.models.PermissionsMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionsMixin</span></code></a>.\nThis is an abstract model you can include in the class hierarchy for your user\nmodel, giving you all the methods and database fields necessary to support\nDjango\u2019s permission model.</p>\n<p><a class=\"reference internal\" href=\"#django.contrib.auth.models.PermissionsMixin\" title=\"django.contrib.auth.models.PermissionsMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionsMixin</span></code></a> provides the following\nmethods and attributes:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">PermissionsMixin</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.is_superuser\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_superuser</span></code><a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.is_superuser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Boolean. Designates that this user has all permissions without\nexplicitly assigning them.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.get_user_permissions\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_user_permissions</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.get_user_permissions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a set of permission strings that the user has directly.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is passed in, only returns the user permissions for this\nspecific object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.get_group_permissions\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_group_permissions</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.get_group_permissions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a set of permission strings that the user has, through their\ngroups.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is passed in, only returns the group permissions for\nthis specific object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.get_all_permissions\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_all_permissions</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.get_all_permissions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a set of permission strings that the user has, both through\ngroup and user permissions.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is passed in, only returns the permissions for this\nspecific object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.has_perm\">\n<code class=\"sig-name descname\"><span class=\"pre\">has_perm</span></code>(<em><span class=\"n\"><span class=\"pre\">perm</span></span></em>, <em><span class=\"n\"><span class=\"pre\">obj</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.has_perm\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user has the specified permission, where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">perm</span></code> is in the format <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;app</span> <span class=\"pre\">label&gt;.&lt;permission</span> <span class=\"pre\">codename&gt;&quot;</span></code> (see\n<a class=\"reference internal\" href=\"../default/#topic-authorization\"><span class=\"std std-ref\">permissions</span></a>). If <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_active\" title=\"django.contrib.auth.models.User.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">User.is_active</span></code></a>\nand <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_superuser\" title=\"django.contrib.auth.models.User.is_superuser\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_superuser</span></code></a> are both <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this method always\nreturns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is passed in, this method won\u2019t check for a permission for\nthe model, but for this specific object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.has_perms\">\n<code class=\"sig-name descname\"><span class=\"pre\">has_perms</span></code>(<em><span class=\"n\"><span class=\"pre\">perm_list</span></span></em>, <em><span class=\"n\"><span class=\"pre\">obj</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.has_perms\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user has each of the specified permissions,\nwhere each perm is in the format\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;app</span> <span class=\"pre\">label&gt;.&lt;permission</span> <span class=\"pre\">codename&gt;&quot;</span></code>. If <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_active\" title=\"django.contrib.auth.models.User.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">User.is_active</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_superuser\" title=\"django.contrib.auth.models.User.is_superuser\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_superuser</span></code></a> are both <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this method always\nreturns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is passed in, this method won\u2019t check for permissions for\nthe model, but for the specific object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.models.PermissionsMixin.has_module_perms\">\n<code class=\"sig-name descname\"><span class=\"pre\">has_module_perms</span></code>(<em><span class=\"n\"><span class=\"pre\">package_name</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.models.PermissionsMixin.has_module_perms\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the user has any permissions in the given package\n(the Django app label). If <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_active\" title=\"django.contrib.auth.models.User.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">User.is_active</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_superuser\" title=\"django.contrib.auth.models.User.is_superuser\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_superuser</span></code></a> are both <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this method always\nreturns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<div class=\"admonition-permissionsmixin-and-modelbackend admonition\">\n<p class=\"first admonition-title\"><code class=\"docutils literal notranslate\"><span class=\"pre\">PermissionsMixin</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelBackend</span></code></p>\n<p class=\"last\">If you don\u2019t include the\n<a class=\"reference internal\" href=\"#django.contrib.auth.models.PermissionsMixin\" title=\"django.contrib.auth.models.PermissionsMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionsMixin</span></code></a>, you must ensure you\ndon\u2019t invoke the permissions methods on <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelBackend</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelBackend</span></code>\nassumes that certain fields are available on your user model. If your user\nmodel doesn\u2019t provide  those fields, you\u2019ll receive database errors when\nyou check permissions.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-users-and-proxy-models\">\n<span id=\"custom-users-and-proxy-models\"></span><h3>Custom users and proxy models<a class=\"headerlink\" href=\"#custom-users-and-proxy-models\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>One limitation of custom user models is that installing a custom user model\nwill break any proxy model extending <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a>.\nProxy models must be based on a concrete base class; by defining a custom user\nmodel, you remove the ability of Django to reliably identify the base class.</p>\n<p>If your project uses proxy models, you must either modify the proxy to extend\nthe user model that\u2019s in use in your project, or merge your proxy\u2019s behavior\ninto your <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> subclass.</p>\n</div>\n<div class=\"section\" id=\"s-a-full-example\">\n<span id=\"s-custom-users-admin-full-example\"></span><span id=\"a-full-example\"></span><span id=\"custom-users-admin-full-example\"></span><h3>A full example<a class=\"headerlink\" href=\"#a-full-example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Here is an example of an admin-compliant custom user app. This user model uses\nan email address as the username, and has a required date of birth; it\nprovides no permission checking beyond an <code class=\"docutils literal notranslate\"><span class=\"pre\">admin</span></code> flag on the user account.\nThis model would be compatible with all the built-in auth forms and views,\nexcept for the user creation forms. This example illustrates how most of the\ncomponents work together, but is not intended to be copied directly into\nprojects for production use.</p>\n<p>This code would all live in a <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> file for a custom\nauthentication app:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">BaseUserManager</span><span class=\"p\">,</span> <span class=\"n\">AbstractBaseUser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyUserManager</span><span class=\"p\">(</span><span class=\"n\">BaseUserManager</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">date_of_birth</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Creates and saves a User with the given email, date of</span>\n<span class=\"sd\">        birth and password.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">email</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Users must have an email address&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">(</span>\n            <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">normalize_email</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">),</span>\n            <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"n\">date_of_birth</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">set_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_superuser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">date_of_birth</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Creates and saves a superuser with the given email, date of</span>\n<span class=\"sd\">        birth and password.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_user</span><span class=\"p\">(</span>\n            <span class=\"n\">email</span><span class=\"p\">,</span>\n            <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">password</span><span class=\"p\">,</span>\n            <span class=\"n\">date_of_birth</span><span class=\"o\">=</span><span class=\"n\">date_of_birth</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_db</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyUser</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseUser</span><span class=\"p\">):</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">(</span>\n        <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;email address&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span>\n        <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">date_of_birth</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">is_active</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">is_admin</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">MyUserManager</span><span class=\"p\">()</span>\n\n    <span class=\"n\">USERNAME_FIELD</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;email&quot;</span>\n    <span class=\"n\">REQUIRED_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">email</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_perm</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">perm</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Does the user have a specific permission?&quot;</span>\n        <span class=\"c1\"># Simplest possible answer: Yes, always</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_module_perms</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app_label</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Does the user have permissions to view the app `app_label`?&quot;</span>\n        <span class=\"c1\"># Simplest possible answer: Yes, always</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_staff</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Is the user a member of staff?&quot;</span>\n        <span class=\"c1\"># Simplest possible answer: All admins are staff</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_admin</span>\n</pre></div>\n</div>\n<p>Then, to register this custom user model with Django\u2019s admin, the following\ncode would be required in the app\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.py</span></code> file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">Group</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.admin</span> <span class=\"kn\">import</span> <span class=\"n\">UserAdmin</span> <span class=\"k\">as</span> <span class=\"n\">BaseUserAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.forms</span> <span class=\"kn\">import</span> <span class=\"n\">ReadOnlyPasswordHashField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">customauth.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyUser</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserCreationForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;A form for creating new users. Includes all the required</span>\n<span class=\"sd\">    fields, plus a repeated password.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">password1</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Password&quot;</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">PasswordInput</span><span class=\"p\">)</span>\n    <span class=\"n\">password2</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span>\n        <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Password confirmation&quot;</span><span class=\"p\">,</span> <span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">PasswordInput</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean_password2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Check that the two password entries match</span>\n        <span class=\"n\">password1</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password1&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">password2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;password2&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">password1</span> <span class=\"ow\">and</span> <span class=\"n\">password2</span> <span class=\"ow\">and</span> <span class=\"n\">password1</span> <span class=\"o\">!=</span> <span class=\"n\">password2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Passwords don&#39;t match&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">password2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Save the provided password in hashed format</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">commit</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">set_password</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;password1&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">commit</span><span class=\"p\">:</span>\n            <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">user</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserChangeForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">ModelForm</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;A form for updating users. Includes all the fields on</span>\n<span class=\"sd\">    the user, but replaces the password field with admin&#39;s</span>\n<span class=\"sd\">    disabled password hash display field.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">ReadOnlyPasswordHashField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyUser</span>\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;password&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is_active&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is_admin&quot;</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UserAdmin</span><span class=\"p\">(</span><span class=\"n\">BaseUserAdmin</span><span class=\"p\">):</span>\n    <span class=\"c1\"># The forms to add and change user instances</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">UserChangeForm</span>\n    <span class=\"n\">add_form</span> <span class=\"o\">=</span> <span class=\"n\">UserCreationForm</span>\n\n    <span class=\"c1\"># The fields to be used in displaying the User model.</span>\n    <span class=\"c1\"># These override the definitions on the base UserAdmin</span>\n    <span class=\"c1\"># that reference specific fields on auth.User.</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is_admin&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;is_admin&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;password&quot;</span><span class=\"p\">]}),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;Personal info&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">]}),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;Permissions&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;is_admin&quot;</span><span class=\"p\">]}),</span>\n    <span class=\"p\">]</span>\n    <span class=\"c1\"># add_fieldsets is not a standard ModelAdmin attribute. UserAdmin</span>\n    <span class=\"c1\"># overrides get_fieldsets to use this attribute when creating a user.</span>\n    <span class=\"n\">add_fieldsets</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span>\n            <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;classes&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;wide&quot;</span><span class=\"p\">],</span>\n                <span class=\"s2\">&quot;fields&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;date_of_birth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;password1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;password2&quot;</span><span class=\"p\">],</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">search_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">filter_horizontal</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n\n<span class=\"c1\"># Now register the new UserAdmin...</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">MyUser</span><span class=\"p\">,</span> <span class=\"n\">UserAdmin</span><span class=\"p\">)</span>\n<span class=\"c1\"># ... and, since we&#39;re not using Django&#39;s built-in permissions,</span>\n<span class=\"c1\"># unregister the Group model from admin.</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">unregister</span><span class=\"p\">(</span><span class=\"n\">Group</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Finally, specify the custom model as the default user model for your project\nusing the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> setting in your <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">AUTH_USER_MODEL</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;customauth.MyUser&quot;</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/cache", "Django\u2019s cache framework", "N", "next"], ["topics/auth/passwords", "Password management in Django", "P", "previous"]], "sourcename": "topics/auth/customizing.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Customizing authentication in Django</a><ul>\n<li><a class=\"reference internal\" href=\"#other-authentication-sources\">Other authentication sources</a><ul>\n<li><a class=\"reference internal\" href=\"#specifying-authentication-backends\">Specifying authentication backends</a></li>\n<li><a class=\"reference internal\" href=\"#writing-an-authentication-backend\">Writing an authentication backend</a></li>\n<li><a class=\"reference internal\" href=\"#handling-authorization-in-custom-backends\">Handling authorization in custom backends</a><ul>\n<li><a class=\"reference internal\" href=\"#authorization-for-anonymous-users\">Authorization for anonymous users</a></li>\n<li><a class=\"reference internal\" href=\"#authorization-for-inactive-users\">Authorization for inactive users</a></li>\n<li><a class=\"reference internal\" href=\"#handling-object-permissions\">Handling object permissions</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#custom-permissions\">Custom permissions</a></li>\n<li><a class=\"reference internal\" href=\"#extending-the-existing-user-model\">Extending the existing <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model</a></li>\n<li><a class=\"reference internal\" href=\"#substituting-a-custom-user-model\">Substituting a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model</a><ul>\n<li><a class=\"reference internal\" href=\"#using-a-custom-user-model-when-starting-a-project\">Using a custom user model when starting a project</a></li>\n<li><a class=\"reference internal\" href=\"#changing-to-a-custom-user-model-mid-project\">Changing to a custom user model mid-project</a></li>\n<li><a class=\"reference internal\" href=\"#reusable-apps-and-auth-user-model\">Reusable apps and <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#referencing-the-user-model\">Referencing the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-a-custom-user-model\">Specifying a custom user model</a></li>\n<li><a class=\"reference internal\" href=\"#writing-a-manager-for-a-custom-user-model\">Writing a manager for a custom user model</a></li>\n<li><a class=\"reference internal\" href=\"#extending-django-s-default-user\">Extending Django\u2019s default <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#custom-users-and-the-built-in-auth-forms\">Custom users and the built-in auth forms</a></li>\n<li><a class=\"reference internal\" href=\"#custom-users-and-django-contrib-admin\">Custom users and <code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#custom-users-and-permissions\">Custom users and permissions</a></li>\n<li><a class=\"reference internal\" href=\"#custom-users-and-proxy-models\">Custom users and proxy models</a></li>\n<li><a class=\"reference internal\" href=\"#a-full-example\">A full example</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/auth/customizing", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
