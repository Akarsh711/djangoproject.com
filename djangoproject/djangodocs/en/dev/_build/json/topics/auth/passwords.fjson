{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "User authentication in Django"}], "prev": {"link": "../default/", "title": "Using the Django authentication system"}, "next": {"link": "../customizing/", "title": "Customizing authentication in Django"}, "title": "Password management in Django", "meta": null, "body": "<div class=\"section\" id=\"s-password-management-in-django\">\n<span id=\"password-management-in-django\"></span><h1>Password management in Django<a class=\"headerlink\" href=\"#password-management-in-django\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Password management is something that should generally not be reinvented\nunnecessarily, and Django endeavors to provide a secure and flexible set of\ntools for managing user passwords. This document describes how Django stores\npasswords, how the storage hashing can be configured, and some utilities to\nwork with hashed passwords.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Even though users may use strong passwords, attackers might be able to\neavesdrop on their connections. Use <a class=\"reference internal\" href=\"../../security/#security-recommendation-ssl\"><span class=\"std std-ref\">HTTPS</span></a> to avoid sending passwords (or any other\nsensitive data) over plain HTTP connections because they will be vulnerable\nto password sniffing.</p>\n</div>\n<div class=\"section\" id=\"s-how-django-stores-passwords\">\n<span id=\"s-auth-password-storage\"></span><span id=\"how-django-stores-passwords\"></span><span id=\"auth-password-storage\"></span><h2>How Django stores passwords<a class=\"headerlink\" href=\"#how-django-stores-passwords\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django provides a flexible password storage system and uses PBKDF2 by default.</p>\n<p>The <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.password\" title=\"django.contrib.auth.models.User.password\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">password</span></code></a> attribute of a\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">User</span></code></a> object is a string in this format:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>&lt;algorithm&gt;$&lt;iterations&gt;$&lt;salt&gt;$&lt;hash&gt;\n</pre></div>\n</div>\n<p>Those are the components used for storing a User\u2019s password, separated by the\ndollar-sign character and consist of: the hashing algorithm, the number of\nalgorithm iterations (work factor), the random salt, and the resulting password\nhash.  The algorithm is one of a number of one-way hashing or password storage\nalgorithms Django can use; see below. Iterations describe the number of times\nthe algorithm is run over the hash. Salt is the random seed used and the hash\nis the result of the one-way function.</p>\n<p>By default, Django uses the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/PBKDF2\">PBKDF2</a> algorithm with a SHA256 hash, a\npassword stretching mechanism recommended by <a class=\"reference external\" href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf\">NIST</a>. This should be\nsufficient for most users: it\u2019s quite secure, requiring massive\namounts of computing time to break.</p>\n<p>However, depending on your requirements, you may choose a different\nalgorithm, or even use a custom algorithm to match your specific\nsecurity situation. Again, most users shouldn\u2019t need to do this \u2013 if\nyou\u2019re not sure, you probably don\u2019t.  If you do, please read on:</p>\n<p>Django chooses the algorithm to use by consulting the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> setting. This is a list of hashing algorithm\nclasses that this Django installation supports.</p>\n<p>For storing passwords, Django will use the first hasher in\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a>. To store new passwords with a different algorithm,\nput your preferred algorithm first in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a>.</p>\n<p>For verifying passwords, Django will find the hasher in the list that matches\nthe algorithm name in the stored password. If a stored password names an\nalgorithm not found in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a>, trying to verify it will\nraise <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code>.</p>\n<p>The default for <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.Argon2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptSHA256PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.ScryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This means that Django will use <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/PBKDF2\">PBKDF2</a> to store all passwords but will support\nchecking passwords stored with PBKDF2SHA1, <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Argon2\">argon2</a>, and <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bcrypt\">bcrypt</a>.</p>\n<p>The next few sections describe a couple of common ways advanced users may want\nto modify this setting.</p>\n<div class=\"section\" id=\"s-using-argon2-with-django\">\n<span id=\"s-argon2-usage\"></span><span id=\"using-argon2-with-django\"></span><span id=\"argon2-usage\"></span><h3>Using Argon2 with Django<a class=\"headerlink\" href=\"#using-argon2-with-django\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Argon2\">Argon2</a> is the winner of the 2015 <a class=\"reference external\" href=\"https://www.password-hashing.net/\">Password Hashing Competition</a>, a community\norganized open competition to select a next generation hashing algorithm. It\u2019s\ndesigned not to be easier to compute on custom hardware than it is to compute\non an ordinary CPU. The default variant for the Argon2 password hasher is\nArgon2id.</p>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Argon2\">Argon2</a> is not the default for Django because it requires a third-party\nlibrary. The Password Hashing Competition panel, however, recommends immediate\nuse of Argon2 rather than the other algorithms supported by Django.</p>\n<p>To use Argon2id as your default storage algorithm, do the following:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Install the <a class=\"reference external\" href=\"https://pypi.org/project/argon2-cffi/\">argon2-cffi</a> package. This can be done by running\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-m</span> <span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">django[argon2]</span></code>, which is equivalent to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-m</span> <span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">argon2-cffi</span></code> (along with any version requirement\nfrom Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.cfg</span></code>).</p>\n</li>\n<li><p class=\"first\">Modify <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> to list <code class=\"docutils literal notranslate\"><span class=\"pre\">Argon2PasswordHasher</span></code> first.\nThat is, in your settings file, you\u2019d put:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.Argon2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptSHA256PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.ScryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Keep and/or add any entries in this list if you need Django to <a class=\"reference internal\" href=\"#password-upgrades\"><span class=\"std std-ref\">upgrade\npasswords</span></a>.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-using-bcrypt-with-django\">\n<span id=\"s-bcrypt-usage\"></span><span id=\"using-bcrypt-with-django\"></span><span id=\"bcrypt-usage\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">bcrypt</span></code> with Django<a class=\"headerlink\" href=\"#using-bcrypt-with-django\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Bcrypt\">Bcrypt</a> is a popular password storage algorithm that\u2019s specifically designed\nfor long-term password storage. It\u2019s not the default used by Django since it\nrequires the use of third-party libraries, but since many people may want to\nuse it Django supports bcrypt with minimal effort.</p>\n<p>To use Bcrypt as your default storage algorithm, do the following:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Install the <a class=\"reference external\" href=\"https://pypi.org/project/bcrypt/\">bcrypt</a> package. This can be done by running\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-m</span> <span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">django[bcrypt]</span></code>, which is equivalent to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-m</span> <span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">bcrypt</span></code> (along with any version requirement from\nDjango\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.cfg</span></code>).</p>\n</li>\n<li><p class=\"first\">Modify <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> to list <code class=\"docutils literal notranslate\"><span class=\"pre\">BCryptSHA256PasswordHasher</span></code>\nfirst. That is, in your settings file, you\u2019d put:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptSHA256PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.Argon2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.ScryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Keep and/or add any entries in this list if you need Django to <a class=\"reference internal\" href=\"#password-upgrades\"><span class=\"std std-ref\">upgrade\npasswords</span></a>.</p>\n</li>\n</ol>\n<p>That\u2019s it \u2013 now your Django install will use Bcrypt as the default storage\nalgorithm.</p>\n</div>\n<div class=\"section\" id=\"s-using-scrypt-with-django\">\n<span id=\"s-scrypt-usage\"></span><span id=\"using-scrypt-with-django\"></span><span id=\"scrypt-usage\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">scrypt</span></code> with Django<a class=\"headerlink\" href=\"#using-scrypt-with-django\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scrypt\">scrypt</a> is similar to PBKDF2 and bcrypt in utilizing a set number of iterations\nto slow down brute-force attacks. However, because PBKDF2 and bcrypt do not\nrequire a lot of memory, attackers with sufficient resources can launch\nlarge-scale parallel attacks in order to speed up the attacking process.\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scrypt\">scrypt</a> is specifically designed to use more memory compared to other\npassword-based key derivation functions in order to limit the amount of\nparallelism an attacker can use, see <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc7914.html\"><strong>RFC 7914</strong></a> for more details.</p>\n<p>To use <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scrypt\">scrypt</a> as your default storage algorithm, do the following:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Modify <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> to list <code class=\"docutils literal notranslate\"><span class=\"pre\">ScryptPasswordHasher</span></code> first.\nThat is, in your settings file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.ScryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.Argon2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptSHA256PasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Keep and/or add any entries in this list if you need Django to <a class=\"reference internal\" href=\"#password-upgrades\"><span class=\"std std-ref\">upgrade\npasswords</span></a>.</p>\n</li>\n</ol>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">scrypt</span></code> requires OpenSSL 1.1+.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-increasing-the-salt-entropy\">\n<span id=\"increasing-the-salt-entropy\"></span><h3>Increasing the salt entropy<a class=\"headerlink\" href=\"#increasing-the-salt-entropy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Most password hashes include a salt along with their password hash in order to\nprotect against rainbow table attacks. The salt itself is a random value which\nincreases the size and thus the cost of the rainbow table and is currently set\nat 128 bits with the <code class=\"docutils literal notranslate\"><span class=\"pre\">salt_entropy</span></code> value in the <code class=\"docutils literal notranslate\"><span class=\"pre\">BasePasswordHasher</span></code>. As\ncomputing and storage costs decrease this value should be raised. When\nimplementing your own password hasher you are free to override this value in\norder to use a desired entropy level for your password hashes. <code class=\"docutils literal notranslate\"><span class=\"pre\">salt_entropy</span></code>\nis measured in bits.</p>\n<div class=\"admonition-implementation-detail admonition\">\n<p class=\"first admonition-title\">Implementation detail</p>\n<p class=\"last\">Due to the method in which salt values are stored the <code class=\"docutils literal notranslate\"><span class=\"pre\">salt_entropy</span></code>\nvalue is effectively a minimum value. For instance a value of 128 would\nprovide a salt which would actually contain 131 bits of entropy.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-increasing-the-work-factor\">\n<span id=\"s-increasing-password-algorithm-work-factor\"></span><span id=\"increasing-the-work-factor\"></span><span id=\"increasing-password-algorithm-work-factor\"></span><h3>Increasing the work factor<a class=\"headerlink\" href=\"#increasing-the-work-factor\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-pbkdf2-and-bcrypt\">\n<span id=\"pbkdf2-and-bcrypt\"></span><h4>PBKDF2 and bcrypt<a class=\"headerlink\" href=\"#pbkdf2-and-bcrypt\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The PBKDF2 and bcrypt algorithms use a number of iterations or rounds of\nhashing. This deliberately slows down attackers, making attacks against hashed\npasswords harder. However, as computing power increases, the number of\niterations needs to be increased. We\u2019ve chosen a reasonable default (and will\nincrease it with each release of Django), but you may wish to tune it up or\ndown, depending on your security needs and available processing power. To do so,\nyou\u2019ll subclass the appropriate algorithm and override the <code class=\"docutils literal notranslate\"><span class=\"pre\">iterations</span></code>\nparameter (use the <code class=\"docutils literal notranslate\"><span class=\"pre\">rounds</span></code> parameter when subclassing a bcrypt hasher). For\nexample, to increase the number of iterations used by the default PBKDF2\nalgorithm:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Create a subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></code></p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.hashers</span> <span class=\"kn\">import</span> <span class=\"n\">PBKDF2PasswordHasher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPBKDF2PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">PBKDF2PasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A subclass of PBKDF2PasswordHasher that uses 100 times more iterations.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">iterations</span> <span class=\"o\">=</span> <span class=\"n\">PBKDF2PasswordHasher</span><span class=\"o\">.</span><span class=\"n\">iterations</span> <span class=\"o\">*</span> <span class=\"mi\">100</span>\n</pre></div>\n</div>\n<p>Save this somewhere in your project. For example, you might put this in\na file like <code class=\"docutils literal notranslate\"><span class=\"pre\">myproject/hashers.py</span></code>.</p>\n</li>\n<li><p class=\"first\">Add your new hasher as the first entry in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;myproject.hashers.MyPBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.Argon2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptSHA256PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.ScryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</li>\n</ol>\n<p>That\u2019s it \u2013 now your Django install will use more iterations when it\nstores passwords using PBKDF2.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">bcrypt <code class=\"docutils literal notranslate\"><span class=\"pre\">rounds</span></code> is a logarithmic work factor, e.g. 12 rounds means\n<code class=\"docutils literal notranslate\"><span class=\"pre\">2</span> <span class=\"pre\">**</span> <span class=\"pre\">12</span></code> iterations.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-argon2\">\n<span id=\"argon2\"></span><h4>Argon2<a class=\"headerlink\" href=\"#argon2\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Argon2 has the following attributes that can be customized:</p>\n<ol class=\"arabic simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">time_cost</span></code> controls the number of iterations within the hash.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">memory_cost</span></code> controls the size of memory that must be used during the\ncomputation of the hash.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">parallelism</span></code> controls how many CPUs the computation of the hash can be\nparallelized on.</li>\n</ol>\n<p>The default values of these attributes are probably fine for you. If you\ndetermine that the password hash is too fast or too slow, you can tweak it as\nfollows:</p>\n<ol class=\"arabic simple\">\n<li>Choose <code class=\"docutils literal notranslate\"><span class=\"pre\">parallelism</span></code> to be the number of threads you can\nspare computing the hash.</li>\n<li>Choose <code class=\"docutils literal notranslate\"><span class=\"pre\">memory_cost</span></code> to be the KiB of memory you can spare.</li>\n<li>Adjust <code class=\"docutils literal notranslate\"><span class=\"pre\">time_cost</span></code> and measure the time hashing a password takes.\nPick a <code class=\"docutils literal notranslate\"><span class=\"pre\">time_cost</span></code> that takes an acceptable time for you.\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">time_cost</span></code> set to 1 is unacceptably slow, lower <code class=\"docutils literal notranslate\"><span class=\"pre\">memory_cost</span></code>.</li>\n</ol>\n<div class=\"admonition-memory-cost-interpretation admonition\">\n<p class=\"first admonition-title\"><code class=\"docutils literal notranslate\"><span class=\"pre\">memory_cost</span></code> interpretation</p>\n<p class=\"last\">The argon2 command-line utility and some other libraries interpret the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">memory_cost</span></code> parameter differently from the value that Django uses. The\nconversion is given by <code class=\"docutils literal notranslate\"><span class=\"pre\">memory_cost</span> <span class=\"pre\">==</span> <span class=\"pre\">2</span> <span class=\"pre\">**</span> <span class=\"pre\">memory_cost_commandline</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-scrypt\">\n<span id=\"scrypt\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">scrypt</span></code><a class=\"headerlink\" href=\"#scrypt\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scrypt\">scrypt</a> has the following attributes that can be customized:</p>\n<ol class=\"arabic simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">work_factor</span></code> controls the number of iterations within the hash.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">block_size</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">parallelism</span></code> controls how many threads will run in parallel.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">maxmem</span></code> limits the maximum size of memory that can be used during the\ncomputation of the hash. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, which means the default\nlimitation from the OpenSSL library.</li>\n</ol>\n<p>We\u2019ve chosen reasonable defaults, but you may wish to tune it up or down,\ndepending on your security needs and available processing power.</p>\n<div class=\"admonition-estimating-memory-usage admonition\">\n<p class=\"first admonition-title\">Estimating memory usage</p>\n<p>The minimum memory requirement of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Scrypt\">scrypt</a> is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">work_factor</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">block_size</span> <span class=\"o\">*</span> <span class=\"mi\">64</span>\n</pre></div>\n</div>\n<p class=\"last\">so you may need to tweak <code class=\"docutils literal notranslate\"><span class=\"pre\">maxmem</span></code> when changing the <code class=\"docutils literal notranslate\"><span class=\"pre\">work_factor</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">block_size</span></code> values.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-password-upgrading\">\n<span id=\"s-password-upgrades\"></span><span id=\"password-upgrading\"></span><span id=\"password-upgrades\"></span><h3>Password upgrading<a class=\"headerlink\" href=\"#password-upgrading\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When users log in, if their passwords are stored with anything other than\nthe preferred algorithm, Django will automatically upgrade the algorithm\nto the preferred one. This means that old installs of Django will get\nautomatically more secure as users log in, and it also means that you\ncan switch to new (and better) storage algorithms as they get invented.</p>\n<p>However, Django can only upgrade passwords that use algorithms mentioned in\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a>, so as you upgrade to new systems you should make\nsure never to <em>remove</em> entries from this list. If you do, users using\nunmentioned algorithms won\u2019t be able to upgrade. Hashed passwords will be\nupdated when increasing (or decreasing) the number of PBKDF2 iterations, bcrypt\nrounds, or argon2 attributes.</p>\n<p>Be aware that if all the passwords in your database aren\u2019t encoded in the\ndefault hasher\u2019s algorithm, you may be vulnerable to a user enumeration timing\nattack due to a difference between the duration of a login request for a user\nwith a password encoded in a non-default algorithm and the duration of a login\nrequest for a nonexistent user (which runs the default hasher). You may be able\nto mitigate this by <a class=\"reference internal\" href=\"#wrapping-password-hashers\"><span class=\"std std-ref\">upgrading older password hashes</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-password-upgrading-without-requiring-a-login\">\n<span id=\"s-wrapping-password-hashers\"></span><span id=\"password-upgrading-without-requiring-a-login\"></span><span id=\"wrapping-password-hashers\"></span><h3>Password upgrading without requiring a login<a class=\"headerlink\" href=\"#password-upgrading-without-requiring-a-login\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you have an existing database with an older, weak hash such as MD5, you\nmight want to upgrade those hashes yourself instead of waiting for the upgrade\nto happen when a user logs in (which may never happen if a user doesn\u2019t return\nto your site). In this case, you can use a \u201cwrapped\u201d password hasher.</p>\n<p>For this example, we\u2019ll migrate a collection of MD5 hashes to use\nPBKDF2(MD5(password)) and add the corresponding password hasher for checking\nif a user entered the correct password on login. We assume we\u2019re using the\nbuilt-in <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model and that our project has an <code class=\"docutils literal notranslate\"><span class=\"pre\">accounts</span></code> app. You can\nmodify the pattern to work with any algorithm or with a custom user model.</p>\n<p>First, we\u2019ll add the custom hasher:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">accounts/hashers.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.hashers</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">PBKDF2PasswordHasher</span><span class=\"p\">,</span>\n    <span class=\"n\">MD5PasswordHasher</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PBKDF2WrappedMD5PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">PBKDF2PasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pbkdf2_wrapped_md5&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode_md5_hash</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">md5_hash</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">md5_hash</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">md5_hash</span> <span class=\"o\">=</span> <span class=\"n\">MD5PasswordHasher</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode_md5_hash</span><span class=\"p\">(</span><span class=\"n\">md5_hash</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>The data migration might look something like:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">accounts/migrations/0002_migrate_md5_passwords.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">..hashers</span> <span class=\"kn\">import</span> <span class=\"n\">PBKDF2WrappedMD5PasswordHasher</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">forwards_func</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"p\">,</span> <span class=\"n\">schema_editor</span><span class=\"p\">):</span>\n    <span class=\"n\">User</span> <span class=\"o\">=</span> <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s2\">&quot;auth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;User&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">password__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;md5$&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">PBKDF2WrappedMD5PasswordHasher</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span><span class=\"p\">:</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">md5_hash</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">encode_md5_hash</span><span class=\"p\">(</span><span class=\"n\">md5_hash</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n        <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;accounts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0001_initial&quot;</span><span class=\"p\">),</span>\n        <span class=\"c1\"># replace this with the latest migration in contrib.auth</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;auth&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;####_migration_name&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">RunPython</span><span class=\"p\">(</span><span class=\"n\">forwards_func</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Be aware that this migration will take on the order of several minutes for\nseveral thousand users, depending on the speed of your hardware.</p>\n<p>Finally, we\u2019ll add a <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> setting:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;accounts.hashers.PBKDF2WrappedMD5PasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Include any other hashers that your site uses in this list.</p>\n</div>\n<div class=\"section\" id=\"s-included-hashers\">\n<span id=\"s-auth-included-hashers\"></span><span id=\"included-hashers\"></span><span id=\"auth-included-hashers\"></span><h3>Included hashers<a class=\"headerlink\" href=\"#included-hashers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The full list of hashers included in Django is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.Argon2PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptSHA256PasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.BCryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.ScryptPasswordHasher&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.MD5PasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>The corresponding algorithm names are:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">pbkdf2_sha256</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">pbkdf2_sha1</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">argon2</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">bcrypt_sha256</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">bcrypt</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">scrypt</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">md5</span></code></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-writing-your-own-hasher\">\n<span id=\"s-write-your-own-password-hasher\"></span><span id=\"writing-your-own-hasher\"></span><span id=\"write-your-own-password-hasher\"></span><h3>Writing your own hasher<a class=\"headerlink\" href=\"#writing-your-own-hasher\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you write your own password hasher that contains a work factor such as a\nnumber of iterations, you should implement a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">harden_runtime(self,</span> <span class=\"pre\">password,</span> <span class=\"pre\">encoded)</span></code> method to bridge the runtime gap\nbetween the work factor supplied in the <code class=\"docutils literal notranslate\"><span class=\"pre\">encoded</span></code> password and the default\nwork factor of the hasher. This prevents a user enumeration timing attack due\nto  difference between a login request for a user with a password encoded in an\nolder number of iterations and a nonexistent user (which runs the default\nhasher\u2019s default number of iterations).</p>\n<p>Taking PBKDF2 as example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">encoded</span></code> contains 20,000 iterations and the\nhasher\u2019s default <code class=\"docutils literal notranslate\"><span class=\"pre\">iterations</span></code> is 30,000, the method should run <code class=\"docutils literal notranslate\"><span class=\"pre\">password</span></code>\nthrough another 10,000 iterations of PBKDF2.</p>\n<p>If your hasher doesn\u2019t have a work factor, implement the method as a no-op\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">pass</span></code>).</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-module-django.contrib.auth.hashers\">\n<span id=\"s-manually-managing-a-user-s-password\"></span><span id=\"module-django.contrib.auth.hashers\"></span><span id=\"manually-managing-a-user-s-password\"></span><h2>Manually managing a user\u2019s password<a class=\"headerlink\" href=\"#module-django.contrib.auth.hashers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <a class=\"reference internal\" href=\"#module-django.contrib.auth.hashers\" title=\"django.contrib.auth.hashers\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers</span></code></a> module provides a set of functions\nto create and validate hashed passwords. You can use them independently\nfrom the <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.hashers.check_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">check_password</span></code>(<em><span class=\"n\"><span class=\"pre\">password</span></span></em>, <em><span class=\"n\"><span class=\"pre\">encoded</span></span></em>, <em><span class=\"n\"><span class=\"pre\">setter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">preferred</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'default'</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/hashers/#check_password\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.hashers.check_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.hashers.acheck_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">acheck_password</span></code>(<em><span class=\"n\"><span class=\"pre\">password</span></span></em>, <em><span class=\"n\"><span class=\"pre\">encoded</span></span></em>, <em><span class=\"n\"><span class=\"pre\">asetter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">preferred</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'default'</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/hashers/#acheck_password\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.hashers.acheck_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">acheck_password()</span></code></p>\n<p>If you\u2019d like to manually authenticate a user by comparing a plain-text\npassword to the hashed password in the database, use the convenience\nfunction <a class=\"reference internal\" href=\"#django.contrib.auth.hashers.check_password\" title=\"django.contrib.auth.hashers.check_password\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">check_password()</span></code></a>. It takes two mandatory arguments: the\nplain-text password to check, and the full value of a user\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">password</span></code>\nfield in the database to check against. It returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if they match,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise. Optionally, you can pass a callable <code class=\"docutils literal notranslate\"><span class=\"pre\">setter</span></code> that\ntakes the password and will be called when you need to regenerate it. You\ncan also pass <code class=\"docutils literal notranslate\"><span class=\"pre\">preferred</span></code> to change a hashing algorithm if you don\u2019t want\nto use the default (first entry of <code class=\"docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code> setting). See\n<a class=\"reference internal\" href=\"#auth-included-hashers\"><span class=\"std std-ref\">Included hashers</span></a> for the algorithm name of each hasher.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">acheck_password()</span></code> method was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.hashers.make_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">make_password</span></code>(<em><span class=\"n\"><span class=\"pre\">password</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">hasher</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'default'</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/hashers/#make_password\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.hashers.make_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a hashed password in the format used by this application. It takes\none mandatory argument: the password in plain-text (string or bytes).\nOptionally, you can provide a salt and a hashing algorithm to use, if you\ndon\u2019t want to use the defaults (first entry of <code class=\"docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code>\nsetting). See <a class=\"reference internal\" href=\"#auth-included-hashers\"><span class=\"std std-ref\">Included hashers</span></a> for the algorithm name of each\nhasher. If the password argument is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, an unusable password is\nreturned (one that will never be accepted by <a class=\"reference internal\" href=\"#django.contrib.auth.hashers.check_password\" title=\"django.contrib.auth.hashers.check_password\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">check_password()</span></code></a>).</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.hashers.is_password_usable\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_password_usable</span></code>(<em><span class=\"n\"><span class=\"pre\">encoded_password</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/hashers/#is_password_usable\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.hashers.is_password_usable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if the password is a result of\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.set_unusable_password\" title=\"django.contrib.auth.models.User.set_unusable_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">User.set_unusable_password()</span></code></a>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-module-django.contrib.auth.password_validation\">\n<span id=\"s-id3\"></span><span id=\"s-password-validation\"></span><span id=\"module-django.contrib.auth.password_validation\"></span><span id=\"id3\"></span><span id=\"password-validation\"></span><h2>Password validation<a class=\"headerlink\" href=\"#module-django.contrib.auth.password_validation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Users often choose poor passwords. To help mitigate this problem, Django\noffers pluggable password validation. You can configure multiple password\nvalidators at the same time. A few validators are included in Django, but you\ncan write your own as well.</p>\n<p>Each password validator must provide a help text to explain the requirements to\nthe user, validate a given password and return an error message if it does not\nmeet the requirements, and optionally receive passwords that have been set.\nValidators can also have optional settings to fine tune their behavior.</p>\n<p>Validation is controlled by the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a> setting.\nThe default for the setting is an empty list, which means no validators are\napplied. In new projects created with the default <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-startproject\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startproject</span></code></a>\ntemplate, a set of validators is enabled by default.</p>\n<p>By default, validators are used in the forms to reset or change passwords and\nin the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-createsuperuser\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">createsuperuser</span></code></a> and <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-changepassword\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">changepassword</span></code></a> management\ncommands. Validators aren\u2019t applied at the model level, for example in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">User.objects.create_user()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">create_superuser()</span></code>, because we assume\nthat developers, not users, interact with Django at that level and also because\nmodel validation doesn\u2019t automatically run as part of creating models.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Password validation can prevent the use of many types of weak passwords.\nHowever, the fact that a password passes all the validators doesn\u2019t\nguarantee that it is a strong password. There are many factors that can\nweaken a password that are not detectable by even the most advanced\npassword validators.</p>\n</div>\n<div class=\"section\" id=\"s-enabling-password-validation\">\n<span id=\"enabling-password-validation\"></span><h3>Enabling password validation<a class=\"headerlink\" href=\"#enabling-password-validation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Password validation is configured in the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a> setting:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">AUTH_PASSWORD_VALIDATORS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.MinimumLengthValidator&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;min_length&quot;</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.CommonPasswordValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.NumericPasswordValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This example enables all four included validators:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">UserAttributeSimilarityValidator</span></code>, which checks the similarity between\nthe password and a set of attributes of the user.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">MinimumLengthValidator</span></code>, which checks whether the password meets a minimum\nlength. This validator is configured with a custom option: it now requires\nthe minimum length to be nine characters, instead of the default eight.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">CommonPasswordValidator</span></code>, which checks whether the password occurs in a\nlist of common passwords. By default, it compares to an included list of\n20,000 common passwords.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">NumericPasswordValidator</span></code>, which checks whether the password isn\u2019t\nentirely numeric.</li>\n</ul>\n<p>For <code class=\"docutils literal notranslate\"><span class=\"pre\">UserAttributeSimilarityValidator</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CommonPasswordValidator</span></code>,\nwe\u2019re using the default settings in this example. <code class=\"docutils literal notranslate\"><span class=\"pre\">NumericPasswordValidator</span></code>\nhas no settings.</p>\n<p>The help texts and any errors from password validators are always returned in\nthe order they are listed in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-included-validators\">\n<span id=\"included-validators\"></span><h3>Included validators<a class=\"headerlink\" href=\"#included-validators\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django includes four validators:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.MinimumLengthValidator\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">MinimumLengthValidator</span></code>(<em><span class=\"n\"><span class=\"pre\">min_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">8</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#MinimumLengthValidator\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.MinimumLengthValidator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validates that the password is of a minimum length.\nThe minimum length can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">min_length</span></code> parameter.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.UserAttributeSimilarityValidator\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">UserAttributeSimilarityValidator</span></code>(<em><span class=\"n\"><span class=\"pre\">user_attributes</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_USER_ATTRIBUTES</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_similarity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0.7</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#UserAttributeSimilarityValidator\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.UserAttributeSimilarityValidator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validates that the password is sufficiently different from certain\nattributes of the user.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">user_attributes</span></code> parameter should be an iterable of names of user\nattributes to compare to. If this argument is not provided, the default\nis used: <code class=\"docutils literal notranslate\"><span class=\"pre\">'username',</span> <span class=\"pre\">'first_name',</span> <span class=\"pre\">'last_name',</span> <span class=\"pre\">'email'</span></code>.\nAttributes that don\u2019t exist are ignored.</p>\n<p>The maximum allowed similarity of passwords can be set on a scale of 0.1\nto 1.0 with the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_similarity</span></code> parameter. This is compared to the\nresult of <a class=\"reference external\" href=\"https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.quick_ratio\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">difflib.SequenceMatcher.quick_ratio()</span></code></a>. A value of 0.1\nrejects passwords unless they are substantially different from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">user_attributes</span></code>, whereas a value of 1.0 rejects only passwords that are\nidentical to an attribute\u2019s value.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 2.2.26:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">max_similarity</span></code> parameter was limited to a minimum value of 0.1.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.CommonPasswordValidator\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">CommonPasswordValidator</span></code>(<em><span class=\"n\"><span class=\"pre\">password_list_path</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_PASSWORD_LIST_PATH</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#CommonPasswordValidator\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.CommonPasswordValidator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validates that the password is not a common password. This converts the\npassword to lowercase (to do a case-insensitive comparison) and checks it\nagainst a list of 20,000 common password created by <a class=\"reference external\" href=\"https://gist.github.com/roycewilliams/226886fd01572964e1431ac8afc999ce\">Royce Williams</a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">password_list_path</span></code> can be set to the path of a custom file of\ncommon passwords. This file should contain one lowercase password per line\nand may be plain text or gzipped.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The list of 20,000 common passwords was updated to the most recent\nversion.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.NumericPasswordValidator\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">NumericPasswordValidator</span></code><a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#NumericPasswordValidator\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.NumericPasswordValidator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validate that the password is not entirely numeric.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-integrating-validation\">\n<span id=\"integrating-validation\"></span><h3>Integrating validation<a class=\"headerlink\" href=\"#integrating-validation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are a few functions in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.password_validation</span></code> that\nyou can call from your own forms or other code to integrate password\nvalidation. This can be useful if you use custom forms for password setting,\nor if you have API calls that allow passwords to be set, for example.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.validate_password\">\n<code class=\"sig-name descname\"><span class=\"pre\">validate_password</span></code>(<em><span class=\"n\"><span class=\"pre\">password</span></span></em>, <em><span class=\"n\"><span class=\"pre\">user</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">password_validators</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#validate_password\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.validate_password\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Validates a password. If all validators find the password valid, returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. If one or more validators reject the password, raises a\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> with all the error messages\nfrom the validators.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code> object is optional: if it\u2019s not provided, some validators may\nnot be able to perform any validation and will accept any password.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.password_changed\">\n<code class=\"sig-name descname\"><span class=\"pre\">password_changed</span></code>(<em><span class=\"n\"><span class=\"pre\">password</span></span></em>, <em><span class=\"n\"><span class=\"pre\">user</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">password_validators</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#password_changed\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.password_changed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Informs all validators that the password has been changed. This can be used\nby validators such as one that prevents password reuse. This should be\ncalled once the password has been successfully changed.</p>\n<p>For subclasses of <a class=\"reference internal\" href=\"../customizing/#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>,\nthe password field will be marked as \u201cdirty\u201d when calling\n<a class=\"reference internal\" href=\"../customizing/#django.contrib.auth.models.AbstractBaseUser.set_password\" title=\"django.contrib.auth.models.AbstractBaseUser.set_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_password()</span></code></a> which\ntriggers a call to <code class=\"docutils literal notranslate\"><span class=\"pre\">password_changed()</span></code> after the user is saved.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.password_validators_help_texts\">\n<code class=\"sig-name descname\"><span class=\"pre\">password_validators_help_texts</span></code>(<em><span class=\"n\"><span class=\"pre\">password_validators</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#password_validators_help_texts\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.password_validators_help_texts\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of the help texts of all validators. These explain the\npassword requirements to the user.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.password_validators_help_text_html\">\n<code class=\"sig-name descname\"><span class=\"pre\">password_validators_help_text_html</span></code>(<em><span class=\"n\"><span class=\"pre\">password_validators</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.password_validators_help_text_html\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an HTML string with all help texts in an <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;ul&gt;</span></code>. This is\nhelpful when adding password validation to forms, as you can pass the\noutput directly to the <code class=\"docutils literal notranslate\"><span class=\"pre\">help_text</span></code> parameter of a form field.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.password_validation.get_password_validators\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_password_validators</span></code>(<em><span class=\"n\"><span class=\"pre\">validator_config</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/password_validation/#get_password_validators\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.password_validation.get_password_validators\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a set of validator objects based on the <code class=\"docutils literal notranslate\"><span class=\"pre\">validator_config</span></code>\nparameter. By default, all functions use the validators defined in\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a>, but by calling this function with an\nalternate set of validators and then passing the result into the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">password_validators</span></code> parameter of the other functions, your custom set\nof validators will be used instead. This is useful when you have a typical\nset of validators to use for most scenarios, but also have a special\nsituation that requires a custom set. If you always use the same set\nof validators, there is no need to use this function, as the configuration\nfrom <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a> is used by default.</p>\n<p>The structure of <code class=\"docutils literal notranslate\"><span class=\"pre\">validator_config</span></code> is identical to the\nstructure of <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a>. The return value of\nthis function can be passed into the <code class=\"docutils literal notranslate\"><span class=\"pre\">password_validators</span></code> parameter\nof the functions listed above.</p>\n</dd></dl>\n\n<p>Note that where the password is passed to one of these functions, this should\nalways be the clear text password - not a hashed password.</p>\n</div>\n<div class=\"section\" id=\"s-writing-your-own-validator\">\n<span id=\"writing-your-own-validator\"></span><h3>Writing your own validator<a class=\"headerlink\" href=\"#writing-your-own-validator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If Django\u2019s built-in validators are not sufficient, you can write your own\npassword validators. Validators have a fairly small interface. They must\nimplement two methods:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">validate(self,</span> <span class=\"pre\">password,</span> <span class=\"pre\">user=None)</span></code>: validate a password. Return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if the password is valid, or raise a\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> with an error message if the\npassword is not valid. You must be able to deal with <code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code> being\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> - if that means your validator can\u2019t run, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for no\nerror.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_help_text()</span></code>: provide a help text to explain the requirements to\nthe user.</li>\n</ul>\n<p>Any items in the <code class=\"docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code> in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a> for your\nvalidator will be passed to the constructor. All constructor arguments should\nhave a default value.</p>\n<p>Here\u2019s a basic example of a validator, with one optional setting:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MinimumLengthValidator</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">min_length</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_length</span> <span class=\"o\">=</span> <span class=\"n\">min_length</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">validate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_length</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n                <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;This password must contain at least </span><span class=\"si\">%(min_length)d</span><span class=\"s2\"> characters.&quot;</span><span class=\"p\">),</span>\n                <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">&quot;password_too_short&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;min_length&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_length</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_help_text</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Your password must contain at least </span><span class=\"si\">%(min_length)d</span><span class=\"s2\"> characters.&quot;</span>\n            <span class=\"o\">%</span> <span class=\"p\">{</span><span class=\"s2\">&quot;min_length&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min_length</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can also implement <code class=\"docutils literal notranslate\"><span class=\"pre\">password_changed(password,</span> <span class=\"pre\">user=None</span></code>), which will\nbe called after a successful password change. That can be used to prevent\npassword reuse, for example. However, if you decide to store a user\u2019s previous\npasswords, you should never do so in clear text.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/auth/customizing", "Customizing authentication in Django", "N", "next"], ["topics/auth/default", "Using the Django authentication system", "P", "previous"]], "sourcename": "topics/auth/passwords.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Password management in Django</a><ul>\n<li><a class=\"reference internal\" href=\"#how-django-stores-passwords\">How Django stores passwords</a><ul>\n<li><a class=\"reference internal\" href=\"#using-argon2-with-django\">Using Argon2 with Django</a></li>\n<li><a class=\"reference internal\" href=\"#using-bcrypt-with-django\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">bcrypt</span></code> with Django</a></li>\n<li><a class=\"reference internal\" href=\"#using-scrypt-with-django\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">scrypt</span></code> with Django</a></li>\n<li><a class=\"reference internal\" href=\"#increasing-the-salt-entropy\">Increasing the salt entropy</a></li>\n<li><a class=\"reference internal\" href=\"#increasing-the-work-factor\">Increasing the work factor</a><ul>\n<li><a class=\"reference internal\" href=\"#pbkdf2-and-bcrypt\">PBKDF2 and bcrypt</a></li>\n<li><a class=\"reference internal\" href=\"#argon2\">Argon2</a></li>\n<li><a class=\"reference internal\" href=\"#scrypt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">scrypt</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#password-upgrading\">Password upgrading</a></li>\n<li><a class=\"reference internal\" href=\"#password-upgrading-without-requiring-a-login\">Password upgrading without requiring a login</a></li>\n<li><a class=\"reference internal\" href=\"#included-hashers\">Included hashers</a></li>\n<li><a class=\"reference internal\" href=\"#writing-your-own-hasher\">Writing your own hasher</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-django.contrib.auth.hashers\">Manually managing a user\u2019s password</a></li>\n<li><a class=\"reference internal\" href=\"#module-django.contrib.auth.password_validation\">Password validation</a><ul>\n<li><a class=\"reference internal\" href=\"#enabling-password-validation\">Enabling password validation</a></li>\n<li><a class=\"reference internal\" href=\"#included-validators\">Included validators</a></li>\n<li><a class=\"reference internal\" href=\"#integrating-validation\">Integrating validation</a></li>\n<li><a class=\"reference internal\" href=\"#writing-your-own-validator\">Writing your own validator</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/auth/passwords", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}