{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../signing/", "title": "Cryptographic signing"}, "next": {"link": "../i18n/", "title": "Internationalization and localization"}, "title": "Sending email", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.core.mail\">\n<span id=\"s-sending-email\"></span><span id=\"module-django.core.mail\"></span><span id=\"sending-email\"></span><h1>Sending email<a class=\"headerlink\" href=\"#module-django.core.mail\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Although Python provides a mail sending interface via the <a class=\"reference external\" href=\"https://docs.python.org/3/library/smtplib.html#module-smtplib\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code></a>\nmodule, Django provides a couple of light wrappers over it. These wrappers are\nprovided to make sending email extra quick, to help test email sending during\ndevelopment, and to provide support for platforms that can\u2019t use SMTP.</p>\n<p>The code lives in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail</span></code> module.</p>\n<div class=\"section\" id=\"s-quick-example\">\n<span id=\"quick-example\"></span><h2>Quick example<a class=\"headerlink\" href=\"#quick-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In two lines:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">send_mail</span>\n\n<span class=\"n\">send_mail</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Subject here&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Here is the message.&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;to@example.com&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Mail is sent using the SMTP host and port specified in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_PORT</span></code></a> settings. The\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_USER</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_PASSWORD</span></code></a> settings, if\nset, are used to authenticate to the SMTP server, and the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_USE_TLS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_USE_TLS</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_USE_SSL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_USE_SSL</span></code></a> settings control whether\na secure connection is used.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The character set of email sent with <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail</span></code> will be set to\nthe value of your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a> setting.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-send-mail\">\n<span id=\"send-mail\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code><a class=\"headerlink\" href=\"#send-mail\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.send_mail\">\n<code class=\"sig-name descname\"><span class=\"pre\">send_mail</span></code>(<em><span class=\"n\"><span class=\"pre\">subject</span></span></em>, <em><span class=\"n\"><span class=\"pre\">message</span></span></em>, <em><span class=\"n\"><span class=\"pre\">from_email</span></span></em>, <em><span class=\"n\"><span class=\"pre\">recipient_list</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fail_silently</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">auth_user</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">auth_password</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html_message</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/mail/#send_mail\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.mail.send_mail\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>In most cases, you can send email using <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.send_mail()</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">subject</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">recipient_list</span></code> parameters\nare required.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">subject</span></code>: A string.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code>: A string.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code>: A string. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, Django will use the value of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEFAULT_FROM_EMAIL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_FROM_EMAIL</span></code></a> setting.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">recipient_list</span></code>: A list of strings, each an email address. Each\nmember of <code class=\"docutils literal notranslate\"><span class=\"pre\">recipient_list</span></code> will see the other recipients in the \u201cTo:\u201d\nfield of the email message.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">fail_silently</span></code>: A boolean. When it\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code> will raise\nan <a class=\"reference external\" href=\"https://docs.python.org/3/library/smtplib.html#smtplib.SMTPException\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">smtplib.SMTPException</span></code></a> if an error occurs. See the <a class=\"reference external\" href=\"https://docs.python.org/3/library/smtplib.html#module-smtplib\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">smtplib</span></code></a>\ndocs for a list of possible exceptions, all of which are subclasses of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/smtplib.html#smtplib.SMTPException\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SMTPException</span></code></a>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">auth_user</span></code>: The optional username to use to authenticate to the SMTP\nserver. If this isn\u2019t provided, Django will use the value of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_USER</span></code></a> setting.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">auth_password</span></code>: The optional password to use to authenticate to the\nSMTP server. If this isn\u2019t provided, Django will use the value of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_PASSWORD</span></code></a> setting.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code>: The optional email backend to use to send the mail.\nIf unspecified, an instance of the default backend will be used.\nSee the documentation on <a class=\"reference internal\" href=\"#topic-email-backends\"><span class=\"std std-ref\">Email backends</span></a>\nfor more details.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">html_message</span></code>: If <code class=\"docutils literal notranslate\"><span class=\"pre\">html_message</span></code> is provided, the resulting email will be a\n<em class=\"mimetype\">multipart/alternative</em> email with <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> as the\n<em class=\"mimetype\">text/plain</em> content type and <code class=\"docutils literal notranslate\"><span class=\"pre\">html_message</span></code> as the\n<em class=\"mimetype\">text/html</em> content type.</li>\n</ul>\n<p>The return value will be the number of successfully delivered messages (which\ncan be <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> since it can only send one message).</p>\n</div>\n<div class=\"section\" id=\"s-send-mass-mail\">\n<span id=\"send-mass-mail\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code><a class=\"headerlink\" href=\"#send-mass-mail\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.send_mass_mail\">\n<code class=\"sig-name descname\"><span class=\"pre\">send_mass_mail</span></code>(<em><span class=\"n\"><span class=\"pre\">datatuple</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fail_silently</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">auth_user</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">auth_password</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/mail/#send_mass_mail\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.mail.send_mass_mail\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.send_mass_mail()</span></code> is intended to handle mass emailing.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">datatuple</span></code> is a tuple in which each element is in this format:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"n\">recipient_list</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">fail_silently</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">auth_user</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">auth_password</span></code> have the same functions\nas in <a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a>.</p>\n<p>Each separate element of <code class=\"docutils literal notranslate\"><span class=\"pre\">datatuple</span></code> results in a separate email message.\nAs in <a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a>, recipients in the same\n<code class=\"docutils literal notranslate\"><span class=\"pre\">recipient_list</span></code> will all see the other addresses in the email messages\u2019\n\u201cTo:\u201d field.</p>\n<p>For example, the following code would send two different messages to\ntwo different sets of recipients; however, only one connection to the\nmail server would be opened:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">message1</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Subject here&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Here is the message&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;first@example.com&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;other@example.com&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">message2</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Another Subject&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Here is another message&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;second@test.com&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">send_mass_mail</span><span class=\"p\">((</span><span class=\"n\">message1</span><span class=\"p\">,</span> <span class=\"n\">message2</span><span class=\"p\">),</span> <span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The return value will be the number of successfully delivered messages.</p>\n<div class=\"section\" id=\"s-send-mass-mail-vs-send-mail\">\n<span id=\"send-mass-mail-vs-send-mail\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code> vs. <code class=\"docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code><a class=\"headerlink\" href=\"#send-mass-mail-vs-send-mail\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The main difference between <a class=\"reference internal\" href=\"#django.core.mail.send_mass_mail\" title=\"django.core.mail.send_mass_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code></a> and\n<a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> is that\n<a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> opens a connection to the mail server\neach time it\u2019s executed, while <a class=\"reference internal\" href=\"#django.core.mail.send_mass_mail\" title=\"django.core.mail.send_mass_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code></a> uses\na single connection for all of its messages. This makes\n<a class=\"reference internal\" href=\"#django.core.mail.send_mass_mail\" title=\"django.core.mail.send_mass_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code></a> slightly more efficient.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-mail-admins\">\n<span id=\"mail-admins\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">mail_admins()</span></code><a class=\"headerlink\" href=\"#mail-admins\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.mail_admins\">\n<code class=\"sig-name descname\"><span class=\"pre\">mail_admins</span></code>(<em><span class=\"n\"><span class=\"pre\">subject</span></span></em>, <em><span class=\"n\"><span class=\"pre\">message</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fail_silently</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html_message</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/mail/#mail_admins\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.mail.mail_admins\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.mail_admins()</span></code> is a shortcut for sending an email to the\nsite admins, as defined in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ADMINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ADMINS</span></code></a> setting.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">mail_admins()</span></code> prefixes the subject with the value of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_SUBJECT_PREFIX\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_SUBJECT_PREFIX</span></code></a> setting, which is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;[Django]</span> <span class=\"pre\">&quot;</span></code> by default.</p>\n<p>The \u201cFrom:\u201d header of the email will be the value of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SERVER_EMAIL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SERVER_EMAIL</span></code></a> setting.</p>\n<p>This method exists for convenience and readability.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">html_message</span></code> is provided, the resulting email will be a\n<em class=\"mimetype\">multipart/alternative</em> email with <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> as the\n<em class=\"mimetype\">text/plain</em> content type and <code class=\"docutils literal notranslate\"><span class=\"pre\">html_message</span></code> as the\n<em class=\"mimetype\">text/html</em> content type.</p>\n</div>\n<div class=\"section\" id=\"s-mail-managers\">\n<span id=\"mail-managers\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">mail_managers()</span></code><a class=\"headerlink\" href=\"#mail-managers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.mail_managers\">\n<code class=\"sig-name descname\"><span class=\"pre\">mail_managers</span></code>(<em><span class=\"n\"><span class=\"pre\">subject</span></span></em>, <em><span class=\"n\"><span class=\"pre\">message</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fail_silently</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html_message</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/mail/#mail_managers\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.mail.mail_managers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.mail_managers()</span></code> is just like <code class=\"docutils literal notranslate\"><span class=\"pre\">mail_admins()</span></code>, except it\nsends an email to the site managers, as defined in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MANAGERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MANAGERS</span></code></a>\nsetting.</p>\n</div>\n<div class=\"section\" id=\"s-examples\">\n<span id=\"examples\"></span><h2>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This sends a single email to <a class=\"reference external\" href=\"mailto:john&#37;&#52;&#48;example&#46;com\">john<span>&#64;</span>example<span>&#46;</span>com</a> and <a class=\"reference external\" href=\"mailto:jane&#37;&#52;&#48;example&#46;com\">jane<span>&#64;</span>example<span>&#46;</span>com</a>, with them\nboth appearing in the \u201cTo:\u201d:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">send_mail</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Subject&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Message.&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;john@example.com&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;jane@example.com&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This sends a message to <a class=\"reference external\" href=\"mailto:john&#37;&#52;&#48;example&#46;com\">john<span>&#64;</span>example<span>&#46;</span>com</a> and <a class=\"reference external\" href=\"mailto:jane&#37;&#52;&#48;example&#46;com\">jane<span>&#64;</span>example<span>&#46;</span>com</a>, with them both\nreceiving a separate email:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">datatuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;Subject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Message.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;john@example.com&quot;</span><span class=\"p\">]),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;Subject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Message.&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;jane@example.com&quot;</span><span class=\"p\">]),</span>\n<span class=\"p\">)</span>\n<span class=\"n\">send_mass_mail</span><span class=\"p\">(</span><span class=\"n\">datatuple</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-preventing-header-injection\">\n<span id=\"preventing-header-injection\"></span><h2>Preventing header injection<a class=\"headerlink\" href=\"#preventing-header-injection\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference external\" href=\"http://www.nyphp.org/phundamentals/8_Preventing-Email-Header-Injection.html\">Header injection</a> is a security exploit in which an attacker inserts extra\nemail headers to control the \u201cTo:\u201d and \u201cFrom:\u201d in email messages that your\nscripts generate.</p>\n<p>The Django email functions outlined above all protect against header injection\nby forbidding newlines in header values. If any <code class=\"docutils literal notranslate\"><span class=\"pre\">subject</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">recipient_list</span></code> contains a newline (in either Unix, Windows or Mac style),\nthe email function (e.g. <a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a>) will raise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.BadHeaderError</span></code> (a subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code>) and, hence,\nwill not send the email. It\u2019s your responsibility to validate all data before\npassing it to the email functions.</p>\n<p>If a <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> contains headers at the start of the string, the headers will\nbe printed as the first bit of the email message.</p>\n<p>Here\u2019s an example view that takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">subject</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code>\nfrom the request\u2019s POST data, sends that to <a class=\"reference external\" href=\"mailto:admin&#37;&#52;&#48;example&#46;com\">admin<span>&#64;</span>example<span>&#46;</span>com</a> and redirects to\n\u201c/contact/thanks/\u201d when it\u2019s done:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">BadHeaderError</span><span class=\"p\">,</span> <span class=\"n\">send_mail</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span><span class=\"p\">,</span> <span class=\"n\">HttpResponseRedirect</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">send_email</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;subject&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">from_email</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;from_email&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">subject</span> <span class=\"ow\">and</span> <span class=\"n\">message</span> <span class=\"ow\">and</span> <span class=\"n\">from_email</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">send_mail</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;admin@example.com&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"n\">BadHeaderError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid header found.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s2\">&quot;/contact/thanks/&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># In reality we&#39;d use a form class</span>\n        <span class=\"c1\"># to get proper validation errors.</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Make sure all fields are entered and valid.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-emailmessage-class\">\n<span id=\"s-emailmessage-and-smtpconnection\"></span><span id=\"the-emailmessage-class\"></span><span id=\"emailmessage-and-smtpconnection\"></span><h2>The <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code> class<a class=\"headerlink\" href=\"#the-emailmessage-class\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django\u2019s <a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> and\n<a class=\"reference internal\" href=\"#django.core.mail.send_mass_mail\" title=\"django.core.mail.send_mass_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code></a> functions are actually thin\nwrappers that make use of the <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> class.</p>\n<p>Not all features of the <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> class are\navailable through the <a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> and related\nwrapper functions. If you wish to use advanced features, such as BCC\u2019ed\nrecipients, file attachments, or multi-part email, you\u2019ll need to create\n<a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> instances directly.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This is a design feature. <a class=\"reference internal\" href=\"#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> and\nrelated functions were originally the only interface Django provided.\nHowever, the list of parameters they accepted was slowly growing over\ntime. It made sense to move to a more object-oriented design for email\nmessages and retain the original functions only for backwards\ncompatibility.</p>\n</div>\n<p><a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> is responsible for creating the email\nmessage itself. The <a class=\"reference internal\" href=\"#topic-email-backends\"><span class=\"std std-ref\">email backend</span></a> is then\nresponsible for sending the email.</p>\n<p>For convenience, <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> provides a <code class=\"docutils literal notranslate\"><span class=\"pre\">send()</span></code>\nmethod for sending a single email. If you need to send multiple messages, the\nemail backend API <a class=\"reference internal\" href=\"#topics-sending-multiple-emails\"><span class=\"std std-ref\">provides an alternative</span></a>.</p>\n<div class=\"section\" id=\"s-emailmessage-objects\">\n<span id=\"emailmessage-objects\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code> Objects<a class=\"headerlink\" href=\"#emailmessage-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.EmailMessage\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">EmailMessage</span></code><a class=\"reference internal\" href=\"../../_modules/django/core/mail/message/#EmailMessage\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.mail.EmailMessage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> class is initialized with the\nfollowing parameters (in the given order, if positional arguments are used).\nAll parameters are optional and can be set at any time prior to calling the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">send()</span></code> method.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">subject</span></code>: The subject line of the email.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">body</span></code>: The body text. This should be a plain text message.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">from_email</span></code>: The sender\u2019s address. Both <code class=\"docutils literal notranslate\"><span class=\"pre\">fred&#64;example.com</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Fred&quot;</span> <span class=\"pre\">&lt;fred&#64;example.com&gt;</span></code> forms are legal. If omitted, the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEFAULT_FROM_EMAIL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_FROM_EMAIL</span></code></a> setting is used.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">to</span></code>: A list or tuple of recipient addresses.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">bcc</span></code>: A list or tuple of addresses used in the \u201cBcc\u201d header when\nsending the email.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code>: An email backend instance. Use this parameter if\nyou want to use the same connection for multiple messages. If omitted, a\nnew connection is created when <code class=\"docutils literal notranslate\"><span class=\"pre\">send()</span></code> is called.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">attachments</span></code>: A list of attachments to put on the message. These can\nbe either <a class=\"reference external\" href=\"https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MIMEBase</span></code></a> instances, or <code class=\"docutils literal notranslate\"><span class=\"pre\">(filename,</span>\n<span class=\"pre\">content,</span> <span class=\"pre\">mimetype)</span></code> triples.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>: A dictionary of extra headers to put on the message. The\nkeys are the header name, values are the header values. It\u2019s up to the\ncaller to ensure header names and values are in the correct format for\nan email message. The corresponding attribute is <code class=\"docutils literal notranslate\"><span class=\"pre\">extra_headers</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">cc</span></code>: A list or tuple of recipient addresses used in the \u201cCc\u201d header\nwhen sending the email.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">reply_to</span></code>: A list or tuple of recipient addresses used in the \u201cReply-To\u201d\nheader when sending the email.</li>\n</ul>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">EmailMessage</span>\n\n<span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">EmailMessage</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Body goes here&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;to1@example.com&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;to2@example.com&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;bcc@example.com&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">reply_to</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;another@example.com&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Message-ID&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The class has the following methods:</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">send(fail_silently=False)</span></code> sends the message. If a connection was\nspecified when the email was constructed, that connection will be used.\nOtherwise, an instance of the default backend will be instantiated and\nused. If the keyword argument <code class=\"docutils literal notranslate\"><span class=\"pre\">fail_silently</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, exceptions\nraised while sending the message will be quashed. An empty list of\nrecipients will not raise an exception. It will return <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> if the message\nwas sent successfully, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">message()</span></code> constructs a <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.SafeMIMEText</span></code> object (a\nsubclass of Python\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/email.mime.html#email.mime.text.MIMEText\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MIMEText</span></code></a> class) or a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.SafeMIMEMultipart</span></code> object holding the message to be\nsent. If you ever need to extend the\n<a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> class, you\u2019ll probably want to\noverride this method to put the content you want into the MIME object.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">recipients()</span></code> returns a list of all the recipients of the message,\nwhether they\u2019re recorded in the <code class=\"docutils literal notranslate\"><span class=\"pre\">to</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">cc</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">bcc</span></code> attributes. This\nis another method you might need to override when subclassing, because the\nSMTP server needs to be told the full list of recipients when the message\nis sent. If you add another way to specify recipients in your class, they\nneed to be returned from this method as well.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">attach()</span></code> creates a new file attachment and adds it to the message.\nThere are two ways to call <code class=\"docutils literal notranslate\"><span class=\"pre\">attach()</span></code>:</p>\n<ul>\n<li><p class=\"first\">You can pass it a single argument that is a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MIMEBase</span></code></a> instance. This will be inserted directly\ninto the resulting message.</p>\n</li>\n<li><p class=\"first\">Alternatively, you can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">attach()</span></code> three arguments:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">filename</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">content</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">mimetype</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">filename</span></code> is the name\nof the file attachment as it will appear in the email, <code class=\"docutils literal notranslate\"><span class=\"pre\">content</span></code> is\nthe data that will be contained inside the attachment and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mimetype</span></code> is the optional MIME type for the attachment. If you\nomit <code class=\"docutils literal notranslate\"><span class=\"pre\">mimetype</span></code>, the MIME content type will be guessed from the\nfilename of the attachment.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"s2\">&quot;design.png&quot;</span><span class=\"p\">,</span> <span class=\"n\">img_data</span><span class=\"p\">,</span> <span class=\"s2\">&quot;image/png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you specify a <code class=\"docutils literal notranslate\"><span class=\"pre\">mimetype</span></code> of <em class=\"mimetype\">message/rfc822</em>, it will also\naccept <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.core.mail.EmailMessage</span></code></a> and\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/email.compat32-message.html#email.message.Message\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">email.message.Message</span></code></a>.</p>\n<p>For a <code class=\"docutils literal notranslate\"><span class=\"pre\">mimetype</span></code> starting with <em class=\"mimetype\">text/</em>, content is expected to\nbe a string. Binary data will be decoded using UTF-8, and if that fails,\nthe MIME type will be changed to <em class=\"mimetype\">application/octet-stream</em> and\nthe data will be attached unchanged.</p>\n<p>In addition, <em class=\"mimetype\">message/rfc822</em> attachments will no longer be\nbase64-encoded in violation of <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc2046.html#section-5.2.1\"><strong>RFC 2046#section-5.2.1</strong></a>, which can cause\nissues with displaying the attachments in <a class=\"reference external\" href=\"https://bugzilla.gnome.org/show_bug.cgi?id=651197\">Evolution</a> and <a class=\"reference external\" href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=333880\">Thunderbird</a>.</p>\n</li>\n</ul>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">attach_file()</span></code> creates a new attachment using a file from your\nfilesystem. Call it with the path of the file to attach and, optionally,\nthe MIME type to use for the attachment. If the MIME type is omitted, it\nwill be guessed from the filename. You can use it like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">message</span><span class=\"o\">.</span><span class=\"n\">attach_file</span><span class=\"p\">(</span><span class=\"s2\">&quot;/images/weather_map.png&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For MIME types starting with <em class=\"mimetype\">text/</em>, binary data is handled as in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">attach()</span></code>.</p>\n</li>\n</ul>\n<div class=\"section\" id=\"s-sending-alternative-content-types\">\n<span id=\"sending-alternative-content-types\"></span><h4>Sending alternative content types<a class=\"headerlink\" href=\"#sending-alternative-content-types\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>It can be useful to include multiple versions of the content in an email; the\nclassic example is to send both text and HTML versions of a message. With\nDjango\u2019s email library, you can do this using the <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailMultiAlternatives</span></code>\nclass. This subclass of <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> has an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">attach_alternative()</span></code> method for including extra versions of the message\nbody in the email. All the other methods (including the class initialization)\nare inherited directly from <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a>.</p>\n<p>To send a text and HTML combination, you could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">EmailMultiAlternatives</span>\n\n<span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;hello&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;to@example.com&quot;</span>\n<span class=\"n\">text_content</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is an important message.&quot;</span>\n<span class=\"n\">html_content</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;p&gt;This is an &lt;strong&gt;important&lt;/strong&gt; message.&lt;/p&gt;&quot;</span>\n<span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">EmailMultiAlternatives</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">text_content</span><span class=\"p\">,</span> <span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">to</span><span class=\"p\">])</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">attach_alternative</span><span class=\"p\">(</span><span class=\"n\">html_content</span><span class=\"p\">,</span> <span class=\"s2\">&quot;text/html&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>By default, the MIME type of the <code class=\"docutils literal notranslate\"><span class=\"pre\">body</span></code> parameter in an\n<a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;text/plain&quot;</span></code>. It is good\npractice to leave this alone, because it guarantees that any recipient will be\nable to read the email, regardless of their mail client. However, if you are\nconfident that your recipients can handle an alternative content type, you can\nuse the <code class=\"docutils literal notranslate\"><span class=\"pre\">content_subtype</span></code> attribute on the\n<a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> class to change the main content type.\nThe major type will always be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;text&quot;</span></code>, but you can change the\nsubtype. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">EmailMessage</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">html_content</span><span class=\"p\">,</span> <span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">to</span><span class=\"p\">])</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">content_subtype</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;html&quot;</span>  <span class=\"c1\"># Main content is now text/html</span>\n<span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-email-backends\">\n<span id=\"s-topic-email-backends\"></span><span id=\"email-backends\"></span><span id=\"topic-email-backends\"></span><h2>Email backends<a class=\"headerlink\" href=\"#email-backends\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The actual sending of an email is handled by the email backend.</p>\n<p>The email backend class has the following methods:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">open()</span></code> instantiates a long-lived email-sending connection.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">close()</span></code> closes the current email-sending connection.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">send_messages(email_messages)</span></code> sends a list of\n<a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> objects. If the connection is\nnot open, this call will implicitly open the connection, and close the\nconnection afterward. If the connection is already open, it will be\nleft open after mail has been sent.</li>\n</ul>\n<p>It can also be used as a context manager, which will automatically call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">open()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">close()</span></code> as needed:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">mail</span>\n\n<span class=\"k\">with</span> <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">get_connection</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n    <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">EmailMessage</span><span class=\"p\">(</span>\n        <span class=\"n\">subject1</span><span class=\"p\">,</span>\n        <span class=\"n\">body1</span><span class=\"p\">,</span>\n        <span class=\"n\">from1</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">to1</span><span class=\"p\">],</span>\n        <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n    <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">EmailMessage</span><span class=\"p\">(</span>\n        <span class=\"n\">subject2</span><span class=\"p\">,</span>\n        <span class=\"n\">body2</span><span class=\"p\">,</span>\n        <span class=\"n\">from2</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">to2</span><span class=\"p\">],</span>\n        <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-obtaining-an-instance-of-an-email-backend\">\n<span id=\"obtaining-an-instance-of-an-email-backend\"></span><h3>Obtaining an instance of an email backend<a class=\"headerlink\" href=\"#obtaining-an-instance-of-an-email-backend\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"#django.core.mail.get_connection\" title=\"django.core.mail.get_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_connection()</span></code></a> function in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail</span></code> returns an\ninstance of the email backend that you can use.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.get_connection\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_connection</span></code>(<em><span class=\"n\"><span class=\"pre\">backend</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fail_silently</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/mail/#get_connection\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.mail.get_connection\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>By default, a call to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_connection()</span></code> will return an instance of the\nemail backend specified in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_BACKEND\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_BACKEND</span></code></a>. If you specify the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">backend</span></code> argument, an instance of that backend will be instantiated.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">fail_silently</span></code> argument controls how the backend should handle errors.\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">fail_silently</span></code> is True, exceptions during the email sending process\nwill be silently ignored.</p>\n<p>All other arguments are passed directly to the constructor of the\nemail backend.</p>\n<p>Django ships with several email sending backends. With the exception of the\nSMTP backend (which is the default), these backends are only useful during\ntesting and development. If you have special email sending requirements, you\ncan <a class=\"reference internal\" href=\"#topic-custom-email-backend\"><span class=\"std std-ref\">write your own email backend</span></a>.</p>\n<div class=\"section\" id=\"s-smtp-backend\">\n<span id=\"s-topic-email-smtp-backend\"></span><span id=\"smtp-backend\"></span><span id=\"topic-email-smtp-backend\"></span><h4>SMTP backend<a class=\"headerlink\" href=\"#smtp-backend\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.backends.smtp.EmailBackend\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">backends.smtp.</span></code><code class=\"sig-name descname\"><span class=\"pre\">EmailBackend</span></code>(<em><span class=\"n\"><span class=\"pre\">host</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">port</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">username</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">password</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">use_tls</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fail_silently</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">use_ssl</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">timeout</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">ssl_keyfile</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">ssl_certfile</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.core.mail.backends.smtp.EmailBackend\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is the default backend. Email will be sent through a SMTP server.</p>\n<p>The value for each argument is retrieved from the matching setting if the\nargument is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">host</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">port</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_PORT</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">username</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_USER</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">password</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_PASSWORD</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">use_tls</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_USE_TLS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_USE_TLS</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">use_ssl</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_USE_SSL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_USE_SSL</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">timeout</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_TIMEOUT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_TIMEOUT</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ssl_keyfile</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_SSL_KEYFILE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_SSL_KEYFILE</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ssl_certfile</span></code>: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_SSL_CERTFILE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_SSL_CERTFILE</span></code></a></li>\n</ul>\n<p>The SMTP backend is the default configuration inherited by Django. If you\nwant to specify it explicitly, put the following in your settings:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">EMAIL_BACKEND</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.core.mail.backends.smtp.EmailBackend&quot;</span>\n</pre></div>\n</div>\n<p>If unspecified, the default <code class=\"docutils literal notranslate\"><span class=\"pre\">timeout</span></code> will be the one provided by\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/socket.html#socket.getdefaulttimeout\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">socket.getdefaulttimeout()</span></code></a>, which defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (no timeout).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-console-backend\">\n<span id=\"s-topic-email-console-backend\"></span><span id=\"console-backend\"></span><span id=\"topic-email-console-backend\"></span><h4>Console backend<a class=\"headerlink\" href=\"#console-backend\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Instead of sending out real emails the console backend just writes the\nemails that would be sent to the standard output. By default, the console\nbackend writes to <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>. You can use a different stream-like object by\nproviding the <code class=\"docutils literal notranslate\"><span class=\"pre\">stream</span></code> keyword argument when constructing the connection.</p>\n<p>To specify this backend, put the following in your settings:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">EMAIL_BACKEND</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.core.mail.backends.console.EmailBackend&quot;</span>\n</pre></div>\n</div>\n<p>This backend is not intended for use in production \u2013 it is provided as a\nconvenience that can be used during development.</p>\n</div>\n<div class=\"section\" id=\"s-file-backend\">\n<span id=\"s-topic-email-file-backend\"></span><span id=\"file-backend\"></span><span id=\"topic-email-file-backend\"></span><h4>File backend<a class=\"headerlink\" href=\"#file-backend\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The file backend writes emails to a file. A new file is created for each new\nsession that is opened on this backend. The directory to which the files are\nwritten is either taken from the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_FILE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_FILE_PATH</span></code></a> setting or from\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">file_path</span></code> keyword when creating a connection with\n<a class=\"reference internal\" href=\"#django.core.mail.get_connection\" title=\"django.core.mail.get_connection\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_connection()</span></code></a>.</p>\n<p>To specify this backend, put the following in your settings:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">EMAIL_BACKEND</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.core.mail.backends.filebased.EmailBackend&quot;</span>\n<span class=\"n\">EMAIL_FILE_PATH</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/tmp/app-messages&quot;</span>  <span class=\"c1\"># change this to a proper location</span>\n</pre></div>\n</div>\n<p>This backend is not intended for use in production \u2013 it is provided as a\nconvenience that can be used during development.</p>\n</div>\n<div class=\"section\" id=\"s-in-memory-backend\">\n<span id=\"s-topic-email-memory-backend\"></span><span id=\"in-memory-backend\"></span><span id=\"topic-email-memory-backend\"></span><h4>In-memory backend<a class=\"headerlink\" href=\"#in-memory-backend\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">'locmem'</span></code> backend stores messages in a special attribute of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail</span></code> module. The <code class=\"docutils literal notranslate\"><span class=\"pre\">outbox</span></code> attribute is created when the\nfirst message is sent. It\u2019s a list with an\n<a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> instance for each message that would\nbe sent.</p>\n<p>To specify this backend, put the following in your settings:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">EMAIL_BACKEND</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.core.mail.backends.locmem.EmailBackend&quot;</span>\n</pre></div>\n</div>\n<p>This backend is not intended for use in production \u2013 it is provided as a\nconvenience that can be used during development and testing.</p>\n<p>Django\u2019s test runner <a class=\"reference internal\" href=\"../testing/tools/#topics-testing-email\"><span class=\"std std-ref\">automatically uses this backend for testing</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-dummy-backend\">\n<span id=\"s-topic-email-dummy-backend\"></span><span id=\"dummy-backend\"></span><span id=\"topic-email-dummy-backend\"></span><h4>Dummy backend<a class=\"headerlink\" href=\"#dummy-backend\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>As the name suggests the dummy backend does nothing with your messages. To\nspecify this backend, put the following in your settings:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">EMAIL_BACKEND</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.core.mail.backends.dummy.EmailBackend&quot;</span>\n</pre></div>\n</div>\n<p>This backend is not intended for use in production \u2013 it is provided as a\nconvenience that can be used during development.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-defining-a-custom-email-backend\">\n<span id=\"s-topic-custom-email-backend\"></span><span id=\"defining-a-custom-email-backend\"></span><span id=\"topic-custom-email-backend\"></span><h3>Defining a custom email backend<a class=\"headerlink\" href=\"#defining-a-custom-email-backend\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you need to change how emails are sent you can write your own email\nbackend. The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_BACKEND\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_BACKEND</span></code></a> setting in your settings file is then\nthe Python import path for your backend class.</p>\n<p>Custom email backends should subclass <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseEmailBackend</span></code> that is located in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.backends.base</span></code> module. A custom email backend must\nimplement the <code class=\"docutils literal notranslate\"><span class=\"pre\">send_messages(email_messages)</span></code> method. This method receives a\nlist of <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> instances and returns the\nnumber of successfully delivered messages. If your backend has any concept of\na persistent session or connection, you should also implement the <code class=\"docutils literal notranslate\"><span class=\"pre\">open()</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">close()</span></code> methods. Refer to <code class=\"docutils literal notranslate\"><span class=\"pre\">smtp.EmailBackend</span></code> for a reference\nimplementation.</p>\n</div>\n<div class=\"section\" id=\"s-sending-multiple-emails\">\n<span id=\"s-topics-sending-multiple-emails\"></span><span id=\"sending-multiple-emails\"></span><span id=\"topics-sending-multiple-emails\"></span><h3>Sending multiple emails<a class=\"headerlink\" href=\"#sending-multiple-emails\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Establishing and closing an SMTP connection (or any other network connection,\nfor that matter) is an expensive process. If you have a lot of emails to send,\nit makes sense to reuse an SMTP connection, rather than creating and\ndestroying a connection every time you want to send an email.</p>\n<p>There are two ways you tell an email backend to reuse a connection.</p>\n<p>Firstly, you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">send_messages()</span></code> method. <code class=\"docutils literal notranslate\"><span class=\"pre\">send_messages()</span></code> takes\na list of <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> instances (or subclasses),\nand sends them all using a single connection.</p>\n<p>For example, if you have a function called <code class=\"docutils literal notranslate\"><span class=\"pre\">get_notification_email()</span></code> that\nreturns a list of <a class=\"reference internal\" href=\"#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> objects representing\nsome periodic email you wish to send out, you could send these emails using\na single call to send_messages:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">mail</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">get_connection</span><span class=\"p\">()</span>  <span class=\"c1\"># Use default email connection</span>\n<span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"n\">get_notification_email</span><span class=\"p\">()</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">(</span><span class=\"n\">messages</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In this example, the call to <code class=\"docutils literal notranslate\"><span class=\"pre\">send_messages()</span></code> opens a connection on the\nbackend, sends the list of messages, and then closes the connection again.</p>\n<p>The second approach is to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">open()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">close()</span></code> methods on the\nemail backend to manually control the connection. <code class=\"docutils literal notranslate\"><span class=\"pre\">send_messages()</span></code> will not\nmanually open or close the connection if it is already open, so if you\nmanually open the connection, you can control when it is closed. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">mail</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">get_connection</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Manually open the connection</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Construct an email message that uses the connection</span>\n<span class=\"n\">email1</span> <span class=\"o\">=</span> <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">EmailMessage</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Body goes here&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;to1@example.com&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">email1</span><span class=\"o\">.</span><span class=\"n\">send</span><span class=\"p\">()</span>  <span class=\"c1\"># Send the email</span>\n\n<span class=\"c1\"># Construct two more messages</span>\n<span class=\"n\">email2</span> <span class=\"o\">=</span> <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">EmailMessage</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Body goes here&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;to2@example.com&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n<span class=\"n\">email3</span> <span class=\"o\">=</span> <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">EmailMessage</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Body goes here&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">[</span><span class=\"s2\">&quot;to3@example.com&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Send the two emails in a single call -</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">send_messages</span><span class=\"p\">([</span><span class=\"n\">email2</span><span class=\"p\">,</span> <span class=\"n\">email3</span><span class=\"p\">])</span>\n<span class=\"c1\"># The connection was already open so send_messages() doesn&#39;t close it.</span>\n<span class=\"c1\"># We need to manually close the connection.</span>\n<span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-configuring-email-for-development\">\n<span id=\"configuring-email-for-development\"></span><h2>Configuring email for development<a class=\"headerlink\" href=\"#configuring-email-for-development\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are times when you do not want Django to send emails at\nall. For example, while developing a website, you probably don\u2019t want\nto send out thousands of emails \u2013 but you may want to validate that\nemails will be sent to the right people under the right conditions,\nand that those emails will contain the correct content.</p>\n<p>The easiest way to configure email for local development is to use the\n<a class=\"reference internal\" href=\"#topic-email-console-backend\"><span class=\"std std-ref\">console</span></a> email backend. This backend\nredirects all email to <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>, allowing you to inspect the content of mail.</p>\n<p>The <a class=\"reference internal\" href=\"#topic-email-file-backend\"><span class=\"std std-ref\">file</span></a> email backend can also be useful\nduring development \u2013 this backend dumps the contents of every SMTP connection\nto a file that can be inspected at your leisure.</p>\n<p>Another approach is to use a \u201cdumb\u201d SMTP server that receives the emails\nlocally and displays them to the terminal, but does not actually send\nanything. The <a class=\"reference external\" href=\"https://aiosmtpd.readthedocs.io/en/latest/\">aiosmtpd</a> package provides a way to accomplish this:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>python -m pip install aiosmtpd\n\npython -m aiosmtpd -n -l localhost:8025\n</pre></div>\n</div>\n<p>This command will start a minimal SMTP server listening on port 8025 of\nlocalhost. This server prints to standard output all email headers and the\nemail body. You then only need to set the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_PORT</span></code></a> accordingly. For a more detailed discussion of SMTP\nserver options, see the documentation of the <a class=\"reference external\" href=\"https://aiosmtpd.readthedocs.io/en/latest/\">aiosmtpd</a> module.</p>\n<p>For information about unit-testing the sending of emails in your application,\nsee the <a class=\"reference internal\" href=\"../testing/tools/#topics-testing-email\"><span class=\"std std-ref\">Email services</span></a> section of the testing documentation.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/i18n/index", "Internationalization and localization", "N", "next"], ["topics/signing", "Cryptographic signing", "P", "previous"]], "sourcename": "topics/email.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Sending email</a><ul>\n<li><a class=\"reference internal\" href=\"#quick-example\">Quick example</a></li>\n<li><a class=\"reference internal\" href=\"#send-mail\"><code class=\"docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#send-mass-mail\"><code class=\"docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#send-mass-mail-vs-send-mail\"><code class=\"docutils literal notranslate\"><span class=\"pre\">send_mass_mail()</span></code> vs. <code class=\"docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mail-admins\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mail_admins()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mail-managers\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mail_managers()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n<li><a class=\"reference internal\" href=\"#preventing-header-injection\">Preventing header injection</a></li>\n<li><a class=\"reference internal\" href=\"#the-emailmessage-class\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code> class</a><ul>\n<li><a class=\"reference internal\" href=\"#emailmessage-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code> Objects</a><ul>\n<li><a class=\"reference internal\" href=\"#sending-alternative-content-types\">Sending alternative content types</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#email-backends\">Email backends</a><ul>\n<li><a class=\"reference internal\" href=\"#obtaining-an-instance-of-an-email-backend\">Obtaining an instance of an email backend</a><ul>\n<li><a class=\"reference internal\" href=\"#smtp-backend\">SMTP backend</a></li>\n<li><a class=\"reference internal\" href=\"#console-backend\">Console backend</a></li>\n<li><a class=\"reference internal\" href=\"#file-backend\">File backend</a></li>\n<li><a class=\"reference internal\" href=\"#in-memory-backend\">In-memory backend</a></li>\n<li><a class=\"reference internal\" href=\"#dummy-backend\">Dummy backend</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#defining-a-custom-email-backend\">Defining a custom email backend</a></li>\n<li><a class=\"reference internal\" href=\"#sending-multiple-emails\">Sending multiple emails</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#configuring-email-for-development\">Configuring email for development</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/email", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}