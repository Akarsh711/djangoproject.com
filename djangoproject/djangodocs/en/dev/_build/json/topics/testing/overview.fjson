{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Testing in Django"}], "prev": {"link": "../", "title": "Testing in Django"}, "next": {"link": "../tools/", "title": "Testing tools"}, "title": "Writing and running tests", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.test\">\n<span id=\"s-writing-and-running-tests\"></span><span id=\"module-django.test\"></span><span id=\"writing-and-running-tests\"></span><h1>Writing and running tests<a class=\"headerlink\" href=\"#module-django.test\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">The <a class=\"reference internal\" href=\"../../../intro/tutorial05/\"><span class=\"doc\">testing tutorial</span></a>, the <a class=\"reference internal\" href=\"../tools/\"><span class=\"doc\">testing tools\nreference</span></a>, and the <a class=\"reference internal\" href=\"../advanced/\"><span class=\"doc\">advanced testing topics</span></a>.</p>\n</div>\n<p>This document is split into two primary sections. First, we explain how to write\ntests with Django. Then, we explain how to run them.</p>\n<div class=\"section\" id=\"s-writing-tests\">\n<span id=\"writing-tests\"></span><h2>Writing tests<a class=\"headerlink\" href=\"#writing-tests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django\u2019s unit tests use a Python standard library module: <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a>. This\nmodule defines tests using a class-based approach.</p>\n<p>Here is an example which subclasses from <a class=\"reference internal\" href=\"../tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a>,\nwhich is a subclass of <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a> that runs each test inside a\ntransaction to provide isolation:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Animal</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AnimalTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">Animal</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;lion&quot;</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s2\">&quot;roar&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">Animal</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cat&quot;</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s2\">&quot;meow&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_animals_can_speak</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Animals that can speak are correctly identified&quot;&quot;&quot;</span>\n        <span class=\"n\">lion</span> <span class=\"o\">=</span> <span class=\"n\">Animal</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;lion&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">cat</span> <span class=\"o\">=</span> <span class=\"n\">Animal</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cat&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">lion</span><span class=\"o\">.</span><span class=\"n\">speak</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;The lion says &quot;roar&quot;&#39;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">cat</span><span class=\"o\">.</span><span class=\"n\">speak</span><span class=\"p\">(),</span> <span class=\"s1\">&#39;The cat says &quot;meow&quot;&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>When you <a class=\"reference internal\" href=\"#running-tests\"><span class=\"std std-ref\">run your tests</span></a>, the default behavior of the\ntest utility is to find all the test cases (that is, subclasses of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a>) in any file whose name begins with <code class=\"docutils literal notranslate\"><span class=\"pre\">test</span></code>,\nautomatically build a test suite out of those test cases, and run that suite.</p>\n<p>For more details about <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a>, see the Python documentation.</p>\n<div class=\"admonition-where-should-the-tests-live admonition\">\n<p class=\"first admonition-title\">Where should the tests live?</p>\n<p>The default <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-startapp\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startapp</span></code></a> template creates a <code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code> file in the\nnew application. This might be fine if you only have a few tests, but as\nyour test suite grows you\u2019ll likely want to restructure it into a tests\npackage so you can split your tests into different submodules such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">test_models.py</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">test_views.py</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">test_forms.py</span></code>, etc. Feel free to\npick whatever organizational scheme you like.</p>\n<p class=\"last\">See also <a class=\"reference internal\" href=\"../advanced/#testing-reusable-applications\"><span class=\"std std-ref\">Using the Django test runner to test reusable applications</span></a>.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>If your tests rely on database access such as creating or querying models,\nbe sure to create your test classes as subclasses of\n<a class=\"reference internal\" href=\"../tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a> rather than <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a>.</p>\n<p class=\"last\">Using <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a> avoids the cost of running each test in a\ntransaction and flushing the database, but if your tests interact with\nthe database their behavior will vary based on the order that the test\nrunner executes them. This can lead to unit tests that pass when run in\nisolation but fail when run in a suite.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-running-tests\">\n<span id=\"s-id1\"></span><span id=\"running-tests\"></span><span id=\"id1\"></span><h2>Running tests<a class=\"headerlink\" href=\"#running-tests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once you\u2019ve written tests, run them using the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-test\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">test</span></code></a> command of\nyour project\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> utility:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ ./manage.py <span class=\"nb\">test</span>\n</pre></div>\n</div>\n<p>Test discovery is based on the unittest module\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest-test-discovery\" title=\"(in Python v3.11)\"><span class=\"xref std std-ref\">built-in test\ndiscovery</span></a>.  By default, this will discover tests in\nany file named <code class=\"docutils literal notranslate\"><span class=\"pre\">test*.py</span></code> under the current working directory.</p>\n<p>You can specify particular tests to run by supplying any number of \u201ctest\nlabels\u201d to <code class=\"docutils literal notranslate\"><span class=\"pre\">./manage.py</span> <span class=\"pre\">test</span></code>. Each test label can be a full Python dotted\npath to a package, module, <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> subclass, or test method. For instance:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Run all the tests in the animals.tests module</span>\n$ ./manage.py <span class=\"nb\">test</span> animals.tests\n\n<span class=\"c1\"># Run all the tests found within the &#39;animals&#39; package</span>\n$ ./manage.py <span class=\"nb\">test</span> animals\n\n<span class=\"c1\"># Run just one test case</span>\n$ ./manage.py <span class=\"nb\">test</span> animals.tests.AnimalTestCase\n\n<span class=\"c1\"># Run just one test method</span>\n$ ./manage.py <span class=\"nb\">test</span> animals.tests.AnimalTestCase.test_animals_can_speak\n</pre></div>\n</div>\n<p>You can also provide a path to a directory to discover tests below that\ndirectory:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ ./manage.py <span class=\"nb\">test</span> animals/\n</pre></div>\n</div>\n<p>You can specify a custom filename pattern match using the <code class=\"docutils literal notranslate\"><span class=\"pre\">-p</span></code> (or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--pattern</span></code>) option, if your test files are named differently from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">test*.py</span></code> pattern:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ ./manage.py <span class=\"nb\">test</span> --pattern<span class=\"o\">=</span><span class=\"s2\">&quot;tests_*.py&quot;</span>\n</pre></div>\n</div>\n<p>If you press <code class=\"docutils literal notranslate\"><span class=\"pre\">Ctrl-C</span></code> while the tests are running, the test runner will\nwait for the currently running test to complete and then exit gracefully.\nDuring a graceful exit the test runner will output details of any test\nfailures, report on how many tests were run and how many errors and failures\nwere encountered, and destroy any test databases as usual. Thus pressing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Ctrl-C</span></code> can be very useful if you forget to pass the <a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-failfast\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--failfast</span></code></a> option, notice that some tests are unexpectedly failing and\nwant to get details on the failures without waiting for the full test run to\ncomplete.</p>\n<p>If you do not want to wait for the currently running test to finish, you\ncan press <code class=\"docutils literal notranslate\"><span class=\"pre\">Ctrl-C</span></code> a second time and the test run will halt immediately,\nbut not gracefully. No details of the tests run before the interruption will\nbe reported, and any test databases created by the run will not be destroyed.</p>\n<div class=\"admonition-test-with-warnings-enabled admonition\">\n<p class=\"first admonition-title\">Test with warnings enabled</p>\n<p class=\"last\">It\u2019s a good idea to run your tests with Python warnings enabled:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-Wa</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">test</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">-Wa</span></code> flag tells Python to\ndisplay deprecation warnings. Django, like many other Python libraries,\nuses these warnings to flag when features are going away. It also might\nflag areas in your code that aren\u2019t strictly wrong but could benefit\nfrom a better implementation.</p>\n</div>\n<div class=\"section\" id=\"s-the-test-database\">\n<span id=\"s-id2\"></span><span id=\"the-test-database\"></span><span id=\"id2\"></span><h3>The test database<a class=\"headerlink\" href=\"#the-test-database\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Tests that require a database (namely, model tests) will not use your \u201creal\u201d\n(production) database. Separate, blank databases are created for the tests.</p>\n<p>Regardless of whether the tests pass or fail, the test databases are destroyed\nwhen all the tests have been executed.</p>\n<p>You can prevent the test databases from being destroyed by using the\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-keepdb\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">--keepdb</span></code></a> option. This will preserve the test database between\nruns. If the database does not exist, it will first be created. Any migrations\nwill also be applied in order to keep it up to date.</p>\n<p>As described in the previous section, if a test run is forcefully interrupted,\nthe test database may not be destroyed. On the next run, you\u2019ll be asked\nwhether you want to reuse or destroy the database. Use the <a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-noinput\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span>\n<span class=\"pre\">--noinput</span></code></a> option to suppress that prompt and automatically destroy the\ndatabase. This can be useful when running tests on a continuous integration\nserver where tests may be interrupted by a timeout, for example.</p>\n<p>The default test database names are created by prepending <code class=\"docutils literal notranslate\"><span class=\"pre\">test_</span></code> to the\nvalue of each <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>. When using SQLite, the\ntests will use an in-memory database by default (i.e., the database will be\ncreated in memory, bypassing the filesystem entirely!). The <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASE-TEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST</span></code></a> dictionary in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> offers a number of settings\nto configure your test database. For example, if you want to use a different\ndatabase name, specify <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> in the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASE-TEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST</span></code></a> dictionary for any given database in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>.</p>\n<p>On PostgreSQL, <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a> will also need read access to the built-in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">postgres</span></code> database.</p>\n<p>Aside from using a separate database, the test runner will otherwise\nuse all of the same database settings you have in your settings file:\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASE-ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ENGINE</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a>, etc. The\ntest database is created by the user specified by <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a>, so you\u2019ll\nneed to make sure that the given user account has sufficient privileges to\ncreate a new database on the system.</p>\n<p>For fine-grained control over the character encoding of your test\ndatabase, use the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CHARSET</span></code></a> TEST option. If you\u2019re using\nMySQL, you can also use the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_COLLATION\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">COLLATION</span></code></a> option to\ncontrol the particular collation used by the test database. See the\n<a class=\"reference internal\" href=\"../../../ref/settings/\"><span class=\"doc\">settings documentation</span></a> for details of these\nand other advanced settings.</p>\n<p>If using an SQLite in-memory database with SQLite, <a class=\"reference external\" href=\"https://www.sqlite.org/sharedcache.html\">shared cache</a> is enabled, so you can write tests\nwith ability to share the database between threads.</p>\n<div class=\"admonition-finding-data-from-your-production-database-when-running-tests admonition\">\n<p class=\"first admonition-title\">Finding data from your production database when running tests?</p>\n<p>If your code attempts to access the database when its modules are compiled,\nthis will occur <em>before</em> the test database is set up, with potentially\nunexpected results. For example, if you have a database query in\nmodule-level code and a real database exists, production data could pollute\nyour tests. <em>It is a bad idea to have such import-time database queries in\nyour code</em> anyway - rewrite your code so that it doesn\u2019t do this.</p>\n<p class=\"last\">This also applies to customized implementations of\n<a class=\"reference internal\" href=\"../../../ref/applications/#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ready()</span></code></a>.</p>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">The <a class=\"reference internal\" href=\"../advanced/#topics-testing-advanced-multidb\"><span class=\"std std-ref\">advanced multi-db testing topics</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-order-in-which-tests-are-executed\">\n<span id=\"s-order-of-tests\"></span><span id=\"order-in-which-tests-are-executed\"></span><span id=\"order-of-tests\"></span><h3>Order in which tests are executed<a class=\"headerlink\" href=\"#order-in-which-tests-are-executed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In order to guarantee that all <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> code starts with a clean database,\nthe Django test runner reorders tests in the following way:</p>\n<ul class=\"simple\">\n<li>All <a class=\"reference internal\" href=\"../tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> subclasses are run first.</li>\n<li>Then, all other Django-based tests (test cases based on\n<a class=\"reference internal\" href=\"../tools/#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a>, including\n<a class=\"reference internal\" href=\"../tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a>) are run with no particular\nordering guaranteed nor enforced among them.</li>\n<li>Then any other <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a> tests (including doctests) that may\nalter the database without restoring it to its original state are run.</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The new ordering of tests may reveal unexpected dependencies on test case\nordering. This is the case with doctests that relied on state left in the\ndatabase by a given <a class=\"reference internal\" href=\"../tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> test, they\nmust be updated to be able to run independently.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Failures detected when loading tests are ordered before all of the above\nfor quicker feedback. This includes things like test modules that couldn\u2019t\nbe found or that couldn\u2019t be loaded due to syntax errors.</p>\n</div>\n<p>You may randomize and/or reverse the execution order inside groups using the\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-shuffle\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">--shuffle</span></code></a> and <a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-reverse\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--reverse</span></code></a> options. This\ncan help with ensuring your tests are independent from each other.</p>\n</div>\n<div class=\"section\" id=\"s-rollback-emulation\">\n<span id=\"s-test-case-serialized-rollback\"></span><span id=\"rollback-emulation\"></span><span id=\"test-case-serialized-rollback\"></span><h3>Rollback emulation<a class=\"headerlink\" href=\"#rollback-emulation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Any initial data loaded in migrations will only be available in <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>\ntests and not in <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> tests, and additionally only on\nbackends where transactions are supported (the most important exception being\nMyISAM). This is also true for tests which rely on <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code>\nsuch as <a class=\"reference internal\" href=\"../tools/#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django.contrib.staticfiles.testing.StaticLiveServerTestCase\" title=\"django.contrib.staticfiles.testing.StaticLiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StaticLiveServerTestCase</span></code></a>.</p>\n<p>Django can reload that data for you on a per-testcase basis by\nsetting the <code class=\"docutils literal notranslate\"><span class=\"pre\">serialized_rollback</span></code> option to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> in the body of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code>, but note that this will slow down\nthat test suite by approximately 3x.</p>\n<p>Third-party apps or those developing against MyISAM will need to set this;\nin general, however, you should be developing your own projects against a\ntransactional database and be using <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> for most tests, and thus\nnot need this setting.</p>\n<p>The initial serialization is usually very quick, but if you wish to exclude\nsome apps from this process (and speed up test runs slightly), you may add\nthose apps to <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_NON_SERIALIZED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_NON_SERIALIZED_APPS</span></code></a>.</p>\n<p>To prevent serialized data from being loaded twice, setting\n<code class=\"docutils literal notranslate\"><span class=\"pre\">serialized_rollback=True</span></code> disables the\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> signal when flushing the test\ndatabase.</p>\n</div>\n<div class=\"section\" id=\"s-other-test-conditions\">\n<span id=\"other-test-conditions\"></span><h3>Other test conditions<a class=\"headerlink\" href=\"#other-test-conditions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Regardless of the value of the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> setting in your configuration\nfile, all Django tests run with <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a>=False. This is to ensure that\nthe observed output of your code matches what will be seen in a production\nsetting.</p>\n<p>Caches are not cleared after each test, and running <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">test</span> <span class=\"pre\">fooapp</span></code>\ncan insert data from the tests into the cache of a live system if you run your\ntests in production because, unlike databases, a separate \u201ctest cache\u201d is not\nused. This behavior <a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/11505\">may change</a> in the future.</p>\n</div>\n<div class=\"section\" id=\"s-understanding-the-test-output\">\n<span id=\"understanding-the-test-output\"></span><h3>Understanding the test output<a class=\"headerlink\" href=\"#understanding-the-test-output\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you run your tests, you\u2019ll see a number of messages as the test runner\nprepares itself. You can control the level of detail of these messages with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> option on the command line:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>Creating <span class=\"nb\">test</span> database...\nCreating table myapp_animal\nCreating table myapp_mineral\n</pre></div>\n</div>\n<p>This tells you that the test runner is creating a test database, as described\nin the previous section.</p>\n<p>Once the test database has been created, Django will run your tests.\nIf everything goes well, you\u2019ll see something like this:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>----------------------------------------------------------------------\nRan <span class=\"m\">22</span> tests <span class=\"k\">in</span> <span class=\"m\">0</span>.221s\n\nOK\n</pre></div>\n</div>\n<p>If there are test failures, however, you\u2019ll see full details about which tests\nfailed:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">======================================================================</span>\nFAIL: test_was_published_recently_with_future_poll <span class=\"o\">(</span>polls.tests.PollMethodTests<span class=\"o\">)</span>\n----------------------------------------------------------------------\nTraceback <span class=\"o\">(</span>most recent call last<span class=\"o\">)</span>:\n  File <span class=\"s2\">&quot;/dev/mysite/polls/tests.py&quot;</span>, line <span class=\"m\">16</span>, <span class=\"k\">in</span> test_was_published_recently_with_future_poll\n    self.assertIs<span class=\"o\">(</span>future_poll.was_published_recently<span class=\"o\">()</span>, False<span class=\"o\">)</span>\nAssertionError: True is not False\n\n----------------------------------------------------------------------\nRan <span class=\"m\">1</span> <span class=\"nb\">test</span> <span class=\"k\">in</span> <span class=\"m\">0</span>.003s\n\nFAILED <span class=\"o\">(</span><span class=\"nv\">failures</span><span class=\"o\">=</span><span class=\"m\">1</span><span class=\"o\">)</span>\n</pre></div>\n</div>\n<p>A full explanation of this error output is beyond the scope of this document,\nbut it\u2019s pretty intuitive. You can consult the documentation of Python\u2019s\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a> library for details.</p>\n<p>Note that the return code for the test-runner script is 1 for any number of\nfailed tests (whether the failure was caused by an error, a failed assertion,\nor an unexpected success). If all the tests pass, the return code is 0. This\nfeature is useful if you\u2019re using the test-runner script in a shell script and\nneed to test for success or failure at that level.</p>\n</div>\n<div class=\"section\" id=\"s-speeding-up-the-tests\">\n<span id=\"s-speeding-up-tests-auth-hashers\"></span><span id=\"speeding-up-the-tests\"></span><span id=\"speeding-up-tests-auth-hashers\"></span><h3>Speeding up the tests<a class=\"headerlink\" href=\"#speeding-up-the-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-running-tests-in-parallel\">\n<span id=\"running-tests-in-parallel\"></span><h4>Running tests in parallel<a class=\"headerlink\" href=\"#running-tests-in-parallel\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>As long as your tests are properly isolated, you can run them in parallel to\ngain a speed up on multi-core hardware. See <a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-parallel\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">--parallel</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-password-hashing\">\n<span id=\"password-hashing\"></span><h4>Password hashing<a class=\"headerlink\" href=\"#password-hashing\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The default password hasher is rather slow by design. If you\u2019re authenticating\nmany users in your tests, you may want to use a custom settings file and set\nthe <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> setting to a faster hashing algorithm:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PASSWORD_HASHERS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.contrib.auth.hashers.MD5PasswordHasher&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Don\u2019t forget to also include in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-PASSWORD_HASHERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD_HASHERS</span></code></a> any hashing\nalgorithm used in fixtures, if any.</p>\n</div>\n<div class=\"section\" id=\"s-preserving-the-test-database\">\n<span id=\"preserving-the-test-database\"></span><h4>Preserving the test database<a class=\"headerlink\" href=\"#preserving-the-test-database\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-keepdb\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">--keepdb</span></code></a> option preserves the test database between test\nruns. It skips the create and destroy actions which can greatly decrease the\ntime to run tests.</p>\n</div>\n<div class=\"section\" id=\"s-avoiding-disk-access-for-media-files\">\n<span id=\"avoiding-disk-access-for-media-files\"></span><h4>Avoiding disk access for media files<a class=\"headerlink\" href=\"#avoiding-disk-access-for-media-files\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>The <a class=\"reference internal\" href=\"../../../ref/files/storage/#django.core.files.storage.InMemoryStorage\" title=\"django.core.files.storage.InMemoryStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InMemoryStorage</span></code></a> is a convenient way to\nprevent disk access for media files. All data is kept in memory, then it gets\ndiscarded after tests run.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/testing/tools", "Testing tools", "N", "next"], ["topics/testing/index", "Testing in Django", "P", "previous"]], "sourcename": "topics/testing/overview.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing and running tests</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-tests\">Writing tests</a></li>\n<li><a class=\"reference internal\" href=\"#running-tests\">Running tests</a><ul>\n<li><a class=\"reference internal\" href=\"#the-test-database\">The test database</a></li>\n<li><a class=\"reference internal\" href=\"#order-in-which-tests-are-executed\">Order in which tests are executed</a></li>\n<li><a class=\"reference internal\" href=\"#rollback-emulation\">Rollback emulation</a></li>\n<li><a class=\"reference internal\" href=\"#other-test-conditions\">Other test conditions</a></li>\n<li><a class=\"reference internal\" href=\"#understanding-the-test-output\">Understanding the test output</a></li>\n<li><a class=\"reference internal\" href=\"#speeding-up-the-tests\">Speeding up the tests</a><ul>\n<li><a class=\"reference internal\" href=\"#running-tests-in-parallel\">Running tests in parallel</a></li>\n<li><a class=\"reference internal\" href=\"#password-hashing\">Password hashing</a></li>\n<li><a class=\"reference internal\" href=\"#preserving-the-test-database\">Preserving the test database</a></li>\n<li><a class=\"reference internal\" href=\"#avoiding-disk-access-for-media-files\">Avoiding disk access for media files</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/testing/overview", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
