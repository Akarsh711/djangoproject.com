{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Testing in Django"}], "prev": {"link": "../overview/", "title": "Writing and running tests"}, "next": {"link": "../advanced/", "title": "Advanced testing topics"}, "title": "Testing tools", "meta": {}, "body": "<div class=\"section\" id=\"s-testing-tools\">\n<span id=\"testing-tools\"></span><h1>Testing tools<a class=\"headerlink\" href=\"#testing-tools\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django provides a small set of tools that come in handy when writing tests.</p>\n<div class=\"section\" id=\"s-the-test-client\">\n<span id=\"s-test-client\"></span><span id=\"the-test-client\"></span><span id=\"test-client\"></span><h2>The test client<a class=\"headerlink\" href=\"#the-test-client\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The test client is a Python class that acts as a dummy web browser, allowing\nyou to test your views and interact with your Django-powered application\nprogrammatically.</p>\n<p>Some of the things you can do with the test client are:</p>\n<ul class=\"simple\">\n<li>Simulate GET and POST requests on a URL and observe the response \u2013\neverything from low-level HTTP (result headers and status codes) to\npage content.</li>\n<li>See the chain of redirects (if any) and check the URL and status code at\neach step.</li>\n<li>Test that a given request is rendered by a given Django template, with\na template context that contains certain values.</li>\n</ul>\n<p>Note that the test client is not intended to be a replacement for <a class=\"reference external\" href=\"https://www.selenium.dev/\">Selenium</a> or\nother \u201cin-browser\u201d frameworks. Django\u2019s test client has a different focus. In\nshort:</p>\n<ul class=\"simple\">\n<li>Use Django\u2019s test client to establish that the correct template is being\nrendered and that the template is passed the correct context data.</li>\n<li>Use <a class=\"reference internal\" href=\"../advanced/#django.test.RequestFactory\" title=\"django.test.RequestFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestFactory</span></code></a> to test view functions directly,\nbypassing the routing and middleware layers.</li>\n<li>Use in-browser frameworks like <a class=\"reference external\" href=\"https://www.selenium.dev/\">Selenium</a> to test <em>rendered</em> HTML and the\n<em>behavior</em> of web pages, namely JavaScript functionality. Django also\nprovides special support for those frameworks; see the section on\n<a class=\"reference internal\" href=\"#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a> for more details.</li>\n</ul>\n<p>A comprehensive test suite should use a combination of all of these test types.</p>\n<div class=\"section\" id=\"s-overview-and-a-quick-example\">\n<span id=\"overview-and-a-quick-example\"></span><h3>Overview and a quick example<a class=\"headerlink\" href=\"#overview-and-a-quick-example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To use the test client, instantiate <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.Client</span></code> and retrieve\nweb pages:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;/login/&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;john&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;password&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;smith&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n<span class=\"go\">200</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/details/&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span>\n<span class=\"go\">b&#39;&lt;!DOCTYPE html...&#39;</span>\n</pre></div>\n</div>\n<p>As this example suggests, you can instantiate <code class=\"docutils literal notranslate\"><span class=\"pre\">Client</span></code> from within a session\nof the Python interactive interpreter.</p>\n<p>Note a few important things about how the test client works:</p>\n<ul>\n<li><p class=\"first\">The test client does <em>not</em> require the web server to be running. In fact,\nit will run just fine with no web server running at all! That\u2019s because\nit avoids the overhead of HTTP and deals directly with the Django\nframework. This helps make the unit tests run quickly.</p>\n</li>\n<li><p class=\"first\">When retrieving pages, remember to specify the <em>path</em> of the URL, not the\nwhole domain. For example, this is correct:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/login/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This is incorrect:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;https://www.example.com/login/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The test client is not capable of retrieving web pages that are not\npowered by your Django project. If you need to retrieve other web pages,\nuse a Python standard library module such as <a class=\"reference external\" href=\"https://docs.python.org/3/library/urllib.html#module-urllib\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">urllib</span></code></a>.</p>\n</li>\n<li><p class=\"first\">To resolve URLs, the test client uses whatever URLconf is pointed-to by\nyour <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-ROOT_URLCONF\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ROOT_URLCONF</span></code></a> setting.</p>\n</li>\n<li><p class=\"first\">Although the above example would work in the Python interactive\ninterpreter, some of the test client\u2019s functionality, notably the\ntemplate-related functionality, is only available <em>while tests are\nrunning</em>.</p>\n<p>The reason for this is that Django\u2019s test runner performs a bit of black\nmagic in order to determine which template was loaded by a given view.\nThis black magic (essentially a patching of Django\u2019s template system in\nmemory) only happens during test running.</p>\n</li>\n<li><p class=\"first\">By default, the test client will disable any CSRF checks\nperformed by your site.</p>\n<p>If, for some reason, you <em>want</em> the test client to perform CSRF\nchecks, you can create an instance of the test client that\nenforces CSRF checks. To do this, pass in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">enforce_csrf_checks</span></code> argument when you construct your\nclient:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csrf_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">enforce_csrf_checks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-making-requests\">\n<span id=\"making-requests\"></span><h3>Making requests<a class=\"headerlink\" href=\"#making-requests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.Client</span></code> class to make requests.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Client</span></code>(<em><span class=\"n\"><span class=\"pre\">enforce_csrf_checks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">raise_request_exception</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">json_encoder</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DjangoJSONEncoder</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">defaults</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A testing HTTP client. Takes several arguments that can customize behavior.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> allows you to specify default headers that will be sent with\nevery request. For example, to set a <code class=\"docutils literal notranslate\"><span class=\"pre\">User-Agent</span></code> header:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;user-agent&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;curl/7.79.1&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>Arbitrary keyword arguments in <code class=\"docutils literal notranslate\"><span class=\"pre\">**defaults</span></code> set WSGI\n<span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-3333/#environ-variables\"><strong>environ variables</strong></a>. For example, to set the\nscript name:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">SCRIPT_NAME</span><span class=\"o\">=</span><span class=\"s2\">&quot;/app/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Keyword arguments starting with a <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_</span></code> prefix are set as headers,\nbut the <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter should be preferred for readability.</p>\n</div>\n<p>The values from the <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> keyword arguments passed to\n<a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.test.Client.post\" title=\"django.test.Client.post\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">post()</span></code></a>, etc. have precedence over\nthe defaults passed to the class constructor.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">enforce_csrf_checks</span></code> argument can be used to test CSRF\nprotection (see above).</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">raise_request_exception</span></code> argument allows controlling whether or not\nexceptions raised during the request should also be raised in the test.\nDefaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">json_encoder</span></code> argument allows setting a custom JSON encoder for\nthe JSON serialization that\u2019s described in <a class=\"reference internal\" href=\"#django.test.Client.post\" title=\"django.test.Client.post\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">post()</span></code></a>.</p>\n<p>Once you have a <code class=\"docutils literal notranslate\"><span class=\"pre\">Client</span></code> instance, you can call any of the following\nmethods:</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.get\">\n<code class=\"sig-name descname\"><span class=\"pre\">get</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.get\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a GET request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code>\nobject, which is documented below.</p>\n<p>The key-value pairs in the <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> dictionary are used to create a GET\ndata payload. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customers/details/&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>\u2026will result in the evaluation of a GET request equivalent to:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>/customers/details/?name=fred&amp;age=7\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter can be used to specify headers to be sent in\nthe request. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;/customers/details/&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;accept&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/json&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026will send the HTTP header <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_ACCEPT</span></code> to the details view, which\nis a good way to test code paths that use the\n<a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpRequest.accepts\" title=\"django.http.HttpRequest.accepts\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.http.HttpRequest.accepts()</span></code></a> method.</p>\n<p>Arbitrary keyword arguments set WSGI\n<span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-3333/#environ-variables\"><strong>environ variables</strong></a>. For example, headers\nto set the script name:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">SCRIPT_NAME</span><span class=\"o\">=</span><span class=\"s2\">&quot;/app/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you already have the GET arguments in URL-encoded form, you can\nuse that encoding instead of using the data argument. For example,\nthe previous GET request could also be posed as:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customers/details/?name=fred&amp;age=7&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you provide a URL with both an encoded GET data and a data argument,\nthe data argument will take precedence.</p>\n<p>If you set <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> the client will follow any redirects\nand a <code class=\"docutils literal notranslate\"><span class=\"pre\">redirect_chain</span></code> attribute will be set in the response object\ncontaining tuples of the intermediate urls and status codes.</p>\n<p>If you had a URL <code class=\"docutils literal notranslate\"><span class=\"pre\">/redirect_me/</span></code> that redirected to <code class=\"docutils literal notranslate\"><span class=\"pre\">/next/</span></code>, that\nredirected to <code class=\"docutils literal notranslate\"><span class=\"pre\">/final/</span></code>, this is what you\u2019d see:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/redirect_me/&quot;</span><span class=\"p\">,</span> <span class=\"n\">follow</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">redirect_chain</span>\n<span class=\"go\">[(&#39;http://testserver/next/&#39;, 302), (&#39;http://testserver/final/&#39;, 302)]</span>\n</pre></div>\n</div>\n<p>If you set <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> the client will emulate an HTTPS\nrequest.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.post\">\n<code class=\"sig-name descname\"><span class=\"pre\">post</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">MULTIPART_CONTENT</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.post\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.post\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a POST request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object, which is documented below.</p>\n<p>The key-value pairs in the <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> dictionary are used to submit POST\ndata. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;/login/&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;passwd&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;secret&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>\u2026will result in the evaluation of a POST request to this URL:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>/login/\n</pre></div>\n</div>\n<p>\u2026with this POST data:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>name=fred&amp;passwd=secret\n</pre></div>\n</div>\n<p>If you provide <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> as <em class=\"mimetype\">application/json</em>, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> is serialized using <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#json.dumps\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">json.dumps()</span></code></a> if it\u2019s a dict, list,\nor tuple. Serialization is performed with\n<a class=\"reference internal\" href=\"../../serialization/#django.core.serializers.json.DjangoJSONEncoder\" title=\"django.core.serializers.json.DjangoJSONEncoder\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoJSONEncoder</span></code></a> by default,\nand can be overridden by providing a <code class=\"docutils literal notranslate\"><span class=\"pre\">json_encoder</span></code> argument to\n<a class=\"reference internal\" href=\"#django.test.Client\" title=\"django.test.Client\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Client</span></code></a>. This serialization also happens for <a class=\"reference internal\" href=\"#django.test.Client.put\" title=\"django.test.Client.put\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">put()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.test.Client.patch\" title=\"django.test.Client.patch\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">patch()</span></code></a>, and <a class=\"reference internal\" href=\"#django.test.Client.delete\" title=\"django.test.Client.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> requests.</p>\n<p>If you provide any other <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> (e.g. <em class=\"mimetype\">text/xml</em>\nfor an XML payload), the contents of <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> are sent as-is in the\nPOST request, using <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> in the HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code>\nheader.</p>\n<p>If you don\u2019t provide a value for <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>, the values in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> will be transmitted with a content type of\n<em class=\"mimetype\">multipart/form-data</em>. In this case, the key-value pairs in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> will be encoded as a multipart message and used to create the\nPOST data payload.</p>\n<p>To submit multiple values for a given key \u2013 for example, to specify\nthe selections for a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;select</span> <span class=\"pre\">multiple&gt;</span></code> \u2013 provide the values as a\nlist or tuple for the required key. For example, this value of <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>\nwould submit three selected values for the field named <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span><span class=\"s2\">&quot;choices&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;d&quot;</span><span class=\"p\">]}</span>\n</pre></div>\n</div>\n<p>Submitting files is a special case. To POST a file, you need only\nprovide the file field name as a key, and a file handle to the file you\nwish to upload as a value. For example, if your form has fields\n<code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">attachment</span></code>, the latter a\n<a class=\"reference internal\" href=\"../../../ref/forms/fields/#django.forms.FileField\" title=\"django.forms.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;wishlist.doc&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fp</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customers/wishes/&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;attachment&quot;</span><span class=\"p\">:</span> <span class=\"n\">fp</span><span class=\"p\">})</span>\n<span class=\"gp\">...</span>\n</pre></div>\n</div>\n<p>You may also provide any file-like object (e.g., <a class=\"reference external\" href=\"https://docs.python.org/3/library/io.html#io.StringIO\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StringIO</span></code></a> or\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/io.html#io.BytesIO\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BytesIO</span></code></a>) as a file handle. If you\u2019re uploading to an\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a>, the object needs a <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>\nattribute that passes the\n<a class=\"reference internal\" href=\"../../../ref/validators/#django.core.validators.validate_image_file_extension\" title=\"django.core.validators.validate_image_file_extension\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">validate_image_file_extension</span></code></a> validator.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"sa\">b</span><span class=\"s2\">&quot;GIF89a</span><span class=\"se\">\\x01\\x00\\x01\\x00\\x00\\x00\\x00</span><span class=\"s2\">!</span><span class=\"se\">\\xf9\\x04\\x01\\x00\\x00\\x00</span><span class=\"s2\">&quot;</span>\n<span class=\"gp\">... </span>    <span class=\"sa\">b</span><span class=\"s2\">&quot;</span><span class=\"se\">\\x00</span><span class=\"s2\">,</span><span class=\"se\">\\x00\\x00\\x00\\x00\\x01\\x00\\x01\\x00\\x00\\x02\\x01\\x00\\x00</span><span class=\"s2\">&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;myimage.gif&quot;</span>\n</pre></div>\n</div>\n<p>Note that if you wish to use the same file handle for multiple\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> calls then you will need to manually reset the file\npointer between posts. The easiest way to do this is to\nmanually close the file after it has been provided to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code>, as demonstrated above.</p>\n<p>You should also ensure that the file is opened in a way that\nallows the data to be read. If your file contains binary data\nsuch as an image, this means you will need to open the file in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rb</span></code> (read binary) mode.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> parameters acts the same as for\n<a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>.</p>\n<p>If the URL you request with a POST contains encoded parameters, these\nparameters will be made available in the request.GET data. For example,\nif you were to make the request:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"s2\">&quot;/login/?visitor=true&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;passwd&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;secret&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>\u2026 the view handling this request could interrogate request.POST\nto retrieve the username and password, and could interrogate request.GET\nto determine if the user was a visitor.</p>\n<p>If you set <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> the client will follow any redirects\nand a <code class=\"docutils literal notranslate\"><span class=\"pre\">redirect_chain</span></code> attribute will be set in the response object\ncontaining tuples of the intermediate urls and status codes.</p>\n<p>If you set <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> the client will emulate an HTTPS\nrequest.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.head\">\n<code class=\"sig-name descname\"><span class=\"pre\">head</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.head\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.head\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a HEAD request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. This method works just like <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>,\nincluding the <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code>\nparameters, except it does not return a message body.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.options\">\n<code class=\"sig-name descname\"><span class=\"pre\">options</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'application/octet-stream'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.options\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.options\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes an OPTIONS request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. Useful for testing RESTful interfaces.</p>\n<p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> is provided, it is used as the request body, and\na <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> parameters act\nthe same as for <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.put\">\n<code class=\"sig-name descname\"><span class=\"pre\">put</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'application/octet-stream'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.put\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.put\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a PUT request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. Useful for testing RESTful interfaces.</p>\n<p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> is provided, it is used as the request body, and\na <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> parameters act\nthe same as for <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.patch\">\n<code class=\"sig-name descname\"><span class=\"pre\">patch</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'application/octet-stream'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.patch\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.patch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a PATCH request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. Useful for testing RESTful interfaces.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> parameters act\nthe same as for <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.delete\">\n<code class=\"sig-name descname\"><span class=\"pre\">delete</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">data</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'application/octet-stream'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.delete\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.delete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a DELETE request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. Useful for testing RESTful interfaces.</p>\n<p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> is provided, it is used as the request body, and\na <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> parameters act\nthe same as for <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.trace\">\n<code class=\"sig-name descname\"><span class=\"pre\">trace</span></code>(<em><span class=\"n\"><span class=\"pre\">path</span></span></em>, <em><span class=\"n\"><span class=\"pre\">follow</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#Client.trace\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.Client.trace\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Makes a TRACE request on the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. Useful for simulating diagnostic probes.</p>\n<p>Unlike the other request methods, <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> is not provided as a keyword\nparameter in order to comply with <span class=\"target\" id=\"index-2\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.3.8\"><strong>RFC 9110#section-9.3.8</strong></a>, which\nmandates that TRACE requests must not have a body.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> parameters act\nthe same as for <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.login\">\n<code class=\"sig-name descname\"><span class=\"pre\">login</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">credentials</span></span></em>)<a class=\"headerlink\" href=\"#django.test.Client.login\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If your site uses Django\u2019s <a class=\"reference internal\" href=\"../../auth/\"><span class=\"doc\">authentication system</span></a>\nand you deal with logging in users, you can use the test client\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">login()</span></code> method to simulate the effect of a user logging into the\nsite.</p>\n<p>After you call this method, the test client will have all the cookies\nand session data required to pass any login-based tests that may form\npart of a view.</p>\n<p>The format of the <code class=\"docutils literal notranslate\"><span class=\"pre\">credentials</span></code> argument depends on which\n<a class=\"reference internal\" href=\"../../auth/customizing/#authentication-backends\"><span class=\"std std-ref\">authentication backend</span></a> you\u2019re using\n(which is configured by your <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-AUTHENTICATION_BACKENDS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTHENTICATION_BACKENDS</span></code></a>\nsetting). If you\u2019re using the standard authentication backend provided\nby Django (<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelBackend</span></code>), <code class=\"docutils literal notranslate\"><span class=\"pre\">credentials</span></code> should be the user\u2019s\nusername and password, provided as keyword arguments:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">&quot;secret&quot;</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Now you can access a view that&#39;s only available to logged-in users.</span>\n</pre></div>\n</div>\n<p>If you\u2019re using a different authentication backend, this method may\nrequire different credentials. It requires whichever credentials are\nrequired by your backend\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">authenticate()</span></code> method.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">login()</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if it the credentials were accepted and\nlogin was successful.</p>\n<p>Finally, you\u2019ll need to remember to create user accounts before you can\nuse this method. As we explained above, the test runner is executed\nusing a test database, which contains no users by default. As a result,\nuser accounts that are valid on your production site will not work\nunder test conditions. You\u2019ll need to create users as part of the test\nsuite \u2013 either manually (using the Django model API) or with a test\nfixture. Remember that if you want your test user to have a password,\nyou can\u2019t set the user\u2019s password by setting the password attribute\ndirectly \u2013 you must use the\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.set_password\" title=\"django.contrib.auth.models.User.set_password\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_password()</span></code></a> function to\nstore a correctly hashed password. Alternatively, you can use the\n<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.UserManager.create_user\" title=\"django.contrib.auth.models.UserManager.create_user\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create_user()</span></code></a> helper\nmethod to create a new user with a correctly hashed password.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.force_login\">\n<code class=\"sig-name descname\"><span class=\"pre\">force_login</span></code>(<em><span class=\"n\"><span class=\"pre\">user</span></span></em>, <em><span class=\"n\"><span class=\"pre\">backend</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.test.Client.force_login\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If your site uses Django\u2019s <a class=\"reference internal\" href=\"../../auth/\"><span class=\"doc\">authentication\nsystem</span></a>, you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">force_login()</span></code> method\nto simulate the effect of a user logging into the site. Use this method\ninstead of <a class=\"reference internal\" href=\"#django.test.Client.login\" title=\"django.test.Client.login\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">login()</span></code></a> when a test requires a user be logged in and\nthe details of how a user logged in aren\u2019t important.</p>\n<p>Unlike <code class=\"docutils literal notranslate\"><span class=\"pre\">login()</span></code>, this method skips the authentication and\nverification steps: inactive users (<a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.User.is_active\" title=\"django.contrib.auth.models.User.is_active\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_active=False</span></code></a>) are permitted to login\nand the user\u2019s credentials don\u2019t need to be provided.</p>\n<p>The user will have its <code class=\"docutils literal notranslate\"><span class=\"pre\">backend</span></code> attribute set to the value of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">backend</span></code> argument (which should be a dotted Python path string), or\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.AUTHENTICATION_BACKENDS[0]</span></code> if a value isn\u2019t provided.\nThe <a class=\"reference internal\" href=\"../../auth/default/#django.contrib.auth.authenticate\" title=\"django.contrib.auth.authenticate\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">authenticate()</span></code></a> function called by\n<a class=\"reference internal\" href=\"#django.test.Client.login\" title=\"django.test.Client.login\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">login()</span></code></a> normally annotates the user like this.</p>\n<p>This method is faster than <code class=\"docutils literal notranslate\"><span class=\"pre\">login()</span></code> since the expensive\npassword hashing algorithms are bypassed. Also, you can speed up\n<code class=\"docutils literal notranslate\"><span class=\"pre\">login()</span></code> by <a class=\"reference internal\" href=\"../overview/#speeding-up-tests-auth-hashers\"><span class=\"std std-ref\">using a weaker hasher while testing</span></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.logout\">\n<code class=\"sig-name descname\"><span class=\"pre\">logout</span></code>()<a class=\"headerlink\" href=\"#django.test.Client.logout\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If your site uses Django\u2019s <a class=\"reference internal\" href=\"../../auth/\"><span class=\"doc\">authentication system</span></a>,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">logout()</span></code> method can be used to simulate the effect of a user\nlogging out of your site.</p>\n<p>After you call this method, the test client will have all the cookies\nand session data cleared to defaults. Subsequent requests will appear\nto come from an <a class=\"reference internal\" href=\"../../../ref/contrib/auth/#django.contrib.auth.models.AnonymousUser\" title=\"django.contrib.auth.models.AnonymousUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AnonymousUser</span></code></a>.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-testing-responses\">\n<span id=\"testing-responses\"></span><h3>Testing responses<a class=\"headerlink\" href=\"#testing-responses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> methods both return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object. This\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object is <em>not</em> the same as the <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> object returned\nby Django views; the test response object has some additional data useful for\ntest code to verify.</p>\n<p>Specifically, a <code class=\"docutils literal notranslate\"><span class=\"pre\">Response</span></code> object has the following attributes:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Response</span></code><a class=\"headerlink\" href=\"#django.test.Response\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.client\">\n<code class=\"sig-name descname\"><span class=\"pre\">client</span></code><a class=\"headerlink\" href=\"#django.test.Response.client\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The test client that was used to make the request that resulted in the\nresponse.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.content\">\n<code class=\"sig-name descname\"><span class=\"pre\">content</span></code><a class=\"headerlink\" href=\"#django.test.Response.content\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The body of the response, as a bytestring. This is the final page\ncontent as rendered by the view, or any error message.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.context\">\n<code class=\"sig-name descname\"><span class=\"pre\">context</span></code><a class=\"headerlink\" href=\"#django.test.Response.context\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The template <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> instance that was used to render the template that\nproduced the response content.</p>\n<p>If the rendered page used multiple templates, then <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> will be a\nlist of <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> objects, in the order in which they were rendered.</p>\n<p>Regardless of the number of templates used during rendering, you can\nretrieve context values using the <code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> operator. For example, the\ncontext variable <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> could be retrieved using:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/foo/&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;Arthur&#39;</span>\n</pre></div>\n</div>\n<div class=\"admonition-not-using-django-templates admonition\">\n<p class=\"first admonition-title\">Not using Django templates?</p>\n<p class=\"last\">This attribute is only populated when using the\n<a class=\"reference internal\" href=\"../../templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend.\nIf you\u2019re using another template engine,\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.SimpleTemplateResponse.context_data\" title=\"django.template.response.SimpleTemplateResponse.context_data\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">context_data</span></code></a>\nmay be a suitable alternative on responses with that attribute.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.exc_info\">\n<code class=\"sig-name descname\"><span class=\"pre\">exc_info</span></code><a class=\"headerlink\" href=\"#django.test.Response.exc_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A tuple of three values that provides information about the unhandled\nexception, if any, that occurred during the view.</p>\n<p>The values are (type, value, traceback), the same as returned by\nPython\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/sys.html#sys.exc_info\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys.exc_info()</span></code></a>. Their meanings are:</p>\n<ul class=\"simple\">\n<li><em>type</em>: The type of the exception.</li>\n<li><em>value</em>: The exception instance.</li>\n<li><em>traceback</em>: A traceback object which encapsulates the call stack at\nthe point where the exception originally occurred.</li>\n</ul>\n<p>If no exception occurred, then <code class=\"docutils literal notranslate\"><span class=\"pre\">exc_info</span></code> will be <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.json\">\n<code class=\"sig-name descname\"><span class=\"pre\">json</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.test.Response.json\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The body of the response, parsed as JSON. Extra keyword arguments are\npassed to <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#json.loads\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">json.loads()</span></code></a>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/foo/&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;Arthur&#39;</span>\n</pre></div>\n</div>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header is not <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;application/json&quot;</span></code>, then a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> will be raised when trying to parse the response.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.request\">\n<code class=\"sig-name descname\"><span class=\"pre\">request</span></code><a class=\"headerlink\" href=\"#django.test.Response.request\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The request data that stimulated the response.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.wsgi_request\">\n<code class=\"sig-name descname\"><span class=\"pre\">wsgi_request</span></code><a class=\"headerlink\" href=\"#django.test.Response.wsgi_request\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code> instance generated by the test handler that\ngenerated the response.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.status_code\">\n<code class=\"sig-name descname\"><span class=\"pre\">status_code</span></code><a class=\"headerlink\" href=\"#django.test.Response.status_code\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The HTTP status of the response, as an integer. For a full list\nof defined codes, see the <a class=\"reference external\" href=\"https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\">IANA status code registry</a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.templates\">\n<code class=\"sig-name descname\"><span class=\"pre\">templates</span></code><a class=\"headerlink\" href=\"#django.test.Response.templates\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A list of <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> instances used to render the final content, in\nthe order they were rendered. For each template in the list, use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">template.name</span></code> to get the template\u2019s file name, if the template was\nloaded from a file. (The name is a string such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'admin/index.html'</span></code>.)</p>\n<div class=\"admonition-not-using-django-templates admonition\">\n<p class=\"first admonition-title\">Not using Django templates?</p>\n<p class=\"last\">This attribute is only populated when using the\n<a class=\"reference internal\" href=\"../../templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend.\nIf you\u2019re using another template engine,\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.SimpleTemplateResponse.template_name\" title=\"django.template.response.SimpleTemplateResponse.template_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template_name</span></code></a>\nmay be a suitable alternative if you only need the name of the\ntemplate used for rendering.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Response.resolver_match\">\n<code class=\"sig-name descname\"><span class=\"pre\">resolver_match</span></code><a class=\"headerlink\" href=\"#django.test.Response.resolver_match\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An instance of <a class=\"reference internal\" href=\"../../../ref/urlresolvers/#django.urls.ResolverMatch\" title=\"django.urls.ResolverMatch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResolverMatch</span></code></a> for the response.\nYou can use the <a class=\"reference internal\" href=\"../../../ref/urlresolvers/#django.urls.ResolverMatch.func\" title=\"django.urls.ResolverMatch.func\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">func</span></code></a> attribute, for\nexample, to verify the view that served the response:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># my_view here is a function based view.</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">resolver_match</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">my_view</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Class-based views need to compare the view_class, as the</span>\n<span class=\"c1\"># functions generated by as_view() won&#39;t be equal.</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIs</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">resolver_match</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">view_class</span><span class=\"p\">,</span> <span class=\"n\">MyView</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If the given URL is not found, accessing this attribute will raise a\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.urls.Resolver404\" title=\"django.urls.Resolver404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Resolver404</span></code></a> exception.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>As with a normal response, you can also access the headers through\n<a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse.headers\" title=\"django.http.HttpResponse.headers\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.headers</span></code></a>. For example, you could determine the content\ntype of a response using <code class=\"docutils literal notranslate\"><span class=\"pre\">response.headers['Content-Type']</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-exceptions\">\n<span id=\"exceptions\"></span><h3>Exceptions<a class=\"headerlink\" href=\"#exceptions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you point the test client at a view that raises an exception and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Client.raise_request_exception</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, that exception will be visible\nin the test case. You can then use a standard <code class=\"docutils literal notranslate\"><span class=\"pre\">try</span> <span class=\"pre\">...</span> <span class=\"pre\">except</span></code> block or\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRaises()</span></code></a> to test for exceptions.</p>\n<p>The only exceptions that are not visible to the test client are\n<a class=\"reference internal\" href=\"../../http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.PermissionDenied\" title=\"django.core.exceptions.PermissionDenied\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code></a>, <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#SystemExit\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SystemExit</span></code></a>, and\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.SuspiciousOperation\" title=\"django.core.exceptions.SuspiciousOperation\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SuspiciousOperation</span></code></a>. Django catches these\nexceptions internally and converts them into the appropriate HTTP response\ncodes. In these cases, you can check <code class=\"docutils literal notranslate\"><span class=\"pre\">response.status_code</span></code> in your test.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">Client.raise_request_exception</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the test client will return a\n500 response as would be returned to a browser. The response has the attribute\n<a class=\"reference internal\" href=\"#django.test.Response.exc_info\" title=\"django.test.Response.exc_info\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">exc_info</span></code></a> to provide information about the unhandled\nexception.</p>\n</div>\n<div class=\"section\" id=\"s-persistent-state\">\n<span id=\"persistent-state\"></span><h3>Persistent state<a class=\"headerlink\" href=\"#persistent-state\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The test client is stateful. If a response returns a cookie, then that cookie\nwill be stored in the test client and sent with all subsequent <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> requests.</p>\n<p>Expiration policies for these cookies are not followed. If you want a cookie\nto expire, either delete it manually or create a new <code class=\"docutils literal notranslate\"><span class=\"pre\">Client</span></code> instance (which\nwill effectively delete all cookies).</p>\n<p>A test client has attributes that store persistent state information. You can\naccess these properties as part of a test condition.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.cookies\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Client.</span></code><code class=\"sig-name descname\"><span class=\"pre\">cookies</span></code><a class=\"headerlink\" href=\"#django.test.Client.cookies\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A Python <a class=\"reference external\" href=\"https://docs.python.org/3/library/http.cookies.html#http.cookies.SimpleCookie\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleCookie</span></code></a> object, containing the current\nvalues of all the client cookies. See the documentation of the\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/http.cookies.html#module-http.cookies\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">http.cookies</span></code></a> module for more.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.Client.session\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Client.</span></code><code class=\"sig-name descname\"><span class=\"pre\">session</span></code><a class=\"headerlink\" href=\"#django.test.Client.session\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary-like object containing session information. See the\n<a class=\"reference internal\" href=\"../../http/sessions/\"><span class=\"doc\">session documentation</span></a> for full details.</p>\n<p>To modify the session and then save it, it must be stored in a variable\nfirst (because a new <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> is created every time this property\nis accessed):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">session</span>\n    <span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;somekey&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;test&quot;</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-setting-the-language\">\n<span id=\"setting-the-language\"></span><h3>Setting the language<a class=\"headerlink\" href=\"#setting-the-language\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When testing applications that support internationalization and localization,\nyou might want to set the language for a test client request. The method for\ndoing so depends on whether or not the\n<a class=\"reference internal\" href=\"../../../ref/middleware/#django.middleware.locale.LocaleMiddleware\" title=\"django.middleware.locale.LocaleMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocaleMiddleware</span></code></a> is enabled.</p>\n<p>If the middleware is enabled, the language can be set by creating a cookie with\na name of <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-LANGUAGE_COOKIE_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_COOKIE_NAME</span></code></a> and a value of the language code:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_language_using_cookie</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">({</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE_COOKIE_NAME</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fr&quot;</span><span class=\"p\">})</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;Bienvenue sur mon site.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>or by including the <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept-Language</span></code> HTTP header in the request:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_language_using_header</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;accept-language&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fr&quot;</span><span class=\"p\">})</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;Bienvenue sur mon site.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>When using these methods, ensure to reset the active language at the end of\neach test:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">tearDown</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE_CODE</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>More details are in <a class=\"reference internal\" href=\"../../i18n/translation/#how-django-discovers-language-preference\"><span class=\"std std-ref\">How Django discovers language preference</span></a>.</p>\n<p>If the middleware isn\u2019t enabled, the active language may be set using\n<a class=\"reference internal\" href=\"../../../ref/utils/#django.utils.translation.override\" title=\"django.utils.translation.override\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">translation.override()</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">translation</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_language_using_override</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">override</span><span class=\"p\">(</span><span class=\"s2\">&quot;fr&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;Bienvenue sur mon site.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>More details are in <a class=\"reference internal\" href=\"../../i18n/translation/#explicitly-setting-the-active-language\"><span class=\"std std-ref\">Explicitly setting the active language</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-example\">\n<span id=\"example\"></span><h3>Example<a class=\"headerlink\" href=\"#example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following is a unit test using the test client:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Every test needs a client.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_details</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Issue a GET request.</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/details/&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check that the response is 200 OK.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check that the rendered context contains 5 customers.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;customers&quot;</span><span class=\"p\">]),</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"../advanced/#django.test.RequestFactory\" title=\"django.test.RequestFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.RequestFactory</span></code></a></p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-provided-test-case-classes\">\n<span id=\"s-django-testcase-subclasses\"></span><span id=\"provided-test-case-classes\"></span><span id=\"django-testcase-subclasses\"></span><h2>Provided test case classes<a class=\"headerlink\" href=\"#provided-test-case-classes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Normal Python unit test classes extend a base class of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a>. Django provides a few extensions of this base class:</p>\n<div class=\"figure align-default\" id=\"id4\">\n<span id=\"testcase-hierarchy-diagram\"></span><a class=\"reference internal image-reference\" href=\"../../../_images/django_unittest_classes_hierarchy.svg\"><img alt=\"Hierarchy of Django unit testing classes (TestCase subclasses)\" height=\"328\" src=\"../../../_images/django_unittest_classes_hierarchy.svg\" width=\"508\" /></a>\n<p class=\"caption\"><span class=\"caption-text\">Hierarchy of Django unit testing classes</span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this image\">\u00b6</a></p>\n</div>\n<p>You can convert a normal <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a> to any of the subclasses:\nchange the base class of your test from <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code> to the subclass.\nAll of the standard Python unit test functionality will be available, and it\nwill be augmented with some useful additions as described in each section\nbelow.</p>\n<div class=\"section\" id=\"s-simpletestcase\">\n<span id=\"simpletestcase\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code><a class=\"headerlink\" href=\"#simpletestcase\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SimpleTestCase</span></code><a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A subclass of <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a> that adds this functionality:</p>\n<ul class=\"simple\">\n<li>Some useful assertions like:<ul>\n<li>Checking that a callable <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertRaisesMessage\" title=\"django.test.SimpleTestCase.assertRaisesMessage\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">raises</span> <span class=\"pre\">a</span> <span class=\"pre\">certain</span> <span class=\"pre\">exception</span></code></a>.</li>\n<li>Checking that a callable <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertWarnsMessage\" title=\"django.test.SimpleTestCase.assertWarnsMessage\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">triggers</span> <span class=\"pre\">a</span> <span class=\"pre\">certain</span> <span class=\"pre\">warning</span></code></a>.</li>\n<li>Testing form field <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertFieldOutput\" title=\"django.test.SimpleTestCase.assertFieldOutput\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">rendering</span> <span class=\"pre\">and</span> <span class=\"pre\">error</span> <span class=\"pre\">treatment</span></code></a>.</li>\n<li>Testing <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertContains\" title=\"django.test.SimpleTestCase.assertContains\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HTML</span> <span class=\"pre\">responses</span> <span class=\"pre\">for</span> <span class=\"pre\">the</span> <span class=\"pre\">presence/lack</span> <span class=\"pre\">of</span> <span class=\"pre\">a</span> <span class=\"pre\">given</span> <span class=\"pre\">fragment</span></code></a>.</li>\n<li>Verifying that a template <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertTemplateUsed\" title=\"django.test.SimpleTestCase.assertTemplateUsed\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has/hasn't</span> <span class=\"pre\">been</span> <span class=\"pre\">used</span> <span class=\"pre\">to</span> <span class=\"pre\">generate</span> <span class=\"pre\">a</span> <span class=\"pre\">given</span>\n<span class=\"pre\">response</span> <span class=\"pre\">content</span></code></a>.</li>\n<li>Verifying that two <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertURLEqual\" title=\"django.test.SimpleTestCase.assertURLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">URLs</span></code></a> are equal.</li>\n<li>Verifying an HTTP <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertRedirects\" title=\"django.test.SimpleTestCase.assertRedirects\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">redirect</span></code></a> is\nperformed by the app.</li>\n<li>Robustly testing two <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"django.test.SimpleTestCase.assertHTMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HTML</span> <span class=\"pre\">fragments</span></code></a>\nfor equality/inequality or <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertInHTML\" title=\"django.test.SimpleTestCase.assertInHTML\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">containment</span></code></a>.</li>\n<li>Robustly testing two <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertXMLEqual\" title=\"django.test.SimpleTestCase.assertXMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">XML</span> <span class=\"pre\">fragments</span></code></a>\nfor equality/inequality.</li>\n<li>Robustly testing two <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertJSONEqual\" title=\"django.test.SimpleTestCase.assertJSONEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">JSON</span> <span class=\"pre\">fragments</span></code></a>\nfor equality.</li>\n</ul>\n</li>\n<li>The ability to run tests with <a class=\"reference internal\" href=\"#overriding-settings\"><span class=\"std std-ref\">modified settings</span></a>.</li>\n<li>Using the <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.client\" title=\"django.test.SimpleTestCase.client\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">client</span></code></a> <a class=\"reference internal\" href=\"#django.test.Client\" title=\"django.test.Client\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Client</span></code></a>.</li>\n</ul>\n<p>If your tests make any database queries, use subclasses\n<a class=\"reference internal\" href=\"#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> or <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a>.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.databases\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">databases</span></code><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><a class=\"reference internal\" href=\"#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a> disallows database queries by default. This\nhelps to avoid executing write queries which will affect other tests\nsince each <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code> test isn\u2019t run in a transaction. If you\naren\u2019t concerned about this problem, you can disable this behavior by\nsetting the <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> class attribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">'__all__'</span></code> on your test\nclass.</p>\n</dd></dl>\n\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code> and its subclasses (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>, \u2026) rely on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">setUpClass()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tearDownClass()</span></code> to perform some class-wide\ninitialization (e.g. overriding settings). If you need to override those\nmethods, don\u2019t forget to call the <code class=\"docutils literal notranslate\"><span class=\"pre\">super</span></code> implementation:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUpClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setUpClass</span><span class=\"p\">()</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tearDownClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tearDownClass</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p class=\"last\">Be sure to account for Python\u2019s behavior if an exception is raised during\n<code class=\"docutils literal notranslate\"><span class=\"pre\">setUpClass()</span></code>. If that happens, neither the tests in the class nor\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tearDownClass()</span></code> are run. In the case of <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a>,\nthis will leak the transaction created in <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code>  which results in\nvarious symptoms including a segmentation fault on some platforms (reported\non macOS). If you want to intentionally raise an exception such as\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.SkipTest\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">unittest.SkipTest</span></code></a> in <code class=\"docutils literal notranslate\"><span class=\"pre\">setUpClass()</span></code>, be sure to do it before\ncalling <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> to avoid this.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-transactiontestcase\">\n<span id=\"transactiontestcase\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code><a class=\"headerlink\" href=\"#transactiontestcase\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TransactionTestCase</span></code><a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#TransactionTestCase\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.TransactionTestCase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> inherits from <a class=\"reference internal\" href=\"#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a> to\nadd some database-specific features:</p>\n<ul class=\"simple\">\n<li>Resetting the database to a known state at the beginning of each test to\nease testing and using the ORM.</li>\n<li>Database <a class=\"reference internal\" href=\"#django.test.TransactionTestCase.fixtures\" title=\"django.test.TransactionTestCase.fixtures\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">fixtures</span></code></a>.</li>\n<li>Test <a class=\"reference internal\" href=\"#skipping-tests\"><span class=\"std std-ref\">skipping based on database backend features</span></a>.</li>\n<li>The remaining specialized <a class=\"reference internal\" href=\"#django.test.TransactionTestCase.assertQuerySetEqual\" title=\"django.test.TransactionTestCase.assertQuerySetEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assert*</span></code></a> methods.</li>\n</ul>\n<p>Django\u2019s <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> class is a more commonly used subclass of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> that makes use of database transaction facilities\nto speed up the process of resetting the database to a known state at the\nbeginning of each test. A consequence of this, however, is that some database\nbehaviors cannot be tested within a Django <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> class. For instance,\nyou cannot test that a block of code is executing within a transaction, as is\nrequired when using\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.select_for_update\" title=\"django.db.models.query.QuerySet.select_for_update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code></a>. In those cases,\nyou should use <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> are identical except for the manner\nin which the database is reset to a known state and the ability for test code\nto test the effects of commit and rollback:</p>\n<ul class=\"simple\">\n<li>A <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> resets the database after the test runs by\ntruncating all tables. A <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> may call commit and rollback\nand observe the effects of these calls on the database.</li>\n<li>A <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>, on the other hand, does not truncate tables after a test.\nInstead, it encloses the test code in a database transaction that is rolled\nback at the end of the test. This guarantees that the rollback at the end of\nthe test restores the database to its initial state.</li>\n</ul>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> running on a database that does not support rollback (e.g. MySQL\nwith the MyISAM storage engine), and all instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code>,\nwill roll back at the end of the test by deleting all data from the test\ndatabase.</p>\n<p class=\"last\">Apps <a class=\"reference internal\" href=\"../overview/#test-case-serialized-rollback\"><span class=\"std std-ref\">will not see their data reloaded</span></a>;\nif you need this functionality (for example, third-party apps should enable\nthis) you can set <code class=\"docutils literal notranslate\"><span class=\"pre\">serialized_rollback</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> inside the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> body.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-testcase\">\n<span id=\"testcase\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code><a class=\"headerlink\" href=\"#testcase\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.TestCase\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TestCase</span></code><a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#TestCase\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.TestCase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This is the most common class to use for writing tests in Django. It inherits\nfrom <a class=\"reference internal\" href=\"#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> (and by extension <a class=\"reference internal\" href=\"#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a>).\nIf your Django application doesn\u2019t use a database, use <a class=\"reference internal\" href=\"#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a>.</p>\n<p>The class:</p>\n<ul class=\"simple\">\n<li>Wraps the tests within two nested <a class=\"reference internal\" href=\"../../db/transactions/#django.db.transaction.atomic\" title=\"django.db.transaction.atomic\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">atomic()</span></code></a>\nblocks: one for the whole class and one for each test. Therefore, if you want\nto test some specific database transaction behavior, use\n<a class=\"reference internal\" href=\"#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a>.</li>\n<li>Checks deferrable database constraints at the end of each test.</li>\n</ul>\n<p>It also provides an additional method:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.TestCase.setUpTestData\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">TestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setUpTestData</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#TestCase.setUpTestData\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.TestCase.setUpTestData\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The class-level <code class=\"docutils literal notranslate\"><span class=\"pre\">atomic</span></code> block described above allows the creation of\ninitial data at the class level, once for the whole <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>. This\ntechnique allows for faster tests as compared to using <code class=\"docutils literal notranslate\"><span class=\"pre\">setUp()</span></code>.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUpTestData</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Set up data for the whole TestCase</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s2\">&quot;Test&quot;</span><span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test1</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Some test using self.foo</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test2</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Some other test using self.foo</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Note that if the tests are run on a database with no transaction support\n(for instance, MySQL with the MyISAM engine), <code class=\"docutils literal notranslate\"><span class=\"pre\">setUpTestData()</span></code> will be\ncalled before each test, negating the speed benefits.</p>\n<p>Objects assigned to class attributes in <code class=\"docutils literal notranslate\"><span class=\"pre\">setUpTestData()</span></code> must support\ncreating deep copies with <a class=\"reference external\" href=\"https://docs.python.org/3/library/copy.html#copy.deepcopy\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">copy.deepcopy()</span></code></a> in order to isolate them\nfrom alterations performed by each test methods.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.TestCase.captureOnCommitCallbacks\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">TestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">captureOnCommitCallbacks</span></code>(<em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_DB_ALIAS</span></span></em>, <em><span class=\"n\"><span class=\"pre\">execute</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#TestCase.captureOnCommitCallbacks\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.TestCase.captureOnCommitCallbacks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a context manager that captures <a class=\"reference internal\" href=\"../../db/transactions/#django.db.transaction.on_commit\" title=\"django.db.transaction.on_commit\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">transaction.on_commit()</span></code></a> callbacks for the given database\nconnection. It returns a list that contains, on exit of the context, the\ncaptured callback functions. From this list you can make assertions on the\ncallbacks or call them to invoke their side effects, emulating a commit.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code> is the alias of the database connection to capture callbacks for.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">execute</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, all the callbacks will be called as the context\nmanager exits, if no exception occurred. This emulates a commit after the\nwrapped block of code.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">mail</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ContactTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">captureOnCommitCallbacks</span><span class=\"p\">(</span><span class=\"n\">execute</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">callbacks</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;/contact/&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">{</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;I like your site&quot;</span><span class=\"p\">},</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">callbacks</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">outbox</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">outbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Contact Form&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">outbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"s2\">&quot;I like your site&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-liveservertestcase\">\n<span id=\"s-live-test-server\"></span><span id=\"liveservertestcase\"></span><span id=\"live-test-server\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code><a class=\"headerlink\" href=\"#liveservertestcase\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.LiveServerTestCase\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">LiveServerTestCase</span></code><a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#LiveServerTestCase\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.LiveServerTestCase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code> does basically the same as\n<a class=\"reference internal\" href=\"#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> with one extra feature: it launches a\nlive Django server in the background on setup, and shuts it down on teardown.\nThis allows the use of automated test clients other than the\n<a class=\"reference internal\" href=\"#test-client\"><span class=\"std std-ref\">Django dummy client</span></a> such as, for example, the <a class=\"reference external\" href=\"https://www.selenium.dev/\">Selenium</a>\nclient, to execute a series of functional tests inside a browser and simulate a\nreal user\u2019s actions.</p>\n<p>The live server listens on <code class=\"docutils literal notranslate\"><span class=\"pre\">localhost</span></code> and binds to port 0 which uses a free\nport assigned by the operating system. The server\u2019s URL can be accessed with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.live_server_url</span></code> during the tests.</p>\n<p>To demonstrate how to use <code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code>, let\u2019s write a Selenium test.\nFirst of all, you need to install the <a class=\"reference external\" href=\"https://pypi.org/project/selenium/\">selenium</a> package:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install selenium\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install selenium\n</pre></div>\n</section>\n</div>\n<p>Then, add a <code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code>-based test to your app\u2019s tests module\n(for example: <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/tests.py</span></code>). For this example, we\u2019ll assume you\u2019re using\nthe <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code></a> app and want to have static files served\nduring the execution of your tests similar to what we get at development time\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG=True</span></code>, i.e. without having to collect them using\n<a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a>. We\u2019ll use\nthe  <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django.contrib.staticfiles.testing.StaticLiveServerTestCase\" title=\"django.contrib.staticfiles.testing.StaticLiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StaticLiveServerTestCase</span></code></a>\nsubclass which provides that functionality. Replace it with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.LiveServerTestCase</span></code> if you don\u2019t need that.</p>\n<p>The code for this test may look as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.staticfiles.testing</span> <span class=\"kn\">import</span> <span class=\"n\">StaticLiveServerTestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.common.by</span> <span class=\"kn\">import</span> <span class=\"n\">By</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.firefox.webdriver</span> <span class=\"kn\">import</span> <span class=\"n\">WebDriver</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MySeleniumTests</span><span class=\"p\">(</span><span class=\"n\">StaticLiveServerTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">fixtures</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;user-data.json&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUpClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">setUpClass</span><span class=\"p\">()</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">selenium</span> <span class=\"o\">=</span> <span class=\"n\">WebDriver</span><span class=\"p\">()</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">implicitly_wait</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">tearDownClass</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">tearDownClass</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_login</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">live_server_url</span><span class=\"si\">}</span><span class=\"s2\">/login/&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">username_input</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">NAME</span><span class=\"p\">,</span> <span class=\"s2\">&quot;username&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">username_input</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s2\">&quot;myuser&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">password_input</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">NAME</span><span class=\"p\">,</span> <span class=\"s2\">&quot;password&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">password_input</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s2\">&quot;secret&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">XPATH</span><span class=\"p\">,</span> <span class=\"s1\">&#39;//input[@value=&quot;Log in&quot;]&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Finally, you may run the test as follows:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./manage.py <span class=\"nb\">test</span> myapp.tests.MySeleniumTests.test_login\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> manage.py test myapp.tests.MySeleniumTests.test_login\n</pre></div>\n</section>\n</div>\n<p>This example will automatically open Firefox then go to the login page, enter\nthe credentials and press the \u201cLog in\u201d button. Selenium offers other drivers in\ncase you do not have Firefox installed or wish to use another browser. The\nexample above is just a tiny fraction of what the Selenium client can do; check\nout the <a class=\"reference external\" href=\"https://selenium-python.readthedocs.io/api.html\">full reference</a> for more details.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>When using an in-memory SQLite database to run the tests, the same database\nconnection will be shared by two threads in parallel: the thread in which\nthe live server is run and the thread in which the test case is run. It\u2019s\nimportant to prevent simultaneous database queries via this shared\nconnection by the two threads, as that may sometimes randomly cause the\ntests to fail. So you need to ensure that the two threads don\u2019t access the\ndatabase at the same time. In particular, this means that in some cases\n(for example, just after clicking a link or submitting a form), you might\nneed to check that a response is received by Selenium and that the next\npage is loaded before proceeding with further test execution.\nDo this, for example, by making Selenium wait until the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;body&gt;</span></code> HTML tag\nis found in the response (requires Selenium &gt; 2.13):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_login</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.support.wait</span> <span class=\"kn\">import</span> <span class=\"n\">WebDriverWait</span>\n\n    <span class=\"n\">timeout</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"o\">...</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">XPATH</span><span class=\"p\">,</span> <span class=\"s1\">&#39;//input[@value=&quot;Log in&quot;]&#39;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">click</span><span class=\"p\">()</span>\n    <span class=\"c1\"># Wait until the response is received</span>\n    <span class=\"n\">WebDriverWait</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">selenium</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">until</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">driver</span><span class=\"p\">:</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element</span><span class=\"p\">(</span><span class=\"n\">By</span><span class=\"o\">.</span><span class=\"n\">TAG_NAME</span><span class=\"p\">,</span> <span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"last\">The tricky thing here is that there\u2019s really no such thing as a \u201cpage load,\u201d\nespecially in modern web apps that generate HTML dynamically after the\nserver generates the initial document. So, checking for the presence of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;body&gt;</span></code> in the response might not necessarily be appropriate for all use\ncases. Please refer to the <a class=\"reference external\" href=\"https://web.archive.org/web/20160129132110/http://code.google.com/p/selenium/wiki/FrequentlyAskedQuestions#Q:_WebDriver_fails_to_find_elements_/_Does_not_block_on_page_loa\">Selenium FAQ</a> and <a class=\"reference external\" href=\"https://www.selenium.dev/documentation/webdriver/waits/#explicit-wait\">Selenium documentation</a>\nfor more information.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-test-cases-features\">\n<span id=\"test-cases-features\"></span><h2>Test cases features<a class=\"headerlink\" href=\"#test-cases-features\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-default-test-client\">\n<span id=\"default-test-client\"></span><h3>Default test client<a class=\"headerlink\" href=\"#default-test-client\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.client\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">client</span></code><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.client\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Every test case in a <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.*TestCase</span></code> instance has access to an\ninstance of a Django test client. This client can be accessed as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.client</span></code>. This client is recreated for each test, so you don\u2019t have to\nworry about state (such as cookies) carrying over from one test to another.</p>\n<p>This means, instead of instantiating a <code class=\"docutils literal notranslate\"><span class=\"pre\">Client</span></code> in each test:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_details</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/details/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/index/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026you can refer to <code class=\"docutils literal notranslate\"><span class=\"pre\">self.client</span></code>, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_details</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/details/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_index</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/index/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-customizing-the-test-client\">\n<span id=\"customizing-the-test-client\"></span><h3>Customizing the test client<a class=\"headerlink\" href=\"#customizing-the-test-client\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.client_class\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">client_class</span></code><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.client_class\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If you want to use a different <code class=\"docutils literal notranslate\"><span class=\"pre\">Client</span></code> class (for example, a subclass\nwith customized behavior), use the <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.client_class\" title=\"django.test.SimpleTestCase.client_class\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">client_class</span></code></a> class\nattribute:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTestClient</span><span class=\"p\">(</span><span class=\"n\">Client</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Specialized methods for your environment</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">client_class</span> <span class=\"o\">=</span> <span class=\"n\">MyTestClient</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_my_stuff</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Here self.client is an instance of MyTestClient...</span>\n        <span class=\"n\">call_some_test_code</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-fixture-loading\">\n<span id=\"s-topics-testing-fixtures\"></span><span id=\"fixture-loading\"></span><span id=\"topics-testing-fixtures\"></span><h3>Fixture loading<a class=\"headerlink\" href=\"#fixture-loading\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase.fixtures\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TransactionTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">fixtures</span></code><a class=\"headerlink\" href=\"#django.test.TransactionTestCase.fixtures\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A test case for a database-backed website isn\u2019t much use if there isn\u2019t any\ndata in the database. Tests are more readable and it\u2019s more maintainable to\ncreate objects using the ORM, for example in <a class=\"reference internal\" href=\"#django.test.TestCase.setUpTestData\" title=\"django.test.TestCase.setUpTestData\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">TestCase.setUpTestData()</span></code></a>,\nhowever, you can also use <a class=\"reference internal\" href=\"../../db/fixtures/#fixtures-explanation\"><span class=\"std std-ref\">fixtures</span></a>.</p>\n<p>A fixture is a collection of data that Django knows how to import into a\ndatabase. For example, if your site has user accounts, you might set up a\nfixture of fake user accounts in order to populate your database during tests.</p>\n<p>The most straightforward way of creating a fixture is to use the\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">dumpdata</span></code></a> command. This assumes you\nalready have some data in your database. See the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span>\n<span class=\"pre\">documentation</span></code></a> for more details.</p>\n<p>Once you\u2019ve created a fixture and placed it in a <code class=\"docutils literal notranslate\"><span class=\"pre\">fixtures</span></code> directory in one\nof your <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, you can use it in your unit tests by\nspecifying a <code class=\"docutils literal notranslate\"><span class=\"pre\">fixtures</span></code> class attribute on your <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a>\nsubclass:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Animal</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AnimalTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">fixtures</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;mammals.json&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;birds&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Test definitions as before.</span>\n        <span class=\"n\">call_setup_methods</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_fluffy_animals</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># A test that uses the fixtures.</span>\n        <span class=\"n\">call_some_test_code</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Here\u2019s specifically what will happen:</p>\n<ul class=\"simple\">\n<li>At the start of each test, before <code class=\"docutils literal notranslate\"><span class=\"pre\">setUp()</span></code> is run, Django will flush the\ndatabase, returning the database to the state it was in directly after\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> was called.</li>\n<li>Then, all the named fixtures are installed. In this example, Django will\ninstall any JSON fixture named <code class=\"docutils literal notranslate\"><span class=\"pre\">mammals</span></code>, followed by any fixture named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">birds</span></code>. See the <a class=\"reference internal\" href=\"../../db/fixtures/#fixtures-explanation\"><span class=\"std std-ref\">Fixtures</span></a> topic for more details on\ndefining and installing fixtures.</li>\n</ul>\n<p>For performance reasons, <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> loads fixtures once for the entire\ntest class, before <a class=\"reference internal\" href=\"#django.test.TestCase.setUpTestData\" title=\"django.test.TestCase.setUpTestData\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setUpTestData()</span></code></a>, instead of before each\ntest, and it uses transactions to clean the database before each test. In any case,\nyou can be certain that the outcome of a test will not be affected by another\ntest or by the order of test execution.</p>\n<p>By default, fixtures are only loaded into the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> database. If you are\nusing multiple databases and set <a class=\"reference internal\" href=\"#django.test.TransactionTestCase.databases\" title=\"django.test.TransactionTestCase.databases\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TransactionTestCase.databases</span></code></a>,\nfixtures will be loaded into all specified databases.</p>\n</div>\n<div class=\"section\" id=\"s-urlconf-configuration\">\n<span id=\"urlconf-configuration\"></span><h3>URLconf configuration<a class=\"headerlink\" href=\"#urlconf-configuration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If your application provides views, you may want to include tests that use the\ntest client to exercise those views. However, an end user is free to deploy the\nviews in your application at any URL of their choosing. This means that your\ntests can\u2019t rely upon the fact that your views will be available at a\nparticular URL. Decorate your test class or test method with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;override_settings(ROOT_URLCONF=...)</span></code> for URLconf configuration.</p>\n</div>\n<div class=\"section\" id=\"s-multi-database-support\">\n<span id=\"s-testing-multi-db\"></span><span id=\"multi-database-support\"></span><span id=\"testing-multi-db\"></span><h3>Multi-database support<a class=\"headerlink\" href=\"#multi-database-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase.databases\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TransactionTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">databases</span></code><a class=\"headerlink\" href=\"#django.test.TransactionTestCase.databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Django sets up a test database corresponding to every database that is\ndefined in the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> definition in your settings and referred to\nby at least one test through <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code>.</p>\n<p>However, a big part of the time taken to run a Django <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> is consumed\nby the call to <code class=\"docutils literal notranslate\"><span class=\"pre\">flush</span></code> that ensures that you have a clean database at the\nstart of each test run. If you have multiple databases, multiple flushes are\nrequired (one for each database), which can be a time consuming activity \u2013\nespecially if your tests don\u2019t need to test multi-database activity.</p>\n<p>As an optimization, Django only flushes the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> database at\nthe start of each test run. If your setup contains multiple databases,\nand you have a test that requires every database to be clean, you can\nuse the <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> attribute on the test suite to request extra databases\nto be flushed.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">TestMyViews</span><span class=\"p\">(</span><span class=\"n\">TransactionTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;other&quot;</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_index_page_view</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">call_some_test_code</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This test case will flush the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">other</span></code> test databases before\nrunning <code class=\"docutils literal notranslate\"><span class=\"pre\">test_index_page_view</span></code>. You can also use <code class=\"docutils literal notranslate\"><span class=\"pre\">'__all__'</span></code> to specify\nthat all of the test databases must be flushed.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> flag also controls which databases the\n<a class=\"reference internal\" href=\"#django.test.TransactionTestCase.fixtures\" title=\"django.test.TransactionTestCase.fixtures\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TransactionTestCase.fixtures</span></code></a> are loaded into. By default, fixtures are\nonly loaded into the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> database.</p>\n<p>Queries against databases not in <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> will give assertion errors to\nprevent state leaking between tests.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.TestCase.databases\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">databases</span></code><a class=\"headerlink\" href=\"#django.test.TestCase.databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>By default, only the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> database will be wrapped in a transaction\nduring a <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>\u2019s execution and attempts to query other databases will\nresult in assertion errors to prevent state leaking between tests.</p>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> class attribute on the test class to request transaction\nwrapping against non-<code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> databases.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">OtherDBTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;other&quot;</span><span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_other_db_query</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>This test will only allow queries against the <code class=\"docutils literal notranslate\"><span class=\"pre\">other</span></code> database. Just like for\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.databases\" title=\"django.test.SimpleTestCase.databases\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">SimpleTestCase.databases</span></code></a> and <a class=\"reference internal\" href=\"#django.test.TransactionTestCase.databases\" title=\"django.test.TransactionTestCase.databases\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TransactionTestCase.databases</span></code></a>, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'__all__'</span></code> constant can be used to specify that the test should allow\nqueries to all databases.</p>\n</div>\n<div class=\"section\" id=\"s-overriding-settings\">\n<span id=\"s-id1\"></span><span id=\"overriding-settings\"></span><span id=\"id1\"></span><h3>Overriding settings<a class=\"headerlink\" href=\"#overriding-settings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Use the functions below to temporarily alter the value of settings in tests.\nDon\u2019t manipulate <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.settings</span></code> directly as Django won\u2019t restore\nthe original values after such manipulations.</p>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.settings\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">settings</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.settings\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.settings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>For testing purposes it\u2019s often useful to change a setting temporarily and\nrevert to the original value after running the testing code. For this use case\nDjango provides a standard Python context manager (see <span class=\"target\" id=\"index-3\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0343/\"><strong>PEP 343</strong></a>) called\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.settings\" title=\"django.test.SimpleTestCase.settings\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">settings()</span></code></a>, which can be used like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoginTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_login</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># First check for the default behavior</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/sekrit/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRedirects</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/accounts/login/?next=/sekrit/&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Then override the LOGIN_URL setting</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">(</span><span class=\"n\">LOGIN_URL</span><span class=\"o\">=</span><span class=\"s2\">&quot;/other/login/&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/sekrit/&quot;</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRedirects</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/other/login/?next=/sekrit/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This example will override the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-LOGIN_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOGIN_URL</span></code></a> setting for the code\nin the <code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code> block and reset its value to the previous state afterward.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.modify_settings\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">modify_settings</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.modify_settings\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.modify_settings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>It can prove unwieldy to redefine settings that contain a list of values. In\npractice, adding or removing values is often sufficient. Django provides the\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.modify_settings\" title=\"django.test.SimpleTestCase.modify_settings\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">modify_settings()</span></code></a> context manager for easier\nsettings changes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MiddlewareTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_cache_middleware</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modify_settings</span><span class=\"p\">(</span>\n            <span class=\"n\">MIDDLEWARE</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s2\">&quot;append&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.middleware.cache.FetchFromCacheMiddleware&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;prepend&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.middleware.cache.UpdateCacheMiddleware&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;remove&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                    <span class=\"s2\">&quot;django.contrib.sessions.middleware.SessionMiddleware&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;django.contrib.auth.middleware.AuthenticationMiddleware&quot;</span><span class=\"p\">,</span>\n                    <span class=\"s2\">&quot;django.contrib.messages.middleware.MessageMiddleware&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">],</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n            <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>For each action, you can supply either a list of values or a string. When the\nvalue already exists in the list, <code class=\"docutils literal notranslate\"><span class=\"pre\">append</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">prepend</span></code> have no effect;\nneither does <code class=\"docutils literal notranslate\"><span class=\"pre\">remove</span></code> when the value doesn\u2019t exist.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.override_settings\">\n<code class=\"sig-name descname\"><span class=\"pre\">override_settings</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/utils/#override_settings\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.override_settings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>In case you want to override a setting for a test method, Django provides the\n<a class=\"reference internal\" href=\"#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code></a> decorator (see <span class=\"target\" id=\"index-4\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0318/\"><strong>PEP 318</strong></a>). It\u2019s used\nlike this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">override_settings</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LoginTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@override_settings</span><span class=\"p\">(</span><span class=\"n\">LOGIN_URL</span><span class=\"o\">=</span><span class=\"s2\">&quot;/other/login/&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_login</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/sekrit/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRedirects</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/other/login/?next=/sekrit/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The decorator can also be applied to <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> classes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">override_settings</span>\n\n\n<span class=\"nd\">@override_settings</span><span class=\"p\">(</span><span class=\"n\">LOGIN_URL</span><span class=\"o\">=</span><span class=\"s2\">&quot;/other/login/&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">LoginTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_login</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/sekrit/&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRedirects</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/other/login/?next=/sekrit/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.modify_settings\">\n<code class=\"sig-name descname\"><span class=\"pre\">modify_settings</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/utils/#modify_settings\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.modify_settings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Likewise, Django provides the <a class=\"reference internal\" href=\"#django.test.modify_settings\" title=\"django.test.modify_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">modify_settings()</span></code></a>\ndecorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">modify_settings</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MiddlewareTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@modify_settings</span><span class=\"p\">(</span>\n        <span class=\"n\">MIDDLEWARE</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s2\">&quot;append&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.middleware.cache.FetchFromCacheMiddleware&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;prepend&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.middleware.cache.UpdateCacheMiddleware&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_cache_middleware</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>The decorator can also be applied to test case classes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">modify_settings</span>\n\n\n<span class=\"nd\">@modify_settings</span><span class=\"p\">(</span>\n    <span class=\"n\">MIDDLEWARE</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;append&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.middleware.cache.FetchFromCacheMiddleware&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;prepend&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.middleware.cache.UpdateCacheMiddleware&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MiddlewareTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_cache_middleware</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When given a class, these decorators modify the class directly and return\nit; they don\u2019t create and return a modified copy of it. So if you try to\ntweak the above examples to assign the return value to a different name\nthan <code class=\"docutils literal notranslate\"><span class=\"pre\">LoginTestCase</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">MiddlewareTestCase</span></code>, you may be surprised to\nfind that the original test case classes are still equally affected by the\ndecorator. For a given class, <a class=\"reference internal\" href=\"#django.test.modify_settings\" title=\"django.test.modify_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">modify_settings()</span></code></a> is\nalways applied after <a class=\"reference internal\" href=\"#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code></a>.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>The settings file contains some settings that are only consulted during\ninitialization of Django internals. If you change them with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">override_settings</span></code>, the setting is changed if you access it via the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.settings</span></code> module, however, Django\u2019s internals access it\ndifferently. Effectively, using <a class=\"reference internal\" href=\"#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code></a> or\n<a class=\"reference internal\" href=\"#django.test.modify_settings\" title=\"django.test.modify_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">modify_settings()</span></code></a> with these settings is probably not\ngoing to do what you expect it to do.</p>\n<p>We do not recommend altering the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> setting. Altering\nthe <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> setting is possible, but a bit tricky if you are\nusing internals that make using of caching, like\n<a class=\"reference internal\" href=\"../../http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a>. For example, you will have to reinitialize\nthe session backend in a test that uses cached sessions and overrides\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a>.</p>\n<p class=\"last\">Finally, avoid aliasing your settings as module-level constants as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code> won\u2019t work on such values since they are\nonly evaluated the first time the module is imported.</p>\n</div>\n<p>You can also simulate the absence of a setting by deleting it after settings\nhave been overridden, like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@override_settings</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">del</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">LOGIN_URL</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>When overriding settings, make sure to handle the cases in which your app\u2019s\ncode uses a cache or similar feature that retains state even if the setting is\nchanged. Django provides the <a class=\"reference internal\" href=\"../../../ref/signals/#django.test.signals.setting_changed\" title=\"django.test.signals.setting_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">django.test.signals.setting_changed</span></code></a>\nsignal that lets you register callbacks to clean up and otherwise reset state\nwhen settings are changed.</p>\n<p>Django itself uses this signal to reset various data:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"64%\" />\n<col width=\"36%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Overridden settings</th>\n<th class=\"head\">Data reset</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td>USE_TZ, TIME_ZONE</td>\n<td>Databases timezone</td>\n</tr>\n<tr class=\"row-odd\"><td>TEMPLATES</td>\n<td>Template engines</td>\n</tr>\n<tr class=\"row-even\"><td>SERIALIZATION_MODULES</td>\n<td>Serializers cache</td>\n</tr>\n<tr class=\"row-odd\"><td>LOCALE_PATHS, LANGUAGE_CODE</td>\n<td>Default translation and loaded translations</td>\n</tr>\n<tr class=\"row-even\"><td>DEFAULT_FILE_STORAGE, STATICFILES_STORAGE, STATIC_ROOT, STATIC_URL, STORAGES</td>\n<td>Storages configuration</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"s-isolating-apps\">\n<span id=\"isolating-apps\"></span><h3>Isolating apps<a class=\"headerlink\" href=\"#isolating-apps\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.utils.isolate_apps\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">utils.</span></code><code class=\"sig-name descname\"><span class=\"pre\">isolate_apps</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">app_labels</span></span></em>, <em><span class=\"n\"><span class=\"pre\">attr_name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">kwarg_name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.test.utils.isolate_apps\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Registers the models defined within a wrapped context into their own\nisolated <a class=\"reference internal\" href=\"../../../ref/applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">apps</span></code></a> registry. This functionality is useful\nwhen creating model classes for tests, as the classes will be cleanly\ndeleted afterward, and there is no risk of name collisions.</p>\n<p>The app labels which the isolated registry should contain must be passed as\nindividual arguments. You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">isolate_apps()</span></code> as a decorator or a\ncontext manager. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleTestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">isolate_apps</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModelTests</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@isolate_apps</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_model_definition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">class</span> <span class=\"nc\">TestModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>\u2026 or:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">isolate_apps</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">TestModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>The decorator form can also be applied to classes.</p>\n<p>Two optional keyword arguments can be specified:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">attr_name</span></code>: attribute assigned the isolated registry if used as a\nclass decorator.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">kwarg_name</span></code>: keyword argument passing the isolated registry if used as\na function decorator.</li>\n</ul>\n<p>The temporary <code class=\"docutils literal notranslate\"><span class=\"pre\">Apps</span></code> instance used to isolate model registration can be\nretrieved as an attribute when used as a class decorator by using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">attr_name</span></code> parameter:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@isolate_apps</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">,</span> <span class=\"n\">attr_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;apps&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestModelDefinition</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_model_definition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">class</span> <span class=\"nc\">TestModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TestModel&quot;</span><span class=\"p\">),</span> <span class=\"n\">TestModel</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026 or alternatively as an argument on the test method when used as a method\ndecorator by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">kwarg_name</span></code> parameter:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">TestModelDefinition</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@isolate_apps</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">,</span> <span class=\"n\">kwarg_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;apps&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_model_definition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">apps</span><span class=\"p\">):</span>\n        <span class=\"k\">class</span> <span class=\"nc\">TestModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIs</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;TestModel&quot;</span><span class=\"p\">),</span> <span class=\"n\">TestModel</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-emptying-the-test-outbox\">\n<span id=\"s-emptying-test-outbox\"></span><span id=\"emptying-the-test-outbox\"></span><span id=\"emptying-test-outbox\"></span><h3>Emptying the test outbox<a class=\"headerlink\" href=\"#emptying-the-test-outbox\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you use any of Django\u2019s custom <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> classes, the test runner will\nclear the contents of the test email outbox at the start of each test case.</p>\n<p>For more detail on email services during tests, see <a class=\"reference internal\" href=\"#email-services\">Email services</a> below.</p>\n</div>\n<div class=\"section\" id=\"s-assertions\">\n<span id=\"s-id2\"></span><span id=\"assertions\"></span><span id=\"id2\"></span><h3>Assertions<a class=\"headerlink\" href=\"#assertions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As Python\u2019s normal <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">unittest.TestCase</span></code></a> class implements assertion methods\nsuch as <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertTrue()</span></code></a> and\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertEqual()</span></code></a>, Django\u2019s custom <a class=\"reference internal\" href=\"#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> class\nprovides a number of custom assertion methods that are useful for testing web\napplications:</p>\n<p>The failure messages given by most of these assertion methods can be customized\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg_prefix</span></code> argument. This string will be prefixed to any failure\nmessage generated by the assertion. This allows you to provide additional\ndetails that may help you to identify the location and cause of a failure in\nyour test suite.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertRaisesMessage\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertRaisesMessage</span></code>(<em><span class=\"n\"><span class=\"pre\">expected_exception</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_message</span></span></em>, <em><span class=\"n\"><span class=\"pre\">callable</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertRaisesMessage\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertRaisesMessage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dt class=\"sig sig-object py\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertRaisesMessage</span></code>(<em><span class=\"n\"><span class=\"pre\">expected_exception</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_message</span></span></em>)</dt>\n<dd><p>Asserts that execution of <code class=\"docutils literal notranslate\"><span class=\"pre\">callable</span></code> raises <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_exception</span></code> and\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_message</span></code> is found in the exception\u2019s message. Any other\noutcome is reported as a failure. It\u2019s a simpler version of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">unittest.TestCase.assertRaisesRegex()</span></code></a> with the difference that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">expected_message</span></code> isn\u2019t treated as a regular expression.</p>\n<p>If only the <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_exception</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_message</span></code> parameters are\ngiven, returns a context manager so that the code being tested can be\nwritten inline rather than as a function:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertRaisesMessage</span><span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"s2\">&quot;invalid literal for int()&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertWarnsMessage\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertWarnsMessage</span></code>(<em><span class=\"n\"><span class=\"pre\">expected_warning</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_message</span></span></em>, <em><span class=\"n\"><span class=\"pre\">callable</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertWarnsMessage\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertWarnsMessage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dt class=\"sig sig-object py\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertWarnsMessage</span></code>(<em><span class=\"n\"><span class=\"pre\">expected_warning</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_message</span></span></em>)</dt>\n<dd><p>Analogous to <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertRaisesMessage\" title=\"django.test.SimpleTestCase.assertRaisesMessage\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SimpleTestCase.assertRaisesMessage()</span></code></a> but for\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertWarnsRegex()</span></code></a> instead of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRaisesRegex()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertFieldOutput\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertFieldOutput</span></code>(<em><span class=\"n\"><span class=\"pre\">fieldclass</span></span></em>, <em><span class=\"n\"><span class=\"pre\">valid</span></span></em>, <em><span class=\"n\"><span class=\"pre\">invalid</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field_args</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field_kwargs</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">empty_value</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertFieldOutput\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertFieldOutput\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that a form field behaves correctly with various inputs.</p>\n<table class=\"docutils field-list\" frame=\"void\" rules=\"none\">\n<col class=\"field-name\" />\n<col class=\"field-body\" />\n<tbody valign=\"top\">\n<tr class=\"field-odd field\"><th class=\"field-name\">Parameters:</th><td class=\"field-body\"><ul class=\"first last simple\">\n<li><strong>fieldclass</strong> \u2013 the class of the field to be tested.</li>\n<li><strong>valid</strong> \u2013 a dictionary mapping valid inputs to their expected cleaned\nvalues.</li>\n<li><strong>invalid</strong> \u2013 a dictionary mapping invalid inputs to one or more raised\nerror messages.</li>\n<li><strong>field_args</strong> \u2013 the args passed to instantiate the field.</li>\n<li><strong>field_kwargs</strong> \u2013 the kwargs passed to instantiate the field.</li>\n<li><strong>empty_value</strong> \u2013 the expected clean output for inputs in <code class=\"docutils literal notranslate\"><span class=\"pre\">empty_values</span></code>.</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<p>For example, the following code tests that an <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailField</span></code> accepts\n<code class=\"docutils literal notranslate\"><span class=\"pre\">a&#64;a.com</span></code> as a valid email address, but rejects <code class=\"docutils literal notranslate\"><span class=\"pre\">aaa</span></code> with a reasonable\nerror message:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFieldOutput</span><span class=\"p\">(</span>\n    <span class=\"n\">EmailField</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;a@a.com&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a@a.com&quot;</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s2\">&quot;aaa&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Enter a valid email address.&quot;</span><span class=\"p\">]}</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertFormError\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertFormError</span></code>(<em><span class=\"n\"><span class=\"pre\">form</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field</span></span></em>, <em><span class=\"n\"><span class=\"pre\">errors</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertFormError\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertFormError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that a field on a form raises the provided list of errors.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">form</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> instance. The form must be\n<a class=\"reference internal\" href=\"../../../ref/forms/api/#ref-forms-api-bound-unbound\"><span class=\"std std-ref\">bound</span></a> but not necessarily\nvalidated (<code class=\"docutils literal notranslate\"><span class=\"pre\">assertFormError()</span></code> will automatically call <code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code>\non the form).</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">field</span></code> is the name of the field on the form to check. To check the form\u2019s\n<a class=\"reference internal\" href=\"../../../ref/forms/api/#django.forms.Form.non_field_errors\" title=\"django.forms.Form.non_field_errors\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">non-field</span> <span class=\"pre\">errors</span></code></a>, use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">field=None</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">errors</span></code> is a list of all the error strings that the field is expected to\nhave. You can also pass a single error string if you only expect one error\nwhich means that <code class=\"docutils literal notranslate\"><span class=\"pre\">errors='error</span> <span class=\"pre\">message'</span></code> is the same as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">errors=['error</span> <span class=\"pre\">message']</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertFormSetError\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertFormSetError</span></code>(<em><span class=\"n\"><span class=\"pre\">formset</span></span></em>, <em><span class=\"n\"><span class=\"pre\">form_index</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field</span></span></em>, <em><span class=\"n\"><span class=\"pre\">errors</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertFormSetError\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertFormSetError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the <code class=\"docutils literal notranslate\"><span class=\"pre\">formset</span></code> raises the provided list of errors when\nrendered.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">formset</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">FormSet</span></code> instance. The formset must be bound but not\nnecessarily validated (<code class=\"docutils literal notranslate\"><span class=\"pre\">assertFormSetError()</span></code> will automatically call the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code> on the formset).</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">form_index</span></code> is the number of the form within the <code class=\"docutils literal notranslate\"><span class=\"pre\">FormSet</span></code> (starting\nfrom 0). Use <code class=\"docutils literal notranslate\"><span class=\"pre\">form_index=None</span></code> to check the formset\u2019s non-form errors,\ni.e. the errors you get when calling <code class=\"docutils literal notranslate\"><span class=\"pre\">formset.non_form_errors()</span></code>. In that\ncase you must also use <code class=\"docutils literal notranslate\"><span class=\"pre\">field=None</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">field</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">errors</span></code> have the same meaning as the parameters to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">assertFormError()</span></code>.</p>\n<div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span>The <code class=\"docutils literal notranslate\"><span class=\"pre\">assertFormsetError()</span></code> assertion method is deprecated. Use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">assertFormSetError()</span></code> instead.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertContains\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertContains</span></code>(<em><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em><span class=\"n\"><span class=\"pre\">text</span></span></em>, <em><span class=\"n\"><span class=\"pre\">count</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">status_code</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">200</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertContains\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertContains\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that a <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">response</span></code></a> produced the\ngiven <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse.status_code\" title=\"django.http.HttpResponse.status_code\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">status_code</span></code></a> and that <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code>\nappears in its <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse.content\" title=\"django.http.HttpResponse.content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">content</span></code></a>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code>\nis provided, <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> must occur exactly <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code> times in the response.</p>\n<p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">html</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to handle <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> as HTML. The comparison with\nthe response content will be based on HTML semantics instead of\ncharacter-by-character equality. Whitespace is ignored in most cases,\nattribute ordering is not significant. See\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"django.test.SimpleTestCase.assertHTMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertHTMLEqual()</span></code></a> for more details.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertNotContains\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertNotContains</span></code>(<em><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em><span class=\"n\"><span class=\"pre\">text</span></span></em>, <em><span class=\"n\"><span class=\"pre\">status_code</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">200</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertNotContains\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertNotContains\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that a <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">response</span></code></a> produced the\ngiven <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse.status_code\" title=\"django.http.HttpResponse.status_code\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">status_code</span></code></a> and that <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> does\n<em>not</em> appear in its <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse.content\" title=\"django.http.HttpResponse.content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">content</span></code></a>.</p>\n<p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">html</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to handle <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> as HTML. The comparison with\nthe response content will be based on HTML semantics instead of\ncharacter-by-character equality. Whitespace is ignored in most cases,\nattribute ordering is not significant. See\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"django.test.SimpleTestCase.assertHTMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertHTMLEqual()</span></code></a> for more details.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertTemplateUsed\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertTemplateUsed</span></code>(<em><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em><span class=\"n\"><span class=\"pre\">template_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">count</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertTemplateUsed\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertTemplateUsed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the template with the given name was used in rendering the\nresponse.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">response</span></code> must be a response instance returned by the\n<a class=\"reference internal\" href=\"#django.test.Response\" title=\"django.test.Response\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">client</span></code></a>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code> should be a string such as <code class=\"docutils literal notranslate\"><span class=\"pre\">'admin/index.html'</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code> argument is an integer indicating the number of times the\ntemplate should be rendered. Default is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, meaning that the template\nshould be rendered one or more times.</p>\n<p>You can use this as a context manager, like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTemplateUsed</span><span class=\"p\">(</span><span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">):</span>\n    <span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertTemplateUsed</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">):</span>\n    <span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertTemplateNotUsed\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertTemplateNotUsed</span></code>(<em><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em><span class=\"n\"><span class=\"pre\">template_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertTemplateNotUsed\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertTemplateNotUsed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the template with the given name was <em>not</em> used in rendering\nthe response.</p>\n<p>You can use this as a context manager in the same way as\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertTemplateUsed\" title=\"django.test.SimpleTestCase.assertTemplateUsed\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertTemplateUsed()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertURLEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertURLEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">url1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">url2</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertURLEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertURLEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that two URLs are the same, ignoring the order of query string\nparameters except for parameters with the same name. For example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/path/?x=1&amp;y=2</span></code> is equal to <code class=\"docutils literal notranslate\"><span class=\"pre\">/path/?y=2&amp;x=1</span></code>, but\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/path/?a=1&amp;a=2</span></code> isn\u2019t equal to <code class=\"docutils literal notranslate\"><span class=\"pre\">/path/?a=2&amp;a=1</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertRedirects\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertRedirects</span></code>(<em><span class=\"n\"><span class=\"pre\">response</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_url</span></span></em>, <em><span class=\"n\"><span class=\"pre\">status_code</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">302</span></span></em>, <em><span class=\"n\"><span class=\"pre\">target_status_code</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">200</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fetch_redirect_response</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertRedirects\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertRedirects\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">response</span></code></a> returned a\n<a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse.status_code\" title=\"django.http.HttpResponse.status_code\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">status_code</span></code></a> redirect status, redirected\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_url</span></code> (including any <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> data), and that the final page\nwas received with <code class=\"docutils literal notranslate\"><span class=\"pre\">target_status_code</span></code>.</p>\n<p>If your request used the <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code> argument, the <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_url</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">target_status_code</span></code> will be the url and status code for the final\npoint of the redirect chain.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">fetch_redirect_response</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the final page won\u2019t be\nloaded. Since the test client can\u2019t fetch external URLs, this is\nparticularly useful if <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_url</span></code> isn\u2019t part of your Django app.</p>\n<p>Scheme is handled correctly when making comparisons between two URLs. If\nthere isn\u2019t any scheme specified in the location where we are redirected to,\nthe original request\u2019s scheme is used. If present, the scheme in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">expected_url</span></code> is the one used to make the comparisons to.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertHTMLEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertHTMLEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">html1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html2</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertHTMLEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the strings <code class=\"docutils literal notranslate\"><span class=\"pre\">html1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">html2</span></code> are equal. The comparison\nis based on HTML semantics. The comparison takes following things into\naccount:</p>\n<ul class=\"simple\">\n<li>Whitespace before and after HTML tags is ignored.</li>\n<li>All types of whitespace are considered equivalent.</li>\n<li>All open tags are closed implicitly, e.g. when a surrounding tag is\nclosed or the HTML document ends.</li>\n<li>Empty tags are equivalent to their self-closing version.</li>\n<li>The ordering of attributes of an HTML element is not significant.</li>\n<li>Boolean attributes (like <code class=\"docutils literal notranslate\"><span class=\"pre\">checked</span></code>) without an argument are equal to\nattributes that equal in name and value (see the examples).</li>\n<li>Text, character references, and entity references that refer to the same\ncharacter are equivalent.</li>\n</ul>\n<p>The following examples are valid tests and don\u2019t raise any\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AssertionError</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHTMLEqual</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;&lt;p&gt;Hello &lt;b&gt;&amp;#x27;world&amp;#x27;!&lt;/p&gt;&quot;</span><span class=\"p\">,</span>\n    <span class=\"sd\">&quot;&quot;&quot;&lt;p&gt;</span>\n<span class=\"sd\">        Hello   &lt;b&gt;&amp;#39;world&amp;#39;! &lt;/b&gt;</span>\n<span class=\"sd\">    &lt;/p&gt;&quot;&quot;&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertHTMLEqual</span><span class=\"p\">(</span>\n    <span class=\"s1\">&#39;&lt;input type=&quot;checkbox&quot; checked=&quot;checked&quot; id=&quot;id_accept_terms&quot; /&gt;&#39;</span><span class=\"p\">,</span>\n    <span class=\"s1\">&#39;&lt;input id=&quot;id_accept_terms&quot; type=&quot;checkbox&quot; checked&gt;&#39;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">html1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">html2</span></code> must contain HTML. An <code class=\"docutils literal notranslate\"><span class=\"pre\">AssertionError</span></code> will be\nraised if one of them cannot be parsed.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertHTMLNotEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertHTMLNotEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">html1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">html2</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertHTMLNotEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertHTMLNotEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the strings <code class=\"docutils literal notranslate\"><span class=\"pre\">html1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">html2</span></code> are <em>not</em> equal. The\ncomparison is based on HTML semantics. See\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"django.test.SimpleTestCase.assertHTMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertHTMLEqual()</span></code></a> for details.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">html1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">html2</span></code> must contain HTML. An <code class=\"docutils literal notranslate\"><span class=\"pre\">AssertionError</span></code> will be\nraised if one of them cannot be parsed.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertXMLEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertXMLEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">xml1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">xml2</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertXMLEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertXMLEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the strings <code class=\"docutils literal notranslate\"><span class=\"pre\">xml1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">xml2</span></code> are equal. The\ncomparison is based on XML semantics. Similarly to\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"django.test.SimpleTestCase.assertHTMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertHTMLEqual()</span></code></a>, the comparison is\nmade on parsed content, hence only semantic differences are considered, not\nsyntax differences. When invalid XML is passed in any parameter, an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AssertionError</span></code> is always raised, even if both strings are identical.</p>\n<p>XML declaration, document type, processing instructions, and comments are\nignored. Only the root element and its children are compared.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertXMLNotEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertXMLNotEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">xml1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">xml2</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertXMLNotEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertXMLNotEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the strings <code class=\"docutils literal notranslate\"><span class=\"pre\">xml1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">xml2</span></code> are <em>not</em> equal. The\ncomparison is based on XML semantics. See\n<a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertXMLEqual\" title=\"django.test.SimpleTestCase.assertXMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertXMLEqual()</span></code></a> for details.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertInHTML\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertInHTML</span></code>(<em><span class=\"n\"><span class=\"pre\">needle</span></span></em>, <em><span class=\"n\"><span class=\"pre\">haystack</span></span></em>, <em><span class=\"n\"><span class=\"pre\">count</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertInHTML\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertInHTML\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the HTML fragment <code class=\"docutils literal notranslate\"><span class=\"pre\">needle</span></code> is contained in the <code class=\"docutils literal notranslate\"><span class=\"pre\">haystack</span></code>\nonce.</p>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code> integer argument is specified, then additionally the number\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">needle</span></code> occurrences will be strictly verified.</p>\n<p>Whitespace in most cases is ignored, and attribute ordering is not\nsignificant. See <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertHTMLEqual\" title=\"django.test.SimpleTestCase.assertHTMLEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertHTMLEqual()</span></code></a> for more details.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertJSONEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertJSONEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">raw</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_data</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertJSONEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertJSONEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the JSON fragments <code class=\"docutils literal notranslate\"><span class=\"pre\">raw</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_data</span></code> are equal.\nUsual JSON non-significant whitespace rules apply as the heavyweight is\ndelegated to the <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> library.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.SimpleTestCase.assertJSONNotEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">SimpleTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertJSONNotEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">raw</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expected_data</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#SimpleTestCase.assertJSONNotEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.SimpleTestCase.assertJSONNotEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that the JSON fragments <code class=\"docutils literal notranslate\"><span class=\"pre\">raw</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_data</span></code> are <em>not</em> equal.\nSee <a class=\"reference internal\" href=\"#django.test.SimpleTestCase.assertJSONEqual\" title=\"django.test.SimpleTestCase.assertJSONEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertJSONEqual()</span></code></a> for further details.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase.assertQuerySetEqual\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TransactionTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertQuerySetEqual</span></code>(<em><span class=\"n\"><span class=\"pre\">qs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">values</span></span></em>, <em><span class=\"n\"><span class=\"pre\">transform</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">ordered</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">msg</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#TransactionTestCase.assertQuerySetEqual\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.TransactionTestCase.assertQuerySetEqual\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that a queryset <code class=\"docutils literal notranslate\"><span class=\"pre\">qs</span></code> matches a particular iterable of values\n<code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code>.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">transform</span></code> is provided, <code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code> is compared to a list produced by\napplying <code class=\"docutils literal notranslate\"><span class=\"pre\">transform</span></code> to each member of <code class=\"docutils literal notranslate\"><span class=\"pre\">qs</span></code>.</p>\n<p>By default, the comparison is also ordering dependent. If <code class=\"docutils literal notranslate\"><span class=\"pre\">qs</span></code> doesn\u2019t\nprovide an implicit ordering, you can set the <code class=\"docutils literal notranslate\"><span class=\"pre\">ordered</span></code> parameter to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, which turns the comparison into a <code class=\"docutils literal notranslate\"><span class=\"pre\">collections.Counter</span></code> comparison.\nIf the order is undefined (if the given <code class=\"docutils literal notranslate\"><span class=\"pre\">qs</span></code> isn\u2019t ordered and the\ncomparison is against more than one ordered value), a <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> is\nraised.</p>\n<p>Output in case of error can be customized with the <code class=\"docutils literal notranslate\"><span class=\"pre\">msg</span></code> argument.</p>\n<div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span>The <code class=\"docutils literal notranslate\"><span class=\"pre\">assertQuerysetEqual()</span></code> assertion method is deprecated. Use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">assertQuerySetEqual()</span></code> instead.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase.assertNumQueries\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TransactionTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">assertNumQueries</span></code>(<em><span class=\"n\"><span class=\"pre\">num</span></span></em>, <em><span class=\"n\"><span class=\"pre\">func</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#TransactionTestCase.assertNumQueries\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.TransactionTestCase.assertNumQueries\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Asserts that when <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code> is called with <code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">num</span></code> database queries are executed.</p>\n<p>If a <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;using&quot;</span></code> key is present in <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> it is used as the database\nalias for which to check the number of queries:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertNumQueries</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"s2\">&quot;non_default_db&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you wish to call a function with a <code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code> parameter you can do it by\nwrapping the call with a <code class=\"docutils literal notranslate\"><span class=\"pre\">lambda</span></code> to add an extra parameter:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertNumQueries</span><span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">my_function</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>You can also use this as a context manager:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertNumQueries</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n    <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Aaron&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Daniel&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-tagging-tests\">\n<span id=\"s-topics-tagging-tests\"></span><span id=\"tagging-tests\"></span><span id=\"topics-tagging-tests\"></span><h3>Tagging tests<a class=\"headerlink\" href=\"#tagging-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can tag your tests so you can easily run a particular subset. For example,\nyou might label fast or slow tests:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">tag</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SampleTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;fast&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_fast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"nd\">@tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;slow&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_slow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"nd\">@tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;slow&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_slow_but_core</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>You can also tag a test case:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;slow&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;core&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">SampleTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Subclasses inherit tags from superclasses, and methods inherit tags from their\nclass. Given:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">SampleTestCaseChild</span><span class=\"p\">(</span><span class=\"n\">SampleTestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SampleTestCaseChild.test</span></code> will be labeled with <code class=\"docutils literal notranslate\"><span class=\"pre\">'slow'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'core'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'bar'</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">'foo'</span></code>.</p>\n<p>Then you can choose which tests to run. For example, to run only fast tests:</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./manage.py <span class=\"nb\">test</span> --tag<span class=\"o\">=</span>fast\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> manage.py test --tag=fast\n</pre></div>\n</section>\n</div>\n<p>Or to run fast tests and the core one (even though it\u2019s slow):</p>\n<div class=\"console-block\" id=\"console-block-3\">\n<input class=\"c-tab-unix\" id=\"c-tab-3-unix\" type=\"radio\" name=\"console-3\" checked>\n<label for=\"c-tab-3-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-3-win\" type=\"radio\" name=\"console-3\">\n<label for=\"c-tab-3-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-3-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./manage.py <span class=\"nb\">test</span> --tag<span class=\"o\">=</span>fast --tag<span class=\"o\">=</span>core\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-3-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> manage.py test --tag=fast --tag=core\n</pre></div>\n</section>\n</div>\n<p>You can also exclude tests by tag. To run core tests if they are not slow:</p>\n<div class=\"console-block\" id=\"console-block-4\">\n<input class=\"c-tab-unix\" id=\"c-tab-4-unix\" type=\"radio\" name=\"console-4\" checked>\n<label for=\"c-tab-4-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-4-win\" type=\"radio\" name=\"console-4\">\n<label for=\"c-tab-4-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-4-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./manage.py <span class=\"nb\">test</span> --tag<span class=\"o\">=</span>core --exclude-tag<span class=\"o\">=</span>slow\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-4-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> manage.py test --tag=core --exclude-tag=slow\n</pre></div>\n</section>\n</div>\n<p><a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-exclude-tag\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">--exclude-tag</span></code></a> has precedence over <a class=\"reference internal\" href=\"../../../ref/django-admin/#cmdoption-test-tag\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">test</span> <span class=\"pre\">--tag</span></code></a>, so if a\ntest has two tags and you select one of them and exclude the other, the test\nwon\u2019t be run.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-testing-asynchronous-code\">\n<span id=\"s-async-tests\"></span><span id=\"testing-asynchronous-code\"></span><span id=\"async-tests\"></span><h2>Testing asynchronous code<a class=\"headerlink\" href=\"#testing-asynchronous-code\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you merely want to test the output of your asynchronous views, the standard\ntest client will run them inside their own asynchronous loop without any extra\nwork needed on your part.</p>\n<p>However, if you want to write fully-asynchronous tests for a Django project,\nyou will need to take several things into account.</p>\n<p>Firstly, your tests must be <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code> methods on the test class (in order\nto give them an asynchronous context). Django will automatically detect\nany <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code> tests and wrap them so they run in their own event loop.</p>\n<p>If you are testing from an asynchronous function, you must also use the\nasynchronous test client. This is available as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.AsyncClient</span></code>,\nor as <code class=\"docutils literal notranslate\"><span class=\"pre\">self.async_client</span></code> on any test.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.AsyncClient\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">AsyncClient</span></code>(<em><span class=\"n\"><span class=\"pre\">enforce_csrf_checks</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">raise_request_exception</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">defaults</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/client/#AsyncClient\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.AsyncClient\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">AsyncClient</span></code> has the same methods and signatures as the synchronous (normal)\ntest client, with two exceptions:</p>\n<ul>\n<li><p class=\"first\">In the initialization, arbitrary keyword arguments in <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> are added\ndirectly into the ASGI scope.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code> parameter is not supported.</p>\n</li>\n<li><p class=\"first\">Headers passed as <code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> keyword arguments should not have the <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_</span></code>\nprefix required by the synchronous client (see <a class=\"reference internal\" href=\"#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a>). For\nexample, here is how to set an HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept</span></code> header:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">AsyncClient</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customers/details/&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fred&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">7</span><span class=\"p\">},</span> <span class=\"n\">ACCEPT</span><span class=\"o\">=</span><span class=\"s2\">&quot;application/json&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">AsyncClient</span></code> any method that makes a request must be awaited:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_my_thing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">async_client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/some-url/&quot;</span><span class=\"p\">)</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The asynchronous client can also call synchronous views; it runs through\nDjango\u2019s <a class=\"reference internal\" href=\"../../async/\"><span class=\"doc\">asynchronous request path</span></a>, which supports both.\nAny view called through the <code class=\"docutils literal notranslate\"><span class=\"pre\">AsyncClient</span></code> will get an <code class=\"docutils literal notranslate\"><span class=\"pre\">ASGIRequest</span></code> object\nfor its <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> rather than the <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code> that the normal client\ncreates.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>If you are using test decorators, they must be async-compatible to ensure\nthey work correctly. Django\u2019s built-in decorators will behave correctly, but\nthird-party ones may appear to not execute (they will \u201cwrap\u201d the wrong part\nof the execution flow and not your test).</p>\n<p>If you need to use these decorators, then you should decorate your test\nmethods with <a class=\"reference internal\" href=\"../../async/#asgiref.sync.async_to_sync\" title=\"asgiref.sync.async_to_sync\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">async_to_sync()</span></code></a> <em>inside</em> of them instead:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">asgiref.sync</span> <span class=\"kn\">import</span> <span class=\"n\">async_to_sync</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@mock</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"nd\">@async_to_sync</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_my_thing</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-email-services\">\n<span id=\"s-topics-testing-email\"></span><span id=\"email-services\"></span><span id=\"topics-testing-email\"></span><h2>Email services<a class=\"headerlink\" href=\"#email-services\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If any of your Django views send email using <a class=\"reference internal\" href=\"../../email/\"><span class=\"doc\">Django\u2019s email\nfunctionality</span></a>, you probably don\u2019t want to send email each time\nyou run a test using that view. For this reason, Django\u2019s test runner\nautomatically redirects all Django-sent email to a dummy outbox. This lets you\ntest every aspect of sending email \u2013 from the number of messages sent to the\ncontents of each message \u2013 without actually sending the messages.</p>\n<p>The test runner accomplishes this by transparently replacing the normal\nemail backend with a testing backend.\n(Don\u2019t worry \u2013 this has no effect on any other email senders outside of\nDjango, such as your machine\u2019s mail server, if you\u2019re running one.)</p>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.core.mail.django.core.mail.outbox\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.core.mail.</span></code><code class=\"sig-name descname\"><span class=\"pre\">outbox</span></code><a class=\"headerlink\" href=\"#django.core.mail.django.core.mail.outbox\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>During test running, each outgoing email is saved in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.outbox</span></code>. This is a list of all\n<a class=\"reference internal\" href=\"../../email/#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> instances that have been sent.  The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">outbox</span></code> attribute is a special attribute that is created <em>only</em> when the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">locmem</span></code> email backend is used. It doesn\u2019t normally exist as part of the\n<a class=\"reference internal\" href=\"../../email/#module-django.core.mail\" title=\"django.core.mail: Helpers to easily send email.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.core.mail</span></code></a> module and you can\u2019t import it directly. The code below\nshows how to access this attribute correctly.</p>\n<p>Here\u2019s an example test that examines <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.mail.outbox</span></code> for length\nand contents:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">mail</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">EmailTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_send_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Send message.</span>\n        <span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">send_mail</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Subject here&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Here is the message.&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;from@example.com&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;to@example.com&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">fail_silently</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"c1\"># Test that one message has been sent.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">outbox</span><span class=\"p\">),</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Verify that the subject of the first message is correct.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">outbox</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Subject here&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As noted <a class=\"reference internal\" href=\"#emptying-test-outbox\"><span class=\"std std-ref\">previously</span></a>, the test outbox is emptied\nat the start of every test in a Django <code class=\"docutils literal notranslate\"><span class=\"pre\">*TestCase</span></code>. To empty the outbox\nmanually, assign the empty list to <code class=\"docutils literal notranslate\"><span class=\"pre\">mail.outbox</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">mail</span>\n\n<span class=\"c1\"># Empty the test outbox</span>\n<span class=\"n\">mail</span><span class=\"o\">.</span><span class=\"n\">outbox</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-management-commands\">\n<span id=\"s-topics-testing-management-commands\"></span><span id=\"management-commands\"></span><span id=\"topics-testing-management-commands\"></span><h2>Management Commands<a class=\"headerlink\" href=\"#management-commands\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Management commands can be tested with the\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#django.core.management.call_command\" title=\"django.core.management.call_command\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">call_command()</span></code></a> function. The output can be\nredirected into a <code class=\"docutils literal notranslate\"><span class=\"pre\">StringIO</span></code> instance:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.management</span> <span class=\"kn\">import</span> <span class=\"n\">call_command</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ClosepollTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_command_output</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">StringIO</span><span class=\"p\">()</span>\n        <span class=\"n\">call_command</span><span class=\"p\">(</span><span class=\"s2\">&quot;closepoll&quot;</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">out</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIn</span><span class=\"p\">(</span><span class=\"s2\">&quot;Expected output&quot;</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-skipping-tests\">\n<span id=\"s-id3\"></span><span id=\"skipping-tests\"></span><span id=\"id3\"></span><h2>Skipping tests<a class=\"headerlink\" href=\"#skipping-tests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The unittest library provides the <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.skipIf\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;skipIf</span></code></a> and\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.skipUnless\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;skipUnless</span></code></a> decorators to allow you to skip tests\nif you know ahead of time that those tests are going to fail under certain\nconditions.</p>\n<p>For example, if your test requires a particular optional library in order to\nsucceed, you could decorate the test case with <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#unittest.skipIf\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;skipIf</span></code></a>. Then, the test runner will report that the test wasn\u2019t\nexecuted and why, instead of failing the test or omitting the test altogether.</p>\n<p>To supplement these test skipping behaviors, Django provides two\nadditional skip decorators. Instead of testing a generic boolean,\nthese decorators check the capabilities of the database, and skip the\ntest if the database doesn\u2019t support a specific named feature.</p>\n<p>The decorators use a string identifier to describe database features.\nThis string corresponds to attributes of the database connection\nfeatures class. See\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/db/backends/base/features.py\">django.db.backends.base.features.BaseDatabaseFeatures class</a> for a full list of database features\nthat can be used as a basis for skipping tests.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.skipIfDBFeature\">\n<code class=\"sig-name descname\"><span class=\"pre\">skipIfDBFeature</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">feature_name_strings</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#skipIfDBFeature\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.skipIfDBFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Skip the decorated test or <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> if all of the named database features\nare supported.</p>\n<p>For example, the following test will not be executed if the database\nsupports transactions (e.g., it would <em>not</em> run under PostgreSQL, but\nit would under MySQL with MyISAM tables):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@skipIfDBFeature</span><span class=\"p\">(</span><span class=\"s2\">&quot;supports_transactions&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_transaction_behavior</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ... conditional test code</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.skipUnlessDBFeature\">\n<code class=\"sig-name descname\"><span class=\"pre\">skipUnlessDBFeature</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">feature_name_strings</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/testcases/#skipUnlessDBFeature\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.skipUnlessDBFeature\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Skip the decorated test or <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> if any of the named database features\nare <em>not</em> supported.</p>\n<p>For example, the following test will only be executed if the database\nsupports transactions (e.g., it would run under PostgreSQL, but <em>not</em>\nunder MySQL with MyISAM tables):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@skipUnlessDBFeature</span><span class=\"p\">(</span><span class=\"s2\">&quot;supports_transactions&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_transaction_behavior</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ... conditional test code</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/testing/advanced", "Advanced testing topics", "N", "next"], ["topics/testing/overview", "Writing and running tests", "P", "previous"]], "sourcename": "topics/testing/tools.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Testing tools</a><ul>\n<li><a class=\"reference internal\" href=\"#the-test-client\">The test client</a><ul>\n<li><a class=\"reference internal\" href=\"#overview-and-a-quick-example\">Overview and a quick example</a></li>\n<li><a class=\"reference internal\" href=\"#making-requests\">Making requests</a></li>\n<li><a class=\"reference internal\" href=\"#testing-responses\">Testing responses</a></li>\n<li><a class=\"reference internal\" href=\"#exceptions\">Exceptions</a></li>\n<li><a class=\"reference internal\" href=\"#persistent-state\">Persistent state</a></li>\n<li><a class=\"reference internal\" href=\"#setting-the-language\">Setting the language</a></li>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#provided-test-case-classes\">Provided test case classes</a><ul>\n<li><a class=\"reference internal\" href=\"#simpletestcase\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#transactiontestcase\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#testcase\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#liveservertestcase\"><code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#test-cases-features\">Test cases features</a><ul>\n<li><a class=\"reference internal\" href=\"#default-test-client\">Default test client</a></li>\n<li><a class=\"reference internal\" href=\"#customizing-the-test-client\">Customizing the test client</a></li>\n<li><a class=\"reference internal\" href=\"#fixture-loading\">Fixture loading</a></li>\n<li><a class=\"reference internal\" href=\"#urlconf-configuration\">URLconf configuration</a></li>\n<li><a class=\"reference internal\" href=\"#multi-database-support\">Multi-database support</a></li>\n<li><a class=\"reference internal\" href=\"#overriding-settings\">Overriding settings</a></li>\n<li><a class=\"reference internal\" href=\"#isolating-apps\">Isolating apps</a></li>\n<li><a class=\"reference internal\" href=\"#emptying-the-test-outbox\">Emptying the test outbox</a></li>\n<li><a class=\"reference internal\" href=\"#assertions\">Assertions</a></li>\n<li><a class=\"reference internal\" href=\"#tagging-tests\">Tagging tests</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#testing-asynchronous-code\">Testing asynchronous code</a></li>\n<li><a class=\"reference internal\" href=\"#email-services\">Email services</a></li>\n<li><a class=\"reference internal\" href=\"#management-commands\">Management Commands</a></li>\n<li><a class=\"reference internal\" href=\"#skipping-tests\">Skipping tests</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/testing/tools", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
