{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Testing in Django"}], "prev": {"link": "../tools/", "title": "Testing tools"}, "next": {"link": "../../auth/", "title": "User authentication in Django"}, "title": "Advanced testing topics", "meta": {}, "body": "<div class=\"section\" id=\"s-advanced-testing-topics\">\n<span id=\"advanced-testing-topics\"></span><h1>Advanced testing topics<a class=\"headerlink\" href=\"#advanced-testing-topics\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-the-request-factory\">\n<span id=\"the-request-factory\"></span><h2>The request factory<a class=\"headerlink\" href=\"#the-request-factory\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.RequestFactory\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RequestFactory</span></code><a class=\"reference internal\" href=\"../../../_modules/django/test/client/#RequestFactory\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.RequestFactory\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <a class=\"reference internal\" href=\"#django.test.RequestFactory\" title=\"django.test.RequestFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestFactory</span></code></a> shares the same API as\nthe test client. However, instead of behaving like a browser, the\nRequestFactory provides a way to generate a request instance that can\nbe used as the first argument to any view. This means you can test a\nview function the same way as you would test any other function \u2013 as\na black box, with exactly known inputs, testing for specific outputs.</p>\n<p>The API for the <a class=\"reference internal\" href=\"#django.test.RequestFactory\" title=\"django.test.RequestFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestFactory</span></code></a> is a slightly\nrestricted subset of the test client API:</p>\n<ul class=\"simple\">\n<li>It only has access to the HTTP methods <a class=\"reference internal\" href=\"../tools/#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>,\n<a class=\"reference internal\" href=\"../tools/#django.test.Client.post\" title=\"django.test.Client.post\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">post()</span></code></a>, <a class=\"reference internal\" href=\"../tools/#django.test.Client.put\" title=\"django.test.Client.put\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">put()</span></code></a>,\n<a class=\"reference internal\" href=\"../tools/#django.test.Client.delete\" title=\"django.test.Client.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a>, <a class=\"reference internal\" href=\"../tools/#django.test.Client.head\" title=\"django.test.Client.head\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">head()</span></code></a>,\n<a class=\"reference internal\" href=\"../tools/#django.test.Client.options\" title=\"django.test.Client.options\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">options()</span></code></a>, and <a class=\"reference internal\" href=\"../tools/#django.test.Client.trace\" title=\"django.test.Client.trace\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">trace()</span></code></a>.</li>\n<li>These methods accept all the same arguments <em>except</em> for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code>. Since this is just a factory for producing\nrequests, it\u2019s up to you to handle the response.</li>\n<li>It does not support middleware. Session and authentication\nattributes must be supplied by the test itself if required\nfor the view to function properly.</li>\n</ul>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n<div class=\"section\" id=\"s-example\">\n<span id=\"example\"></span><h3>Example<a class=\"headerlink\" href=\"#example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following is a unit test using the request factory:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AnonymousUser</span><span class=\"p\">,</span> <span class=\"n\">User</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">RequestFactory</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span> <span class=\"kn\">import</span> <span class=\"n\">MyView</span><span class=\"p\">,</span> <span class=\"n\">my_view</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Every test needs access to the request factory.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">factory</span> <span class=\"o\">=</span> <span class=\"n\">RequestFactory</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create_user</span><span class=\"p\">(</span>\n            <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;jacob&quot;</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s2\">&quot;jacob@\u2026&quot;</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s2\">&quot;top_secret&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_details</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Create an instance of a GET request.</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/customer/details&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Recall that middleware are not supported. You can simulate a</span>\n        <span class=\"c1\"># logged-in user by setting request.user manually.</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">user</span>\n\n        <span class=\"c1\"># Or you can simulate an anonymous user by setting request.user to</span>\n        <span class=\"c1\"># an AnonymousUser instance.</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">AnonymousUser</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Test my_view() as if it were deployed at /customer/details</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Use this syntax for class-based views.</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">MyView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-asyncrequestfactory\">\n<span id=\"asyncrequestfactory\"></span><h3>AsyncRequestFactory<a class=\"headerlink\" href=\"#asyncrequestfactory\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.AsyncRequestFactory\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">AsyncRequestFactory</span></code><a class=\"reference internal\" href=\"../../../_modules/django/test/client/#AsyncRequestFactory\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.AsyncRequestFactory\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">RequestFactory</span></code> creates WSGI-like requests. If you want to create ASGI-like\nrequests, including having a correct ASGI <code class=\"docutils literal notranslate\"><span class=\"pre\">scope</span></code>, you can instead use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.AsyncRequestFactory</span></code>.</p>\n<p>This class is directly API-compatible with <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestFactory</span></code>, with the only\ndifference being that it returns <code class=\"docutils literal notranslate\"><span class=\"pre\">ASGIRequest</span></code> instances rather than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code> instances. All of its methods are still synchronous callables.</p>\n<p>Arbitrary keyword arguments in <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> are added directly into the ASGI\nscope.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> parameter was added.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-testing-class-based-views\">\n<span id=\"testing-class-based-views\"></span><h2>Testing class-based views<a class=\"headerlink\" href=\"#testing-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In order to test class-based views outside of the request/response cycle you\nmust ensure that they are configured correctly, by calling\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.setup\" title=\"django.views.generic.base.View.setup\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setup()</span></code></a> after instantiation.</p>\n<p>For example, assuming the following class-based view:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">views.py</span></code></span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HomeView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;myapp/home.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;environment&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Production&quot;</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>You may directly test the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code> method by first instantiating\nthe view, then passing a <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">setup()</span></code>, before proceeding with\nyour test\u2019s code:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">tests.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">RequestFactory</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span> <span class=\"kn\">import</span> <span class=\"n\">HomeView</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HomePageTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_environment_set_in_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">RequestFactory</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">HomeView</span><span class=\"p\">()</span>\n        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIn</span><span class=\"p\">(</span><span class=\"s2\">&quot;environment&quot;</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-tests-and-multiple-host-names\">\n<span id=\"s-topics-testing-advanced-multiple-hosts\"></span><span id=\"tests-and-multiple-host-names\"></span><span id=\"topics-testing-advanced-multiple-hosts\"></span><h2>Tests and multiple host names<a class=\"headerlink\" href=\"#tests-and-multiple-host-names\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> setting is validated when running tests. This\nallows the test client to differentiate between internal and external URLs.</p>\n<p>Projects that support multitenancy or otherwise alter business logic based on\nthe request\u2019s host and use custom host names in tests must include those hosts\nin <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a>.</p>\n<p>The first option to do so is to add the hosts to your settings file. For\nexample, the test suite for docs.djangoproject.com includes the following:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SearchFormTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_empty_get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;/en/dev/search/&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;host&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;docs.djangoproject.dev:8000&quot;</span><span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"mi\">200</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>and the settings file includes a list of the domains supported by the project:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ALLOWED_HOSTS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;www.djangoproject.dev&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;docs.djangoproject.dev&quot;</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Another option is to add the required hosts to <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> using\n<a class=\"reference internal\" href=\"../tools/#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code></a> or\n<a class=\"reference internal\" href=\"../tools/#django.test.SimpleTestCase.modify_settings\" title=\"django.test.SimpleTestCase.modify_settings\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">modify_settings()</span></code></a>. This option may be\npreferable in standalone apps that can\u2019t package their own settings file or\nfor projects where the list of domains is not static (e.g., subdomains for\nmultitenancy). For example, you could write a test for the domain\n<code class=\"docutils literal notranslate\"><span class=\"pre\">http://otherserver/</span></code> as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">override_settings</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MultiDomainTestCase</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@override_settings</span><span class=\"p\">(</span><span class=\"n\">ALLOWED_HOSTS</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;otherserver&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_other_domain</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://otherserver/foo/bar/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Disabling <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> checking (<code class=\"docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span> <span class=\"pre\">=</span> <span class=\"pre\">['*']</span></code>) when\nrunning tests prevents the test client from raising a helpful error message if\nyou follow a redirect to an external URL.</p>\n</div>\n<div class=\"section\" id=\"s-tests-and-multiple-databases\">\n<span id=\"s-topics-testing-advanced-multidb\"></span><span id=\"tests-and-multiple-databases\"></span><span id=\"topics-testing-advanced-multidb\"></span><h2>Tests and multiple databases<a class=\"headerlink\" href=\"#tests-and-multiple-databases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-testing-primary-replica-configurations\">\n<span id=\"s-topics-testing-primaryreplica\"></span><span id=\"testing-primary-replica-configurations\"></span><span id=\"topics-testing-primaryreplica\"></span><h3>Testing primary/replica configurations<a class=\"headerlink\" href=\"#testing-primary-replica-configurations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re testing a multiple database configuration with primary/replica\n(referred to as master/slave by some databases) replication, this strategy of\ncreating test databases poses a problem.\nWhen the test databases are created, there won\u2019t be any replication,\nand as a result, data created on the primary won\u2019t be seen on the\nreplica.</p>\n<p>To compensate for this, Django allows you to define that a database is\na <em>test mirror</em>. Consider the following (simplified) example database\nconfiguration:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.mysql&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;myproject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;HOST&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dbprimary&quot;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ... plus some other settings</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;replica&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.mysql&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;myproject&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;HOST&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dbreplica&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;MIRROR&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"c1\"># ... plus some other settings</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>In this setup, we have two database servers: <code class=\"docutils literal notranslate\"><span class=\"pre\">dbprimary</span></code>, described\nby the database alias <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">dbreplica</span></code> described by the\nalias <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code>. As you might expect, <code class=\"docutils literal notranslate\"><span class=\"pre\">dbreplica</span></code> has been configured\nby the database administrator as a read replica of <code class=\"docutils literal notranslate\"><span class=\"pre\">dbprimary</span></code>, so in\nnormal activity, any write to <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> will appear on <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code>.</p>\n<p>If Django created two independent test databases, this would break any\ntests that expected replication to occur. However, the <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code>\ndatabase has been configured as a test mirror (using the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_MIRROR\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIRROR</span></code></a> test setting), indicating that under\ntesting, <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code> should be treated as a mirror of <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>.</p>\n<p>When the test environment is configured, a test version of <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code>\nwill <em>not</em> be created. Instead the connection to <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code>\nwill be redirected to point at <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>. As a result, writes to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> will appear on <code class=\"docutils literal notranslate\"><span class=\"pre\">replica</span></code> \u2013 but because they are actually\nthe same database, not because there is data replication between the\ntwo databases. As this depends on transactions, the tests must use\n<a class=\"reference internal\" href=\"../tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> instead of\n<a class=\"reference internal\" href=\"../tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-controlling-creation-order-for-test-databases\">\n<span id=\"s-topics-testing-creation-dependencies\"></span><span id=\"controlling-creation-order-for-test-databases\"></span><span id=\"topics-testing-creation-dependencies\"></span><h3>Controlling creation order for test databases<a class=\"headerlink\" href=\"#controlling-creation-order-for-test-databases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, Django will assume all databases depend on the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>\ndatabase and therefore always create the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> database first.\nHowever, no guarantees are made on the creation order of any other\ndatabases in your test setup.</p>\n<p>If your database configuration requires a specific creation order, you\ncan specify the dependencies that exist using the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_DEPENDENCIES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEPENDENCIES</span></code></a> test setting. Consider the following (simplified)\nexample database configuration:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># ... db settings</span>\n        <span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;DEPENDENCIES&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;diamonds&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;diamonds&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># ... db settings</span>\n        <span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;DEPENDENCIES&quot;</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;clubs&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># ... db settings</span>\n        <span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;DEPENDENCIES&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;diamonds&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;spades&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># ... db settings</span>\n        <span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;DEPENDENCIES&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;diamonds&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;hearts&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">&quot;hearts&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"c1\"># ... db settings</span>\n        <span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;DEPENDENCIES&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;diamonds&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;clubs&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Under this configuration, the <code class=\"docutils literal notranslate\"><span class=\"pre\">diamonds</span></code> database will be created first,\nas it is the only database alias without dependencies. The <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">clubs</span></code> alias will be created next (although the order of creation of this\npair is not guaranteed), then <code class=\"docutils literal notranslate\"><span class=\"pre\">hearts</span></code>, and finally <code class=\"docutils literal notranslate\"><span class=\"pre\">spades</span></code>.</p>\n<p>If there are any circular dependencies in the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_DEPENDENCIES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEPENDENCIES</span></code></a> definition, an\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.ImproperlyConfigured\" title=\"django.core.exceptions.ImproperlyConfigured\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code></a> exception will be raised.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-advanced-features-of-transactiontestcase\">\n<span id=\"advanced-features-of-transactiontestcase\"></span><h2>Advanced features of <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code><a class=\"headerlink\" href=\"#advanced-features-of-transactiontestcase\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase.available_apps\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TransactionTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">available_apps</span></code><a class=\"headerlink\" href=\"#django.test.TransactionTestCase.available_apps\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>This attribute is a private API. It may be changed or removed without\na deprecation period in the future, for instance to accommodate changes\nin application loading.</p>\n<p class=\"last\">It\u2019s used to optimize Django\u2019s own test suite, which contains hundreds\nof models but no relations between models in different applications.</p>\n</div>\n<p>By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">available_apps</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. After each test, Django\ncalls <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-flush\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">flush</span></code></a> to reset the database state. This empties all tables\nand emits the <a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> signal, which\nrecreates one content type and four permissions for each model. This\noperation gets expensive proportionally to the number of models.</p>\n<p>Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">available_apps</span></code> to a list of applications instructs Django to\nbehave as if only the models from these applications were available. The\nbehavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> changes as follows:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> is fired before each\ntest to create the content types and permissions for each model in\navailable apps, in case they\u2019re missing.</li>\n<li>After each test, Django empties only tables corresponding to models in\navailable apps. However, at the database level, truncation may cascade to\nrelated models in unavailable apps. Furthermore\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> isn\u2019t fired; it will be\nfired by the next <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code>, after the correct set of\napplications is selected.</li>\n</ul>\n<p>Since the database isn\u2019t fully flushed, if a test creates instances of\nmodels not included in <code class=\"docutils literal notranslate\"><span class=\"pre\">available_apps</span></code>, they will leak and they may\ncause unrelated tests to fail. Be careful with tests that use sessions;\nthe default session engine stores them in the database.</p>\n<p>Since <a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> isn\u2019t emitted after\nflushing the database, its state after a <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> isn\u2019t the\nsame as after a <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>: it\u2019s missing the rows created by listeners\nto <a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a>. Considering the\n<a class=\"reference internal\" href=\"../overview/#order-of-tests\"><span class=\"std std-ref\">order in which tests are executed</span></a>, this isn\u2019t an\nissue, provided either all <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> in a given test suite\ndeclare <code class=\"docutils literal notranslate\"><span class=\"pre\">available_apps</span></code>, or none of them.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">available_apps</span></code> is mandatory in Django\u2019s own test suite.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.TransactionTestCase.reset_sequences\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TransactionTestCase.</span></code><code class=\"sig-name descname\"><span class=\"pre\">reset_sequences</span></code><a class=\"headerlink\" href=\"#django.test.TransactionTestCase.reset_sequences\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">reset_sequences</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> on a <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> will make\nsure sequences are always reset before the test run:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">TestsThatDependsOnPrimaryKeySequences</span><span class=\"p\">(</span><span class=\"n\">TransactionTestCase</span><span class=\"p\">):</span>\n    <span class=\"n\">reset_sequences</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_animal_pk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">lion</span> <span class=\"o\">=</span> <span class=\"n\">Animal</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;lion&quot;</span><span class=\"p\">,</span> <span class=\"n\">sound</span><span class=\"o\">=</span><span class=\"s2\">&quot;roar&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># lion.pk is guaranteed to always be 1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">lion</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Unless you are explicitly testing primary keys sequence numbers, it is\nrecommended that you do not hard code primary key values in tests.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">reset_sequences</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> will slow down the test, since the primary\nkey reset is a relatively expensive database operation.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-enforce-running-test-classes-sequentially\">\n<span id=\"s-topics-testing-enforce-run-sequentially\"></span><span id=\"enforce-running-test-classes-sequentially\"></span><span id=\"topics-testing-enforce-run-sequentially\"></span><h2>Enforce running test classes sequentially<a class=\"headerlink\" href=\"#enforce-running-test-classes-sequentially\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you have test classes that cannot be run in parallel (e.g. because they\nshare a common resource), you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.testcases.SerializeMixin</span></code>\nto run them sequentially. This mixin uses a filesystem <code class=\"docutils literal notranslate\"><span class=\"pre\">lockfile</span></code>.</p>\n<p>For example, you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">__file__</span></code> to determine that all test classes in the\nsame file that inherit from <code class=\"docutils literal notranslate\"><span class=\"pre\">SerializeMixin</span></code> will run sequentially:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.testcases</span> <span class=\"kn\">import</span> <span class=\"n\">SerializeMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ImageTestCaseMixin</span><span class=\"p\">(</span><span class=\"n\">SerializeMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">lockfile</span> <span class=\"o\">=</span> <span class=\"vm\">__file__</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">setUp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">temp_storage_dir</span><span class=\"p\">,</span> <span class=\"s2\">&quot;my_file.png&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">create_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RemoveImageTests</span><span class=\"p\">(</span><span class=\"n\">ImageTestCaseMixin</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_remove_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertFalse</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ResizeImageTests</span><span class=\"p\">(</span><span class=\"n\">ImageTestCaseMixin</span><span class=\"p\">,</span> <span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_resize_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">resize_image</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">get_image_size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">48</span><span class=\"p\">,</span> <span class=\"mi\">48</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-the-django-test-runner-to-test-reusable-applications\">\n<span id=\"s-testing-reusable-applications\"></span><span id=\"using-the-django-test-runner-to-test-reusable-applications\"></span><span id=\"testing-reusable-applications\"></span><h2>Using the Django test runner to test reusable applications<a class=\"headerlink\" href=\"#using-the-django-test-runner-to-test-reusable-applications\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you are writing a <a class=\"reference internal\" href=\"../../../intro/reusable-apps/\"><span class=\"doc\">reusable application</span></a>\nyou may want to use the Django test runner to run your own test suite\nand thus benefit from the Django testing infrastructure.</p>\n<p>A common practice is a <em>tests</em> directory next to the application code, with the\nfollowing structure:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>runtests.py\npolls/\n    __init__.py\n    models.py\n    ...\ntests/\n    __init__.py\n    models.py\n    test_settings.py\n    tests.py\n</pre></div>\n</div>\n<p>Let\u2019s take a look inside a couple of those files:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"ch\">#!/usr/bin/env python</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">django</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_runner</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;__main__&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;tests.test_settings&quot;</span>\n    <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n    <span class=\"n\">TestRunner</span> <span class=\"o\">=</span> <span class=\"n\">get_runner</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n    <span class=\"n\">test_runner</span> <span class=\"o\">=</span> <span class=\"n\">TestRunner</span><span class=\"p\">()</span>\n    <span class=\"n\">failures</span> <span class=\"o\">=</span> <span class=\"n\">test_runner</span><span class=\"o\">.</span><span class=\"n\">run_tests</span><span class=\"p\">([</span><span class=\"s2\">&quot;tests&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">failures</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<p>This is the script that you invoke to run the test suite. It sets up the\nDjango environment, creates the test database and runs the tests.</p>\n<p>For the sake of clarity, this example contains only the bare minimum\nnecessary to use the Django test runner. You may want to add\ncommand-line options for controlling verbosity, passing in specific test\nlabels to run, etc.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">tests/test_settings.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">SECRET_KEY</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;fake-key&quot;</span>\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;tests&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>This file contains the <a class=\"reference internal\" href=\"../../settings/\"><span class=\"doc\">Django settings</span></a>\nrequired to run your app\u2019s tests.</p>\n<p>Again, this is a minimal example; your tests may require additional\nsettings to run.</p>\n<p>Since the <em>tests</em> package is included in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> when\nrunning your tests, you can define test-only models in its <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code>\nfile.</p>\n</div>\n<div class=\"section\" id=\"s-using-different-testing-frameworks\">\n<span id=\"s-other-testing-frameworks\"></span><span id=\"using-different-testing-frameworks\"></span><span id=\"other-testing-frameworks\"></span><h2>Using different testing frameworks<a class=\"headerlink\" href=\"#using-different-testing-frameworks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Clearly, <a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a> is not the only Python testing framework. While Django\ndoesn\u2019t provide explicit support for alternative frameworks, it does provide a\nway to invoke tests constructed for an alternative framework as if they were\nnormal Django tests.</p>\n<p>When you run <code class=\"docutils literal notranslate\"><span class=\"pre\">./manage.py</span> <span class=\"pre\">test</span></code>, Django looks at the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_RUNNER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_RUNNER</span></code></a>\nsetting to determine what to do. By default, <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_RUNNER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_RUNNER</span></code></a> points to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.test.runner.DiscoverRunner'</span></code>. This class defines the default Django\ntesting behavior. This behavior involves:</p>\n<ol class=\"arabic simple\">\n<li>Performing global pre-test setup.</li>\n<li>Looking for tests in any file below the current directory whose name matches\nthe pattern <code class=\"docutils literal notranslate\"><span class=\"pre\">test*.py</span></code>.</li>\n<li>Creating the test databases.</li>\n<li>Running <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> to install models and initial data into the test\ndatabases.</li>\n<li>Running the <a class=\"reference internal\" href=\"../../checks/\"><span class=\"doc\">system checks</span></a>.</li>\n<li>Running the tests that were found.</li>\n<li>Destroying the test databases.</li>\n<li>Performing global post-test teardown.</li>\n</ol>\n<p>If you define your own test runner class and point <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEST_RUNNER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST_RUNNER</span></code></a> at\nthat class, Django will execute your test runner whenever you run\n<code class=\"docutils literal notranslate\"><span class=\"pre\">./manage.py</span> <span class=\"pre\">test</span></code>. In this way, it is possible to use any test framework\nthat can be executed from Python code, or to modify the Django test execution\nprocess to satisfy whatever testing requirements you may have.</p>\n<div class=\"section\" id=\"s-defining-a-test-runner\">\n<span id=\"s-topics-testing-test-runner\"></span><span id=\"defining-a-test-runner\"></span><span id=\"topics-testing-test-runner\"></span><h3>Defining a test runner<a class=\"headerlink\" href=\"#defining-a-test-runner\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A test runner is a class defining a <code class=\"docutils literal notranslate\"><span class=\"pre\">run_tests()</span></code> method. Django ships\nwith a <code class=\"docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code> class that defines the default Django testing\nbehavior. This class defines the <code class=\"docutils literal notranslate\"><span class=\"pre\">run_tests()</span></code> entry point, plus a\nselection of other methods that are used by <code class=\"docutils literal notranslate\"><span class=\"pre\">run_tests()</span></code> to set up, execute\nand tear down the test suite.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">DiscoverRunner</span></code>(<em><span class=\"n\"><span class=\"pre\">pattern</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'test*.py'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">top_level</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">verbosity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">interactive</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">failfast</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keepdb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">reverse</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">debug_mode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">debug_sql</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">parallel</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em><span class=\"n\"><span class=\"pre\">tags</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">exclude_tags</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">test_name_patterns</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">pdb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">buffer</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">enable_faulthandler</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">timing</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">shuffle</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">logger</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code> will search for tests in any file matching <code class=\"docutils literal notranslate\"><span class=\"pre\">pattern</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">top_level</span></code> can be used to specify the directory containing your\ntop-level Python modules. Usually Django can figure this out automatically,\nso it\u2019s not necessary to specify this option. If specified, it should\ngenerally be the directory containing your <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> file.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> determines the amount of notification and debug information\nthat will be printed to the console; <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> is no output, <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> is normal\noutput, and <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span></code> is verbose output.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the test suite has permission to ask the\nuser for instructions when the test suite is executed. An example of this\nbehavior would be asking for permission to delete an existing test\ndatabase. If <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the test suite must be able to\nrun without any manual intervention.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">failfast</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the test suite will stop running after the\nfirst test failure is detected.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">keepdb</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the test suite will use the existing database,\nor create one if necessary. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, a new database will be created,\nprompting the user to remove the existing one, if present.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, test cases will be executed in the opposite\norder. This could be useful to debug tests that aren\u2019t properly isolated\nand have side effects. <a class=\"reference internal\" href=\"../overview/#order-of-tests\"><span class=\"std std-ref\">Grouping by test class</span></a> is\npreserved when using this option. This option can be used in conjunction\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">--shuffle</span></code> to reverse the order for a particular random seed.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">debug_mode</span></code> specifies what the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> setting should be\nset to prior to running tests.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">parallel</span></code> specifies the number of processes.  If <code class=\"docutils literal notranslate\"><span class=\"pre\">parallel</span></code> is greater\nthan <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>, the test suite will run in <code class=\"docutils literal notranslate\"><span class=\"pre\">parallel</span></code> processes. If there are\nfewer test cases than configured processes, Django will reduce the number\nof processes accordingly. Each process gets its own database. This option\nrequires the third-party <code class=\"docutils literal notranslate\"><span class=\"pre\">tblib</span></code> package to display tracebacks correctly.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">tags</span></code> can be used to specify a set of <a class=\"reference internal\" href=\"../tools/#topics-tagging-tests\"><span class=\"std std-ref\">tags for filtering tests</span></a>. May be combined with <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude_tags</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">exclude_tags</span></code> can be used to specify a set of\n<a class=\"reference internal\" href=\"../tools/#topics-tagging-tests\"><span class=\"std std-ref\">tags for excluding tests</span></a>. May be combined\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">tags</span></code>.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">debug_sql</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, failing test cases will output SQL queries\nlogged to the <a class=\"reference internal\" href=\"../../../ref/logging/#django-db-logger\"><span class=\"std std-ref\">django.db.backends logger</span></a> as well\nas the traceback. If <code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span></code>, then queries in all tests are\noutput.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">test_name_patterns</span></code> can be used to specify a set of patterns for\nfiltering test methods and classes by their names.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">pdb</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, a debugger (<code class=\"docutils literal notranslate\"><span class=\"pre\">pdb</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">ipdb</span></code>) will be spawned at\neach test error or failure.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">buffer</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, outputs from passing tests will be discarded.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">enable_faulthandler</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <a class=\"reference external\" href=\"https://docs.python.org/3/library/faulthandler.html#module-faulthandler\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">faulthandler</span></code></a> will be\nenabled.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">timing</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, test timings, including database setup and total\nrun time, will be shown.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">shuffle</span></code> is an integer, test cases will be shuffled in a random order\nprior to execution, using the integer as a random seed. If <code class=\"docutils literal notranslate\"><span class=\"pre\">shuffle</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the seed will be generated randomly. In both cases, the seed will\nbe logged and set to <code class=\"docutils literal notranslate\"><span class=\"pre\">self.shuffle_seed</span></code> prior to running tests. This\noption can be used to help detect tests that aren\u2019t properly isolated.\n<a class=\"reference internal\" href=\"../overview/#order-of-tests\"><span class=\"std std-ref\">Grouping by test class</span></a> is preserved when using this\noption.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">logger</span></code> can be used to pass a Python <a class=\"reference external\" href=\"https://docs.python.org/3/library/logging.html#logger\" title=\"(in Python v3.11)\"><span class=\"xref std std-ref\">Logger object</span></a>.\nIf provided, the logger will be used to log messages instead of printing to\nthe console. The logger object will respect its logging level rather than\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code>.</p>\n<p>Django may, from time to time, extend the capabilities of the test runner\nby adding new arguments. The <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> declaration allows for this\nexpansion. If you subclass <code class=\"docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code> or write your own test\nrunner, ensure it accepts <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>.</p>\n<p>Your test runner may also define additional command-line options.\nCreate or override an <code class=\"docutils literal notranslate\"><span class=\"pre\">add_arguments(cls,</span> <span class=\"pre\">parser)</span></code> class method and add\ncustom arguments by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">parser.add_argument()</span></code> inside the method, so\nthat the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-test\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">test</span></code></a> command will be able to use those arguments.</p>\n</dd></dl>\n\n<div class=\"section\" id=\"s-attributes\">\n<span id=\"attributes\"></span><h4>Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.test_suite\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">test_suite</span></code><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.test_suite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The class used to build the test suite. By default it is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unittest.TestSuite</span></code>. This can be overridden if you wish to implement\ndifferent logic for collecting tests.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.test_runner\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">test_runner</span></code><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.test_runner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is the class of the low-level test runner which is used to execute\nthe individual tests and format the results. By default it is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unittest.TextTestRunner</span></code>. Despite the unfortunate similarity in\nnaming conventions, this is not the same type of class as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code>, which covers a broader set of responsibilities. You\ncan override this attribute to modify the way tests are run and reported.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.test_loader\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">test_loader</span></code><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.test_loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is the class that loads tests, whether from TestCases or modules or\notherwise and bundles them into test suites for the runner to execute.\nBy default it is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest.defaultTestLoader</span></code>. You can override\nthis attribute if your tests are going to be loaded in unusual ways.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-methods\">\n<span id=\"methods\"></span><h4>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.run_tests\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">run_tests</span></code>(<em><span class=\"n\"><span class=\"pre\">test_labels</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.run_tests\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.run_tests\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Run the test suite.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">test_labels</span></code> allows you to specify which tests to run and supports\nseveral formats (see <a class=\"reference internal\" href=\"#django.test.runner.DiscoverRunner.build_suite\" title=\"django.test.runner.DiscoverRunner.build_suite\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">DiscoverRunner.build_suite()</span></code></a> for a list of\nsupported formats).</p>\n<p>This method should return the number of tests that failed.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.add_arguments\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">add_arguments</span></code>(<em><span class=\"n\"><span class=\"pre\">parser</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.add_arguments\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.add_arguments\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Override this class method to add custom arguments accepted by the\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-test\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">test</span></code></a> management command. See\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser.add_argument()</span></code></a> for details about adding\narguments to a parser.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.setup_test_environment\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setup_test_environment</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.setup_test_environment\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.setup_test_environment\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets up the test environment by calling\n<a class=\"reference internal\" href=\"#django.test.utils.setup_test_environment\" title=\"django.test.utils.setup_test_environment\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">setup_test_environment()</span></code></a> and setting\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">self.debug_mode</span></code> (defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.build_suite\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">build_suite</span></code>(<em><span class=\"n\"><span class=\"pre\">test_labels</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.build_suite\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.build_suite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Constructs a test suite that matches the test labels provided.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">test_labels</span></code> is a list of strings describing the tests to be run. A test\nlabel can take one of four forms:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">path.to.test_module.TestCase.test_method</span></code> \u2013 Run a single test method\nin a test case.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">path.to.test_module.TestCase</span></code> \u2013 Run all the test methods in a test\ncase.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">path.to.module</span></code> \u2013 Search for and run all tests in the named Python\npackage or module.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">path/to/directory</span></code> \u2013 Search for and run all tests below the named\ndirectory.</li>\n</ul>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">test_labels</span></code> has a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the test runner will search for\ntests in all files below the current directory whose names match its\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pattern</span></code> (see above).</p>\n<p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">TestSuite</span></code> instance ready to be run.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.setup_databases\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setup_databases</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.setup_databases\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.setup_databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates the test databases by calling\n<a class=\"reference internal\" href=\"#django.test.utils.setup_databases\" title=\"django.test.utils.setup_databases\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">setup_databases()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.run_checks\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">run_checks</span></code>(<em><span class=\"n\"><span class=\"pre\">databases</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.run_checks\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.run_checks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Runs the <a class=\"reference internal\" href=\"../../checks/\"><span class=\"doc\">system checks</span></a> on the test <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.run_suite\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">run_suite</span></code>(<em><span class=\"n\"><span class=\"pre\">suite</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.run_suite\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.run_suite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Runs the test suite.</p>\n<p>Returns the result produced by the running the test suite.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.get_test_runner_kwargs\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_test_runner_kwargs</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.get_test_runner_kwargs\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.get_test_runner_kwargs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the keyword arguments to instantiate the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DiscoverRunner.test_runner</span></code> with.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.teardown_databases\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">teardown_databases</span></code>(<em><span class=\"n\"><span class=\"pre\">old_config</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.teardown_databases\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.teardown_databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Destroys the test databases, restoring pre-test conditions by calling\n<a class=\"reference internal\" href=\"#django.test.utils.teardown_databases\" title=\"django.test.utils.teardown_databases\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">teardown_databases()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.teardown_test_environment\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">teardown_test_environment</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.teardown_test_environment\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.teardown_test_environment\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Restores the pre-test environment.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.suite_result\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">suite_result</span></code>(<em><span class=\"n\"><span class=\"pre\">suite</span></span></em>, <em><span class=\"n\"><span class=\"pre\">result</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.suite_result\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.suite_result\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes and returns a return code based on a test suite, and the result\nfrom that test suite.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.test.runner.DiscoverRunner.log\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">DiscoverRunner.</span></code><code class=\"sig-name descname\"><span class=\"pre\">log</span></code>(<em><span class=\"n\"><span class=\"pre\">msg</span></span></em>, <em><span class=\"n\"><span class=\"pre\">level</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/runner/#DiscoverRunner.log\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.runner.DiscoverRunner.log\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If a <code class=\"docutils literal notranslate\"><span class=\"pre\">logger</span></code> is set, logs the message at the given integer\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/logging.html#levels\">logging level</a> (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">logging.DEBUG</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">logging.INFO</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">logging.WARNING</span></code>). Otherwise, the message is printed to the console,\nrespecting the current <code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code>. For example, no message will be\nprinted if the <code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> is 0, <code class=\"docutils literal notranslate\"><span class=\"pre\">INFO</span></code> and above will be printed if\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> is at least 1, and <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code> will be printed if it is at\nleast 2. The <code class=\"docutils literal notranslate\"><span class=\"pre\">level</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">logging.INFO</span></code>.</p>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-testing-utilities\">\n<span id=\"testing-utilities\"></span><h3>Testing utilities<a class=\"headerlink\" href=\"#testing-utilities\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-module-django.test.utils\">\n<span id=\"s-django-test-utils\"></span><span id=\"module-django.test.utils\"></span><span id=\"django-test-utils\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils</span></code><a class=\"headerlink\" href=\"#module-django.test.utils\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To assist in the creation of your own test runner, Django provides a number of\nutility methods in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils</span></code> module.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.utils.setup_test_environment\">\n<code class=\"sig-name descname\"><span class=\"pre\">setup_test_environment</span></code>(<em><span class=\"n\"><span class=\"pre\">debug</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/utils/#setup_test_environment\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.utils.setup_test_environment\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs global pre-test setup, such as installing instrumentation for the\ntemplate rendering system and setting up the dummy email outbox.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code> isn\u2019t <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> setting is updated to its\nvalue.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.utils.teardown_test_environment\">\n<code class=\"sig-name descname\"><span class=\"pre\">teardown_test_environment</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/test/utils/#teardown_test_environment\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.utils.teardown_test_environment\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Performs global post-test teardown, such as removing instrumentation from\nthe template system and restoring normal email services.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.utils.setup_databases\">\n<code class=\"sig-name descname\"><span class=\"pre\">setup_databases</span></code>(<em><span class=\"n\"><span class=\"pre\">verbosity</span></span></em>, <em><span class=\"n\"><span class=\"pre\">interactive</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">time_keeper</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keepdb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">debug_sql</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">parallel</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em><span class=\"n\"><span class=\"pre\">aliases</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">serialized_aliases</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/utils/#setup_databases\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.utils.setup_databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates the test databases.</p>\n<p>Returns a data structure that provides enough detail to undo the changes\nthat have been made. This data will be provided to the\n<a class=\"reference internal\" href=\"#django.test.utils.teardown_databases\" title=\"django.test.utils.teardown_databases\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">teardown_databases()</span></code></a> function at the conclusion of testing.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">aliases</span></code> argument determines which <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> aliases test\ndatabases should be set up for. If it\u2019s not provided, it defaults to all of\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> aliases.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">serialized_aliases</span></code> argument determines what subset of <code class=\"docutils literal notranslate\"><span class=\"pre\">aliases</span></code>\ntest databases should have their state serialized to allow usage of the\n<a class=\"reference internal\" href=\"../overview/#test-case-serialized-rollback\"><span class=\"std std-ref\">serialized_rollback</span></a> feature. If\nit\u2019s not provided, it defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">aliases</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.test.utils.teardown_databases\">\n<code class=\"sig-name descname\"><span class=\"pre\">teardown_databases</span></code>(<em><span class=\"n\"><span class=\"pre\">old_config</span></span></em>, <em><span class=\"n\"><span class=\"pre\">parallel</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keepdb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/test/utils/#teardown_databases\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.test.utils.teardown_databases\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Destroys the test databases, restoring pre-test conditions.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">old_config</span></code> is a data structure defining the changes in the database\nconfiguration that need to be reversed. It\u2019s the return value of the\n<a class=\"reference internal\" href=\"#django.test.utils.setup_databases\" title=\"django.test.utils.setup_databases\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setup_databases()</span></code></a> method.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-django-db-connection-creation\">\n<span id=\"django-db-connection-creation\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connection.creation</span></code><a class=\"headerlink\" href=\"#django-db-connection-creation\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The creation module of the database backend also provides some utilities that\ncan be useful during testing.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.db.connection.creation.create_test_db\">\n<code class=\"sig-name descname\"><span class=\"pre\">create_test_db</span></code>(<em><span class=\"n\"><span class=\"pre\">verbosity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">autoclobber</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">serialize</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keepdb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.db.connection.creation.create_test_db\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a new test database and runs <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> against it.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> has the same behavior as in <code class=\"docutils literal notranslate\"><span class=\"pre\">run_tests()</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">autoclobber</span></code> describes the behavior that will occur if a\ndatabase with the same name as the test database is discovered:</p>\n<ul class=\"simple\">\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">autoclobber</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the user will be asked to\napprove destroying the existing database. <code class=\"docutils literal notranslate\"><span class=\"pre\">sys.exit</span></code> is\ncalled if the user does not approve.</li>\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">autoclobber</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the database will be destroyed\nwithout consulting the user.</li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">serialize</span></code> determines if Django serializes the database into an\nin-memory JSON string before running tests (used to restore the database\nstate between tests if you don\u2019t have transactions). You can set this to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> to speed up creation time if you don\u2019t have any test classes\nwith <a class=\"reference internal\" href=\"../overview/#test-case-serialized-rollback\"><span class=\"std std-ref\">serialized_rollback=True</span></a>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">keepdb</span></code> determines if the test run should use an existing\ndatabase, or create a new one. If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the existing\ndatabase will be used, or created if not present. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>,\na new database will be created, prompting the user to remove\nthe existing one, if present.</p>\n<p>Returns the name of the test database that it created.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">create_test_db()</span></code> has the side effect of modifying the value of\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> to match the name of the test\ndatabase.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.db.connection.creation.destroy_test_db\">\n<code class=\"sig-name descname\"><span class=\"pre\">destroy_test_db</span></code>(<em><span class=\"n\"><span class=\"pre\">old_database_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">verbosity</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keepdb</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.db.connection.creation.destroy_test_db\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Destroys the database whose name is the value of <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> in\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>, and sets <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> to the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">old_database_name</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code> argument has the same behavior as for\n<a class=\"reference internal\" href=\"#django.test.runner.DiscoverRunner\" title=\"django.test.runner.DiscoverRunner\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code></a>.</p>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">keepdb</span></code> argument is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, then the connection to the\ndatabase will be closed, but the database will not be destroyed.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-integration-with-coverage-py\">\n<span id=\"s-topics-testing-code-coverage\"></span><span id=\"integration-with-coverage-py\"></span><span id=\"topics-testing-code-coverage\"></span><h2>Integration with <code class=\"docutils literal notranslate\"><span class=\"pre\">coverage.py</span></code><a class=\"headerlink\" href=\"#integration-with-coverage-py\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Code coverage describes how much source code has been tested. It shows which\nparts of your code are being exercised by tests and which are not. It\u2019s an\nimportant part of testing applications, so it\u2019s strongly recommended to check\nthe coverage of your tests.</p>\n<p>Django can be easily integrated with <a class=\"reference external\" href=\"https://coverage.readthedocs.io/\">coverage.py</a>, a tool for measuring code\ncoverage of Python programs. First, install <a class=\"reference external\" href=\"https://pypi.org/project/coverage/\">coverage</a>. Next, run the\nfollowing from your project folder containing <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>coverage run --source<span class=\"o\">=</span><span class=\"s1\">&#39;.&#39;</span> manage.py <span class=\"nb\">test</span> myapp\n</pre></div>\n</div>\n<p>This runs your tests and collects coverage data of the executed files in your\nproject. You can see a report of this data by typing following command:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>coverage report\n</pre></div>\n</div>\n<p>Note that some Django code was executed while running tests, but it is not\nlisted here because of the <code class=\"docutils literal notranslate\"><span class=\"pre\">source</span></code> flag passed to the previous command.</p>\n<p>For more options like annotated HTML listings detailing missed lines, see the\n<a class=\"reference external\" href=\"https://coverage.readthedocs.io/\">coverage.py</a> docs.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/auth/index", "User authentication in Django", "N", "next"], ["topics/testing/tools", "Testing tools", "P", "previous"]], "sourcename": "topics/testing/advanced.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Advanced testing topics</a><ul>\n<li><a class=\"reference internal\" href=\"#the-request-factory\">The request factory</a><ul>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n<li><a class=\"reference internal\" href=\"#asyncrequestfactory\">AsyncRequestFactory</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#testing-class-based-views\">Testing class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#tests-and-multiple-host-names\">Tests and multiple host names</a></li>\n<li><a class=\"reference internal\" href=\"#tests-and-multiple-databases\">Tests and multiple databases</a><ul>\n<li><a class=\"reference internal\" href=\"#testing-primary-replica-configurations\">Testing primary/replica configurations</a></li>\n<li><a class=\"reference internal\" href=\"#controlling-creation-order-for-test-databases\">Controlling creation order for test databases</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#advanced-features-of-transactiontestcase\">Advanced features of <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#enforce-running-test-classes-sequentially\">Enforce running test classes sequentially</a></li>\n<li><a class=\"reference internal\" href=\"#using-the-django-test-runner-to-test-reusable-applications\">Using the Django test runner to test reusable applications</a></li>\n<li><a class=\"reference internal\" href=\"#using-different-testing-frameworks\">Using different testing frameworks</a><ul>\n<li><a class=\"reference internal\" href=\"#defining-a-test-runner\">Defining a test runner</a><ul>\n<li><a class=\"reference internal\" href=\"#attributes\">Attributes</a></li>\n<li><a class=\"reference internal\" href=\"#methods\">Methods</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#testing-utilities\">Testing utilities</a><ul>\n<li><a class=\"reference internal\" href=\"#module-django.test.utils\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-db-connection-creation\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connection.creation</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#integration-with-coverage-py\">Integration with <code class=\"docutils literal notranslate\"><span class=\"pre\">coverage.py</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/testing/advanced", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}