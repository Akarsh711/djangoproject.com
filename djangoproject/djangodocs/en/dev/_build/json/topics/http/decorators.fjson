{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Handling HTTP requests"}], "prev": {"link": "../views/", "title": "Writing views"}, "next": {"link": "../file-uploads/", "title": "File Uploads"}, "title": "View decorators", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.views.decorators.http\">\n<span id=\"s-view-decorators\"></span><span id=\"module-django.views.decorators.http\"></span><span id=\"view-decorators\"></span><h1>View decorators<a class=\"headerlink\" href=\"#module-django.views.decorators.http\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django provides several decorators that can be applied to views to support\nvarious HTTP features.</p>\n<p>See <a class=\"reference internal\" href=\"../../class-based-views/intro/#id1\"><span class=\"std std-ref\">Decorating the class</span></a> for how to use these decorators with\nclass-based views.</p>\n<div class=\"section\" id=\"s-allowed-http-methods\">\n<span id=\"allowed-http-methods\"></span><h2>Allowed HTTP methods<a class=\"headerlink\" href=\"#allowed-http-methods\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The decorators in <a class=\"reference internal\" href=\"#module-django.views.decorators.http\" title=\"django.views.decorators.http\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.views.decorators.http</span></code></a> can be used to restrict\naccess to views based on the request method. These decorators will return\na <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponseNotAllowed\" title=\"django.http.HttpResponseNotAllowed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.http.HttpResponseNotAllowed</span></code></a> if the conditions are not met.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.require_http_methods\">\n<code class=\"sig-name descname\"><span class=\"pre\">require_http_methods</span></code>(<em><span class=\"n\"><span class=\"pre\">request_method_list</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/http/#require_http_methods\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.http.require_http_methods\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to require that a view only accepts particular request\nmethods. Usage:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.http</span> <span class=\"kn\">import</span> <span class=\"n\">require_http_methods</span>\n\n\n<span class=\"nd\">@require_http_methods</span><span class=\"p\">([</span><span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># I can assume now that only GET or POST requests make it this far</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>Note that request methods should be in uppercase.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.require_GET\">\n<code class=\"sig-name descname\"><span class=\"pre\">require_GET</span></code>()<a class=\"headerlink\" href=\"#django.views.decorators.http.require_GET\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to require that a view only accepts the GET method.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.require_POST\">\n<code class=\"sig-name descname\"><span class=\"pre\">require_POST</span></code>()<a class=\"headerlink\" href=\"#django.views.decorators.http.require_POST\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to require that a view only accepts the POST method.</p>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.require_safe\">\n<code class=\"sig-name descname\"><span class=\"pre\">require_safe</span></code>()<a class=\"headerlink\" href=\"#django.views.decorators.http.require_safe\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator to require that a view only accepts the GET and HEAD methods.\nThese methods are commonly considered \u201csafe\u201d because they should not have\nthe significance of taking an action other than retrieving the requested\nresource.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Web servers should automatically strip the content of responses to HEAD\nrequests while leaving the headers unchanged, so you may handle HEAD\nrequests exactly like GET requests in your views. Since some software,\nsuch as link checkers, rely on HEAD requests, you might prefer\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">require_safe</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">require_GET</span></code>.</p>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-conditional-view-processing\">\n<span id=\"conditional-view-processing\"></span><h2>Conditional view processing<a class=\"headerlink\" href=\"#conditional-view-processing\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The following decorators in <a class=\"reference internal\" href=\"#module-django.views.decorators.http\" title=\"django.views.decorators.http\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.views.decorators.http</span></code></a> can be used to\ncontrol caching behavior on particular views.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.condition\">\n<code class=\"sig-name descname\"><span class=\"pre\">condition</span></code>(<em><span class=\"n\"><span class=\"pre\">etag_func</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">last_modified_func</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/http/#condition\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.http.condition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.etag\">\n<code class=\"sig-name descname\"><span class=\"pre\">etag</span></code>(<em><span class=\"n\"><span class=\"pre\">etag_func</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/http/#etag\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.http.etag\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.http.last_modified\">\n<code class=\"sig-name descname\"><span class=\"pre\">last_modified</span></code>(<em><span class=\"n\"><span class=\"pre\">last_modified_func</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/http/#last_modified\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.http.last_modified\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>These decorators can be used to generate <code class=\"docutils literal notranslate\"><span class=\"pre\">ETag</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Last-Modified</span></code>\nheaders; see\n<a class=\"reference internal\" href=\"../../conditional-view-processing/\"><span class=\"doc\">conditional view processing</span></a>.</p>\n</dd></dl>\n\n<span class=\"target\" id=\"module-django.views.decorators.gzip\"></span></div>\n<div class=\"section\" id=\"s-gzip-compression\">\n<span id=\"gzip-compression\"></span><h2>GZip compression<a class=\"headerlink\" href=\"#gzip-compression\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The decorators in <a class=\"reference internal\" href=\"#module-django.views.decorators.gzip\" title=\"django.views.decorators.gzip\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.views.decorators.gzip</span></code></a> control content\ncompression on a per-view basis.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.gzip.gzip_page\">\n<code class=\"sig-name descname\"><span class=\"pre\">gzip_page</span></code>()<a class=\"headerlink\" href=\"#django.views.decorators.gzip.gzip_page\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator compresses content if the browser allows gzip compression.\nIt sets the <code class=\"docutils literal notranslate\"><span class=\"pre\">Vary</span></code> header accordingly, so that caches will base their\nstorage on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept-Encoding</span></code> header.</p>\n</dd></dl>\n\n<span class=\"target\" id=\"module-django.views.decorators.vary\"></span></div>\n<div class=\"section\" id=\"s-vary-headers\">\n<span id=\"vary-headers\"></span><h2>Vary headers<a class=\"headerlink\" href=\"#vary-headers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The decorators in <a class=\"reference internal\" href=\"#module-django.views.decorators.vary\" title=\"django.views.decorators.vary\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.views.decorators.vary</span></code></a> can be used to control\ncaching based on specific request headers.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.vary.vary_on_cookie\">\n<code class=\"sig-name descname\"><span class=\"pre\">vary_on_cookie</span></code>(<em><span class=\"n\"><span class=\"pre\">func</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/vary/#vary_on_cookie\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.vary.vary_on_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.vary.vary_on_headers\">\n<code class=\"sig-name descname\"><span class=\"pre\">vary_on_headers</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">headers</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/vary/#vary_on_headers\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.vary.vary_on_headers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Vary</span></code> header defines which request headers a cache mechanism should take\ninto account when building its cache key.</p>\n<p>See <a class=\"reference internal\" href=\"../../cache/#using-vary-headers\"><span class=\"std std-ref\">using vary headers</span></a>.</p>\n</dd></dl>\n\n<span class=\"target\" id=\"module-django.views.decorators.cache\"></span></div>\n<div class=\"section\" id=\"s-caching\">\n<span id=\"caching\"></span><h2>Caching<a class=\"headerlink\" href=\"#caching\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The decorators in <a class=\"reference internal\" href=\"#module-django.views.decorators.cache\" title=\"django.views.decorators.cache\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.views.decorators.cache</span></code></a> control server and\nclient-side caching.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.cache.cache_control\">\n<code class=\"sig-name descname\"><span class=\"pre\">cache_control</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/cache/#cache_control\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.cache.cache_control\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator patches the response\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">Cache-Control</span></code> header by adding\nall of the keyword arguments to it. See\n<a class=\"reference internal\" href=\"../../../ref/utils/#django.utils.cache.patch_cache_control\" title=\"django.utils.cache.patch_cache_control\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">patch_cache_control()</span></code></a> for the details of the\ntransformation.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p>Support for wrapping asynchronous view functions was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.cache.never_cache\">\n<code class=\"sig-name descname\"><span class=\"pre\">never_cache</span></code>(<em><span class=\"n\"><span class=\"pre\">view_func</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/cache/#never_cache\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.cache.never_cache\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator adds an <code class=\"docutils literal notranslate\"><span class=\"pre\">Expires</span></code> header to the current date/time.</p>\n<p>This decorator adds a <code class=\"docutils literal notranslate\"><span class=\"pre\">Cache-Control:</span> <span class=\"pre\">max-age=0,</span> <span class=\"pre\">no-cache,</span> <span class=\"pre\">no-store,</span>\n<span class=\"pre\">must-revalidate,</span> <span class=\"pre\">private</span></code> header to a response to indicate that a page\nshould never be cached.</p>\n<p>Each header is only added if it isn\u2019t already set.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p>Support for wrapping asynchronous view functions was added.</p>\n</div>\n</dd></dl>\n\n<span class=\"target\" id=\"module-django.views.decorators.common\"></span></div>\n<div class=\"section\" id=\"s-common\">\n<span id=\"common\"></span><h2>Common<a class=\"headerlink\" href=\"#common\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The decorators in <a class=\"reference internal\" href=\"#module-django.views.decorators.common\" title=\"django.views.decorators.common\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.views.decorators.common</span></code></a> allow per-view\ncustomization of <a class=\"reference internal\" href=\"../../../ref/middleware/#django.middleware.common.CommonMiddleware\" title=\"django.middleware.common.CommonMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CommonMiddleware</span></code></a> behavior.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.common.no_append_slash\">\n<code class=\"sig-name descname\"><span class=\"pre\">no_append_slash</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/views/decorators/common/#no_append_slash\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.common.no_append_slash\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator allows individual views to be excluded from\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-APPEND_SLASH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APPEND_SLASH</span></code></a> URL normalization.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p>Support for wrapping asynchronous view functions was added.</p>\n</div>\n</dd></dl>\n\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/http/file-uploads", "File Uploads", "N", "next"], ["topics/http/views", "Writing views", "P", "previous"]], "sourcename": "topics/http/decorators.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">View decorators</a><ul>\n<li><a class=\"reference internal\" href=\"#allowed-http-methods\">Allowed HTTP methods</a></li>\n<li><a class=\"reference internal\" href=\"#conditional-view-processing\">Conditional view processing</a></li>\n<li><a class=\"reference internal\" href=\"#gzip-compression\">GZip compression</a></li>\n<li><a class=\"reference internal\" href=\"#vary-headers\">Vary headers</a></li>\n<li><a class=\"reference internal\" href=\"#caching\">Caching</a></li>\n<li><a class=\"reference internal\" href=\"#common\">Common</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/http/decorators", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
