{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Handling HTTP requests"}], "prev": {"link": "../urls/", "title": "URL dispatcher"}, "next": {"link": "../decorators/", "title": "View decorators"}, "title": "Writing views", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-views\">\n<span id=\"writing-views\"></span><h1>Writing views<a class=\"headerlink\" href=\"#writing-views\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A view function, or <em>view</em> for short, is a Python function that takes a\nweb request and returns a web response. This response can be the HTML contents\nof a web page, or a redirect, or a 404 error, or an XML document, or an image .\n. . or anything, really. The view itself contains whatever arbitrary logic is\nnecessary to return that response. This code can live anywhere you want, as long\nas it\u2019s on your Python path. There\u2019s no other requirement\u2013no \u201cmagic,\u201d so to\nspeak. For the sake of putting the code <em>somewhere</em>, the convention is to\nput views in a file called <code class=\"docutils literal notranslate\"><span class=\"pre\">views.py</span></code>, placed in your project or\napplication directory.</p>\n<div class=\"section\" id=\"s-a-simple-view\">\n<span id=\"a-simple-view\"></span><h2>A simple view<a class=\"headerlink\" href=\"#a-simple-view\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Here\u2019s a view that returns the current date and time, as an HTML document:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">current_datetime</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;html&gt;&lt;body&gt;It is now </span><span class=\"si\">%s</span><span class=\"s2\">.&lt;/body&gt;&lt;/html&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">now</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Let\u2019s step through this code one line at a time:</p>\n<ul>\n<li><p class=\"first\">First, we import the class <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> from the\n<a class=\"reference internal\" href=\"../../../ref/request-response/#module-django.http\" title=\"django.http: Classes dealing with HTTP requests and responses.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.http</span></code></a> module, along with Python\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> library.</p>\n</li>\n<li><p class=\"first\">Next, we define a function called <code class=\"docutils literal notranslate\"><span class=\"pre\">current_datetime</span></code>. This is the view\nfunction. Each view function takes an <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a>\nobject as its first parameter, which is typically named <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code>.</p>\n<p>Note that the name of the view function doesn\u2019t matter; it doesn\u2019t have to\nbe named in a certain way in order for Django to recognize it. We\u2019re\ncalling it <code class=\"docutils literal notranslate\"><span class=\"pre\">current_datetime</span></code> here, because that name clearly indicates\nwhat it does.</p>\n</li>\n<li><p class=\"first\">The view returns an <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> object that\ncontains the generated response. Each view function is responsible for\nreturning an <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> object. (There are\nexceptions, but we\u2019ll get to those later.)</p>\n</li>\n</ul>\n<div class=\"admonition-django-s-time-zone admonition\">\n<p class=\"first admonition-title\">Django\u2019s Time Zone</p>\n<p class=\"last\">Django includes a <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TIME_ZONE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code></a> setting that defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">America/Chicago</span></code>. This probably isn\u2019t where you live, so you might want\nto change it in your settings file.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-mapping-urls-to-views\">\n<span id=\"mapping-urls-to-views\"></span><h2>Mapping URLs to views<a class=\"headerlink\" href=\"#mapping-urls-to-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>So, to recap, this view function returns an HTML page that includes the current\ndate and time. To display this view at a particular URL, you\u2019ll need to create a\n<em>URLconf</em>; see <a class=\"reference internal\" href=\"../urls/\"><span class=\"doc\">URL dispatcher</span></a> for instructions.</p>\n</div>\n<div class=\"section\" id=\"s-returning-errors\">\n<span id=\"returning-errors\"></span><h2>Returning errors<a class=\"headerlink\" href=\"#returning-errors\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django provides help for returning HTTP error codes. There are subclasses of\n<a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> for a number of common HTTP status codes\nother than 200 (which means <em>\u201cOK\u201d</em>). You can find the full list of available\nsubclasses in the <a class=\"reference internal\" href=\"../../../ref/request-response/#ref-httpresponse-subclasses\"><span class=\"std std-ref\">request/response</span></a>\ndocumentation. Return an instance of one of those subclasses instead of a\nnormal <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> in order to signify an error. For\nexample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span><span class=\"p\">,</span> <span class=\"n\">HttpResponseNotFound</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">if</span> <span class=\"n\">foo</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponseNotFound</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;h1&gt;Page was found&lt;/h1&gt;&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>There isn\u2019t a specialized subclass for every possible HTTP response code,\nsince many of them aren\u2019t going to be that common. However, as documented in\nthe <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> documentation, you can also pass the\nHTTP status code into the constructor for <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>\nto create a return class for any status code you like. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"c1\"># Return a &quot;created&quot; (201) response code.</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">201</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Because 404 errors are by far the most common HTTP error, there\u2019s an easier way\nto handle those errors.</p>\n<div class=\"section\" id=\"s-the-http404-exception\">\n<span id=\"the-http404-exception\"></span><h3>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Http404</span></code> exception<a class=\"headerlink\" href=\"#the-http404-exception\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.Http404\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">django.http.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Http404</span></code><a class=\"headerlink\" href=\"#django.http.Http404\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>When you return an error such as <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponseNotFound\" title=\"django.http.HttpResponseNotFound\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseNotFound</span></code></a>,\nyou\u2019re responsible for defining the HTML of the resulting error page:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">return</span> <span class=\"n\">HttpResponseNotFound</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;h1&gt;Page not found&lt;/h1&gt;&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For convenience, and because it\u2019s a good idea to have a consistent 404 error page\nacross your site, Django provides an <code class=\"docutils literal notranslate\"><span class=\"pre\">Http404</span></code> exception. If you raise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Http404</span></code> at any point in a view function, Django will catch it and return the\nstandard error page for your application, along with an HTTP error code 404.</p>\n<p>Example usage:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">Http404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Poll</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">poll_id</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">poll_id</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Http404</span><span class=\"p\">(</span><span class=\"s2\">&quot;Poll does not exist&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;polls/detail.html&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;poll&quot;</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>In order to show customized HTML when Django returns a 404, you can create an\nHTML template named <code class=\"docutils literal notranslate\"><span class=\"pre\">404.html</span></code> and place it in the top level of your\ntemplate tree. This template will then be served when <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is set\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<p>When <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, you can provide a message to <code class=\"docutils literal notranslate\"><span class=\"pre\">Http404</span></code> and\nit will appear in the standard 404 debug template. Use these messages for\ndebugging purposes; they generally aren\u2019t suitable for use in a production 404\ntemplate.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-customizing-error-views\">\n<span id=\"s-id1\"></span><span id=\"customizing-error-views\"></span><span id=\"id1\"></span><h2>Customizing error views<a class=\"headerlink\" href=\"#customizing-error-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The default error views in Django should suffice for most web applications,\nbut can easily be overridden if you need any custom behavior. Specify the\nhandlers as seen below in your URLconf (setting them anywhere else will have no\neffect).</p>\n<p>The <a class=\"reference internal\" href=\"../../../ref/views/#django.views.defaults.page_not_found\" title=\"django.views.defaults.page_not_found\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">page_not_found()</span></code></a> view is overridden by\n<a class=\"reference internal\" href=\"../../../ref/urls/#django.conf.urls.handler404\" title=\"django.conf.urls.handler404\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">handler404</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">handler404</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mysite.views.my_custom_page_not_found_view&quot;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../../ref/views/#django.views.defaults.server_error\" title=\"django.views.defaults.server_error\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">server_error()</span></code></a> view is overridden by\n<a class=\"reference internal\" href=\"../../../ref/urls/#django.conf.urls.handler500\" title=\"django.conf.urls.handler500\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">handler500</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">handler500</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mysite.views.my_custom_error_view&quot;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../../ref/views/#django.views.defaults.permission_denied\" title=\"django.views.defaults.permission_denied\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">permission_denied()</span></code></a> view is overridden by\n<a class=\"reference internal\" href=\"../../../ref/urls/#django.conf.urls.handler403\" title=\"django.conf.urls.handler403\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">handler403</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">handler403</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mysite.views.my_custom_permission_denied_view&quot;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../../ref/views/#django.views.defaults.bad_request\" title=\"django.views.defaults.bad_request\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">bad_request()</span></code></a> view is overridden by\n<a class=\"reference internal\" href=\"../../../ref/urls/#django.conf.urls.handler400\" title=\"django.conf.urls.handler400\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">handler400</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">handler400</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mysite.views.my_custom_bad_request_view&quot;</span>\n</pre></div>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Use the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-CSRF_FAILURE_VIEW\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_FAILURE_VIEW</span></code></a> setting to override the CSRF error\nview.</p>\n</div>\n<div class=\"section\" id=\"s-testing-custom-error-views\">\n<span id=\"testing-custom-error-views\"></span><h3>Testing custom error views<a class=\"headerlink\" href=\"#testing-custom-error-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To test the response of a custom error handler, raise the appropriate exception\nin a test view. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">PermissionDenied</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleTestCase</span><span class=\"p\">,</span> <span class=\"n\">override_settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">response_error_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error handler content&quot;</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">403</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">permission_denied_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"n\">PermissionDenied</span>\n\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;403/&quot;</span><span class=\"p\">,</span> <span class=\"n\">permission_denied_view</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">handler403</span> <span class=\"o\">=</span> <span class=\"n\">response_error_handler</span>\n\n\n<span class=\"c1\"># ROOT_URLCONF must specify the module that contains handler403 = ...</span>\n<span class=\"nd\">@override_settings</span><span class=\"p\">(</span><span class=\"n\">ROOT_URLCONF</span><span class=\"o\">=</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">CustomErrorHandlerTests</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_handler_renders_template_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/403/&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Make assertions on the response here. For example:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertContains</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Error handler content&quot;</span><span class=\"p\">,</span> <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"mi\">403</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-async-views\">\n<span id=\"s-id2\"></span><span id=\"async-views\"></span><span id=\"id2\"></span><h2>Async views<a class=\"headerlink\" href=\"#async-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As well as being synchronous functions, views can also be asynchronous\n(\u201casync\u201d) functions, normally defined using Python\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code> syntax.\nDjango will automatically detect these and run them in an async context.\nHowever, you will need to use an async server based on ASGI to get their\nperformance benefits.</p>\n<p>Here\u2019s an example of an async view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">current_datetime</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n    <span class=\"n\">html</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;html&gt;&lt;body&gt;It is now </span><span class=\"si\">%s</span><span class=\"s2\">.&lt;/body&gt;&lt;/html&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">now</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can read more about Django\u2019s async support, and how to best use async\nviews, in <a class=\"reference internal\" href=\"../../async/\"><span class=\"doc\">Asynchronous support</span></a>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/http/decorators", "View decorators", "N", "next"], ["topics/http/urls", "URL dispatcher", "P", "previous"]], "sourcename": "topics/http/views.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing views</a><ul>\n<li><a class=\"reference internal\" href=\"#a-simple-view\">A simple view</a></li>\n<li><a class=\"reference internal\" href=\"#mapping-urls-to-views\">Mapping URLs to views</a></li>\n<li><a class=\"reference internal\" href=\"#returning-errors\">Returning errors</a><ul>\n<li><a class=\"reference internal\" href=\"#the-http404-exception\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">Http404</span></code> exception</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#customizing-error-views\">Customizing error views</a><ul>\n<li><a class=\"reference internal\" href=\"#testing-custom-error-views\">Testing custom error views</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#async-views\">Async views</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/http/views", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
