{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../tablespaces/", "title": "Tablespaces"}, "next": {"link": "../instrumentation/", "title": "Database instrumentation"}, "title": "Database access optimization", "meta": {}, "body": "<div class=\"section\" id=\"s-database-access-optimization\">\n<span id=\"database-access-optimization\"></span><h1>Database access optimization<a class=\"headerlink\" href=\"#database-access-optimization\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django\u2019s database layer provides various ways to help developers get the most\nout of their databases. This document gathers together links to the relevant\ndocumentation, and adds various tips, organized under a number of headings that\noutline the steps to take when attempting to optimize your database usage.</p>\n<div class=\"section\" id=\"s-profile-first\">\n<span id=\"profile-first\"></span><h2>Profile first<a class=\"headerlink\" href=\"#profile-first\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As general programming practice, this goes without saying. Find out <a class=\"reference internal\" href=\"../../../faq/models/#faq-see-raw-sql-queries\"><span class=\"std std-ref\">what\nqueries you are doing and what they are costing you</span></a>.\nUse <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.explain\" title=\"django.db.models.query.QuerySet.explain\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.explain()</span></code></a> to understand how specific <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are\nexecuted by your database. You may also want to use an external project like\n<a class=\"reference external\" href=\"https://github.com/jazzband/django-debug-toolbar/\">django-debug-toolbar</a>, or a tool that monitors your database directly.</p>\n<p>Remember that you may be optimizing for speed or memory or both, depending on\nyour requirements. Sometimes optimizing for one will be detrimental to the\nother, but sometimes they will help each other. Also, work that is done by the\ndatabase process might not have the same cost (to you) as the same amount of\nwork done in your Python process. It is up to you to decide what your\npriorities are, where the balance must lie, and profile all of these as required\nsince this will depend on your application and server.</p>\n<p>With everything that follows, remember to profile after every change to ensure\nthat the change is a benefit, and a big enough benefit given the decrease in\nreadability of your code. <strong>All</strong> of the suggestions below come with the caveat\nthat in your circumstances the general principle might not apply, or might even\nbe reversed.</p>\n</div>\n<div class=\"section\" id=\"s-use-standard-db-optimization-techniques\">\n<span id=\"use-standard-db-optimization-techniques\"></span><h2>Use standard DB optimization techniques<a class=\"headerlink\" href=\"#use-standard-db-optimization-techniques\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>\u2026including:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Database_index\">Indexes</a>. This is a number one priority, <em>after</em> you have determined from\nprofiling what indexes should be added. Use\n<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.indexes\" title=\"django.db.models.Options.indexes\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.indexes</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.db_index\" title=\"django.db.models.Field.db_index\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.db_index</span></code></a> to add these from\nDjango. Consider adding indexes to fields that you frequently query using\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a>, etc. as indexes may help\nto speed up lookups. Note that determining the best indexes is a complex\ndatabase-dependent topic that will depend on your particular application.\nThe overhead of maintaining an index may outweigh any gains in query speed.</li>\n</ul>\n<ul class=\"simple\">\n<li>Appropriate use of field types.</li>\n</ul>\n<p>We will assume you have done the things listed above. The rest of this document\nfocuses on how to use Django in such a way that you are not doing unnecessary\nwork. This document also does not address other optimization techniques that\napply to all expensive operations, such as <a class=\"reference internal\" href=\"../../cache/\"><span class=\"doc\">general purpose caching</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-understand-querysets\">\n<span id=\"understand-querysets\"></span><h2>Understand <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#understand-querysets\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Understanding <a class=\"reference internal\" href=\"../../../ref/models/querysets/\"><span class=\"doc\">QuerySets</span></a> is vital to getting good\nperformance with simple code. In particular:</p>\n<div class=\"section\" id=\"s-understand-queryset-evaluation\">\n<span id=\"understand-queryset-evaluation\"></span><h3>Understand <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> evaluation<a class=\"headerlink\" href=\"#understand-queryset-evaluation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To avoid performance problems, it is important to understand:</p>\n<ul class=\"simple\">\n<li>that <a class=\"reference internal\" href=\"../queries/#querysets-are-lazy\"><span class=\"std std-ref\">QuerySets are lazy</span></a>.</li>\n<li>when <a class=\"reference internal\" href=\"../../../ref/models/querysets/#when-querysets-are-evaluated\"><span class=\"std std-ref\">they are evaluated</span></a>.</li>\n<li>how <a class=\"reference internal\" href=\"../queries/#caching-and-querysets\"><span class=\"std std-ref\">the data is held in memory</span></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-understand-cached-attributes\">\n<span id=\"understand-cached-attributes\"></span><h3>Understand cached attributes<a class=\"headerlink\" href=\"#understand-cached-attributes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As well as caching of the whole <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, there is caching of the result of\nattributes on ORM objects. In general, attributes that are not callable will be\ncached. For example, assuming the <a class=\"reference internal\" href=\"../queries/#queryset-model-example\"><span class=\"std std-ref\">example blog models</span></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">blog</span>  <span class=\"c1\"># Blog object is retrieved at this point</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">blog</span>  <span class=\"c1\"># cached version, no DB access</span>\n</pre></div>\n</div>\n<p>But in general, callable attributes cause DB lookups every time:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># query performed</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># query performed again</span>\n</pre></div>\n</div>\n<p>Be careful when reading template code - the template system does not allow use\nof parentheses, but will call callables automatically, hiding the above\ndistinction.</p>\n<p>Be careful with your own custom properties - it is up to you to implement\ncaching when required, for example using the\n<a class=\"reference internal\" href=\"../../../ref/utils/#django.utils.functional.cached_property\" title=\"django.utils.functional.cached_property\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cached_property</span></code></a> decorator.</p>\n</div>\n<div class=\"section\" id=\"s-use-the-with-template-tag\">\n<span id=\"use-the-with-template-tag\"></span><h3>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code> template tag<a class=\"headerlink\" href=\"#use-the-with-template-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To make use of the caching behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, you may need to use the\n<a class=\"reference internal\" href=\"../../../ref/templates/builtins/#std-templatetag-with\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">with</span></code></a> template tag.</p>\n</div>\n<div class=\"section\" id=\"s-use-iterator\">\n<span id=\"use-iterator\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code><a class=\"headerlink\" href=\"#use-iterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you have a lot of objects, the caching behavior of the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> can\ncause a large amount of memory to be used. In this case,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.iterator\" title=\"django.db.models.query.QuerySet.iterator\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">iterator()</span></code></a> may help.</p>\n</div>\n<div class=\"section\" id=\"s-use-explain\">\n<span id=\"use-explain\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">explain()</span></code><a class=\"headerlink\" href=\"#use-explain\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.explain\" title=\"django.db.models.query.QuerySet.explain\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.explain()</span></code></a> gives you detailed information about how the database\nexecutes a query, including indexes and joins that are used. These details may\nhelp you find queries that could be rewritten more efficiently, or identify\nindexes that could be added to improve performance.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-do-database-work-in-the-database-rather-than-in-python\">\n<span id=\"do-database-work-in-the-database-rather-than-in-python\"></span><h2>Do database work in the database rather than in Python<a class=\"headerlink\" href=\"#do-database-work-in-the-database-rather-than-in-python\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For instance:</p>\n<ul class=\"simple\">\n<li>At the most basic level, use <a class=\"reference internal\" href=\"../../../ref/models/querysets/#queryset-api\"><span class=\"std std-ref\">filter and exclude</span></a> to do\nfiltering in the database.</li>\n<li>Use <a class=\"reference internal\" href=\"../../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> to filter\nbased on other fields within the same model.</li>\n<li>Use <a class=\"reference internal\" href=\"../aggregation/\"><span class=\"doc\">annotate to do aggregation in the database</span></a>.</li>\n</ul>\n<p>If these aren\u2019t enough to generate the SQL you need:</p>\n<div class=\"section\" id=\"s-use-rawsql\">\n<span id=\"use-rawsql\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code><a class=\"headerlink\" href=\"#use-rawsql\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A less portable but more powerful method is the\n<a class=\"reference internal\" href=\"../../../ref/models/expressions/#django.db.models.expressions.RawSQL\" title=\"django.db.models.expressions.RawSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code></a> expression, which allows some SQL\nto be explicitly added to the query. If that still isn\u2019t powerful enough:</p>\n</div>\n<div class=\"section\" id=\"s-use-raw-sql\">\n<span id=\"use-raw-sql\"></span><h3>Use raw SQL<a class=\"headerlink\" href=\"#use-raw-sql\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Write your own <a class=\"reference internal\" href=\"../sql/\"><span class=\"doc\">custom SQL to retrieve data or populate models</span></a>. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connection.queries</span></code> to find out what Django\nis writing for you and start from there.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-retrieve-individual-objects-using-a-unique-indexed-column\">\n<span id=\"retrieve-individual-objects-using-a-unique-indexed-column\"></span><h2>Retrieve individual objects using a unique, indexed column<a class=\"headerlink\" href=\"#retrieve-individual-objects-using-a-unique-indexed-column\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are two reasons to use a column with\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.unique\" title=\"django.db.models.Field.unique\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.db_index\" title=\"django.db.models.Field.db_index\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_index</span></code></a> when using\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> to retrieve individual objects.\nFirst, the query will be quicker because of the underlying database index.\nAlso, the query could run much slower if multiple objects match the lookup;\nhaving a unique constraint on the column guarantees this will never happen.</p>\n<p>So using the <a class=\"reference internal\" href=\"../queries/#queryset-model-example\"><span class=\"std std-ref\">example blog models</span></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>will be quicker than:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;News Item Title&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>because <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> is indexed by the database and is guaranteed to be unique.</p>\n<p>Doing the following is potentially quite slow:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">headline__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;News&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>First of all, <code class=\"docutils literal notranslate\"><span class=\"pre\">headline</span></code> is not indexed, which will make the underlying\ndatabase fetch slower.</p>\n<p>Second, the lookup doesn\u2019t guarantee that only one object will be returned.\nIf the query matches more than one object, it will retrieve and transfer all of\nthem from the database. This penalty could be substantial if hundreds or\nthousands of records are returned. The penalty will be compounded if the\ndatabase lives on a separate server, where network overhead and latency also\nplay a factor.</p>\n</div>\n<div class=\"section\" id=\"s-retrieve-everything-at-once-if-you-know-you-will-need-it\">\n<span id=\"retrieve-everything-at-once-if-you-know-you-will-need-it\"></span><h2>Retrieve everything at once if you know you will need it<a class=\"headerlink\" href=\"#retrieve-everything-at-once-if-you-know-you-will-need-it\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Hitting the database multiple times for different parts of a single \u2018set\u2019 of\ndata that you will need all parts of is, in general, less efficient than\nretrieving it all in one query. This is particularly important if you have a\nquery that is executed in a loop, and could therefore end up doing many database\nqueries, when only one was needed. So:</p>\n<div class=\"section\" id=\"s-use-queryset-select-related-and-prefetch-related\">\n<span id=\"use-queryset-select-related-and-prefetch-related\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.select_related()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code><a class=\"headerlink\" href=\"#use-queryset-select-related-and-prefetch-related\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Understand <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a> thoroughly, and use\nthem:</p>\n<ul class=\"simple\">\n<li>in <a class=\"reference internal\" href=\"../managers/\"><span class=\"doc\">managers and default managers</span></a> where\nappropriate. Be aware when your manager is and is not used; sometimes this is\ntricky so don\u2019t make assumptions.</li>\n<li>in view code or other layers, possibly making use of\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.prefetch_related_objects\" title=\"django.db.models.prefetch_related_objects\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">prefetch_related_objects()</span></code></a> where needed.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-don-t-retrieve-things-you-don-t-need\">\n<span id=\"don-t-retrieve-things-you-don-t-need\"></span><h2>Don\u2019t retrieve things you don\u2019t need<a class=\"headerlink\" href=\"#don-t-retrieve-things-you-don-t-need\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-use-queryset-values-and-values-list\">\n<span id=\"use-queryset-values-and-values-list\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.values()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code><a class=\"headerlink\" href=\"#use-queryset-values-and-values-list\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you only want a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of values, and don\u2019t need ORM model\nobjects, make appropriate usage of\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a>.\nThese can be useful for replacing model objects in template code - as long as\nthe dicts you supply have the same attributes as those used in the template,\nyou are fine.</p>\n</div>\n<div class=\"section\" id=\"s-use-queryset-defer-and-only\">\n<span id=\"use-queryset-defer-and-only\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.defer()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code><a class=\"headerlink\" href=\"#use-queryset-defer-and-only\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Use <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a> if there are database columns\nyou know that you won\u2019t need (or won\u2019t need in most cases) to avoid loading\nthem. Note that if you <em>do</em> use them, the ORM will have to go and get them in\na separate query, making this a pessimization if you use it inappropriately.</p>\n<p>Don\u2019t be too aggressive in deferring fields without profiling as the database\nhas to read most of the non-text, non-<code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code> data from the disk for a\nsingle row in the results, even if it ends up only using a few columns. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> methods are most useful when you can avoid loading a\nlot of text data or for fields that might take a lot of processing to convert\nback to Python. As always, profile first, then optimize.</p>\n</div>\n<div class=\"section\" id=\"s-use-queryset-contains-obj\">\n<span id=\"use-queryset-contains-obj\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.contains(obj)</span></code><a class=\"headerlink\" href=\"#use-queryset-contains-obj\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>\u2026if you only want to find out if <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is in the queryset, rather than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">obj</span> <span class=\"pre\">in</span> <span class=\"pre\">queryset</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-use-queryset-count\">\n<span id=\"use-queryset-count\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.count()</span></code><a class=\"headerlink\" href=\"#use-queryset-count\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>\u2026if you only want the count, rather than doing <code class=\"docutils literal notranslate\"><span class=\"pre\">len(queryset)</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-use-queryset-exists\">\n<span id=\"use-queryset-exists\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.exists()</span></code><a class=\"headerlink\" href=\"#use-queryset-exists\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>\u2026if you only want to find out if at least one result exists, rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span>\n<span class=\"pre\">queryset</span></code>.</p>\n<p>But:</p>\n</div>\n<div class=\"section\" id=\"s-don-t-overuse-contains-count-and-exists\">\n<span id=\"s-overuse-of-count-and-exists\"></span><span id=\"don-t-overuse-contains-count-and-exists\"></span><span id=\"overuse-of-count-and-exists\"></span><h3>Don\u2019t overuse <code class=\"docutils literal notranslate\"><span class=\"pre\">contains()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">exists()</span></code><a class=\"headerlink\" href=\"#don-t-overuse-contains-count-and-exists\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you are going to need other data from the QuerySet, evaluate it immediately.</p>\n<p>For example, assuming a <code class=\"docutils literal notranslate\"><span class=\"pre\">Group</span></code> model that has a many-to-many relation to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code>, the following code is optimal:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"n\">group</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"n\">display_group_members</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">members</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">current_user</span> <span class=\"ow\">in</span> <span class=\"n\">members</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;You and&quot;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;other users are members of this group.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;There are&quot;</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">members</span><span class=\"p\">),</span> <span class=\"s2\">&quot;members in this group.&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">member</span> <span class=\"ow\">in</span> <span class=\"n\">members</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">member</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;There are no members in this group.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>It is optimal because:</p>\n<ol class=\"arabic simple\">\n<li>Since QuerySets are lazy, this does no database queries if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">display_group_members</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n<li>Storing <code class=\"docutils literal notranslate\"><span class=\"pre\">group.members.all()</span></code> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">members</span></code> variable allows its\nresult cache to be reused.</li>\n<li>The line <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">members:</span></code> causes <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.__bool__()</span></code> to be called, which\ncauses the <code class=\"docutils literal notranslate\"><span class=\"pre\">group.members.all()</span></code> query to be run on the database. If there\naren\u2019t any results, it will return <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</li>\n<li>The line <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">current_user</span> <span class=\"pre\">in</span> <span class=\"pre\">members:</span></code> checks if the user is in the result\ncache, so no additional database queries are issued.</li>\n<li>The use of <code class=\"docutils literal notranslate\"><span class=\"pre\">len(members)</span></code> calls <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.__len__()</span></code>, reusing the result\ncache, so again, no database queries are issued.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span> <span class=\"pre\">member</span></code> loop iterates over the result cache.</li>\n</ol>\n<p>In total, this code does either one or zero database queries. The only\ndeliberate optimization performed is using the <code class=\"docutils literal notranslate\"><span class=\"pre\">members</span></code> variable. Using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.exists()</span></code> for the <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.contains()</span></code> for the <code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code>,\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.count()</span></code> for the count would each cause additional queries.</p>\n</div>\n<div class=\"section\" id=\"s-use-queryset-update-and-delete\">\n<span id=\"use-queryset-update-and-delete\"></span><h3>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code><a class=\"headerlink\" href=\"#use-queryset-update-and-delete\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Rather than retrieve a load of objects, set some values, and save them\nindividual, use a bulk SQL UPDATE statement, via <a class=\"reference internal\" href=\"../queries/#topics-db-queries-update\"><span class=\"std std-ref\">QuerySet.update()</span></a>. Similarly, do <a class=\"reference internal\" href=\"../queries/#topics-db-queries-delete\"><span class=\"std std-ref\">bulk deletes</span></a> where possible.</p>\n<p>Note, however, that these bulk update methods cannot call the <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> methods of individual instances, which means that any custom\nbehavior you have added for these methods will not be executed, including\nanything driven from the normal database object <a class=\"reference internal\" href=\"../../../ref/signals/\"><span class=\"doc\">signals</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-use-foreign-key-values-directly\">\n<span id=\"use-foreign-key-values-directly\"></span><h3>Use foreign key values directly<a class=\"headerlink\" href=\"#use-foreign-key-values-directly\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you only need a foreign key value, use the foreign key value that is already on\nthe object you\u2019ve got, rather than getting the whole related object and taking\nits primary key. i.e. do:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">blog_id</span>\n</pre></div>\n</div>\n<p>instead of:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">id</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-don-t-order-results-if-you-don-t-care\">\n<span id=\"don-t-order-results-if-you-don-t-care\"></span><h3>Don\u2019t order results if you don\u2019t care<a class=\"headerlink\" href=\"#don-t-order-results-if-you-don-t-care\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Ordering is not free; each field to order by is an operation the database must\nperform. If a model has a default ordering (<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.ordering</span></code></a>) and you don\u2019t need it, remove\nit on a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> by calling\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> with no parameters.</p>\n<p>Adding an index to your database may help to improve ordering performance.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-use-bulk-methods\">\n<span id=\"use-bulk-methods\"></span><h2>Use bulk methods<a class=\"headerlink\" href=\"#use-bulk-methods\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Use bulk methods to reduce the number of SQL statements.</p>\n<div class=\"section\" id=\"s-create-in-bulk\">\n<span id=\"create-in-bulk\"></span><h3>Create in bulk<a class=\"headerlink\" href=\"#create-in-bulk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When creating objects, where possible, use the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">bulk_create()</span></code></a> method to reduce the\nnumber of SQL queries. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is a test&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is only a test&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026is preferable to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is a test&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is only a test&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note that there are a number of <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">caveats</span> <span class=\"pre\">to</span> <span class=\"pre\">this</span> <span class=\"pre\">method</span></code></a>, so make sure it\u2019s appropriate\nfor your use case.</p>\n</div>\n<div class=\"section\" id=\"s-update-in-bulk\">\n<span id=\"update-in-bulk\"></span><h3>Update in bulk<a class=\"headerlink\" href=\"#update-in-bulk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When updating objects, where possible, use the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_update\" title=\"django.db.models.query.QuerySet.bulk_update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">bulk_update()</span></code></a> method to reduce the\nnumber of SQL queries. Given a list or queryset of objects:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is a test&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is only a test&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The following example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entries</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is not a test&quot;</span>\n<span class=\"n\">entries</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is no longer a test&quot;</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_update</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>\u2026is preferable to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entries</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is not a test&quot;</span>\n<span class=\"n\">entries</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">entries</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is no longer a test&quot;</span>\n<span class=\"n\">entries</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Note that there are a number of <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_update\" title=\"django.db.models.query.QuerySet.bulk_update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">caveats</span> <span class=\"pre\">to</span> <span class=\"pre\">this</span> <span class=\"pre\">method</span></code></a>, so make sure it\u2019s appropriate\nfor your use case.</p>\n</div>\n<div class=\"section\" id=\"s-insert-in-bulk\">\n<span id=\"insert-in-bulk\"></span><h3>Insert in bulk<a class=\"headerlink\" href=\"#insert-in-bulk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When inserting objects into <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyFields</span></code></a>, use\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a> with multiple\nobjects to reduce the number of SQL queries. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_band</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">,</span> <span class=\"n\">my_friend</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026is preferable to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_band</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">)</span>\n<span class=\"n\">my_band</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">my_friend</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026where <code class=\"docutils literal notranslate\"><span class=\"pre\">Bands</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Artists</span></code> have a many-to-many relationship.</p>\n<p>When inserting different pairs of objects into\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> or when the custom\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField.through\" title=\"django.db.models.ManyToManyField.through\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">through</span></code></a> table is defined, use\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">bulk_create()</span></code></a> method to reduce the\nnumber of SQL queries. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PizzaToppingRelationship</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">through</span>\n<span class=\"n\">PizzaToppingRelationship</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">PizzaToppingRelationship</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">=</span><span class=\"n\">my_pizza</span><span class=\"p\">,</span> <span class=\"n\">topping</span><span class=\"o\">=</span><span class=\"n\">pepperoni</span><span class=\"p\">),</span>\n        <span class=\"n\">PizzaToppingRelationship</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">=</span><span class=\"n\">your_pizza</span><span class=\"p\">,</span> <span class=\"n\">topping</span><span class=\"o\">=</span><span class=\"n\">pepperoni</span><span class=\"p\">),</span>\n        <span class=\"n\">PizzaToppingRelationship</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">=</span><span class=\"n\">your_pizza</span><span class=\"p\">,</span> <span class=\"n\">topping</span><span class=\"o\">=</span><span class=\"n\">mushroom</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"n\">ignore_conflicts</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026is preferable to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">pepperoni</span><span class=\"p\">)</span>\n<span class=\"n\">your_pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">pepperoni</span><span class=\"p\">,</span> <span class=\"n\">mushroom</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026where <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> have a many-to-many relationship. Note that\nthere are a number of <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">caveats</span> <span class=\"pre\">to</span> <span class=\"pre\">this</span> <span class=\"pre\">method</span></code></a>, so make sure it\u2019s appropriate\nfor your use case.</p>\n</div>\n<div class=\"section\" id=\"s-remove-in-bulk\">\n<span id=\"remove-in-bulk\"></span><h3>Remove in bulk<a class=\"headerlink\" href=\"#remove-in-bulk\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When removing objects from <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyFields</span></code></a>, use\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.remove\" title=\"django.db.models.fields.related.RelatedManager.remove\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">remove()</span></code></a> with multiple\nobjects to reduce the number of SQL queries. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_band</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">,</span> <span class=\"n\">my_friend</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026is preferable to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_band</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">me</span><span class=\"p\">)</span>\n<span class=\"n\">my_band</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">my_friend</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026where <code class=\"docutils literal notranslate\"><span class=\"pre\">Bands</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Artists</span></code> have a many-to-many relationship.</p>\n<p>When removing different pairs of objects from <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyFields</span></code></a>, use\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> on a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span></code></a> expression with multiple\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField.through\" title=\"django.db.models.ManyToManyField.through\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">through</span></code></a>  model instances to reduce\nthe number of SQL queries. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Q</span>\n\n<span class=\"n\">PizzaToppingRelationship</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">through</span>\n<span class=\"n\">PizzaToppingRelationship</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">=</span><span class=\"n\">my_pizza</span><span class=\"p\">,</span> <span class=\"n\">topping</span><span class=\"o\">=</span><span class=\"n\">pepperoni</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">=</span><span class=\"n\">your_pizza</span><span class=\"p\">,</span> <span class=\"n\">topping</span><span class=\"o\">=</span><span class=\"n\">pepperoni</span><span class=\"p\">)</span>\n    <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">=</span><span class=\"n\">your_pizza</span><span class=\"p\">,</span> <span class=\"n\">topping</span><span class=\"o\">=</span><span class=\"n\">mushroom</span><span class=\"p\">)</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>\u2026is preferable to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pepperoni</span><span class=\"p\">)</span>\n<span class=\"n\">your_pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">pepperoni</span><span class=\"p\">,</span> <span class=\"n\">mushroom</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026where <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> have a many-to-many relationship.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/instrumentation", "Database instrumentation", "N", "next"], ["topics/db/tablespaces", "Tablespaces", "P", "previous"]], "sourcename": "topics/db/optimization.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Database access optimization</a><ul>\n<li><a class=\"reference internal\" href=\"#profile-first\">Profile first</a></li>\n<li><a class=\"reference internal\" href=\"#use-standard-db-optimization-techniques\">Use standard DB optimization techniques</a></li>\n<li><a class=\"reference internal\" href=\"#understand-querysets\">Understand <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a><ul>\n<li><a class=\"reference internal\" href=\"#understand-queryset-evaluation\">Understand <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> evaluation</a></li>\n<li><a class=\"reference internal\" href=\"#understand-cached-attributes\">Understand cached attributes</a></li>\n<li><a class=\"reference internal\" href=\"#use-the-with-template-tag\">Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code> template tag</a></li>\n<li><a class=\"reference internal\" href=\"#use-iterator\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-explain\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">explain()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#do-database-work-in-the-database-rather-than-in-python\">Do database work in the database rather than in Python</a><ul>\n<li><a class=\"reference internal\" href=\"#use-rawsql\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-raw-sql\">Use raw SQL</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#retrieve-individual-objects-using-a-unique-indexed-column\">Retrieve individual objects using a unique, indexed column</a></li>\n<li><a class=\"reference internal\" href=\"#retrieve-everything-at-once-if-you-know-you-will-need-it\">Retrieve everything at once if you know you will need it</a><ul>\n<li><a class=\"reference internal\" href=\"#use-queryset-select-related-and-prefetch-related\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.select_related()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#don-t-retrieve-things-you-don-t-need\">Don\u2019t retrieve things you don\u2019t need</a><ul>\n<li><a class=\"reference internal\" href=\"#use-queryset-values-and-values-list\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.values()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-queryset-defer-and-only\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.defer()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-queryset-contains-obj\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.contains(obj)</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-queryset-count\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.count()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-queryset-exists\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.exists()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#don-t-overuse-contains-count-and-exists\">Don\u2019t overuse <code class=\"docutils literal notranslate\"><span class=\"pre\">contains()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-queryset-update-and-delete\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#use-foreign-key-values-directly\">Use foreign key values directly</a></li>\n<li><a class=\"reference internal\" href=\"#don-t-order-results-if-you-don-t-care\">Don\u2019t order results if you don\u2019t care</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#use-bulk-methods\">Use bulk methods</a><ul>\n<li><a class=\"reference internal\" href=\"#create-in-bulk\">Create in bulk</a></li>\n<li><a class=\"reference internal\" href=\"#update-in-bulk\">Update in bulk</a></li>\n<li><a class=\"reference internal\" href=\"#insert-in-bulk\">Insert in bulk</a></li>\n<li><a class=\"reference internal\" href=\"#remove-in-bulk\">Remove in bulk</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/optimization", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
