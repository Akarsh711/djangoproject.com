{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../managers/", "title": "Managers"}, "next": {"link": "../transactions/", "title": "Database transactions"}, "title": "Performing raw SQL queries", "meta": {}, "body": "<div class=\"section\" id=\"s-performing-raw-sql-queries\">\n<span id=\"performing-raw-sql-queries\"></span><h1>Performing raw SQL queries<a class=\"headerlink\" href=\"#performing-raw-sql-queries\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django gives you two ways of performing raw SQL queries: you can use\n<a class=\"reference internal\" href=\"#django.db.models.Manager.raw\" title=\"django.db.models.Manager.raw\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Manager.raw()</span></code></a> to <a class=\"reference internal\" href=\"#performing-raw-queries\">perform raw queries and return model instances</a>, or\nyou can avoid the model layer entirely and <a class=\"reference internal\" href=\"#executing-custom-sql-directly\">execute custom SQL directly</a>.</p>\n<div class=\"admonition-explore-the-orm-before-using-raw-sql admonition\">\n<p class=\"first admonition-title\">Explore the ORM before using raw SQL!</p>\n<p>The Django ORM provides many tools to express queries without writing raw\nSQL. For example:</p>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../../ref/models/querysets/\"><span class=\"doc\">QuerySet API</span></a> is extensive.</li>\n<li>You can <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate</span></code></a> and <a class=\"reference internal\" href=\"../aggregation/\"><span class=\"doc\">aggregate</span></a> using many built-in <a class=\"reference internal\" href=\"../../../ref/models/database-functions/\"><span class=\"doc\">database functions</span></a>. Beyond those, you can create\n<a class=\"reference internal\" href=\"../../../ref/models/expressions/\"><span class=\"doc\">custom query expressions</span></a>.</li>\n</ul>\n<p class=\"last\">Before using raw SQL, explore <a class=\"reference internal\" href=\"../\"><span class=\"doc\">the ORM</span></a>. Ask on\none of <a class=\"reference internal\" href=\"../../../faq/help/\"><span class=\"doc\">the support channels</span></a> to see if the ORM supports\nyour use case.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">You should be very careful whenever you write raw SQL. Every time you use\nit, you should properly escape any parameters that the user can control\nby using <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> in order to protect against SQL injection attacks.\nPlease read more about <a class=\"reference internal\" href=\"../../security/#sql-injection-protection\"><span class=\"std std-ref\">SQL injection protection</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-performing-raw-queries\">\n<span id=\"s-executing-raw-queries\"></span><span id=\"performing-raw-queries\"></span><span id=\"executing-raw-queries\"></span><h2>Performing raw queries<a class=\"headerlink\" href=\"#performing-raw-queries\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code> manager method can be used to perform raw SQL queries that\nreturn model instances:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Manager.raw\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Manager.</span></code><code class=\"sig-name descname\"><span class=\"pre\">raw</span></code>(<em><span class=\"n\"><span class=\"pre\">raw_query</span></span></em>, <em><span class=\"n\"><span class=\"pre\">params</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">()</span></span></em>, <em><span class=\"n\"><span class=\"pre\">translations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Manager.raw\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method takes a raw SQL query, executes it, and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.query.RawQuerySet</span></code> instance. This <code class=\"docutils literal notranslate\"><span class=\"pre\">RawQuerySet</span></code> instance\ncan be iterated over like a normal <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> to\nprovide object instances.</p>\n<p>This is best illustrated with an example. Suppose you have the following model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n    <span class=\"n\">birth_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You could then execute custom SQL like so:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM myapp_person&quot;</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">John Smith</span>\n<span class=\"go\">Jane Jones</span>\n</pre></div>\n</div>\n<p>This example isn\u2019t very exciting \u2013 it\u2019s exactly the same as running\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Person.objects.all()</span></code>. However, <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code> has a bunch of other options that\nmake it very powerful.</p>\n<div class=\"admonition-model-table-names admonition\">\n<p class=\"first admonition-title\">Model table names</p>\n<p>Where did the name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> table come from in that example?</p>\n<p>By default, Django figures out a database table name by joining the\nmodel\u2019s \u201capp label\u201d \u2013 the name you used in <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">startapp</span></code> \u2013 to\nthe model\u2019s class name, with an underscore between them. In the example\nwe\u2019ve assumed that the <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> model lives in an app named <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp</span></code>,\nso its table would be <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp_person</span></code>.</p>\n<p class=\"last\">For more details check out the documentation for the\n<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.db_table\" title=\"django.db.models.Options.db_table\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_table</span></code></a> option, which also lets you manually set the\ndatabase table name.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">No checking is done on the SQL statement that is passed in to <code class=\"docutils literal notranslate\"><span class=\"pre\">.raw()</span></code>.\nDjango expects that the statement will return a set of rows from the\ndatabase, but does nothing to enforce that. If the query does not\nreturn rows, a (possibly cryptic) error will result.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">If you are performing queries on MySQL, note that MySQL\u2019s silent type coercion\nmay cause unexpected results when mixing types. If you query on a string\ntype column, but with an integer value, MySQL will coerce the types of all values\nin the table to an integer before performing the comparison. For example, if your\ntable contains the values <code class=\"docutils literal notranslate\"><span class=\"pre\">'abc'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'def'</span></code> and you query for <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span> <span class=\"pre\">mycolumn=0</span></code>,\nboth rows will match. To prevent this, perform the correct typecasting\nbefore using the value in a query.</p>\n</div>\n<div class=\"section\" id=\"s-mapping-query-fields-to-model-fields\">\n<span id=\"mapping-query-fields-to-model-fields\"></span><h3>Mapping query fields to model fields<a class=\"headerlink\" href=\"#mapping-query-fields-to-model-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code> automatically maps fields in the query to fields on the model.</p>\n<p>The order of fields in your query doesn\u2019t matter. In other words, both\nof the following queries work identically:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT id, first_name, last_name, birth_date FROM myapp_person&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT last_name, birth_date, first_name, id FROM myapp_person&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Matching is done by name. This means that you can use SQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">AS</span></code> clauses to\nmap fields in the query to model fields. So if you had some other table that\nhad <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> data in it, you could easily map it into <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> instances:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"gp\">... </span><span class=\"sd\">    SELECT first AS first_name,</span>\n<span class=\"gp\">... </span><span class=\"sd\">           last AS last_name,</span>\n<span class=\"gp\">... </span><span class=\"sd\">           bd AS birth_date,</span>\n<span class=\"gp\">... </span><span class=\"sd\">           pk AS id,</span>\n<span class=\"gp\">... </span><span class=\"sd\">    FROM some_other_table</span>\n<span class=\"gp\">... </span><span class=\"sd\">    &quot;&quot;&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As long as the names match, the model instances will be created correctly.</p>\n<p>Alternatively, you can map fields in the query to model fields using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">translations</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code>. This is a dictionary mapping names of\nfields in the query to names of fields on the model. For example, the above\nquery could also be written:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">name_map</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;first&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;last&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;last_name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bd&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;birth_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM some_other_table&quot;</span><span class=\"p\">,</span> <span class=\"n\">translations</span><span class=\"o\">=</span><span class=\"n\">name_map</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-index-lookups\">\n<span id=\"index-lookups\"></span><h3>Index lookups<a class=\"headerlink\" href=\"#index-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code> supports indexing, so if you need only the first result you can\nwrite:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first_person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM myapp_person&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>However, the indexing and slicing are not performed at the database level. If\nyou have a large number of <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> objects in your database, it is more\nefficient to limit the query at the SQL level:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">first_person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM myapp_person LIMIT 1&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-deferring-model-fields\">\n<span id=\"deferring-model-fields\"></span><h3>Deferring model fields<a class=\"headerlink\" href=\"#deferring-model-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Fields may also be left out:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT id, first_name FROM myapp_person&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> objects returned by this query will be deferred model instances\n(see <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a>). This means that the\nfields that are omitted from the query will be loaded on demand. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT id, first_name FROM myapp_person&quot;</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span>  <span class=\"c1\"># This will be retrieved by the original query</span>\n<span class=\"gp\">... </span>        <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">,</span>  <span class=\"c1\"># This will be retrieved on demand</span>\n<span class=\"gp\">... </span>    <span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">John Smith</span>\n<span class=\"go\">Jane Jones</span>\n</pre></div>\n</div>\n<p>From outward appearances, this looks like the query has retrieved both\nthe first name and last name. However, this example actually issued 3\nqueries. Only the first names were retrieved by the <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code> query \u2013 the\nlast names were both retrieved on demand when they were printed.</p>\n<p>There is only one field that you can\u2019t leave out - the primary key\nfield. Django uses the primary key to identify model instances, so it\nmust always be included in a raw query. A\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.FieldDoesNotExist\" title=\"django.core.exceptions.FieldDoesNotExist\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FieldDoesNotExist</span></code></a> exception will be raised if\nyou forget to include the primary key.</p>\n</div>\n<div class=\"section\" id=\"s-adding-annotations\">\n<span id=\"adding-annotations\"></span><h3>Adding annotations<a class=\"headerlink\" href=\"#adding-annotations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can also execute queries containing fields that aren\u2019t defined on the\nmodel. For example, we could use <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/functions-datetime.html\">PostgreSQL\u2019s age() function</a> to get a list\nof people with their ages calculated by the database:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT *, age(birth_date) AS age FROM myapp_person&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">people</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> is </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">))</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">John is 37.</span>\n<span class=\"go\">Jane is 42.</span>\n<span class=\"gp\">...</span>\n</pre></div>\n</div>\n<p>You can often avoid using raw SQL to compute annotations by instead using a\n<a class=\"reference internal\" href=\"../../../ref/models/expressions/#func-expressions\"><span class=\"std std-ref\">Func() expression</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-passing-parameters-into-raw\">\n<span id=\"passing-parameters-into-raw\"></span><h3>Passing parameters into <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code><a class=\"headerlink\" href=\"#passing-parameters-into-raw\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you need to perform parameterized queries, you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>\nargument to <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">lname</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Doe&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT * FROM myapp_person WHERE last_name = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">lname</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> is a list or dictionary of parameters. You\u2019ll use <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code>\nplaceholders in the query string for a list, or <code class=\"docutils literal notranslate\"><span class=\"pre\">%(key)s</span></code>\nplaceholders for a dictionary (where <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> is replaced by a\ndictionary key), regardless of your database engine. Such placeholders will be\nreplaced with parameters from the <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> argument.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Dictionary params are not supported with the SQLite backend; with\nthis backend, you must pass parameters as a list.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p><strong>Do not use string formatting on raw queries or quote placeholders in your\nSQL strings!</strong></p>\n<p>It\u2019s tempting to write the above query as:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SELECT * FROM myapp_person WHERE last_name = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">lname</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You might also think you should write your query like this (with quotes\naround <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code>):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SELECT * FROM myapp_person WHERE last_name = &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span>\n</pre></div>\n</div>\n<p><strong>Don\u2019t make either of these mistakes.</strong></p>\n<p class=\"last\">As discussed in <a class=\"reference internal\" href=\"../../security/#sql-injection-protection\"><span class=\"std std-ref\">SQL injection protection</span></a>, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>\nargument and leaving the placeholders unquoted protects you from <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/SQL_injection\">SQL\ninjection attacks</a>, a common exploit where attackers inject arbitrary\nSQL into your database. If you use string interpolation or quote the\nplaceholder, you\u2019re at risk for SQL injection.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-executing-custom-sql-directly\">\n<span id=\"s-executing-custom-sql\"></span><span id=\"executing-custom-sql-directly\"></span><span id=\"executing-custom-sql\"></span><h2>Executing custom SQL directly<a class=\"headerlink\" href=\"#executing-custom-sql-directly\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Sometimes even <a class=\"reference internal\" href=\"#django.db.models.Manager.raw\" title=\"django.db.models.Manager.raw\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Manager.raw()</span></code></a> isn\u2019t quite enough: you might need to\nperform queries that don\u2019t map cleanly to models, or directly execute\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">DELETE</span></code> queries.</p>\n<p>In these cases, you can always access the database directly, routing around\nthe model layer entirely.</p>\n<p>The object <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connection</span></code> represents the default database\nconnection. To use the database connection, call <code class=\"docutils literal notranslate\"><span class=\"pre\">connection.cursor()</span></code> to\nget a cursor object. Then, call <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.execute(sql,</span> <span class=\"pre\">[params])</span></code> to execute\nthe SQL and <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.fetchone()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.fetchall()</span></code> to return the\nresulting rows.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_custom_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;UPDATE bar SET foo = 1 WHERE baz = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">])</span>\n        <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT foo FROM bar WHERE baz = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">baz</span><span class=\"p\">])</span>\n        <span class=\"n\">row</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchone</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">row</span>\n</pre></div>\n</div>\n<p>To protect against SQL injection, you must not include quotes around the <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code>\nplaceholders in the SQL string.</p>\n<p>Note that if you want to include literal percent signs in the query, you have to\ndouble them in the case you are passing parameters:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT foo FROM bar WHERE baz = &#39;30%&#39;&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT foo FROM bar WHERE baz = &#39;30</span><span class=\"si\">%%</span><span class=\"s2\">&#39; AND id = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>If you are using <a class=\"reference internal\" href=\"../multi-db/\"><span class=\"doc\">more than one database</span></a>, you can\nuse <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connections</span></code> to obtain the connection (and cursor) for a\nspecific database. <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connections</span></code> is a dictionary-like\nobject that allows you to retrieve a specific connection using its\nalias:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connections</span>\n\n<span class=\"k\">with</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"s2\">&quot;my_db_alias&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Your code here</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>By default, the Python DB API will return results without their field names,\nwhich means you end up with a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> of values, rather than a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>. At a\nsmall performance and memory cost, you can return results as a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> by\nusing something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">dictfetchall</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return all rows from a cursor as a dict.</span>\n<span class=\"sd\">    Assume the column names are unique.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">columns</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()]</span>\n</pre></div>\n</div>\n<p>Another option is to use <a class=\"reference external\" href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">collections.namedtuple()</span></code></a> from the Python\nstandard library. A <code class=\"docutils literal notranslate\"><span class=\"pre\">namedtuple</span></code> is a tuple-like object that has fields\naccessible by attribute lookup; it\u2019s also indexable and iterable. Results are\nimmutable and accessible by field names or indices, which might be useful:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">namedtuplefetchall</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return all rows from a cursor as a namedtuple.</span>\n<span class=\"sd\">    Assume the column names are unique.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span>\n    <span class=\"n\">nt_result</span> <span class=\"o\">=</span> <span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s2\">&quot;Result&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">col</span> <span class=\"ow\">in</span> <span class=\"n\">desc</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">nt_result</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()]</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">dictfetchall()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">namedtuplefetchall()</span></code> examples assume unique\ncolumn names, since a cursor cannot distinguish columns from different tables.</p>\n<p>Here is an example of the difference between the three:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT id, parent_id FROM test LIMIT 2&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">()</span>\n<span class=\"go\">((54360982, None), (54360880, None))</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT id, parent_id FROM test LIMIT 2&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">dictfetchall</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n<span class=\"go\">[{&#39;parent_id&#39;: None, &#39;id&#39;: 54360982}, {&#39;parent_id&#39;: None, &#39;id&#39;: 54360880}]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">&quot;SELECT id, parent_id FROM test LIMIT 2&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">namedtuplefetchall</span><span class=\"p\">(</span><span class=\"n\">cursor</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span>\n<span class=\"go\">[Result(id=54360982, parent_id=None), Result(id=54360880, parent_id=None)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"go\">54360982</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"go\">54360982</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-connections-and-cursors\">\n<span id=\"connections-and-cursors\"></span><h3>Connections and cursors<a class=\"headerlink\" href=\"#connections-and-cursors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">cursor</span></code> mostly implement the standard Python DB-API\ndescribed in <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0249/\"><strong>PEP 249</strong></a> \u2014 except when it comes to <a class=\"reference internal\" href=\"../transactions/\"><span class=\"doc\">transaction handling</span></a>.</p>\n<p>If you\u2019re not familiar with the Python DB-API, note that the SQL statement in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.execute()</span></code> uses placeholders, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;%s&quot;</span></code>, rather than adding\nparameters directly within the SQL. If you use this technique, the underlying\ndatabase library will automatically escape your parameters as necessary.</p>\n<p>Also note that Django expects the <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;%s&quot;</span></code> placeholder, <em>not</em> the <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;?&quot;</span></code>\nplaceholder, which is used by the SQLite Python bindings. This is for the sake\nof consistency and sanity.</p>\n<p>Using a cursor as a context manager:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>is equivalent to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-calling-stored-procedures\">\n<span id=\"calling-stored-procedures\"></span><h4>Calling stored procedures<a class=\"headerlink\" href=\"#calling-stored-procedures\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.CursorWrapper.callproc\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">CursorWrapper.</span></code><code class=\"sig-name descname\"><span class=\"pre\">callproc</span></code>(<em><span class=\"n\"><span class=\"pre\">procname</span></span></em>, <em><span class=\"n\"><span class=\"pre\">params</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">kparams</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.CursorWrapper.callproc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Calls a database stored procedure with the given name. A sequence\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>) or dictionary (<code class=\"docutils literal notranslate\"><span class=\"pre\">kparams</span></code>) of input parameters may be\nprovided. Most databases don\u2019t support <code class=\"docutils literal notranslate\"><span class=\"pre\">kparams</span></code>. Of Django\u2019s built-in\nbackends, only Oracle supports it.</p>\n<p>For example, given this stored procedure in an Oracle database:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">PROCEDURE</span><span class=\"w\"> </span><span class=\"ss\">&quot;TEST_PROCEDURE&quot;</span><span class=\"p\">(</span><span class=\"n\">v_i</span><span class=\"w\"> </span><span class=\"nb\">INTEGER</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">v_text</span><span class=\"w\"> </span><span class=\"n\">NVARCHAR2</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p_i</span><span class=\"w\"> </span><span class=\"nb\">INTEGER</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p_text</span><span class=\"w\"> </span><span class=\"n\">NVARCHAR2</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">BEGIN</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p_i</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v_i</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"n\">p_text</span><span class=\"w\"> </span><span class=\"p\">:</span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">v_text</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"k\">END</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>This will call it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">callproc</span><span class=\"p\">(</span><span class=\"s2\">&quot;test_procedure&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;test&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/transactions", "Database transactions", "N", "next"], ["topics/db/managers", "Managers", "P", "previous"]], "sourcename": "topics/db/sql.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Performing raw SQL queries</a><ul>\n<li><a class=\"reference internal\" href=\"#performing-raw-queries\">Performing raw queries</a><ul>\n<li><a class=\"reference internal\" href=\"#mapping-query-fields-to-model-fields\">Mapping query fields to model fields</a></li>\n<li><a class=\"reference internal\" href=\"#index-lookups\">Index lookups</a></li>\n<li><a class=\"reference internal\" href=\"#deferring-model-fields\">Deferring model fields</a></li>\n<li><a class=\"reference internal\" href=\"#adding-annotations\">Adding annotations</a></li>\n<li><a class=\"reference internal\" href=\"#passing-parameters-into-raw\">Passing parameters into <code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#executing-custom-sql-directly\">Executing custom SQL directly</a><ul>\n<li><a class=\"reference internal\" href=\"#connections-and-cursors\">Connections and cursors</a><ul>\n<li><a class=\"reference internal\" href=\"#calling-stored-procedures\">Calling stored procedures</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/sql", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}