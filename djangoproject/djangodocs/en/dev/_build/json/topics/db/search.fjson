{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../aggregation/", "title": "Aggregation"}, "next": {"link": "../managers/", "title": "Managers"}, "title": "Search", "meta": {}, "body": "<div class=\"section\" id=\"s-search\">\n<span id=\"search\"></span><h1>Search<a class=\"headerlink\" href=\"#search\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A common task for web applications is to search some data in the database with\nuser input. In a simple case, this could be filtering a list of objects by a\ncategory. A more complex use case might require searching with weighting,\ncategorization, highlighting, multiple languages, and so on. This document\nexplains some of the possible use cases and the tools you can use.</p>\n<p>We\u2019ll refer to the same models used in <a class=\"reference internal\" href=\"../queries/\"><span class=\"doc\">Making queries</span></a>.</p>\n<div class=\"section\" id=\"s-use-cases\">\n<span id=\"use-cases\"></span><h2>Use Cases<a class=\"headerlink\" href=\"#use-cases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-standard-textual-queries\">\n<span id=\"standard-textual-queries\"></span><h3>Standard textual queries<a class=\"headerlink\" href=\"#standard-textual-queries\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Text-based fields have a selection of matching operations. For example, you may\nwish to allow lookup up an author like so:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Terry&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Terry Gilliam&gt;, &lt;Author: Terry Jones&gt;]</span>\n</pre></div>\n</div>\n<p>This is a very fragile solution as it requires the user to know an exact\nsubstring of the author\u2019s name. A better approach could be a case-insensitive\nmatch (<a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-icontains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">icontains</span></code></a>), but this is only marginally better.</p>\n</div>\n<div class=\"section\" id=\"s-a-database-s-more-advanced-comparison-functions\">\n<span id=\"a-database-s-more-advanced-comparison-functions\"></span><h3>A database\u2019s more advanced comparison functions<a class=\"headerlink\" href=\"#a-database-s-more-advanced-comparison-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re using PostgreSQL, Django provides <a class=\"reference internal\" href=\"../../../ref/contrib/postgres/search/\"><span class=\"doc\">a selection of database\nspecific tools</span></a> to allow you to leverage more\ncomplex querying options. Other databases have different selections of tools,\npossibly via plugins or user-defined functions. Django doesn\u2019t include any\nsupport for them at this time. We\u2019ll use some examples from PostgreSQL to\ndemonstrate the kind of functionality databases may have.</p>\n<div class=\"admonition-searching-in-other-databases admonition\">\n<p class=\"first admonition-title\">Searching in other databases</p>\n<p class=\"last\">All of the searching tools provided by <a class=\"reference internal\" href=\"../../../ref/contrib/postgres/#module-django.contrib.postgres\" title=\"django.contrib.postgres: PostgreSQL-specific fields and features\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code></a> are\nconstructed entirely on public APIs such as <a class=\"reference internal\" href=\"../../../ref/models/lookups/\"><span class=\"doc\">custom lookups</span></a> and <a class=\"reference internal\" href=\"../../../ref/models/database-functions/\"><span class=\"doc\">database functions</span></a>. Depending on your database, you should\nbe able to construct queries to allow similar APIs. If there are specific\nthings which cannot be achieved this way, please open a ticket.</p>\n</div>\n<p>In the above example, we determined that a case insensitive lookup would be\nmore useful. When dealing with non-English names, a further improvement is to\nuse <a class=\"reference internal\" href=\"../../../ref/contrib/postgres/lookups/#std-fieldlookup-unaccent\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">unaccented</span> <span class=\"pre\">comparison</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__unaccent__icontains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Helen&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Helen Mirren&gt;, &lt;Author: Helena Bonham Carter&gt;, &lt;Author: H\u00e9l\u00e8ne Joy&gt;]</span>\n</pre></div>\n</div>\n<p>This shows another issue, where we are matching against a different spelling of\nthe name. In this case we have an asymmetry though - a search for <code class=\"docutils literal notranslate\"><span class=\"pre\">Helen</span></code>\nwill pick up <code class=\"docutils literal notranslate\"><span class=\"pre\">Helena</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">H\u00e9l\u00e8ne</span></code>, but not the reverse. Another option\nwould be to use a <a class=\"reference internal\" href=\"../../../ref/contrib/postgres/lookups/#std-fieldlookup-trigram_similar\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">trigram_similar</span></code></a> comparison, which compares\nsequences of letters.</p>\n<p>For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__unaccent__lower__trigram_similar</span><span class=\"o\">=</span><span class=\"s2\">&quot;H\u00e9l\u00e8ne&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Helen Mirren&gt;, &lt;Author: H\u00e9l\u00e8ne Joy&gt;]</span>\n</pre></div>\n</div>\n<p>Now we have a different problem - the longer name of \u201cHelena Bonham Carter\u201d\ndoesn\u2019t show up as it is much longer. Trigram searches consider all\ncombinations of three letters, and compares how many appear in both search and\nsource strings. For the longer name, there are more combinations that don\u2019t\nappear in the source string, so it is no longer considered a close match.</p>\n<p>The correct choice of comparison functions here depends on your particular data\nset, for example the language(s) used and the type of text being searched. All\nof the examples we\u2019ve seen are on short strings where the user is likely to\nenter something close (by varying definitions) to the source data.</p>\n</div>\n<div class=\"section\" id=\"s-document-based-search\">\n<span id=\"document-based-search\"></span><h3>Document-based search<a class=\"headerlink\" href=\"#document-based-search\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Standard database operations stop being a useful approach when you start\nconsidering large blocks of text. Whereas the examples above can be thought of\nas operations on a string of characters, full text search looks at the actual\nwords. Depending on the system used, it\u2019s likely to use some of the following\nideas:</p>\n<ul class=\"simple\">\n<li>Ignoring \u201cstop words\u201d such as \u201ca\u201d, \u201cthe\u201d, \u201cand\u201d.</li>\n<li>Stemming words, so that \u201cpony\u201d and \u201cponies\u201d are considered similar.</li>\n<li>Weighting words based on different criteria such as how frequently they\nappear in the text, or the importance of the fields, such as the title or\nkeywords, that they appear in.</li>\n</ul>\n<p>There are many alternatives for using searching software, some of the most\nprominent are <a class=\"reference external\" href=\"https://www.elastic.co/\">Elastic</a> and <a class=\"reference external\" href=\"https://solr.apache.org/\">Solr</a>. These are full document-based search\nsolutions. To use them with data from Django models, you\u2019ll need a layer which\ntranslates your data into a textual document, including back-references to the\ndatabase ids. When a search using the engine returns a certain document, you\ncan then look it up in the database. There are a variety of third-party\nlibraries which are designed to help with this process.</p>\n<div class=\"section\" id=\"s-postgresql-support\">\n<span id=\"postgresql-support\"></span><h4>PostgreSQL support<a class=\"headerlink\" href=\"#postgresql-support\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>PostgreSQL has its own full text search implementation built-in. While not as\npowerful as some other search engines, it has the advantage of being inside\nyour database and so can easily be combined with other relational queries such\nas categorization.</p>\n<p>The <a class=\"reference internal\" href=\"../../../ref/contrib/postgres/#module-django.contrib.postgres\" title=\"django.contrib.postgres: PostgreSQL-specific fields and features\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code></a> module provides some helpers to make these\nqueries. For example, a query might select all the blog entries which mention\n\u201ccheese\u201d:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">body_text__search</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Entry: Cheese on Toast recipes&gt;, &lt;Entry: Pizza recipes&gt;]</span>\n</pre></div>\n</div>\n<p>You can also filter on a combination of fields and on related models:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__tagline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[</span>\n<span class=\"go\">    &lt;Entry: Cheese on Toast recipes&gt;,</span>\n<span class=\"go\">    &lt;Entry: Pizza Recipes&gt;,</span>\n<span class=\"go\">    &lt;Entry: Dairy farming in Argentina&gt;,</span>\n<span class=\"go\">]</span>\n</pre></div>\n</div>\n<p>See the <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.postgres</span></code> <a class=\"reference internal\" href=\"../../../ref/contrib/postgres/search/\"><span class=\"doc\">Full text search</span></a> document for\ncomplete details.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/managers", "Managers", "N", "next"], ["topics/db/aggregation", "Aggregation", "P", "previous"]], "sourcename": "topics/db/search.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Search</a><ul>\n<li><a class=\"reference internal\" href=\"#use-cases\">Use Cases</a><ul>\n<li><a class=\"reference internal\" href=\"#standard-textual-queries\">Standard textual queries</a></li>\n<li><a class=\"reference internal\" href=\"#a-database-s-more-advanced-comparison-functions\">A database\u2019s more advanced comparison functions</a></li>\n<li><a class=\"reference internal\" href=\"#document-based-search\">Document-based search</a><ul>\n<li><a class=\"reference internal\" href=\"#postgresql-support\">PostgreSQL support</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/search", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
