{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../deployment/checklist/", "title": "Deployment checklist"}, "next": {"link": "../error-reporting/", "title": "How to manage error reporting"}, "title": "How to upgrade Django to a newer version", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-upgrade-django-to-a-newer-version\">\n<span id=\"how-to-upgrade-django-to-a-newer-version\"></span><h1>How to upgrade Django to a newer version<a class=\"headerlink\" href=\"#how-to-upgrade-django-to-a-newer-version\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>While it can be a complex process at times, upgrading to the latest Django\nversion has several benefits:</p>\n<ul class=\"simple\">\n<li>New features and improvements are added.</li>\n<li>Bugs are fixed.</li>\n<li>Older version of Django will eventually no longer receive security updates.\n(see <a class=\"reference internal\" href=\"../../internals/release-process/#supported-versions-policy\"><span class=\"std std-ref\">Supported versions</span></a>).</li>\n<li>Upgrading as each new Django release is available makes future upgrades less\npainful by keeping your code base up to date.</li>\n</ul>\n<p>Here are some things to consider to help make your upgrade process as smooth as\npossible.</p>\n<div class=\"section\" id=\"s-required-reading\">\n<span id=\"required-reading\"></span><h2>Required Reading<a class=\"headerlink\" href=\"#required-reading\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If it\u2019s your first time doing an upgrade, it is useful to read the <a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">guide\non the different release processes</span></a>.</p>\n<p>Afterward, you should familiarize yourself with the changes that were made in\nthe new Django version(s):</p>\n<ul class=\"simple\">\n<li>Read the <a class=\"reference internal\" href=\"../../releases/\"><span class=\"doc\">release notes</span></a> for each \u2018final\u2019 release from\nthe one after your current Django version, up to and including the version to\nwhich you plan to upgrade.</li>\n<li>Look at the <a class=\"reference internal\" href=\"../../internals/deprecation/\"><span class=\"doc\">deprecation timeline</span></a> for the\nrelevant versions.</li>\n</ul>\n<p>Pay particular attention to backwards incompatible changes to get a clear idea\nof what will be needed for a successful upgrade.</p>\n<p>If you\u2019re upgrading through more than one feature version (e.g. 2.0 to 2.2),\nit\u2019s usually easier to upgrade through each feature release incrementally\n(2.0 to 2.1 to 2.2) rather than to make all the changes for each feature\nrelease at once. For each feature release, use the latest patch release (e.g.\nfor 2.1, use 2.1.15).</p>\n<p>The same incremental upgrade approach is recommended when upgrading from one\nLTS to the next.</p>\n</div>\n<div class=\"section\" id=\"s-dependencies\">\n<span id=\"dependencies\"></span><h2>Dependencies<a class=\"headerlink\" href=\"#dependencies\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In most cases it will be necessary to upgrade to the latest version of your\nDjango-related dependencies as well. If the Django version was recently\nreleased or if some of your dependencies are not well-maintained, some of your\ndependencies may not yet support the new Django version. In these cases you may\nhave to wait until new versions of your dependencies are released.</p>\n</div>\n<div class=\"section\" id=\"s-resolving-deprecation-warnings\">\n<span id=\"resolving-deprecation-warnings\"></span><h2>Resolving deprecation warnings<a class=\"headerlink\" href=\"#resolving-deprecation-warnings\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Before upgrading, it\u2019s a good idea to resolve any deprecation warnings raised\nby your project while using your current version of Django. Fixing these\nwarnings before upgrading ensures that you\u2019re informed about areas of the code\nthat need altering.</p>\n<p>In Python, deprecation warnings are silenced by default. You must turn them on\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">-Wa</span></code> Python command line option or the <span class=\"target\" id=\"index-0\"></span><a class=\"reference external\" href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS\" title=\"(in Python v3.11)\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHONWARNINGS</span></code></a>\nenvironment variable. For example, to show warnings while running tests:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -Wa manage.py <span class=\"nb\">test</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -Wa manage.py test\n</pre></div>\n</section>\n</div>\n<p>If you\u2019re not using the Django test runner, you may need to also ensure that\nany console output is not captured which would hide deprecation warnings. For\nexample, if you use <a class=\"reference external\" href=\"https://docs.pytest.org/\">pytest</a>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nv\">PYTHONWARNINGS</span><span class=\"o\">=</span>always pytest tests --capture<span class=\"o\">=</span>no\n</pre></div>\n</div>\n<p>Resolve any deprecation warnings with your current version of Django before\ncontinuing the upgrade process.</p>\n<p>Third party applications might use deprecated APIs in order to support multiple\nversions of Django, so deprecation warnings in packages you\u2019ve installed don\u2019t\nnecessarily indicate a problem. If a package doesn\u2019t support the latest version\nof Django, consider raising an issue or sending a pull request for it.</p>\n</div>\n<div class=\"section\" id=\"s-installation\">\n<span id=\"installation\"></span><h2>Installation<a class=\"headerlink\" href=\"#installation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once you\u2019re ready, it is time to <a class=\"reference internal\" href=\"../../topics/install/\"><span class=\"doc\">install the new Django version</span></a>. If you are using a <a class=\"reference external\" href=\"https://docs.python.org/3/library/venv.html#module-venv\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">virtual</span> <span class=\"pre\">environment</span></code></a> and it\nis a major upgrade, you might want to set up a new environment with all the\ndependencies first.</p>\n<p>If you installed Django with <a class=\"reference external\" href=\"https://pip.pypa.io/\">pip</a>, you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">--upgrade</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">-U</span></code> flag:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install -U Django\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install -U Django\n</pre></div>\n</section>\n</div>\n</div>\n<div class=\"section\" id=\"s-testing\">\n<span id=\"testing\"></span><h2>Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When the new environment is set up, <a class=\"reference internal\" href=\"../../topics/testing/overview/\"><span class=\"doc\">run the full test suite</span></a> for your application. Again, it\u2019s useful to turn\non deprecation warnings on so they\u2019re shown in the test output (you can also\nuse the flag if you test your app manually using <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">runserver</span></code>):</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -Wa manage.py <span class=\"nb\">test</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -Wa manage.py test\n</pre></div>\n</section>\n</div>\n<p>After you have run the tests, fix any failures. While you have the release\nnotes fresh in your mind, it may also be a good time to take advantage of new\nfeatures in Django by refactoring your code to eliminate any deprecation\nwarnings.</p>\n</div>\n<div class=\"section\" id=\"s-deployment\">\n<span id=\"deployment\"></span><h2>Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you are sufficiently confident your app works with the new version of\nDjango, you\u2019re ready to go ahead and <a class=\"reference internal\" href=\"../deployment/\"><span class=\"doc\">deploy</span></a>\nyour upgraded Django project.</p>\n<p>If you are using caching provided by Django, you should consider clearing your\ncache after upgrading. Otherwise you may run into problems, for example, if you\nare caching pickled objects as these objects are not guaranteed to be\npickle-compatible across Django versions. A past instance of incompatibility\nwas caching pickled <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> objects, either\ndirectly or indirectly via the <a class=\"reference internal\" href=\"../../topics/cache/#django.views.decorators.cache.cache_page\" title=\"django.views.decorators.cache.cache_page\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">cache_page()</span></code></a>\ndecorator.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/error-reporting", "How to manage error reporting", "N", "next"], ["howto/deployment/checklist", "Deployment checklist", "P", "previous"]], "sourcename": "howto/upgrade-version.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to upgrade Django to a newer version</a><ul>\n<li><a class=\"reference internal\" href=\"#required-reading\">Required Reading</a></li>\n<li><a class=\"reference internal\" href=\"#dependencies\">Dependencies</a></li>\n<li><a class=\"reference internal\" href=\"#resolving-deprecation-warnings\">Resolving deprecation warnings</a></li>\n<li><a class=\"reference internal\" href=\"#installation\">Installation</a></li>\n<li><a class=\"reference internal\" href=\"#testing\">Testing</a></li>\n<li><a class=\"reference internal\" href=\"#deployment\">Deployment</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/upgrade-version", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}