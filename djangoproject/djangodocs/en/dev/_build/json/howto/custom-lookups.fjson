{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../custom-model-fields/", "title": "How to create custom model fields"}, "next": {"link": "../custom-template-backend/", "title": "How to implement a custom template backend"}, "title": "How to write custom lookups", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-write-custom-lookups\">\n<span id=\"how-to-write-custom-lookups\"></span><h1>How to write custom lookups<a class=\"headerlink\" href=\"#how-to-write-custom-lookups\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django offers a wide variety of <a class=\"reference internal\" href=\"../../ref/models/querysets/#field-lookups\"><span class=\"std std-ref\">built-in lookups</span></a> for\nfiltering (for example, <code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">icontains</span></code>). This documentation\nexplains how to write custom lookups and how to alter the working of existing\nlookups. For the API references of lookups, see the <a class=\"reference internal\" href=\"../../ref/models/lookups/\"><span class=\"doc\">Lookup API reference</span></a>.</p>\n<div class=\"section\" id=\"s-a-lookup-example\">\n<span id=\"a-lookup-example\"></span><h2>A lookup example<a class=\"headerlink\" href=\"#a-lookup-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Let\u2019s start with a small custom lookup. We will write a custom lookup <code class=\"docutils literal notranslate\"><span class=\"pre\">ne</span></code>\nwhich works opposite to <code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">Author.objects.filter(name__ne='Jack')</span></code>\nwill translate to the SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"ss\">&quot;author&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;name&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;&gt;</span><span class=\"w\"> </span><span class=\"s1\">&#39;Jack&#39;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>This SQL is backend independent, so we don\u2019t need to worry about different\ndatabases.</p>\n<p>There are two steps to making this work. Firstly we need to implement the\nlookup, then we need to tell Django about it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Lookup</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NotEqual</span><span class=\"p\">(</span><span class=\"n\">Lookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ne&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">lhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">lhs_params</span> <span class=\"o\">+</span> <span class=\"n\">rhs_params</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> &lt;&gt; </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n</pre></div>\n</div>\n<p>To register the <code class=\"docutils literal notranslate\"><span class=\"pre\">NotEqual</span></code> lookup we will need to call <code class=\"docutils literal notranslate\"><span class=\"pre\">register_lookup</span></code> on\nthe field class we want the lookup to be available for. In this case, the lookup\nmakes sense on all <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> subclasses, so we register it with <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>\ndirectly:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n<span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">NotEqual</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Lookup registration can also be done using a decorator pattern:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Field</span>\n\n\n<span class=\"nd\">@Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span>\n<span class=\"k\">class</span> <span class=\"nc\">NotEqualLookup</span><span class=\"p\">(</span><span class=\"n\">Lookup</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>We can now use <code class=\"docutils literal notranslate\"><span class=\"pre\">foo__ne</span></code> for any field <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code>. You will need to ensure that\nthis registration happens before you try to create any querysets using it. You\ncould place the implementation in a <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> file, or register the lookup\nin the <code class=\"docutils literal notranslate\"><span class=\"pre\">ready()</span></code> method of an <code class=\"docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code>.</p>\n<p>Taking a closer look at the implementation, the first required attribute is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code>. This allows the ORM to understand how to interpret <code class=\"docutils literal notranslate\"><span class=\"pre\">name__ne</span></code>\nand use <code class=\"docutils literal notranslate\"><span class=\"pre\">NotEqual</span></code> to generate the SQL. By convention, these names are always\nlowercase strings containing only letters, but the only hard requirement is\nthat it must not contain the string <code class=\"docutils literal notranslate\"><span class=\"pre\">__</span></code>.</p>\n<p>We then need to define the <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql</span></code> method. This takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler</span></code>\nobject, called <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code>,  and the active database connection.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler</span></code> objects are not documented, but the only thing we need to know\nabout them is that they have a <code class=\"docutils literal notranslate\"><span class=\"pre\">compile()</span></code> method which returns a tuple\ncontaining an SQL string, and the parameters to be interpolated into that\nstring. In most cases, you don\u2019t need to use it directly and can pass it on to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">process_lhs()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">process_rhs()</span></code>.</p>\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> works against two values, <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs</span></code>, standing for\nleft-hand side and right-hand side. The left-hand side is usually a field\nreference, but it can be anything implementing the <a class=\"reference internal\" href=\"../../ref/models/lookups/#query-expression\"><span class=\"std std-ref\">query expression API</span></a>. The right-hand is the value given by the user. In the\nexample <code class=\"docutils literal notranslate\"><span class=\"pre\">Author.objects.filter(name__ne='Jack')</span></code>, the left-hand side is a\nreference to the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> field of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> model, and <code class=\"docutils literal notranslate\"><span class=\"pre\">'Jack'</span></code> is the\nright-hand side.</p>\n<p>We call <code class=\"docutils literal notranslate\"><span class=\"pre\">process_lhs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">process_rhs</span></code> to convert them into the values we\nneed for SQL using the <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code> object described before. These methods\nreturn tuples containing some SQL and the parameters to be interpolated into\nthat SQL, just as we need to return from our <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql</span></code> method. In the above\nexample, <code class=\"docutils literal notranslate\"><span class=\"pre\">process_lhs</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">('&quot;author&quot;.&quot;name&quot;',</span> <span class=\"pre\">[])</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">process_rhs</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">('&quot;%s&quot;',</span> <span class=\"pre\">['Jack'])</span></code>. In this example there were no\nparameters for the left hand side, but this would depend on the object we have,\nso we still need to include them in the parameters we return.</p>\n<p>Finally we combine the parts into an SQL expression with <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code>, and supply all\nthe parameters for the query. We then return a tuple containing the generated\nSQL string and the parameters.</p>\n</div>\n<div class=\"section\" id=\"s-a-transformer-example\">\n<span id=\"a-transformer-example\"></span><h2>A transformer example<a class=\"headerlink\" href=\"#a-transformer-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The custom lookup above is great, but in some cases you may want to be able to\nchain lookups together. For example, let\u2019s suppose we are building an\napplication where we want to make use of the <code class=\"docutils literal notranslate\"><span class=\"pre\">abs()</span></code> operator.\nWe have an <code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment</span></code> model which records a start value, end value, and the\nchange (start - end). We would like to find all experiments where the change\nwas equal to a certain amount (<code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.filter(change__abs=27)</span></code>),\nor where it did not exceed a certain amount\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.filter(change__abs__lt=27)</span></code>).</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This example is somewhat contrived, but it nicely demonstrates the range of\nfunctionality which is possible in a database backend independent manner,\nand without duplicating functionality already in Django.</p>\n</div>\n<p>We will start by writing an <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValue</span></code> transformer. This will use the SQL\nfunction <code class=\"docutils literal notranslate\"><span class=\"pre\">ABS()</span></code> to transform the value before comparison:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Transform</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AbsoluteValue</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;abs&quot;</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ABS&quot;</span>\n</pre></div>\n</div>\n<p>Next, let\u2019s register it for <code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">IntegerField</span>\n\n<span class=\"n\">IntegerField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">AbsoluteValue</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can now run the queries we had before.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.filter(change__abs=27)</span></code> will generate the following SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">ABS</span><span class=\"p\">(</span><span class=\"ss\">&quot;experiments&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;change&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>By using <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> it means we are able to chain\nfurther lookups afterward. So\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.filter(change__abs__lt=27)</span></code> will generate the following\nSQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">ABS</span><span class=\"p\">(</span><span class=\"ss\">&quot;experiments&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;change&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note that in case there is no other lookup specified, Django interprets\n<code class=\"docutils literal notranslate\"><span class=\"pre\">change__abs=27</span></code> as <code class=\"docutils literal notranslate\"><span class=\"pre\">change__abs__exact=27</span></code>.</p>\n<p>This also allows the result to be used in <code class=\"docutils literal notranslate\"><span class=\"pre\">ORDER</span> <span class=\"pre\">BY</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">DISTINCT</span> <span class=\"pre\">ON</span></code>\nclauses. For example <code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.order_by('change__abs')</span></code> generates:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"k\">ABS</span><span class=\"p\">(</span><span class=\"ss\">&quot;experiments&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;change&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">ASC</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>And on databases that support distinct on fields (such as PostgreSQL),\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.distinct('change__abs')</span></code> generates:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">DISTINCT</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"k\">ABS</span><span class=\"p\">(</span><span class=\"ss\">&quot;experiments&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;change&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>When looking for which lookups are allowable after the <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> has been\napplied, Django uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> attribute. We didn\u2019t need to specify\nthis here as it didn\u2019t change, but supposing we were applying <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValue</span></code>\nto some field which represents a more complex type (for example a point\nrelative to an origin, or a complex number) then we may have wanted to specify\nthat the transform returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">FloatField</span></code> type for further lookups. This can\nbe done by adding an <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> attribute to the transform:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">FloatField</span><span class=\"p\">,</span> <span class=\"n\">Transform</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AbsoluteValue</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;abs&quot;</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ABS&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">output_field</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">FloatField</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This ensures that further lookups like <code class=\"docutils literal notranslate\"><span class=\"pre\">abs__lte</span></code> behave as they would for\na <code class=\"docutils literal notranslate\"><span class=\"pre\">FloatField</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-writing-an-efficient-abs-lt-lookup\">\n<span id=\"writing-an-efficient-abs-lt-lookup\"></span><h2>Writing an efficient <code class=\"docutils literal notranslate\"><span class=\"pre\">abs__lt</span></code> lookup<a class=\"headerlink\" href=\"#writing-an-efficient-abs-lt-lookup\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When using the above written <code class=\"docutils literal notranslate\"><span class=\"pre\">abs</span></code> lookup, the SQL produced will not use\nindexes efficiently in some cases. In particular, when we use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">change__abs__lt=27</span></code>, this is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">change__gt=-27</span></code> AND\n<code class=\"docutils literal notranslate\"><span class=\"pre\">change__lt=27</span></code>. (For the <code class=\"docutils literal notranslate\"><span class=\"pre\">lte</span></code> case we could use the SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">BETWEEN</span></code>).</p>\n<p>So we would like <code class=\"docutils literal notranslate\"><span class=\"pre\">Experiment.objects.filter(change__abs__lt=27)</span></code> to generate\nthe following SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">..</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"ss\">&quot;experiments&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;change&quot;</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"mi\">27</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"ss\">&quot;experiments&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;change&quot;</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"mi\">27</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>The implementation is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Lookup</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AbsoluteValueLessThan</span><span class=\"p\">(</span><span class=\"n\">Lookup</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;lt&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">lhs_params</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"o\">.</span><span class=\"n\">lhs</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">lhs_params</span> <span class=\"o\">+</span> <span class=\"n\">rhs_params</span> <span class=\"o\">+</span> <span class=\"n\">lhs_params</span> <span class=\"o\">+</span> <span class=\"n\">rhs_params</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> &lt; </span><span class=\"si\">%s</span><span class=\"s2\"> AND </span><span class=\"si\">%s</span><span class=\"s2\"> &gt; -</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n\n\n<span class=\"n\">AbsoluteValue</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">AbsoluteValueLessThan</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>There are a couple of notable things going on. First, <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValueLessThan</span></code>\nisn\u2019t calling <code class=\"docutils literal notranslate\"><span class=\"pre\">process_lhs()</span></code>. Instead it skips the transformation of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> done by <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValue</span></code> and uses the original <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code>. That is, we\nwant to get <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;experiments&quot;.&quot;change&quot;</span></code> not <code class=\"docutils literal notranslate\"><span class=\"pre\">ABS(&quot;experiments&quot;.&quot;change&quot;)</span></code>.\nReferring directly to <code class=\"docutils literal notranslate\"><span class=\"pre\">self.lhs.lhs</span></code> is safe as <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValueLessThan</span></code>\ncan be accessed only from the <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValue</span></code> lookup, that is the <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code>\nis always an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValue</span></code>.</p>\n<p>Notice also that  as both sides are used multiple times in the query the params\nneed to contain <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs_params</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs_params</span></code> multiple times.</p>\n<p>The final query does the inversion (<code class=\"docutils literal notranslate\"><span class=\"pre\">27</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">-27</span></code>) directly in the\ndatabase. The reason for doing this is that if the <code class=\"docutils literal notranslate\"><span class=\"pre\">self.rhs</span></code> is something else\nthan a plain integer value (for example an <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> reference) we can\u2019t do the\ntransformations in Python.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">In fact, most lookups with <code class=\"docutils literal notranslate\"><span class=\"pre\">__abs</span></code> could be implemented as range queries\nlike this, and on most database backends it is likely to be more sensible to\ndo so as you can make use of the indexes. However with PostgreSQL you may\nwant to add an index on <code class=\"docutils literal notranslate\"><span class=\"pre\">abs(change)</span></code> which would allow these queries to\nbe very efficient.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-a-bilateral-transformer-example\">\n<span id=\"a-bilateral-transformer-example\"></span><h2>A bilateral transformer example<a class=\"headerlink\" href=\"#a-bilateral-transformer-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">AbsoluteValue</span></code> example we discussed previously is a transformation which\napplies to the left-hand side of the lookup. There may be some cases where you\nwant the transformation to be applied to both the left-hand side and the\nright-hand side. For instance, if you want to filter a queryset based on the\nequality of the left and right-hand side insensitively to some SQL function.</p>\n<p>Let\u2019s examine case-insensitive transformations here. This transformation isn\u2019t\nvery useful in practice as Django already comes with a bunch of built-in\ncase-insensitive lookups, but it will be a nice demonstration of bilateral\ntransformations in a database-agnostic way.</p>\n<p>We define an <code class=\"docutils literal notranslate\"><span class=\"pre\">UpperCase</span></code> transformer which uses the SQL function <code class=\"docutils literal notranslate\"><span class=\"pre\">UPPER()</span></code> to\ntransform the values before comparison. We define\n<a class=\"reference internal\" href=\"../../ref/models/lookups/#django.db.models.Transform.bilateral\" title=\"django.db.models.Transform.bilateral\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">bilateral</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code></a> to indicate that\nthis transformation should apply to both <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Transform</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UpperCase</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;upper&quot;</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UPPER&quot;</span>\n    <span class=\"n\">bilateral</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>\n</div>\n<p>Next, let\u2019s register it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">CharField</span><span class=\"p\">,</span> <span class=\"n\">TextField</span>\n\n<span class=\"n\">CharField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">UpperCase</span><span class=\"p\">)</span>\n<span class=\"n\">TextField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">UpperCase</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now, the queryset <code class=\"docutils literal notranslate\"><span class=\"pre\">Author.objects.filter(name__upper=&quot;doe&quot;)</span></code> will generate a case\ninsensitive query like this:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"ss\">&quot;author&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;name&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">UPPER</span><span class=\"p\">(</span><span class=\"s1\">&#39;doe&#39;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-alternative-implementations-for-existing-lookups\">\n<span id=\"writing-alternative-implementations-for-existing-lookups\"></span><h2>Writing alternative implementations for existing lookups<a class=\"headerlink\" href=\"#writing-alternative-implementations-for-existing-lookups\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Sometimes different database vendors require different SQL for the same\noperation. For this example we will rewrite a custom implementation for\nMySQL for the NotEqual operator. Instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&gt;</span></code> we will be using <code class=\"docutils literal notranslate\"><span class=\"pre\">!=</span></code>\noperator. (Note that in reality almost all databases support both, including\nall the official databases supported by Django).</p>\n<p>We can change the behavior on a specific backend by creating a subclass of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NotEqual</span></code> with an <code class=\"docutils literal notranslate\"><span class=\"pre\">as_mysql</span></code> method:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MySQLNotEqual</span><span class=\"p\">(</span><span class=\"n\">NotEqual</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">lhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_lhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">rhs</span><span class=\"p\">,</span> <span class=\"n\">rhs_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">process_rhs</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">lhs_params</span> <span class=\"o\">+</span> <span class=\"n\">rhs_params</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> != </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">lhs</span><span class=\"p\">,</span> <span class=\"n\">rhs</span><span class=\"p\">),</span> <span class=\"n\">params</span>\n\n\n<span class=\"n\">Field</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">MySQLNotEqual</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can then register it with <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>. It takes the place of the original\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NotEqual</span></code> class as it has the same <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code>.</p>\n<p>When compiling a query, Django first looks for <code class=\"docutils literal notranslate\"><span class=\"pre\">as_%s</span> <span class=\"pre\">%</span> <span class=\"pre\">connection.vendor</span></code>\nmethods, and then falls back to <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql</span></code>. The vendor names for the in-built\nbackends are <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlite</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">oracle</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">mysql</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-how-django-determines-the-lookups-and-transforms-which-are-used\">\n<span id=\"how-django-determines-the-lookups-and-transforms-which-are-used\"></span><h2>How Django determines the lookups and transforms which are used<a class=\"headerlink\" href=\"#how-django-determines-the-lookups-and-transforms-which-are-used\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In some cases you may wish to dynamically change which <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> is returned based on the name passed in, rather than fixing it. As\nan example, you could have a field which stores coordinates or an arbitrary\ndimension, and wish to allow a syntax like <code class=\"docutils literal notranslate\"><span class=\"pre\">.filter(coords__x7=4)</span></code> to return\nthe objects where the 7th coordinate has value 4. In order to do this, you\nwould override <code class=\"docutils literal notranslate\"><span class=\"pre\">get_lookup</span></code> with something like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CoordinatesField</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lookup_name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">lookup_name</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">dimension</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">lookup_name</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">get_coordinate_lookup</span><span class=\"p\">(</span><span class=\"n\">dimension</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_lookup</span><span class=\"p\">(</span><span class=\"n\">lookup_name</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You would then define <code class=\"docutils literal notranslate\"><span class=\"pre\">get_coordinate_lookup</span></code> appropriately to return a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> subclass which handles the relevant value of <code class=\"docutils literal notranslate\"><span class=\"pre\">dimension</span></code>.</p>\n<p>There is a similarly named method called <code class=\"docutils literal notranslate\"><span class=\"pre\">get_transform()</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">get_lookup()</span></code>\nshould always return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> subclass, and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_transform()</span></code> a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> subclass. It is important to remember that <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code>\nobjects can be further filtered on, and <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> objects cannot.</p>\n<p>When filtering, if there is only one lookup name remaining to be resolved, we\nwill look for a <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code>. If there are multiple names, it will look for a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code>. In the situation where there is only one name and a <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code>\nis not found, we look for a <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> and then the <code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code> lookup on that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code>. All call sequences always end with a <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code>. To clarify:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">.filter(myfield__mylookup)</span></code> will call <code class=\"docutils literal notranslate\"><span class=\"pre\">myfield.get_lookup('mylookup')</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">.filter(myfield__mytransform__mylookup)</span></code> will call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myfield.get_transform('mytransform')</span></code>, and then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mytransform.get_lookup('mylookup')</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">.filter(myfield__mytransform)</span></code> will first call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myfield.get_lookup('mytransform')</span></code>, which will fail, so it will fall back\nto calling <code class=\"docutils literal notranslate\"><span class=\"pre\">myfield.get_transform('mytransform')</span></code> and then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mytransform.get_lookup('exact')</span></code>.</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/custom-template-backend", "How to implement a custom template backend", "N", "next"], ["howto/custom-model-fields", "How to create custom model fields", "P", "previous"]], "sourcename": "howto/custom-lookups.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to write custom lookups</a><ul>\n<li><a class=\"reference internal\" href=\"#a-lookup-example\">A lookup example</a></li>\n<li><a class=\"reference internal\" href=\"#a-transformer-example\">A transformer example</a></li>\n<li><a class=\"reference internal\" href=\"#writing-an-efficient-abs-lt-lookup\">Writing an efficient <code class=\"docutils literal notranslate\"><span class=\"pre\">abs__lt</span></code> lookup</a></li>\n<li><a class=\"reference internal\" href=\"#a-bilateral-transformer-example\">A bilateral transformer example</a></li>\n<li><a class=\"reference internal\" href=\"#writing-alternative-implementations-for-existing-lookups\">Writing alternative implementations for existing lookups</a></li>\n<li><a class=\"reference internal\" href=\"#how-django-determines-the-lookups-and-transforms-which-are-used\">How Django determines the lookups and transforms which are used</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/custom-lookups", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
