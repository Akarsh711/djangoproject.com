{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../csrf/", "title": "How to use Django\u2019s CSRF protection"}, "next": {"link": "../custom-model-fields/", "title": "How to create custom model fields"}, "title": "How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.core.management\">\n<span id=\"s-how-to-create-custom-django-admin-commands\"></span><span id=\"module-django.core.management\"></span><span id=\"how-to-create-custom-django-admin-commands\"></span><h1>How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands<a class=\"headerlink\" href=\"#module-django.core.management\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Applications can register their own actions with <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>. For example,\nyou might want to add a <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> action for a Django app that you\u2019re\ndistributing. In this document, we will be building a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">closepoll</span></code>\ncommand for the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> application from the\n<a class=\"reference internal\" href=\"../../intro/tutorial01/\"><span class=\"doc\">tutorial</span></a>.</p>\n<p>To do this, add a <code class=\"docutils literal notranslate\"><span class=\"pre\">management/commands</span></code> directory to the application. Django\nwill register a <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> command for each Python module in that directory\nwhose name doesn\u2019t begin with an underscore. For example:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>polls/\n    __init__.py\n    models.py\n    management/\n        __init__.py\n        commands/\n            __init__.py\n            _private.py\n            closepoll.py\n    tests.py\n    views.py\n</pre></div>\n</div>\n<p>In this example, the <code class=\"docutils literal notranslate\"><span class=\"pre\">closepoll</span></code> command will be made available to any project\nthat includes the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> application in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">_private.py</span></code> module will not be available as a management command.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">closepoll.py</span></code> module has only one requirement \u2013 it must define a class\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Command</span></code> that extends <a class=\"reference internal\" href=\"#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a> or one of its\n<a class=\"reference internal\" href=\"#ref-basecommand-subclasses\"><span class=\"std std-ref\">subclasses</span></a>.</p>\n<div class=\"admonition-standalone-scripts admonition\">\n<p class=\"first admonition-title\">Standalone scripts</p>\n<p class=\"last\">Custom management commands are especially useful for running standalone\nscripts or for scripts that are periodically executed from the UNIX crontab\nor from Windows scheduled tasks control panel.</p>\n</div>\n<p>To implement the command, edit <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/management/commands/closepoll.py</span></code> to\nlook like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.management.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCommand</span><span class=\"p\">,</span> <span class=\"n\">CommandError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span> <span class=\"k\">as</span> <span class=\"n\">Poll</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Closes the specified poll for voting&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">&quot;poll_ids&quot;</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">poll_id</span> <span class=\"ow\">in</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;poll_ids&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">poll</span> <span class=\"o\">=</span> <span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">poll_id</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">CommandError</span><span class=\"p\">(</span><span class=\"s1\">&#39;Poll &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; does not exist&#39;</span> <span class=\"o\">%</span> <span class=\"n\">poll_id</span><span class=\"p\">)</span>\n\n            <span class=\"n\">poll</span><span class=\"o\">.</span><span class=\"n\">opened</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">poll</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span><span class=\"p\">(</span><span class=\"s1\">&#39;Successfully closed poll &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot;&#39;</span> <span class=\"o\">%</span> <span class=\"n\">poll_id</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\" id=\"management-commands-output\">\n<p class=\"first admonition-title\">Note</p>\n<p>When you are using management commands and wish to provide console\noutput, you should write to <code class=\"docutils literal notranslate\"><span class=\"pre\">self.stdout</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">self.stderr</span></code>,\ninstead of printing to <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">stderr</span></code> directly. By\nusing these proxies, it becomes much easier to test your custom\ncommand. Note also that you don\u2019t need to end messages with a newline\ncharacter, it will be added automatically, unless you specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">ending</span></code>\nparameter:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;Unterminated line&quot;</span><span class=\"p\">,</span> <span class=\"n\">ending</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>The new custom command can be called using <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">closepoll</span>\n<span class=\"pre\">&lt;poll_ids&gt;</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">handle()</span></code> method takes one or more <code class=\"docutils literal notranslate\"><span class=\"pre\">poll_ids</span></code> and sets <code class=\"docutils literal notranslate\"><span class=\"pre\">poll.opened</span></code>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> for each one. If the user referenced any nonexistent polls, a\n<a class=\"reference internal\" href=\"#django.core.management.CommandError\" title=\"django.core.management.CommandError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CommandError</span></code></a> is raised. The <code class=\"docutils literal notranslate\"><span class=\"pre\">poll.opened</span></code> attribute does not exist in\nthe <a class=\"reference internal\" href=\"../../intro/tutorial02/\"><span class=\"doc\">tutorial</span></a> and was added to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">polls.models.Question</span></code> for this example.</p>\n<div class=\"section\" id=\"s-accepting-optional-arguments\">\n<span id=\"s-custom-commands-options\"></span><span id=\"accepting-optional-arguments\"></span><span id=\"custom-commands-options\"></span><h2>Accepting optional arguments<a class=\"headerlink\" href=\"#accepting-optional-arguments\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The same <code class=\"docutils literal notranslate\"><span class=\"pre\">closepoll</span></code> could be easily modified to delete a given poll instead\nof closing it by accepting additional command line options. These custom\noptions can be added in the <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.add_arguments\" title=\"django.core.management.BaseCommand.add_arguments\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_arguments()</span></code></a> method like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Positional arguments</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">&quot;poll_ids&quot;</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Named (optional) arguments</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;--delete&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Delete poll instead of closing it&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;delete&quot;</span><span class=\"p\">]:</span>\n            <span class=\"n\">poll</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n        <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>The option (<code class=\"docutils literal notranslate\"><span class=\"pre\">delete</span></code> in our example) is available in the options dict\nparameter of the handle method. See the <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#module-argparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code></a> Python documentation\nfor more about <code class=\"docutils literal notranslate\"><span class=\"pre\">add_argument</span></code> usage.</p>\n<p>In addition to being able to add custom command line options, all\n<a class=\"reference internal\" href=\"../../ref/django-admin/\"><span class=\"doc\">management commands</span></a> can accept some default options\nsuch as <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-verbosity\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--verbosity</span></code></a> and <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-traceback\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--traceback</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-management-commands-and-locales\">\n<span id=\"s-id1\"></span><span id=\"management-commands-and-locales\"></span><span id=\"id1\"></span><h2>Management commands and locales<a class=\"headerlink\" href=\"#management-commands-and-locales\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By default, management commands are executed with the current active locale.</p>\n<p>If, for some reason, your custom management command must run without an active\nlocale (for example, to prevent translated content from being inserted into\nthe database), deactivate translations using the <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;no_translations</span></code>\ndecorator on your <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.handle\" title=\"django.core.management.BaseCommand.handle\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle()</span></code></a> method:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.management.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseCommand</span><span class=\"p\">,</span> <span class=\"n\">no_translations</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"nd\">@no_translations</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Since translation deactivation requires access to configured settings, the\ndecorator can\u2019t be used for commands that work without configured settings.</p>\n</div>\n<div class=\"section\" id=\"s-testing\">\n<span id=\"testing\"></span><h2>Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Information on how to test custom management commands can be found in the\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#topics-testing-management-commands\"><span class=\"std std-ref\">testing docs</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-overriding-commands\">\n<span id=\"overriding-commands\"></span><h2>Overriding commands<a class=\"headerlink\" href=\"#overriding-commands\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django registers the built-in commands and then searches for commands in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> in reverse. During the search, if a command name\nduplicates an already registered command, the newly discovered command\noverrides the first.</p>\n<p>In other words, to override a command, the new command must have the same name\nand its app must be before the overridden command\u2019s app in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<p>Management commands from third-party apps that have been unintentionally\noverridden can be made available under a new name by creating a new command in\none of your project\u2019s apps (ordered before the third-party app in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>) which imports the <code class=\"docutils literal notranslate\"><span class=\"pre\">Command</span></code> of the overridden\ncommand.</p>\n</div>\n<div class=\"section\" id=\"s-command-objects\">\n<span id=\"command-objects\"></span><h2>Command objects<a class=\"headerlink\" href=\"#command-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">BaseCommand</span></code><a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The base class from which all management commands ultimately derive.</p>\n<p>Use this class if you want access to all of the mechanisms which\nparse the command-line arguments and work out what code to call in\nresponse; if you don\u2019t need to change any of that behavior,\nconsider using one of its <a class=\"reference internal\" href=\"#ref-basecommand-subclasses\"><span class=\"std std-ref\">subclasses</span></a>.</p>\n<p>Subclassing the <a class=\"reference internal\" href=\"#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a> class requires that you implement the\n<a class=\"reference internal\" href=\"#django.core.management.BaseCommand.handle\" title=\"django.core.management.BaseCommand.handle\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle()</span></code></a> method.</p>\n<div class=\"section\" id=\"s-attributes\">\n<span id=\"attributes\"></span><h3>Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All attributes can be set in your derived class and can be used in\n<a class=\"reference internal\" href=\"#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a>\u2019s <a class=\"reference internal\" href=\"#ref-basecommand-subclasses\"><span class=\"std std-ref\">subclasses</span></a>.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.help\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">help</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.help\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A short description of the command, which will be printed in the\nhelp message when the user runs the command\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">help</span> <span class=\"pre\">&lt;command&gt;</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.missing_args_message\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">missing_args_message</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.missing_args_message\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If your command defines mandatory positional arguments, you can customize\nthe message error returned in the case of missing arguments. The default is\noutput by <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#module-argparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code></a> (\u201ctoo few arguments\u201d).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.output_transaction\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">output_transaction</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.output_transaction\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A boolean indicating whether the command outputs SQL statements; if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the output will automatically be wrapped with <code class=\"docutils literal notranslate\"><span class=\"pre\">BEGIN;</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">COMMIT;</span></code>. Default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.requires_migrations_checks\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">requires_migrations_checks</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.requires_migrations_checks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A boolean; if <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the command prints a warning if the set of\nmigrations on disk don\u2019t match the migrations in the database. A warning\ndoesn\u2019t prevent the command from executing. Default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.requires_system_checks\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">requires_system_checks</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.requires_system_checks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A list or tuple of tags, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">[Tags.staticfiles,</span> <span class=\"pre\">Tags.models]</span></code>. System\nchecks <a class=\"reference internal\" href=\"../../topics/checks/#registering-labeling-checks\"><span class=\"std std-ref\">registered in the chosen tags</span></a>\nwill be checked for errors prior to executing the command. The value\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'__all__'</span></code> can be used to specify that all system checks should be\nperformed. Default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">'__all__'</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.style\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">style</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.style\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An instance attribute that helps create colored output when writing to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">stderr</span></code>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span><span class=\"p\">(</span><span class=\"s2\">&quot;...&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../ref/django-admin/#syntax-coloring\"><span class=\"std std-ref\">Syntax coloring</span></a> to learn how to modify the color palette and to\nsee the available styles (use uppercased versions of the \u201croles\u201d described\nin that section).</p>\n<p>If you pass the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-no-color\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--no-color</span></code></a> option when running your command, all\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.style()</span></code> calls will return the original string uncolored.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.suppressed_base_arguments\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">suppressed_base_arguments</span></code><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.suppressed_base_arguments\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The default command options to suppress in the help output. This should be\na set of option names (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'--verbosity'</span></code>). The default values for the\nsuppressed options are still passed.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-methods\">\n<span id=\"methods\"></span><h3>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a> has a few methods that can be overridden but only\nthe <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.handle\" title=\"django.core.management.BaseCommand.handle\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle()</span></code></a> method must be implemented.</p>\n<div class=\"admonition-implementing-a-constructor-in-a-subclass admonition\">\n<p class=\"first admonition-title\">Implementing a constructor in a subclass</p>\n<p>If you implement <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> in your subclass of <a class=\"reference internal\" href=\"#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a>,\nyou must call <a class=\"reference internal\" href=\"#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Command</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.create_parser\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">create_parser</span></code>(<em><span class=\"n\"><span class=\"pre\">prog_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">subcommand</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand.create_parser\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.create_parser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">CommandParser</span></code> instance, which is an\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArgumentParser</span></code></a> subclass with a few customizations for\nDjango.</p>\n<p>You can customize the instance by overriding this method and calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> of <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArgumentParser</span></code></a> parameters.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.add_arguments\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">add_arguments</span></code>(<em><span class=\"n\"><span class=\"pre\">parser</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand.add_arguments\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.add_arguments\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Entry point to add parser arguments to handle command line arguments passed\nto the command. Custom commands should override this method to add both\npositional and optional arguments accepted by the command. Calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> is not needed when directly subclassing <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.get_version\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_version</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand.get_version\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.get_version\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the Django version, which should be correct for all built-in Django\ncommands. User-supplied commands can override this method to return their\nown version.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.execute\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">execute</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand.execute\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.execute\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tries to execute this command, performing system checks if needed (as\ncontrolled by the <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.requires_system_checks\" title=\"django.core.management.BaseCommand.requires_system_checks\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">requires_system_checks</span></code></a> attribute). If the command\nraises a <a class=\"reference internal\" href=\"#django.core.management.CommandError\" title=\"django.core.management.CommandError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CommandError</span></code></a>, it\u2019s intercepted and printed to <code class=\"docutils literal notranslate\"><span class=\"pre\">stderr</span></code>.</p>\n</dd></dl>\n\n<div class=\"admonition-calling-a-management-command-in-your-code admonition\">\n<p class=\"first admonition-title\">Calling a management command in your code</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">execute()</span></code> should not be called directly from your code to execute a\ncommand. Use <a class=\"reference internal\" href=\"../../ref/django-admin/#django.core.management.call_command\" title=\"django.core.management.call_command\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">call_command()</span></code></a> instead.</p>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.handle\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">handle</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand.handle\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.handle\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The actual logic of the command. Subclasses must implement this method.</p>\n<p>It may return a string which will be printed to <code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code> (wrapped\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">BEGIN;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">COMMIT;</span></code> if <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.output_transaction\" title=\"django.core.management.BaseCommand.output_transaction\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">output_transaction</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.BaseCommand.check\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">BaseCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">check</span></code>(<em><span class=\"n\"><span class=\"pre\">app_configs</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">tags</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">display_num_errors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#BaseCommand.check\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.BaseCommand.check\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Uses the system check framework to inspect the entire Django project for\npotential problems. Serious problems are raised as a <a class=\"reference internal\" href=\"#django.core.management.CommandError\" title=\"django.core.management.CommandError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CommandError</span></code></a>;\nwarnings are output to <code class=\"docutils literal notranslate\"><span class=\"pre\">stderr</span></code>; minor notifications are output to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code>.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">app_configs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tags</span></code> are both <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, all system checks are\nperformed. <code class=\"docutils literal notranslate\"><span class=\"pre\">tags</span></code> can be a list of check tags, like <code class=\"docutils literal notranslate\"><span class=\"pre\">compatibility</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-basecommand-subclasses\">\n<span id=\"s-ref-basecommand-subclasses\"></span><span id=\"basecommand-subclasses\"></span><span id=\"ref-basecommand-subclasses\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code> subclasses<a class=\"headerlink\" href=\"#basecommand-subclasses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.AppCommand\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">AppCommand</span></code><a class=\"headerlink\" href=\"#django.core.management.AppCommand\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A management command which takes one or more installed application labels as\narguments, and does something with each of them.</p>\n<p>Rather than implementing <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.handle\" title=\"django.core.management.BaseCommand.handle\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle()</span></code></a>, subclasses must\nimplement <a class=\"reference internal\" href=\"#django.core.management.AppCommand.handle_app_config\" title=\"django.core.management.AppCommand.handle_app_config\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle_app_config()</span></code></a>, which will be called once for\neach application.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.AppCommand.handle_app_config\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">handle_app_config</span></code>(<em><span class=\"n\"><span class=\"pre\">app_config</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"headerlink\" href=\"#django.core.management.AppCommand.handle_app_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Perform the command\u2019s actions for <code class=\"docutils literal notranslate\"><span class=\"pre\">app_config</span></code>, which will be an\n<a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> instance corresponding to an application\nlabel given on the command line.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.LabelCommand\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">LabelCommand</span></code><a class=\"headerlink\" href=\"#django.core.management.LabelCommand\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A management command which takes one or more arbitrary arguments (labels) on\nthe command line, and does something with each of them.</p>\n<p>Rather than implementing <a class=\"reference internal\" href=\"#django.core.management.BaseCommand.handle\" title=\"django.core.management.BaseCommand.handle\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle()</span></code></a>, subclasses must implement\n<a class=\"reference internal\" href=\"#django.core.management.LabelCommand.handle_label\" title=\"django.core.management.LabelCommand.handle_label\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle_label()</span></code></a>, which will be called once for each label.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.LabelCommand.label\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">LabelCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">label</span></code><a class=\"headerlink\" href=\"#django.core.management.LabelCommand.label\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string describing the arbitrary arguments passed to the command. The\nstring is used in the usage text and error messages of the command.\nDefaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">'label'</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.LabelCommand.handle_label\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">LabelCommand.</span></code><code class=\"sig-name descname\"><span class=\"pre\">handle_label</span></code>(<em><span class=\"n\"><span class=\"pre\">label</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"headerlink\" href=\"#django.core.management.LabelCommand.handle_label\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Perform the command\u2019s actions for <code class=\"docutils literal notranslate\"><span class=\"pre\">label</span></code>, which will be the string as\ngiven on the command line.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-command-exceptions\">\n<span id=\"command-exceptions\"></span><h3>Command exceptions<a class=\"headerlink\" href=\"#command-exceptions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py exception\">\n<dt class=\"sig sig-object py\" id=\"django.core.management.CommandError\">\n<em class=\"property\"><span class=\"pre\">exception</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">CommandError</span></code>(<em><span class=\"n\"><span class=\"pre\">returncode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">1</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/management/base/#CommandError\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.management.CommandError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Exception class indicating a problem while executing a management command.</p>\n<p>If this exception is raised during the execution of a management command from a\ncommand line console, it will be caught and turned into a nicely-printed error\nmessage to the appropriate output stream (i.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">stderr</span></code>); as a result,\nraising this exception (with a sensible description of the error) is the\npreferred way to indicate that something has gone wrong in the execution of a\ncommand. It accepts the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">returncode</span></code> argument to customize the exit\nstatus for the management command to exit with, using <a class=\"reference external\" href=\"https://docs.python.org/3/library/sys.html#sys.exit\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sys.exit()</span></code></a>.</p>\n<p>If a management command is called from code through\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django.core.management.call_command\" title=\"django.core.management.call_command\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">call_command()</span></code></a>, it\u2019s up to you to catch the\nexception when needed.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/custom-model-fields", "How to create custom model fields", "N", "next"], ["howto/csrf", "How to use Django\u2019s CSRF protection", "P", "previous"]], "sourcename": "howto/custom-management-commands.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands</a><ul>\n<li><a class=\"reference internal\" href=\"#accepting-optional-arguments\">Accepting optional arguments</a></li>\n<li><a class=\"reference internal\" href=\"#management-commands-and-locales\">Management commands and locales</a></li>\n<li><a class=\"reference internal\" href=\"#testing\">Testing</a></li>\n<li><a class=\"reference internal\" href=\"#overriding-commands\">Overriding commands</a></li>\n<li><a class=\"reference internal\" href=\"#command-objects\">Command objects</a><ul>\n<li><a class=\"reference internal\" href=\"#attributes\">Attributes</a></li>\n<li><a class=\"reference internal\" href=\"#methods\">Methods</a></li>\n<li><a class=\"reference internal\" href=\"#basecommand-subclasses\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code> subclasses</a></li>\n<li><a class=\"reference internal\" href=\"#command-exceptions\">Command exceptions</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/custom-management-commands", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}