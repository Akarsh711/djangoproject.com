{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../logging/", "title": "How to configure and use logging"}, "next": {"link": "../outputting-pdf/", "title": "How to create PDF files"}, "title": "How to create CSV output", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-create-csv-output\">\n<span id=\"how-to-create-csv-output\"></span><h1>How to create CSV output<a class=\"headerlink\" href=\"#how-to-create-csv-output\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document explains how to output CSV (Comma Separated Values) dynamically\nusing Django views. To do this, you can either use the Python CSV library or the\nDjango template system.</p>\n<div class=\"section\" id=\"s-using-the-python-csv-library\">\n<span id=\"using-the-python-csv-library\"></span><h2>Using the Python CSV library<a class=\"headerlink\" href=\"#using-the-python-csv-library\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Python comes with a CSV library, <a class=\"reference external\" href=\"https://docs.python.org/3/library/csv.html#module-csv\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code></a>. The key to using it with Django is\nthat the <a class=\"reference external\" href=\"https://docs.python.org/3/library/csv.html#module-csv\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code></a> module\u2019s CSV-creation capability acts on file-like objects,\nand Django\u2019s <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> objects are file-like objects.</p>\n<p>Here\u2019s an example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">some_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create the HttpResponse object with the appropriate CSV header.</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span>\n        <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;text/csv&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Content-Disposition&quot;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;attachment; filename=&quot;somefilename.csv&quot;&#39;</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">([</span><span class=\"s2\">&quot;First row&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Bar&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Baz&quot;</span><span class=\"p\">])</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">([</span><span class=\"s2\">&quot;Second row&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&quot;Testing&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Here&#39;s a quote&quot;</span><span class=\"p\">])</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre></div>\n</div>\n<p>The code and comments should be self-explanatory, but a few things deserve a\nmention:</p>\n<ul class=\"simple\">\n<li>The response gets a special MIME type, <em class=\"mimetype\">text/csv</em>. This tells\nbrowsers that the document is a CSV file, rather than an HTML file. If\nyou leave this off, browsers will probably interpret the output as HTML,\nwhich will result in ugly, scary gobbledygook in the browser window.</li>\n<li>The response gets an additional <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code> header, which\ncontains the name of the CSV file. This filename is arbitrary; call it\nwhatever you want. It\u2019ll be used by browsers in the \u201cSave as\u2026\u201d dialog, etc.</li>\n<li>You can hook into the CSV-generation API by passing <code class=\"docutils literal notranslate\"><span class=\"pre\">response</span></code> as the first\nargument to <code class=\"docutils literal notranslate\"><span class=\"pre\">csv.writer</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">csv.writer</span></code> function expects a file-like\nobject, and <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> objects fit the bill.</li>\n<li>For each row in your CSV file, call <code class=\"docutils literal notranslate\"><span class=\"pre\">writer.writerow</span></code>, passing it an\n<a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-iterable\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">iterable</span></a>.</li>\n<li>The CSV module takes care of quoting for you, so you don\u2019t have to worry\nabout escaping strings with quotes or commas in them. Pass <code class=\"docutils literal notranslate\"><span class=\"pre\">writerow()</span></code>\nyour raw strings, and it\u2019ll do the right thing.</li>\n</ul>\n<div class=\"section\" id=\"s-streaming-large-csv-files\">\n<span id=\"s-streaming-csv-files\"></span><span id=\"streaming-large-csv-files\"></span><span id=\"streaming-csv-files\"></span><h3>Streaming large CSV files<a class=\"headerlink\" href=\"#streaming-large-csv-files\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When dealing with views that generate very large responses, you might want to\nconsider using Django\u2019s <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> instead.\nFor example, by streaming a file that takes a long time to generate you can\navoid a load balancer dropping a connection that might have otherwise timed out\nwhile the server was generating the response.</p>\n<p>In this example, we make full use of Python generators to efficiently handle\nthe assembly and transmission of a large CSV file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">csv</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">StreamingHttpResponse</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Echo</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;An object that implements just the write method of the file-like</span>\n<span class=\"sd\">    interface.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Write the value by returning it, instead of storing in a buffer.&quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">some_streaming_csv_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;A view that streams a large CSV file.&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Generate a sequence of rows. The range is based on the maximum number of</span>\n    <span class=\"c1\"># rows that can be handled by a single sheet in most spreadsheet</span>\n    <span class=\"c1\"># applications.</span>\n    <span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"p\">([</span><span class=\"s2\">&quot;Row </span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">65536</span><span class=\"p\">))</span>\n    <span class=\"n\">pseudo_buffer</span> <span class=\"o\">=</span> <span class=\"n\">Echo</span><span class=\"p\">()</span>\n    <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">writer</span><span class=\"p\">(</span><span class=\"n\">pseudo_buffer</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">StreamingHttpResponse</span><span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">),</span>\n        <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;text/csv&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Content-Disposition&quot;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;attachment; filename=&quot;somefilename.csv&quot;&#39;</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-the-template-system\">\n<span id=\"using-the-template-system\"></span><h2>Using the template system<a class=\"headerlink\" href=\"#using-the-template-system\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Alternatively, you can use the <a class=\"reference internal\" href=\"../../topics/templates/\"><span class=\"doc\">Django template system</span></a>\nto generate CSV. This is lower-level than using the convenient Python <a class=\"reference external\" href=\"https://docs.python.org/3/library/csv.html#module-csv\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">csv</span></code></a>\nmodule, but the solution is presented here for completeness.</p>\n<p>The idea here is to pass a list of items to your template, and have the\ntemplate output the commas in a <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">for</span></code></a> loop.</p>\n<p>Here\u2019s an example, which generates the same CSV file as above:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">some_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create the HttpResponse object with the appropriate CSV header.</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span>\n        <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;text/csv&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Content-Disposition&quot;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;attachment; filename=&quot;somefilename.csv&quot;&#39;</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># The data is hard-coded here, but you could load it from a database or</span>\n    <span class=\"c1\"># some other source.</span>\n    <span class=\"n\">csv_data</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;First row&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Foo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Bar&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Baz&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;Second row&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;A&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;B&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&quot;Testing&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Here&#39;s a quote&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_template_name.txt&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;data&quot;</span><span class=\"p\">:</span> <span class=\"n\">csv_data</span><span class=\"p\">}</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre></div>\n</div>\n<p>The only difference between this example and the previous example is that this\none uses template loading instead of the CSV module. The rest of the code \u2013\nsuch as the <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type='text/csv'</span></code> \u2013 is the same.</p>\n<p>Then, create the template <code class=\"docutils literal notranslate\"><span class=\"pre\">my_template_name.txt</span></code>, with this template code:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">row</span> <span class=\"k\">in</span> <span class=\"nv\">data</span> <span class=\"cp\">%}</span>&quot;<span class=\"cp\">{{</span> <span class=\"nv\">row.0</span><span class=\"o\">|</span><span class=\"nf\">addslashes</span> <span class=\"cp\">}}</span>&quot;, &quot;<span class=\"cp\">{{</span> <span class=\"nv\">row.1</span><span class=\"o\">|</span><span class=\"nf\">addslashes</span> <span class=\"cp\">}}</span>&quot;, &quot;<span class=\"cp\">{{</span> <span class=\"nv\">row.2</span><span class=\"o\">|</span><span class=\"nf\">addslashes</span> <span class=\"cp\">}}</span>&quot;, &quot;<span class=\"cp\">{{</span> <span class=\"nv\">row.3</span><span class=\"o\">|</span><span class=\"nf\">addslashes</span> <span class=\"cp\">}}</span>&quot;, &quot;<span class=\"cp\">{{</span> <span class=\"nv\">row.4</span><span class=\"o\">|</span><span class=\"nf\">addslashes</span> <span class=\"cp\">}}</span>&quot;\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This short template iterates over the given data and displays a line of CSV for\neach row. It uses the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-addslashes\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">addslashes</span></code></a> template filter to ensure there\naren\u2019t any problems with quotes.</p>\n</div>\n<div class=\"section\" id=\"s-other-text-based-formats\">\n<span id=\"other-text-based-formats\"></span><h2>Other text-based formats<a class=\"headerlink\" href=\"#other-text-based-formats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Notice that there isn\u2019t very much specific to CSV here \u2013 just the specific\noutput format. You can use either of these techniques to output any text-based\nformat you can dream of. You can also use a similar technique to generate\narbitrary binary data; see <a class=\"reference internal\" href=\"../outputting-pdf/\"><span class=\"doc\">How to create PDF files</span></a> for an example.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/outputting-pdf", "How to create PDF files", "N", "next"], ["howto/logging", "How to configure and use logging", "P", "previous"]], "sourcename": "howto/outputting-csv.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to create CSV output</a><ul>\n<li><a class=\"reference internal\" href=\"#using-the-python-csv-library\">Using the Python CSV library</a><ul>\n<li><a class=\"reference internal\" href=\"#streaming-large-csv-files\">Streaming large CSV files</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#using-the-template-system\">Using the template system</a></li>\n<li><a class=\"reference internal\" href=\"#other-text-based-formats\">Other text-based formats</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/outputting-csv", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
