{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../custom-management-commands/", "title": "How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands"}, "next": {"link": "../custom-lookups/", "title": "How to write custom lookups"}, "title": "How to create custom model fields", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-create-custom-model-fields\">\n<span id=\"how-to-create-custom-model-fields\"></span><h1>How to create custom model fields<a class=\"headerlink\" href=\"#how-to-create-custom-model-fields\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-introduction\">\n<span id=\"introduction\"></span><h2>Introduction<a class=\"headerlink\" href=\"#introduction\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <a class=\"reference internal\" href=\"../../topics/db/models/\"><span class=\"doc\">model reference</span></a> documentation explains how to use\nDjango\u2019s standard field classes \u2013 <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateField\" title=\"django.db.models.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a>, etc. For many purposes, those classes are\nall you\u2019ll need. Sometimes, though, the Django version won\u2019t meet your precise\nrequirements, or you\u2019ll want to use a field that is entirely different from\nthose shipped with Django.</p>\n<p>Django\u2019s built-in field types don\u2019t cover every possible database column type \u2013\nonly the common types, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">INTEGER</span></code>. For more obscure\ncolumn types, such as geographic polygons or even user-created types such as\n<a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/sql-createtype.html\">PostgreSQL custom types</a>, you can define your own Django <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> subclasses.</p>\n<p>Alternatively, you may have a complex Python object that can somehow be\nserialized to fit into a standard database column type. This is another case\nwhere a <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> subclass will help you use your object with your models.</p>\n<div class=\"section\" id=\"s-our-example-object\">\n<span id=\"our-example-object\"></span><h3>Our example object<a class=\"headerlink\" href=\"#our-example-object\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Creating custom fields requires a bit of attention to detail. To make things\neasier to follow, we\u2019ll use a consistent example throughout this document:\nwrapping a Python object representing the deal of cards in a hand of <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Contract_bridge\">Bridge</a>.\nDon\u2019t worry, you don\u2019t have to know how to play Bridge to follow this example.\nYou only need to know that 52 cards are dealt out equally to four players, who\nare traditionally called <em>north</em>, <em>east</em>, <em>south</em> and <em>west</em>.  Our class looks\nsomething like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Hand</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;A hand of cards (bridge style)&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">north</span><span class=\"p\">,</span> <span class=\"n\">east</span><span class=\"p\">,</span> <span class=\"n\">south</span><span class=\"p\">,</span> <span class=\"n\">west</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Input parameters are lists of cards (&#39;Ah&#39;, &#39;9s&#39;, etc.)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">north</span> <span class=\"o\">=</span> <span class=\"n\">north</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">east</span> <span class=\"o\">=</span> <span class=\"n\">east</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">south</span> <span class=\"o\">=</span> <span class=\"n\">south</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">west</span> <span class=\"o\">=</span> <span class=\"n\">west</span>\n\n    <span class=\"c1\"># ... (other possibly useful methods omitted) ...</span>\n</pre></div>\n</div>\n<p>This is an ordinary Python class, with nothing Django-specific about it.\nWe\u2019d like to be able to do things like this in our models (we assume the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">hand</span></code> attribute on the model is an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code>):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">example</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">hand</span><span class=\"o\">.</span><span class=\"n\">north</span><span class=\"p\">)</span>\n\n<span class=\"n\">new_hand</span> <span class=\"o\">=</span> <span class=\"n\">Hand</span><span class=\"p\">(</span><span class=\"n\">north</span><span class=\"p\">,</span> <span class=\"n\">east</span><span class=\"p\">,</span> <span class=\"n\">south</span><span class=\"p\">,</span> <span class=\"n\">west</span><span class=\"p\">)</span>\n<span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">hand</span> <span class=\"o\">=</span> <span class=\"n\">new_hand</span>\n<span class=\"n\">example</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>We assign to and retrieve from the <code class=\"docutils literal notranslate\"><span class=\"pre\">hand</span></code> attribute in our model just like\nany other Python class. The trick is to tell Django how to handle saving and\nloading such an object.</p>\n<p>In order to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> class in our models, we <strong>do not</strong> have to change\nthis class at all. This is ideal, because it means you can easily write\nmodel support for existing classes where you cannot change the source code.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">You might only be wanting to take advantage of custom database column\ntypes and deal with the data as standard Python types in your models;\nstrings, or floats, for example. This case is similar to our <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code>\nexample and we\u2019ll note any differences as we go along.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-background-theory\">\n<span id=\"background-theory\"></span><h2>Background theory<a class=\"headerlink\" href=\"#background-theory\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-database-storage\">\n<span id=\"database-storage\"></span><h3>Database storage<a class=\"headerlink\" href=\"#database-storage\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Let\u2019s start with model fields. If you break it down, a model field provides a\nway to take a normal Python object \u2013 string, boolean, <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code>, or\nsomething more complex like <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> \u2013 and convert it to and from a format\nthat is useful when dealing with the database. (Such a format is also useful\nfor serialization, but as we\u2019ll see later, that is easier once you have the\ndatabase side under control).</p>\n<p>Fields in a model must somehow be converted to fit into an existing database\ncolumn type. Different databases provide different sets of valid column types,\nbut the rule is still the same: those are the only types you have to work\nwith. Anything you want to store in the database must fit into one of\nthose types.</p>\n<p>Normally, you\u2019re either writing a Django field to match a particular database\ncolumn type, or you will need a way to convert your data to, say, a string.</p>\n<p>For our <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> example, we could convert the card data to a string of 104\ncharacters by concatenating all the cards together in a predetermined order \u2013\nsay, all the <em>north</em> cards first, then the <em>east</em>, <em>south</em> and <em>west</em> cards. So\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> objects can be saved to text or character columns in the database.</p>\n</div>\n<div class=\"section\" id=\"s-what-does-a-field-class-do\">\n<span id=\"what-does-a-field-class-do\"></span><h3>What does a field class do?<a class=\"headerlink\" href=\"#what-does-a-field-class-do\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All of Django\u2019s fields (and when we say <em>fields</em> in this document, we always\nmean model fields and not <a class=\"reference internal\" href=\"../../ref/forms/fields/\"><span class=\"doc\">form fields</span></a>) are subclasses\nof <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Field</span></code></a>. Most of the information that Django records\nabout a field is common to all fields \u2013 name, help text, uniqueness and so\nforth. Storing all that information is handled by <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>. We\u2019ll get into the\nprecise details of what <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> can do later on; for now, suffice it to say\nthat everything descends from <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> and then customizes key pieces of the\nclass behavior.</p>\n<p>It\u2019s important to realize that a Django field class is not what is stored in\nyour model attributes. The model attributes contain normal Python objects. The\nfield classes you define in a model are actually stored in the <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> class\nwhen the model class is created (the precise details of how this is done are\nunimportant here). This is because the field classes aren\u2019t necessary when\nyou\u2019re just creating and modifying attributes. Instead, they provide the\nmachinery for converting between the attribute value and what is stored in the\ndatabase or sent to the <a class=\"reference internal\" href=\"../../topics/serialization/\"><span class=\"doc\">serializer</span></a>.</p>\n<p>Keep this in mind when creating your own custom fields. The Django <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>\nsubclass you write provides the machinery for converting between your Python\ninstances and the database/serializer values in various ways (there are\ndifferences between storing a value and using a value for lookups, for\nexample). If this sounds a bit tricky, don\u2019t worry \u2013 it will become clearer in\nthe examples below. Just remember that you will often end up creating two\nclasses when you want a custom field:</p>\n<ul class=\"simple\">\n<li>The first class is the Python object that your users will manipulate.\nThey will assign it to the model attribute, they will read from it for\ndisplaying purposes, things like that. This is the <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> class in our\nexample.</li>\n<li>The second class is the <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> subclass. This is the class that knows\nhow to convert your first class back and forth between its permanent\nstorage form and the Python form.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-a-field-subclass\">\n<span id=\"writing-a-field-subclass\"></span><h2>Writing a field subclass<a class=\"headerlink\" href=\"#writing-a-field-subclass\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When planning your <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> subclass, first give some\nthought to which existing <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> class your new field\nis most similar to. Can you subclass an existing Django field and save yourself\nsome work? If not, you should subclass the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>\nclass, from which everything is descended.</p>\n<p>Initializing your new field is a matter of separating out any arguments that are\nspecific to your case from the common arguments and passing the latter to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method of <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> (or your parent\nclass).</p>\n<p>In our example, we\u2019ll call our field <code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code>. (It\u2019s a good idea to call\nyour <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> subclass <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;Something&gt;Field</span></code>, so it\u2019s\neasily identifiable as a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> subclass.) It doesn\u2019t\nbehave like any existing field, so we\u2019ll subclass directly from\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;A hand of cards (bridge style)&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;max_length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">104</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Our <code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code> accepts most of the standard field options (see the list\nbelow), but we ensure it has a fixed length, since it only needs to hold 52\ncard values plus their suits; 104 characters in total.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Many of Django\u2019s model fields accept options that they don\u2019t do anything\nwith. For example, you can pass both\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.editable\" title=\"django.db.models.Field.editable\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">editable</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateField.auto_now\" title=\"django.db.models.DateField.auto_now\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now</span></code></a> to a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateField\" title=\"django.db.models.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.DateField</span></code></a> and it will ignore the\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.editable\" title=\"django.db.models.Field.editable\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">editable</span></code></a> parameter\n(<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateField.auto_now\" title=\"django.db.models.DateField.auto_now\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now</span></code></a> being set implies\n<code class=\"docutils literal notranslate\"><span class=\"pre\">editable=False</span></code>). No error is raised in this case.</p>\n<p class=\"last\">This behavior simplifies the field classes, because they don\u2019t need to\ncheck for options that aren\u2019t necessary. They pass all the options to\nthe parent class and then don\u2019t use them later on. It\u2019s up to you whether\nyou want your fields to be more strict about the options they select, or to\nuse the more permissive behavior of the current fields.</p>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.__init__()</span></code> method takes the following parameters:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.verbose_name\" title=\"django.db.models.Field.verbose_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField.max_length\" title=\"django.db.models.CharField.max_length\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">max_length</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.unique\" title=\"django.db.models.Field.unique\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.blank\" title=\"django.db.models.Field.blank\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">blank</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.null\" title=\"django.db.models.Field.null\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">null</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_index\" title=\"django.db.models.Field.db_index\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_index</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">rel</span></code>: Used for related fields (like <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>). For advanced\nuse only.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.editable\" title=\"django.db.models.Field.editable\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">editable</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">serialize</span></code>: If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the field will not be serialized when the model\nis passed to Django\u2019s <a class=\"reference internal\" href=\"../../topics/serialization/\"><span class=\"doc\">serializers</span></a>. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.unique_for_date\" title=\"django.db.models.Field.unique_for_date\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique_for_date</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.unique_for_month\" title=\"django.db.models.Field.unique_for_month\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique_for_month</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.unique_for_year\" title=\"django.db.models.Field.unique_for_year\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique_for_year</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.choices\" title=\"django.db.models.Field.choices\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">choices</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.help_text\" title=\"django.db.models.Field.help_text\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">help_text</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_column\" title=\"django.db.models.Field.db_column\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_column</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_tablespace\" title=\"django.db.models.Field.db_tablespace\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_tablespace</span></code></a>: Only for index creation, if the\nbackend supports <a class=\"reference internal\" href=\"../../topics/db/tablespaces/\"><span class=\"doc\">tablespaces</span></a>. You can usually\nignore this option.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.auto_created\" title=\"django.db.models.Field.auto_created\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_created</span></code></a>: <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the field was\nautomatically created, as for the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a>\nused by model inheritance. For advanced use only.</li>\n</ul>\n<p>All of the options without an explanation in the above list have the same\nmeaning they do for normal Django fields. See the <a class=\"reference internal\" href=\"../../ref/models/fields/\"><span class=\"doc\">field documentation</span></a> for examples and details.</p>\n<div class=\"section\" id=\"s-field-deconstruction\">\n<span id=\"s-custom-field-deconstruct-method\"></span><span id=\"field-deconstruction\"></span><span id=\"custom-field-deconstruct-method\"></span><h3>Field deconstruction<a class=\"headerlink\" href=\"#field-deconstruction\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The counterpoint to writing your <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method is writing the\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.deconstruct\" title=\"django.db.models.Field.deconstruct\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code></a> method. It\u2019s used during <a class=\"reference internal\" href=\"../../topics/migrations/\"><span class=\"doc\">model migrations</span></a> to tell Django how to take an instance of your new field\nand reduce it to a serialized form - in particular, what arguments to pass to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> to recreate it.</p>\n<p>If you haven\u2019t added any extra options on top of the field you inherited from,\nthen there\u2019s no need to write a new <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method. If, however,\nyou\u2019re changing the arguments passed in <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> (like we are in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code>), you\u2019ll need to supplement the values being passed.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> returns a tuple of four items: the field\u2019s attribute name,\nthe full import path of the field class, the positional arguments (as a list),\nand the keyword arguments (as a dict). Note this is different from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method <a class=\"reference internal\" href=\"../../topics/migrations/#custom-deconstruct-method\"><span class=\"std std-ref\">for custom classes</span></a>\nwhich returns a tuple of three things.</p>\n<p>As a custom field author, you don\u2019t need to care about the first two values;\nthe base <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> class has all the code to work out the field\u2019s attribute\nname and import path. You do, however, have to care about the positional\nand keyword arguments, as these are likely the things you are changing.</p>\n<p>For example, in our <code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code> class we\u2019re always forcibly setting\nmax_length in <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method on the base <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code>\nclass will see this and try to return it in the keyword arguments; thus,\nwe can drop it from the keyword arguments for readability:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;max_length&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">104</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deconstruct</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">deconstruct</span><span class=\"p\">()</span>\n        <span class=\"k\">del</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;max_length&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span>\n</pre></div>\n</div>\n<p>If you add a new keyword argument, you need to write code in <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code>\nthat puts its value into <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> yourself. You should also omit the value\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> when it isn\u2019t necessary to reconstruct the state of the field,\nsuch as when the default value is being used:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommaSepField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"s2\">&quot;Implements comma-separated storage of lists&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">separator</span><span class=\"o\">=</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator</span> <span class=\"o\">=</span> <span class=\"n\">separator</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">deconstruct</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">deconstruct</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Only include kwarg if it&#39;s not the default</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;separator&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">separator</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span>\n</pre></div>\n</div>\n<p>More complex examples are beyond the scope of this document, but remember -\nfor any configuration of your Field instance, <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> must return\narguments that you can pass to <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> to reconstruct that state.</p>\n<p>Pay extra attention if you set new default values for arguments in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> superclass; you want to make sure they\u2019re always included, rather\nthan disappearing if they take on the old default value.</p>\n<p>In addition, try to avoid returning values as positional arguments; where\npossible, return values as keyword arguments for maximum future compatibility.\nIf you change the names of things more often than their position in the\nconstructor\u2019s argument list, you might prefer positional, but bear in mind that\npeople will be reconstructing your field from the serialized version for quite\na while (possibly years), depending how long your migrations live for.</p>\n<p>You can see the results of deconstruction by looking in migrations that include\nthe field, and you can test deconstruction in unit tests by deconstructing and\nreconstructing the field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">my_field_instance</span><span class=\"o\">.</span><span class=\"n\">deconstruct</span><span class=\"p\">()</span>\n<span class=\"n\">new_instance</span> <span class=\"o\">=</span> <span class=\"n\">MyField</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">my_field_instance</span><span class=\"o\">.</span><span class=\"n\">some_attribute</span><span class=\"p\">,</span> <span class=\"n\">new_instance</span><span class=\"o\">.</span><span class=\"n\">some_attribute</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-field-attributes-not-affecting-database-column-definition\">\n<span id=\"s-custom-field-non-db-attrs\"></span><span id=\"field-attributes-not-affecting-database-column-definition\"></span><span id=\"custom-field-non-db-attrs\"></span><h3>Field attributes not affecting database column definition<a class=\"headerlink\" href=\"#field-attributes-not-affecting-database-column-definition\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can override <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.non_db_attrs</span></code> to customize attributes of a field that\ndon\u2019t affect a column definition. It\u2019s used during model migrations to detect\nno-op <code class=\"docutils literal notranslate\"><span class=\"pre\">AlterField</span></code> operations.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CommaSepField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">non_db_attrs</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">non_db_attrs</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"s2\">&quot;separator&quot;</span><span class=\"p\">,)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-changing-a-custom-field-s-base-class\">\n<span id=\"changing-a-custom-field-s-base-class\"></span><h3>Changing a custom field\u2019s base class<a class=\"headerlink\" href=\"#changing-a-custom-field-s-base-class\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can\u2019t change the base class of a custom field because Django won\u2019t detect\nthe change and make a migration for it. For example, if you start with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CustomCharField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>and then decide that you want to use <code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> instead, you can\u2019t change\nthe subclass like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CustomCharField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Instead, you must create a new custom field class and update your models to\nreference it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CustomCharField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomTextField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>As discussed in <a class=\"reference internal\" href=\"../../topics/migrations/#migrations-removing-model-fields\"><span class=\"std std-ref\">removing fields</span></a>, you\nmust retain the original <code class=\"docutils literal notranslate\"><span class=\"pre\">CustomCharField</span></code> class as long as you have\nmigrations that reference it.</p>\n</div>\n<div class=\"section\" id=\"s-documenting-your-custom-field\">\n<span id=\"documenting-your-custom-field\"></span><h3>Documenting your custom field<a class=\"headerlink\" href=\"#documenting-your-custom-field\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As always, you should document your field type, so users will know what it is.\nIn addition to providing a docstring for it, which is useful for developers,\nyou can also allow users of the admin app to see a short description of the\nfield type via the <a class=\"reference internal\" href=\"../../ref/contrib/admin/admindocs/\"><span class=\"doc\">django.contrib.admindocs</span></a> application. To do this provide descriptive\ntext in a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.description\" title=\"django.db.models.Field.description\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">description</span></code></a> class attribute of your custom field. In\nthe above example, the description displayed by the <code class=\"docutils literal notranslate\"><span class=\"pre\">admindocs</span></code> application\nfor a <code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code> will be \u2018A hand of cards (bridge style)\u2019.</p>\n<p>In the <a class=\"reference internal\" href=\"../../ref/contrib/admin/admindocs/#module-django.contrib.admindocs\" title=\"django.contrib.admindocs: Django's admin documentation generator.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs</span></code></a> display, the field description is\ninterpolated with <code class=\"docutils literal notranslate\"><span class=\"pre\">field.__dict__</span></code> which allows the description to\nincorporate arguments of the field. For example, the description for\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;String (up to </span><span class=\"si\">%(max_length)s</span><span class=\"s2\">)&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-useful-methods\">\n<span id=\"useful-methods\"></span><h3>Useful methods<a class=\"headerlink\" href=\"#useful-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Once you\u2019ve created your <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> subclass, you might\nconsider overriding a few standard methods, depending on your field\u2019s behavior.\nThe list of methods below is in approximately decreasing order of importance,\nso start from the top.</p>\n<div class=\"section\" id=\"s-custom-database-types\">\n<span id=\"s-id1\"></span><span id=\"custom-database-types\"></span><span id=\"id1\"></span><h4>Custom database types<a class=\"headerlink\" href=\"#custom-database-types\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Say you\u2019ve created a PostgreSQL custom type called <code class=\"docutils literal notranslate\"><span class=\"pre\">mytype</span></code>. You can\nsubclass <code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> and implement the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a> method, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MytypeField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;mytype&quot;</span>\n</pre></div>\n</div>\n<p>Once you have <code class=\"docutils literal notranslate\"><span class=\"pre\">MytypeField</span></code>, you can use it in any model, just like any other\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> type:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n    <span class=\"n\">something_else</span> <span class=\"o\">=</span> <span class=\"n\">MytypeField</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you aim to build a database-agnostic application, you should account for\ndifferences in database column types. For example, the date/time column type\nin PostgreSQL is called <code class=\"docutils literal notranslate\"><span class=\"pre\">timestamp</span></code>, while the same column in MySQL is called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code>. You can handle this in a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a> method by\nchecking the <code class=\"docutils literal notranslate\"><span class=\"pre\">connection.vendor</span></code> attribute. Current built-in vendor names\nare: <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlite</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">mysql</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">oracle</span></code>.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyDateField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;mysql&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;datetime&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;timestamp&quot;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a> and <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">rel_db_type()</span></code></a> methods are called by\nDjango when the framework constructs the <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">TABLE</span></code> statements for your\napplication \u2013 that is, when you first create your tables. The methods are also\ncalled when constructing a <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause that includes the model field \u2013\nthat is, when you retrieve data using QuerySet methods like <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude()</span></code> and have the model field as an argument. They\nare not called at any other time, so it can afford to execute slightly complex\ncode, such as the <code class=\"docutils literal notranslate\"><span class=\"pre\">connection.settings_dict</span></code> check in the above example.</p>\n<p>Some database column types accept parameters, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">CHAR(25)</span></code>, where the\nparameter <code class=\"docutils literal notranslate\"><span class=\"pre\">25</span></code> represents the maximum column length. In cases like these,\nit\u2019s more flexible if the parameter is specified in the model rather than being\nhard-coded in the <code class=\"docutils literal notranslate\"><span class=\"pre\">db_type()</span></code> method. For example, it wouldn\u2019t make much\nsense to have a <code class=\"docutils literal notranslate\"><span class=\"pre\">CharMaxlength25Field</span></code>, shown here:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># This is a silly example of hard-coded parameters.</span>\n<span class=\"k\">class</span> <span class=\"nc\">CharMaxlength25Field</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;char(25)&quot;</span>\n\n\n<span class=\"c1\"># In the model:</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">my_field</span> <span class=\"o\">=</span> <span class=\"n\">CharMaxlength25Field</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>The better way of doing this would be to make the parameter specifiable at run\ntime \u2013 i.e., when the class is instantiated. To do that, implement\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Field.__init__()</span></code>, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># This is a much more flexible example.</span>\n<span class=\"k\">class</span> <span class=\"nc\">BetterCharField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_length</span> <span class=\"o\">=</span> <span class=\"n\">max_length</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;char(</span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_length</span>\n\n\n<span class=\"c1\"># In the model:</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">my_field</span> <span class=\"o\">=</span> <span class=\"n\">BetterCharField</span><span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Finally, if your column requires truly complex SQL setup, return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> from\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a>. This will cause Django\u2019s SQL creation code to skip\nover this field. You are then responsible for creating the column in the right\ntable in some other way, but this gives you a way to tell Django to get out of\nthe way.</p>\n<p>The <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.rel_db_type\" title=\"django.db.models.Field.rel_db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">rel_db_type()</span></code></a> method is called by fields such as <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code> that point to another field to determine their database\ncolumn data types. For example, if you have an <code class=\"docutils literal notranslate\"><span class=\"pre\">UnsignedAutoField</span></code>, you also\nneed the foreign keys that point to that field to use the same data type:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># MySQL unsigned integer (range 0 to 4294967295).</span>\n<span class=\"k\">class</span> <span class=\"nc\">UnsignedAutoField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">AutoField</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;integer UNSIGNED AUTO_INCREMENT&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">rel_db_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;integer UNSIGNED&quot;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-converting-values-to-python-objects\">\n<span id=\"s-id2\"></span><span id=\"converting-values-to-python-objects\"></span><span id=\"id2\"></span><h4>Converting values to Python objects<a class=\"headerlink\" href=\"#converting-values-to-python-objects\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If your custom <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> class deals with data structures that are more\ncomplex than strings, dates, integers, or floats, then you may need to override\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.from_db_value\" title=\"django.db.models.Field.from_db_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">from_db_value()</span></code></a> and <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.to_python\" title=\"django.db.models.Field.to_python\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">to_python()</span></code></a>.</p>\n<p>If present for the field subclass, <code class=\"docutils literal notranslate\"><span class=\"pre\">from_db_value()</span></code> will be called in all\ncircumstances when the data is loaded from the database, including in\naggregates and <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a> calls.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">to_python()</span></code> is called by deserialization and during the\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.clean\" title=\"django.db.models.Model.clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">clean()</span></code></a> method used from forms.</p>\n<p>As a general rule, <code class=\"docutils literal notranslate\"><span class=\"pre\">to_python()</span></code> should deal gracefully with any of the\nfollowing arguments:</p>\n<ul class=\"simple\">\n<li>An instance of the correct type (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> in our ongoing example).</li>\n<li>A string</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (if the field allows <code class=\"docutils literal notranslate\"><span class=\"pre\">null=True</span></code>)</li>\n</ul>\n<p>In our <code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code> class, we\u2019re storing the data as a <code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code> field in\nthe database, so we need to be able to process strings and <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">from_db_value()</span></code>. In <code class=\"docutils literal notranslate\"><span class=\"pre\">to_python()</span></code>, we need to also handle <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code>\ninstances:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_hand</span><span class=\"p\">(</span><span class=\"n\">hand_string</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Takes a string of cards and splits into a full hand.&quot;&quot;&quot;</span>\n    <span class=\"n\">p1</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">&quot;.</span><span class=\"si\">{26}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s2\">&quot;..&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">p1</span><span class=\"o\">.</span><span class=\"n\">findall</span><span class=\"p\">(</span><span class=\"n\">hand_string</span><span class=\"p\">)]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid input for a Hand instance&quot;</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">Hand</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">from_db_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n        <span class=\"k\">return</span> <span class=\"n\">parse_hand</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">to_python</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">Hand</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">parse_hand</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Notice that we always return a <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> instance from these methods. That\u2019s the\nPython object type we want to store in the model\u2019s attribute.</p>\n<p>For <code class=\"docutils literal notranslate\"><span class=\"pre\">to_python()</span></code>, if anything goes wrong during value conversion, you should\nraise a <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> exception.</p>\n</div>\n<div class=\"section\" id=\"s-converting-python-objects-to-query-values\">\n<span id=\"s-id3\"></span><span id=\"converting-python-objects-to-query-values\"></span><span id=\"id3\"></span><h4>Converting Python objects to query values<a class=\"headerlink\" href=\"#converting-python-objects-to-query-values\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Since using a database requires conversion in both ways, if you override\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.from_db_value\" title=\"django.db.models.Field.from_db_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">from_db_value()</span></code></a> you also have to override\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_prep_value\" title=\"django.db.models.Field.get_prep_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_prep_value()</span></code></a> to convert Python objects back to query values.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_prep_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">l</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">l</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">north</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">east</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">south</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">west</span><span class=\"p\">)]</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">If your custom field uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">CHAR</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">TEXT</span></code>\ntypes for MySQL, you must make sure that <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_prep_value\" title=\"django.db.models.Field.get_prep_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_prep_value()</span></code></a>\nalways returns a string type. MySQL performs flexible and unexpected\nmatching when a query is performed on these types and the provided\nvalue is an integer, which can cause queries to include unexpected\nobjects in their results. This problem cannot occur if you always\nreturn a string type from <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_prep_value\" title=\"django.db.models.Field.get_prep_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_prep_value()</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-converting-query-values-to-database-values\">\n<span id=\"s-id4\"></span><span id=\"converting-query-values-to-database-values\"></span><span id=\"id4\"></span><h4>Converting query values to database values<a class=\"headerlink\" href=\"#converting-query-values-to-database-values\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Some data types (for example, dates) need to be in a specific format\nbefore they can be used by a database backend.\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_db_prep_value\" title=\"django.db.models.Field.get_db_prep_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_db_prep_value()</span></code></a> is the method where those conversions should\nbe made. The specific connection that will be used for the query is\npassed as the <code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code> parameter. This allows you to use\nbackend-specific conversion logic if it is required.</p>\n<p>For example, Django uses the following method for its\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.BinaryField\" title=\"django.db.models.BinaryField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BinaryField</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_db_prep_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">prepared</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_db_prep_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">prepared</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"o\">.</span><span class=\"n\">Binary</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n</pre></div>\n</div>\n<p>In case your custom field needs a special conversion when being saved that is\nnot the same as the conversion used for normal query parameters, you can\noverride <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_db_prep_save\" title=\"django.db.models.Field.get_db_prep_save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_db_prep_save()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-preprocessing-values-before-saving\">\n<span id=\"s-id5\"></span><span id=\"preprocessing-values-before-saving\"></span><span id=\"id5\"></span><h4>Preprocessing values before saving<a class=\"headerlink\" href=\"#preprocessing-values-before-saving\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you want to preprocess the value just before saving, you can use\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.pre_save\" title=\"django.db.models.Field.pre_save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">pre_save()</span></code></a>. For example, Django\u2019s\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> uses this method to set the attribute\ncorrectly in the case of <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateField.auto_now\" title=\"django.db.models.DateField.auto_now\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateField.auto_now_add\" title=\"django.db.models.DateField.auto_now_add\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now_add</span></code></a>.</p>\n<p>If you do override this method, you must return the value of the attribute at\nthe end. You should also update the model\u2019s attribute if you make any changes\nto the value so that code holding references to the model will always see the\ncorrect value.</p>\n</div>\n<div class=\"section\" id=\"s-specifying-the-form-field-for-a-model-field\">\n<span id=\"s-specifying-form-field-for-model-field\"></span><span id=\"specifying-the-form-field-for-a-model-field\"></span><span id=\"specifying-form-field-for-model-field\"></span><h4>Specifying the form field for a model field<a class=\"headerlink\" href=\"#specifying-the-form-field-for-a-model-field\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To customize the form field used by <a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a>, you can\noverride <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.formfield\" title=\"django.db.models.Field.formfield\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">formfield()</span></code></a>.</p>\n<p>The form field class can be specified via the <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">choices_form_class</span></code> arguments; the latter is used if the field has choices\nspecified, the former otherwise. If these arguments are not provided,\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField\" title=\"django.forms.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> or <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.TypedChoiceField\" title=\"django.forms.TypedChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypedChoiceField</span></code></a>\nwill be used.</p>\n<p>All of the <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> dictionary is passed directly to the form field\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method. Normally, all you need to do is set up a good default\nfor the <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> (and maybe <code class=\"docutils literal notranslate\"><span class=\"pre\">choices_form_class</span></code>) argument and then\ndelegate further handling to the parent class. This might require you to write\na custom form field (and even a form widget). See the <a class=\"reference internal\" href=\"../../topics/forms/\"><span class=\"doc\">forms documentation</span></a> for information about this.</p>\n<p>Continuing our ongoing example, we can write the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.formfield\" title=\"django.db.models.Field.formfield\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">formfield()</span></code></a> method\nas:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">formfield</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is a fairly standard way to set up some defaults</span>\n        <span class=\"c1\"># while letting the caller override them.</span>\n        <span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;form_class&quot;</span><span class=\"p\">:</span> <span class=\"n\">MyFormField</span><span class=\"p\">}</span>\n        <span class=\"n\">defaults</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">formfield</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">defaults</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This assumes we\u2019ve imported a <code class=\"docutils literal notranslate\"><span class=\"pre\">MyFormField</span></code> field class (which has its own\ndefault widget). This document doesn\u2019t cover the details of writing custom form\nfields.</p>\n</div>\n<div class=\"section\" id=\"s-emulating-built-in-field-types\">\n<span id=\"s-id6\"></span><span id=\"emulating-built-in-field-types\"></span><span id=\"id6\"></span><h4>Emulating built-in field types<a class=\"headerlink\" href=\"#emulating-built-in-field-types\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you have created a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a> method, you don\u2019t need to worry about\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_internal_type\" title=\"django.db.models.Field.get_internal_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_internal_type()</span></code></a> \u2013 it won\u2019t be used much. Sometimes, though, your\ndatabase storage is similar in type to some other field, so you can use that\nother field\u2019s logic to create the right column.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_internal_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;CharField&quot;</span>\n</pre></div>\n</div>\n<p>No matter which database backend we are using, this will mean that\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> and other SQL commands create the right column type for\nstoring a string.</p>\n<p>If <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_internal_type\" title=\"django.db.models.Field.get_internal_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_internal_type()</span></code></a> returns a string that is not known to Django for\nthe database backend you are using \u2013 that is, it doesn\u2019t appear in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.&lt;db_name&gt;.base.DatabaseWrapper.data_types</span></code> \u2013 the string\nwill still be used by the serializer, but the default <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a>\nmethod will return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. See the documentation of <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_type\" title=\"django.db.models.Field.db_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">db_type()</span></code></a>\nfor reasons why this might be useful. Putting a descriptive string in as the\ntype of the field for the serializer is a useful idea if you\u2019re ever going to\nbe using the serializer output in some other place, outside of Django.</p>\n</div>\n<div class=\"section\" id=\"s-converting-field-data-for-serialization\">\n<span id=\"s-converting-model-field-to-serialization\"></span><span id=\"converting-field-data-for-serialization\"></span><span id=\"converting-model-field-to-serialization\"></span><h4>Converting field data for serialization<a class=\"headerlink\" href=\"#converting-field-data-for-serialization\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To customize how the values are serialized by a serializer, you can override\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.value_to_string\" title=\"django.db.models.Field.value_to_string\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">value_to_string()</span></code></a>. Using <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.value_from_object\" title=\"django.db.models.Field.value_from_object\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">value_from_object()</span></code></a> is the\nbest way to get the field\u2019s value prior to serialization. For example, since\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code> uses strings for its data storage anyway, we can reuse some\nexisting conversion code:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">HandField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">value_to_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value_from_object</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_prep_value</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-some-general-advice\">\n<span id=\"some-general-advice\"></span><h3>Some general advice<a class=\"headerlink\" href=\"#some-general-advice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Writing a custom field can be a tricky process, particularly if you\u2019re doing\ncomplex conversions between your Python types and your database and\nserialization formats. Here are a couple of tips to make things go more\nsmoothly:</p>\n<ol class=\"arabic simple\">\n<li>Look at the existing Django fields (in\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/db/models/fields/__init__.py\">django/db/models/fields/__init__.py</a>) for inspiration. Try to find\na field that\u2019s similar to what you want and extend it a little bit,\ninstead of creating an entirely new field from scratch.</li>\n<li>Put a <code class=\"docutils literal notranslate\"><span class=\"pre\">__str__()</span></code> method on the class you\u2019re wrapping up as a field. There\nare a lot of places where the default behavior of the field code is to call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">str()</span></code> on the value. (In our examples in this document, <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> would\nbe a <code class=\"docutils literal notranslate\"><span class=\"pre\">Hand</span></code> instance, not a <code class=\"docutils literal notranslate\"><span class=\"pre\">HandField</span></code>). So if your <code class=\"docutils literal notranslate\"><span class=\"pre\">__str__()</span></code>\nmethod automatically converts to the string form of your Python object, you\ncan save yourself a lot of work.</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-a-filefield-subclass\">\n<span id=\"writing-a-filefield-subclass\"></span><h2>Writing a <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> subclass<a class=\"headerlink\" href=\"#writing-a-filefield-subclass\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In addition to the above methods, fields that deal with files have a few other\nspecial requirements which must be taken into account. The majority of the\nmechanics provided by <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code>, such as controlling database storage and\nretrieval, can remain unchanged, leaving subclasses to deal with the challenge\nof supporting a particular type of file.</p>\n<p>Django provides a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> class, which is used as a proxy to the file\u2019s\ncontents and operations. This can be subclassed to customize how the file is\naccessed, and what methods are available. It lives at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.fields.files</span></code>, and its default behavior is explained in the\n<a class=\"reference internal\" href=\"../../ref/files/file/\"><span class=\"doc\">file documentation</span></a>.</p>\n<p>Once a subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> is created, the new <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> subclass must be\ntold to use it. To do so, assign the new <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> subclass to the special\n<code class=\"docutils literal notranslate\"><span class=\"pre\">attr_class</span></code> attribute of the <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> subclass.</p>\n<div class=\"section\" id=\"s-a-few-suggestions\">\n<span id=\"a-few-suggestions\"></span><h3>A few suggestions<a class=\"headerlink\" href=\"#a-few-suggestions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In addition to the above details, there are a few guidelines which can greatly\nimprove the efficiency and readability of the field\u2019s code.</p>\n<ol class=\"arabic simple\">\n<li>The source for Django\u2019s own <code class=\"docutils literal notranslate\"><span class=\"pre\">ImageField</span></code> (in\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/db/models/fields/files.py\">django/db/models/fields/files.py</a>) is a great example of how to\nsubclass <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> to support a particular type of file, as it\nincorporates all of the techniques described above.</li>\n<li>Cache file attributes wherever possible. Since files may be stored in\nremote storage systems, retrieving them may cost extra time, or even\nmoney, that isn\u2019t always necessary. Once a file is retrieved to obtain\nsome data about its content, cache as much of that data as possible to\nreduce the number of times the file must be retrieved on subsequent\ncalls for that information.</li>\n</ol>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/custom-lookups", "How to write custom lookups", "N", "next"], ["howto/custom-management-commands", "How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands", "P", "previous"]], "sourcename": "howto/custom-model-fields.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to create custom model fields</a><ul>\n<li><a class=\"reference internal\" href=\"#introduction\">Introduction</a><ul>\n<li><a class=\"reference internal\" href=\"#our-example-object\">Our example object</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#background-theory\">Background theory</a><ul>\n<li><a class=\"reference internal\" href=\"#database-storage\">Database storage</a></li>\n<li><a class=\"reference internal\" href=\"#what-does-a-field-class-do\">What does a field class do?</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#writing-a-field-subclass\">Writing a field subclass</a><ul>\n<li><a class=\"reference internal\" href=\"#field-deconstruction\">Field deconstruction</a></li>\n<li><a class=\"reference internal\" href=\"#field-attributes-not-affecting-database-column-definition\">Field attributes not affecting database column definition</a></li>\n<li><a class=\"reference internal\" href=\"#changing-a-custom-field-s-base-class\">Changing a custom field\u2019s base class</a></li>\n<li><a class=\"reference internal\" href=\"#documenting-your-custom-field\">Documenting your custom field</a></li>\n<li><a class=\"reference internal\" href=\"#useful-methods\">Useful methods</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-database-types\">Custom database types</a></li>\n<li><a class=\"reference internal\" href=\"#converting-values-to-python-objects\">Converting values to Python objects</a></li>\n<li><a class=\"reference internal\" href=\"#converting-python-objects-to-query-values\">Converting Python objects to query values</a></li>\n<li><a class=\"reference internal\" href=\"#converting-query-values-to-database-values\">Converting query values to database values</a></li>\n<li><a class=\"reference internal\" href=\"#preprocessing-values-before-saving\">Preprocessing values before saving</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-the-form-field-for-a-model-field\">Specifying the form field for a model field</a></li>\n<li><a class=\"reference internal\" href=\"#emulating-built-in-field-types\">Emulating built-in field types</a></li>\n<li><a class=\"reference internal\" href=\"#converting-field-data-for-serialization\">Converting field data for serialization</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#some-general-advice\">Some general advice</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#writing-a-filefield-subclass\">Writing a <code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code> subclass</a><ul>\n<li><a class=\"reference internal\" href=\"#a-few-suggestions\">A few suggestions</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/custom-model-fields", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
