{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../custom-lookups/", "title": "How to write custom lookups"}, "next": {"link": "../custom-template-tags/", "title": "How to create custom template tags and filters"}, "title": "How to implement a custom template backend", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-implement-a-custom-template-backend\">\n<span id=\"how-to-implement-a-custom-template-backend\"></span><h1>How to implement a custom template backend<a class=\"headerlink\" href=\"#how-to-implement-a-custom-template-backend\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-custom-backends\">\n<span id=\"custom-backends\"></span><h2>Custom backends<a class=\"headerlink\" href=\"#custom-backends\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Here\u2019s how to implement a custom template backend in order to use another\ntemplate system. A template backend is a class that inherits\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.backends.base.BaseEngine</span></code>. It must implement\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_template()</span></code> and optionally <code class=\"docutils literal notranslate\"><span class=\"pre\">from_string()</span></code>. Here\u2019s an example for a\nfictional <code class=\"docutils literal notranslate\"><span class=\"pre\">foobar</span></code> template library:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">,</span> <span class=\"n\">TemplateSyntaxError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.backends.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseEngine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.backends.utils</span> <span class=\"kn\">import</span> <span class=\"n\">csrf_input_lazy</span><span class=\"p\">,</span> <span class=\"n\">csrf_token_lazy</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">foobar</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FooBar</span><span class=\"p\">(</span><span class=\"n\">BaseEngine</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Name of the subdirectory containing the templates for this engine</span>\n    <span class=\"c1\"># inside an installed application.</span>\n    <span class=\"n\">app_dirname</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;foobar&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">Engine</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">from_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_code</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">template_code</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">TemplateCompilationFailed</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">TemplateNotFound</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">foobar</span><span class=\"o\">.</span><span class=\"n\">TemplateCompilationFailed</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Template</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">template</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">context</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;request&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n            <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;csrf_input&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">csrf_input_lazy</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n            <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;csrf_token&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">csrf_token_lazy</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference external\" href=\"https://github.com/django/deps/blob/main/final/0182-multiple-template-engines.rst\">DEP 182</a> for more information.</p>\n</div>\n<div class=\"section\" id=\"s-debug-integration-for-custom-engines\">\n<span id=\"s-template-debug-integration\"></span><span id=\"debug-integration-for-custom-engines\"></span><span id=\"template-debug-integration\"></span><h2>Debug integration for custom engines<a class=\"headerlink\" href=\"#debug-integration-for-custom-engines\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The Django debug page has hooks to provide detailed information when a template\nerror arises. Custom template engines can use these hooks to enhance the\ntraceback information that appears to users. The following hooks are available:</p>\n<div class=\"section\" id=\"s-template-postmortem\">\n<span id=\"s-id1\"></span><span id=\"template-postmortem\"></span><span id=\"id1\"></span><h3>Template postmortem<a class=\"headerlink\" href=\"#template-postmortem\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The postmortem appears when <a class=\"reference internal\" href=\"../../topics/templates/#django.template.TemplateDoesNotExist\" title=\"django.template.TemplateDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TemplateDoesNotExist</span></code></a> is\nraised. It lists the template engines and loaders that were used when trying to\nfind a given template. For example, if two Django engines are configured, the\npostmortem will appear like:</p>\n<img alt=\"../../_images/postmortem.png\" src=\"../../_images/postmortem.png\" />\n<p>Custom engines can populate the postmortem by passing the <code class=\"docutils literal notranslate\"><span class=\"pre\">backend</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tried</span></code> arguments when raising <a class=\"reference internal\" href=\"../../topics/templates/#django.template.TemplateDoesNotExist\" title=\"django.template.TemplateDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TemplateDoesNotExist</span></code></a>.\nBackends that use the postmortem <a class=\"reference internal\" href=\"#template-origin-api\"><span class=\"std std-ref\">should specify an origin</span></a> on the template object.</p>\n</div>\n<div class=\"section\" id=\"s-contextual-line-information\">\n<span id=\"contextual-line-information\"></span><h3>Contextual line information<a class=\"headerlink\" href=\"#contextual-line-information\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If an error happens during template parsing or rendering, Django can display\nthe line the error happened on. For example:</p>\n<img alt=\"../../_images/template-lines.png\" src=\"../../_images/template-lines.png\" />\n<p>Custom engines can populate this information by setting a <code class=\"docutils literal notranslate\"><span class=\"pre\">template_debug</span></code>\nattribute on exceptions raised during parsing and rendering. This attribute is\na <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a> with the following values:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'name'</span></code>: The name of the template in which the exception occurred.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'message'</span></code>: The exception message.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'source_lines'</span></code>: The lines before, after, and including the line the\nexception occurred on. This is for context, so it shouldn\u2019t contain more than\n20 lines or so.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'line'</span></code>: The line number on which the exception occurred.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'before'</span></code>: The content on the error line before the token that raised the\nerror.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'during'</span></code>: The token that raised the error.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'after'</span></code>: The content on the error line after the token that raised the\nerror.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'total'</span></code>: The number of lines in <code class=\"docutils literal notranslate\"><span class=\"pre\">source_lines</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'top'</span></code>: The line number where <code class=\"docutils literal notranslate\"><span class=\"pre\">source_lines</span></code> starts.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'bottom'</span></code>: The line number where <code class=\"docutils literal notranslate\"><span class=\"pre\">source_lines</span></code> ends.</li>\n</ul>\n<p>Given the above template error, <code class=\"docutils literal notranslate\"><span class=\"pre\">template_debug</span></code> would look like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">{</span>\n    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;/path/to/template.html&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Invalid block tag: &#39;syntax&#39;&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;source_lines&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s2\">&quot;some</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lines</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">&quot;before</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hello {</span><span class=\"si\">% s</span><span class=\"s2\">yntax error %} {{ world }}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s2\">&quot;some</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lines</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"s2\">&quot;after</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">&quot;line&quot;</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;before&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Hello &quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;during&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;{</span><span class=\"si\">% s</span><span class=\"s2\">yntax error %}&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;after&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot; {{ world }}</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;total&quot;</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;bottom&quot;</span><span class=\"p\">:</span> <span class=\"mi\">9</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;top&quot;</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-origin-api-and-3rd-party-integration\">\n<span id=\"s-template-origin-api\"></span><span id=\"origin-api-and-3rd-party-integration\"></span><span id=\"template-origin-api\"></span><h3>Origin API and 3rd-party integration<a class=\"headerlink\" href=\"#origin-api-and-3rd-party-integration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django templates have an <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.base.Origin\" title=\"django.template.base.Origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a> object available\nthrough the <code class=\"docutils literal notranslate\"><span class=\"pre\">template.origin</span></code> attribute. This enables debug information to be\ndisplayed in the <a class=\"reference internal\" href=\"#template-postmortem\"><span class=\"std std-ref\">template postmortem</span></a>, as well as\nin 3rd-party libraries, like the <a class=\"reference external\" href=\"https://github.com/jazzband/django-debug-toolbar/\">Django Debug Toolbar</a>.</p>\n<p>Custom engines can provide their own <code class=\"docutils literal notranslate\"><span class=\"pre\">template.origin</span></code> information by\ncreating an object that specifies the following attributes:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'name'</span></code>: The full path to the template.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'template_name'</span></code>: The relative path to the template as passed into the\ntemplate loading methods.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'loader_name'</span></code>: An optional string identifying the function or class used\nto load the template, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.filesystem.Loader</span></code>.</li>\n</ul>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/custom-template-tags", "How to create custom template tags and filters", "N", "next"], ["howto/custom-lookups", "How to write custom lookups", "P", "previous"]], "sourcename": "howto/custom-template-backend.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to implement a custom template backend</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-backends\">Custom backends</a></li>\n<li><a class=\"reference internal\" href=\"#debug-integration-for-custom-engines\">Debug integration for custom engines</a><ul>\n<li><a class=\"reference internal\" href=\"#template-postmortem\">Template postmortem</a></li>\n<li><a class=\"reference internal\" href=\"#contextual-line-information\">Contextual line information</a></li>\n<li><a class=\"reference internal\" href=\"#origin-api-and-3rd-party-integration\">Origin API and 3rd-party integration</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/custom-template-backend", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}