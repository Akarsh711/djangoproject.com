{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "File handling"}], "prev": {"link": "../storage/", "title": "File storage API"}, "next": {"link": "../../forms/", "title": "Forms"}, "title": "Uploaded Files and Upload Handlers", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.core.files.uploadedfile\">\n<span id=\"s-uploaded-files-and-upload-handlers\"></span><span id=\"module-django.core.files.uploadedfile\"></span><span id=\"uploaded-files-and-upload-handlers\"></span><h1>Uploaded Files and Upload Handlers<a class=\"headerlink\" href=\"#module-django.core.files.uploadedfile\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-uploaded-files\">\n<span id=\"uploaded-files\"></span><h2>Uploaded files<a class=\"headerlink\" href=\"#uploaded-files\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">UploadedFile</span></code><a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadedfile/#UploadedFile\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>During file uploads, the actual file data is stored in <a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest.FILES\" title=\"django.http.HttpRequest.FILES\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">request.FILES</span></code></a>. Each entry in this dictionary is an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code> object (or a subclass) \u2013 a wrapper around an uploaded file.\nYou\u2019ll usually use one of these methods to access the uploaded content:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.read\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">read</span></code>()<a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Read the entire uploaded data from the file. Be careful with this method:\nif the uploaded file is huge it can overwhelm your system if you try to\nread it into memory. You\u2019ll probably want to use <code class=\"docutils literal notranslate\"><span class=\"pre\">chunks()</span></code> instead; see\nbelow.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.multiple_chunks\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">multiple_chunks</span></code>(<em><span class=\"n\"><span class=\"pre\">chunk_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.multiple_chunks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the uploaded file is big enough to require reading in\nmultiple chunks. By default this will be any file larger than 2.5 megabytes,\nbut that\u2019s configurable; see below.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.chunks\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">chunks</span></code>(<em><span class=\"n\"><span class=\"pre\">chunk_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.chunks\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A generator returning chunks of the file. If <code class=\"docutils literal notranslate\"><span class=\"pre\">multiple_chunks()</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, you should use this method in a loop instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">read()</span></code>.</p>\n<p>In practice, it\u2019s often easiest to use <code class=\"docutils literal notranslate\"><span class=\"pre\">chunks()</span></code> all the time. Looping\nover <code class=\"docutils literal notranslate\"><span class=\"pre\">chunks()</span></code> instead of using <code class=\"docutils literal notranslate\"><span class=\"pre\">read()</span></code> ensures that large files\ndon\u2019t overwhelm your system\u2019s memory.</p>\n</dd></dl>\n\n<p>Here are some useful attributes of <code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code>:</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.name\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">name</span></code><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The name of the uploaded file (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">my_file.txt</span></code>).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.size\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">size</span></code><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.size\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The size, in bytes, of the uploaded file.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.content_type\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">content_type</span></code><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.content_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The content-type header uploaded with the file (e.g. <em class=\"mimetype\">text/plain</em>\nor <em class=\"mimetype\">application/pdf</em>). Like any data supplied by the user, you\nshouldn\u2019t trust that the uploaded file is actually this type. You\u2019ll still\nneed to validate that the file contains the content that the content-type\nheader claims \u2013 \u201ctrust but verify.\u201d</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.content_type_extra\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">content_type_extra</span></code><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.content_type_extra\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary containing extra parameters passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">content-type</span></code>\nheader. This is typically provided by services, such as Google App Engine,\nthat intercept and handle file uploads on your behalf. As a result your\nhandler may not receive the uploaded file content, but instead a URL or\nother pointer to the file (see <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc2388.html#section-5.3\"><strong>RFC 2388</strong></a>).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.UploadedFile.charset\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">UploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">charset</span></code><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.UploadedFile.charset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>For <em class=\"mimetype\">text/*</em> content-types, the character set (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">utf8</span></code>)\nsupplied by the browser. Again, \u201ctrust but verify\u201d is the best policy here.</p>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Like regular Python files, you can read the file line-by-line by iterating\nover the uploaded file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">uploadedfile</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"last\">Lines are split using <span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0278/\"><strong>universal newlines</strong></a>. The following are\nrecognized as ending a line: the Unix end-of-line convention <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code>, the\nWindows convention <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\r\\n'</span></code>, and the old Macintosh convention <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\r'</span></code>.</p>\n</div>\n<p>Subclasses of <code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code> include:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.TemporaryUploadedFile\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TemporaryUploadedFile</span></code><a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadedfile/#TemporaryUploadedFile\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.TemporaryUploadedFile\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A file uploaded to a temporary location (i.e. stream-to-disk). This class\nis used by the\n<a class=\"reference internal\" href=\"#django.core.files.uploadhandler.TemporaryFileUploadHandler\" title=\"django.core.files.uploadhandler.TemporaryFileUploadHandler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemporaryFileUploadHandler</span></code></a>. In\naddition to the methods from <a class=\"reference internal\" href=\"#django.core.files.uploadedfile.UploadedFile\" title=\"django.core.files.uploadedfile.UploadedFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code></a>, it has one additional\nmethod:</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">TemporaryUploadedFile.</span></code><code class=\"sig-name descname\"><span class=\"pre\">temporary_file_path</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadedfile/#TemporaryUploadedFile.temporary_file_path\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.TemporaryUploadedFile.temporary_file_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the full path to the temporary uploaded file.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadedfile.InMemoryUploadedFile\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">InMemoryUploadedFile</span></code><a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadedfile/#InMemoryUploadedFile\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadedfile.InMemoryUploadedFile\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A file uploaded into memory (i.e. stream-to-memory). This class is used\nby the <a class=\"reference internal\" href=\"#django.core.files.uploadhandler.MemoryFileUploadHandler\" title=\"django.core.files.uploadhandler.MemoryFileUploadHandler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MemoryFileUploadHandler</span></code></a>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-module-django.core.files.uploadhandler\">\n<span id=\"s-built-in-upload-handlers\"></span><span id=\"module-django.core.files.uploadhandler\"></span><span id=\"built-in-upload-handlers\"></span><h2>Built-in upload handlers<a class=\"headerlink\" href=\"#module-django.core.files.uploadhandler\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Together the <a class=\"reference internal\" href=\"#django.core.files.uploadhandler.MemoryFileUploadHandler\" title=\"django.core.files.uploadhandler.MemoryFileUploadHandler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MemoryFileUploadHandler</span></code></a> and\n<a class=\"reference internal\" href=\"#django.core.files.uploadhandler.TemporaryFileUploadHandler\" title=\"django.core.files.uploadhandler.TemporaryFileUploadHandler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemporaryFileUploadHandler</span></code></a> provide Django\u2019s default file upload\nbehavior of reading small files into memory and large ones onto disk. They\nare located in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.files.uploadhandler</span></code>.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.MemoryFileUploadHandler\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">MemoryFileUploadHandler</span></code><a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#MemoryFileUploadHandler\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.MemoryFileUploadHandler\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>File upload handler to stream uploads into memory (used for small files).</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.TemporaryFileUploadHandler\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TemporaryFileUploadHandler</span></code><a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#TemporaryFileUploadHandler\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.TemporaryFileUploadHandler\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Upload handler that streams data into a temporary file using\n<a class=\"reference internal\" href=\"#django.core.files.uploadedfile.TemporaryUploadedFile\" title=\"django.core.files.uploadedfile.TemporaryUploadedFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemporaryUploadedFile</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-writing-custom-upload-handlers\">\n<span id=\"s-custom-upload-handlers\"></span><span id=\"writing-custom-upload-handlers\"></span><span id=\"custom-upload-handlers\"></span><h2>Writing custom upload handlers<a class=\"headerlink\" href=\"#writing-custom-upload-handlers\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">FileUploadHandler</span></code><a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>All file upload handlers should be subclasses of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.files.uploadhandler.FileUploadHandler</span></code>. You can define upload\nhandlers wherever you wish.</p>\n<div class=\"section\" id=\"s-required-methods\">\n<span id=\"required-methods\"></span><h3>Required methods<a class=\"headerlink\" href=\"#required-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Custom file upload handlers <strong>must</strong> define the following methods:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">receive_data_chunk</span></code>(<em><span class=\"n\"><span class=\"pre\">raw_data</span></span></em>, <em><span class=\"n\"><span class=\"pre\">start</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler.receive_data_chunk\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Receives a \u201cchunk\u201d of data from the file upload.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">raw_data</span></code> is a bytestring containing the uploaded data.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> is the position in the file where this <code class=\"docutils literal notranslate\"><span class=\"pre\">raw_data</span></code> chunk\nbegins.</p>\n<p>The data you return will get fed into the subsequent upload handlers\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">receive_data_chunk</span></code> methods. In this way, one handler can be a\n\u201cfilter\u201d for other handlers.</p>\n<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> from <code class=\"docutils literal notranslate\"><span class=\"pre\">receive_data_chunk</span></code> to short-circuit remaining\nupload handlers from getting this chunk. This is useful if you\u2019re\nstoring the uploaded data yourself and don\u2019t want future handlers to\nstore a copy of the data.</p>\n<p>If you raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">StopUpload</span></code> or a <code class=\"docutils literal notranslate\"><span class=\"pre\">SkipFile</span></code> exception, the upload\nwill abort or the file will be completely skipped.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.file_complete\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">file_complete</span></code>(<em><span class=\"n\"><span class=\"pre\">file_size</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler.file_complete\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.file_complete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Called when a file has finished uploading.</p>\n<p>The handler should return an <code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code> object that will be stored\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">request.FILES</span></code>. Handlers may also return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to indicate that\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code> object should come from subsequent upload handlers.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-optional-methods\">\n<span id=\"optional-methods\"></span><h3>Optional methods<a class=\"headerlink\" href=\"#optional-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Custom upload handlers may also define any of the following optional methods or\nattributes:</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.chunk_size\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">chunk_size</span></code><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.chunk_size\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Size, in bytes, of the \u201cchunks\u201d Django should store into memory and feed\ninto the handler. That is, this attribute controls the size of chunks\nfed into <code class=\"docutils literal notranslate\"><span class=\"pre\">FileUploadHandler.receive_data_chunk</span></code>.</p>\n<p>For maximum performance the chunk sizes should be divisible by <code class=\"docutils literal notranslate\"><span class=\"pre\">4</span></code> and\nshould not exceed 2 GB (2<sup>31</sup> bytes) in size. When there are\nmultiple chunk sizes provided by multiple handlers, Django will use the\nsmallest chunk size defined by any handler.</p>\n<p>The default is 64*2<sup>10</sup> bytes, or 64 KB.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.new_file\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">new_file</span></code>(<em><span class=\"n\"><span class=\"pre\">field_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">file_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_length</span></span></em>, <em><span class=\"n\"><span class=\"pre\">charset</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type_extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler.new_file\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.new_file\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Callback signaling that a new file upload is starting. This is called\nbefore any data has been fed to any upload handlers.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">field_name</span></code> is a string name of the file <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> field.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">file_name</span></code> is the filename provided by the browser.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> is the MIME type provided by the browser \u2013 E.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'image/jpeg'</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">content_length</span></code> is the length of the image given by the browser.\nSometimes this won\u2019t be provided and will be <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">charset</span></code> is the character set (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">utf8</span></code>) given by the browser.\nLike <code class=\"docutils literal notranslate\"><span class=\"pre\">content_length</span></code>, this sometimes won\u2019t be provided.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">content_type_extra</span></code> is extra information about the file from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">content-type</span></code> header. See <a class=\"reference internal\" href=\"#django.core.files.uploadedfile.UploadedFile.content_type_extra\" title=\"django.core.files.uploadedfile.UploadedFile.content_type_extra\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">UploadedFile.content_type_extra</span></code></a>.</p>\n<p>This method may raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">StopFutureHandlers</span></code> exception to prevent\nfuture handlers from handling this file.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.upload_complete\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">upload_complete</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler.upload_complete\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.upload_complete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Callback signaling that the entire upload (all files) has completed.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.upload_interrupted\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">upload_interrupted</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler.upload_interrupted\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.upload_interrupted\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Callback signaling that the upload was interrupted, e.g. when the user\nclosed their browser during file upload.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.uploadhandler.FileUploadHandler.handle_raw_input\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileUploadHandler.</span></code><code class=\"sig-name descname\"><span class=\"pre\">handle_raw_input</span></code>(<em><span class=\"n\"><span class=\"pre\">input_data</span></span></em>, <em><span class=\"n\"><span class=\"pre\">META</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_length</span></span></em>, <em><span class=\"n\"><span class=\"pre\">boundary</span></span></em>, <em><span class=\"n\"><span class=\"pre\">encoding</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/core/files/uploadhandler/#FileUploadHandler.handle_raw_input\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.files.uploadhandler.FileUploadHandler.handle_raw_input\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Allows the handler to completely override the parsing of the raw\nHTTP input.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">input_data</span></code> is a file-like object that supports <code class=\"docutils literal notranslate\"><span class=\"pre\">read()</span></code>-ing.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">META</span></code> is the same object as <code class=\"docutils literal notranslate\"><span class=\"pre\">request.META</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">content_length</span></code> is the length of the data in <code class=\"docutils literal notranslate\"><span class=\"pre\">input_data</span></code>. Don\u2019t\nread more than <code class=\"docutils literal notranslate\"><span class=\"pre\">content_length</span></code> bytes from <code class=\"docutils literal notranslate\"><span class=\"pre\">input_data</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">boundary</span></code> is the MIME boundary for this request.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">encoding</span></code> is the encoding of the request.</p>\n<p>Return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if you want upload handling to continue, or a tuple of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(POST,</span> <span class=\"pre\">FILES)</span></code> if you want to return the new data structures suitable\nfor the request directly.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/forms/index", "Forms", "N", "next"], ["ref/files/storage", "File storage API", "P", "previous"]], "sourcename": "ref/files/uploads.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Uploaded Files and Upload Handlers</a><ul>\n<li><a class=\"reference internal\" href=\"#uploaded-files\">Uploaded files</a></li>\n<li><a class=\"reference internal\" href=\"#module-django.core.files.uploadhandler\">Built-in upload handlers</a></li>\n<li><a class=\"reference internal\" href=\"#writing-custom-upload-handlers\">Writing custom upload handlers</a><ul>\n<li><a class=\"reference internal\" href=\"#required-methods\">Required methods</a></li>\n<li><a class=\"reference internal\" href=\"#optional-methods\">Optional methods</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/files/uploads", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
