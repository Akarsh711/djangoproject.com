{"parents": [{"link": "../", "title": "API Reference"}], "prev": {"link": "../contrib/syndication/", "title": "The syndication feed framework"}, "next": {"link": "../databases/", "title": "Databases"}, "title": "Cross Site Request Forgery protection", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.middleware.csrf\">\n<span id=\"s-cross-site-request-forgery-protection\"></span><span id=\"module-django.middleware.csrf\"></span><span id=\"cross-site-request-forgery-protection\"></span><h1>Cross Site Request Forgery protection<a class=\"headerlink\" href=\"#module-django.middleware.csrf\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The CSRF middleware and template tag provides easy-to-use protection against\n<a class=\"reference external\" href=\"https://www.squarefree.com/securitytips/web-developers.html#CSRF\">Cross Site Request Forgeries</a>. This type of attack occurs when a malicious\nwebsite contains a link, a form button or some JavaScript that is intended to\nperform some action on your website, using the credentials of a logged-in user\nwho visits the malicious site in their browser. A related type of attack,\n\u2018login CSRF\u2019, where an attacking site tricks a user\u2019s browser into logging into\na site with someone else\u2019s credentials, is also covered.</p>\n<p>The first defense against CSRF attacks is to ensure that GET requests (and other\n\u2018safe\u2019 methods, as defined by <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.2.1\"><strong>RFC 9110#section-9.2.1</strong></a>) are side effect free.\nRequests via \u2018unsafe\u2019 methods, such as POST, PUT, and DELETE, can then be\nprotected by the steps outlined in <a class=\"reference internal\" href=\"../../howto/csrf/#using-csrf\"><span class=\"std std-ref\">How to use Django\u2019s CSRF protection</span></a>.</p>\n<div class=\"section\" id=\"s-how-it-works\">\n<span id=\"s-how-csrf-works\"></span><span id=\"how-it-works\"></span><span id=\"how-csrf-works\"></span><h2>How it works<a class=\"headerlink\" href=\"#how-it-works\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The CSRF protection is based on the following things:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">A CSRF cookie that is a random secret value, which other sites will not have\naccess to.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> sends this cookie with the response whenever\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.csrf.get_token()</span></code> is called. It can also send it in\nother cases. For security reasons, the value of the secret is changed each\ntime a user logs in.</p>\n</li>\n<li><p class=\"first\">A hidden form field with the name \u2018csrfmiddlewaretoken\u2019, present in all\noutgoing POST forms.</p>\n<p>In order to protect against <a class=\"reference external\" href=\"https://www.breachattack.com/\">BREACH</a> attacks, the value of this field is\nnot simply the secret. It is scrambled differently with each response using\na mask. The mask is generated randomly on every call to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_token()</span></code>, so\nthe form field value is different each time.</p>\n<p>This part is done by the template tag.</p>\n</li>\n<li><p class=\"first\">For all incoming requests that are not using HTTP GET, HEAD, OPTIONS or\nTRACE, a CSRF cookie must be present, and the \u2018csrfmiddlewaretoken\u2019 field\nmust be present and correct. If it isn\u2019t, the user will get a 403 error.</p>\n<p>When validating the \u2018csrfmiddlewaretoken\u2019 field value, only the secret,\nnot the full token, is compared with the secret in the cookie value.\nThis allows the use of ever-changing tokens. While each request may use its\nown token, the secret remains common to all.</p>\n<p>This check is done by <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> verifies the <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin\">Origin header</a>, if provided by the\nbrowser, against the current host and the <a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_TRUSTED_ORIGINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_TRUSTED_ORIGINS</span></code></a>\nsetting. This provides protection against cross-subdomain attacks.</p>\n</li>\n<li><p class=\"first\">In addition, for HTTPS requests, if the <code class=\"docutils literal notranslate\"><span class=\"pre\">Origin</span></code> header isn\u2019t provided,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> performs strict referer checking. This means that\neven if a subdomain can set or modify cookies on your domain, it can\u2019t force\na user to post to your application since that request won\u2019t come from your\nown exact domain.</p>\n<p>This also addresses a man-in-the-middle attack that\u2019s possible under HTTPS\nwhen using a session independent secret, due to the fact that HTTP\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Set-Cookie</span></code> headers are (unfortunately) accepted by clients even when\nthey are talking to a site under HTTPS. (Referer checking is not done for\nHTTP requests because the presence of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Referer</span></code> header isn\u2019t reliable\nenough under HTTP.)</p>\n<p>If the <a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_DOMAIN\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_DOMAIN</span></code></a> setting is set, the referer is compared\nagainst it. You can allow cross-subdomain requests by including a leading\ndot. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_DOMAIN</span> <span class=\"pre\">=</span> <span class=\"pre\">'.example.com'</span></code> will allow POST\nrequests from <code class=\"docutils literal notranslate\"><span class=\"pre\">www.example.com</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">api.example.com</span></code>. If the setting is\nnot set, then the referer must match the HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> header.</p>\n<p>Expanding the accepted referers beyond the current host or cookie domain can\nbe done with the <a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_TRUSTED_ORIGINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_TRUSTED_ORIGINS</span></code></a> setting.</p>\n</li>\n</ol>\n<p>This ensures that only forms that have originated from trusted domains can be\nused to POST data back.</p>\n<p>It deliberately ignores GET requests (and other requests that are defined as\n\u2018safe\u2019 by <span class=\"target\" id=\"index-1\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.2.1\"><strong>RFC 9110#section-9.2.1</strong></a>). These requests ought never to have any\npotentially dangerous side effects, and so a CSRF attack with a GET request\nought to be harmless. <span class=\"target\" id=\"index-2\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.2.1\"><strong>RFC 9110#section-9.2.1</strong></a> defines POST, PUT, and DELETE\nas \u2018unsafe\u2019, and all other methods are also assumed to be unsafe, for maximum\nprotection.</p>\n<p>The CSRF protection cannot protect against man-in-the-middle attacks, so use\n<a class=\"reference internal\" href=\"../../topics/security/#security-recommendation-ssl\"><span class=\"std std-ref\">HTTPS</span></a> with\n<a class=\"reference internal\" href=\"../middleware/#http-strict-transport-security\"><span class=\"std std-ref\">HTTP Strict Transport Security</span></a>. It also assumes <a class=\"reference internal\" href=\"../../topics/security/#host-headers-virtual-hosting\"><span class=\"std std-ref\">validation of\nthe HOST header</span></a> and that there aren\u2019t any\n<a class=\"reference internal\" href=\"../../topics/security/#cross-site-scripting\"><span class=\"std std-ref\">cross-site scripting vulnerabilities</span></a> on your site\n(because XSS vulnerabilities already let an attacker do anything a CSRF\nvulnerability allows and much worse).</p>\n<div class=\"admonition-removing-the-referer-header admonition\">\n<p class=\"first admonition-title\">Removing the <code class=\"docutils literal notranslate\"><span class=\"pre\">Referer</span></code> header</p>\n<p class=\"last\">To avoid disclosing the referrer URL to third-party sites, you might want\nto <a class=\"reference external\" href=\"https://www.w3.org/TR/referrer-policy/#referrer-policy-delivery\">disable the referer</a> on your site\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;a&gt;</span></code> tags. For example, you\nmight use the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;meta</span> <span class=\"pre\">name=&quot;referrer&quot;</span> <span class=\"pre\">content=&quot;no-referrer&quot;&gt;</span></code> tag or\ninclude the <code class=\"docutils literal notranslate\"><span class=\"pre\">Referrer-Policy:</span> <span class=\"pre\">no-referrer</span></code> header. Due to the CSRF\nprotection\u2019s strict referer checking on HTTPS requests, those techniques\ncause a CSRF failure on requests with \u2018unsafe\u2019 methods. Instead, use\nalternatives like <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;a</span> <span class=\"pre\">rel=&quot;noreferrer&quot;</span> <span class=\"pre\">...&gt;&quot;</span></code> for links to third-party\nsites.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-limitations\">\n<span id=\"s-csrf-limitations\"></span><span id=\"limitations\"></span><span id=\"csrf-limitations\"></span><h2>Limitations<a class=\"headerlink\" href=\"#limitations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Subdomains within a site will be able to set cookies on the client for the whole\ndomain. By setting the cookie and using a corresponding token, subdomains will\nbe able to circumvent the CSRF protection. The only way to avoid this is to\nensure that subdomains are controlled by trusted users (or, are at least unable\nto set cookies). Note that even without CSRF, there are other vulnerabilities,\nsuch as session fixation, that make giving subdomains to untrusted parties a bad\nidea, and these vulnerabilities cannot easily be fixed with current browsers.</p>\n</div>\n<div class=\"section\" id=\"s-module-django.views.decorators.csrf\">\n<span id=\"s-utilities\"></span><span id=\"module-django.views.decorators.csrf\"></span><span id=\"utilities\"></span><h2>Utilities<a class=\"headerlink\" href=\"#module-django.views.decorators.csrf\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The examples below assume you are using function-based views. If you\nare working with class-based views, you can refer to <a class=\"reference internal\" href=\"../../topics/class-based-views/intro/#id1\"><span class=\"std std-ref\">Decorating\nclass-based views</span></a>.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.csrf.csrf_exempt\">\n<code class=\"sig-name descname\"><span class=\"pre\">csrf_exempt</span></code>(<em><span class=\"n\"><span class=\"pre\">view</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/views/decorators/csrf/#csrf_exempt\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.csrf.csrf_exempt\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator marks a view as being exempt from the protection ensured by\nthe middleware. Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.csrf</span> <span class=\"kn\">import</span> <span class=\"n\">csrf_exempt</span>\n\n\n<span class=\"nd\">@csrf_exempt</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello world&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.csrf.csrf_protect\">\n<code class=\"sig-name descname\"><span class=\"pre\">csrf_protect</span></code>(<em><span class=\"n\"><span class=\"pre\">view</span></span></em>)<a class=\"headerlink\" href=\"#django.views.decorators.csrf.csrf_protect\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Decorator that provides the protection of <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> to a view.</p>\n<p>Usage:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.csrf</span> <span class=\"kn\">import</span> <span class=\"n\">csrf_protect</span>\n\n\n<span class=\"nd\">@csrf_protect</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a_template.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.csrf.requires_csrf_token\">\n<code class=\"sig-name descname\"><span class=\"pre\">requires_csrf_token</span></code>(<em><span class=\"n\"><span class=\"pre\">view</span></span></em>)<a class=\"headerlink\" href=\"#django.views.decorators.csrf.requires_csrf_token\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Normally the <a class=\"reference internal\" href=\"../templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> template tag will not work if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware.process_view</span></code> or an equivalent like <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code>\nhas not run. The view decorator <code class=\"docutils literal notranslate\"><span class=\"pre\">requires_csrf_token</span></code> can be used to\nensure the template tag does work. This decorator works similarly to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code>, but never rejects an incoming request.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.csrf</span> <span class=\"kn\">import</span> <span class=\"n\">requires_csrf_token</span>\n\n\n<span class=\"nd\">@requires_csrf_token</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a_template.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.csrf.ensure_csrf_cookie\">\n<code class=\"sig-name descname\"><span class=\"pre\">ensure_csrf_cookie</span></code>(<em><span class=\"n\"><span class=\"pre\">view</span></span></em>)<a class=\"headerlink\" href=\"#django.views.decorators.csrf.ensure_csrf_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator forces a view to send the CSRF cookie.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-settings\">\n<span id=\"settings\"></span><h2>Settings<a class=\"headerlink\" href=\"#settings\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A number of settings can be used to control Django\u2019s CSRF behavior:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_AGE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_DOMAIN\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_DOMAIN</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_NAME</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_PATH</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_SAMESITE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_SAMESITE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_COOKIE_SECURE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_SECURE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_FAILURE_VIEW\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_FAILURE_VIEW</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_HEADER_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_HEADER_NAME</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_TRUSTED_ORIGINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_TRUSTED_ORIGINS</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_USE_SESSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code></a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-frequently-asked-questions\">\n<span id=\"frequently-asked-questions\"></span><h2>Frequently Asked Questions<a class=\"headerlink\" href=\"#frequently-asked-questions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-is-posting-an-arbitrary-csrf-token-pair-cookie-and-post-data-a-vulnerability\">\n<span id=\"is-posting-an-arbitrary-csrf-token-pair-cookie-and-post-data-a-vulnerability\"></span><h3>Is posting an arbitrary CSRF token pair (cookie and POST data) a vulnerability?<a class=\"headerlink\" href=\"#is-posting-an-arbitrary-csrf-token-pair-cookie-and-post-data-a-vulnerability\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>No, this is by design. Without a man-in-the-middle attack, there is no way for\nan attacker to send a CSRF token cookie to a victim\u2019s browser, so a successful\nattack would need to obtain the victim\u2019s browser\u2019s cookie via XSS or similar,\nin which case an attacker usually doesn\u2019t need CSRF attacks.</p>\n<p>Some security audit tools flag this as a problem but as mentioned before, an\nattacker cannot steal a user\u2019s browser\u2019s CSRF cookie. \u201cStealing\u201d or modifying\n<em>your own</em> token using Firebug, Chrome dev tools, etc. isn\u2019t a vulnerability.</p>\n</div>\n<div class=\"section\" id=\"s-is-it-a-problem-that-django-s-csrf-protection-isn-t-linked-to-a-session-by-default\">\n<span id=\"is-it-a-problem-that-django-s-csrf-protection-isn-t-linked-to-a-session-by-default\"></span><h3>Is it a problem that Django\u2019s CSRF protection isn\u2019t linked to a session by default?<a class=\"headerlink\" href=\"#is-it-a-problem-that-django-s-csrf-protection-isn-t-linked-to-a-session-by-default\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>No, this is by design. Not linking CSRF protection to a session allows using\nthe protection on sites such as a <em>pastebin</em> that allow submissions from\nanonymous users which don\u2019t have a session.</p>\n<p>If you wish to store the CSRF token in the user\u2019s session, use the\n<a class=\"reference internal\" href=\"../settings/#std-setting-CSRF_USE_SESSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code></a> setting.</p>\n</div>\n<div class=\"section\" id=\"s-why-might-a-user-encounter-a-csrf-validation-failure-after-logging-in\">\n<span id=\"why-might-a-user-encounter-a-csrf-validation-failure-after-logging-in\"></span><h3>Why might a user encounter a CSRF validation failure after logging in?<a class=\"headerlink\" href=\"#why-might-a-user-encounter-a-csrf-validation-failure-after-logging-in\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For security reasons, CSRF tokens are rotated each time a user logs in. Any\npage with a form generated before a login will have an old, invalid CSRF token\nand need to be reloaded. This might happen if a user uses the back button after\na login or if they log in a different browser tab.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/databases", "Databases", "N", "next"], ["ref/contrib/syndication", "The syndication feed framework", "P", "previous"]], "sourcename": "ref/csrf.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Cross Site Request Forgery protection</a><ul>\n<li><a class=\"reference internal\" href=\"#how-it-works\">How it works</a></li>\n<li><a class=\"reference internal\" href=\"#limitations\">Limitations</a></li>\n<li><a class=\"reference internal\" href=\"#module-django.views.decorators.csrf\">Utilities</a></li>\n<li><a class=\"reference internal\" href=\"#settings\">Settings</a></li>\n<li><a class=\"reference internal\" href=\"#frequently-asked-questions\">Frequently Asked Questions</a><ul>\n<li><a class=\"reference internal\" href=\"#is-posting-an-arbitrary-csrf-token-pair-cookie-and-post-data-a-vulnerability\">Is posting an arbitrary CSRF token pair (cookie and POST data) a vulnerability?</a></li>\n<li><a class=\"reference internal\" href=\"#is-it-a-problem-that-django-s-csrf-protection-isn-t-linked-to-a-session-by-default\">Is it a problem that Django\u2019s CSRF protection isn\u2019t linked to a session by default?</a></li>\n<li><a class=\"reference internal\" href=\"#why-might-a-user-encounter-a-csrf-validation-failure-after-logging-in\">Why might a user encounter a CSRF validation failure after logging in?</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/csrf", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
