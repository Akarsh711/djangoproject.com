{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Templates"}], "prev": {"link": "../", "title": "Templates"}, "next": {"link": "../builtins/", "title": "Built-in template tags and filters"}, "title": "The Django template language", "meta": {}, "body": "<div class=\"section\" id=\"s-the-django-template-language\">\n<span id=\"the-django-template-language\"></span><h1>The Django template language<a class=\"headerlink\" href=\"#the-django-template-language\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document explains the language syntax of the Django template system. If\nyou\u2019re looking for a more technical perspective on how it works and how to\nextend it, see <a class=\"reference internal\" href=\"../api/\"><span class=\"doc\">The Django template language: for Python programmers</span></a>.</p>\n<p>Django\u2019s template language is designed to strike a balance between power and\nease. It\u2019s designed to feel comfortable to those used to working with HTML. If\nyou have any exposure to other text-based template languages, such as <a class=\"reference external\" href=\"https://www.smarty.net/\">Smarty</a>\nor <a class=\"reference external\" href=\"https://palletsprojects.com/p/jinja/\">Jinja2</a>, you should feel right at home with Django\u2019s templates.</p>\n<div class=\"admonition-philosophy admonition\">\n<p class=\"first admonition-title\">Philosophy</p>\n<p>If you have a background in programming, or if you\u2019re used to languages\nwhich mix programming code directly into HTML, you\u2019ll want to bear in\nmind that the Django template system is not simply Python embedded into\nHTML. This is by design: the template system is meant to express\npresentation, not program logic.</p>\n<p class=\"last\">The Django template system provides tags which function similarly to some\nprogramming constructs \u2013 an <a class=\"reference internal\" href=\"../builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag for boolean tests, a <a class=\"reference internal\" href=\"../builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">for</span></code></a>\ntag for looping, etc. \u2013 but these are not simply executed as the\ncorresponding Python code, and the template system will not execute\narbitrary Python expressions. Only the tags, filters and syntax listed below\nare supported by default (although you can add <a class=\"reference internal\" href=\"../../../howto/custom-template-tags/\"><span class=\"doc\">your own extensions</span></a> to the template language as needed).</p>\n</div>\n<div class=\"section\" id=\"s-templates\">\n<span id=\"templates\"></span><h2>Templates<a class=\"headerlink\" href=\"#templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A template is a text file. It can generate any text-based format (HTML, XML,\nCSV, etc.).</p>\n<p>A template contains <strong>variables</strong>, which get replaced with values when the\ntemplate is evaluated, and <strong>tags</strong>, which control the logic of the template.</p>\n<p>Below is a minimal template that illustrates a few basics. Each element will be\nexplained later in this document.</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base_generic.html&quot;</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">section.title</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">section.title</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">story</span> <span class=\"k\">in</span> <span class=\"nv\">story_list</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">story.get_absolute_url</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">story.headline</span><span class=\"o\">|</span><span class=\"nf\">upper</span> <span class=\"cp\">}}</span>\n  <span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">story.tease</span><span class=\"o\">|</span><span class=\"nf\">truncatewords</span><span class=\"s2\">:&quot;100&quot;</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<div class=\"admonition-philosophy admonition\">\n<p class=\"first admonition-title\">Philosophy</p>\n<p class=\"last\">Why use a text-based template instead of an XML-based one (like Zope\u2019s\nTAL)? We wanted Django\u2019s template language to be usable for more than\njust XML/HTML templates. You can use the template language for any\ntext-based format such as emails, JavaScript and CSV.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-variables\">\n<span id=\"s-template-variables\"></span><span id=\"variables\"></span><span id=\"template-variables\"></span><h2>Variables<a class=\"headerlink\" href=\"#variables\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Variables look like this: <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">variable</span> <span class=\"pre\">}}</span></code>. When the template engine\nencounters a variable, it evaluates that variable and replaces it with the\nresult. Variable names consist of any combination of alphanumeric characters\nand the underscore (<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_&quot;</span></code>) but may not start with an underscore, and may not\nbe a number. The dot (<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;.&quot;</span></code>) also appears in variable sections, although that\nhas a special meaning, as indicated below. Importantly, <em>you cannot have spaces\nor punctuation characters in variable names.</em></p>\n<p>Use a dot (<code class=\"docutils literal notranslate\"><span class=\"pre\">.</span></code>) to access attributes of a variable.</p>\n<div class=\"admonition-behind-the-scenes admonition\">\n<p class=\"first admonition-title\">Behind the scenes</p>\n<p>Technically, when the template system encounters a dot, it tries the\nfollowing lookups, in this order:</p>\n<ul class=\"simple\">\n<li>Dictionary lookup</li>\n<li>Attribute or method lookup</li>\n<li>Numeric index lookup</li>\n</ul>\n<p>If the resulting value is callable, it is called with no arguments. The\nresult of the call becomes the template value.</p>\n<p>This lookup order can cause some unexpected behavior with objects that\noverride dictionary lookup. For example, consider the following code snippet\nthat attempts to loop over a <code class=\"docutils literal notranslate\"><span class=\"pre\">collections.defaultdict</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">k</span><span class=\"o\">,</span> <span class=\"nv\">v</span> <span class=\"k\">in</span> <span class=\"nv\">defaultdict.items</span> <span class=\"cp\">%}</span>\n    Do something with k and v here...\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p class=\"last\">Because dictionary lookup happens first, that behavior kicks in and provides\na default value instead of using the intended <code class=\"docutils literal notranslate\"><span class=\"pre\">.items()</span></code> method. In this\ncase, consider converting to a dictionary first.</p>\n</div>\n<p>In the above example, <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">section.title</span> <span class=\"pre\">}}</span></code> will be replaced with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code> attribute of the <code class=\"docutils literal notranslate\"><span class=\"pre\">section</span></code> object.</p>\n<p>If you use a variable that doesn\u2019t exist, the template system will insert the\nvalue of the <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> option, which is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code> (the empty\nstring) by default.</p>\n<p>Note that \u201cbar\u201d in a template expression like <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">foo.bar</span> <span class=\"pre\">}}</span></code> will be\ninterpreted as a literal string and not using the value of the variable \u201cbar\u201d,\nif one exists in the template context.</p>\n<p>Variable attributes that begin with an underscore may not be accessed as\nthey\u2019re generally considered private.</p>\n</div>\n<div class=\"section\" id=\"s-filters\">\n<span id=\"filters\"></span><h2>Filters<a class=\"headerlink\" href=\"#filters\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can modify variables for display by using <strong>filters</strong>.</p>\n<p>Filters look like this: <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">name|lower</span> <span class=\"pre\">}}</span></code>. This displays the value of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">name</span> <span class=\"pre\">}}</span></code> variable after being filtered through the <a class=\"reference internal\" href=\"../builtins/#std-templatefilter-lower\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">lower</span></code></a>\nfilter, which converts text to lowercase. Use a pipe (<code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>) to apply a filter.</p>\n<p>Filters can be \u201cchained.\u201d The output of one filter is applied to the next.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">text|escape|linebreaks</span> <span class=\"pre\">}}</span></code> is a common idiom for escaping text contents,\nthen converting line breaks to <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;p&gt;</span></code> tags.</p>\n<p>Some filters take arguments. A filter argument looks like this: <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span>\n<span class=\"pre\">bio|truncatewords:30</span> <span class=\"pre\">}}</span></code>. This will display the first 30 words of the <code class=\"docutils literal notranslate\"><span class=\"pre\">bio</span></code>\nvariable.</p>\n<p>Filter arguments that contain spaces must be quoted; for example, to join a\nlist with commas and spaces you\u2019d use <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">list|join:&quot;,</span> <span class=\"pre\">&quot;</span> <span class=\"pre\">}}</span></code>.</p>\n<p>Django provides about sixty built-in template filters. You can read all about\nthem in the <a class=\"reference internal\" href=\"../builtins/#ref-templates-builtins-filters\"><span class=\"std std-ref\">built-in filter reference</span></a>.\nTo give you a taste of what\u2019s available, here are some of the more commonly\nused template filters:</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../builtins/#std-templatefilter-default\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">default</span></code></a></dt><dd><p>If a variable is false or empty, use given default. Otherwise, use the\nvalue of the variable. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;nothing&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> isn\u2019t provided or is empty, the above will display\n\u201c<code class=\"docutils literal notranslate\"><span class=\"pre\">nothing</span></code>\u201d.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../builtins/#std-templatefilter-length\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">length</span></code></a></dt><dd><p>Returns the length of the value. This works for both strings and lists.\nFor example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c',</span> <span class=\"pre\">'d']</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">4</span></code>.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../builtins/#std-templatefilter-filesizeformat\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">filesizeformat</span></code></a></dt><dd><p>Formats the value like a \u201chuman-readable\u201d file size (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">'13</span> <span class=\"pre\">KB'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'4.1</span> <span class=\"pre\">MB'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'102</span> <span class=\"pre\">bytes'</span></code>, etc.). For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">filesizeformat</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is 123456789, the output would be <code class=\"docutils literal notranslate\"><span class=\"pre\">117.7</span> <span class=\"pre\">MB</span></code>.</p>\n</dd>\n</dl>\n<p>Again, these are just a few examples; see the <a class=\"reference internal\" href=\"../builtins/#ref-templates-builtins-filters\"><span class=\"std std-ref\">built-in filter reference</span></a> for the complete list.</p>\n<p>You can also create your own custom template filters; see\n<a class=\"reference internal\" href=\"../../../howto/custom-template-tags/\"><span class=\"doc\">How to create custom template tags and filters</span></a>.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Django\u2019s admin interface can include a complete reference of all template\ntags and filters available for a given site. See\n<a class=\"reference internal\" href=\"../../contrib/admin/admindocs/\"><span class=\"doc\">The Django admin documentation generator</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-tags\">\n<span id=\"tags\"></span><h2>Tags<a class=\"headerlink\" href=\"#tags\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Tags look like this: <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">tag</span> <span class=\"pre\">%}</span></code>. Tags are more complex than variables: Some\ncreate text in the output, some control flow by performing loops or logic, and\nsome load external information into the template to be used by later variables.</p>\n<p>Some tags require beginning and ending tags (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">tag</span> <span class=\"pre\">%}</span> <span class=\"pre\">...</span> <span class=\"pre\">tag</span> <span class=\"pre\">contents</span>\n<span class=\"pre\">...</span> <span class=\"pre\">{%</span> <span class=\"pre\">endtag</span> <span class=\"pre\">%}</span></code>).</p>\n<p>Django ships with about two dozen built-in template tags. You can read all about\nthem in the <a class=\"reference internal\" href=\"../builtins/#ref-templates-builtins-tags\"><span class=\"std std-ref\">built-in tag reference</span></a>. To give\nyou a taste of what\u2019s available, here are some of the more commonly used\ntags:</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">for</span></code></a></dt><dd><p>Loop over each item in an array.  For example, to display a list of athletes\nprovided in <code class=\"docutils literal notranslate\"><span class=\"pre\">athlete_list</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">athlete</span> <span class=\"k\">in</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">athlete.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</dd>\n<dt><a class=\"reference internal\" href=\"../builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">elif</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">else</span></code></dt><dd><p>Evaluates a variable, and if that variable is \u201ctrue\u201d the contents of the\nblock are displayed:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    Number of athletes: <span class=\"cp\">{{</span> <span class=\"nv\">athlete_list</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">elif</span> <span class=\"nv\">athlete_in_locker_room_list</span> <span class=\"cp\">%}</span>\n    Athletes should be out of the locker room soon!\n<span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span>\n    No athletes.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>In the above, if <code class=\"docutils literal notranslate\"><span class=\"pre\">athlete_list</span></code> is not empty, the number of athletes\nwill be displayed by the <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">athlete_list|length</span> <span class=\"pre\">}}</span></code> variable. Otherwise,\nif <code class=\"docutils literal notranslate\"><span class=\"pre\">athlete_in_locker_room_list</span></code> is not empty, the message \u201cAthletes\nshould be out\u2026\u201d will be displayed. If both lists are empty,\n\u201cNo athletes.\u201d will be displayed.</p>\n<p>You can also use filters and various operators in the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"o\">&gt;</span> <span class=\"m\">1</span> <span class=\"cp\">%}</span>\n   Team: <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">athlete</span> <span class=\"k\">in</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span> ... <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span>\n   Athlete: <span class=\"cp\">{{</span> <span class=\"nv\">athlete_list.0.name</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>While the above example works, be aware that most template filters return\nstrings, so mathematical comparisons using filters will generally not work\nas you expect. <a class=\"reference internal\" href=\"../builtins/#std-templatefilter-length\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">length</span></code></a> is an exception.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">block</span></code></a> and <a class=\"reference internal\" href=\"../builtins/#std-templatetag-extends\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">extends</span></code></a></dt><dd>Set up <a class=\"reference internal\" href=\"#id1\">template inheritance</a> (see below), a powerful way\nof cutting down on \u201cboilerplate\u201d in templates.</dd>\n</dl>\n<p>Again, the above is only a selection of the whole list; see the <a class=\"reference internal\" href=\"../builtins/#ref-templates-builtins-tags\"><span class=\"std std-ref\">built-in\ntag reference</span></a> for the complete list.</p>\n<p>You can also create your own custom template tags; see\n<a class=\"reference internal\" href=\"../../../howto/custom-template-tags/\"><span class=\"doc\">How to create custom template tags and filters</span></a>.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Django\u2019s admin interface can include a complete reference of all template\ntags and filters available for a given site. See\n<a class=\"reference internal\" href=\"../../contrib/admin/admindocs/\"><span class=\"doc\">The Django admin documentation generator</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-comments\">\n<span id=\"s-template-comments\"></span><span id=\"comments\"></span><span id=\"template-comments\"></span><h2>Comments<a class=\"headerlink\" href=\"#comments\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To comment-out part of a line in a template, use the comment syntax: <code class=\"docutils literal notranslate\"><span class=\"pre\">{#</span> <span class=\"pre\">#}</span></code>.</p>\n<p>For example, this template would render as <code class=\"docutils literal notranslate\"><span class=\"pre\">'hello'</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c\">{# greeting #}</span>hello\n</pre></div>\n</div>\n<p>A comment can contain any template code, invalid or not. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c\">{# {% if foo %}bar{% else %} #}</span>\n</pre></div>\n</div>\n<p>This syntax can only be used for single-line comments (no newlines are permitted\nbetween the <code class=\"docutils literal notranslate\"><span class=\"pre\">{#</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">#}</span></code> delimiters). If you need to comment out a\nmultiline portion of the template, see the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-comment\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">comment</span></code></a> tag.</p>\n</div>\n<div class=\"section\" id=\"s-template-inheritance\">\n<span id=\"s-id1\"></span><span id=\"template-inheritance\"></span><span id=\"id1\"></span><h2>Template inheritance<a class=\"headerlink\" href=\"#template-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The most powerful \u2013 and thus the most complex \u2013 part of Django\u2019s template\nengine is template inheritance. Template inheritance allows you to build a base\n\u201cskeleton\u201d template that contains all the common elements of your site and\ndefines <strong>blocks</strong> that child templates can override.</p>\n<p>Let\u2019s look at template inheritance by starting with an example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&quot;en&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;style.css&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>My amazing site<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;sidebar&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">sidebar</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/&quot;</span><span class=\"p\">&gt;</span>Home<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/blog/&quot;</span><span class=\"p\">&gt;</span>Blog<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;content&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This template, which we\u2019ll call <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code>, defines an HTML skeleton\ndocument that you might use for a two-column page. It\u2019s the job of \u201cchild\u201d\ntemplates to fill the empty blocks with content.</p>\n<p>In this example, the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">block</span></code></a> tag defines three blocks that child\ntemplates can fill in. All the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">block</span></code></a> tag does is to tell the template\nengine that a child template may override those portions of the template.</p>\n<p>A child template might look like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base.html&quot;</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>My amazing blog<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">entry</span> <span class=\"k\">in</span> <span class=\"nv\">blog_entries</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">entry.title</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">entry.body</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../builtins/#std-templatetag-extends\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">extends</span></code></a> tag is the key here. It tells the template engine that\nthis template \u201cextends\u201d another template. When the template system evaluates\nthis template, first it locates the parent \u2013 in this case, \u201cbase.html\u201d.</p>\n<p>At that point, the template engine will notice the three <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">block</span></code></a> tags\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code> and replace those blocks with the contents of the child\ntemplate. Depending on the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">blog_entries</span></code>, the output might look\nlike:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span> <span class=\"na\">lang</span><span class=\"o\">=</span><span class=\"s\">&quot;en&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;style.css&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>My amazing blog<span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;sidebar&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/&quot;</span><span class=\"p\">&gt;</span>Home<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/blog/&quot;</span><span class=\"p\">&gt;</span>Blog<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;content&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>Entry one<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>This is my first entry.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n        <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>Entry two<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>This is my second entry.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Note that since the child template didn\u2019t define the <code class=\"docutils literal notranslate\"><span class=\"pre\">sidebar</span></code> block, the\nvalue from the parent template is used instead. Content within a <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code>\ntag in a parent template is always used as a fallback.</p>\n<p>You can use as many levels of inheritance as needed. One common way of using\ninheritance is the following three-level approach:</p>\n<ul class=\"simple\">\n<li>Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code> template that holds the main look-and-feel of your\nsite.</li>\n<li>Create a <code class=\"docutils literal notranslate\"><span class=\"pre\">base_SECTIONNAME.html</span></code> template for each \u201csection\u201d of your\nsite. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">base_news.html</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">base_sports.html</span></code>. These\ntemplates all extend <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code> and include section-specific\nstyles/design.</li>\n<li>Create individual templates for each type of page, such as a news\narticle or blog entry. These templates extend the appropriate section\ntemplate.</li>\n</ul>\n<p>This approach maximizes code reuse and helps to add items to shared content\nareas, such as section-wide navigation.</p>\n<p>Here are some tips for working with inheritance:</p>\n<ul>\n<li><p class=\"first\">If you use <a class=\"reference internal\" href=\"../builtins/#std-templatetag-extends\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">%}</span></code></a> in a template, it must be the first template\ntag in that template. Template inheritance won\u2019t work, otherwise.</p>\n</li>\n<li><p class=\"first\">More <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code></a> tags in your base templates are better. Remember,\nchild templates don\u2019t have to define all parent blocks, so you can fill\nin reasonable defaults in a number of blocks, then only define the ones\nyou need later. It\u2019s better to have more hooks than fewer hooks.</p>\n</li>\n<li><p class=\"first\">If you find yourself duplicating content in a number of templates, it\nprobably means you should move that content to a <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code> in a\nparent template.</p>\n</li>\n<li><p class=\"first\">If you need to get the content of the block from the parent template,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">block.super</span> <span class=\"pre\">}}</span></code> variable will do the trick. This is useful\nif you want to add to the contents of a parent block instead of\ncompletely overriding it. Data inserted using <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">block.super</span> <span class=\"pre\">}}</span></code> will\nnot be automatically escaped (see the <a class=\"reference external\" href=\"#automatic-html-escaping\">next section</a>), since it was\nalready escaped, if necessary, in the parent template.</p>\n</li>\n<li><p class=\"first\">By using the same template name as you are inheriting from,\n<a class=\"reference internal\" href=\"../builtins/#std-templatetag-extends\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">%}</span></code></a> can be used to inherit a template at the same\ntime as overriding it. Combined with <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">block.super</span> <span class=\"pre\">}}</span></code>, this can be a\npowerful way to make small customizations. See\n<a class=\"reference internal\" href=\"../../../howto/overriding-templates/#extending-an-overridden-template\"><span class=\"std std-ref\">Extending an overridden template</span></a> in the <em>Overriding templates</em> How-to\nfor a full example.</p>\n</li>\n<li><p class=\"first\">Variables created outside of a <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code></a> using the template\ntag <code class=\"docutils literal notranslate\"><span class=\"pre\">as</span></code> syntax can\u2019t be used inside the block. For example, this template\ndoesn\u2019t render anything:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">translate</span> <span class=\"s2\">&quot;Title&quot;</span> <span class=\"k\">as</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">title</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">For extra readability, you can optionally give a <em>name</em> to your\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endblock</span> <span class=\"pre\">%}</span></code> tag. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n...\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>In larger templates, this technique helps you see which <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code>\ntags are being closed.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code></a> tags are evaluated first. That\u2019s why the content\nof a block is always overridden, regardless of the truthiness of surrounding\ntags. For example, this template will <em>always</em> override the content of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code> block:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">change_title</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>Hello!<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>Finally, note that you can\u2019t define multiple <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">block</span></code></a> tags with the same\nname in the same template. This limitation exists because a block tag works in\n\u201cboth\u201d directions. That is, a block tag doesn\u2019t just provide a hole to fill \u2013\nit also defines the content that fills the hole in the <em>parent</em>. If there were\ntwo similarly-named <a class=\"reference internal\" href=\"../builtins/#std-templatetag-block\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">block</span></code></a> tags in a template, that template\u2019s parent\nwouldn\u2019t know which one of the blocks\u2019 content to use.</p>\n</div>\n<div class=\"section\" id=\"s-automatic-html-escaping\">\n<span id=\"s-id2\"></span><span id=\"automatic-html-escaping\"></span><span id=\"id2\"></span><h2>Automatic HTML escaping<a class=\"headerlink\" href=\"#automatic-html-escaping\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When generating HTML from templates, there\u2019s always a risk that a variable will\ninclude characters that affect the resulting HTML. For example, consider this\ntemplate fragment:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Hello, <span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>At first, this seems like a harmless way to display a user\u2019s name, but consider\nwhat would happen if the user entered their name as this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>With this name value, the template would be rendered as:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Hello, <span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"nx\">alert</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello&#39;</span><span class=\"p\">)&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>\u2026which means the browser would pop-up a JavaScript alert box!</p>\n<p>Similarly, what if the name contained a <code class=\"docutils literal notranslate\"><span class=\"pre\">'&lt;'</span></code> symbol, like this?</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">b</span><span class=\"p\">&gt;</span>username\n</pre></div>\n</div>\n<p>That would result in a rendered template like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Hello, <span class=\"p\">&lt;</span><span class=\"nt\">b</span><span class=\"p\">&gt;</span>username\n</pre></div>\n</div>\n<p>\u2026which, in turn, would result in the remainder of the web page being in bold!</p>\n<p>Clearly, user-submitted data shouldn\u2019t be trusted blindly and inserted directly\ninto your web pages, because a malicious user could use this kind of hole to\ndo potentially bad things. This type of security exploit is called a\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Cross-site_scripting\">Cross Site Scripting</a> (XSS) attack.</p>\n<p>To avoid this problem, you have two options:</p>\n<ul class=\"simple\">\n<li>One, you can make sure to run each untrusted variable through the\n<a class=\"reference internal\" href=\"../builtins/#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter (documented below), which converts potentially\nharmful HTML characters to unharmful ones. This was the default solution\nin Django for its first few years, but the problem is that it puts the\nonus on <em>you</em>, the developer / template author, to ensure you\u2019re escaping\neverything. It\u2019s easy to forget to escape data.</li>\n<li>Two, you can take advantage of Django\u2019s automatic HTML escaping. The\nremainder of this section describes how auto-escaping works.</li>\n</ul>\n<p>By default in Django, every template automatically escapes the output\nof every variable tag. Specifically, these five characters are\nescaped:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;lt;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;gt;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code> (single quote) is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;#x27;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span></code> (double quote) is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;quot;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;amp;</span></code></li>\n</ul>\n<p>Again, we stress that this behavior is on by default. If you\u2019re using Django\u2019s\ntemplate system, you\u2019re protected.</p>\n<div class=\"section\" id=\"s-how-to-turn-it-off\">\n<span id=\"how-to-turn-it-off\"></span><h3>How to turn it off<a class=\"headerlink\" href=\"#how-to-turn-it-off\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you don\u2019t want data to be auto-escaped, on a per-site, per-template level or\nper-variable level, you can turn it off in several ways.</p>\n<p>Why would you want to turn it off? Because sometimes, template variables\ncontain data that you <em>intend</em> to be rendered as raw HTML, in which case you\ndon\u2019t want their contents to be escaped. For example, you might store a blob of\nHTML in your database and want to embed that directly into your template. Or,\nyou might be using Django\u2019s template system to produce text that is <em>not</em> HTML\n\u2013 like an email message, for instance.</p>\n<div class=\"section\" id=\"s-for-individual-variables\">\n<span id=\"for-individual-variables\"></span><h4>For individual variables<a class=\"headerlink\" href=\"#for-individual-variables\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To disable auto-escaping for an individual variable, use the <a class=\"reference internal\" href=\"../builtins/#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a>\nfilter:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>This will be escaped: <span class=\"cp\">{{</span> <span class=\"nv\">data</span> <span class=\"cp\">}}</span>\nThis will not be escaped: <span class=\"cp\">{{</span> <span class=\"nv\">data</span><span class=\"o\">|</span><span class=\"nf\">safe</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Think of <em>safe</em> as shorthand for <em>safe from further escaping</em> or <em>can be\nsafely interpreted as HTML</em>. In this example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> contains <code class=\"docutils literal notranslate\"><span class=\"pre\">'&lt;b&gt;'</span></code>,\nthe output will be:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>This will be escaped: <span class=\"ni\">&amp;lt;</span>b<span class=\"ni\">&amp;gt;</span>\nThis will not be escaped: <span class=\"p\">&lt;</span><span class=\"nt\">b</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-for-template-blocks\">\n<span id=\"for-template-blocks\"></span><h4>For template blocks<a class=\"headerlink\" href=\"#for-template-blocks\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To control auto-escaping for a template, wrap the template (or a particular\nsection of the template) in the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> tag, like so:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    Hello <span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../builtins/#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> tag takes either <code class=\"docutils literal notranslate\"><span class=\"pre\">on</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">off</span></code> as its argument. At\ntimes, you might want to force auto-escaping when it would otherwise be\ndisabled. Here is an example template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Auto-escaping is on by default. Hello <span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    This will not be auto-escaped: <span class=\"cp\">{{</span> <span class=\"nv\">data</span> <span class=\"cp\">}}</span>.\n\n    Nor this: <span class=\"cp\">{{</span> <span class=\"nv\">other_data</span> <span class=\"cp\">}}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">on</span> <span class=\"cp\">%}</span>\n        Auto-escaping applies again: <span class=\"cp\">{{</span> <span class=\"nv\">name</span> <span class=\"cp\">}}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The auto-escaping tag passes its effect onto templates that extend the\ncurrent one as well as templates included via the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag,\njust like all block tags. For example:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">child.html</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base.html&quot;</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>This <span class=\"ni\">&amp;amp;</span> that<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">greeting</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<p>Because auto-escaping is turned off in the base template, it will also be\nturned off in the child template, resulting in the following rendered\nHTML when the <code class=\"docutils literal notranslate\"><span class=\"pre\">greeting</span></code> variable contains the string <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;b&gt;Hello!&lt;/b&gt;</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>This <span class=\"ni\">&amp;amp;</span> that<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">b</span><span class=\"p\">&gt;</span>Hello!<span class=\"p\">&lt;/</span><span class=\"nt\">b</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-notes\">\n<span id=\"notes\"></span><h3>Notes<a class=\"headerlink\" href=\"#notes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Generally, template authors don\u2019t need to worry about auto-escaping very much.\nDevelopers on the Python side (people writing views and custom filters) need to\nthink about the cases in which data shouldn\u2019t be escaped, and mark data\nappropriately, so things Just Work in the template.</p>\n<p>If you\u2019re creating a template that might be used in situations where you\u2019re\nnot sure whether auto-escaping is enabled, then add an <a class=\"reference internal\" href=\"../builtins/#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter\nto any variable that needs escaping. When auto-escaping is on, there\u2019s no\ndanger of the <a class=\"reference internal\" href=\"../builtins/#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter <em>double-escaping</em> data \u2013 the\n<a class=\"reference internal\" href=\"../builtins/#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter does not affect auto-escaped variables.</p>\n</div>\n<div class=\"section\" id=\"s-string-literals-and-automatic-escaping\">\n<span id=\"s-id3\"></span><span id=\"string-literals-and-automatic-escaping\"></span><span id=\"id3\"></span><h3>String literals and automatic escaping<a class=\"headerlink\" href=\"#string-literals-and-automatic-escaping\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As we mentioned earlier, filter arguments can be strings:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">data</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;This is a string literal.&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>All string literals are inserted <strong>without</strong> any automatic escaping into the\ntemplate \u2013 they act as if they were all passed through the <a class=\"reference internal\" href=\"../builtins/#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a>\nfilter. The reasoning behind this is that the template author is in control of\nwhat goes into the string literal, so they can make sure the text is correctly\nescaped when the template is written.</p>\n<p>This means you would write :</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">data</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;3 &amp;lt; 2&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>\u2026rather than:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">data</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;3 &lt; 2&quot;</span> <span class=\"cp\">}}</span>  <span class=\"c\">{# Bad! Don&#39;t do this. #}</span>\n</pre></div>\n</div>\n<p>This doesn\u2019t affect what happens to data coming from the variable itself.\nThe variable\u2019s contents are still automatically escaped, if necessary, because\nthey\u2019re beyond the control of the template author.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-accessing-method-calls\">\n<span id=\"s-template-accessing-methods\"></span><span id=\"accessing-method-calls\"></span><span id=\"template-accessing-methods\"></span><h2>Accessing method calls<a class=\"headerlink\" href=\"#accessing-method-calls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Most method calls attached to objects are also available from within templates.\nThis means that templates have access to much more than just class attributes\n(like field names) and variables passed in from views. For example, the Django\nORM provides the <a class=\"reference internal\" href=\"../../../topics/db/queries/#topics-db-queries-related\"><span class=\"std std-ref\">\u201centry_set\u201d</span></a> syntax for\nfinding a collection of objects related on a foreign key. Therefore, given\na model called \u201ccomment\u201d with a foreign key relationship to a model called\n\u201ctask\u201d you can loop through all comments attached to a given task like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">comment</span> <span class=\"k\">in</span> <span class=\"nv\">task.comment_set.all</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">comment</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Similarly, <a class=\"reference internal\" href=\"../../models/querysets/\"><span class=\"doc\">QuerySets</span></a> provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> method\nto count the number of objects they contain. Therefore, you can obtain a count\nof all comments related to the current task with:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">task.comment_set.all.count</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>You can also access methods you\u2019ve explicitly defined on your own models:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Task</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;bar&quot;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">template.html</span></code></span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">task.foo</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n<p>Because Django intentionally limits the amount of logic processing available\nin the template language, it is not possible to pass arguments to method calls\naccessed from within templates. Data should be calculated in views, then passed\nto templates for display.</p>\n</div>\n<div class=\"section\" id=\"s-custom-tag-and-filter-libraries\">\n<span id=\"s-loading-custom-template-libraries\"></span><span id=\"custom-tag-and-filter-libraries\"></span><span id=\"loading-custom-template-libraries\"></span><h2>Custom tag and filter libraries<a class=\"headerlink\" href=\"#custom-tag-and-filter-libraries\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Certain applications provide custom tag and filter libraries. To access them in\na template, ensure the application is in <a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> (we\u2019d add\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.humanize'</span></code> for this example), and then use the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">load</span></code></a>\ntag in a template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">humanize</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{{</span> <span class=\"m\">45000</span><span class=\"o\">|</span><span class=\"nf\">intcomma</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>In the above, the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">load</span></code></a> tag loads the <code class=\"docutils literal notranslate\"><span class=\"pre\">humanize</span></code> tag library, which then\nmakes the <code class=\"docutils literal notranslate\"><span class=\"pre\">intcomma</span></code> filter available for use. If you\u2019ve enabled\n<a class=\"reference internal\" href=\"../../contrib/admin/admindocs/#module-django.contrib.admindocs\" title=\"django.contrib.admindocs: Django's admin documentation generator.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs</span></code></a>, you can consult the documentation area in your\nadmin to find the list of custom libraries in your installation.</p>\n<p>The <a class=\"reference internal\" href=\"../builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">load</span></code></a> tag can take multiple library names, separated by spaces.\nExample:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">humanize</span> <span class=\"nv\">i18n</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../../howto/custom-template-tags/\"><span class=\"doc\">How to create custom template tags and filters</span></a> for information on writing your own custom\ntemplate libraries.</p>\n<div class=\"section\" id=\"s-custom-libraries-and-template-inheritance\">\n<span id=\"custom-libraries-and-template-inheritance\"></span><h3>Custom libraries and template inheritance<a class=\"headerlink\" href=\"#custom-libraries-and-template-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you load a custom tag or filter library, the tags/filters are only made\navailable to the current template \u2013 not any parent or child templates along\nthe template-inheritance path.</p>\n<p>For example, if a template <code class=\"docutils literal notranslate\"><span class=\"pre\">foo.html</span></code> has <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">humanize</span> <span class=\"pre\">%}</span></code>, a child\ntemplate (e.g., one that has <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">&quot;foo.html&quot;</span> <span class=\"pre\">%}</span></code>) will <em>not</em> have\naccess to the humanize template tags and filters. The child template is\nresponsible for its own <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">humanize</span> <span class=\"pre\">%}</span></code>.</p>\n<p>This is a feature for the sake of maintainability and sanity.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"../\"><span class=\"doc\">The Templates Reference</span></a></dt><dd>Covers built-in tags, built-in filters, using an alternative template\nlanguage, and more.</dd>\n</dl>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/templates/builtins", "Built-in template tags and filters", "N", "next"], ["ref/templates/index", "Templates", "P", "previous"]], "sourcename": "ref/templates/language.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">The Django template language</a><ul>\n<li><a class=\"reference internal\" href=\"#templates\">Templates</a></li>\n<li><a class=\"reference internal\" href=\"#variables\">Variables</a></li>\n<li><a class=\"reference internal\" href=\"#filters\">Filters</a></li>\n<li><a class=\"reference internal\" href=\"#tags\">Tags</a></li>\n<li><a class=\"reference internal\" href=\"#comments\">Comments</a></li>\n<li><a class=\"reference internal\" href=\"#template-inheritance\">Template inheritance</a></li>\n<li><a class=\"reference internal\" href=\"#automatic-html-escaping\">Automatic HTML escaping</a><ul>\n<li><a class=\"reference internal\" href=\"#how-to-turn-it-off\">How to turn it off</a><ul>\n<li><a class=\"reference internal\" href=\"#for-individual-variables\">For individual variables</a></li>\n<li><a class=\"reference internal\" href=\"#for-template-blocks\">For template blocks</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#notes\">Notes</a></li>\n<li><a class=\"reference internal\" href=\"#string-literals-and-automatic-escaping\">String literals and automatic escaping</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#accessing-method-calls\">Accessing method calls</a></li>\n<li><a class=\"reference internal\" href=\"#custom-tag-and-filter-libraries\">Custom tag and filter libraries</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-libraries-and-template-inheritance\">Custom libraries and template inheritance</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/templates/language", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}