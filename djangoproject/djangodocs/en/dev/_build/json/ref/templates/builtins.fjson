{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Templates"}], "prev": {"link": "../language/", "title": "The Django template language"}, "next": {"link": "../api/", "title": "The Django template language: for Python programmers"}, "title": "Built-in template tags and filters", "meta": {}, "body": "<div class=\"section\" id=\"s-built-in-template-tags-and-filters\">\n<span id=\"built-in-template-tags-and-filters\"></span><h1>Built-in template tags and filters<a class=\"headerlink\" href=\"#built-in-template-tags-and-filters\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document describes Django\u2019s built-in template tags and filters. It is\nrecommended that you use the <a class=\"reference internal\" href=\"../../contrib/admin/admindocs/\"><span class=\"doc\">automatic documentation</span></a>, if available, as this will also include\ndocumentation for any custom tags or filters installed.</p>\n<div class=\"section\" id=\"s-built-in-tag-reference\">\n<span id=\"s-ref-templates-builtins-tags\"></span><span id=\"built-in-tag-reference\"></span><span id=\"ref-templates-builtins-tags\"></span><h2>Built-in tag reference<a class=\"headerlink\" href=\"#built-in-tag-reference\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-autoescape\">\n<span id=\"s-std-templatetag-autoescape\"></span><span id=\"s-std:templatetag-autoescape\"></span><span id=\"autoescape\"></span><span id=\"std-templatetag-autoescape\"></span><span id=\"std:templatetag-autoescape\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code><a class=\"headerlink\" href=\"#autoescape\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Controls the current auto-escaping behavior. This tag takes either <code class=\"docutils literal notranslate\"><span class=\"pre\">on</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">off</span></code> as an argument and that determines whether auto-escaping is in effect\ninside the block. The block is closed with an <code class=\"docutils literal notranslate\"><span class=\"pre\">endautoescape</span></code> ending tag.</p>\n<p>Sample usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">on</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">body</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>When auto-escaping is in effect, all content derived from variables has HTML\nescaping applied before placing the result into the output (but after any\nfilters are applied). This is equivalent to manually applying the\n<a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter to each variable.</p>\n<p>The only exceptions are variables already marked as \u201csafe\u201d from escaping.\nVariables could be marked as \u201csafe\u201d by the code which populated the variable,\nby applying the <a class=\"reference internal\" href=\"#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a> or <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filters, or because it\u2019s\nthe result of a previous filter that marked the string as \u201csafe\u201d.</p>\n<p>Within the scope of disabled auto-escaping, chaining filters, including\n<a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a>, may cause unexpected (but documented) results such as the\nfollowing:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">my_list</span><span class=\"o\">|</span><span class=\"nf\">join</span><span class=\"s2\">:&quot;, &quot;</span><span class=\"o\">|</span><span class=\"nf\">escape</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The above code will output the joined elements of <code class=\"docutils literal notranslate\"><span class=\"pre\">my_list</span></code> unescaped. This\nis because the filter chaining sequence executes first <a class=\"reference internal\" href=\"#std-templatefilter-join\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">join</span></code></a> on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_list</span></code> (without applying escaping to each item since <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">off</span></code>), marking the result as safe. Subsequently, this safe result will be\nfed to <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter, which does not apply a second round of\nescaping.</p>\n<p>In order to properly escape every element in a sequence, use the\n<a class=\"reference internal\" href=\"#std-templatefilter-escapeseq\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escapeseq</span></code></a> filter:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">my_list</span><span class=\"o\">|</span><span class=\"nf\">escapeseq</span><span class=\"o\">|</span><span class=\"nf\">join</span><span class=\"s2\">:&quot;, &quot;</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-block\">\n<span id=\"s-std-templatetag-block\"></span><span id=\"s-std:templatetag-block\"></span><span id=\"block\"></span><span id=\"std-templatetag-block\"></span><span id=\"std:templatetag-block\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">block</span></code><a class=\"headerlink\" href=\"#block\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Defines a block that can be overridden by child templates. See\n<a class=\"reference internal\" href=\"../language/#template-inheritance\"><span class=\"std std-ref\">Template inheritance</span></a> for more information.</p>\n</div>\n<div class=\"section\" id=\"s-comment\">\n<span id=\"s-std-templatetag-comment\"></span><span id=\"s-std:templatetag-comment\"></span><span id=\"comment\"></span><span id=\"std-templatetag-comment\"></span><span id=\"std:templatetag-comment\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">comment</span></code><a class=\"headerlink\" href=\"#comment\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Ignores everything between <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code>.\nAn optional note may be inserted in the first tag. For example, this is\nuseful when commenting out code for documenting why the code was disabled.</p>\n<p>Sample usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Rendered text with <span class=\"cp\">{{</span> <span class=\"nv\">pub_date</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;c&quot;</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">comment</span> <span class=\"s2\">&quot;Optional note&quot;</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Commented out text with <span class=\"cp\">{{</span> <span class=\"nv\">create_date</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;c&quot;</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endcomment</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">comment</span></code> tags cannot be nested.</p>\n</div>\n<div class=\"section\" id=\"s-csrf-token\">\n<span id=\"s-std-templatetag-csrf_token\"></span><span id=\"s-std:templatetag-csrf_token\"></span><span id=\"csrf-token\"></span><span id=\"std-templatetag-csrf_token\"></span><span id=\"std:templatetag-csrf_token\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code><a class=\"headerlink\" href=\"#csrf-token\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This tag is used for CSRF protection, as described in the documentation for\n<a class=\"reference internal\" href=\"../../csrf/\"><span class=\"doc\">Cross Site Request Forgeries</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-cycle\">\n<span id=\"s-std-templatetag-cycle\"></span><span id=\"s-std:templatetag-cycle\"></span><span id=\"cycle\"></span><span id=\"std-templatetag-cycle\"></span><span id=\"std:templatetag-cycle\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code><a class=\"headerlink\" href=\"#cycle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Produces one of its arguments each time this tag is encountered. The first\nargument is produced on the first encounter, the second argument on the second\nencounter, and so forth. Once all arguments are exhausted, the tag cycles to\nthe first argument and produces it again.</p>\n<p>This tag is particularly useful in a loop:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">o</span> <span class=\"k\">in</span> <span class=\"nv\">some_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tr</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"s1\">&#39;row2&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n        ...\n    <span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The first iteration produces HTML that refers to class <code class=\"docutils literal notranslate\"><span class=\"pre\">row1</span></code>, the second to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">row2</span></code>, the third to <code class=\"docutils literal notranslate\"><span class=\"pre\">row1</span></code> again, and so on for each iteration of the\nloop.</p>\n<p>You can use variables, too. For example, if you have two template variables,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rowvalue1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rowvalue2</span></code>, you can alternate between their values like\nthis:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">o</span> <span class=\"k\">in</span> <span class=\"nv\">some_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tr</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"nv\">rowvalue1</span> <span class=\"nv\">rowvalue2</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n        ...\n    <span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Variables included in the cycle will be escaped.  You can disable auto-escaping\nwith:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">o</span> <span class=\"k\">in</span> <span class=\"nv\">some_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tr</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}{%</span> <span class=\"k\">cycle</span> <span class=\"nv\">rowvalue1</span> <span class=\"nv\">rowvalue2</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n        ...\n    <span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can mix variables and strings:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">o</span> <span class=\"k\">in</span> <span class=\"nv\">some_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tr</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"nv\">rowvalue2</span> <span class=\"s1\">&#39;row3&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n        ...\n    <span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>In some cases you might want to refer to the current value of a cycle\nwithout advancing to the next value. To do this,\ngive the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> tag a name, using \u201cas\u201d, like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"s1\">&#39;row2&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>From then on, you can insert the current value of the cycle wherever you\u2019d like\nin your template by referencing the cycle name as a context variable. If you\nwant to move the cycle to the next value independently of the original\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code> tag, you can use another <code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code> tag and specify the name of the\nvariable. So, the following template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"s1\">&#39;row2&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>would output:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;row1&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;row1&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;row2&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">td</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;row2&quot;</span><span class=\"p\">&gt;</span>...<span class=\"p\">&lt;/</span><span class=\"nt\">td</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>You can use any number of values in a <code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code> tag, separated by spaces.\nValues enclosed in single quotes (<code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code>) or double quotes (<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span></code>) are treated\nas string literals, while values without quotes are treated as template\nvariables.</p>\n<p>By default, when you use the <code class=\"docutils literal notranslate\"><span class=\"pre\">as</span></code> keyword with the cycle tag, the\nusage of <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> that initiates the cycle will itself produce\nthe first value in the cycle. This could be a problem if you want to\nuse the value in a nested loop or an included template. If you only want\nto declare the cycle but not produce the first value, you can add a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">silent</span></code> keyword as the last keyword in the tag. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">obj</span> <span class=\"k\">in</span> <span class=\"nv\">some_list</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"s1\">&#39;row2&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">rowcolors</span> <span class=\"nv\">silent</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tr</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;subtemplate.html&quot;</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This will output a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;tr&gt;</span></code> elements with <code class=\"docutils literal notranslate\"><span class=\"pre\">class</span></code>\nalternating between <code class=\"docutils literal notranslate\"><span class=\"pre\">row1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">row2</span></code>. The subtemplate will have\naccess to <code class=\"docutils literal notranslate\"><span class=\"pre\">rowcolors</span></code> in its context and the value will match the class\nof the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;tr&gt;</span></code> that encloses it. If the <code class=\"docutils literal notranslate\"><span class=\"pre\">silent</span></code> keyword were to be\nomitted, <code class=\"docutils literal notranslate\"><span class=\"pre\">row1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">row2</span></code> would be emitted as normal text, outside the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;tr&gt;</span></code> element.</p>\n<p>When the silent keyword is used on a cycle definition, the silence\nautomatically applies to all subsequent uses of that specific cycle tag.\nThe following template would output <em>nothing</em>, even though the second\ncall to <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> doesn\u2019t specify <code class=\"docutils literal notranslate\"><span class=\"pre\">silent</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"s1\">&#39;row2&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">rowcolors</span> <span class=\"nv\">silent</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"nv\">rowcolors</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can use the <a class=\"reference internal\" href=\"#std-templatetag-resetcycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">resetcycle</span></code></a> tag to make a <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> tag restart\nfrom its first value when it\u2019s next encountered.</p>\n</div>\n<div class=\"section\" id=\"s-debug\">\n<span id=\"s-std-templatetag-debug\"></span><span id=\"s-std:templatetag-debug\"></span><span id=\"debug\"></span><span id=\"std-templatetag-debug\"></span><span id=\"std:templatetag-debug\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code><a class=\"headerlink\" href=\"#debug\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Outputs a whole load of debugging information, including the current context\nand imported modules. <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">debug</span> <span class=\"pre\">%}</span></code> outputs nothing when the <a class=\"reference internal\" href=\"../../settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a>\nsetting is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 2.2.27:</span> <p>In older versions, debugging information was displayed when the\n<a class=\"reference internal\" href=\"../../settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> setting was <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-extends\">\n<span id=\"s-std-templatetag-extends\"></span><span id=\"s-std:templatetag-extends\"></span><span id=\"extends\"></span><span id=\"std-templatetag-extends\"></span><span id=\"std:templatetag-extends\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">extends</span></code><a class=\"headerlink\" href=\"#extends\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Signals that this template extends a parent template.</p>\n<p>This tag can be used in two ways:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">&quot;base.html&quot;</span> <span class=\"pre\">%}</span></code> (with quotes) uses the literal value\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;base.html&quot;</span></code> as the name of the parent template to extend.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">variable</span> <span class=\"pre\">%}</span></code> uses the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">variable</span></code>. If the variable\nevaluates to a string, Django will use that string as the name of the\nparent template. If the variable evaluates to a <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> object,\nDjango will use that object as the parent template.</li>\n</ul>\n<p>See <a class=\"reference internal\" href=\"../language/#template-inheritance\"><span class=\"std std-ref\">Template inheritance</span></a> for more information.</p>\n<p>Normally the template name is relative to the template loader\u2019s root directory.\nA string argument may also be a relative path starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">./</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">../</span></code>.\nFor example, assume the following directory structure:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>dir1/\n    template.html\n    base2.html\n    my/\n        base3.html\nbase1.html\n</pre></div>\n</div>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">template.html</span></code>, the following paths would be valid:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;./base2.html&quot;</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;../base1.html&quot;</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;./my/base3.html&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-filter\">\n<span id=\"s-std-templatetag-filter\"></span><span id=\"s-std:templatetag-filter\"></span><span id=\"filter\"></span><span id=\"std-templatetag-filter\"></span><span id=\"std:templatetag-filter\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">filter</span></code><a class=\"headerlink\" href=\"#filter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Filters the contents of the block through one or more filters. Multiple\nfilters can be specified with pipes and filters can have arguments, just as\nin variable syntax.</p>\n<p>Note that the block includes <em>all</em> the text between the <code class=\"docutils literal notranslate\"><span class=\"pre\">filter</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">endfilter</span></code> tags.</p>\n<p>Sample usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">filter</span> <span class=\"nf\">force_escape</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"cp\">%}</span>\n    This text will be HTML-escaped, and will appear in all lowercase.\n<span class=\"cp\">{%</span> <span class=\"k\">endfilter</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> and <a class=\"reference internal\" href=\"#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a> filters are not acceptable\narguments. Instead, use the <a class=\"reference internal\" href=\"#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> tag to manage autoescaping\nfor blocks of template code.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-firstof\">\n<span id=\"s-std-templatetag-firstof\"></span><span id=\"s-std:templatetag-firstof\"></span><span id=\"firstof\"></span><span id=\"std-templatetag-firstof\"></span><span id=\"std:templatetag-firstof\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">firstof</span></code><a class=\"headerlink\" href=\"#firstof\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Outputs the first argument variable that is not \u201cfalse\u201d (i.e. exists, is not\nempty, is not a false boolean value, and is not a zero numeric value). Outputs\nnothing if all the passed variables are \u201cfalse\u201d.</p>\n<p>Sample usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">firstof</span> <span class=\"nv\">var1</span> <span class=\"nv\">var2</span> <span class=\"nv\">var3</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This is equivalent to:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">var1</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">var1</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">elif</span> <span class=\"nv\">var2</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">var2</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">elif</span> <span class=\"nv\">var3</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">var3</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can also use a literal string as a fallback value in case all\npassed variables are False:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">firstof</span> <span class=\"nv\">var1</span> <span class=\"nv\">var2</span> <span class=\"nv\">var3</span> <span class=\"s2\">&quot;fallback value&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This tag auto-escapes variable values. You can disable auto-escaping with:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">firstof</span> <span class=\"nv\">var1</span> <span class=\"nv\">var2</span> <span class=\"nv\">var3</span> <span class=\"s2\">&quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Or if only some variables should be escaped, you can use:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">firstof</span> <span class=\"nv\">var1</span> <span class=\"nv\">var2</span><span class=\"o\">|</span><span class=\"nf\">safe</span> <span class=\"nv\">var3</span> <span class=\"s2\">&quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;</span><span class=\"o\">|</span><span class=\"nf\">safe</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can use the syntax <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">firstof</span> <span class=\"pre\">var1</span> <span class=\"pre\">var2</span> <span class=\"pre\">var3</span> <span class=\"pre\">as</span> <span class=\"pre\">value</span> <span class=\"pre\">%}</span></code> to store the\noutput inside a variable.</p>\n</div>\n<div class=\"section\" id=\"s-for\">\n<span id=\"s-std-templatetag-for\"></span><span id=\"s-std:templatetag-for\"></span><span id=\"for\"></span><span id=\"std-templatetag-for\"></span><span id=\"std:templatetag-for\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code><a class=\"headerlink\" href=\"#for\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Loops over each item in an array, making the item available in a context\nvariable. For example, to display a list of athletes provided in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">athlete_list</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">athlete</span> <span class=\"k\">in</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">athlete.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>You can loop over a list in reverse by using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">obj</span> <span class=\"pre\">in</span> <span class=\"pre\">list</span> <span class=\"pre\">reversed</span> <span class=\"pre\">%}</span></code>.</p>\n<p>If you need to loop over a list of lists, you can unpack the values\nin each sublist into individual variables. For example, if your context\ncontains a list of (x,y) coordinates called <code class=\"docutils literal notranslate\"><span class=\"pre\">points</span></code>, you could use the\nfollowing to output the list of points:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">x</span><span class=\"o\">,</span> <span class=\"nv\">y</span> <span class=\"k\">in</span> <span class=\"nv\">points</span> <span class=\"cp\">%}</span>\n    There is a point at <span class=\"cp\">{{</span> <span class=\"nv\">x</span> <span class=\"cp\">}}</span>,<span class=\"cp\">{{</span> <span class=\"nv\">y</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This can also be useful if you need to access the items in a dictionary.\nFor example, if your context contained a dictionary <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>, the following\nwould display the keys and values of the dictionary:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">key</span><span class=\"o\">,</span> <span class=\"nv\">value</span> <span class=\"k\">in</span> <span class=\"nv\">data.items</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">key</span> <span class=\"cp\">}}</span>: <span class=\"cp\">{{</span> <span class=\"nv\">value</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Keep in mind that for the dot operator, dictionary key lookup takes precedence\nover method lookup. Therefore if the <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code> dictionary contains a key named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'items'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">data.items</span></code> will return <code class=\"docutils literal notranslate\"><span class=\"pre\">data['items']</span></code> instead of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data.items()</span></code>. Avoid adding keys that are named like dictionary methods if\nyou want to use those methods in a template (<code class=\"docutils literal notranslate\"><span class=\"pre\">items</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">keys</span></code>,\netc.). Read more about the lookup order of the dot operator in the\n<a class=\"reference internal\" href=\"../language/#template-variables\"><span class=\"std std-ref\">documentation of template variables</span></a>.</p>\n<p>The for loop sets a number of variables available within the loop:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"36%\" />\n<col width=\"64%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Variable</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.counter</span></code></td>\n<td>The current iteration of the loop (1-indexed)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.counter0</span></code></td>\n<td>The current iteration of the loop (0-indexed)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.revcounter</span></code></td>\n<td>The number of iterations from the end of the\nloop (1-indexed)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.revcounter0</span></code></td>\n<td>The number of iterations from the end of the\nloop (0-indexed)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.first</span></code></td>\n<td>True if this is the first time through the loop</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.last</span></code></td>\n<td>True if this is the last time through the loop</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">forloop.parentloop</span></code></td>\n<td>For nested loops, this is the loop surrounding\nthe current one</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"s-for-empty\">\n<span id=\"for-empty\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> \u2026 <code class=\"docutils literal notranslate\"><span class=\"pre\">empty</span></code><a class=\"headerlink\" href=\"#for-empty\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> tag can take an optional <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">empty</span> <span class=\"pre\">%}</span></code> clause whose text is\ndisplayed if the given array is empty or could not be found:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">athlete</span> <span class=\"k\">in</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">athlete.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">empty</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Sorry, no athletes in this list.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The above is equivalent to \u2013 but shorter, cleaner, and possibly faster\nthan \u2013 the following:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">athlete</span> <span class=\"k\">in</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n      <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">athlete.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Sorry, no athletes in this list.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-if\">\n<span id=\"s-std-templatetag-if\"></span><span id=\"s-std:templatetag-if\"></span><span id=\"if\"></span><span id=\"std-templatetag-if\"></span><span id=\"std:templatetag-if\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code><a class=\"headerlink\" href=\"#if\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">if</span> <span class=\"pre\">%}</span></code> tag evaluates a variable, and if that variable is \u201ctrue\u201d (i.e.\nexists, is not empty, and is not a false boolean value) the contents of the\nblock are output:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    Number of athletes: <span class=\"cp\">{{</span> <span class=\"nv\">athlete_list</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">elif</span> <span class=\"nv\">athlete_in_locker_room_list</span> <span class=\"cp\">%}</span>\n    Athletes should be out of the locker room soon!\n<span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span>\n    No athletes.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>In the above, if <code class=\"docutils literal notranslate\"><span class=\"pre\">athlete_list</span></code> is not empty, the number of athletes will be\ndisplayed by the <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">athlete_list|length</span> <span class=\"pre\">}}</span></code> variable.</p>\n<p>As you can see, the <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> tag may take one or several <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">elif</span> <span class=\"pre\">%}</span></code>\nclauses, as well as an <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">else</span> <span class=\"pre\">%}</span></code> clause that will be displayed if all\nprevious conditions fail. These clauses are optional.</p>\n<div class=\"section\" id=\"s-boolean-operators\">\n<span id=\"boolean-operators\"></span><h4>Boolean operators<a class=\"headerlink\" href=\"#boolean-operators\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tags may use <code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">not</span></code> to test a number of\nvariables or to negate a given variable:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"k\">and</span> <span class=\"nv\">coach_list</span> <span class=\"cp\">%}</span>\n    Both athletes and coaches are available.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"nv\">athlete_list</span> <span class=\"cp\">%}</span>\n    There are no athletes.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"k\">or</span> <span class=\"nv\">coach_list</span> <span class=\"cp\">%}</span>\n    There are some athletes or some coaches.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"nv\">athlete_list</span> <span class=\"k\">or</span> <span class=\"nv\">coach_list</span> <span class=\"cp\">%}</span>\n    There are no athletes or there are some coaches.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"k\">and</span> <span class=\"k\">not</span> <span class=\"nv\">coach_list</span> <span class=\"cp\">%}</span>\n    There are some athletes and absolutely no coaches.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Use of both <code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code> clauses within the same tag is allowed, with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code> having higher precedence than <code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code> e.g.:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">athlete_list</span> <span class=\"k\">and</span> <span class=\"nv\">coach_list</span> <span class=\"k\">or</span> <span class=\"nv\">cheerleader_list</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>will be interpreted like:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">if (athlete_list and coach_list) or cheerleader_list</span>\n</pre></div>\n</div>\n<p>Use of actual parentheses in the <a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag is invalid syntax. If you need\nthem to indicate precedence, you should use nested <a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tags.</p>\n<p><a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tags may also use the operators <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">!=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">is</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">is</span> <span class=\"pre\">not</span></code> which work as\nfollows:</p>\n<div class=\"section\" id=\"s-operator\">\n<span id=\"operator\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code> operator<a class=\"headerlink\" href=\"#operator\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Equality. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"cp\">%}</span>\n  This appears if variable somevar equals the string &quot;x&quot;\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">!=</span></code> operator<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Inequality. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;x&quot;</span> <span class=\"cp\">%}</span>\n  This appears if variable somevar does not equal the string &quot;x&quot;,\n  or if somevar is not found in the context\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-id2\">\n<span id=\"id2\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code> operator<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Less than. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"o\">&lt;</span> <span class=\"m\">100</span> <span class=\"cp\">%}</span>\n  This appears if variable somevar is less than 100.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-id3\">\n<span id=\"id3\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> operator<a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Greater than. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"o\">&gt;</span> <span class=\"m\">0</span> <span class=\"cp\">%}</span>\n  This appears if variable somevar is greater than 0.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-id4\">\n<span id=\"id4\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;=</span></code> operator<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Less than or equal to. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"o\">&lt;=</span> <span class=\"m\">100</span> <span class=\"cp\">%}</span>\n  This appears if variable somevar is less than 100 or equal to 100.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-id5\">\n<span id=\"id5\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span></code> operator<a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Greater than or equal to. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"o\">&gt;=</span> <span class=\"m\">1</span> <span class=\"cp\">%}</span>\n  This appears if variable somevar is greater than 1 or equal to 1.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-in-operator\">\n<span id=\"in-operator\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code> operator<a class=\"headerlink\" href=\"#in-operator\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Contained within. This operator is supported by many Python containers to test\nwhether the given value is in the container. The following are some examples\nof how <code class=\"docutils literal notranslate\"><span class=\"pre\">x</span> <span class=\"pre\">in</span> <span class=\"pre\">y</span></code> will be interpreted:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;bc&quot;</span> <span class=\"k\">in</span> <span class=\"s2\">&quot;abcdef&quot;</span> <span class=\"cp\">%}</span>\n  This appears since &quot;bc&quot; is a substring of &quot;abcdef&quot;\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;hello&quot;</span> <span class=\"k\">in</span> <span class=\"nv\">greetings</span> <span class=\"cp\">%}</span>\n  If greetings is a list or set, one element of which is the string\n  &quot;hello&quot;, this will appear.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">user</span> <span class=\"k\">in</span> <span class=\"nv\">users</span> <span class=\"cp\">%}</span>\n  If users is a QuerySet, this will appear if user is an\n  instance that belongs to the QuerySet.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-not-in-operator\">\n<span id=\"not-in-operator\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></code> operator<a class=\"headerlink\" href=\"#not-in-operator\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Not contained within. This is the negation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code> operator.</p>\n</div>\n<div class=\"section\" id=\"s-is-operator\">\n<span id=\"is-operator\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">is</span></code> operator<a class=\"headerlink\" href=\"#is-operator\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Object identity. Tests if two values are the same object. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"k\">is</span> <span class=\"nf\">True</span> <span class=\"cp\">%}</span>\n  This appears if and only if somevar is True.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"k\">is</span> <span class=\"nf\">None</span> <span class=\"cp\">%}</span>\n  This appears if somevar is None, or if somevar is not found in the context.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-is-not-operator\">\n<span id=\"is-not-operator\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">is</span> <span class=\"pre\">not</span></code> operator<a class=\"headerlink\" href=\"#is-not-operator\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Negated object identity. Tests if two values are not the same object. This is\nthe negation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">is</span></code> operator. Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"nf\">True</span> <span class=\"cp\">%}</span>\n  This appears if somevar is not True, or if somevar is not found in the\n  context.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">somevar</span> <span class=\"k\">is</span> <span class=\"k\">not</span> <span class=\"nf\">None</span> <span class=\"cp\">%}</span>\n  This appears if and only if somevar is not None.\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-filters\">\n<span id=\"filters\"></span><h4>Filters<a class=\"headerlink\" href=\"#filters\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You can also use filters in the <a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> expression. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">messages</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"o\">&gt;=</span> <span class=\"m\">100</span> <span class=\"cp\">%}</span>\n   You have lots of messages today!\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-complex-expressions\">\n<span id=\"complex-expressions\"></span><h4>Complex expressions<a class=\"headerlink\" href=\"#complex-expressions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>All of the above can be combined to form complex expressions. For such\nexpressions, it can be important to know how the operators are grouped when the\nexpression is evaluated - that is, the precedence rules. The precedence of the\noperators, from lowest to highest, is as follows:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">not</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">!=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;=</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span></code></li>\n</ul>\n<p>(This follows Python exactly). So, for example, the following complex\n<a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tag:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">a</span> <span class=\"o\">==</span> <span class=\"nv\">b</span> <span class=\"k\">or</span> <span class=\"nv\">c</span> <span class=\"o\">==</span> <span class=\"nv\">d</span> <span class=\"k\">and</span> <span class=\"nv\">e</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>\u2026will be interpreted as:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">==</span> <span class=\"n\">b</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">((</span><span class=\"n\">c</span> <span class=\"o\">==</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you need different precedence, you will need to use nested <a class=\"reference internal\" href=\"#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">if</span></code></a> tags.\nSometimes that is better for clarity anyway, for the sake of those who do not\nknow the precedence rules.</p>\n<p>The comparison operators cannot be \u2018chained\u2019 like in Python or in mathematical\nnotation. For example, instead of using:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">a</span> <span class=\"o\">&gt;</span> <span class=\"nv\">b</span> <span class=\"o\">&gt;</span> <span class=\"nv\">c</span> <span class=\"cp\">%}</span>  (WRONG)\n</pre></div>\n</div>\n<p>you should use:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">a</span> <span class=\"o\">&gt;</span> <span class=\"nv\">b</span> <span class=\"k\">and</span> <span class=\"nv\">b</span> <span class=\"o\">&gt;</span> <span class=\"nv\">c</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-ifchanged\">\n<span id=\"s-std-templatetag-ifchanged\"></span><span id=\"s-std:templatetag-ifchanged\"></span><span id=\"ifchanged\"></span><span id=\"std-templatetag-ifchanged\"></span><span id=\"std:templatetag-ifchanged\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ifchanged</span></code><a class=\"headerlink\" href=\"#ifchanged\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Check if a value has changed from the last iteration of a loop.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">ifchanged</span> <span class=\"pre\">%}</span></code> block tag is used within a loop. It has two possible\nuses.</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Checks its own rendered contents against its previous state and only\ndisplays the content if it has changed. For example, this displays a list of\ndays, only displaying the month if it changes:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Archive for <span class=\"cp\">{{</span> <span class=\"nv\">year</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">date</span> <span class=\"k\">in</span> <span class=\"nv\">days</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">ifchanged</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">date</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;F&quot;</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h3</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">endifchanged</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">date</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;M/d&quot;</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"cp\">}}</span><span class=\"s\">/&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">date</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;j&quot;</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">If given one or more variables, check whether any variable has changed.\nFor example, the following shows the date every time it changes, while\nshowing the hour if either the hour or the date has changed:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">date</span> <span class=\"k\">in</span> <span class=\"nv\">days</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">ifchanged</span> <span class=\"nv\">date.date</span> <span class=\"cp\">%}</span> <span class=\"cp\">{{</span> <span class=\"nv\">date.date</span> <span class=\"cp\">}}</span> <span class=\"cp\">{%</span> <span class=\"k\">endifchanged</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">ifchanged</span> <span class=\"nv\">date.hour</span> <span class=\"nv\">date.date</span> <span class=\"cp\">%}</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">date.hour</span> <span class=\"cp\">}}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endifchanged</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</li>\n</ol>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ifchanged</span></code> tag can also take an optional <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">else</span> <span class=\"pre\">%}</span></code> clause that\nwill be displayed if the value has not changed:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">match</span> <span class=\"k\">in</span> <span class=\"nv\">matches</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">style</span><span class=\"o\">=</span><span class=\"s\">&quot;background-color:</span>\n<span class=\"s\">        </span><span class=\"cp\">{%</span> <span class=\"k\">ifchanged</span> <span class=\"nv\">match.ballot_id</span> <span class=\"cp\">%}</span><span class=\"s\"></span>\n<span class=\"s\">            </span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s2\">&quot;red&quot;</span> <span class=\"s2\">&quot;blue&quot;</span> <span class=\"cp\">%}</span><span class=\"s\"></span>\n<span class=\"s\">        </span><span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span><span class=\"s\"></span>\n<span class=\"s\">            gray</span>\n<span class=\"s\">        </span><span class=\"cp\">{%</span> <span class=\"k\">endifchanged</span> <span class=\"cp\">%}</span><span class=\"s\"></span>\n<span class=\"s\">    &quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">match</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-include\">\n<span id=\"s-std-templatetag-include\"></span><span id=\"s-std:templatetag-include\"></span><span id=\"include\"></span><span id=\"std-templatetag-include\"></span><span id=\"std:templatetag-include\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code><a class=\"headerlink\" href=\"#include\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Loads a template and renders it with the current context. This is a way of\n\u201cincluding\u201d other templates within a template.</p>\n<p>The template name can either be a variable or a hard-coded (quoted) string,\nin either single or double quotes.</p>\n<p>This example includes the contents of the template <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;foo/bar.html&quot;</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;foo/bar.html&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Normally the template name is relative to the template loader\u2019s root directory.\nA string argument may also be a relative path starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">./</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">../</span></code>\nas described in the <a class=\"reference internal\" href=\"#std-templatetag-extends\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">extends</span></code></a> tag.</p>\n<p>This example includes the contents of the template whose name is contained in\nthe variable <code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"nv\">template_name</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The variable may also be any object with a <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method that accepts a\ncontext. This allows you to reference a compiled <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> in your context.</p>\n<p>Additionally, the variable may be an iterable of template names, in which case\nthe first that can be loaded will be used, as per\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.loader.select_template\" title=\"django.template.loader.select_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">select_template()</span></code></a>.</p>\n<p>An included template is rendered within the context of the template that\nincludes it. This example produces the output <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Hello,</span> <span class=\"pre\">John!&quot;</span></code>:</p>\n<ul>\n<li><p class=\"first\">Context: variable <code class=\"docutils literal notranslate\"><span class=\"pre\">person</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;John&quot;</span></code> and variable <code class=\"docutils literal notranslate\"><span class=\"pre\">greeting</span></code>\nis set to <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Hello&quot;</span></code>.</p>\n</li>\n<li><p class=\"first\">Template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;name_snippet.html&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">name_snippet.html</span></code> template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">greeting</span> <span class=\"cp\">}}</span>, <span class=\"cp\">{{</span> <span class=\"nv\">person</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;friend&quot;</span> <span class=\"cp\">}}</span>!\n</pre></div>\n</div>\n</li>\n</ul>\n<p>You can pass additional context to the template using keyword arguments:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;name_snippet.html&quot;</span> <span class=\"k\">with</span> <span class=\"nv\">person</span><span class=\"o\">=</span><span class=\"s2\">&quot;Jane&quot;</span> <span class=\"nv\">greeting</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hello&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>If you want to render the context only with the variables provided (or even\nno variables at all), use the <code class=\"docutils literal notranslate\"><span class=\"pre\">only</span></code> option. No other variables are\navailable to the included template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;name_snippet.html&quot;</span> <span class=\"k\">with</span> <span class=\"nv\">greeting</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hi&quot;</span> <span class=\"nv\">only</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The <a class=\"reference internal\" href=\"#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag should be considered as an implementation of\n\u201crender this subtemplate and include the HTML\u201d, not as \u201cparse this\nsubtemplate and include its contents as if it were part of the parent\u201d.\nThis means that there is no shared state between included templates \u2013\neach include is a completely independent rendering process.</p>\n<p class=\"last\">Blocks are evaluated <em>before</em> they are included. This means that a template\nthat includes blocks from another will contain blocks that have <em>already\nbeen evaluated and rendered</em> - not blocks that can be overridden by, for\nexample, an extending template.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-load\">\n<span id=\"s-std-templatetag-load\"></span><span id=\"s-std:templatetag-load\"></span><span id=\"load\"></span><span id=\"std-templatetag-load\"></span><span id=\"std:templatetag-load\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">load</span></code><a class=\"headerlink\" href=\"#load\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Loads a custom template tag set.</p>\n<p>For example, the following template would load all the tags and filters\nregistered in <code class=\"docutils literal notranslate\"><span class=\"pre\">somelibrary</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">otherlibrary</span></code> located in package\n<code class=\"docutils literal notranslate\"><span class=\"pre\">package</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">somelibrary</span> <span class=\"nv\">package.otherlibrary</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can also selectively load individual filters or tags from a library, using\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span></code> argument. In this example, the template tags/filters named <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">bar</span></code> will be loaded from <code class=\"docutils literal notranslate\"><span class=\"pre\">somelibrary</span></code>:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">foo</span> <span class=\"nv\">bar</span> <span class=\"nv\">from</span> <span class=\"nv\">somelibrary</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../../howto/custom-template-tags/\"><span class=\"doc\">Custom tag and filter libraries</span></a> for\nmore information.</p>\n</div>\n<div class=\"section\" id=\"s-lorem\">\n<span id=\"s-std-templatetag-lorem\"></span><span id=\"s-std:templatetag-lorem\"></span><span id=\"lorem\"></span><span id=\"std-templatetag-lorem\"></span><span id=\"std:templatetag-lorem\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">lorem</span></code><a class=\"headerlink\" href=\"#lorem\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Displays random \u201clorem ipsum\u201d Latin text. This is useful for providing sample\ndata in templates.</p>\n<p>Usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">lorem</span> <span class=\"o\">[</span><span class=\"nv\">count</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"nv\">method</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"nv\">random</span><span class=\"o\">]</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">lorem</span> <span class=\"pre\">%}</span></code> tag can be used with zero, one, two or three arguments.\nThe arguments are:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"15%\" />\n<col width=\"85%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Argument</th>\n<th class=\"head\">Description</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code></td>\n<td>A number (or variable) containing the number of paragraphs or\nwords to generate (default is 1).</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">method</span></code></td>\n<td>Either <code class=\"docutils literal notranslate\"><span class=\"pre\">w</span></code> for words, <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> for HTML paragraphs or <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>\nfor plain-text paragraph blocks (default is <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>).</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">random</span></code></td>\n<td>The word <code class=\"docutils literal notranslate\"><span class=\"pre\">random</span></code>, which if given, does not use the common\nparagraph (\u201cLorem ipsum dolor sit amet\u2026\u201d) when generating\ntext.</td>\n</tr>\n</tbody>\n</table>\n<p>Examples:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">lorem</span> <span class=\"pre\">%}</span></code> will output the common \u201clorem ipsum\u201d paragraph.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">lorem</span> <span class=\"pre\">3</span> <span class=\"pre\">p</span> <span class=\"pre\">%}</span></code> will output the common \u201clorem ipsum\u201d paragraph\nand two random paragraphs each wrapped in HTML <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;p&gt;</span></code> tags.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">lorem</span> <span class=\"pre\">2</span> <span class=\"pre\">w</span> <span class=\"pre\">random</span> <span class=\"pre\">%}</span></code> will output two random Latin words.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-now\">\n<span id=\"s-std-templatetag-now\"></span><span id=\"s-std:templatetag-now\"></span><span id=\"now\"></span><span id=\"std-templatetag-now\"></span><span id=\"std:templatetag-now\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">now</span></code><a class=\"headerlink\" href=\"#now\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Displays the current date and/or time, using a format according to the given\nstring. Such string can contain format specifiers characters as described\nin the <a class=\"reference internal\" href=\"#std-templatefilter-date\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">date</span></code></a> filter section.</p>\n<p>Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>It is <span class=\"cp\">{%</span> <span class=\"k\">now</span> <span class=\"s2\">&quot;jS F Y H:i&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Note that you can backslash-escape a format string if you want to use the\n\u201craw\u201d value. In this example, both \u201co\u201d and \u201cf\u201d are backslash-escaped, because\notherwise each is a format string that displays the year and the time,\nrespectively:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>It is the <span class=\"cp\">{%</span> <span class=\"k\">now</span> <span class=\"s2\">&quot;jS \\o\\f F&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This would display as \u201cIt is the 4th of September\u201d.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The format passed can also be one of the predefined ones\n<a class=\"reference internal\" href=\"../../settings/#std-setting-DATE_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATE_FORMAT</span></code></a>, <a class=\"reference internal\" href=\"../../settings/#std-setting-DATETIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATETIME_FORMAT</span></code></a>,\n<a class=\"reference internal\" href=\"../../settings/#std-setting-SHORT_DATE_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SHORT_DATE_FORMAT</span></code></a> or <a class=\"reference internal\" href=\"../../settings/#std-setting-SHORT_DATETIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SHORT_DATETIME_FORMAT</span></code></a>.\nThe predefined formats may vary depending on the current locale and\nif <a class=\"reference internal\" href=\"../../../topics/i18n/formatting/\"><span class=\"doc\">Format localization</span></a> is enabled, e.g.:</p>\n<div class=\"last highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>It is <span class=\"cp\">{%</span> <span class=\"k\">now</span> <span class=\"s2\">&quot;SHORT_DATETIME_FORMAT&quot;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<p>You can also use the syntax <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">now</span> <span class=\"pre\">&quot;Y&quot;</span> <span class=\"pre\">as</span> <span class=\"pre\">current_year</span> <span class=\"pre\">%}</span></code> to store the\noutput (as a string) inside a variable. This is useful if you want to use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">now</span> <span class=\"pre\">%}</span></code> inside a template tag like <a class=\"reference internal\" href=\"../../../topics/i18n/translation/#std-templatetag-blocktranslate\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">blocktranslate</span></code></a> for example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">now</span> <span class=\"s2\">&quot;Y&quot;</span> <span class=\"k\">as</span> <span class=\"nv\">current_year</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">blocktranslate</span> <span class=\"cp\">%}</span>Copyright <span class=\"cp\">{{</span> <span class=\"nv\">current_year</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblocktranslate</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-regroup\">\n<span id=\"s-std-templatetag-regroup\"></span><span id=\"s-std:templatetag-regroup\"></span><span id=\"regroup\"></span><span id=\"std-templatetag-regroup\"></span><span id=\"std:templatetag-regroup\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">regroup</span></code><a class=\"headerlink\" href=\"#regroup\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Regroups a list of alike objects by a common attribute.</p>\n<p>This complex tag is best illustrated by way of an example: say that <code class=\"docutils literal notranslate\"><span class=\"pre\">cities</span></code>\nis a list of cities represented by dictionaries containing <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;name&quot;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;population&quot;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;country&quot;</span></code> keys:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cities</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mumbai&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;19,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;India&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Calcutta&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;15,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;India&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;New York&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;20,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;USA&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Chicago&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;7,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;USA&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tokyo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;33,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Japan&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>\u2026and you\u2019d like to display a hierarchical list that is ordered by country,\nlike this:</p>\n<ul class=\"simple\">\n<li>India<ul>\n<li>Mumbai: 19,000,000</li>\n<li>Calcutta: 15,000,000</li>\n</ul>\n</li>\n<li>USA<ul>\n<li>New York: 20,000,000</li>\n<li>Chicago: 7,000,000</li>\n</ul>\n</li>\n<li>Japan<ul>\n<li>Tokyo: 33,000,000</li>\n</ul>\n</li>\n</ul>\n<p>You can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">regroup</span> <span class=\"pre\">%}</span></code> tag to group the list of cities by country.\nThe following snippet of template code would accomplish this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">regroup</span> <span class=\"nv\">cities</span> <span class=\"nv\">by</span> <span class=\"nv\">country</span> <span class=\"k\">as</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">country</span> <span class=\"k\">in</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">country.grouper</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">city</span> <span class=\"k\">in</span> <span class=\"nv\">country.list</span> <span class=\"cp\">%}</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">city.name</span> <span class=\"cp\">}}</span>: <span class=\"cp\">{{</span> <span class=\"nv\">city.population</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Let\u2019s walk through this example. <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">regroup</span> <span class=\"pre\">%}</span></code> takes three arguments: the\nlist you want to regroup, the attribute to group by, and the name of the\nresulting list. Here, we\u2019re regrouping the <code class=\"docutils literal notranslate\"><span class=\"pre\">cities</span></code> list by the <code class=\"docutils literal notranslate\"><span class=\"pre\">country</span></code>\nattribute and calling the result <code class=\"docutils literal notranslate\"><span class=\"pre\">country_list</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">regroup</span> <span class=\"pre\">%}</span></code> produces a list (in this case, <code class=\"docutils literal notranslate\"><span class=\"pre\">country_list</span></code>) of\n<strong>group objects</strong>. Group objects are instances of\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">namedtuple()</span></code></a> with two fields:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">grouper</span></code> \u2013 the item that was grouped by (e.g., the string \u201cIndia\u201d or\n\u201cJapan\u201d).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> \u2013 a list of all items in this group (e.g., a list of all cities\nwith country=\u2019India\u2019).</li>\n</ul>\n<p>Because <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">regroup</span> <span class=\"pre\">%}</span></code> produces <a class=\"reference external\" href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">namedtuple()</span></code></a> objects,\nyou can also write the previous example as:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">regroup</span> <span class=\"nv\">cities</span> <span class=\"nv\">by</span> <span class=\"nv\">country</span> <span class=\"k\">as</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">country</span><span class=\"o\">,</span> <span class=\"nv\">local_cities</span> <span class=\"k\">in</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">country</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">city</span> <span class=\"k\">in</span> <span class=\"nv\">local_cities</span> <span class=\"cp\">%}</span>\n          <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">city.name</span> <span class=\"cp\">}}</span>: <span class=\"cp\">{{</span> <span class=\"nv\">city.population</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">regroup</span> <span class=\"pre\">%}</span></code> does not order its input! Our example relies on\nthe fact that the <code class=\"docutils literal notranslate\"><span class=\"pre\">cities</span></code> list was ordered by <code class=\"docutils literal notranslate\"><span class=\"pre\">country</span></code> in the first place.\nIf the <code class=\"docutils literal notranslate\"><span class=\"pre\">cities</span></code> list did <em>not</em> order its members by <code class=\"docutils literal notranslate\"><span class=\"pre\">country</span></code>, the\nregrouping would naively display more than one group for a single country. For\nexample, say the <code class=\"docutils literal notranslate\"><span class=\"pre\">cities</span></code> list was set to this (note that the countries are not\ngrouped together):</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">cities</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Mumbai&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;19,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;India&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;New York&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;20,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;USA&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Calcutta&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;15,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;India&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Chicago&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;7,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;USA&quot;</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Tokyo&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;population&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;33,000,000&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;country&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Japan&quot;</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>With this input for <code class=\"docutils literal notranslate\"><span class=\"pre\">cities</span></code>, the example <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">regroup</span> <span class=\"pre\">%}</span></code> template code\nabove would result in the following output:</p>\n<ul class=\"simple\">\n<li>India<ul>\n<li>Mumbai: 19,000,000</li>\n</ul>\n</li>\n<li>USA<ul>\n<li>New York: 20,000,000</li>\n</ul>\n</li>\n<li>India<ul>\n<li>Calcutta: 15,000,000</li>\n</ul>\n</li>\n<li>USA<ul>\n<li>Chicago: 7,000,000</li>\n</ul>\n</li>\n<li>Japan<ul>\n<li>Tokyo: 33,000,000</li>\n</ul>\n</li>\n</ul>\n<p>The easiest solution to this gotcha is to make sure in your view code that the\ndata is ordered according to how you want to display it.</p>\n<p>Another solution is to sort the data in the template using the\n<a class=\"reference internal\" href=\"#std-templatefilter-dictsort\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">dictsort</span></code></a> filter, if your data is in a list of dictionaries:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">regroup</span> <span class=\"nv\">cities</span><span class=\"o\">|</span><span class=\"nf\">dictsort</span><span class=\"s2\">:&quot;country&quot;</span> <span class=\"nv\">by</span> <span class=\"nv\">country</span> <span class=\"k\">as</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-grouping-on-other-properties\">\n<span id=\"grouping-on-other-properties\"></span><h4>Grouping on other properties<a class=\"headerlink\" href=\"#grouping-on-other-properties\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Any valid template lookup is a legal grouping attribute for the regroup\ntag, including methods, attributes, dictionary keys and list items. For\nexample, if the \u201ccountry\u201d field is a foreign key to a class with\nan attribute \u201cdescription,\u201d you could use:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">regroup</span> <span class=\"nv\">cities</span> <span class=\"nv\">by</span> <span class=\"nv\">country.description</span> <span class=\"k\">as</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Or, if <code class=\"docutils literal notranslate\"><span class=\"pre\">country</span></code> is a field with <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code>, it will have a\n<a class=\"reference internal\" href=\"../../models/instances/#django.db.models.Model.get_FOO_display\" title=\"django.db.models.Model.get_FOO_display\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_FOO_display()</span></code></a> method available as an\nattribute, allowing  you to group on the display string rather than the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> key:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">regroup</span> <span class=\"nv\">cities</span> <span class=\"nv\">by</span> <span class=\"nv\">get_country_display</span> <span class=\"k\">as</span> <span class=\"nv\">country_list</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">country.grouper</span> <span class=\"pre\">}}</span></code> will now display the value fields from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> set rather than the keys.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-resetcycle\">\n<span id=\"s-std-templatetag-resetcycle\"></span><span id=\"s-std:templatetag-resetcycle\"></span><span id=\"resetcycle\"></span><span id=\"std-templatetag-resetcycle\"></span><span id=\"std:templatetag-resetcycle\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">resetcycle</span></code><a class=\"headerlink\" href=\"#resetcycle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Resets a previous <a class=\"reference internal\" href=\"#cycle\">cycle</a> so that it restarts from its first item at its next\nencounter. Without arguments, <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">resetcycle</span> <span class=\"pre\">%}</span></code> will reset the last\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> defined in the template.</p>\n<p>Example usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">coach</span> <span class=\"k\">in</span> <span class=\"nv\">coach_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">coach.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">athlete</span> <span class=\"k\">in</span> <span class=\"nv\">coach.athlete_set.all</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;odd&#39;</span> <span class=\"s1\">&#39;even&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">athlete.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">resetcycle</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This example would return this HTML:</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Gareth<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;odd&quot;</span><span class=\"p\">&gt;</span>Harry<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;even&quot;</span><span class=\"p\">&gt;</span>John<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;odd&quot;</span><span class=\"p\">&gt;</span>Nick<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>John<span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;odd&quot;</span><span class=\"p\">&gt;</span>Andrea<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;even&quot;</span><span class=\"p\">&gt;</span>Melissa<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Notice how the first block ends with <code class=\"docutils literal notranslate\"><span class=\"pre\">class=&quot;odd&quot;</span></code> and the new one starts\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">class=&quot;odd&quot;</span></code>. Without the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">resetcycle</span> <span class=\"pre\">%}</span></code> tag, the second block\nwould start with <code class=\"docutils literal notranslate\"><span class=\"pre\">class=&quot;even&quot;</span></code>.</p>\n<p>You can also reset named cycle tags:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">item</span> <span class=\"k\">in</span> <span class=\"nv\">list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;odd&#39;</span> <span class=\"s1\">&#39;even&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">stripe</span> <span class=\"cp\">%}</span><span class=\"s\"> </span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;major&#39;</span> <span class=\"s1\">&#39;minor&#39;</span> <span class=\"s1\">&#39;minor&#39;</span> <span class=\"s1\">&#39;minor&#39;</span> <span class=\"s1\">&#39;minor&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">tick</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">item.data</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">ifchanged</span> <span class=\"nv\">item.category</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">item.category</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"k\">not</span> <span class=\"nb\">forloop</span><span class=\"nv\">.first</span> <span class=\"cp\">%}{%</span> <span class=\"k\">resetcycle</span> <span class=\"nv\">tick</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endifchanged</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>In this example, we have both the alternating odd/even rows and a \u201cmajor\u201d row\nevery fifth row. Only the five-row cycle is reset when a category changes.</p>\n</div>\n<div class=\"section\" id=\"s-spaceless\">\n<span id=\"s-std-templatetag-spaceless\"></span><span id=\"s-std:templatetag-spaceless\"></span><span id=\"spaceless\"></span><span id=\"std-templatetag-spaceless\"></span><span id=\"std:templatetag-spaceless\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">spaceless</span></code><a class=\"headerlink\" href=\"#spaceless\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Removes whitespace between HTML tags. This includes tab\ncharacters and newlines.</p>\n<p>Example usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">spaceless</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;foo/&quot;</span><span class=\"p\">&gt;</span>Foo<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endspaceless</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This example would return this HTML:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;foo/&quot;</span><span class=\"p\">&gt;</span>Foo<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Only space between <em>tags</em> is removed \u2013 not space between tags and text. In\nthis example, the space around <code class=\"docutils literal notranslate\"><span class=\"pre\">Hello</span></code> won\u2019t be stripped:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">spaceless</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span>\n        Hello\n    <span class=\"p\">&lt;/</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endspaceless</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-templatetag\">\n<span id=\"s-std-templatetag-templatetag\"></span><span id=\"s-std:templatetag-templatetag\"></span><span id=\"templatetag\"></span><span id=\"std-templatetag-templatetag\"></span><span id=\"std:templatetag-templatetag\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">templatetag</span></code><a class=\"headerlink\" href=\"#templatetag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Outputs one of the syntax characters used to compose template tags.</p>\n<p>The template system has no concept of \u201cescaping\u201d individual characters.\nHowever, you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">templatetag</span> <span class=\"pre\">%}</span></code> tag to display one of the\ntemplate tag character combinations.</p>\n<p>The argument tells which template bit to output:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"72%\" />\n<col width=\"28%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Argument</th>\n<th class=\"head\">Outputs</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">openblock</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">closeblock</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">%}</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">openvariable</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">closevariable</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">}}</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">openbrace</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">closebrace</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">}</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">opencomment</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{#</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">closecomment</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">#}</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>Sample usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>The <span class=\"cp\">{%</span> <span class=\"k\">templatetag</span> <span class=\"nv\">openblock</span> <span class=\"cp\">%}</span> characters open a block.\n</pre></div>\n</div>\n<p>See also the <a class=\"reference internal\" href=\"#std-templatetag-verbatim\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">verbatim</span></code></a> tag for another way of including these\ncharacters.</p>\n</div>\n<div class=\"section\" id=\"s-url\">\n<span id=\"s-std-templatetag-url\"></span><span id=\"s-std:templatetag-url\"></span><span id=\"url\"></span><span id=\"std-templatetag-url\"></span><span id=\"std:templatetag-url\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code><a class=\"headerlink\" href=\"#url\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns an absolute path reference (a URL without the domain name) matching a\ngiven view and optional parameters. Any special characters in the resulting\npath will be encoded using <a class=\"reference internal\" href=\"../../utils/#django.utils.encoding.iri_to_uri\" title=\"django.utils.encoding.iri_to_uri\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">iri_to_uri()</span></code></a>.</p>\n<p>This is a way to output links without violating the DRY principle by having to\nhard-code URLs in your templates:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;some-url-name&#39;</span> <span class=\"nv\">v1</span> <span class=\"nv\">v2</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The first argument is a <a class=\"reference internal\" href=\"../../../topics/http/urls/#naming-url-patterns\"><span class=\"std std-ref\">URL pattern name</span></a>. It can\nbe a quoted literal or any other context variable. Additional arguments are\noptional and should be space-separated values that will be used as arguments in\nthe URL. The example above shows passing positional arguments. Alternatively\nyou may use keyword syntax:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;some-url-name&#39;</span> <span class=\"nv\">arg1</span><span class=\"o\">=</span><span class=\"nv\">v1</span> <span class=\"nv\">arg2</span><span class=\"o\">=</span><span class=\"nv\">v2</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Do not mix both positional and keyword syntax in a single call. All arguments\nrequired by the URLconf should be present.</p>\n<p>For example, suppose you have a view, <code class=\"docutils literal notranslate\"><span class=\"pre\">app_views.client</span></code>, whose URLconf\ntakes a client ID (here, <code class=\"docutils literal notranslate\"><span class=\"pre\">client()</span></code> is a method inside the views file\n<code class=\"docutils literal notranslate\"><span class=\"pre\">app_views.py</span></code>). The URLconf line might look like this:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;client/&lt;int:id&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">app_views</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;app-views-client&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If this app\u2019s URLconf is included into the project\u2019s URLconf under a path\nsuch as this:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;clients/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">&quot;project_name.app_name.urls&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>\u2026then, in a template, you can create a link to this view like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;app-views-client&#39;</span> <span class=\"nv\">client.id</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The template tag will output the string <code class=\"docutils literal notranslate\"><span class=\"pre\">/clients/client/123/</span></code>.</p>\n<p>Note that if the URL you\u2019re reversing doesn\u2019t exist, you\u2019ll get an\n<a class=\"reference internal\" href=\"../../exceptions/#django.urls.NoReverseMatch\" title=\"django.urls.NoReverseMatch\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NoReverseMatch</span></code></a> exception raised, which will cause your\nsite to display an error page.</p>\n<p>If you\u2019d like to retrieve a URL without displaying it, you can use a slightly\ndifferent call:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;some-url-name&#39;</span> <span class=\"nv\">arg</span> <span class=\"nv\">arg2</span> <span class=\"k\">as</span> <span class=\"nv\">the_url</span> <span class=\"cp\">%}</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">the_url</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>I&#39;m linking to <span class=\"cp\">{{</span> <span class=\"nv\">the_url</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The scope of the variable created by the  <code class=\"docutils literal notranslate\"><span class=\"pre\">as</span> <span class=\"pre\">var</span></code> syntax is the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code> in which the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">%}</span></code> tag appears.</p>\n<p>This <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">...</span> <span class=\"pre\">as</span> <span class=\"pre\">var</span> <span class=\"pre\">%}</span></code> syntax will <em>not</em> cause an error if the view is\nmissing. In practice you\u2019ll use this to link to views that are optional:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;some-url-name&#39;</span> <span class=\"k\">as</span> <span class=\"nv\">the_url</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">the_url</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">the_url</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>Link to optional stuff<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>If you\u2019d like to retrieve a namespaced URL, specify the fully qualified name:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;myapp:view-name&#39;</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This will follow the normal <a class=\"reference internal\" href=\"../../../topics/http/urls/#topics-http-reversing-url-namespaces\"><span class=\"std std-ref\">namespaced URL resolution strategy</span></a>, including using any hints provided\nby the context as to the current application.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Don\u2019t forget to put quotes around the URL pattern <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, otherwise the\nvalue will be interpreted as a context variable!</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-verbatim\">\n<span id=\"s-std-templatetag-verbatim\"></span><span id=\"s-std:templatetag-verbatim\"></span><span id=\"verbatim\"></span><span id=\"std-templatetag-verbatim\"></span><span id=\"std:templatetag-verbatim\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">verbatim</span></code><a class=\"headerlink\" href=\"#verbatim\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Stops the template engine from rendering the contents of this block tag.</p>\n<p>A common use is to allow a JavaScript template layer that collides with\nDjango\u2019s syntax. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">verbatim</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span><span class=\"k\">if</span> <span class=\"nv\">dying</span><span class=\"cp\">}}</span>Still alive.<span class=\"cp\">{{</span><span class=\"o\">/</span><span class=\"k\">if</span><span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endverbatim</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>You can also designate a specific closing tag, allowing the use of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endverbatim</span> <span class=\"pre\">%}</span></code> as part of the unrendered contents:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">verbatim</span> <span class=\"nv\">myblock</span> <span class=\"cp\">%}</span>\n    Avoid template rendering via the <span class=\"cp\">{%</span> <span class=\"k\">verbatim</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endverbatim</span> <span class=\"cp\">%}</span> block.\n<span class=\"cp\">{%</span> <span class=\"k\">endverbatim</span> <span class=\"nv\">myblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-widthratio\">\n<span id=\"s-std-templatetag-widthratio\"></span><span id=\"s-std:templatetag-widthratio\"></span><span id=\"widthratio\"></span><span id=\"std-templatetag-widthratio\"></span><span id=\"std:templatetag-widthratio\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">widthratio</span></code><a class=\"headerlink\" href=\"#widthratio\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For creating bar charts and such, this tag calculates the ratio of a given\nvalue to a maximum value, and then applies that ratio to a constant.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;bar.png&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;Bar&quot;</span>\n     <span class=\"na\">height</span><span class=\"o\">=</span><span class=\"s\">&quot;10&quot;</span> <span class=\"na\">width</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">widthratio</span> <span class=\"nv\">this_value</span> <span class=\"nv\">max_value</span> <span class=\"nv\">max_width</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">this_value</span></code> is 175, <code class=\"docutils literal notranslate\"><span class=\"pre\">max_value</span></code> is 200, and <code class=\"docutils literal notranslate\"><span class=\"pre\">max_width</span></code> is 100, the\nimage in the above example will be 88 pixels wide\n(because 175/200 = .875; .875 * 100 = 87.5 which is rounded up to 88).</p>\n<p>In some cases you might want to capture the result of <code class=\"docutils literal notranslate\"><span class=\"pre\">widthratio</span></code> in a\nvariable. It can be useful, for instance, in a <a class=\"reference internal\" href=\"../../../topics/i18n/translation/#std-templatetag-blocktranslate\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">blocktranslate</span></code></a> like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">widthratio</span> <span class=\"nv\">this_value</span> <span class=\"nv\">max_value</span> <span class=\"nv\">max_width</span> <span class=\"k\">as</span> <span class=\"nv\">width</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">blocktranslate</span> <span class=\"cp\">%}</span>The width is: <span class=\"cp\">{{</span> <span class=\"nv\">width</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblocktranslate</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-with\">\n<span id=\"s-std-templatetag-with\"></span><span id=\"s-std:templatetag-with\"></span><span id=\"with\"></span><span id=\"std-templatetag-with\"></span><span id=\"std:templatetag-with\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code><a class=\"headerlink\" href=\"#with\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Caches a complex variable under a simpler name. This is useful when accessing\nan \u201cexpensive\u201d method (e.g., one that hits the database) multiple times.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">with</span> <span class=\"nv\">total</span><span class=\"o\">=</span><span class=\"nv\">business.employees.count</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">total</span> <span class=\"cp\">}}</span> employee<span class=\"cp\">{{</span> <span class=\"nv\">total</span><span class=\"o\">|</span><span class=\"nf\">pluralize</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endwith</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The populated variable (in the example above, <code class=\"docutils literal notranslate\"><span class=\"pre\">total</span></code>) is only available\nbetween the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">with</span> <span class=\"pre\">%}</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endwith</span> <span class=\"pre\">%}</span></code> tags.</p>\n<p>You can assign more than one context variable:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">with</span> <span class=\"nv\">alpha</span><span class=\"o\">=</span><span class=\"m\">1</span> <span class=\"nv\">beta</span><span class=\"o\">=</span><span class=\"m\">2</span> <span class=\"cp\">%}</span>\n    ...\n<span class=\"cp\">{%</span> <span class=\"k\">endwith</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The previous more verbose format is still supported:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">with</span> <span class=\"pre\">business.employees.count</span> <span class=\"pre\">as</span> <span class=\"pre\">total</span> <span class=\"pre\">%}</span></code></p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-built-in-filter-reference\">\n<span id=\"s-ref-templates-builtins-filters\"></span><span id=\"built-in-filter-reference\"></span><span id=\"ref-templates-builtins-filters\"></span><h2>Built-in filter reference<a class=\"headerlink\" href=\"#built-in-filter-reference\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-add\">\n<span id=\"s-std-templatefilter-add\"></span><span id=\"s-std:templatefilter-add\"></span><span id=\"add\"></span><span id=\"std-templatefilter-add\"></span><span id=\"std:templatefilter-add\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">add</span></code><a class=\"headerlink\" href=\"#add\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Adds the argument to the value.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">add</span><span class=\"s2\">:&quot;2&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">4</span></code>, then the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">6</span></code>.</p>\n<p>This filter will first try to coerce both values to integers. If this fails,\nit\u2019ll attempt to add the values together anyway. This will work on some data\ntypes (strings, list, etc.) and fail on others. If it fails, the result will\nbe an empty string.</p>\n<p>For example, if we have:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">first</span><span class=\"o\">|</span><span class=\"nf\">add</span><span class=\"o\">:</span><span class=\"nv\">second</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>and <code class=\"docutils literal notranslate\"><span class=\"pre\">first</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">[1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3]</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">[4,</span> <span class=\"pre\">5,</span> <span class=\"pre\">6]</span></code>, then the\noutput will be <code class=\"docutils literal notranslate\"><span class=\"pre\">[1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3,</span> <span class=\"pre\">4,</span> <span class=\"pre\">5,</span> <span class=\"pre\">6]</span></code>.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Strings that can be coerced to integers will be <strong>summed</strong>, not\nconcatenated, as in the first example above.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-addslashes\">\n<span id=\"s-std-templatefilter-addslashes\"></span><span id=\"s-std:templatefilter-addslashes\"></span><span id=\"addslashes\"></span><span id=\"std-templatefilter-addslashes\"></span><span id=\"std:templatefilter-addslashes\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">addslashes</span></code><a class=\"headerlink\" href=\"#addslashes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Adds slashes before quotes. Useful for escaping strings in CSV, for example.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">addslashes</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;I'm</span> <span class=\"pre\">using</span> <span class=\"pre\">Django&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;I\\'m</span> <span class=\"pre\">using</span> <span class=\"pre\">Django&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-capfirst\">\n<span id=\"s-std-templatefilter-capfirst\"></span><span id=\"s-std:templatefilter-capfirst\"></span><span id=\"capfirst\"></span><span id=\"std-templatefilter-capfirst\"></span><span id=\"std:templatefilter-capfirst\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">capfirst</span></code><a class=\"headerlink\" href=\"#capfirst\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Capitalizes the first character of the value. If the first character is not\na letter, this filter has no effect.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">capfirst</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Django&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-center\">\n<span id=\"s-std-templatefilter-center\"></span><span id=\"s-std:templatefilter-center\"></span><span id=\"center\"></span><span id=\"std-templatefilter-center\"></span><span id=\"std:templatefilter-center\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">center</span></code><a class=\"headerlink\" href=\"#center\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Centers the value in a field of a given width.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>&quot;<span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">center</span><span class=\"s2\">:&quot;15&quot;</span> <span class=\"cp\">}}</span>&quot;\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Django&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span>&#160;&#160;&#160;&#160; <span class=\"pre\">Django</span>&#160;&#160;&#160; <span class=\"pre\">&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-cut\">\n<span id=\"s-std-templatefilter-cut\"></span><span id=\"s-std:templatefilter-cut\"></span><span id=\"cut\"></span><span id=\"std-templatefilter-cut\"></span><span id=\"std:templatefilter-cut\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">cut</span></code><a class=\"headerlink\" href=\"#cut\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Removes all values of arg from the given string.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">cut</span><span class=\"s2\">:&quot; &quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;String</span> <span class=\"pre\">with</span> <span class=\"pre\">spaces&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Stringwithspaces&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-date\">\n<span id=\"s-std-templatefilter-date\"></span><span id=\"s-std:templatefilter-date\"></span><span id=\"date\"></span><span id=\"std-templatefilter-date\"></span><span id=\"std:templatefilter-date\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code><a class=\"headerlink\" href=\"#date\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Formats a date according to the given format.</p>\n<p>Uses a similar format to PHP\u2019s <a class=\"reference external\" href=\"https://www.php.net/manual/en/function.date.php\">date()</a> function with some\ndifferences.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">These format characters are not used in Django outside of templates. They\nwere designed to be compatible with PHP to ease transitioning for designers.</p>\n</div>\n<p id=\"date-and-time-formatting-specifiers\">Available format strings:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"12%\" />\n<col width=\"31%\" />\n<col width=\"57%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Format character</th>\n<th class=\"head\">Description</th>\n<th class=\"head\">Example output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><strong>Day</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">d</span></code></td>\n<td>Day of the month, 2 digits with\nleading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'01'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'31'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">j</span></code></td>\n<td>Day of the month without leading\nzeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'31'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">D</span></code></td>\n<td>Day of the week, textual, 3 letters.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'Fri'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">l</span></code></td>\n<td>Day of the week, textual, long.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'Friday'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">S</span></code></td>\n<td>English ordinal suffix for day of the\nmonth, 2 characters.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'st'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'nd'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'rd'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">'th'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">w</span></code></td>\n<td>Day of the week, digits without\nleading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'0'</span></code> (Sunday) to <code class=\"docutils literal notranslate\"><span class=\"pre\">'6'</span></code> (Saturday)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">z</span></code></td>\n<td>Day of the year.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">366</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><strong>Week</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">W</span></code></td>\n<td>ISO-8601 week number of year, with\nweeks starting on Monday.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">53</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><strong>Month</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">m</span></code></td>\n<td>Month, 2 digits with leading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'01'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'12'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">n</span></code></td>\n<td>Month without leading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'12'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">M</span></code></td>\n<td>Month, textual, 3 letters.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'Jan'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code></td>\n<td>Month, textual, 3 letters, lowercase.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'jan'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">E</span></code></td>\n<td>Month, locale specific alternative\nrepresentation usually used for long\ndate representation.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'listopada'</span></code> (for Polish locale, as opposed to <code class=\"docutils literal notranslate\"><span class=\"pre\">'Listopad'</span></code>)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">F</span></code></td>\n<td>Month, textual, long.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'January'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">N</span></code></td>\n<td>Month abbreviation in Associated Press\nstyle. Proprietary extension.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'Jan.'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'Feb.'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'March'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'May'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code></td>\n<td>Number of days in the given month.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">28</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">31</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><strong>Year</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">y</span></code></td>\n<td>Year, 2 digits with leading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'00'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'99'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">Y</span></code></td>\n<td>Year, 4 digits with leading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'0001'</span></code>, \u2026, <code class=\"docutils literal notranslate\"><span class=\"pre\">'1999'</span></code>, \u2026, <code class=\"docutils literal notranslate\"><span class=\"pre\">'9999'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">L</span></code></td>\n<td>Boolean for whether it\u2019s a leap year.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">o</span></code></td>\n<td>ISO-8601 week-numbering year,\ncorresponding to the ISO-8601 week\nnumber (W) which uses leap weeks. See Y\nfor the more common year format.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1999'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><strong>Time</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">g</span></code></td>\n<td>Hour, 12-hour format without leading\nzeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'12'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">G</span></code></td>\n<td>Hour, 24-hour format without leading\nzeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'0'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'23'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">h</span></code></td>\n<td>Hour, 12-hour format.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'01'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'12'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">H</span></code></td>\n<td>Hour, 24-hour format.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'00'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'23'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">i</span></code></td>\n<td>Minutes.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'00'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'59'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">s</span></code></td>\n<td>Seconds, 2 digits with leading zeros.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'00'</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'59'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code></td>\n<td>Microseconds.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">000000</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">999999</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'a.m.'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">'p.m.'</span></code> (Note that\nthis is slightly different than PHP\u2019s\noutput, because this includes periods\nto match Associated Press style.)</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'a.m.'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">A</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'AM'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">'PM'</span></code>.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'AM'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">f</span></code></td>\n<td>Time, in 12-hour hours and minutes,\nwith minutes left off if they\u2019re zero.\nProprietary extension.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'1:30'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">P</span></code></td>\n<td>Time, in 12-hour hours, minutes and\n\u2018a.m.\u2019/\u2019p.m.\u2019, with minutes left off\nif they\u2019re zero and the special-case\nstrings \u2018midnight\u2019 and \u2018noon\u2019 if\nappropriate. Proprietary extension.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1</span> <span class=\"pre\">a.m.'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'1:30</span> <span class=\"pre\">p.m.'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'midnight'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'noon'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'12:30</span> <span class=\"pre\">p.m.'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><strong>Timezone</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">e</span></code></td>\n<td>Timezone name. Could be in any format,\nor might return an empty string,\ndepending on the datetime.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'GMT'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'-500'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'US/Eastern'</span></code>, etc.</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">I</span></code></td>\n<td>Daylight saving time, whether it\u2019s in\neffect or not.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'1'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">'0'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">O</span></code></td>\n<td>Difference to Greenwich time in hours.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'+0200'</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">T</span></code></td>\n<td>Time zone of this machine.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'EST'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'MDT'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">Z</span></code></td>\n<td>Time zone offset in seconds. The\noffset for timezones west of UTC is\nalways negative, and for those east of\nUTC is always positive.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">-43200</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">43200</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><strong>Date/Time</strong></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">c</span></code></td>\n<td>ISO 8601 format. (Note: unlike other\nformatters, such as \u201cZ\u201d, \u201cO\u201d or \u201cr\u201d,\nthe \u201cc\u201d formatter will not add timezone\noffset if value is a naive datetime\n(see <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.tzinfo\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.tzinfo</span></code></a>).</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">2008-01-02T10:30:00.000123+02:00</span></code>,\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">2008-01-02T10:30:00.000123</span></code> if the datetime is naive</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">r</span></code></td>\n<td><span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc5322.html#section-3.3\"><strong>RFC 5322</strong></a>\nformatted date.</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">'Thu,</span> <span class=\"pre\">21</span> <span class=\"pre\">Dec</span> <span class=\"pre\">2000</span> <span class=\"pre\">16:01:07</span> <span class=\"pre\">+0200'</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">U</span></code></td>\n<td>Seconds since the Unix Epoch\n(January 1 1970 00:00:00 UTC).</td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;D d M Y&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> object (e.g., the result of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime.now()</span></code>), the output will be the string\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'Wed</span> <span class=\"pre\">09</span> <span class=\"pre\">Jan</span> <span class=\"pre\">2008'</span></code>.</p>\n<p>The format passed can be one of the predefined ones <a class=\"reference internal\" href=\"../../settings/#std-setting-DATE_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATE_FORMAT</span></code></a>,\n<a class=\"reference internal\" href=\"../../settings/#std-setting-DATETIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATETIME_FORMAT</span></code></a>, <a class=\"reference internal\" href=\"../../settings/#std-setting-SHORT_DATE_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SHORT_DATE_FORMAT</span></code></a> or\n<a class=\"reference internal\" href=\"../../settings/#std-setting-SHORT_DATETIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SHORT_DATETIME_FORMAT</span></code></a>, or a custom format that uses the format\nspecifiers shown in the table above. Note that predefined formats may vary\ndepending on the current locale.</p>\n<p>Assuming that <a class=\"reference internal\" href=\"../../settings/#std-setting-LANGUAGE_CODE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code></a> is, for example, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;es&quot;</span></code>, then for:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;SHORT_DATE_FORMAT&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>the output would be the string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;09/01/2008&quot;</span></code> (the <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;SHORT_DATE_FORMAT&quot;</span></code>\nformat specifier for the <code class=\"docutils literal notranslate\"><span class=\"pre\">es</span></code> locale as shipped with Django is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;d/m/Y&quot;</span></code>).</p>\n<p>When used without a format string, the <code class=\"docutils literal notranslate\"><span class=\"pre\">DATE_FORMAT</span></code> format specifier is\nused. Assuming the same settings as the previous example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">date</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>outputs <code class=\"docutils literal notranslate\"><span class=\"pre\">9</span> <span class=\"pre\">de</span> <span class=\"pre\">Enero</span> <span class=\"pre\">de</span> <span class=\"pre\">2008</span></code> (the <code class=\"docutils literal notranslate\"><span class=\"pre\">DATE_FORMAT</span></code> format specifier for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">es</span></code> locale is <code class=\"docutils literal notranslate\"><span class=\"pre\">r'j</span> <span class=\"pre\">\\d\\e</span> <span class=\"pre\">F</span> <span class=\"pre\">\\d\\e</span> <span class=\"pre\">Y'</span></code>). Both \u201cd\u201d and \u201ce\u201d are\nbackslash-escaped, because otherwise each is a format string that displays the\nday and the timezone name, respectively.</p>\n<p>You can combine <code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code> with the <a class=\"reference internal\" href=\"#std-templatefilter-time\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">time</span></code></a> filter to render a full\nrepresentation of a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> value. E.g.:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;D d M Y&quot;</span> <span class=\"cp\">}}</span> <span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">time</span><span class=\"s2\">:&quot;H:i&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-default\">\n<span id=\"s-std-templatefilter-default\"></span><span id=\"s-std:templatefilter-default\"></span><span id=\"default\"></span><span id=\"std-templatefilter-default\"></span><span id=\"std:templatefilter-default\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code><a class=\"headerlink\" href=\"#default\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If value evaluates to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, uses the given default. Otherwise, uses the\nvalue.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;nothing&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&quot;</span></code> (the empty string), the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">nothing</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-default-if-none\">\n<span id=\"s-std-templatefilter-default_if_none\"></span><span id=\"s-std:templatefilter-default_if_none\"></span><span id=\"default-if-none\"></span><span id=\"std-templatefilter-default_if_none\"></span><span id=\"std:templatefilter-default_if_none\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">default_if_none</span></code><a class=\"headerlink\" href=\"#default-if-none\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If (and only if) value is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, uses the given default. Otherwise, uses the\nvalue.</p>\n<p>Note that if an empty string is given, the default value will <em>not</em> be used.\nUse the <a class=\"reference internal\" href=\"#std-templatefilter-default\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">default</span></code></a> filter if you want to fallback for empty strings.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">default_if_none</span><span class=\"s2\">:&quot;nothing&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">nothing</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-dictsort\">\n<span id=\"s-std-templatefilter-dictsort\"></span><span id=\"s-std:templatefilter-dictsort\"></span><span id=\"dictsort\"></span><span id=\"std-templatefilter-dictsort\"></span><span id=\"std:templatefilter-dictsort\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">dictsort</span></code><a class=\"headerlink\" href=\"#dictsort\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Takes a list of dictionaries and returns that list sorted by the key given in\nthe argument.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">dictsort</span><span class=\"s2\">:&quot;name&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;zed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;amy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;joe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">31</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>then the output would be:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;amy&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">22</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;joe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">31</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;zed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">19</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>You can also do more complicated things like:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">book</span> <span class=\"k\">in</span> <span class=\"nv\">books</span><span class=\"o\">|</span><span class=\"nf\">dictsort</span><span class=\"s2\">:&quot;author.age&quot;</span> <span class=\"cp\">%}</span>\n    * <span class=\"cp\">{{</span> <span class=\"nv\">book.title</span> <span class=\"cp\">}}</span> (<span class=\"cp\">{{</span> <span class=\"nv\">book.author.name</span> <span class=\"cp\">}}</span>)\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">books</span></code> is:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1984&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;George&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">45</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Timequake&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Kurt&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">75</span><span class=\"p\">}},</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Alice&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;author&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Lewis&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">33</span><span class=\"p\">}},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>then the output would be:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>* Alice (Lewis)\n* 1984 (George)\n* Timequake (Kurt)\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">dictsort</span></code> can also order a list of lists (or any other object implementing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code>) by elements at specified index. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">dictsort</span><span class=\"o\">:</span><span class=\"m\">0</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;42&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;c&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;string&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>then the output would be:</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;42&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;c&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;string&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>You must pass the index as an integer rather than a string. The following\nproduce empty output:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">values</span><span class=\"o\">|</span><span class=\"nf\">dictsort</span><span class=\"s2\">:&quot;0&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Ordering by elements at specified index is not supported on dictionaries.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 2.2.26:</span> <p>In older versions, ordering elements at specified index was supported on\ndictionaries.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-dictsortreversed\">\n<span id=\"s-std-templatefilter-dictsortreversed\"></span><span id=\"s-std:templatefilter-dictsortreversed\"></span><span id=\"dictsortreversed\"></span><span id=\"std-templatefilter-dictsortreversed\"></span><span id=\"std:templatefilter-dictsortreversed\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">dictsortreversed</span></code><a class=\"headerlink\" href=\"#dictsortreversed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Takes a list of dictionaries and returns that list sorted in reverse order by\nthe key given in the argument. This works exactly the same as the above filter,\nbut the returned value will be in reverse order.</p>\n</div>\n<div class=\"section\" id=\"s-divisibleby\">\n<span id=\"s-std-templatefilter-divisibleby\"></span><span id=\"s-std:templatefilter-divisibleby\"></span><span id=\"divisibleby\"></span><span id=\"std-templatefilter-divisibleby\"></span><span id=\"std:templatefilter-divisibleby\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">divisibleby</span></code><a class=\"headerlink\" href=\"#divisibleby\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the value is divisible by the argument.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">divisibleby</span><span class=\"s2\">:&quot;3&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">21</span></code>, the output would be <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-escape\">\n<span id=\"s-std-templatefilter-escape\"></span><span id=\"s-std:templatefilter-escape\"></span><span id=\"escape\"></span><span id=\"std-templatefilter-escape\"></span><span id=\"std:templatefilter-escape\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code><a class=\"headerlink\" href=\"#escape\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Escapes a string\u2019s HTML. Specifically, it makes these replacements:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;lt;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;gt;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code> (single quote) is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;#x27;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span></code> (double quote) is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;quot;</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> is converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;amp;</span></code></li>\n</ul>\n<p>Applying <code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code> to a variable that would normally have auto-escaping\napplied to the result will only result in one round of escaping being done. So\nit is safe to use this function even in auto-escaping environments. If you want\nmultiple escaping passes to be applied, use the <a class=\"reference internal\" href=\"#std-templatefilter-force_escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">force_escape</span></code></a> filter.</p>\n<p>For example, you can apply <code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code> to fields when <a class=\"reference internal\" href=\"#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> is off:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">title</span><span class=\"o\">|</span><span class=\"nf\">escape</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<div class=\"admonition-chaining-escape-with-other-filters admonition\">\n<p class=\"first admonition-title\">Chaining <code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code> with other filters</p>\n<p>As mentioned in the <a class=\"reference internal\" href=\"#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> section, when filters including\n<code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code> are chained together, it can result in unexpected outcomes if\npreceding filters mark a potentially unsafe string as safe due to the lack\nof escaping caused by <a class=\"reference internal\" href=\"#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a> being <code class=\"docutils literal notranslate\"><span class=\"pre\">off</span></code>.</p>\n<p>In such cases, chaining <code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code> would not reescape strings that have\nalready been marked as safe.</p>\n<p class=\"last\">This is especially important when using filters that operate on sequences,\nfor example <a class=\"reference internal\" href=\"#std-templatefilter-join\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">join</span></code></a>. If you need to escape each element in a\nsequence, use the dedicated <a class=\"reference internal\" href=\"#std-templatefilter-escapeseq\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escapeseq</span></code></a> filter.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-escapejs\">\n<span id=\"s-std-templatefilter-escapejs\"></span><span id=\"s-std:templatefilter-escapejs\"></span><span id=\"escapejs\"></span><span id=\"std-templatefilter-escapejs\"></span><span id=\"std:templatefilter-escapejs\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">escapejs</span></code><a class=\"headerlink\" href=\"#escapejs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Escapes characters for use in JavaScript strings. This does <em>not</em> make the\nstring safe for use in HTML or JavaScript template literals, but does protect\nyou from syntax errors when using templates to generate JavaScript/JSON.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">escapejs</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;testing\\r\\njavascript</span> <span class=\"pre\">'string\\&quot;</span> <span class=\"pre\">&lt;b&gt;escaping&lt;/b&gt;&quot;</span></code>,\nthe output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;testing\\\\u000D\\\\u000Ajavascript</span> <span class=\"pre\">\\\\u0027string\\\\u0022</span> <span class=\"pre\">\\\\u003Cb\\\\u003Eescaping\\\\u003C/b\\\\u003E&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-escapeseq\">\n<span id=\"s-std-templatefilter-escapeseq\"></span><span id=\"s-std:templatefilter-escapeseq\"></span><span id=\"escapeseq\"></span><span id=\"std-templatefilter-escapeseq\"></span><span id=\"std:templatefilter-escapeseq\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">escapeseq</span></code><a class=\"headerlink\" href=\"#escapeseq\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django Development version.</span> </div>\n<p>Applies the <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter to each element of a sequence. Useful in\nconjunction with other filters that operate on sequences, such as\n<a class=\"reference internal\" href=\"#std-templatefilter-join\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">join</span></code></a>. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">my_list</span><span class=\"o\">|</span><span class=\"nf\">escapeseq</span><span class=\"o\">|</span><span class=\"nf\">join</span><span class=\"s2\">:&quot;, &quot;</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-filesizeformat\">\n<span id=\"s-std-templatefilter-filesizeformat\"></span><span id=\"s-std:templatefilter-filesizeformat\"></span><span id=\"filesizeformat\"></span><span id=\"std-templatefilter-filesizeformat\"></span><span id=\"std:templatefilter-filesizeformat\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">filesizeformat</span></code><a class=\"headerlink\" href=\"#filesizeformat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Formats the value like a \u2018human-readable\u2019 file size (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">'13</span> <span class=\"pre\">KB'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'4.1</span> <span class=\"pre\">MB'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'102</span> <span class=\"pre\">bytes'</span></code>, etc.).</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">filesizeformat</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is 123456789, the output would be <code class=\"docutils literal notranslate\"><span class=\"pre\">117.7</span> <span class=\"pre\">MB</span></code>.</p>\n<div class=\"admonition-file-sizes-and-si-units admonition\">\n<p class=\"first admonition-title\">File sizes and SI units</p>\n<p class=\"last\">Strictly speaking, <code class=\"docutils literal notranslate\"><span class=\"pre\">filesizeformat</span></code> does not conform to the International\nSystem of Units which recommends using KiB, MiB, GiB, etc. when byte sizes\nare calculated in powers of 1024 (which is the case here). Instead, Django\nuses traditional unit names (KB, MB, GB, etc.) corresponding to names that\nare more commonly used.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-first\">\n<span id=\"s-std-templatefilter-first\"></span><span id=\"s-std:templatefilter-first\"></span><span id=\"first\"></span><span id=\"std-templatefilter-first\"></span><span id=\"std:templatefilter-first\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">first</span></code><a class=\"headerlink\" href=\"#first\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns the first item in a list.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">first</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is the list <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c']</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">'a'</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-floatformat\">\n<span id=\"s-std-templatefilter-floatformat\"></span><span id=\"s-std:templatefilter-floatformat\"></span><span id=\"floatformat\"></span><span id=\"std-templatefilter-floatformat\"></span><span id=\"std:templatefilter-floatformat\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code><a class=\"headerlink\" href=\"#floatformat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When used without an argument, rounds a floating-point number to one decimal\nplace \u2013 but only if there\u2019s a decimal part to be displayed. For example:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"26%\" />\n<col width=\"57%\" />\n<col width=\"17%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\"><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></th>\n<th class=\"head\">Template</th>\n<th class=\"head\">Output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.23234</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.2</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.00000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.26000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.3</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>If used with a numeric integer argument, <code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code> rounds a number to\nthat many decimal places. For example:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"24%\" />\n<col width=\"57%\" />\n<col width=\"20%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\"><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></th>\n<th class=\"head\">Template</th>\n<th class=\"head\">Output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.23234</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:3</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.232</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.00000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:3</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.000</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.26000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:3</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.260</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>Particularly useful is passing 0 (zero) as the argument which will round the\nfloat to the nearest integer.</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"22%\" />\n<col width=\"59%\" />\n<col width=\"19%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\"><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></th>\n<th class=\"head\">Template</th>\n<th class=\"head\">Output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.23234</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;0&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.00000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;0&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">39.56000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;0&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">40</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>If the argument passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code> is negative, it will round a number\nto that many decimal places \u2013 but only if there\u2019s a decimal part to be\ndisplayed. For example:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"22%\" />\n<col width=\"59%\" />\n<col width=\"19%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\"><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></th>\n<th class=\"head\">Template</th>\n<th class=\"head\">Output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.23234</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;-3&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.232</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.00000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;-3&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.26000</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;-3&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.260</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>If the argument passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code> has the <code class=\"docutils literal notranslate\"><span class=\"pre\">g</span></code> suffix, it will force\ngrouping by the <a class=\"reference internal\" href=\"../../settings/#std-setting-THOUSAND_SEPARATOR\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">THOUSAND_SEPARATOR</span></code></a> for the active locale. For\nexample, when the active locale is <code class=\"docutils literal notranslate\"><span class=\"pre\">en</span></code> (English):</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"21%\" />\n<col width=\"57%\" />\n<col width=\"22%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\"><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></th>\n<th class=\"head\">Template</th>\n<th class=\"head\">Output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34232.34</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;2g&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34,232.34</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34232.06</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;g&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34,232.1</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34232.00</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;-3g&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34,232</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>Output is always localized (independently of the <a class=\"reference internal\" href=\"../../../topics/i18n/formatting/#std-templatetag-localize\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">localize</span> <span class=\"pre\">off</span> <span class=\"pre\">%}</span></code></a> tag) unless the argument passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code> has the <code class=\"docutils literal notranslate\"><span class=\"pre\">u</span></code>\nsuffix, which will force disabling localization. For example, when the active\nlocale is <code class=\"docutils literal notranslate\"><span class=\"pre\">pl</span></code> (Polish):</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"21%\" />\n<col width=\"57%\" />\n<col width=\"22%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\"><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></th>\n<th class=\"head\">Template</th>\n<th class=\"head\">Output</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.23234</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;3&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34,232</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.23234</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">value|floatformat:&quot;3u&quot;</span> <span class=\"pre\">}}</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">34.232</span></code></td>\n</tr>\n</tbody>\n</table>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code> with no argument is equivalent to using <code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code>\nwith an argument of <code class=\"docutils literal notranslate\"><span class=\"pre\">-1</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-force-escape\">\n<span id=\"s-std-templatefilter-force_escape\"></span><span id=\"s-std:templatefilter-force_escape\"></span><span id=\"force-escape\"></span><span id=\"std-templatefilter-force_escape\"></span><span id=\"std:templatefilter-force_escape\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">force_escape</span></code><a class=\"headerlink\" href=\"#force-escape\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Applies HTML escaping to a string (see the <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter for\ndetails). This filter is applied <em>immediately</em> and returns a new, escaped\nstring. This is useful in the rare cases where you need multiple escaping or\nwant to apply other filters to the escaped results. Normally, you want to use\nthe <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter.</p>\n<p>For example, if you want to catch the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;p&gt;</span></code> HTML elements created by\nthe <a class=\"reference internal\" href=\"#std-templatefilter-linebreaks\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">linebreaks</span></code></a> filter:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">autoescape</span> <span class=\"nv\">off</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">body</span><span class=\"o\">|</span><span class=\"nf\">linebreaks</span><span class=\"o\">|</span><span class=\"nf\">force_escape</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endautoescape</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-get-digit\">\n<span id=\"s-std-templatefilter-get_digit\"></span><span id=\"s-std:templatefilter-get_digit\"></span><span id=\"get-digit\"></span><span id=\"std-templatefilter-get_digit\"></span><span id=\"std:templatefilter-get_digit\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">get_digit</span></code><a class=\"headerlink\" href=\"#get-digit\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Given a whole number, returns the requested digit, where 1 is the right-most\ndigit, 2 is the second-right-most digit, etc. Returns the original value for\ninvalid input (if input or argument is not an integer, or if argument is less\nthan 1). Otherwise, output is always an integer.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">get_digit</span><span class=\"s2\">:&quot;2&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">123456789</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">8</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-iriencode\">\n<span id=\"s-std-templatefilter-iriencode\"></span><span id=\"s-std:templatefilter-iriencode\"></span><span id=\"iriencode\"></span><span id=\"std-templatefilter-iriencode\"></span><span id=\"std:templatefilter-iriencode\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">iriencode</span></code><a class=\"headerlink\" href=\"#iriencode\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts an IRI (Internationalized Resource Identifier) to a string that is\nsuitable for including in a URL. This is necessary if you\u2019re trying to use\nstrings containing non-ASCII characters in a URL.</p>\n<p>It\u2019s safe to use this filter on a string that has already gone through the\n<a class=\"reference internal\" href=\"#std-templatefilter-urlencode\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">urlencode</span></code></a> filter.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">iriencode</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;?test=1&amp;me=2&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;?test=1&amp;amp;me=2&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-join\">\n<span id=\"s-std-templatefilter-join\"></span><span id=\"s-std:templatefilter-join\"></span><span id=\"join\"></span><span id=\"std-templatefilter-join\"></span><span id=\"std:templatefilter-join\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">join</span></code><a class=\"headerlink\" href=\"#join\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Joins a list with a string, like Python\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">str.join(list)</span></code></p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">join</span><span class=\"s2\">:&quot; // &quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is the list <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c']</span></code>, the output will be the string\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;a</span> <span class=\"pre\">//</span> <span class=\"pre\">b</span> <span class=\"pre\">//</span> <span class=\"pre\">c&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-json-script\">\n<span id=\"s-std-templatefilter-json_script\"></span><span id=\"s-std:templatefilter-json_script\"></span><span id=\"json-script\"></span><span id=\"std-templatefilter-json_script\"></span><span id=\"std:templatefilter-json_script\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">json_script</span></code><a class=\"headerlink\" href=\"#json-script\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Safely outputs a Python object as JSON, wrapped in a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;script&gt;</span></code> tag, ready\nfor use with JavaScript.</p>\n<p><strong>Argument:</strong> The optional HTML \u201cid\u201d of the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;script&gt;</span></code> tag.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">json_script</span><span class=\"s2\">:&quot;hello-data&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is the dictionary <code class=\"docutils literal notranslate\"><span class=\"pre\">{'hello':</span> <span class=\"pre\">'world'}</span></code>, the output will be:</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;hello-data&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;application/json&quot;</span><span class=\"p\">&gt;{</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;world&quot;</span><span class=\"p\">}&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The resulting data can be accessed in JavaScript like this:</p>\n<div class=\"highlight-javascript notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">value</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">JSON</span><span class=\"p\">.</span><span class=\"nx\">parse</span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s1\">&#39;hello-data&#39;</span><span class=\"p\">).</span><span class=\"nx\">textContent</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>XSS attacks are mitigated by escaping the characters \u201c&lt;\u201d, \u201c&gt;\u201d and \u201c&amp;\u201d. For\nexample if <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">{'hello':</span> <span class=\"pre\">'world&lt;/script&gt;&amp;amp;'}</span></code>, the output is:</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;hello-data&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;application/json&quot;</span><span class=\"p\">&gt;{</span><span class=\"s2\">&quot;hello&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;world\\\\u003C/script\\\\u003E\\\\u0026amp;&quot;</span><span class=\"p\">}&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This is compatible with a strict Content Security Policy that prohibits in-page\nscript execution. It also maintains a clean separation between passive data and\nexecutable code.</p>\n</div>\n<div class=\"section\" id=\"s-last\">\n<span id=\"s-std-templatefilter-last\"></span><span id=\"s-std:templatefilter-last\"></span><span id=\"last\"></span><span id=\"std-templatefilter-last\"></span><span id=\"std:templatefilter-last\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">last</span></code><a class=\"headerlink\" href=\"#last\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns the last item in a list.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">last</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is the list <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c',</span> <span class=\"pre\">'d']</span></code>, the output will be the\nstring <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;d&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-length\">\n<span id=\"s-std-templatefilter-length\"></span><span id=\"s-std:templatefilter-length\"></span><span id=\"length\"></span><span id=\"std-templatefilter-length\"></span><span id=\"std:templatefilter-length\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">length</span></code><a class=\"headerlink\" href=\"#length\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns the length of the value. This works for both strings and lists.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c',</span> <span class=\"pre\">'d']</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;abcd&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">4</span></code>.</p>\n<p>The filter returns <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> for an undefined variable.</p>\n</div>\n<div class=\"section\" id=\"s-length-is\">\n<span id=\"s-std-templatefilter-length_is\"></span><span id=\"s-std:templatefilter-length_is\"></span><span id=\"length-is\"></span><span id=\"std-templatefilter-length_is\"></span><span id=\"std:templatefilter-length_is\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">length_is</span></code><a class=\"headerlink\" href=\"#length-is\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2.</span></p>\n</div>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the value\u2019s length is the argument, or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">length_is</span><span class=\"s2\">:&quot;4&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c',</span> <span class=\"pre\">'d']</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;abcd&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-linebreaks\">\n<span id=\"s-std-templatefilter-linebreaks\"></span><span id=\"s-std:templatefilter-linebreaks\"></span><span id=\"linebreaks\"></span><span id=\"std-templatefilter-linebreaks\"></span><span id=\"std:templatefilter-linebreaks\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">linebreaks</span></code><a class=\"headerlink\" href=\"#linebreaks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Replaces line breaks in plain text with appropriate HTML; a single\nnewline becomes an HTML line break (<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;br&gt;</span></code>) and a new line\nfollowed by a blank line becomes a paragraph break (<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;/p&gt;</span></code>).</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">linebreaks</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">Joel\\nis</span> <span class=\"pre\">a</span> <span class=\"pre\">slug</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;p&gt;Joel&lt;br&gt;is</span> <span class=\"pre\">a</span>\n<span class=\"pre\">slug&lt;/p&gt;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-linebreaksbr\">\n<span id=\"s-std-templatefilter-linebreaksbr\"></span><span id=\"s-std:templatefilter-linebreaksbr\"></span><span id=\"linebreaksbr\"></span><span id=\"std-templatefilter-linebreaksbr\"></span><span id=\"std:templatefilter-linebreaksbr\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">linebreaksbr</span></code><a class=\"headerlink\" href=\"#linebreaksbr\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts all newlines in a piece of plain text to HTML line breaks\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;br&gt;</span></code>).</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">linebreaksbr</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">Joel\\nis</span> <span class=\"pre\">a</span> <span class=\"pre\">slug</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">Joel&lt;br&gt;is</span> <span class=\"pre\">a</span>\n<span class=\"pre\">slug</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-linenumbers\">\n<span id=\"s-std-templatefilter-linenumbers\"></span><span id=\"s-std:templatefilter-linenumbers\"></span><span id=\"linenumbers\"></span><span id=\"std-templatefilter-linenumbers\"></span><span id=\"std:templatefilter-linenumbers\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">linenumbers</span></code><a class=\"headerlink\" href=\"#linenumbers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Displays text with line numbers.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">linenumbers</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>one\ntwo\nthree\n</pre></div>\n</div>\n<p>the output will be:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>1. one\n2. two\n3. three\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-ljust\">\n<span id=\"s-std-templatefilter-ljust\"></span><span id=\"s-std:templatefilter-ljust\"></span><span id=\"ljust\"></span><span id=\"std-templatefilter-ljust\"></span><span id=\"std:templatefilter-ljust\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ljust</span></code><a class=\"headerlink\" href=\"#ljust\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Left-aligns the value in a field of a given width.</p>\n<p><strong>Argument:</strong> field size</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>&quot;<span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">ljust</span><span class=\"s2\">:&quot;10&quot;</span> <span class=\"cp\">}}</span>&quot;\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">Django</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Django</span>&#160;&#160;&#160; <span class=\"pre\">&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-lower\">\n<span id=\"s-std-templatefilter-lower\"></span><span id=\"s-std:templatefilter-lower\"></span><span id=\"lower\"></span><span id=\"std-templatefilter-lower\"></span><span id=\"std:templatefilter-lower\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">lower</span></code><a class=\"headerlink\" href=\"#lower\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts a string into all lowercase.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">Totally</span> <span class=\"pre\">LOVING</span> <span class=\"pre\">this</span> <span class=\"pre\">Album!</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">totally</span> <span class=\"pre\">loving</span> <span class=\"pre\">this</span> <span class=\"pre\">album!</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-make-list\">\n<span id=\"s-std-templatefilter-make_list\"></span><span id=\"s-std:templatefilter-make_list\"></span><span id=\"make-list\"></span><span id=\"std-templatefilter-make_list\"></span><span id=\"std:templatefilter-make_list\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">make_list</span></code><a class=\"headerlink\" href=\"#make-list\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns the value turned into a list. For a string, it\u2019s a list of characters.\nFor an integer, the argument is cast to a string before creating a list.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">make_list</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is the string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel&quot;</span></code>, the output would be the list\n<code class=\"docutils literal notranslate\"><span class=\"pre\">['J',</span> <span class=\"pre\">'o',</span> <span class=\"pre\">'e',</span> <span class=\"pre\">'l']</span></code>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">123</span></code>, the output will be the\nlist <code class=\"docutils literal notranslate\"><span class=\"pre\">['1',</span> <span class=\"pre\">'2',</span> <span class=\"pre\">'3']</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-phone2numeric\">\n<span id=\"s-std-templatefilter-phone2numeric\"></span><span id=\"s-std:templatefilter-phone2numeric\"></span><span id=\"phone2numeric\"></span><span id=\"std-templatefilter-phone2numeric\"></span><span id=\"std:templatefilter-phone2numeric\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">phone2numeric</span></code><a class=\"headerlink\" href=\"#phone2numeric\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts a phone number (possibly containing letters) to its numerical\nequivalent.</p>\n<p>The input doesn\u2019t have to be a valid phone number. This will happily convert\nany string.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">phone2numeric</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">800-COLLECT</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">800-2655328</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-pluralize\">\n<span id=\"s-std-templatefilter-pluralize\"></span><span id=\"s-std:templatefilter-pluralize\"></span><span id=\"pluralize\"></span><span id=\"std-templatefilter-pluralize\"></span><span id=\"std:templatefilter-pluralize\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pluralize</span></code><a class=\"headerlink\" href=\"#pluralize\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns a plural suffix if the value is not <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'1'</span></code>, or an object of\nlength 1. By default, this suffix is <code class=\"docutils literal notranslate\"><span class=\"pre\">'s'</span></code>.</p>\n<p>Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>You have <span class=\"cp\">{{</span> <span class=\"nv\">num_messages</span> <span class=\"cp\">}}</span> message<span class=\"cp\">{{</span> <span class=\"nv\">num_messages</span><span class=\"o\">|</span><span class=\"nf\">pluralize</span> <span class=\"cp\">}}</span>.\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">num_messages</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">You</span> <span class=\"pre\">have</span> <span class=\"pre\">1</span> <span class=\"pre\">message.</span></code>\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">num_messages</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">2</span></code>  the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">You</span> <span class=\"pre\">have</span> <span class=\"pre\">2</span> <span class=\"pre\">messages.</span></code></p>\n<p>For words that require a suffix other than <code class=\"docutils literal notranslate\"><span class=\"pre\">'s'</span></code>, you can provide an alternate\nsuffix as a parameter to the filter.</p>\n<p>Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>You have <span class=\"cp\">{{</span> <span class=\"nv\">num_walruses</span> <span class=\"cp\">}}</span> walrus<span class=\"cp\">{{</span> <span class=\"nv\">num_walruses</span><span class=\"o\">|</span><span class=\"nf\">pluralize</span><span class=\"s2\">:&quot;es&quot;</span> <span class=\"cp\">}}</span>.\n</pre></div>\n</div>\n<p>For words that don\u2019t pluralize by simple suffix, you can specify both a\nsingular and plural suffix, separated by a comma.</p>\n<p>Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>You have <span class=\"cp\">{{</span> <span class=\"nv\">num_cherries</span> <span class=\"cp\">}}</span> cherr<span class=\"cp\">{{</span> <span class=\"nv\">num_cherries</span><span class=\"o\">|</span><span class=\"nf\">pluralize</span><span class=\"s2\">:&quot;y,ies&quot;</span> <span class=\"cp\">}}</span>.\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Use <a class=\"reference internal\" href=\"../../../topics/i18n/translation/#std-templatetag-blocktranslate\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">blocktranslate</span></code></a> to pluralize translated strings.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-pprint\">\n<span id=\"s-std-templatefilter-pprint\"></span><span id=\"s-std:templatefilter-pprint\"></span><span id=\"pprint\"></span><span id=\"std-templatefilter-pprint\"></span><span id=\"std:templatefilter-pprint\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pprint</span></code><a class=\"headerlink\" href=\"#pprint\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A wrapper around <a class=\"reference external\" href=\"https://docs.python.org/3/library/pprint.html#pprint.pprint\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">pprint.pprint()</span></code></a> \u2013 for debugging, really.</p>\n</div>\n<div class=\"section\" id=\"s-random\">\n<span id=\"s-std-templatefilter-random\"></span><span id=\"s-std:templatefilter-random\"></span><span id=\"random\"></span><span id=\"std-templatefilter-random\"></span><span id=\"std:templatefilter-random\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">random</span></code><a class=\"headerlink\" href=\"#random\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns a random item from the given list.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">random</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is the list <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c',</span> <span class=\"pre\">'d']</span></code>, the output could be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;b&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-rjust\">\n<span id=\"s-std-templatefilter-rjust\"></span><span id=\"s-std:templatefilter-rjust\"></span><span id=\"rjust\"></span><span id=\"std-templatefilter-rjust\"></span><span id=\"std:templatefilter-rjust\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">rjust</span></code><a class=\"headerlink\" href=\"#rjust\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Right-aligns the value in a field of a given width.</p>\n<p><strong>Argument:</strong> field size</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>&quot;<span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">rjust</span><span class=\"s2\">:&quot;10&quot;</span> <span class=\"cp\">}}</span>&quot;\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">Django</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span>&#160;&#160;&#160; <span class=\"pre\">Django&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-safe\">\n<span id=\"s-std-templatefilter-safe\"></span><span id=\"s-std:templatefilter-safe\"></span><span id=\"safe\"></span><span id=\"std-templatefilter-safe\"></span><span id=\"std:templatefilter-safe\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code><a class=\"headerlink\" href=\"#safe\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Marks a string as not requiring further HTML escaping prior to output. When\nautoescaping is off, this filter has no effect.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>If you are chaining filters, a filter applied after <code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code> can\nmake the contents unsafe again. For example, the following code\nprints the variable as is, unescaped:</p>\n<div class=\"last highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">var</span><span class=\"o\">|</span><span class=\"nf\">safe</span><span class=\"o\">|</span><span class=\"nf\">escape</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-safeseq\">\n<span id=\"s-std-templatefilter-safeseq\"></span><span id=\"s-std:templatefilter-safeseq\"></span><span id=\"safeseq\"></span><span id=\"std-templatefilter-safeseq\"></span><span id=\"std:templatefilter-safeseq\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">safeseq</span></code><a class=\"headerlink\" href=\"#safeseq\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Applies the <a class=\"reference internal\" href=\"#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a> filter to each element of a sequence. Useful in\nconjunction with other filters that operate on sequences, such as\n<a class=\"reference internal\" href=\"#std-templatefilter-join\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">join</span></code></a>. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">some_list</span><span class=\"o\">|</span><span class=\"nf\">safeseq</span><span class=\"o\">|</span><span class=\"nf\">join</span><span class=\"s2\">:&quot;, &quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>You couldn\u2019t use the <a class=\"reference internal\" href=\"#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a> filter directly in this case, as it would\nfirst convert the variable into a string, rather than working with the\nindividual elements of the sequence.</p>\n</div>\n<div class=\"section\" id=\"s-slice\">\n<span id=\"s-std-templatefilter-slice\"></span><span id=\"s-std:templatefilter-slice\"></span><span id=\"slice\"></span><span id=\"std-templatefilter-slice\"></span><span id=\"std:templatefilter-slice\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">slice</span></code><a class=\"headerlink\" href=\"#slice\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns a slice of the list.</p>\n<p>Uses the same syntax as Python\u2019s list slicing. See\n<a class=\"reference external\" href=\"https://diveinto.org/python3/native-datatypes.html#slicinglists\">https://diveinto.org/python3/native-datatypes.html#slicinglists</a> for an\nintroduction.</p>\n<p>Example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">some_list</span><span class=\"o\">|</span><span class=\"nf\">slice</span><span class=\"s2\">:&quot;:2&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">some_list</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b',</span> <span class=\"pre\">'c']</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">['a',</span> <span class=\"pre\">'b']</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-slugify\">\n<span id=\"s-std-templatefilter-slugify\"></span><span id=\"s-std:templatefilter-slugify\"></span><span id=\"slugify\"></span><span id=\"std-templatefilter-slugify\"></span><span id=\"std:templatefilter-slugify\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">slugify</span></code><a class=\"headerlink\" href=\"#slugify\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts to ASCII. Converts spaces to hyphens. Removes characters that aren\u2019t\nalphanumerics, underscores, or hyphens. Converts to lowercase. Also strips\nleading and trailing whitespace.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">slugify</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;joel-is-a-slug&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-stringformat\">\n<span id=\"s-std-templatefilter-stringformat\"></span><span id=\"s-std:templatefilter-stringformat\"></span><span id=\"stringformat\"></span><span id=\"std-templatefilter-stringformat\"></span><span id=\"std:templatefilter-stringformat\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">stringformat</span></code><a class=\"headerlink\" href=\"#stringformat\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Formats the variable according to the argument, a string formatting specifier.\nThis specifier uses the <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#old-string-formatting\" title=\"(in Python v3.11)\"><span>printf-style String Formatting</span></a> syntax, with the exception\nthat the leading \u201c%\u201d is dropped.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">stringformat</span><span class=\"s2\">:&quot;E&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">10</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">1.000000E+01</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-striptags\">\n<span id=\"s-std-templatefilter-striptags\"></span><span id=\"s-std:templatefilter-striptags\"></span><span id=\"striptags\"></span><span id=\"std-templatefilter-striptags\"></span><span id=\"std:templatefilter-striptags\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">striptags</span></code><a class=\"headerlink\" href=\"#striptags\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Makes all possible efforts to strip all [X]HTML tags.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">striptags</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;b&gt;Joel&lt;/b&gt;</span> <span class=\"pre\">&lt;button&gt;is&lt;/button&gt;</span> <span class=\"pre\">a</span> <span class=\"pre\">&lt;span&gt;slug&lt;/span&gt;&quot;</span></code>, the\noutput will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&quot;</span></code>.</p>\n<div class=\"admonition-no-safety-guarantee admonition\">\n<p class=\"first admonition-title\">No safety guarantee</p>\n<p class=\"last\">Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">striptags</span></code> doesn\u2019t give any guarantee about its output being\nHTML safe, particularly with non valid HTML input. So <strong>NEVER</strong> apply the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code> filter to a <code class=\"docutils literal notranslate\"><span class=\"pre\">striptags</span></code> output. If you are looking for something\nmore robust, consider using a third-party HTML sanitizing tool.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-time\">\n<span id=\"s-std-templatefilter-time\"></span><span id=\"s-std:templatefilter-time\"></span><span id=\"time\"></span><span id=\"std-templatefilter-time\"></span><span id=\"std:templatefilter-time\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">time</span></code><a class=\"headerlink\" href=\"#time\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Formats a time according to the given format.</p>\n<p>Given format can be the predefined one <a class=\"reference internal\" href=\"../../settings/#std-setting-TIME_FORMAT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_FORMAT</span></code></a>, or a custom\nformat, same as the <a class=\"reference internal\" href=\"#std-templatefilter-date\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">date</span></code></a> filter. Note that the predefined format\nis locale-dependent.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">time</span><span class=\"s2\">:&quot;H:i&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime.now()</span></code>, the output will be\nthe string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;01:23&quot;</span></code>.</p>\n<p>Note that you can backslash-escape a format string if you want to use the\n\u201craw\u201d value. In this example, both \u201ch\u201d and \u201cm\u201d are backslash-escaped, because\notherwise each is a format string that displays the hour and the month,\nrespectively:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">time</span><span class=\"s2\">:&quot;H\\h i\\m&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>This would display as \u201c01h 23m\u201d.</p>\n<p>Another example:</p>\n<p>Assuming that <a class=\"reference internal\" href=\"../../settings/#std-setting-LANGUAGE_CODE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code></a> is, for example, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;de&quot;</span></code>, then for:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">time</span><span class=\"s2\">:&quot;TIME_FORMAT&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>the output will be the string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;01:23&quot;</span></code> (The <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;TIME_FORMAT&quot;</span></code> format\nspecifier for the <code class=\"docutils literal notranslate\"><span class=\"pre\">de</span></code> locale as shipped with Django is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;H:i&quot;</span></code>).</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">time</span></code> filter will only accept parameters in the format string that\nrelate to the time of day, not the date. If you need to format a <code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code>\nvalue, use the <a class=\"reference internal\" href=\"#std-templatefilter-date\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">date</span></code></a> filter instead (or along with <a class=\"reference internal\" href=\"#std-templatefilter-time\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">time</span></code></a> if\nyou need to render a full <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> value).</p>\n<p>There is one exception the above rule: When passed a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> value with\nattached timezone information (a <a class=\"reference internal\" href=\"../../../topics/i18n/timezones/#naive-vs-aware-datetimes\"><span class=\"std std-ref\">time-zone-aware</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> instance) the <code class=\"docutils literal notranslate\"><span class=\"pre\">time</span></code> filter will\naccept the timezone-related <a class=\"reference internal\" href=\"#date-and-time-formatting-specifiers\"><span class=\"std std-ref\">format specifiers</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">'e'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'O'</span></code> , <code class=\"docutils literal notranslate\"><span class=\"pre\">'T'</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">'Z'</span></code>.</p>\n<p>When used without a format string, the <code class=\"docutils literal notranslate\"><span class=\"pre\">TIME_FORMAT</span></code> format specifier is\nused:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">time</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>is the same as:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">time</span><span class=\"s2\">:&quot;TIME_FORMAT&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-timesince\">\n<span id=\"s-std-templatefilter-timesince\"></span><span id=\"s-std:templatefilter-timesince\"></span><span id=\"timesince\"></span><span id=\"std-templatefilter-timesince\"></span><span id=\"std:templatefilter-timesince\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">timesince</span></code><a class=\"headerlink\" href=\"#timesince\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Formats a date as the time since that date (e.g., \u201c4 days, 6 hours\u201d).</p>\n<p>Takes an optional argument that is a variable containing the date to use as\nthe comparison point (without the argument, the comparison point is <em>now</em>).\nFor example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">blog_date</span></code> is a date instance representing midnight on 1\nJune 2006, and <code class=\"docutils literal notranslate\"><span class=\"pre\">comment_date</span></code> is a date instance for 08:00 on 1 June 2006,\nthen the following would return \u201c8 hours\u201d:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">blog_date</span><span class=\"o\">|</span><span class=\"nf\">timesince</span><span class=\"o\">:</span><span class=\"nv\">comment_date</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Comparing offset-naive and offset-aware datetimes will return an empty string.</p>\n<p>Minutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any\ndate that is in the future relative to the comparison point.</p>\n</div>\n<div class=\"section\" id=\"s-timeuntil\">\n<span id=\"s-std-templatefilter-timeuntil\"></span><span id=\"s-std:templatefilter-timeuntil\"></span><span id=\"timeuntil\"></span><span id=\"std-templatefilter-timeuntil\"></span><span id=\"std:templatefilter-timeuntil\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">timeuntil</span></code><a class=\"headerlink\" href=\"#timeuntil\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Similar to <code class=\"docutils literal notranslate\"><span class=\"pre\">timesince</span></code>, except that it measures the time from now until the\ngiven date or datetime. For example, if today is 1 June 2006 and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">conference_date</span></code> is a date instance holding 29 June 2006, then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">conference_date|timeuntil</span> <span class=\"pre\">}}</span></code> will return \u201c4 weeks\u201d.</p>\n<p>Takes an optional argument that is a variable containing the date to use as\nthe comparison point (instead of <em>now</em>). If <code class=\"docutils literal notranslate\"><span class=\"pre\">from_date</span></code> contains 22 June\n2006, then the following will return \u201c1 week\u201d:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">conference_date</span><span class=\"o\">|</span><span class=\"nf\">timeuntil</span><span class=\"o\">:</span><span class=\"nv\">from_date</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Comparing offset-naive and offset-aware datetimes will return an empty string.</p>\n<p>Minutes is the smallest unit used, and \u201c0 minutes\u201d will be returned for any\ndate that is in the past relative to the comparison point.</p>\n</div>\n<div class=\"section\" id=\"s-title\">\n<span id=\"s-std-templatefilter-title\"></span><span id=\"s-std:templatefilter-title\"></span><span id=\"title\"></span><span id=\"std-templatefilter-title\"></span><span id=\"std:templatefilter-title\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code><a class=\"headerlink\" href=\"#title\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts a string into titlecase by making words start with an uppercase\ncharacter and the remaining characters lowercase. This tag makes no effort to\nkeep \u201ctrivial words\u201d in lowercase.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">title</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;my</span> <span class=\"pre\">FIRST</span> <span class=\"pre\">post&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;My</span> <span class=\"pre\">First</span> <span class=\"pre\">Post&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-truncatechars\">\n<span id=\"s-std-templatefilter-truncatechars\"></span><span id=\"s-std:templatefilter-truncatechars\"></span><span id=\"truncatechars\"></span><span id=\"std-templatefilter-truncatechars\"></span><span id=\"std:templatefilter-truncatechars\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatechars</span></code><a class=\"headerlink\" href=\"#truncatechars\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Truncates a string if it is longer than the specified number of characters.\nTruncated strings will end with a translatable ellipsis character (\u201d\u2026\u201d).</p>\n<p><strong>Argument:</strong> Number of characters to truncate to</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">truncatechars</span><span class=\"o\">:</span><span class=\"m\">7</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">i\u2026&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-truncatechars-html\">\n<span id=\"s-std-templatefilter-truncatechars_html\"></span><span id=\"s-std:templatefilter-truncatechars_html\"></span><span id=\"truncatechars-html\"></span><span id=\"std-templatefilter-truncatechars_html\"></span><span id=\"std:templatefilter-truncatechars_html\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatechars_html</span></code><a class=\"headerlink\" href=\"#truncatechars-html\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Similar to <a class=\"reference internal\" href=\"#std-templatefilter-truncatechars\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">truncatechars</span></code></a>, except that it is aware of HTML tags. Any\ntags that are opened in the string and not closed before the truncation point\nare closed immediately after the truncation.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">truncatechars_html</span><span class=\"o\">:</span><span class=\"m\">7</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;p&gt;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&lt;/p&gt;&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;p&gt;Joel</span> <span class=\"pre\">i\u2026&lt;/p&gt;&quot;</span></code>.</p>\n<p>Newlines in the HTML content will be preserved.</p>\n</div>\n<div class=\"section\" id=\"s-truncatewords\">\n<span id=\"s-std-templatefilter-truncatewords\"></span><span id=\"s-std:templatefilter-truncatewords\"></span><span id=\"truncatewords\"></span><span id=\"std-templatefilter-truncatewords\"></span><span id=\"std:templatefilter-truncatewords\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatewords</span></code><a class=\"headerlink\" href=\"#truncatewords\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Truncates a string after a certain number of words.</p>\n<p><strong>Argument:</strong> Number of words to truncate after</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">truncatewords</span><span class=\"o\">:</span><span class=\"m\">2</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">\u2026&quot;</span></code>.</p>\n<p>Newlines within the string will be removed.</p>\n</div>\n<div class=\"section\" id=\"s-truncatewords-html\">\n<span id=\"s-std-templatefilter-truncatewords_html\"></span><span id=\"s-std:templatefilter-truncatewords_html\"></span><span id=\"truncatewords-html\"></span><span id=\"std-templatefilter-truncatewords_html\"></span><span id=\"std:templatefilter-truncatewords_html\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatewords_html</span></code><a class=\"headerlink\" href=\"#truncatewords-html\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Similar to <a class=\"reference internal\" href=\"#std-templatefilter-truncatewords\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">truncatewords</span></code></a>, except that it is aware of HTML tags. Any\ntags that are opened in the string and not closed before the truncation point,\nare closed immediately after the truncation.</p>\n<p>This is less efficient than <a class=\"reference internal\" href=\"#std-templatefilter-truncatewords\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">truncatewords</span></code></a>, so should only be used\nwhen it is being passed HTML text.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">truncatewords_html</span><span class=\"o\">:</span><span class=\"m\">2</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;p&gt;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&lt;/p&gt;&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;p&gt;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">\u2026&lt;/p&gt;&quot;</span></code>.</p>\n<p>Newlines in the HTML content will be preserved.</p>\n</div>\n<div class=\"section\" id=\"s-unordered-list\">\n<span id=\"s-std-templatefilter-unordered_list\"></span><span id=\"s-std:templatefilter-unordered_list\"></span><span id=\"unordered-list\"></span><span id=\"std-templatefilter-unordered_list\"></span><span id=\"std:templatefilter-unordered_list\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">unordered_list</span></code><a class=\"headerlink\" href=\"#unordered-list\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Recursively takes a self-nested list and returns an HTML unordered list \u2013\nWITHOUT opening and closing <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;ul&gt;</span></code> tags.</p>\n<p>The list is assumed to be in the proper format. For example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">var</span></code>\ncontains <code class=\"docutils literal notranslate\"><span class=\"pre\">['States',</span> <span class=\"pre\">['Kansas',</span> <span class=\"pre\">['Lawrence',</span> <span class=\"pre\">'Topeka'],</span> <span class=\"pre\">'Illinois']]</span></code>, then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">var|unordered_list</span> <span class=\"pre\">}}</span></code> would return:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>States\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Kansas\n        <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Lawrence<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Topeka<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Illinois<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-upper\">\n<span id=\"s-std-templatefilter-upper\"></span><span id=\"s-std:templatefilter-upper\"></span><span id=\"upper\"></span><span id=\"std-templatefilter-upper\"></span><span id=\"std:templatefilter-upper\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">upper</span></code><a class=\"headerlink\" href=\"#upper\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts a string into all uppercase.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">upper</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;JOEL</span> <span class=\"pre\">IS</span> <span class=\"pre\">A</span> <span class=\"pre\">SLUG&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-urlencode\">\n<span id=\"s-std-templatefilter-urlencode\"></span><span id=\"s-std:templatefilter-urlencode\"></span><span id=\"urlencode\"></span><span id=\"std-templatefilter-urlencode\"></span><span id=\"std:templatefilter-urlencode\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">urlencode</span></code><a class=\"headerlink\" href=\"#urlencode\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Escapes a value for use in a URL.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">urlencode</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;https://www.example.org/foo?a=b&amp;c=d&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;https%3A//www.example.org/foo%3Fa%3Db%26c%3Dd&quot;</span></code>.</p>\n<p>An optional argument containing the characters which should not be escaped can\nbe provided.</p>\n<p>If not provided, the \u2018/\u2019 character is assumed safe. An empty string can be\nprovided when <em>all</em> characters should be escaped. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">urlencode</span><span class=\"s2\">:&quot;&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;https://www.example.org/&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;https%3A%2F%2Fwww.example.org%2F&quot;</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-urlize\">\n<span id=\"s-std-templatefilter-urlize\"></span><span id=\"s-std:templatefilter-urlize\"></span><span id=\"urlize\"></span><span id=\"std-templatefilter-urlize\"></span><span id=\"std:templatefilter-urlize\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code><a class=\"headerlink\" href=\"#urlize\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts URLs and email addresses in text into clickable links.</p>\n<p>This template tag works on links prefixed with <code class=\"docutils literal notranslate\"><span class=\"pre\">http://</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">https://</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">www.</span></code>. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">https://goo.gl/aia1t</span></code> will get converted but\n<code class=\"docutils literal notranslate\"><span class=\"pre\">goo.gl/aia1t</span></code> won\u2019t.</p>\n<p>It also supports domain-only links ending in one of the original top level\ndomains (<code class=\"docutils literal notranslate\"><span class=\"pre\">.com</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.edu</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.gov</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.mil</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.net</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.org</span></code>). For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com</span></code> gets converted.</p>\n<p>Links can have trailing punctuation (periods, commas, close-parens) and leading\npunctuation (opening parens), and <code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code> will still do the right thing.</p>\n<p>Links generated by <code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code> have a <code class=\"docutils literal notranslate\"><span class=\"pre\">rel=&quot;nofollow&quot;</span></code> attribute added\nto them.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">urlize</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Check</span> <span class=\"pre\">out</span> <span class=\"pre\">www.djangoproject.com&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Check</span> <span class=\"pre\">out</span> <span class=\"pre\">&lt;a</span> <span class=\"pre\">href=&quot;http://www.djangoproject.com&quot;</span>\n<span class=\"pre\">rel=&quot;nofollow&quot;&gt;www.djangoproject.com&lt;/a&gt;&quot;</span></code>.</p>\n<p>In addition to web links, <code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code> also converts email addresses into\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mailto:</span></code> links. If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Send</span> <span class=\"pre\">questions</span> <span class=\"pre\">to</span> <span class=\"pre\">foo&#64;example.com&quot;</span></code>, the output will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Send</span> <span class=\"pre\">questions</span> <span class=\"pre\">to</span> <span class=\"pre\">&lt;a</span> <span class=\"pre\">href=&quot;mailto:foo&#64;example.com&quot;&gt;foo&#64;example.com&lt;/a&gt;&quot;</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code> filter also takes an optional parameter <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code>. If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the link text and URLs will be escaped using\nDjango\u2019s built-in <a class=\"reference internal\" href=\"#std-templatefilter-escape\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escape</span></code></a> filter. The default value for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If <code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code> is applied to text that already contains HTML markup, or to\nemail addresses that contain single quotes (<code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code>), things won\u2019t work as\nexpected. Apply this filter only to plain text.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-urlizetrunc\">\n<span id=\"s-std-templatefilter-urlizetrunc\"></span><span id=\"s-std:templatefilter-urlizetrunc\"></span><span id=\"urlizetrunc\"></span><span id=\"std-templatefilter-urlizetrunc\"></span><span id=\"std:templatefilter-urlizetrunc\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">urlizetrunc</span></code><a class=\"headerlink\" href=\"#urlizetrunc\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Converts URLs and email addresses into clickable links just like <a class=\"reference internal\" href=\"#urlize\">urlize</a>, but\ntruncates URLs longer than the given character limit.</p>\n<p><strong>Argument:</strong> Number of characters that link text should be truncated to,\nincluding the ellipsis that\u2019s added if truncation is necessary.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">urlizetrunc</span><span class=\"o\">:</span><span class=\"m\">15</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Check</span> <span class=\"pre\">out</span> <span class=\"pre\">www.djangoproject.com&quot;</span></code>, the output would be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'Check</span> <span class=\"pre\">out</span> <span class=\"pre\">&lt;a</span> <span class=\"pre\">href=&quot;http://www.djangoproject.com&quot;</span>\n<span class=\"pre\">rel=&quot;nofollow&quot;&gt;www.djangoproj\u2026&lt;/a&gt;'</span></code>.</p>\n<p>As with <a class=\"reference internal\" href=\"#urlize\">urlize</a>, this filter should only be applied to plain text.</p>\n</div>\n<div class=\"section\" id=\"s-wordcount\">\n<span id=\"s-std-templatefilter-wordcount\"></span><span id=\"s-std:templatefilter-wordcount\"></span><span id=\"wordcount\"></span><span id=\"std-templatefilter-wordcount\"></span><span id=\"std:templatefilter-wordcount\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">wordcount</span></code><a class=\"headerlink\" href=\"#wordcount\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Returns the number of words.</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">wordcount</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug&quot;</span></code>, the output will be <code class=\"docutils literal notranslate\"><span class=\"pre\">4</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-wordwrap\">\n<span id=\"s-std-templatefilter-wordwrap\"></span><span id=\"s-std:templatefilter-wordwrap\"></span><span id=\"wordwrap\"></span><span id=\"std-templatefilter-wordwrap\"></span><span id=\"std:templatefilter-wordwrap\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">wordwrap</span></code><a class=\"headerlink\" href=\"#wordwrap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Wraps words at specified line length.</p>\n<p><strong>Argument:</strong> number of characters at which to wrap the text</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">wordwrap</span><span class=\"o\">:</span><span class=\"m\">5</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">Joel</span> <span class=\"pre\">is</span> <span class=\"pre\">a</span> <span class=\"pre\">slug</span></code>, the output would be:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Joel\nis a\nslug\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-yesno\">\n<span id=\"s-std-templatefilter-yesno\"></span><span id=\"s-std:templatefilter-yesno\"></span><span id=\"yesno\"></span><span id=\"std-templatefilter-yesno\"></span><span id=\"std:templatefilter-yesno\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">yesno</span></code><a class=\"headerlink\" href=\"#yesno\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Maps values for <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, and (optionally) <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, to the strings\n\u201cyes\u201d, \u201cno\u201d, \u201cmaybe\u201d, or a custom mapping passed as a comma-separated list, and\nreturns one of those strings according to the value:</p>\n<p>For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">value</span><span class=\"o\">|</span><span class=\"nf\">yesno</span><span class=\"s2\">:&quot;yeah,no,maybe&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"13%\" />\n<col width=\"29%\" />\n<col width=\"57%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Value</th>\n<th class=\"head\">Argument</th>\n<th class=\"head\">Outputs</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code></td>\n<td>&#160;</td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">yes</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;yeah,no,maybe&quot;</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">yeah</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;yeah,no,maybe&quot;</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">no</span></code></td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;yeah,no,maybe&quot;</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">maybe</span></code></td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;yeah,no&quot;</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">no</span></code> (converts <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>\nif no mapping for <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> is given)</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n<div class=\"section\" id=\"s-internationalization-tags-and-filters\">\n<span id=\"internationalization-tags-and-filters\"></span><h2>Internationalization tags and filters<a class=\"headerlink\" href=\"#internationalization-tags-and-filters\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django provides template tags and filters to control each aspect of\n<a class=\"reference internal\" href=\"../../../topics/i18n/\"><span class=\"doc\">internationalization</span></a> in templates. They allow for\ngranular control of translations, formatting, and time zone conversions.</p>\n<div class=\"section\" id=\"s-i18n\">\n<span id=\"i18n\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code><a class=\"headerlink\" href=\"#i18n\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This library allows specifying translatable text in templates.\nTo enable it, set <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_I18N\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_I18N</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, then load it with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">i18n</span> <span class=\"pre\">%}</span></code>.</p>\n<p>See <a class=\"reference internal\" href=\"../../../topics/i18n/translation/#specifying-translation-strings-in-template-code\"><span class=\"std std-ref\">Internationalization: in template code</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-l10n\">\n<span id=\"l10n\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">l10n</span></code><a class=\"headerlink\" href=\"#l10n\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This library provides control over the localization of values in templates.\nYou only need to load the library using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">l10n</span> <span class=\"pre\">%}</span></code>.</p>\n<p>See <a class=\"reference internal\" href=\"../../../topics/i18n/formatting/#topic-l10n-templates\"><span class=\"std std-ref\">Controlling localization in templates</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-tz\">\n<span id=\"tz\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">tz</span></code><a class=\"headerlink\" href=\"#tz\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This library provides control over time zone conversions in templates.\nLike <code class=\"docutils literal notranslate\"><span class=\"pre\">l10n</span></code>, you only need to load the library using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">tz</span> <span class=\"pre\">%}</span></code>,\nbut you\u2019ll usually also set <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> so that conversion\nto local time happens by default.</p>\n<p>See <a class=\"reference internal\" href=\"../../../topics/i18n/timezones/#time-zones-in-templates\"><span class=\"std std-ref\">Time zone aware output in templates</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-other-tags-and-filters-libraries\">\n<span id=\"other-tags-and-filters-libraries\"></span><h2>Other tags and filters libraries<a class=\"headerlink\" href=\"#other-tags-and-filters-libraries\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django comes with a couple of other template-tag libraries that you have to\nenable explicitly in your <a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting and enable in your\ntemplate with the <a class=\"reference internal\" href=\"#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag.</p>\n<div class=\"section\" id=\"s-django-contrib-humanize\">\n<span id=\"django-contrib-humanize\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.humanize</span></code><a class=\"headerlink\" href=\"#django-contrib-humanize\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A set of Django template filters useful for adding a \u201chuman touch\u201d to data. See\n<a class=\"reference internal\" href=\"../../contrib/humanize/\"><span class=\"doc\">django.contrib.humanize</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-static\">\n<span id=\"static\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">static</span></code><a class=\"headerlink\" href=\"#static\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-std-templatetag-static\">\n<span id=\"s-std:templatetag-static\"></span><span id=\"s-id7\"></span><span id=\"std-templatetag-static\"></span><span id=\"std:templatetag-static\"></span><span id=\"id7\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">static</span></code><a class=\"headerlink\" href=\"#std-templatetag-static\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To link to static files that are saved in <a class=\"reference internal\" href=\"../../settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a> Django ships\nwith a <a class=\"reference internal\" href=\"#std-templatetag-static\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">static</span></code></a> template tag. If the <a class=\"reference internal\" href=\"../../contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a>\napp is installed, the tag will serve files using <code class=\"docutils literal notranslate\"><span class=\"pre\">url()</span></code> method of the\nstorage specified by <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> in <a class=\"reference internal\" href=\"../../settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a>. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">&#39;images/hi.jpg&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;Hi!&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>It is also able to consume standard context variables, e.g. assuming a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">user_stylesheet</span></code> variable is passed to the template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">link</span> <span class=\"na\">rel</span><span class=\"o\">=</span><span class=\"s\">&quot;stylesheet&quot;</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"nv\">user_stylesheet</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span> <span class=\"na\">media</span><span class=\"o\">=</span><span class=\"s\">&quot;screen&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>If you\u2019d like to retrieve a static URL without displaying it, you can use a\nslightly different call:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s2\">&quot;images/hi.jpg&quot;</span> <span class=\"k\">as</span> <span class=\"nv\">myphoto</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">myphoto</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition-using-jinja2-templates admonition\">\n<p class=\"first admonition-title\">Using Jinja2 templates?</p>\n<p class=\"last\">See <a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.jinja2.Jinja2\" title=\"django.template.backends.jinja2.Jinja2\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Jinja2</span></code></a> for information on\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">static</span></code> tag with Jinja2.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-get-static-prefix\">\n<span id=\"s-std-templatetag-get_static_prefix\"></span><span id=\"s-std:templatetag-get_static_prefix\"></span><span id=\"get-static-prefix\"></span><span id=\"std-templatetag-get_static_prefix\"></span><span id=\"std:templatetag-get_static_prefix\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">get_static_prefix</span></code><a class=\"headerlink\" href=\"#get-static-prefix\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You should prefer the <a class=\"reference internal\" href=\"#std-templatetag-static\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">static</span></code></a> template tag, but if you need more control\nover exactly where and how <a class=\"reference internal\" href=\"../../settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a> is injected into the template,\nyou can use the <a class=\"reference internal\" href=\"#std-templatetag-get_static_prefix\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">get_static_prefix</span></code></a> template tag:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">get_static_prefix</span> <span class=\"cp\">%}</span><span class=\"s\">images/hi.jpg&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;Hi!&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>There\u2019s also a second form you can use to avoid extra processing if you need\nthe value multiple times:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">get_static_prefix</span> <span class=\"k\">as</span> <span class=\"nv\">STATIC_PREFIX</span> <span class=\"cp\">%}</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">STATIC_PREFIX</span> <span class=\"cp\">}}</span><span class=\"s\">images/hi.jpg&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;Hi!&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">STATIC_PREFIX</span> <span class=\"cp\">}}</span><span class=\"s\">images/hi2.jpg&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;Hello!&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-get-media-prefix\">\n<span id=\"s-std-templatetag-get_media_prefix\"></span><span id=\"s-std:templatetag-get_media_prefix\"></span><span id=\"get-media-prefix\"></span><span id=\"std-templatetag-get_media_prefix\"></span><span id=\"std:templatetag-get_media_prefix\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">get_media_prefix</span></code><a class=\"headerlink\" href=\"#get-media-prefix\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Similar to the <a class=\"reference internal\" href=\"#std-templatetag-get_static_prefix\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">get_static_prefix</span></code></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_media_prefix</span></code> populates a\ntemplate variable with the media prefix <a class=\"reference internal\" href=\"../../settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a>, e.g.:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span> <span class=\"na\">data-media-url</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">get_media_prefix</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>By storing the value in a data attribute, we ensure it\u2019s escaped appropriately\nif we want to use it in a JavaScript context.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/templates/api", "The Django template language: for Python programmers", "N", "next"], ["ref/templates/language", "The Django template language", "P", "previous"]], "sourcename": "ref/templates/builtins.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Built-in template tags and filters</a><ul>\n<li><a class=\"reference internal\" href=\"#built-in-tag-reference\">Built-in tag reference</a><ul>\n<li><a class=\"reference internal\" href=\"#autoescape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#block\"><code class=\"docutils literal notranslate\"><span class=\"pre\">block</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#comment\"><code class=\"docutils literal notranslate\"><span class=\"pre\">comment</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#csrf-token\"><code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cycle\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#debug\"><code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#extends\"><code class=\"docutils literal notranslate\"><span class=\"pre\">extends</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">filter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#firstof\"><code class=\"docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#for\"><code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#for-empty\"><code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> \u2026 <code class=\"docutils literal notranslate\"><span class=\"pre\">empty</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#if\"><code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#boolean-operators\">Boolean operators</a><ul>\n<li><a class=\"reference internal\" href=\"#operator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#id1\"><code class=\"docutils literal notranslate\"><span class=\"pre\">!=</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#id2\"><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#id3\"><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#id4\"><code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;=</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#id5\"><code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;=</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#in-operator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#not-in-operator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">not</span> <span class=\"pre\">in</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#is-operator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">is</span></code> operator</a></li>\n<li><a class=\"reference internal\" href=\"#is-not-operator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">is</span> <span class=\"pre\">not</span></code> operator</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#filters\">Filters</a></li>\n<li><a class=\"reference internal\" href=\"#complex-expressions\">Complex expressions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#ifchanged\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ifchanged</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#include\"><code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#load\"><code class=\"docutils literal notranslate\"><span class=\"pre\">load</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lorem\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lorem</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#now\"><code class=\"docutils literal notranslate\"><span class=\"pre\">now</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#regroup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">regroup</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#grouping-on-other-properties\">Grouping on other properties</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#resetcycle\"><code class=\"docutils literal notranslate\"><span class=\"pre\">resetcycle</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#spaceless\"><code class=\"docutils literal notranslate\"><span class=\"pre\">spaceless</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#templatetag\"><code class=\"docutils literal notranslate\"><span class=\"pre\">templatetag</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#url\"><code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#verbatim\"><code class=\"docutils literal notranslate\"><span class=\"pre\">verbatim</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#widthratio\"><code class=\"docutils literal notranslate\"><span class=\"pre\">widthratio</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#with\"><code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#built-in-filter-reference\">Built-in filter reference</a><ul>\n<li><a class=\"reference internal\" href=\"#add\"><code class=\"docutils literal notranslate\"><span class=\"pre\">add</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#addslashes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">addslashes</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#capfirst\"><code class=\"docutils literal notranslate\"><span class=\"pre\">capfirst</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#center\"><code class=\"docutils literal notranslate\"><span class=\"pre\">center</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cut\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cut</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#date\"><code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#default\"><code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#default-if-none\"><code class=\"docutils literal notranslate\"><span class=\"pre\">default_if_none</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dictsort\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dictsort</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dictsortreversed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dictsortreversed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#divisibleby\"><code class=\"docutils literal notranslate\"><span class=\"pre\">divisibleby</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#escape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">escape</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#escapejs\"><code class=\"docutils literal notranslate\"><span class=\"pre\">escapejs</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#escapeseq\"><code class=\"docutils literal notranslate\"><span class=\"pre\">escapeseq</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#filesizeformat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">filesizeformat</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">first</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#floatformat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">floatformat</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#force-escape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">force_escape</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-digit\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_digit</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iriencode\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iriencode</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#join\"><code class=\"docutils literal notranslate\"><span class=\"pre\">join</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#json-script\"><code class=\"docutils literal notranslate\"><span class=\"pre\">json_script</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">last</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#length\"><code class=\"docutils literal notranslate\"><span class=\"pre\">length</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#length-is\"><code class=\"docutils literal notranslate\"><span class=\"pre\">length_is</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#linebreaks\"><code class=\"docutils literal notranslate\"><span class=\"pre\">linebreaks</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#linebreaksbr\"><code class=\"docutils literal notranslate\"><span class=\"pre\">linebreaksbr</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#linenumbers\"><code class=\"docutils literal notranslate\"><span class=\"pre\">linenumbers</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ljust\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ljust</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lower\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lower</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#make-list\"><code class=\"docutils literal notranslate\"><span class=\"pre\">make_list</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#phone2numeric\"><code class=\"docutils literal notranslate\"><span class=\"pre\">phone2numeric</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pluralize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pluralize</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pprint\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pprint</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#random\"><code class=\"docutils literal notranslate\"><span class=\"pre\">random</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#rjust\"><code class=\"docutils literal notranslate\"><span class=\"pre\">rjust</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#safe\"><code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#safeseq\"><code class=\"docutils literal notranslate\"><span class=\"pre\">safeseq</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#slice\"><code class=\"docutils literal notranslate\"><span class=\"pre\">slice</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#slugify\"><code class=\"docutils literal notranslate\"><span class=\"pre\">slugify</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#stringformat\"><code class=\"docutils literal notranslate\"><span class=\"pre\">stringformat</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#striptags\"><code class=\"docutils literal notranslate\"><span class=\"pre\">striptags</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#time\"><code class=\"docutils literal notranslate\"><span class=\"pre\">time</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#timesince\"><code class=\"docutils literal notranslate\"><span class=\"pre\">timesince</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#timeuntil\"><code class=\"docutils literal notranslate\"><span class=\"pre\">timeuntil</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#title\"><code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#truncatechars\"><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatechars</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#truncatechars-html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatechars_html</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#truncatewords\"><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatewords</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#truncatewords-html\"><code class=\"docutils literal notranslate\"><span class=\"pre\">truncatewords_html</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#unordered-list\"><code class=\"docutils literal notranslate\"><span class=\"pre\">unordered_list</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#upper\"><code class=\"docutils literal notranslate\"><span class=\"pre\">upper</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#urlencode\"><code class=\"docutils literal notranslate\"><span class=\"pre\">urlencode</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#urlize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#urlizetrunc\"><code class=\"docutils literal notranslate\"><span class=\"pre\">urlizetrunc</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#wordcount\"><code class=\"docutils literal notranslate\"><span class=\"pre\">wordcount</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#wordwrap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">wordwrap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#yesno\"><code class=\"docutils literal notranslate\"><span class=\"pre\">yesno</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#internationalization-tags-and-filters\">Internationalization tags and filters</a><ul>\n<li><a class=\"reference internal\" href=\"#i18n\"><code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#l10n\"><code class=\"docutils literal notranslate\"><span class=\"pre\">l10n</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tz\"><code class=\"docutils literal notranslate\"><span class=\"pre\">tz</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#other-tags-and-filters-libraries\">Other tags and filters libraries</a><ul>\n<li><a class=\"reference internal\" href=\"#django-contrib-humanize\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.humanize</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#static\"><code class=\"docutils literal notranslate\"><span class=\"pre\">static</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#std-templatetag-static\"><code class=\"docutils literal notranslate\"><span class=\"pre\">static</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-static-prefix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_static_prefix</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-media-prefix\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_media_prefix</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/templates/builtins", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}