{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Templates"}], "prev": {"link": "../builtins/", "title": "Built-in template tags and filters"}, "next": {"link": "../../template-response/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTemplateResponse</span></code>"}, "title": "The Django template language: for Python programmers", "meta": {}, "body": "<div class=\"section\" id=\"s-the-django-template-language-for-python-programmers\">\n<span id=\"the-django-template-language-for-python-programmers\"></span><h1>The Django template language: for Python programmers<a class=\"headerlink\" href=\"#the-django-template-language-for-python-programmers\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document explains the Django template system from a technical\nperspective \u2013 how it works and how to extend it. If you\u2019re looking for\nreference on the language syntax, see <a class=\"reference internal\" href=\"../language/\"><span class=\"doc\">The Django template language</span></a>.</p>\n<p>It assumes an understanding of templates, contexts, variables, tags, and\nrendering. Start with the <a class=\"reference internal\" href=\"../../../topics/templates/#template-language-intro\"><span class=\"std std-ref\">introduction to the Django template language</span></a> if you aren\u2019t familiar with these concepts.</p>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Using the template system in Python is a three-step process:</p>\n<ol class=\"arabic simple\">\n<li>You configure an <a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a>.</li>\n<li>You compile template code into a <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a>.</li>\n<li>You render the template with a <a class=\"reference internal\" href=\"#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a>.</li>\n</ol>\n<p>Django projects generally rely on the <a class=\"reference internal\" href=\"../../../topics/templates/#template-engines\"><span class=\"std std-ref\">high level, backend agnostic APIs</span></a> for each of these steps instead of the template system\u2019s\nlower level APIs:</p>\n<ol class=\"arabic simple\">\n<li>For each <a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend\nin the <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting, Django instantiates an\n<a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a>. <a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a>\nwraps <a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a> and adapts it to the common template backend API.</li>\n<li>The <a class=\"reference internal\" href=\"../../../topics/templates/#module-django.template.loader\" title=\"django.template.loader\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.template.loader</span></code></a> module provides functions such as\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.loader.get_template\" title=\"django.template.loader.get_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_template()</span></code></a> for loading templates. They\nreturn a <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.backends.django.Template</span></code> which wraps the\nactual <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.Template</span></code></a>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> obtained in the previous step has a\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.base.Template.render\" title=\"django.template.backends.base.Template.render\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">render()</span></code></a> method which\nmarshals a context and possibly a request into a <a class=\"reference internal\" href=\"#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> and\ndelegates the rendering to the underlying <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a>.</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-configuring-an-engine\">\n<span id=\"configuring-an-engine\"></span><h2>Configuring an engine<a class=\"headerlink\" href=\"#configuring-an-engine\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you are using the <a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a>\nbackend, this probably isn\u2019t the documentation you\u2019re looking for. An instance\nof the <code class=\"docutils literal notranslate\"><span class=\"pre\">Engine</span></code> class described below is accessible using the <code class=\"docutils literal notranslate\"><span class=\"pre\">engine</span></code>\nattribute of that backend and any attribute defaults mentioned below are\noverridden by what\u2019s passed by\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a>.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.Engine\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Engine</span></code>(<em><span class=\"n\"><span class=\"pre\">dirs</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">app_dirs</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">context_processors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">debug</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">loaders</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">string_if_invalid</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">file_charset</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'utf-8'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">libraries</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">builtins</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">autoescape</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/engine/#Engine\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Engine\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>When instantiating an <code class=\"docutils literal notranslate\"><span class=\"pre\">Engine</span></code> all arguments must be passed as keyword\narguments:</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dirs</span></code> is a list of directories where the engine should look for\ntemplate source files. It is used to configure\n<a class=\"reference internal\" href=\"#django.template.loaders.filesystem.Loader\" title=\"django.template.loaders.filesystem.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">filesystem.Loader</span></code></a>.</p>\n<p>It defaults to an empty list.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">app_dirs</span></code> only affects the default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code>. See below.</p>\n<p>It defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> controls whether HTML autoescaping is enabled.</p>\n<p>It defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Only set it to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if you\u2019re rendering non-HTML templates!</p>\n</div>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">context_processors</span></code> is a list of dotted Python paths to callables\nthat are used to populate the context when a template is rendered with a\nrequest. These callables take a request object as their argument and\nreturn a <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a> of items to be merged into the context.</p>\n<p>It defaults to an empty list.</p>\n<p>See <a class=\"reference internal\" href=\"#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a> for more information.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code> is a boolean that turns on/off template debug mode. If it is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the template engine will store additional debug information\nwhich can be used to display a detailed report for any exception raised\nduring template rendering.</p>\n<p>It defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code> is a list of template loader classes, specified as strings.\nEach <code class=\"docutils literal notranslate\"><span class=\"pre\">Loader</span></code> class knows how to import templates from a particular\nsource. Optionally, a tuple can be used instead of a string. The first\nitem in the tuple should be the <code class=\"docutils literal notranslate\"><span class=\"pre\">Loader</span></code> class name, subsequent items\nare passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Loader</span></code> during initialization.</p>\n<p>It defaults to a list containing:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'django.template.loaders.filesystem.Loader'</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'django.template.loaders.app_directories.Loader'</span></code> if and only if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">app_dirs</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</li>\n</ul>\n<p>These loaders are then wrapped in\n<a class=\"reference internal\" href=\"#django.template.loaders.cached.Loader\" title=\"django.template.loaders.cached.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.loaders.cached.Loader</span></code></a>.</p>\n<p>See <a class=\"reference internal\" href=\"#template-loaders\"><span class=\"std std-ref\">Loader types</span></a> for details.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> is the output, as a string, that the template\nsystem should use for invalid (e.g. misspelled) variables.</p>\n<p>It defaults to the empty string.</p>\n<p>See <a class=\"reference internal\" href=\"#invalid-template-variables\"><span class=\"std std-ref\">How invalid variables are handled</span></a> for details.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">file_charset</span></code> is the charset used to read template files on disk.</p>\n<p>It defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">'utf-8'</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">'libraries'</span></code>: A dictionary of labels and dotted Python paths of template\ntag modules to register with the template engine. This is used to add new\nlibraries or provide alternate labels for existing ones. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Engine</span><span class=\"p\">(</span>\n    <span class=\"n\">libraries</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;myapp_tags&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;path.to.myapp.tags&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;admin.urls&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.admin.templatetags.admin_urls&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Libraries can be loaded by passing the corresponding dictionary key to\nthe <a class=\"reference internal\" href=\"../builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">'builtins'</span></code>: A list of dotted Python paths of template tag modules to\nadd to <a class=\"reference internal\" href=\"../builtins/\"><span class=\"doc\">built-ins</span></a>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Engine</span><span class=\"p\">(</span>\n    <span class=\"n\">builtins</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;myapp.builtins&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Tags and filters from built-in libraries can be used without first calling\nthe <a class=\"reference internal\" href=\"../builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag.</p>\n</li>\n</ul>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Engine.get_default\">\n<em class=\"property\"><span class=\"pre\">static</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">Engine.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_default</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/template/engine/#Engine.get_default\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Engine.get_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the underlying <a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a> from the first configured\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> engine. Raises\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ImproperlyConfigured\" title=\"django.core.exceptions.ImproperlyConfigured\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code></a> if no engines are\nconfigured.</p>\n<p>It\u2019s required for preserving APIs that rely on a globally available,\nimplicitly configured engine. Any other use is strongly discouraged.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Engine.from_string\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Engine.</span></code><code class=\"sig-name descname\"><span class=\"pre\">from_string</span></code>(<em><span class=\"n\"><span class=\"pre\">template_code</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/engine/#Engine.from_string\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Engine.from_string\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Compiles the given template code and returns a <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Engine.get_template\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Engine.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_template</span></code>(<em><span class=\"n\"><span class=\"pre\">template_name</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/engine/#Engine.get_template\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Engine.get_template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads a template with the given name, compiles it and returns a\n<a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Engine.select_template\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Engine.</span></code><code class=\"sig-name descname\"><span class=\"pre\">select_template</span></code>(<em><span class=\"n\"><span class=\"pre\">template_name_list</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/engine/#Engine.select_template\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Engine.select_template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.template.Engine.get_template\" title=\"django.template.Engine.get_template\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_template()</span></code></a>, except it takes a list of names\nand returns the first template that was found.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-loading-a-template\">\n<span id=\"loading-a-template\"></span><h2>Loading a template<a class=\"headerlink\" href=\"#loading-a-template\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The recommended way to create a <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> is by calling the factory\nmethods of the <a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a>: <a class=\"reference internal\" href=\"#django.template.Engine.get_template\" title=\"django.template.Engine.get_template\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_template()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.template.Engine.select_template\" title=\"django.template.Engine.select_template\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_template()</span></code></a> and <a class=\"reference internal\" href=\"#django.template.Engine.from_string\" title=\"django.template.Engine.from_string\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">from_string()</span></code></a>.</p>\n<p>In a Django project where the <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting defines a\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> engine, it\u2019s\npossible to instantiate a <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> directly. If more than one\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> engine is defined,\nthe first one will be used.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.Template\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Template</span></code><a class=\"reference internal\" href=\"../../../_modules/django/template/base/#Template\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This class lives at <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Template</span></code>. The constructor takes\none argument \u2014 the raw template code:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n\n<span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;My name is {{ my_name }}.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<div class=\"admonition-behind-the-scenes admonition\">\n<p class=\"first admonition-title\">Behind the scenes</p>\n<p>The system only parses your raw template code once \u2013 when you create the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> object. From then on, it\u2019s stored internally as a tree\nstructure for performance.</p>\n<p class=\"last\">Even the parsing itself is quite fast. Most of the parsing happens via a\nsingle call to a single, short, regular expression.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-rendering-a-context\">\n<span id=\"rendering-a-context\"></span><h2>Rendering a context<a class=\"headerlink\" href=\"#rendering-a-context\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once you have a compiled <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> object, you can render a context\nwith it. You can reuse the same template to render it several times with\ndifferent contexts.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Context</span></code>(<em><span class=\"n\"><span class=\"pre\">dict_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context/#Context\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Context\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The constructor of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Context</span></code> takes an optional argument \u2014\na dictionary mapping variable names to variable values.</p>\n<p>For details, see <a class=\"reference internal\" href=\"#playing-with-context\"><span class=\"std std-ref\">Playing with Context objects</span></a> below.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Template.render\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Template.</span></code><code class=\"sig-name descname\"><span class=\"pre\">render</span></code>(<em><span class=\"n\"><span class=\"pre\">context</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/base/#Template.render\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Template.render\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Call the <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> object\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method with a\n<a class=\"reference internal\" href=\"#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> to \u201cfill\u201d the template:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">Template</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;My name is {{ my_name }}.&quot;</span><span class=\"p\">)</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;my_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adrian&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"go\">&quot;My name is Adrian.&quot;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;my_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Dolores&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n<span class=\"go\">&quot;My name is Dolores.&quot;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<div class=\"section\" id=\"s-variables-and-lookups\">\n<span id=\"variables-and-lookups\"></span><h3>Variables and lookups<a class=\"headerlink\" href=\"#variables-and-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Variable names must consist of any letter (A-Z), any digit (0-9), an underscore\n(but they must not start with an underscore) or a dot.</p>\n<p>Dots have a special meaning in template rendering. A dot in a variable name\nsignifies a <strong>lookup</strong>. Specifically, when the template system encounters a\ndot in a variable name, it tries the following lookups, in this order:</p>\n<ul class=\"simple\">\n<li>Dictionary lookup. Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">foo[&quot;bar&quot;]</span></code></li>\n<li>Attribute lookup. Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">foo.bar</span></code></li>\n<li>List-index lookup. Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">foo[bar]</span></code></li>\n</ul>\n<p>Note that \u201cbar\u201d in a template expression like <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">foo.bar</span> <span class=\"pre\">}}</span></code> will be\ninterpreted as a literal string and not using the value of the variable \u201cbar\u201d,\nif one exists in the template context.</p>\n<p>The template system uses the first lookup type that works. It\u2019s short-circuit\nlogic. Here are a few examples:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">Template</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;My name is {{ person.first_name }}.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;person&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Joe&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;last_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Johnson&quot;</span><span class=\"p\">}}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">))</span>\n<span class=\"go\">&quot;My name is Joe.&quot;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">PersonClass</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PersonClass</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Ron&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Nasty&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;person&quot;</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"p\">}))</span>\n<span class=\"go\">&quot;My name is Ron.&quot;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;The first stooge in the list is {{ stooges.0 }}.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;stooges&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Larry&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Curly&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Moe&quot;</span><span class=\"p\">]})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n<span class=\"go\">&quot;The first stooge in the list is Larry.&quot;</span>\n</pre></div>\n</div>\n<p>If any part of the variable is callable, the template system will try calling\nit. Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">PersonClass2</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"s2\">&quot;Samantha&quot;</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;My name is {{ person.name }}.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;person&quot;</span><span class=\"p\">:</span> <span class=\"n\">PersonClass2</span><span class=\"p\">}))</span>\n<span class=\"go\">&quot;My name is Samantha.&quot;</span>\n</pre></div>\n</div>\n<p>Callable variables are slightly more complex than variables which only require\nstraight lookups. Here are some things to keep in mind:</p>\n<ul>\n<li><p class=\"first\">If the variable raises an exception when called, the exception will be\npropagated, unless the exception has an attribute\n<code class=\"docutils literal notranslate\"><span class=\"pre\">silent_variable_failure</span></code> whose value is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. If the exception\n<em>does</em> have a <code class=\"docutils literal notranslate\"><span class=\"pre\">silent_variable_failure</span></code> attribute whose value is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the variable will render as the value of the engine\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> configuration option (an empty string, by default).\nExample:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;My name is {{ person.first_name }}.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">PersonClass3</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">first_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">raise</span> <span class=\"ne\">AssertionError</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PersonClass3</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;person&quot;</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"p\">}))</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">AssertionError</span>: <span class=\"n\">foo</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">SilentAssertionError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">silent_variable_failure</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">PersonClass4</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">first_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">raise</span> <span class=\"n\">SilentAssertionError</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">PersonClass4</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;person&quot;</span><span class=\"p\">:</span> <span class=\"n\">p</span><span class=\"p\">}))</span>\n<span class=\"go\">&quot;My name is .&quot;</span>\n</pre></div>\n</div>\n<p>Note that <a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ObjectDoesNotExist\" title=\"django.core.exceptions.ObjectDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">django.core.exceptions.ObjectDoesNotExist</span></code></a>, which is the\nbase class for all Django database API <code class=\"docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code> exceptions, has\n<code class=\"docutils literal notranslate\"><span class=\"pre\">silent_variable_failure</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code>. So if you\u2019re using Django templates\nwith Django model objects, any <code class=\"docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code> exception will fail\nsilently.</p>\n</li>\n<li><p class=\"first\">A variable can only be called if it has no required arguments. Otherwise,\nthe system will return the value of the engine\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code>\noption.</p>\n</li>\n</ul>\n<ul id=\"alters-data-description\">\n<li><p class=\"first\">There can be side effects when calling some variables, and it\u2019d be either\nfoolish or a security hole to allow the template system to access them.</p>\n<p>A good example is the <a class=\"reference internal\" href=\"../../models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method on\neach Django model object. The template system shouldn\u2019t be allowed to do\nsomething like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>I will now delete this valuable data. <span class=\"cp\">{{</span> <span class=\"nv\">data.delete</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>To prevent this, set an <code class=\"docutils literal notranslate\"><span class=\"pre\">alters_data</span></code> attribute on the callable\nvariable. The template system won\u2019t call a variable if it has\n<code class=\"docutils literal notranslate\"><span class=\"pre\">alters_data=True</span></code> set, and will instead replace the variable with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code>, unconditionally.  The\ndynamically-generated <a class=\"reference internal\" href=\"../../models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> and\n<a class=\"reference internal\" href=\"../../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> methods on Django model objects get\n<code class=\"docutils literal notranslate\"><span class=\"pre\">alters_data=True</span></code> automatically. Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">sensitive_function</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">database_record</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">sensitive_function</span><span class=\"o\">.</span><span class=\"n\">alters_data</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Occasionally you may want to turn off this feature for other reasons,\nand tell the template system to leave a variable uncalled no matter\nwhat.  To do so, set a <code class=\"docutils literal notranslate\"><span class=\"pre\">do_not_call_in_templates</span></code> attribute on the\ncallable with the value <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.  The template system then will act as\nif your variable is not callable (allowing you to access attributes of\nthe callable, for example).</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-how-invalid-variables-are-handled\">\n<span id=\"s-invalid-template-variables\"></span><span id=\"how-invalid-variables-are-handled\"></span><span id=\"invalid-template-variables\"></span><h3>How invalid variables are handled<a class=\"headerlink\" href=\"#how-invalid-variables-are-handled\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Generally, if a variable doesn\u2019t exist, the template system inserts the value\nof the engine\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> configuration option, which is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code> (the empty string) by default.</p>\n<p>Filters that are applied to an invalid variable will only be applied if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code> (the empty string). If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> is set to any other value, variable filters will be\nignored.</p>\n<p>This behavior is slightly different for the <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">regroup</span></code>\ntemplate tags. If an invalid variable is provided to one of these template\ntags, the variable will be interpreted as <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. Filters are always\napplied to invalid variables within these template tags.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> contains a <code class=\"docutils literal notranslate\"><span class=\"pre\">'%s'</span></code>, the format marker will be\nreplaced with the name of the invalid variable.</p>\n<div class=\"admonition-for-debug-purposes-only admonition\">\n<p class=\"first admonition-title\">For debug purposes only!</p>\n<p>While <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> can be a useful debugging tool, it is a bad\nidea to turn it on as a \u2018development default\u2019.</p>\n<p>Many templates, including some of Django\u2019s, rely upon the silence of the\ntemplate system when a nonexistent variable is encountered. If you assign a\nvalue other than <code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code>, you will experience\nrendering problems with these templates and sites.</p>\n<p class=\"last\">Generally, <code class=\"docutils literal notranslate\"><span class=\"pre\">string_if_invalid</span></code> should only be enabled in order to debug\na specific template problem, then cleared once debugging is complete.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-built-in-variables\">\n<span id=\"built-in-variables\"></span><h3>Built-in variables<a class=\"headerlink\" href=\"#built-in-variables\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Every context contains <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. As you would expect,\nthese variables resolve to the corresponding Python objects.</p>\n</div>\n<div class=\"section\" id=\"s-limitations-with-string-literals\">\n<span id=\"limitations-with-string-literals\"></span><h3>Limitations with string literals<a class=\"headerlink\" href=\"#limitations-with-string-literals\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s template language has no way to escape the characters used for its own\nsyntax. For example, the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-templatetag\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">templatetag</span></code></a> tag is required if you need to\noutput character sequences like <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">%}</span></code>.</p>\n<p>A similar issue exists if you want to include these sequences in template filter\nor tag arguments. For example, when parsing a block tag, Django\u2019s template\nparser looks for the first occurrence of <code class=\"docutils literal notranslate\"><span class=\"pre\">%}</span></code> after a <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span></code>. This prevents\nthe use of <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;%}&quot;</span></code> as a string literal. For example, a <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateSyntaxError</span></code>\nwill be raised for the following expressions:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">include</span> <span class=\"s2\">&quot;template.html&quot;</span> <span class=\"nv\">tvar</span><span class=\"o\">=</span><span class=\"s2\">&quot;Some string literal with %} in it.&quot;</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">with</span> <span class=\"nv\">tvar</span><span class=\"o\">=</span><span class=\"s2\">&quot;Some string literal with %} in it.&quot;</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endwith</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The same issue can be triggered by using a reserved sequence in filter\narguments:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">some.variable</span><span class=\"o\">|</span><span class=\"nf\">default</span><span class=\"s2\">:&quot;}}&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>If you need to use strings with these sequences, store them in template\nvariables or use a custom template tag or filter to workaround the limitation.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-playing-with-context-objects\">\n<span id=\"s-playing-with-context\"></span><span id=\"playing-with-context-objects\"></span><span id=\"playing-with-context\"></span><h2>Playing with <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> objects<a class=\"headerlink\" href=\"#playing-with-context-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Most of the time, you\u2019ll instantiate <a class=\"reference internal\" href=\"#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> objects by passing in a\nfully-populated dictionary to <code class=\"docutils literal notranslate\"><span class=\"pre\">Context()</span></code>. But you can add and delete items\nfrom a <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> object once it\u2019s been instantiated, too, using standard\ndictionary syntax:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;bar&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">del</span> <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">KeyError</span>: <span class=\"n\">&#39;foo&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;newvariable&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;hello&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;newvariable&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;hello&#39;</span>\n</pre></div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context.get\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Context.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">otherwise</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.template.Context.get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value for <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> if <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> is in the context, else returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">otherwise</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context.setdefault\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Context.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setdefault</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.template.Context.setdefault\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> is in the context, returns its value. Otherwise inserts <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code>\nwith a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> and returns <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context.pop\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Context.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pop</span></code>()<a class=\"headerlink\" href=\"#django.template.Context.pop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context.push\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Context.</span></code><code class=\"sig-name descname\"><span class=\"pre\">push</span></code>()<a class=\"headerlink\" href=\"#django.template.Context.push\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py exception\">\n<dt class=\"sig sig-object py\" id=\"django.template.ContextPopException\">\n<em class=\"property\"><span class=\"pre\">exception</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">ContextPopException</span></code><a class=\"reference internal\" href=\"../../../_modules/django/template/context/#ContextPopException\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.ContextPopException\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> object is a stack. That is, you can <code class=\"docutils literal notranslate\"><span class=\"pre\">push()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pop()</span></code> it.\nIf you <code class=\"docutils literal notranslate\"><span class=\"pre\">pop()</span></code> too much, it\u2019ll raise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.ContextPopException</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;first level&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">()</span>\n<span class=\"go\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;second level&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;second level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;foo&#39;: &#39;second level&#39;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;overwritten&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;overwritten&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ContextPopException</span>\n</pre></div>\n</div>\n<p>You can also use <code class=\"docutils literal notranslate\"><span class=\"pre\">push()</span></code> as a context manager to ensure a matching <code class=\"docutils literal notranslate\"><span class=\"pre\">pop()</span></code>\nis called.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">():</span>\n<span class=\"gp\">... </span>    <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;second level&#39;</span>\n<span class=\"gp\">... </span>    <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;second level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;first level&#39;</span>\n</pre></div>\n</div>\n<p>All arguments passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">push()</span></code> will be passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> constructor\nused to build the new context level.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">&#39;second level&#39;</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;second level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;first level&#39;</span>\n</pre></div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context.update\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Context.</span></code><code class=\"sig-name descname\"><span class=\"pre\">update</span></code>(<em><span class=\"n\"><span class=\"pre\">other_dict</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context/#Context.update\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.Context.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>In addition to <code class=\"docutils literal notranslate\"><span class=\"pre\">push()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">pop()</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code>\nobject also defines an <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> method. This works like <code class=\"docutils literal notranslate\"><span class=\"pre\">push()</span></code>\nbut takes a dictionary as an argument and pushes that dictionary onto\nthe stack instead of an empty one.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;updated&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">{&#39;foo&#39;: &#39;updated&#39;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;updated&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;foo&#39;: &#39;updated&#39;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;first level&#39;</span>\n</pre></div>\n</div>\n<p>Like <code class=\"docutils literal notranslate\"><span class=\"pre\">push()</span></code>, you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> as a context manager to ensure a\nmatching <code class=\"docutils literal notranslate\"><span class=\"pre\">pop()</span></code> is called.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;second level&#39;</span><span class=\"p\">}):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;second level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;first level&#39;</span>\n</pre></div>\n</div>\n<p>Using a <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> as a stack comes in handy in <a class=\"reference internal\" href=\"../../../howto/custom-template-tags/#howto-writing-custom-template-tags\"><span class=\"std std-ref\">some custom template\ntags</span></a>.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Context.flatten\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Context.</span></code><code class=\"sig-name descname\"><span class=\"pre\">flatten</span></code>()<a class=\"headerlink\" href=\"#django.template.Context.flatten\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">flatten()</span></code> method you can get whole <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> stack as one dictionary\nincluding builtin variables.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;second level&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">{&#39;bar&#39;: &#39;second level&#39;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;True&#39;: True, &#39;None&#39;: None, &#39;foo&#39;: &#39;first level&#39;, &#39;False&#39;: False, &#39;bar&#39;: &#39;second level&#39;}</span>\n</pre></div>\n</div>\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">flatten()</span></code> method is also internally used to make <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> objects comparable.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c1</span><span class=\"p\">[</span><span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;first level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c1</span><span class=\"p\">[</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;second level&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">&#39;bar&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;second level&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;foo&#39;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;first level&#39;</span><span class=\"p\">})</span>\n<span class=\"go\">{&#39;foo&#39;: &#39;first level&#39;, &#39;bar&#39;: &#39;second level&#39;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">c2</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Result from <code class=\"docutils literal notranslate\"><span class=\"pre\">flatten()</span></code> can be useful in unit tests to compare <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code>\nagainst <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ContextTest</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_against_dictionary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">()</span>\n        <span class=\"n\">c1</span><span class=\"p\">[</span><span class=\"s2\">&quot;update&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;value&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span>\n            <span class=\"n\">c1</span><span class=\"o\">.</span><span class=\"n\">flatten</span><span class=\"p\">(),</span>\n            <span class=\"p\">{</span>\n                <span class=\"s2\">&quot;True&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;None&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;False&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;update&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-using-requestcontext\">\n<span id=\"s-subclassing-context-requestcontext\"></span><span id=\"using-requestcontext\"></span><span id=\"subclassing-context-requestcontext\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code><a class=\"headerlink\" href=\"#using-requestcontext\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.RequestContext\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RequestContext</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>, <em><span class=\"n\"><span class=\"pre\">dict_</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">processors</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context/#RequestContext\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.RequestContext\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Django comes with a special <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> class,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.RequestContext</span></code>, that acts slightly differently from the\nnormal <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Context</span></code>. The first difference is that it takes an\n<a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> as its first argument. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">RequestContext</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The second difference is that it automatically populates the context with a\nfew variables, according to the engine\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">context_processors</span></code> configuration\noption.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">context_processors</span></code> option is a list of callables \u2013 called <strong>context\nprocessors</strong> \u2013 that take a request object as their argument and return a\ndictionary of items to be merged into the context. In the default generated\nsettings file, the default template engine contains the following context\nprocessors:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span>\n    <span class=\"s2\">&quot;django.template.context_processors.debug&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.template.context_processors.request&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth.context_processors.auth&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.messages.context_processors.messages&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>In addition to these, <a class=\"reference internal\" href=\"#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a> always enables\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.template.context_processors.csrf'</span></code>.  This is a security related\ncontext processor required by the admin and other contrib apps, and, in case\nof accidental misconfiguration, it is deliberately hardcoded in and cannot be\nturned off in the <code class=\"docutils literal notranslate\"><span class=\"pre\">context_processors</span></code> option.</p>\n<p>Each processor is applied in order. That means, if one processor adds a\nvariable to the context and a second processor adds a variable with the same\nname, the second will override the first. The default processors are explained\nbelow.</p>\n<div class=\"admonition-when-context-processors-are-applied admonition\">\n<p class=\"first admonition-title\">When context processors are applied</p>\n<p>Context processors are applied on top of context data. This means that a\ncontext processor may overwrite variables you\u2019ve supplied to your\n<a class=\"reference internal\" href=\"#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> or <a class=\"reference internal\" href=\"#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a>, so take care to avoid\nvariable names that overlap with those supplied by your context\nprocessors.</p>\n<p>If you want context data to take priority over context processors, use the\nfollowing pattern:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">RequestContext</span>\n\n<span class=\"n\">request_context</span> <span class=\"o\">=</span> <span class=\"n\">RequestContext</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"n\">request_context</span><span class=\"o\">.</span><span class=\"n\">push</span><span class=\"p\">({</span><span class=\"s2\">&quot;my_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Adrian&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p class=\"last\">Django does this to allow context data to override context processors in\nAPIs such as <a class=\"reference internal\" href=\"../../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render()</span></code></a> and\n<a class=\"reference internal\" href=\"../../template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a>.</p>\n</div>\n<p>Also, you can give <a class=\"reference internal\" href=\"#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a> a list of additional processors,\nusing the optional, third positional argument, <code class=\"docutils literal notranslate\"><span class=\"pre\">processors</span></code>. In this\nexample, the <a class=\"reference internal\" href=\"#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a> instance gets an <code class=\"docutils literal notranslate\"><span class=\"pre\">ip_address</span></code> variable:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">RequestContext</span><span class=\"p\">,</span> <span class=\"n\">Template</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">ip_address_processor</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">&quot;ip_address&quot;</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s2\">&quot;REMOTE_ADDR&quot;</span><span class=\"p\">]}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">client_ip_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"s2\">&quot;{{ title }}: {{ ip_address }}&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">RequestContext</span><span class=\"p\">(</span>\n        <span class=\"n\">request</span><span class=\"p\">,</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Your IP Address&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">[</span><span class=\"n\">ip_address_processor</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-built-in-template-context-processors\">\n<span id=\"s-context-processors\"></span><span id=\"built-in-template-context-processors\"></span><span id=\"context-processors\"></span><h3>Built-in template context processors<a class=\"headerlink\" href=\"#built-in-template-context-processors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Here\u2019s what each of the built-in processors does:</p>\n<div class=\"section\" id=\"s-django-contrib-auth-context-processors-auth\">\n<span id=\"django-contrib-auth-context-processors-auth\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors.auth</span></code><a class=\"headerlink\" href=\"#django-contrib-auth-context-processors-auth\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.auth.context_processors.auth\">\n<code class=\"sig-name descname\"><span class=\"pre\">auth</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/contrib/auth/context_processors/#auth\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.auth.context_processors.auth\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain these\nvariables:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code> \u2013 An <code class=\"docutils literal notranslate\"><span class=\"pre\">auth.User</span></code> instance representing the currently\nlogged-in user (or an <code class=\"docutils literal notranslate\"><span class=\"pre\">AnonymousUser</span></code> instance, if the client isn\u2019t\nlogged in).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">perms</span></code> \u2013 An instance of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors.PermWrapper</span></code>, representing the\npermissions that the currently logged-in user has.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-debug\">\n<span id=\"django-template-context-processors-debug\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.debug</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-debug\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.template.context_processors.debug\">\n<code class=\"sig-name descname\"><span class=\"pre\">debug</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context_processors/#debug\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.context_processors.debug\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain these two\nvariables \u2013 but only if your <a class=\"reference internal\" href=\"../../settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> setting is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> and\nthe request\u2019s IP address (<code class=\"docutils literal notranslate\"><span class=\"pre\">request.META['REMOTE_ADDR']</span></code>) is in the\n<a class=\"reference internal\" href=\"../../settings/#std-setting-INTERNAL_IPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INTERNAL_IPS</span></code></a> setting:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">debug</span></code> \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. You can use this in templates to test whether\nyou\u2019re in <a class=\"reference internal\" href=\"../../settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> mode.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">sql_queries</span></code> \u2013 A list of <code class=\"docutils literal notranslate\"><span class=\"pre\">{'sql':</span> <span class=\"pre\">...,</span> <span class=\"pre\">'time':</span> <span class=\"pre\">...}</span></code> dictionaries,\nrepresenting every SQL query that has happened so far during the request\nand how long it took. The list is in order by database alias and then by\nquery. It\u2019s lazily generated on access.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-i18n\">\n<span id=\"django-template-context-processors-i18n\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.i18n</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-i18n\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.template.context_processors.i18n\">\n<code class=\"sig-name descname\"><span class=\"pre\">i18n</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context_processors/#i18n\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.context_processors.i18n\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain these\nvariables:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">LANGUAGES</span></code> \u2013 The value of the <a class=\"reference internal\" href=\"../../settings/#std-setting-LANGUAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGES</span></code></a> setting.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">LANGUAGE_BIDI</span></code> \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the current language is a right-to-left\nlanguage, e.g. Hebrew, Arabic. <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if it\u2019s a left-to-right language,\ne.g. English, French, German.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code> \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">request.LANGUAGE_CODE</span></code>, if it exists. Otherwise,\nthe value of the <a class=\"reference internal\" href=\"../../settings/#std-setting-LANGUAGE_CODE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code></a> setting.</li>\n</ul>\n<p>See <a class=\"reference internal\" href=\"../../../topics/i18n/translation/#i18n-template-tags\"><span class=\"std std-ref\">i18n template tags</span></a> for template tags that\ngenerate the same values.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-media\">\n<span id=\"django-template-context-processors-media\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.media</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-media\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain a variable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code>, providing the value of the <a class=\"reference internal\" href=\"../../settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> setting.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-static\">\n<span id=\"django-template-context-processors-static\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.static</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-static\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.template.context_processors.static\">\n<code class=\"sig-name descname\"><span class=\"pre\">static</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context_processors/#static\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.context_processors.static\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain a variable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code>, providing the value of the <a class=\"reference internal\" href=\"../../settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a> setting.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-csrf\">\n<span id=\"django-template-context-processors-csrf\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.csrf</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-csrf\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>This processor adds a token that is needed by the <a class=\"reference internal\" href=\"../builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> template\ntag for protection against <a class=\"reference internal\" href=\"../../csrf/\"><span class=\"doc\">Cross Site Request Forgeries</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-request\">\n<span id=\"django-template-context-processors-request\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.request</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-request\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain a variable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code>, which is the current <a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-context-processors-tz\">\n<span id=\"django-template-context-processors-tz\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.tz</span></code><a class=\"headerlink\" href=\"#django-template-context-processors-tz\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.template.context_processors.tz\">\n<code class=\"sig-name descname\"><span class=\"pre\">tz</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/context_processors/#tz\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.context_processors.tz\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain a variable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code>, providing the name of the currently active time zone.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-messages-context-processors-messages\">\n<span id=\"django-contrib-messages-context-processors-messages\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.messages.context_processors.messages</span></code><a class=\"headerlink\" href=\"#django-contrib-messages-context-processors-messages\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If this processor is enabled, every <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> will contain these two\nvariables:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">messages</span></code> \u2013 A list of messages (as strings) that have been set\nvia the <a class=\"reference internal\" href=\"../../contrib/messages/\"><span class=\"doc\">messages framework</span></a>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">DEFAULT_MESSAGE_LEVELS</span></code> \u2013 A mapping of the message level names to\n<a class=\"reference internal\" href=\"../../contrib/messages/#message-level-constants\"><span class=\"std std-ref\">their numeric value</span></a>.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-your-own-context-processors\">\n<span id=\"writing-your-own-context-processors\"></span><h3>Writing your own context processors<a class=\"headerlink\" href=\"#writing-your-own-context-processors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A context processor has a simple interface: It\u2019s a Python function that takes\none argument, an <a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object, and returns a\ndictionary that gets added to the template context.</p>\n<p>For example, to add the <a class=\"reference internal\" href=\"../../settings/#std-setting-DEFAULT_FROM_EMAIL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_FROM_EMAIL</span></code></a> setting to every\ncontext:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">from_email</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;DEFAULT_FROM_EMAIL&quot;</span><span class=\"p\">:</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_FROM_EMAIL</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Custom context processors can live anywhere in your code base. All Django\ncares about is that your custom context processors are pointed to by the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'context_processors'</span></code> option in your <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting \u2014 or the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context_processors</span></code> argument of <a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a> if you\u2019re\nusing it directly.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-loading-templates\">\n<span id=\"loading-templates\"></span><h2>Loading templates<a class=\"headerlink\" href=\"#loading-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Generally, you\u2019ll store templates in files on your filesystem rather than\nusing the low-level <a class=\"reference internal\" href=\"#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> API yourself. Save\ntemplates in a directory specified as a <strong>template directory</strong>.</p>\n<p>Django searches for template directories in a number of places, depending on\nyour template loading settings (see \u201cLoader types\u201d below), but the most basic\nway of specifying template directories is by using the <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> option.</p>\n<div class=\"section\" id=\"s-the-dirs-option\">\n<span id=\"the-dirs-option\"></span><h3>The <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> option<a class=\"headerlink\" href=\"#the-dirs-option\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Tell Django what your template directories are by using the <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> option in the <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting in your settings\nfile \u2014 or the <code class=\"docutils literal notranslate\"><span class=\"pre\">dirs</span></code> argument of <a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a>. This\nshould be set to a list of strings that contain full paths to your template\ndirectories:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;DIRS&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">&quot;/home/html/templates/lawrence.com&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;/home/html/templates/default&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Your templates can go anywhere you want, as long as the directories and\ntemplates are readable by the web server. They can have any extension you want,\nsuch as <code class=\"docutils literal notranslate\"><span class=\"pre\">.html</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">.txt</span></code>, or they can have no extension at all.</p>\n<p>Note that these paths should use Unix-style forward slashes, even on Windows.</p>\n</div>\n<div class=\"section\" id=\"s-loader-types\">\n<span id=\"s-template-loaders\"></span><span id=\"loader-types\"></span><span id=\"template-loaders\"></span><h3>Loader types<a class=\"headerlink\" href=\"#loader-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, Django uses a filesystem-based template loader, but Django comes\nwith a few other template loaders, which know how to load templates from other\nsources.</p>\n<p>Some of these other loaders are disabled by default, but you can activate them\nby adding a <code class=\"docutils literal notranslate\"><span class=\"pre\">'loaders'</span></code> option to your <code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code> backend in the\n<a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting or passing a <code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code> argument to\n<a class=\"reference internal\" href=\"#django.template.Engine\" title=\"django.template.Engine\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Engine</span></code></a>. <code class=\"docutils literal notranslate\"><span class=\"pre\">loaders</span></code> should be a list of strings or\ntuples, where each represents a template loader class. Here are the template\nloaders that come with Django:</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.filesystem.Loader</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.filesystem.Loader\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">filesystem.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Loader</span></code><a class=\"headerlink\" href=\"#django.template.loaders.filesystem.Loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads templates from the filesystem, according to\n<a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a>.</p>\n<p>This loader is enabled by default. However it won\u2019t find any templates\nuntil you set <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a> to a non-empty list:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;DIRS&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>You can also override <code class=\"docutils literal notranslate\"><span class=\"pre\">'DIRS'</span></code> and specify specific directories for a\nparticular filesystem loader:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;loaders&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;django.template.loaders.filesystem.Loader&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span><span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">],</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.app_directories.Loader</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.app_directories.Loader\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">app_directories.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Loader</span></code><a class=\"headerlink\" href=\"#django.template.loaders.app_directories.Loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads templates from Django apps on the filesystem. For each app in\n<a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, the loader looks for a <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code>\nsubdirectory. If the directory exists, Django looks for templates in there.</p>\n<p>This means you can store templates with your individual apps. This also\nhelps to distribute Django apps with default templates.</p>\n<p>For example, for this setting:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;myproject.polls&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;myproject.music&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>\u2026then <code class=\"docutils literal notranslate\"><span class=\"pre\">get_template('foo.html')</span></code> will look for <code class=\"docutils literal notranslate\"><span class=\"pre\">foo.html</span></code> in these\ndirectories, in this order:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">/path/to/myproject/polls/templates/</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">/path/to/myproject/music/templates/</span></code></li>\n</ul>\n<p>\u2026 and will use the one it finds first.</p>\n<p>The order of <a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> is significant! For example, if you\nwant to customize the Django admin, you might choose to override the\nstandard <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code> template, from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code>,\nwith your own <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">myproject.polls</span></code>. You must\nthen make sure that your <code class=\"docutils literal notranslate\"><span class=\"pre\">myproject.polls</span></code> comes <em>before</em>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code> in <a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, otherwise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code>\u2019s will be loaded first and yours will be ignored.</p>\n<p>Note that the loader performs an optimization when it first runs:\nit caches a list of which <a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> packages have a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> subdirectory.</p>\n<p>You can enable this loader by setting <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-APP_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APP_DIRS</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;APP_DIRS&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.cached.Loader</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.cached.Loader\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">cached.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Loader</span></code><a class=\"headerlink\" href=\"#django.template.loaders.cached.Loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>While the Django template system is quite fast, if it needs to read and\ncompile your templates every time they\u2019re rendered, the overhead from that\ncan add up.</p>\n<p>You configure the cached template loader with a list of other loaders that\nit should wrap. The wrapped loaders are used to locate unknown templates\nwhen they\u2019re first encountered. The cached loader then stores the compiled\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> in memory. The cached <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> instance is returned for\nsubsequent requests to load the same template.</p>\n<p>This loader is automatically enabled if <a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS['loaders']</span></code></a> isn\u2019t specified.</p>\n<p>You can manually specify template caching with some custom template loaders\nusing settings like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;DIRS&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">],</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;loaders&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;django.template.loaders.cached.Loader&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">[</span>\n                        <span class=\"s2\">&quot;django.template.loaders.filesystem.Loader&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;django.template.loaders.app_directories.Loader&quot;</span><span class=\"p\">,</span>\n                        <span class=\"s2\">&quot;path.to.custom.Loader&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">],</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">All of the built-in Django template tags are safe to use with the\ncached loader, but if you\u2019re using custom template tags that come from\nthird party packages, or that you wrote yourself, you should ensure\nthat the <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> implementation for each tag is thread-safe. For more\ninformation, see <a class=\"reference internal\" href=\"../../../howto/custom-template-tags/#template-tag-thread-safety\"><span class=\"std std-ref\">template tag thread safety considerations</span></a>.</p>\n</div>\n</dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.locmem.Loader</span></code></p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.locmem.Loader\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">locmem.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Loader</span></code><a class=\"headerlink\" href=\"#django.template.loaders.locmem.Loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads templates from a Python dictionary. This is useful for testing.</p>\n<p>This loader takes a dictionary of templates as its first argument:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;loaders&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;django.template.loaders.locmem.Loader&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;content here&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">},</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">],</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This loader is disabled by default.</p>\n</dd></dl>\n\n<p>Django uses the template loaders in order according to the <code class=\"docutils literal notranslate\"><span class=\"pre\">'loaders'</span></code>\noption. It uses each loader until a loader finds a match.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-loaders\">\n<span id=\"s-custom-template-loaders\"></span><span id=\"custom-loaders\"></span><span id=\"custom-template-loaders\"></span><h2>Custom loaders<a class=\"headerlink\" href=\"#custom-loaders\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It\u2019s possible to load templates from additional sources using custom template\nloaders. Custom <code class=\"docutils literal notranslate\"><span class=\"pre\">Loader</span></code> classes should inherit from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.base.Loader</span></code> and define the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_contents()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_template_sources()</span></code> methods.</p>\n<div class=\"section\" id=\"s-loader-methods\">\n<span id=\"loader-methods\"></span><h3>Loader methods<a class=\"headerlink\" href=\"#loader-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.base.Loader\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Loader</span></code><a class=\"reference internal\" href=\"../../../_modules/django/template/loaders/base/#Loader\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.loaders.base.Loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Loads templates from a given source, such as the filesystem or a database.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.base.Loader.get_template_sources\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_template_sources</span></code>(<em><span class=\"n\"><span class=\"pre\">template_name</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/loaders/base/#Loader.get_template_sources\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.loaders.base.Loader.get_template_sources\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A method that takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code> and yields\n<a class=\"reference internal\" href=\"#django.template.base.Origin\" title=\"django.template.base.Origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a> instances for each possible\nsource.</p>\n<p>For example, the filesystem loader may receive <code class=\"docutils literal notranslate\"><span class=\"pre\">'index.html'</span></code> as a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code> argument.  This method would yield origins for the\nfull path of <code class=\"docutils literal notranslate\"><span class=\"pre\">index.html</span></code> as it appears in each template directory\nthe loader looks at.</p>\n<p>The method doesn\u2019t need to verify that the template exists at a given\npath, but it should ensure the path is valid. For instance, the\nfilesystem loader makes sure the path lies under a valid template\ndirectory.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.base.Loader.get_contents\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_contents</span></code>(<em><span class=\"n\"><span class=\"pre\">origin</span></span></em>)<a class=\"headerlink\" href=\"#django.template.loaders.base.Loader.get_contents\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the contents for a template given a\n<a class=\"reference internal\" href=\"#django.template.base.Origin\" title=\"django.template.base.Origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a> instance.</p>\n<p>This is where a filesystem loader would read contents from the\nfilesystem, or a database loader would read from the database. If a\nmatching template doesn\u2019t exist, this should raise a\n<a class=\"reference internal\" href=\"../../../topics/templates/#django.template.TemplateDoesNotExist\" title=\"django.template.TemplateDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TemplateDoesNotExist</span></code></a> error.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.loaders.base.Loader.get_template\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_template</span></code>(<em><span class=\"n\"><span class=\"pre\">template_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">skip</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/loaders/base/#Loader.get_template\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.loaders.base.Loader.get_template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> object for a given <code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code> by looping\nthrough results from <a class=\"reference internal\" href=\"#django.template.loaders.base.Loader.get_template_sources\" title=\"django.template.loaders.base.Loader.get_template_sources\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_template_sources()</span></code></a> and calling\n<a class=\"reference internal\" href=\"#django.template.loaders.base.Loader.get_contents\" title=\"django.template.loaders.base.Loader.get_contents\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_contents()</span></code></a>. This returns the first matching template. If no\ntemplate is found, <a class=\"reference internal\" href=\"../../../topics/templates/#django.template.TemplateDoesNotExist\" title=\"django.template.TemplateDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TemplateDoesNotExist</span></code></a> is\nraised.</p>\n<p>The optional <code class=\"docutils literal notranslate\"><span class=\"pre\">skip</span></code> argument is a list of origins to ignore when\nextending templates. This allow templates to extend other templates of\nthe same name. It also used to avoid recursion errors.</p>\n<p>In general, it is enough to define <a class=\"reference internal\" href=\"#django.template.loaders.base.Loader.get_template_sources\" title=\"django.template.loaders.base.Loader.get_template_sources\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_template_sources()</span></code></a> and\n<a class=\"reference internal\" href=\"#django.template.loaders.base.Loader.get_contents\" title=\"django.template.loaders.base.Loader.get_contents\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_contents()</span></code></a> for custom template loaders. <code class=\"docutils literal notranslate\"><span class=\"pre\">get_template()</span></code>\nwill usually not need to be overridden.</p>\n</dd></dl>\n\n</dd></dl>\n\n<div class=\"admonition-building-your-own admonition\">\n<p class=\"first admonition-title\">Building your own</p>\n<p class=\"last\">For examples, read the <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/template/loaders\">source code for Django\u2019s built-in loaders</a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-template-origin\">\n<span id=\"template-origin\"></span><h2>Template origin<a class=\"headerlink\" href=\"#template-origin\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Templates have an <code class=\"docutils literal notranslate\"><span class=\"pre\">origin</span></code> containing attributes depending on the source\nthey are loaded from.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.template.base.Origin\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Origin</span></code>(<em><span class=\"n\"><span class=\"pre\">name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">template_name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">loader</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/template/base/#Origin\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.template.base.Origin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.template.base.Origin.name\">\n<code class=\"sig-name descname\"><span class=\"pre\">name</span></code><a class=\"headerlink\" href=\"#django.template.base.Origin.name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The path to the template as returned by the template loader.\nFor loaders that read from the file system, this is the full\npath to the template.</p>\n<p>If the template is instantiated directly rather than through a\ntemplate loader, this is a string value of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;unknown_source&gt;</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.template.base.Origin.template_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">template_name</span></code><a class=\"headerlink\" href=\"#django.template.base.Origin.template_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The relative path to the template as passed into the\ntemplate loader.</p>\n<p>If the template is instantiated directly rather than through a\ntemplate loader, this is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.template.base.Origin.loader\">\n<code class=\"sig-name descname\"><span class=\"pre\">loader</span></code><a class=\"headerlink\" href=\"#django.template.base.Origin.loader\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The template loader instance that constructed this <code class=\"docutils literal notranslate\"><span class=\"pre\">Origin</span></code>.</p>\n<p>If the template is instantiated directly rather than through a\ntemplate loader, this is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p><a class=\"reference internal\" href=\"#django.template.loaders.cached.Loader\" title=\"django.template.loaders.cached.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.loaders.cached.Loader</span></code></a> requires all of its\nwrapped loaders to set this attribute, typically by instantiating\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Origin</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">loader=self</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/template-response", "<code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTemplateResponse</span></code>", "N", "next"], ["ref/templates/builtins", "Built-in template tags and filters", "P", "previous"]], "sourcename": "ref/templates/api.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">The Django template language: for Python programmers</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#configuring-an-engine\">Configuring an engine</a></li>\n<li><a class=\"reference internal\" href=\"#loading-a-template\">Loading a template</a></li>\n<li><a class=\"reference internal\" href=\"#rendering-a-context\">Rendering a context</a><ul>\n<li><a class=\"reference internal\" href=\"#variables-and-lookups\">Variables and lookups</a></li>\n<li><a class=\"reference internal\" href=\"#how-invalid-variables-are-handled\">How invalid variables are handled</a></li>\n<li><a class=\"reference internal\" href=\"#built-in-variables\">Built-in variables</a></li>\n<li><a class=\"reference internal\" href=\"#limitations-with-string-literals\">Limitations with string literals</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#playing-with-context-objects\">Playing with <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#using-requestcontext\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#built-in-template-context-processors\">Built-in template context processors</a><ul>\n<li><a class=\"reference internal\" href=\"#django-contrib-auth-context-processors-auth\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.context_processors.auth</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-debug\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.debug</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-i18n\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.i18n</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-media\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.media</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-static\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.static</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-csrf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.csrf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-request\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.request</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-context-processors-tz\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors.tz</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-messages-context-processors-messages\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.messages.context_processors.messages</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#writing-your-own-context-processors\">Writing your own context processors</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#loading-templates\">Loading templates</a><ul>\n<li><a class=\"reference internal\" href=\"#the-dirs-option\">The <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code> option</a></li>\n<li><a class=\"reference internal\" href=\"#loader-types\">Loader types</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#custom-loaders\">Custom loaders</a><ul>\n<li><a class=\"reference internal\" href=\"#loader-methods\">Loader methods</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#template-origin\">Template origin</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/templates/api", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}