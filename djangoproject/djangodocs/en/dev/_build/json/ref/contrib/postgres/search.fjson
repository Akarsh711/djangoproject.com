{"parents": [{"link": "../../../", "title": "API Reference"}, {"link": "../../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code> packages"}, {"link": "../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code>"}], "prev": {"link": "../operations/", "title": "Database migration operations"}, "next": {"link": "../validators/", "title": "Validators"}, "title": "Full text search", "meta": {}, "body": "<div class=\"section\" id=\"s-full-text-search\">\n<span id=\"full-text-search\"></span><h1>Full text search<a class=\"headerlink\" href=\"#full-text-search\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The database functions in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres.search</span></code> module ease\nthe use of PostgreSQL\u2019s <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/textsearch.html\">full text search engine</a>.</p>\n<p>For the examples in this document, we\u2019ll use the models defined in\n<a class=\"reference internal\" href=\"../../../../topics/db/queries/\"><span class=\"doc\">Making queries</span></a>.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">For a high-level overview of searching, see the <a class=\"reference internal\" href=\"../../../../topics/db/search/\"><span class=\"doc\">topic documentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-the-search-lookup\">\n<span id=\"the-search-lookup\"></span><h2>The <code class=\"docutils literal notranslate\"><span class=\"pre\">search</span></code> lookup<a class=\"headerlink\" href=\"#the-search-lookup\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p id=\"std-fieldlookup-search\"><span id=\"std:fieldlookup-search\"></span>A common way to use full text search is to search a single term against a\nsingle column in the database. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">body_text__search</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Entry: Cheese on Toast recipes&gt;, &lt;Entry: Pizza Recipes&gt;]</span>\n</pre></div>\n</div>\n<p>This creates a <code class=\"docutils literal notranslate\"><span class=\"pre\">to_tsvector</span></code> in the database from the <code class=\"docutils literal notranslate\"><span class=\"pre\">body_text</span></code> field\nand a <code class=\"docutils literal notranslate\"><span class=\"pre\">plainto_tsquery</span></code> from the search term <code class=\"docutils literal notranslate\"><span class=\"pre\">'Cheese'</span></code>, both using the\ndefault database search configuration. The results are obtained by matching the\nquery and the vector.</p>\n<p>To use the <code class=\"docutils literal notranslate\"><span class=\"pre\">search</span></code> lookup, <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.postgres'</span></code> must be in your\n<a class=\"reference internal\" href=\"../../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-searchvector\">\n<span id=\"searchvector\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code><a class=\"headerlink\" href=\"#searchvector\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.SearchVector\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SearchVector</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">expressions</span></span></em>, <em><span class=\"n\"><span class=\"pre\">config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">weight</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#SearchVector\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.SearchVector\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Searching against a single field is great but rather limiting. The <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>\ninstances we\u2019re searching belong to a <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code>, which has a <code class=\"docutils literal notranslate\"><span class=\"pre\">tagline</span></code> field.\nTo query against both fields, use a <code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchVector</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;blog__tagline&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Entry: Cheese on Toast recipes&gt;, &lt;Entry: Pizza Recipes&gt;]</span>\n</pre></div>\n</div>\n<p>The arguments to <code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code> can be any\n<a class=\"reference internal\" href=\"../../../models/expressions/#django.db.models.Expression\" title=\"django.db.models.Expression\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Expression</span></code></a> or the name of a field. Multiple\narguments will be concatenated together using a space so that the search\ndocument includes them all.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code> objects can be combined together, allowing you to reuse them.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__tagline&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Entry: Cheese on Toast recipes&gt;, &lt;Entry: Pizza Recipes&gt;]</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#postgresql-fts-search-configuration\"><span class=\"std std-ref\">Changing the search configuration</span></a> and\n<a class=\"reference internal\" href=\"#postgresql-fts-weighting-queries\"><span class=\"std std-ref\">Weighting queries</span></a> for an explanation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">weight</span></code> parameters.</p>\n</div>\n<div class=\"section\" id=\"s-searchquery\">\n<span id=\"searchquery\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchQuery</span></code><a class=\"headerlink\" href=\"#searchquery\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.SearchQuery\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SearchQuery</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em><span class=\"n\"><span class=\"pre\">config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">search_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'plain'</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#SearchQuery\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.SearchQuery\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchQuery</span></code> translates the terms the user provides into a search query\nobject that the database compares to a search vector. By default, all the words\nthe user provides are passed through the stemming algorithms, and then it\nlooks for matches for all of the resulting terms.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">search_type</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">'plain'</span></code>, which is the default, the terms are treated\nas separate keywords. If <code class=\"docutils literal notranslate\"><span class=\"pre\">search_type</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">'phrase'</span></code>, the terms are treated\nas a single phrase. If <code class=\"docutils literal notranslate\"><span class=\"pre\">search_type</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">'raw'</span></code>, then you can provide a\nformatted search query with terms and operators. If <code class=\"docutils literal notranslate\"><span class=\"pre\">search_type</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'websearch'</span></code>, then you can provide a formatted search query, similar to the\none used by web search engines. <code class=\"docutils literal notranslate\"><span class=\"pre\">'websearch'</span></code> requires PostgreSQL \u2265 11. Read\nPostgreSQL\u2019s <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-PARSING-QUERIES\">Full Text Search docs</a> to learn about differences and syntax.\nExamples:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchQuery</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;red tomato&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># two keywords</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;tomato red&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># same results as above</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;red tomato&#39;</span><span class=\"p\">,</span> <span class=\"n\">search_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;phrase&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># a phrase</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s1\">&#39;tomato red&#39;</span><span class=\"p\">,</span> <span class=\"n\">search_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;phrase&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># a different phrase</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;tomato&#39; &amp; (&#39;red&#39; | &#39;green&#39;)&quot;</span><span class=\"p\">,</span> <span class=\"n\">search_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;raw&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># boolean operators</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;tomato&#39; (&#39;red&#39; OR &#39;green&#39;)&quot;</span><span class=\"p\">,</span> <span class=\"n\">search_type</span><span class=\"o\">=</span><span class=\"s1\">&#39;websearch&#39;</span><span class=\"p\">)</span>  <span class=\"c1\"># websearch operators</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchQuery</span></code> terms can be combined logically to provide more flexibility:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchQuery</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;meat&quot;</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># AND</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;meat&quot;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># OR</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"o\">~</span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;meat&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># NOT</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#postgresql-fts-search-configuration\"><span class=\"std std-ref\">Changing the search configuration</span></a> for an explanation of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> parameter.</p>\n</div>\n<div class=\"section\" id=\"s-searchrank\">\n<span id=\"searchrank\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchRank</span></code><a class=\"headerlink\" href=\"#searchrank\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.SearchRank\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SearchRank</span></code>(<em><span class=\"n\"><span class=\"pre\">vector</span></span></em>, <em><span class=\"n\"><span class=\"pre\">query</span></span></em>, <em><span class=\"n\"><span class=\"pre\">weights</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">normalization</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">cover_density</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#SearchRank\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.SearchRank\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>So far, we\u2019ve returned the results for which any match between the vector and\nthe query are possible. It\u2019s likely you may wish to order the results by some\nsort of relevancy. PostgreSQL provides a ranking function which takes into\naccount how often the query terms appear in the document, how close together\nthe terms are in the document, and how important the part of the document is\nwhere they occur. The better the match, the higher the value of the rank. To\norder by relevancy:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchQuery</span><span class=\"p\">,</span> <span class=\"n\">SearchRank</span><span class=\"p\">,</span> <span class=\"n\">SearchVector</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">rank</span><span class=\"o\">=</span><span class=\"n\">SearchRank</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-rank&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Entry: Cheese on Toast recipes&gt;, &lt;Entry: Pizza recipes&gt;]</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#postgresql-fts-weighting-queries\"><span class=\"std std-ref\">Weighting queries</span></a> for an explanation of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">weights</span></code> parameter.</p>\n<p>Set the <code class=\"docutils literal notranslate\"><span class=\"pre\">cover_density</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to enable the cover density\nranking, which means that the proximity of matching query terms is taken into\naccount.</p>\n<p>Provide an integer to the <code class=\"docutils literal notranslate\"><span class=\"pre\">normalization</span></code> parameter to control rank\nnormalization. This integer is a bit mask, so you can combine multiple\nbehaviors:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">rank</span><span class=\"o\">=</span><span class=\"n\">SearchRank</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">vector</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">query</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">normalization</span><span class=\"o\">=</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bitor</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The PostgreSQL documentation has more details about <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-RANKING\">different rank\nnormalization options</a>.</p>\n</div>\n<div class=\"section\" id=\"s-searchheadline\">\n<span id=\"searchheadline\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchHeadline</span></code><a class=\"headerlink\" href=\"#searchheadline\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.SearchHeadline\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SearchHeadline</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">query</span></span></em>, <em><span class=\"n\"><span class=\"pre\">config</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">start_sel</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">stop_sel</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_words</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">min_words</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">short_word</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">highlight_all</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_fragments</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fragment_delimiter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#SearchHeadline\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.SearchHeadline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Accepts a single text field or an expression, a query, a config, and a set of\noptions. Returns highlighted search results.</p>\n<p>Set the <code class=\"docutils literal notranslate\"><span class=\"pre\">start_sel</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">stop_sel</span></code> parameters to the string values to be\nused to wrap highlighted query terms in the document. PostgreSQL\u2019s defaults are\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;b&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;/b&gt;</span></code>.</p>\n<p>Provide integer values to the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_words</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">min_words</span></code> parameters to\ndetermine the longest and shortest headlines. PostgreSQL\u2019s defaults are 35 and\n15.</p>\n<p>Provide an integer value to the <code class=\"docutils literal notranslate\"><span class=\"pre\">short_word</span></code> parameter to discard words of\nthis length or less in each headline. PostgreSQL\u2019s default is 3.</p>\n<p>Set the <code class=\"docutils literal notranslate\"><span class=\"pre\">highlight_all</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to use the whole document in\nplace of a fragment and ignore <code class=\"docutils literal notranslate\"><span class=\"pre\">max_words</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">min_words</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">short_word</span></code>\nparameters. That\u2019s disabled by default in PostgreSQL.</p>\n<p>Provide a non-zero integer value to the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_fragments</span></code> to set the maximum\nnumber of fragments to display. That\u2019s disabled by default in PostgreSQL.</p>\n<p>Set the <code class=\"docutils literal notranslate\"><span class=\"pre\">fragment_delimiter</span></code> string parameter to configure the delimiter\nbetween fragments. PostgreSQL\u2019s default is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span> <span class=\"pre\">...</span> <span class=\"pre\">&quot;</span></code>.</p>\n<p>The PostgreSQL documentation has more details on <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/textsearch-controls.html#TEXTSEARCH-HEADLINE\">highlighting search\nresults</a>.</p>\n<p>Usage example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchHeadline</span><span class=\"p\">,</span> <span class=\"n\">SearchQuery</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;red tomato&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"n\">SearchHeadline</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">query</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">start_sel</span><span class=\"o\">=</span><span class=\"s2\">&quot;&lt;span&gt;&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">stop_sel</span><span class=\"o\">=</span><span class=\"s2\">&quot;&lt;/span&gt;&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>\n<span class=\"go\">Sandwich with &lt;span&gt;tomato&lt;/span&gt; and &lt;span&gt;red&lt;/span&gt; cheese.</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#postgresql-fts-search-configuration\"><span class=\"std std-ref\">Changing the search configuration</span></a> for an explanation of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> parameter.</p>\n</div>\n<div class=\"section\" id=\"s-changing-the-search-configuration\">\n<span id=\"s-postgresql-fts-search-configuration\"></span><span id=\"changing-the-search-configuration\"></span><span id=\"postgresql-fts-search-configuration\"></span><h2>Changing the search configuration<a class=\"headerlink\" href=\"#changing-the-search-configuration\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> attribute to a <a class=\"reference internal\" href=\"#django.contrib.postgres.search.SearchVector\" title=\"django.contrib.postgres.search.SearchVector\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code></a> and\n<a class=\"reference internal\" href=\"#django.contrib.postgres.search.SearchQuery\" title=\"django.contrib.postgres.search.SearchQuery\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SearchQuery</span></code></a> to use a different search configuration. This allows using\ndifferent language parsers and dictionaries as defined by the database:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchQuery</span><span class=\"p\">,</span> <span class=\"n\">SearchVector</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s2\">&quot;french&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u0153uf&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s2\">&quot;french&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">[&lt;Entry: Pain perdu&gt;]</span>\n</pre></div>\n</div>\n<p>The value of <code class=\"docutils literal notranslate\"><span class=\"pre\">config</span></code> could also be stored in another column:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__language&quot;</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search</span><span class=\"o\">=</span><span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;\u0153uf&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__language&quot;</span><span class=\"p\">)))</span>\n<span class=\"go\">[&lt;Entry: Pain perdu&gt;]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-weighting-queries\">\n<span id=\"s-postgresql-fts-weighting-queries\"></span><span id=\"weighting-queries\"></span><span id=\"postgresql-fts-weighting-queries\"></span><h2>Weighting queries<a class=\"headerlink\" href=\"#weighting-queries\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Every field may not have the same relevance in a query, so you can set weights\nof various vectors before you combine them:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">SearchQuery</span><span class=\"p\">,</span> <span class=\"n\">SearchRank</span><span class=\"p\">,</span> <span class=\"n\">SearchVector</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">SearchVector</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;blog__tagline&quot;</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"s2\">&quot;B&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">SearchQuery</span><span class=\"p\">(</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">rank</span><span class=\"o\">=</span><span class=\"n\">SearchRank</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">rank__gte</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;rank&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The weight should be one of the following letters: D, C, B, A. By default,\nthese weights refer to the numbers <code class=\"docutils literal notranslate\"><span class=\"pre\">0.1</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">0.2</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">0.4</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">1.0</span></code>,\nrespectively. If you wish to weight them differently, pass a list of four\nfloats to <a class=\"reference internal\" href=\"#django.contrib.postgres.search.SearchRank\" title=\"django.contrib.postgres.search.SearchRank\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SearchRank</span></code></a> as <code class=\"docutils literal notranslate\"><span class=\"pre\">weights</span></code> in the same order above:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rank</span> <span class=\"o\">=</span> <span class=\"n\">SearchRank</span><span class=\"p\">(</span><span class=\"n\">vector</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">rank</span><span class=\"o\">=</span><span class=\"n\">rank</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">rank__gte</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-rank&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-performance\">\n<span id=\"performance\"></span><h2>Performance<a class=\"headerlink\" href=\"#performance\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Special database configuration isn\u2019t necessary to use any of these functions,\nhowever, if you\u2019re searching more than a few hundred records, you\u2019re likely to\nrun into performance problems. Full text search is a more intensive process\nthan comparing the size of an integer, for example.</p>\n<p>In the event that all the fields you\u2019re querying on are contained within one\nparticular model, you can create a functional\n<a class=\"reference internal\" href=\"../indexes/#django.contrib.postgres.indexes.GinIndex\" title=\"django.contrib.postgres.indexes.GinIndex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GIN</span></code></a> or\n<a class=\"reference internal\" href=\"../indexes/#django.contrib.postgres.indexes.GistIndex\" title=\"django.contrib.postgres.indexes.GistIndex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GiST</span></code></a> index which matches\nthe search vector you wish to use. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">GinIndex</span><span class=\"p\">(</span>\n    <span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"o\">=</span><span class=\"s2\">&quot;english&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;search_vector_idx&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The PostgreSQL documentation has details on\n<a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/textsearch-tables.html#TEXTSEARCH-TABLES-INDEX\">creating indexes for full text search</a>.</p>\n<div class=\"section\" id=\"s-searchvectorfield\">\n<span id=\"searchvectorfield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVectorField</span></code><a class=\"headerlink\" href=\"#searchvectorfield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.SearchVectorField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SearchVectorField</span></code><a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#SearchVectorField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.SearchVectorField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If this approach becomes too slow, you can add a <code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVectorField</span></code> to your\nmodel. You\u2019ll need to keep it populated with triggers, for example, as\ndescribed in the <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/textsearch-features.html#TEXTSEARCH-UPDATE-TRIGGERS\">PostgreSQL documentation</a>. You can then query the field as\nif it were an annotated <code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">search_vector</span><span class=\"o\">=</span><span class=\"n\">SearchVector</span><span class=\"p\">(</span><span class=\"s2\">&quot;body_text&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">search_vector</span><span class=\"o\">=</span><span class=\"s2\">&quot;cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Entry: Cheese on Toast recipes&gt;, &lt;Entry: Pizza recipes&gt;]</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-trigram-similarity\">\n<span id=\"trigram-similarity\"></span><h2>Trigram similarity<a class=\"headerlink\" href=\"#trigram-similarity\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Another approach to searching is trigram similarity. A trigram is a group of\nthree consecutive characters. In addition to the <a class=\"reference internal\" href=\"../lookups/#std-fieldlookup-trigram_similar\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">trigram_similar</span></code></a>,\n<a class=\"reference internal\" href=\"../lookups/#std-fieldlookup-trigram_word_similar\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">trigram_word_similar</span></code></a>, and <a class=\"reference internal\" href=\"../lookups/#std-fieldlookup-trigram_strict_word_similar\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">trigram_strict_word_similar</span></code></a>\nlookups, you can use a couple of other expressions.</p>\n<p>To use them, you need to activate the <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/pgtrgm.html\">pg_trgm extension</a> on PostgreSQL. You can\ninstall it using the\n<a class=\"reference internal\" href=\"../operations/#django.contrib.postgres.operations.TrigramExtension\" title=\"django.contrib.postgres.operations.TrigramExtension\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TrigramExtension</span></code></a> migration\noperation.</p>\n<div class=\"section\" id=\"s-trigramsimilarity\">\n<span id=\"trigramsimilarity\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramSimilarity</span></code><a class=\"headerlink\" href=\"#trigramsimilarity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.TrigramSimilarity\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TrigramSimilarity</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#TrigramSimilarity\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.TrigramSimilarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Accepts a field name or expression, and a string or expression. Returns the\ntrigram similarity between the two arguments.</p>\n<p>Usage example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">TrigramSimilarity</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Katy Stevens&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stephen Keats&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Katie Stephens&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">similarity</span><span class=\"o\">=</span><span class=\"n\">TrigramSimilarity</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">similarity__gt</span><span class=\"o\">=</span><span class=\"mf\">0.3</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-similarity&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Katy Stevens&gt;, &lt;Author: Stephen Keats&gt;]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-trigramwordsimilarity\">\n<span id=\"trigramwordsimilarity\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramWordSimilarity</span></code><a class=\"headerlink\" href=\"#trigramwordsimilarity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.TrigramWordSimilarity\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TrigramWordSimilarity</span></code>(<em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#TrigramWordSimilarity\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.TrigramWordSimilarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Accepts a string or expression, and a field name or expression. Returns the\ntrigram word similarity between the two arguments.</p>\n<p>Usage example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">TrigramWordSimilarity</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Katy Stevens&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stephen Keats&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Kat&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">similarity</span><span class=\"o\">=</span><span class=\"n\">TrigramWordSimilarity</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">similarity__gt</span><span class=\"o\">=</span><span class=\"mf\">0.3</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-similarity&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Katy Stevens&gt;]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-trigramstrictwordsimilarity\">\n<span id=\"trigramstrictwordsimilarity\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramStrictWordSimilarity</span></code><a class=\"headerlink\" href=\"#trigramstrictwordsimilarity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.TrigramStrictWordSimilarity\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TrigramStrictWordSimilarity</span></code>(<em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#TrigramStrictWordSimilarity\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.TrigramStrictWordSimilarity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>Accepts a string or expression, and a field name or expression. Returns the\ntrigram strict word similarity between the two arguments. Similar to\n<a class=\"reference internal\" href=\"#django.contrib.postgres.search.TrigramWordSimilarity\" title=\"django.contrib.postgres.search.TrigramWordSimilarity\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TrigramWordSimilarity()</span></code></a>, except that it forces\nextent boundaries to match word boundaries.</p>\n</div>\n<div class=\"section\" id=\"s-trigramdistance\">\n<span id=\"trigramdistance\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramDistance</span></code><a class=\"headerlink\" href=\"#trigramdistance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.TrigramDistance\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TrigramDistance</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#TrigramDistance\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.TrigramDistance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Accepts a field name or expression, and a string or expression. Returns the\ntrigram distance between the two arguments.</p>\n<p>Usage example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">TrigramDistance</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Katy Stevens&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stephen Keats&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Katie Stephens&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"n\">TrigramDistance</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"n\">test</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">distance__lte</span><span class=\"o\">=</span><span class=\"mf\">0.7</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;distance&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Katy Stevens&gt;, &lt;Author: Stephen Keats&gt;]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-trigramworddistance\">\n<span id=\"trigramworddistance\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramWordDistance</span></code><a class=\"headerlink\" href=\"#trigramworddistance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.TrigramWordDistance\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TrigramWordDistance</span></code>(<em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#TrigramWordDistance\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.TrigramWordDistance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Accepts a string or expression, and a field name or expression. Returns the\ntrigram word distance between the two arguments.</p>\n<p>Usage example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.search</span> <span class=\"kn\">import</span> <span class=\"n\">TrigramWordDistance</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Katy Stevens&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Stephen Keats&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Kat&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">distance</span><span class=\"o\">=</span><span class=\"n\">TrigramWordDistance</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">distance__lte</span><span class=\"o\">=</span><span class=\"mf\">0.7</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;distance&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&lt;Author: Katy Stevens&gt;]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-trigramstrictworddistance\">\n<span id=\"trigramstrictworddistance\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramStrictWordDistance</span></code><a class=\"headerlink\" href=\"#trigramstrictworddistance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.search.TrigramStrictWordDistance\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">TrigramStrictWordDistance</span></code>(<em><span class=\"n\"><span class=\"pre\">string</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/search/#TrigramStrictWordDistance\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.search.TrigramStrictWordDistance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>Accepts a string or expression, and a field name or expression. Returns the\ntrigram strict word distance between the two arguments.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/contrib/postgres/validators", "Validators", "N", "next"], ["ref/contrib/postgres/operations", "Database migration operations", "P", "previous"]], "sourcename": "ref/contrib/postgres/search.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Full text search</a><ul>\n<li><a class=\"reference internal\" href=\"#the-search-lookup\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">search</span></code> lookup</a></li>\n<li><a class=\"reference internal\" href=\"#searchvector\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVector</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#searchquery\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchQuery</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#searchrank\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchRank</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#searchheadline\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchHeadline</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#changing-the-search-configuration\">Changing the search configuration</a></li>\n<li><a class=\"reference internal\" href=\"#weighting-queries\">Weighting queries</a></li>\n<li><a class=\"reference internal\" href=\"#performance\">Performance</a><ul>\n<li><a class=\"reference internal\" href=\"#searchvectorfield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SearchVectorField</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#trigram-similarity\">Trigram similarity</a><ul>\n<li><a class=\"reference internal\" href=\"#trigramsimilarity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramSimilarity</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#trigramwordsimilarity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramWordSimilarity</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#trigramstrictwordsimilarity\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramStrictWordSimilarity</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#trigramdistance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramDistance</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#trigramworddistance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramWordDistance</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#trigramstrictworddistance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TrigramStrictWordDistance</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/contrib/postgres/search", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}