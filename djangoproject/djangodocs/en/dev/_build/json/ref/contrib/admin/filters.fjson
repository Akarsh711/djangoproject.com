{"parents": [{"link": "../../../", "title": "API Reference"}, {"link": "../../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code> packages"}, {"link": "../", "title": "The Django admin site"}], "prev": {"link": "../actions/", "title": "Admin actions"}, "next": {"link": "../admindocs/", "title": "The Django admin documentation generator"}, "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> List Filters", "meta": {}, "body": "<div class=\"section\" id=\"s-modeladmin-list-filters\">\n<span id=\"s-id1\"></span><span id=\"modeladmin-list-filters\"></span><span id=\"id1\"></span><h1><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> List Filters<a class=\"headerlink\" href=\"#modeladmin-list-filters\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> classes can define list filters that appear in the right sidebar\nof the change list page of the admin, as illustrated in the following\nscreenshot:</p>\n<img alt=\"../../../../_images/list_filter.png\" src=\"../../../../_images/list_filter.png\" />\n<p>To activate per-field filtering, set <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.list_filter\" title=\"django.contrib.admin.ModelAdmin.list_filter\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.list_filter</span></code></a> to a list\nor tuple of elements, where each element is one of the following types:</p>\n<ul class=\"simple\">\n<li>A field name.</li>\n<li>A subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.SimpleListFilter</span></code>.</li>\n<li>A 2-tuple containing a field name and a subclass of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.FieldListFilter</span></code>.</li>\n</ul>\n<p>See the examples below for discussion of each of these options for defining\n<code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code>.</p>\n<div class=\"section\" id=\"s-using-a-field-name\">\n<span id=\"using-a-field-name\"></span><h2>Using a field name<a class=\"headerlink\" href=\"#using-a-field-name\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The simplest option is to specify the required field names from your model.</p>\n<p>Each specified field should be either a <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">CharField</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code>, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">PersonAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;is_staff&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;company&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Field names in <code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code> can also span relations\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">__</span></code> lookup, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">PersonAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">UserAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;company__name&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-a-simplelistfilter\">\n<span id=\"using-a-simplelistfilter\"></span><h2>Using a <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleListFilter</span></code><a class=\"headerlink\" href=\"#using-a-simplelistfilter\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For custom filtering, you can define your own list filter by subclassing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.SimpleListFilter</span></code>. You need to provide the <code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">parameter_name</span></code> attributes, and override the <code class=\"docutils literal notranslate\"><span class=\"pre\">lookups</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> methods, e.g.:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DecadeBornListFilter</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">SimpleListFilter</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Human-readable title which will be displayed in the</span>\n    <span class=\"c1\"># right admin sidebar just above the filter options.</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;decade born&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Parameter for the filter that will be used in the URL query.</span>\n    <span class=\"n\">parameter_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;decade&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">lookups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns a list of tuples. The first element in each</span>\n<span class=\"sd\">        tuple is the coded value for the option that will</span>\n<span class=\"sd\">        appear in the URL query. The second element is the</span>\n<span class=\"sd\">        human-readable name for the option that will appear</span>\n<span class=\"sd\">        in the right sidebar.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"s2\">&quot;80s&quot;</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;in the eighties&quot;</span><span class=\"p\">)),</span>\n            <span class=\"p\">(</span><span class=\"s2\">&quot;90s&quot;</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;in the nineties&quot;</span><span class=\"p\">)),</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the filtered queryset based on the value</span>\n<span class=\"sd\">        provided in the query string and retrievable via</span>\n<span class=\"sd\">        `self.value()`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Compare the requested value (either &#39;80s&#39; or &#39;90s&#39;)</span>\n        <span class=\"c1\"># to decide how to filter the queryset.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;80s&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                <span class=\"n\">birthday__gte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1980</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                <span class=\"n\">birthday__lte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1989</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;90s&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n                <span class=\"n\">birthday__gte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n                <span class=\"n\">birthday__lte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1999</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">DecadeBornListFilter</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>As a convenience, the <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> object is passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">lookups</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> methods, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">AuthDecadeBornListFilter</span><span class=\"p\">(</span><span class=\"n\">DecadeBornListFilter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lookups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lookups</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_superuser</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">queryset</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Also as a convenience, the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> object is passed to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">lookups</span></code> method, for example if you want to base the lookups on the\navailable data:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">AdvancedDecadeBornListFilter</span><span class=\"p\">(</span><span class=\"n\">DecadeBornListFilter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lookups</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Only show the lookups if there actually is</span>\n<span class=\"sd\">        anyone born in the corresponding decades.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">model_admin</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">birthday__gte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1980</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">birthday__lte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1989</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"s2\">&quot;80s&quot;</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;in the eighties&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n            <span class=\"n\">birthday__gte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1990</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"n\">birthday__lte</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1999</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n            <span class=\"k\">yield</span> <span class=\"p\">(</span><span class=\"s2\">&quot;90s&quot;</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;in the nineties&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-a-field-name-and-an-explicit-fieldlistfilter\">\n<span id=\"using-a-field-name-and-an-explicit-fieldlistfilter\"></span><h2>Using a field name and an explicit <code class=\"docutils literal notranslate\"><span class=\"pre\">FieldListFilter</span></code><a class=\"headerlink\" href=\"#using-a-field-name-and-an-explicit-fieldlistfilter\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Finally, if you wish to specify an explicit filter type to use with a field you\nmay provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code> item as a 2-tuple, where the first element is a\nfield name and the second element is a class inheriting from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.FieldListFilter</span></code>, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">PersonAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;is_staff&quot;</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">BooleanFieldListFilter</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Here the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_staff</span></code> field will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanFieldListFilter</span></code>. Specifying\nonly the field name, fields will automatically use the appropriate filter for\nmost cases, but this format allows you to control the filter used.</p>\n<p>The following examples show available filter classes that you need to opt-in\nto use.</p>\n<p>You can limit the choices of a related model to the objects involved in\nthat relation using <code class=\"docutils literal notranslate\"><span class=\"pre\">RelatedOnlyFieldListFilter</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">BookAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;author&quot;</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">RelatedOnlyFieldListFilter</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Assuming <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> to a <code class=\"docutils literal notranslate\"><span class=\"pre\">User</span></code> model, this will\nlimit the <code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code> choices to the users who have written a book,\ninstead of listing all users.</p>\n<p>You can filter empty values using <code class=\"docutils literal notranslate\"><span class=\"pre\">EmptyFieldListFilter</span></code>, which can\nfilter on both empty strings and nulls, depending on what the field\nallows to store:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">BookAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">EmptyFieldListFilter</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>By defining a filter using the <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> lookup, it is possible to filter for\nany of a group of values. You need to override the <code class=\"docutils literal notranslate\"><span class=\"pre\">expected_parameters</span></code>\nmethod, and the specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_kwargs</span></code> attribute with the appropriate\nfield name. By default, multiple values in the query string will be separated\nwith commas, but this can be customized via the <code class=\"docutils literal notranslate\"><span class=\"pre\">list_separator</span></code> attribute.\nThe following example shows such a filter using the vertical-pipe character as\nthe separator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">FilterWithCustomSeparator</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">FieldListFilter</span><span class=\"p\">):</span>\n    <span class=\"c1\"># custom list separator that should be used to separate values.</span>\n    <span class=\"n\">list_separator</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;|&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">,</span> <span class=\"n\">field_path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_kwarg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">__in&quot;</span> <span class=\"o\">%</span> <span class=\"n\">field_path</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">model_admin</span><span class=\"p\">,</span> <span class=\"n\">field_path</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">expected_parameters</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_kwarg</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The <a class=\"reference internal\" href=\"../../contenttypes/#django.contrib.contenttypes.fields.GenericForeignKey\" title=\"django.contrib.contenttypes.fields.GenericForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code></a> field is\nnot supported.</p>\n</div>\n<p>List filters typically appear only if the filter has more than one choice. A\nfilter\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">has_output()</span></code> method controls whether or not it appears.</p>\n<p>It is possible to specify a custom template for rendering a list filter:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">FilterWithCustomTemplate</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">SimpleListFilter</span><span class=\"p\">):</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;custom_template.html&quot;</span>\n</pre></div>\n</div>\n<p>See the default template provided by Django (<code class=\"docutils literal notranslate\"><span class=\"pre\">admin/filter.html</span></code>) for a\nconcrete example.</p>\n</div>\n<div class=\"section\" id=\"s-facets\">\n<span id=\"s-facet-filters\"></span><span id=\"facets\"></span><span id=\"facet-filters\"></span><h2>Facets<a class=\"headerlink\" href=\"#facets\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django Development version.</span> </div>\n<p>By default, counts for each filter, known as facets, can be shown by toggling\non via the admin UI. These counts will update according to the currently\napplied filters. See <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.show_facets\" title=\"django.contrib.admin.ModelAdmin.show_facets\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.show_facets</span></code></a> for more details.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/contrib/admin/admindocs", "The Django admin documentation generator", "N", "next"], ["ref/contrib/admin/actions", "Admin actions", "P", "previous"]], "sourcename": "ref/contrib/admin/filters.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> List Filters</a><ul>\n<li><a class=\"reference internal\" href=\"#using-a-field-name\">Using a field name</a></li>\n<li><a class=\"reference internal\" href=\"#using-a-simplelistfilter\">Using a <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleListFilter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-a-field-name-and-an-explicit-fieldlistfilter\">Using a field name and an explicit <code class=\"docutils literal notranslate\"><span class=\"pre\">FieldListFilter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#facets\">Facets</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/contrib/admin/filters", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}