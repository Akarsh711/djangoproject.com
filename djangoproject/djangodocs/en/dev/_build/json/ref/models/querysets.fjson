{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Models"}], "prev": {"link": "../instances/", "title": "Model instance reference"}, "next": {"link": "../lookups/", "title": "Lookup API reference"}, "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference", "meta": {}, "body": "<div class=\"section\" id=\"s-queryset-api-reference\">\n<span id=\"queryset-api-reference\"></span><h1><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference<a class=\"headerlink\" href=\"#queryset-api-reference\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document describes the details of the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API. It builds on the\nmaterial presented in the <a class=\"reference internal\" href=\"../../../topics/db/models/\"><span class=\"doc\">model</span></a> and <a class=\"reference internal\" href=\"../../../topics/db/queries/\"><span class=\"doc\">database\nquery</span></a> guides, so you\u2019ll probably want to read and\nunderstand those documents before reading this one.</p>\n<p>Throughout this reference we\u2019ll use the <a class=\"reference internal\" href=\"../../../topics/db/queries/#queryset-model-example\"><span class=\"std std-ref\">example blog models</span></a> presented in the <a class=\"reference internal\" href=\"../../../topics/db/queries/\"><span class=\"doc\">database query guide</span></a>.</p>\n<div class=\"section\" id=\"s-when-querysets-are-evaluated\">\n<span id=\"s-id1\"></span><span id=\"when-querysets-are-evaluated\"></span><span id=\"id1\"></span><h2>When <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are evaluated<a class=\"headerlink\" href=\"#when-querysets-are-evaluated\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Internally, a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> can be constructed, filtered, sliced, and generally\npassed around without actually hitting the database. No database activity\nactually occurs until you do something to evaluate the queryset.</p>\n<p>You can evaluate a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> in the following ways:</p>\n<ul>\n<li><p class=\"first\"><strong>Iteration.</strong> A <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is iterable, and it executes its database\nquery the first time you iterate over it. For example, this will print\nthe headline of all entries in the database:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">headline</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note: Don\u2019t use this if all you want to do is determine if at least one\nresult exists. It\u2019s more efficient to use <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exists\" title=\"django.db.models.query.QuerySet.exists\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a>.</p>\n</li>\n<li><p class=\"first\"><strong>Asynchronous iteration.</strong>. A <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> can also be iterated over using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n    <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Both synchronous and asynchronous iterators of QuerySets share the same\nunderlying cache.</p>\n</li>\n<li><p class=\"first\"><strong>Slicing.</strong> As explained in <a class=\"reference internal\" href=\"../../../topics/db/queries/#limiting-querysets\"><span class=\"std std-ref\">Limiting QuerySets</span></a>, a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> can\nbe sliced, using Python\u2019s array-slicing syntax. Slicing an unevaluated\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> usually returns another unevaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, but Django\nwill execute the database query if you use the \u201cstep\u201d parameter of slice\nsyntax, and will return a list. Slicing a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that has been\nevaluated also returns a list.</p>\n<p>Also note that even though slicing an unevaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> returns\nanother unevaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, modifying it further (e.g., adding\nmore filters, or modifying ordering) is not allowed, since that does not\ntranslate well into SQL and it would not have a clear meaning either.</p>\n</li>\n<li><p class=\"first\"><strong>Pickling/Caching.</strong> See the following section for details of what\nis involved when <a class=\"reference internal\" href=\"#pickling-querysets\">pickling QuerySets</a>. The important thing for the\npurposes of this section is that the results are read from the database.</p>\n</li>\n<li><p class=\"first\"><strong>repr().</strong> A <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is evaluated when you call <code class=\"docutils literal notranslate\"><span class=\"pre\">repr()</span></code> on it.\nThis is for convenience in the Python interactive interpreter, so you can\nimmediately see your results when using the API interactively.</p>\n</li>\n<li><p class=\"first\"><strong>len().</strong> A <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is evaluated when you call <code class=\"docutils literal notranslate\"><span class=\"pre\">len()</span></code> on it.\nThis, as you might expect, returns the length of the result list.</p>\n<p>Note: If you only need to determine the number of records in the set (and\ndon\u2019t need the actual objects), it\u2019s much more efficient to handle a count\nat the database level using SQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">COUNT(*)</span></code>. Django provides a\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.count\" title=\"django.db.models.query.QuerySet.count\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">count()</span></code></a> method for precisely this reason.</p>\n</li>\n<li><p class=\"first\"><strong>list().</strong> Force evaluation of a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">list()</span></code> on\nit. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entry_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\"><strong>bool().</strong> Testing a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> in a boolean context, such as using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">bool()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">or</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">and</span></code> or an <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> statement, will cause the query\nto be executed. If there is at least one result, the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Test&quot;</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is at least one Entry with the headline Test&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note: If you only want to determine if at least one result exists (and don\u2019t\nneed the actual objects), it\u2019s more efficient to use <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exists\" title=\"django.db.models.query.QuerySet.exists\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a>.</p>\n</li>\n</ul>\n<div class=\"section\" id=\"s-pickling-querysets\">\n<span id=\"s-id2\"></span><span id=\"pickling-querysets\"></span><span id=\"id2\"></span><h3>Pickling <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#pickling-querysets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a> a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, this will force all the results to be loaded\ninto memory prior to pickling. Pickling is usually used as a precursor to\ncaching and when the cached queryset is reloaded, you want the results to\nalready be present and ready for use (reading from the database can take some\ntime, defeating the purpose of caching). This means that when you unpickle a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, it contains the results at the moment it was pickled, rather\nthan the results that are currently in the database.</p>\n<p>If you only want to pickle the necessary information to recreate the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> from the database at a later time, pickle the <code class=\"docutils literal notranslate\"><span class=\"pre\">query</span></code> attribute\nof the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>. You can then recreate the original <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> (without\nany results loaded) using some code like this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>  <span class=\"c1\"># Assuming &#39;s&#39; is the pickled string.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span>  <span class=\"c1\"># Restore the original &#39;query&#39;.</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">query</span></code> attribute is an opaque object. It represents the internals of\nthe query construction and is not part of the public API. However, it is safe\n(and fully supported) to pickle and unpickle the attribute\u2019s contents as\ndescribed here.</p>\n<div class=\"admonition-restrictions-on-queryset-values-list admonition\">\n<p class=\"first admonition-title\">Restrictions on <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.values_list()</span></code></p>\n<p>If you recreate <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values_list\" title=\"django.db.models.query.QuerySet.values_list\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.values_list()</span></code></a> using the pickled <code class=\"docutils literal notranslate\"><span class=\"pre\">query</span></code>\nattribute, it will be converted to <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.values()</span></code></a>:</p>\n<div class=\"last highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span>\n<span class=\"go\">&lt;QuerySet [(1, &#39;Beatles Blog&#39;)]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reloaded_qs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reloaded_qs</span><span class=\"o\">.</span><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reloaded_qs</span>\n<span class=\"go\">&lt;QuerySet [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Beatles Blog&#39;}]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition-you-can-t-share-pickles-between-versions admonition\">\n<p class=\"first admonition-title\">You can\u2019t share pickles between versions</p>\n<p>Pickles of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> are only valid for the version of Django that\nwas used to generate them. If you generate a pickle using Django\nversion N, there is no guarantee that pickle will be readable with\nDjango version N+1. Pickles should not be used as part of a long-term\narchival strategy.</p>\n<p class=\"last\">Since pickle compatibility errors can be difficult to diagnose, such as\nsilently corrupted objects, a <code class=\"docutils literal notranslate\"><span class=\"pre\">RuntimeWarning</span></code> is raised when you try to\nunpickle a queryset in a Django version that is different than the one in\nwhich it was pickled.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-queryset-api\">\n<span id=\"s-id3\"></span><span id=\"queryset-api\"></span><span id=\"id3\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API<a class=\"headerlink\" href=\"#queryset-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Here\u2019s the formal declaration of a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">QuerySet</span></code>(<em><span class=\"n\"><span class=\"pre\">model</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">query</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">hints</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/query/#QuerySet\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.query.QuerySet\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Usually when you\u2019ll interact with a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> you\u2019ll use it by\n<a class=\"reference internal\" href=\"../../../topics/db/queries/#chaining-filters\"><span class=\"std std-ref\">chaining filters</span></a>. To make this work, most\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods return new querysets. These methods are covered in\ndetail later in this section.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> class has the following public attributes you can use for\nintrospection:</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.ordered\">\n<code class=\"sig-name descname\"><span class=\"pre\">ordered</span></code><a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.ordered\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is ordered \u2014 i.e. has an\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> clause or a default ordering on the model.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.db\">\n<code class=\"sig-name descname\"><span class=\"pre\">db</span></code><a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.db\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The database that will be used if this query is executed now.</p>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">query</span></code> parameter to <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> exists so that specialized\nquery subclasses can reconstruct internal query state. The value of the\nparameter is an opaque representation of that query state and is not\npart of a public API.</p>\n</div>\n</dd></dl>\n\n<div class=\"section\" id=\"s-methods-that-return-new-querysets\">\n<span id=\"methods-that-return-new-querysets\"></span><h3>Methods that return new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#methods-that-return-new-querysets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django provides a range of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> refinement methods that modify either\nthe types of results returned by the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> or the way its SQL query is\nexecuted.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">These methods do not run database queries, therefore they are <strong>safe to</strong>\n<strong>run in asynchronous code</strong>, and do not have separate asynchronous\nversions.</p>\n</div>\n<div class=\"section\" id=\"s-filter\">\n<span id=\"filter\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code><a class=\"headerlink\" href=\"#filter\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.filter\">\n<code class=\"sig-name descname\"><span class=\"pre\">filter</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.filter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> containing objects that match the given lookup\nparameters.</p>\n<p>The lookup parameters (<code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>) should be in the format described in\n<a class=\"reference internal\" href=\"#id4\">Field lookups</a> below. Multiple parameters are joined via <code class=\"docutils literal notranslate\"><span class=\"pre\">AND</span></code> in the\nunderlying SQL statement.</p>\n<p>If you need to execute more complex queries (for example, queries with <code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code> statements),\nyou can use <a class=\"reference internal\" href=\"#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">objects</span></code></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code>).</p>\n</div>\n<div class=\"section\" id=\"s-exclude\">\n<span id=\"exclude\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">exclude()</span></code><a class=\"headerlink\" href=\"#exclude\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.exclude\">\n<code class=\"sig-name descname\"><span class=\"pre\">exclude</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.exclude\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> containing objects that do <em>not</em> match the given\nlookup parameters.</p>\n<p>The lookup parameters (<code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>) should be in the format described in\n<a class=\"reference internal\" href=\"#id4\">Field lookups</a> below. Multiple parameters are joined via <code class=\"docutils literal notranslate\"><span class=\"pre\">AND</span></code> in the\nunderlying SQL statement, and the whole thing is enclosed in a <code class=\"docutils literal notranslate\"><span class=\"pre\">NOT()</span></code>.</p>\n<p>This example excludes all entries whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is later than 2005-1-3\nAND whose <code class=\"docutils literal notranslate\"><span class=\"pre\">headline</span></code> is \u201cHello\u201d:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">pub_date__gt</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In SQL terms, that evaluates to:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-1-3&#39;</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;Hello&#39;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>This example excludes all entries whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is later than 2005-1-3\nOR whose headline is \u201cHello\u201d:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">pub_date__gt</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In SQL terms, that evaluates to:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-1-3&#39;</span><span class=\"w\"></span>\n<span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;Hello&#39;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note the second example is more restrictive.</p>\n<p>If you need to execute more complex queries (for example, queries with <code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code> statements),\nyou can use <a class=\"reference internal\" href=\"#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">objects</span></code></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code>).</p>\n</div>\n<div class=\"section\" id=\"s-annotate\">\n<span id=\"annotate\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">annotate()</span></code><a class=\"headerlink\" href=\"#annotate\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.annotate\">\n<code class=\"sig-name descname\"><span class=\"pre\">annotate</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Annotates each object in the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> with the provided list of <a class=\"reference internal\" href=\"../expressions/\"><span class=\"doc\">query\nexpressions</span></a>. An expression may be a simple value, a\nreference to a field on the model (or any related models), or an aggregate\nexpression (averages, sums, etc.) that has been computed over the objects that\nare related to the objects in the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<p>Each argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">annotate()</span></code> is an annotation that will be added\nto each object in the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that is returned.</p>\n<p>The aggregation functions that are provided by Django are described\nin <a class=\"reference internal\" href=\"#id6\">Aggregation Functions</a> below.</p>\n<p>Annotations specified using keyword arguments will use the keyword as\nthe alias for the annotation. Anonymous arguments will have an alias\ngenerated for them based upon the name of the aggregate function and\nthe model field that is being aggregated. Only aggregate expressions\nthat reference a single field can be anonymous arguments. Everything\nelse must be a keyword argument.</p>\n<p>For example, if you were manipulating a list of blogs, you may want\nto determine how many entries have been made in each blog:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Count</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\"># The name of the first blog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">&#39;Blogasaurus&#39;</span>\n<span class=\"go\"># The number of entries on the first blog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">entry__count</span>\n<span class=\"go\">42</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> model doesn\u2019t define an <code class=\"docutils literal notranslate\"><span class=\"pre\">entry__count</span></code> attribute by itself,\nbut by using a keyword argument to specify the aggregate function, you can\ncontrol the name of the annotation:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">number_of_entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\"># The number of entries on the first blog, using the name provided</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">number_of_entries</span>\n<span class=\"go\">42</span>\n</pre></div>\n</div>\n<p>For an in-depth discussion of aggregation, see <a class=\"reference internal\" href=\"../../../topics/db/aggregation/\"><span class=\"doc\">the topic guide on\nAggregation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-alias\">\n<span id=\"alias\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">alias()</span></code><a class=\"headerlink\" href=\"#alias\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.alias\">\n<code class=\"sig-name descname\"><span class=\"pre\">alias</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.alias\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Same as <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a>, but instead of annotating objects in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, saves the expression for later reuse with other <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>\nmethods. This is useful when the result of the expression itself is not needed\nbut it is used for filtering, ordering, or as a part of a complex expression.\nNot selecting the unused value removes redundant work from the database which\nshould result in better performance.</p>\n<p>For example, if you want to find blogs with more than 5 entries, but are not\ninterested in the exact number of entries, you could do this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Count</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">blogs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entries__gt</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">alias()</span></code> can be used in conjunction with <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a>, <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>, <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a>, and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.update\" title=\"django.db.models.query.QuerySet.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">update()</span></code></a>. To use aliased expression\nwith other methods (e.g. <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.aggregate\" title=\"django.db.models.query.QuerySet.aggregate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">aggregate()</span></code></a>), you must promote it to an\nannotation:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">alias</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n    <span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">(</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> can take expressions directly, but\nexpression construction and usage often does not happen in the same place (for\nexample, <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> method creates expressions, for later use in views).\n<code class=\"docutils literal notranslate\"><span class=\"pre\">alias()</span></code> allows building complex expressions incrementally, possibly\nspanning multiple methods and modules, refer to the expression parts by their\naliases and only use <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a> for the final result.</p>\n</div>\n<div class=\"section\" id=\"s-order-by\">\n<span id=\"order-by\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code><a class=\"headerlink\" href=\"#order-by\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.order_by\">\n<code class=\"sig-name descname\"><span class=\"pre\">order_by</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>By default, results returned by a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> are ordered by the ordering\ntuple given by the <code class=\"docutils literal notranslate\"><span class=\"pre\">ordering</span></code> option in the model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code>. You can\noverride this on a per-<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> basis by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by</span></code> method.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The result above will be ordered by <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> descending, then by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">headline</span></code> ascending. The negative sign in front of <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;-pub_date&quot;</span></code> indicates\n<em>descending</em> order. Ascending order is implied. To order randomly, use <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;?&quot;</span></code>,\nlike so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;?&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note: <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by('?')</span></code> queries may be expensive and slow, depending on the\ndatabase backend you\u2019re using.</p>\n<p>To order by a field in a different model, use the same syntax as when you are\nquerying across model relations. That is, the name of the field, followed by a\ndouble underscore (<code class=\"docutils literal notranslate\"><span class=\"pre\">__</span></code>), followed by the name of the field in the new model,\nand so on for as many models as you want to join. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you try to order by a field that is a relation to another model, Django will\nuse the default ordering on the related model, or order by the related model\u2019s\nprimary key if there is no <a class=\"reference internal\" href=\"../options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.ordering</span></code></a> specified. For example, since the <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code>\nmodel has no default ordering specified:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026is identical to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__id&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> had <code class=\"docutils literal notranslate\"><span class=\"pre\">ordering</span> <span class=\"pre\">=</span> <span class=\"pre\">['name']</span></code>, then the first queryset would be\nidentical to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__name&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can also order by <a class=\"reference internal\" href=\"../expressions/\"><span class=\"doc\">query expressions</span></a> by\ncalling <a class=\"reference internal\" href=\"../expressions/#django.db.models.Expression.asc\" title=\"django.db.models.Expression.asc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asc()</span></code></a> or <a class=\"reference internal\" href=\"../expressions/#django.db.models.Expression.desc\" title=\"django.db.models.Expression.desc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">desc()</span></code></a> on the\nexpression:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Coalesce</span><span class=\"p\">(</span><span class=\"s2\">&quot;summary&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"../expressions/#django.db.models.Expression.asc\" title=\"django.db.models.Expression.asc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asc()</span></code></a> and <a class=\"reference internal\" href=\"../expressions/#django.db.models.Expression.desc\" title=\"django.db.models.Expression.desc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">desc()</span></code></a> have arguments\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_first</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_last</span></code>) that control how null values are sorted.</p>\n<p>Be cautious when ordering by fields in related models if you are also using\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.distinct\" title=\"django.db.models.query.QuerySet.distinct\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">distinct()</span></code></a>. See the note in <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.distinct\" title=\"django.db.models.query.QuerySet.distinct\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">distinct()</span></code></a> for an explanation of how\nrelated model ordering can change the expected results.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>It is permissible to specify a multi-valued field to order the results by\n(for example, a <a class=\"reference internal\" href=\"../fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> field, or the\nreverse relation of a <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> field).</p>\n<p>Consider this case:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Event</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">parent</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;self&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;children&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;children__date&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Here, there could potentially be multiple ordering data for each <code class=\"docutils literal notranslate\"><span class=\"pre\">Event</span></code>;\neach <code class=\"docutils literal notranslate\"><span class=\"pre\">Event</span></code> with multiple <code class=\"docutils literal notranslate\"><span class=\"pre\">children</span></code> will be returned multiple times\ninto the new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> creates. In other words,\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> on the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> could return more items than you\nwere working on to begin with - which is probably neither expected nor\nuseful.</p>\n<p class=\"last\">Thus, take care when using multi-valued field to order the results. <strong>If</strong>\nyou can be sure that there will only be one ordering piece of data for each\nof the items you\u2019re ordering, this approach should not present problems. If\nnot, make sure the results are what you expect.</p>\n</div>\n<p>There\u2019s no way to specify whether ordering should be case sensitive. With\nrespect to case-sensitivity, Django will order results however your database\nbackend normally orders them.</p>\n<p>You can order by a field converted to lowercase with\n<a class=\"reference internal\" href=\"../database-functions/#django.db.models.functions.Lower\" title=\"django.db.models.functions.Lower\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Lower</span></code></a> which will achieve case-consistent\nordering:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Lower</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>If you don\u2019t want any ordering to be applied to a query, not even the default\nordering, call <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> with no parameters.</p>\n<p>You can tell if a query is ordered or not by checking the\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.ordered\" title=\"django.db.models.query.QuerySet.ordered\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">QuerySet.ordered</span></code></a> attribute, which will be <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> has been ordered in any way.</p>\n<p>Each <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> call will clear any previous ordering. For example, this\nquery will be ordered by <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> and not <code class=\"docutils literal notranslate\"><span class=\"pre\">headline</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Ordering is not a free operation. Each field you add to the ordering\nincurs a cost to your database. Each foreign key you add will\nimplicitly include all of its default orderings as well.</p>\n<p class=\"last\">If a query doesn\u2019t have an ordering specified, results are returned from\nthe database in an unspecified order. A particular ordering is guaranteed\nonly when ordering by a set of fields that uniquely identify each object in\nthe results. For example, if a <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> field isn\u2019t unique, ordering by it\nwon\u2019t guarantee objects with the same name always appear in the same order.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-reverse\">\n<span id=\"reverse\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code><a class=\"headerlink\" href=\"#reverse\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.reverse\">\n<code class=\"sig-name descname\"><span class=\"pre\">reverse</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.reverse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> method to reverse the order in which a queryset\u2019s\nelements are returned. Calling <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> a second time restores the\nordering back to the normal direction.</p>\n<p>To retrieve the \u201clast\u201d five items in a queryset, you could do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">my_queryset</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Note that this is not quite the same as slicing from the end of a sequence in\nPython. The above example will return the last item first, then the\npenultimate item and so on. If we had a Python sequence and looked at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">seq[-5:]</span></code>, we would see the fifth-last item first. Django doesn\u2019t support\nthat mode of access (slicing from the end), because it\u2019s not possible to do it\nefficiently in SQL.</p>\n<p>Also, note that <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> should generally only be called on a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>\nwhich has a defined ordering (e.g., when querying against a model which defines\na default ordering, or when using <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a>). If no such ordering is\ndefined for a given <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, calling <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> on it has no real\neffect (the ordering was undefined prior to calling <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code>, and will\nremain undefined afterward).</p>\n</div>\n<div class=\"section\" id=\"s-distinct\">\n<span id=\"distinct\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code><a class=\"headerlink\" href=\"#distinct\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.distinct\">\n<code class=\"sig-name descname\"><span class=\"pre\">distinct</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.distinct\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that uses <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">DISTINCT</span></code> in its SQL query. This\neliminates duplicate rows from the query results.</p>\n<p>By default, a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> will not eliminate duplicate rows. In practice, this\nis rarely a problem, because simple queries such as <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog.objects.all()</span></code>\ndon\u2019t introduce the possibility of duplicate result rows. However, if your\nquery spans multiple tables, it\u2019s possible to get duplicate results when a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is evaluated. That\u2019s when you\u2019d use <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Any fields used in an <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> call are included in the SQL\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> columns. This can sometimes lead to unexpected results when used\nin conjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code>. If you order by fields from a related\nmodel, those fields will be added to the selected columns and they may make\notherwise duplicate rows appear to be distinct. Since the extra columns\ndon\u2019t appear in the returned results (they are only there to support\nordering), it sometimes looks like non-distinct results are being returned.</p>\n<p>Similarly, if you use a <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a> query to restrict the columns\nselected, the columns used in any <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> (or default model\nordering) will still be involved and may affect uniqueness of the results.</p>\n<p class=\"last\">The moral here is that if you are using <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code> be careful about\nordering by related models. Similarly, when using <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code> and\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a> together, be careful when ordering by fields not in the\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a> call.</p>\n</div>\n<p>On PostgreSQL only, you can pass positional arguments (<code class=\"docutils literal notranslate\"><span class=\"pre\">*fields</span></code>) in order to\nspecify the names of fields to which the <code class=\"docutils literal notranslate\"><span class=\"pre\">DISTINCT</span></code> should apply. This\ntranslates to a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">DISTINCT</span> <span class=\"pre\">ON</span></code> SQL query. Here\u2019s the difference. For a\nnormal <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code> call, the database compares <em>each</em> field in each row when\ndetermining which rows are distinct. For a <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code> call with specified\nfield names, the database will only compare the specified field names.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>When you specify field names, you <em>must</em> provide an <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, and the fields in <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> must start with the fields in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code>, in the same order.</p>\n<p class=\"last\">For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">DISTINCT</span> <span class=\"pre\">ON</span> <span class=\"pre\">(a)</span></code> gives you the first row for each\nvalue in column <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code>. If you don\u2019t specify an order, you\u2019ll get some\narbitrary row.</p>\n</div>\n<p>Examples (those after the first will only work on PostgreSQL):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span>\n<span class=\"go\">[...]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[...]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[...]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;author&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;author&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[...]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mod_date&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;mod_date&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[...]</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;author&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;author&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[...]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Keep in mind that <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> uses any default related model ordering\nthat has been defined. You might have to explicitly order by the relation\n<code class=\"docutils literal notranslate\"><span class=\"pre\">_id</span></code> or referenced field to make sure the <code class=\"docutils literal notranslate\"><span class=\"pre\">DISTINCT</span> <span class=\"pre\">ON</span></code> expressions\nmatch those at the beginning of the <code class=\"docutils literal notranslate\"><span class=\"pre\">ORDER</span> <span class=\"pre\">BY</span></code> clause. For example, if\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> model defined an <a class=\"reference internal\" href=\"../options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ordering</span></code></a> by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"last\">\u2026wouldn\u2019t work because the query would be ordered by <code class=\"docutils literal notranslate\"><span class=\"pre\">blog__name</span></code> thus\nmismatching the <code class=\"docutils literal notranslate\"><span class=\"pre\">DISTINCT</span> <span class=\"pre\">ON</span></code> expression. You\u2019d have to explicitly order\nby the relation <code class=\"docutils literal notranslate\"><span class=\"pre\">_id</span></code> field (<code class=\"docutils literal notranslate\"><span class=\"pre\">blog_id</span></code> in this case) or the referenced\none (<code class=\"docutils literal notranslate\"><span class=\"pre\">blog__pk</span></code>) to make sure both expressions match.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-values\">\n<span id=\"values\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code><a class=\"headerlink\" href=\"#values\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.values\">\n<code class=\"sig-name descname\"><span class=\"pre\">values</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">expressions</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.values\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that returns dictionaries, rather than model instances,\nwhen used as an iterable.</p>\n<p>Each of those dictionaries represents an object, with the keys corresponding to\nthe attribute names of model objects.</p>\n<p>This example compares the dictionaries of <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> with the normal model\nobjects:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># This list contains a Blog object.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Beatles&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Blog: Beatles Blog&gt;]&gt;</span>\n\n<span class=\"go\"># This list contains a dictionary.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Beatles&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Beatles Blog&#39;, &#39;tagline&#39;: &#39;All the latest Beatles news.&#39;}]&gt;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> method takes optional positional arguments, <code class=\"docutils literal notranslate\"><span class=\"pre\">*fields</span></code>, which\nspecify field names to which the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> should be limited. If you specify\nthe fields, each dictionary will contain only the field keys/values for the\nfields you specify. If you don\u2019t specify the fields, each dictionary will\ncontain a key and value for every field in the database table.</p>\n<p>Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Beatles Blog&#39;, &#39;tagline&#39;: &#39;All the latest Beatles news.&#39;}]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [{&#39;id&#39;: 1, &#39;name&#39;: &#39;Beatles Blog&#39;}]&gt;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> method also takes optional keyword arguments,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">**expressions</span></code>, which are passed through to <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Lower</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">lower_name</span><span class=\"o\">=</span><span class=\"n\">Lower</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [{&#39;lower_name&#39;: &#39;beatles blog&#39;}]&gt;</span>\n</pre></div>\n</div>\n<p>You can use built-in and <a class=\"reference internal\" href=\"../../../howto/custom-lookups/\"><span class=\"doc\">custom lookups</span></a> in\nordering. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">CharField</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Lower</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">CharField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">Lower</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;name__lower&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [{&#39;name__lower&#39;: &#39;beatles blog&#39;}]&gt;</span>\n</pre></div>\n</div>\n<p>An aggregate within a <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> clause is applied before other arguments\nwithin the same <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> clause. If you need to group by another value,\nadd it to an earlier <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> clause instead. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Count</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry__authors&quot;</span><span class=\"p\">,</span> <span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [{&#39;entry__authors&#39;: 1, &#39;entries&#39;: 20}, {&#39;entry__authors&#39;: 1, &#39;entries&#39;: 13}]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry__authors&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [{&#39;entry__authors&#39;: 1, &#39;entries&#39;: 33}]&gt;</span>\n</pre></div>\n</div>\n<p>A few subtleties that are worth mentioning:</p>\n<ul>\n<li><p class=\"first\">If you have a field called <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code> that is a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>, the default <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> call\nwill return a dictionary key called <code class=\"docutils literal notranslate\"><span class=\"pre\">foo_id</span></code>, since this is the name\nof the hidden model attribute that stores the actual value (the <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code>\nattribute refers to the related model). When you are calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> and passing in field names, you can pass in either <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">foo_id</span></code> and you will get back the same thing (the dictionary key\nwill match the field name you passed in).</p>\n<p>For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [{&#39;blog_id&#39;: 1, &#39;headline&#39;: &#39;First Entry&#39;, ...}, ...]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [{&#39;blog&#39;: 1}, ...]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog_id&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [{&#39;blog_id&#39;: 1}, ...]&gt;</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">When using <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> together with <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.distinct\" title=\"django.db.models.query.QuerySet.distinct\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">distinct()</span></code></a>, be aware that\nordering can affect the results. See the note in <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.distinct\" title=\"django.db.models.query.QuerySet.distinct\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">distinct()</span></code></a> for\ndetails.</p>\n</li>\n<li><p class=\"first\">If you use a <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> clause after an <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.extra\" title=\"django.db.models.query.QuerySet.extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">extra()</span></code></a> call,\nany fields defined by a <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code> argument in the <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.extra\" title=\"django.db.models.query.QuerySet.extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">extra()</span></code></a> must\nbe explicitly included in the <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> call. Any <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.extra\" title=\"django.db.models.query.QuerySet.extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">extra()</span></code></a> call\nmade after a <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> call will have its extra selected fields\nignored.</p>\n</li>\n<li><p class=\"first\">Calling <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> after <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> doesn\u2019t make\nsense, so doing so will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code>.</p>\n</li>\n<li><p class=\"first\">Combining transforms and aggregates requires the use of two <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a>\ncalls, either explicitly or as keyword arguments to <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a>. As above,\nif the transform has been registered on the relevant field type the first\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a> can be omitted, thus the following examples are equivalent:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">CharField</span><span class=\"p\">,</span> <span class=\"n\">Count</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Lower</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">CharField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">Lower</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry__authors__name__lower&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [{&#39;entry__authors__name__lower&#39;: &#39;test author&#39;, &#39;entries&#39;: 33}]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"n\">entry__authors__name__lower</span><span class=\"o\">=</span><span class=\"n\">Lower</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry__authors__name&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [{&#39;entry__authors__name__lower&#39;: &#39;test author&#39;, &#39;entries&#39;: 33}]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">entry__authors__name__lower</span><span class=\"o\">=</span><span class=\"n\">Lower</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry__authors__name&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;entry__authors__name__lower&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [{&#39;entry__authors__name__lower&#39;: &#39;test author&#39;, &#39;entries&#39;: 33}]&gt;</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>It is useful when you know you\u2019re only going to need values from a small number\nof the available fields and you won\u2019t need the functionality of a model\ninstance object. It\u2019s more efficient to select only the fields you need to use.</p>\n<p>Finally, note that you can call <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code>, etc. after the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> call, that means that these two calls are identical:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>The people who made Django prefer to put all the SQL-affecting methods first,\nfollowed (optionally) by any output-affecting methods (such as <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code>),\nbut it doesn\u2019t really matter. This is your chance to really flaunt your\nindividualism.</p>\n<p>You can also refer to fields on related models with reverse relations through\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> attributes:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;entry__headline&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [{&#39;name&#39;: &#39;My blog&#39;, &#39;entry__headline&#39;: &#39;An entry&#39;},</span>\n<span class=\"go\">     {&#39;name&#39;: &#39;My blog&#39;, &#39;entry__headline&#39;: &#39;Another entry&#39;}, ...]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Because <a class=\"reference internal\" href=\"../fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> attributes and reverse\nrelations can have multiple related rows, including these can have a\nmultiplier effect on the size of your result set. This will be especially\npronounced if you include multiple such fields in your <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> query,\nin which case all possible combinations will be returned.</p>\n</div>\n<div class=\"admonition-special-values-for-jsonfield-on-sqlite admonition\">\n<p class=\"first admonition-title\">Special values for <code class=\"docutils literal notranslate\"><span class=\"pre\">JSONField</span></code> on SQLite</p>\n<p class=\"last\">Due to the way the <code class=\"docutils literal notranslate\"><span class=\"pre\">JSON_EXTRACT</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">JSON_TYPE</span></code> SQL functions are\nimplemented on SQLite, and lack of the <code class=\"docutils literal notranslate\"><span class=\"pre\">BOOLEAN</span></code> data type,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> will return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> instead of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;true&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;false&quot;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;null&quot;</span></code> strings for\n<a class=\"reference internal\" href=\"../fields/#django.db.models.JSONField\" title=\"django.db.models.JSONField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a> key transforms.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-values-list\">\n<span id=\"values-list\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code><a class=\"headerlink\" href=\"#values-list\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.values_list\">\n<code class=\"sig-name descname\"><span class=\"pre\">values_list</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>, <em><span class=\"n\"><span class=\"pre\">flat</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">named</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.values_list\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This is similar to <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> except that instead of returning dictionaries,\nit returns tuples when iterated over. Each tuple contains the value from the\nrespective field or expression passed into the <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code> call \u2014 so the\nfirst item is the first field, etc. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [(1, &#39;First entry&#39;), ...]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Lower</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"n\">Lower</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [(1, &#39;first entry&#39;), ...]&gt;</span>\n</pre></div>\n</div>\n<p>If you only pass in a single field, you can also pass in the <code class=\"docutils literal notranslate\"><span class=\"pre\">flat</span></code>\nparameter. If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this will mean the returned results are single values,\nrather than one-tuples. An example should make the difference clearer:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet[(1,), (2,), (3,), ...]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [1, 2, 3, ...]&gt;</span>\n</pre></div>\n</div>\n<p>It is an error to pass in <code class=\"docutils literal notranslate\"><span class=\"pre\">flat</span></code> when there is more than one field.</p>\n<p>You can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">named=True</span></code> to get results as a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">namedtuple()</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;id&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">,</span> <span class=\"n\">named</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [Row(id=1, headline=&#39;First entry&#39;), ...]&gt;</span>\n</pre></div>\n</div>\n<p>Using a named tuple may make use of the results more readable, at the expense\nof a small performance penalty for transforming the results into a named tuple.</p>\n<p>If you don\u2019t pass any values to <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code>, it will return all the\nfields in the model, in the order they were declared.</p>\n<p>A common need is to get a specific field value of a certain model instance. To\nachieve that, use <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code> followed by a <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> call:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;First entry&#39;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code> are both intended as optimizations for a\nspecific use case: retrieving a subset of data without the overhead of creating\na model instance. This metaphor falls apart when dealing with many-to-many and\nother multivalued relations (such as the one-to-many relation of a reverse\nforeign key) because the \u201cone row, one object\u201d assumption doesn\u2019t hold.</p>\n<p>For example, notice the behavior when querying across a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;entry__headline&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [(&#39;Noam Chomsky&#39;, &#39;Impressions of Gaza&#39;),</span>\n<span class=\"go\"> (&#39;George Orwell&#39;, &#39;Why Socialists Do Not Believe in Fun&#39;),</span>\n<span class=\"go\"> (&#39;George Orwell&#39;, &#39;In Defence of English Cooking&#39;),</span>\n<span class=\"go\"> (&#39;Don Quixote&#39;, None)]&gt;</span>\n</pre></div>\n</div>\n<p>Authors with multiple entries appear multiple times and authors without any\nentries have <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the entry headline.</p>\n<p>Similarly, when querying a reverse foreign key, <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> appears for entries\nnot having any author:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;authors&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [(&#39;Noam Chomsky&#39;,), (&#39;George Orwell&#39;,), (None,)]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition-special-values-for-jsonfield-on-sqlite admonition\">\n<p class=\"first admonition-title\">Special values for <code class=\"docutils literal notranslate\"><span class=\"pre\">JSONField</span></code> on SQLite</p>\n<p class=\"last\">Due to the way the <code class=\"docutils literal notranslate\"><span class=\"pre\">JSON_EXTRACT</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">JSON_TYPE</span></code> SQL functions are\nimplemented on SQLite, and lack of the <code class=\"docutils literal notranslate\"><span class=\"pre\">BOOLEAN</span></code> data type,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code> will return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> instead of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;true&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;false&quot;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;null&quot;</span></code> strings for\n<a class=\"reference internal\" href=\"../fields/#django.db.models.JSONField\" title=\"django.db.models.JSONField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a> key transforms.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-dates\">\n<span id=\"dates\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">dates()</span></code><a class=\"headerlink\" href=\"#dates\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.dates\">\n<code class=\"sig-name descname\"><span class=\"pre\">dates</span></code>(<em><span class=\"n\"><span class=\"pre\">field</span></span></em>, <em><span class=\"n\"><span class=\"pre\">kind</span></span></em>, <em><span class=\"n\"><span class=\"pre\">order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'ASC'</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.dates\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that evaluates to a list of <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.date</span></code></a>\nobjects representing all available dates of a particular kind within the\ncontents of the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">field</span></code> should be the name of a <code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code> of your model.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span></code> should be either <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;year&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;month&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;week&quot;</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;day&quot;</span></code>.\nEach <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.date\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.date</span></code></a> object in the result list is \u201ctruncated\u201d to the\ngiven <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code>.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;year&quot;</span></code> returns a list of all distinct year values for the field.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;month&quot;</span></code> returns a list of all distinct year/month values for the\nfield.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;week&quot;</span></code> returns a list of all distinct year/week values for the field. All\ndates will be a Monday.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;day&quot;</span></code> returns a list of all distinct year/month/day values for the\nfield.</li>\n</ul>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">order</span></code>, which defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">'ASC'</span></code>, should be either <code class=\"docutils literal notranslate\"><span class=\"pre\">'ASC'</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'DESC'</span></code>. This specifies how to order the results.</p>\n<p>Examples:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">dates</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;year&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.date(2005, 1, 1)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">dates</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;month&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.date(2005, 2, 1), datetime.date(2005, 3, 1)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">dates</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;week&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.date(2005, 2, 14), datetime.date(2005, 3, 14)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">dates</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;day&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.date(2005, 2, 20), datetime.date(2005, 3, 20)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">dates</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;day&quot;</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"s2\">&quot;DESC&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.date(2005, 3, 20), datetime.date(2005, 2, 20)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">dates</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;day&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[datetime.date(2005, 3, 20)]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-datetimes\">\n<span id=\"datetimes\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">datetimes()</span></code><a class=\"headerlink\" href=\"#datetimes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.datetimes\">\n<code class=\"sig-name descname\"><span class=\"pre\">datetimes</span></code>(<em><span class=\"n\"><span class=\"pre\">field_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">kind</span></span></em>, <em><span class=\"n\"><span class=\"pre\">order</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'ASC'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">tzinfo</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.datetimes\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that evaluates to a list of <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.datetime</span></code></a>\nobjects representing all available dates of a particular kind within the\ncontents of the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">field_name</span></code> should be the name of a <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code> of your model.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">kind</span></code> should be either <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;year&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;month&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;week&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;day&quot;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;hour&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;minute&quot;</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;second&quot;</span></code>. Each <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.datetime</span></code></a>\nobject in the result list is \u201ctruncated\u201d to the given <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">order</span></code>, which defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">'ASC'</span></code>, should be either <code class=\"docutils literal notranslate\"><span class=\"pre\">'ASC'</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'DESC'</span></code>. This specifies how to order the results.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">tzinfo</span></code> defines the time zone to which datetimes are converted prior to\ntruncation. Indeed, a given datetime has different representations depending\non the time zone in use. This parameter must be a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.tzinfo\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.tzinfo</span></code></a>\nobject. If it\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, Django uses the <a class=\"reference internal\" href=\"../../../topics/i18n/timezones/#default-current-time-zone\"><span class=\"std std-ref\">current time zone</span></a>. It has no effect when <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<div class=\"admonition note\" id=\"database-time-zone-definitions\">\n<p class=\"first admonition-title\">Note</p>\n<p>This function performs time zone conversions directly in the database.\nAs a consequence, your database must be able to interpret the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tzinfo.tzname(None)</span></code>. This translates into the following requirements:</p>\n<ul class=\"last simple\">\n<li>SQLite: no requirements. Conversions are performed in Python.</li>\n<li>PostgreSQL: no requirements (see <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/datatype-datetime.html#DATATYPE-TIMEZONES\">Time Zones</a>).</li>\n<li>Oracle: no requirements (see <a class=\"reference external\" href=\"https://docs.oracle.com/en/database/oracle/oracle-database/18/nlspg/datetime-data-types-and-time-zone-support.html#GUID-805AB986-DE12-4FEA-AF56-5AABCD2132DF\">Choosing a Time Zone File</a>).</li>\n<li>MySQL: load the time zone tables with <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html\">mysql_tzinfo_to_sql</a>.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-none\">\n<span id=\"none\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">none()</span></code><a class=\"headerlink\" href=\"#none\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.none\">\n<code class=\"sig-name descname\"><span class=\"pre\">none</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.none\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Calling <code class=\"docutils literal notranslate\"><span class=\"pre\">none()</span></code> will create a queryset that never returns any objects and no\nquery will be executed when accessing the results. A <code class=\"docutils literal notranslate\"><span class=\"pre\">qs.none()</span></code> queryset\nis an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">EmptyQuerySet</span></code>.</p>\n<p>Examples:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">none</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.query</span> <span class=\"kn\">import</span> <span class=\"n\">EmptyQuerySet</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">none</span><span class=\"p\">(),</span> <span class=\"n\">EmptyQuerySet</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-all\">\n<span id=\"all\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">all()</span></code><a class=\"headerlink\" href=\"#all\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.all\">\n<code class=\"sig-name descname\"><span class=\"pre\">all</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.all\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a <em>copy</em> of the current <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> (or <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> subclass).  This\ncan be useful in situations where you might want to pass in either a model\nmanager or a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and do further filtering on the result. After calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">all()</span></code> on either object, you\u2019ll definitely have a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> to work with.</p>\n<p>When a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is <a class=\"reference internal\" href=\"#when-querysets-are-evaluated\"><span class=\"std std-ref\">evaluated</span></a>, it\ntypically caches its results. If the data in the database might have changed\nsince a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> was evaluated, you can get updated results for the same\nquery by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">all()</span></code> on a previously evaluated <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-union\">\n<span id=\"union\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">union()</span></code><a class=\"headerlink\" href=\"#union\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.union\">\n<code class=\"sig-name descname\"><span class=\"pre\">union</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">other_qs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">all</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.union\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Uses SQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">UNION</span></code> operator to combine the results of two or more\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s. For example:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs1</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">qs2</span><span class=\"p\">,</span> <span class=\"n\">qs3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">UNION</span></code> operator selects only distinct values by default. To allow\nduplicate values, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">all=True</span></code> argument.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">union()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">intersection()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">difference()</span></code> return model instances\nof the type of the first <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> even if the arguments are <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s\nof other models. Passing different models works as long as the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> list\nis the same in all <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s (at least the types, the names don\u2019t matter\nas long as the types are in the same order). In such cases, you must use the\ncolumn names from the first <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods applied to the\nresulting <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs1</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs2</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs1</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">qs2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In addition, only <code class=\"docutils literal notranslate\"><span class=\"pre\">LIMIT</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">OFFSET</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">COUNT(*)</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">ORDER</span> <span class=\"pre\">BY</span></code>, and\nspecifying columns (i.e. slicing, <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.count\" title=\"django.db.models.query.QuerySet.count\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">count()</span></code></a>, <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exists\" title=\"django.db.models.query.QuerySet.exists\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a>, and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a>/<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values_list\" title=\"django.db.models.query.QuerySet.values_list\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values_list()</span></code></a>) are allowed\non the resulting <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>. Further, databases place restrictions on\nwhat operations are allowed in the combined queries. For example, most\ndatabases don\u2019t allow <code class=\"docutils literal notranslate\"><span class=\"pre\">LIMIT</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">OFFSET</span></code> in the combined queries.</p>\n</div>\n<div class=\"section\" id=\"s-intersection\">\n<span id=\"intersection\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">intersection()</span></code><a class=\"headerlink\" href=\"#intersection\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.intersection\">\n<code class=\"sig-name descname\"><span class=\"pre\">intersection</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">other_qs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.intersection\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Uses SQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">INTERSECT</span></code> operator to return the shared elements of two or more\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s. For example:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs1</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">qs2</span><span class=\"p\">,</span> <span class=\"n\">qs3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.union\" title=\"django.db.models.query.QuerySet.union\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">union()</span></code></a> for some restrictions.</p>\n</div>\n<div class=\"section\" id=\"s-difference\">\n<span id=\"difference\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">difference()</span></code><a class=\"headerlink\" href=\"#difference\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.difference\">\n<code class=\"sig-name descname\"><span class=\"pre\">difference</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">other_qs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.difference\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Uses SQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">EXCEPT</span></code> operator to keep only elements present in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> but not in some other <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs1</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">qs2</span><span class=\"p\">,</span> <span class=\"n\">qs3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.union\" title=\"django.db.models.query.QuerySet.union\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">union()</span></code></a> for some restrictions.</p>\n</div>\n<div class=\"section\" id=\"s-select-related\">\n<span id=\"select-related\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code><a class=\"headerlink\" href=\"#select-related\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.select_related\">\n<code class=\"sig-name descname\"><span class=\"pre\">select_related</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that will \u201cfollow\u201d foreign-key relationships, selecting\nadditional related-object data when it executes its query. This is a\nperformance booster which results in a single more complex query but means\nlater use of foreign-key relationships won\u2019t require database queries.</p>\n<p>The following examples illustrate the difference between plain lookups and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> lookups. Here\u2019s standard lookup:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Hits the database.</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Hits the database again to get the related Blog object.</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span>\n</pre></div>\n</div>\n<p>And here\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code> lookup:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Hits the database.</span>\n<span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Doesn&#39;t hit the database, because e.blog has been prepopulated</span>\n<span class=\"c1\"># in the previous query.</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span>\n</pre></div>\n</div>\n<p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> with any queryset of objects:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n<span class=\"c1\"># Find all the blogs with entries scheduled to be published in the future.</span>\n<span class=\"n\">blogs</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__gt</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Without select_related(), this would make a database query for each</span>\n    <span class=\"c1\"># loop iteration in order to fetch the related blog for each entry.</span>\n    <span class=\"n\">blogs</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The order of <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> chaining isn\u2019t important.\nThese querysets are equivalent:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__gt</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__gt</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>You can follow foreign keys in a similar way to querying them. If you have the\nfollowing models:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">City</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">hometown</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">City</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SET_NULL</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026 then a call to <code class=\"docutils literal notranslate\"><span class=\"pre\">Book.objects.select_related('author__hometown').get(id=4)</span></code>\nwill cache the related <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> <em>and</em> the related <code class=\"docutils literal notranslate\"><span class=\"pre\">City</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Hits the database with joins to the author and hometown tables.</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;author__hometown&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">author</span>  <span class=\"c1\"># Doesn&#39;t hit the database.</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">hometown</span>  <span class=\"c1\"># Doesn&#39;t hit the database.</span>\n\n<span class=\"c1\"># Without select_related()...</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>  <span class=\"c1\"># Hits the database.</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">author</span>  <span class=\"c1\"># Hits the database.</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">hometown</span>  <span class=\"c1\"># Hits the database.</span>\n</pre></div>\n</div>\n<p>You can refer to any <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> or\n<a class=\"reference internal\" href=\"../fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> relation in the list of fields\npassed to <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code>.</p>\n<p>You can also refer to the reverse direction of a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> in the list of fields passed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code> \u2014 that is, you can traverse a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> back to the object on which the field\nis defined. Instead of specifying the field name, use the <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> for the field on the related object.</p>\n<p>There may be some situations where you wish to call <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> with a\nlot of related objects, or where you don\u2019t know all of the relations. In these\ncases it is possible to call <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> with no arguments. This will\nfollow all non-null foreign keys it can find - nullable foreign keys must be\nspecified. This is not recommended in most cases as it is likely to make the\nunderlying query more complex, and return more data, than is actually needed.</p>\n<p>If you need to clear the list of related fields added by past calls of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code> on a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, you can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as a parameter:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">without_relations</span> <span class=\"o\">=</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Chaining <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code> calls works in a similar way to other methods -\nthat is that <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related('foo',</span> <span class=\"pre\">'bar')</span></code> is equivalent to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related('foo').select_related('bar')</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-prefetch-related\">\n<span id=\"prefetch-related\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code><a class=\"headerlink\" href=\"#prefetch-related\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.prefetch_related\">\n<code class=\"sig-name descname\"><span class=\"pre\">prefetch_related</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">lookups</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.prefetch_related\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that will automatically retrieve, in a single batch,\nrelated objects for each of the specified lookups.</p>\n<p>This has a similar purpose to <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code>, in that both are designed to\nstop the deluge of database queries that is caused by accessing related objects,\nbut the strategy is quite different.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code> works by creating an SQL join and including the fields of the\nrelated object in the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> statement. For this reason, <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code>\ngets the related objects in the same database query. However, to avoid the much\nlarger result set that would result from joining across a \u2018many\u2019 relationship,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code> is limited to single-valued relationships - foreign key and\none-to-one.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code>, on the other hand, does a separate lookup for each\nrelationship, and does the \u2018joining\u2019 in Python. This allows it to prefetch\nmany-to-many and many-to-one objects, which cannot be done using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code>, in addition to the foreign key and one-to-one relationships\nthat are supported by <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code>. It also supports prefetching of\n<a class=\"reference internal\" href=\"../../contrib/contenttypes/#django.contrib.contenttypes.fields.GenericRelation\" title=\"django.contrib.contenttypes.fields.GenericRelation\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericRelation</span></code></a> and\n<a class=\"reference internal\" href=\"../../contrib/contenttypes/#django.contrib.contenttypes.fields.GenericForeignKey\" title=\"django.contrib.contenttypes.fields.GenericForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code></a>, however, it\nmust be restricted to a homogeneous set of results. For example, prefetching\nobjects referenced by a <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code> is only supported if the query\nis restricted to one <code class=\"docutils literal notranslate\"><span class=\"pre\">ContentType</span></code>.</p>\n<p>For example, suppose you have these models:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Topping</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Pizza</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">toppings</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Topping</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> (</span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">topping</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"k\">for</span> <span class=\"n\">topping</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()),</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>and run:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">[&quot;Hawaiian (ham, pineapple)&quot;, &quot;Seafood (prawns, smoked salmon)&quot;...</span>\n</pre></div>\n</div>\n<p>The problem with this is that every time <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza.__str__()</span></code> asks for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.toppings.all()</span></code> it has to query the database, so\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza.objects.all()</span></code> will run a query on the Toppings table for <strong>every</strong>\nitem in the Pizza <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<p>We can reduce to just two queries using <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code>:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s1\">&#39;toppings&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This implies a <code class=\"docutils literal notranslate\"><span class=\"pre\">self.toppings.all()</span></code> for each <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code>; now each time\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.toppings.all()</span></code> is called, instead of having to go to the database for\nthe items, it will find them in a prefetched <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> cache that was\npopulated in a single query.</p>\n<p>That is, all the relevant toppings will have been fetched in a single query,\nand used to make <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> that have a pre-filled cache of the relevant\nresults; these <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> are then used in the <code class=\"docutils literal notranslate\"><span class=\"pre\">self.toppings.all()</span></code> calls.</p>\n<p>The additional queries in <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code> are executed after the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> has begun to be evaluated and the primary query has been executed.</p>\n<p>If you have an iterable of model instances, you can prefetch related attributes\non those instances using the <a class=\"reference internal\" href=\"#django.db.models.prefetch_related_objects\" title=\"django.db.models.prefetch_related_objects\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">prefetch_related_objects()</span></code></a>\nfunction.</p>\n<p>Note that the result cache of the primary <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and all specified related\nobjects will then be fully loaded into memory. This changes the typical\nbehavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code>, which normally try to avoid loading all objects into\nmemory before they are needed, even after a query has been executed in the\ndatabase.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Remember that, as always with <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code>, any subsequent chained methods\nwhich imply a different database query will ignore previously cached\nresults, and retrieve data using a fresh database query. So, if you write\nthe following:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pizzas</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s1\">&#39;toppings&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">spicy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">pizza</span> <span class=\"ow\">in</span> <span class=\"n\">pizzas</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>\u2026then the fact that <code class=\"docutils literal notranslate\"><span class=\"pre\">pizza.toppings.all()</span></code> has been prefetched will not\nhelp you. The <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related('toppings')</span></code> implied\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pizza.toppings.all()</span></code>, but <code class=\"docutils literal notranslate\"><span class=\"pre\">pizza.toppings.filter()</span></code> is a new and\ndifferent query. The prefetched cache can\u2019t help here; in fact it hurts\nperformance, since you have done a database query that you haven\u2019t used. So\nuse this feature with caution!</p>\n<p class=\"last\">Also, if you call the database-altering methods\n<a class=\"reference internal\" href=\"../relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a>,\n<a class=\"reference internal\" href=\"../relations/#django.db.models.fields.related.RelatedManager.remove\" title=\"django.db.models.fields.related.RelatedManager.remove\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">remove()</span></code></a>,\n<a class=\"reference internal\" href=\"../relations/#django.db.models.fields.related.RelatedManager.clear\" title=\"django.db.models.fields.related.RelatedManager.clear\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">clear()</span></code></a> or\n<a class=\"reference internal\" href=\"../relations/#django.db.models.fields.related.RelatedManager.set\" title=\"django.db.models.fields.related.RelatedManager.set\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set()</span></code></a>, on\n<a class=\"reference internal\" href=\"../relations/#django.db.models.fields.related.RelatedManager\" title=\"django.db.models.fields.related.RelatedManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">related</span> <span class=\"pre\">managers</span></code></a>,\nany prefetched cache for the relation will be cleared.</p>\n</div>\n<p>You can also use the normal join syntax to do related fields of related\nfields. Suppose we have an additional model to the example above:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Restaurant</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">pizzas</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Pizza</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;restaurants&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">best_pizza</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">Pizza</span><span class=\"p\">,</span> <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;championed_by&quot;</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The following are all legal:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizzas__toppings&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This will prefetch all pizzas belonging to restaurants, and all toppings\nbelonging to those pizzas. This will result in a total of 3 database queries -\none for the restaurants, one for the pizzas, and one for the toppings.</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;best_pizza__toppings&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This will fetch the best pizza and all the toppings for the best pizza for each\nrestaurant. This will be done in 3 database queries - one for the restaurants,\none for the \u2018best pizzas\u2019, and one for the toppings.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">best_pizza</span></code> relationship could also be fetched using <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code>\nto reduce the query count to 2:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;best_pizza&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;best_pizza__toppings&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Since the prefetch is executed after the main query (which includes the joins\nneeded by <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related</span></code>), it is able to detect that the <code class=\"docutils literal notranslate\"><span class=\"pre\">best_pizza</span></code>\nobjects have already been fetched, and it will skip fetching them again.</p>\n<p>Chaining <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> calls will accumulate the lookups that are\nprefetched. To clear any <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> behavior, pass <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as a\nparameter:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">non_prefetched</span> <span class=\"o\">=</span> <span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>One difference to note when using <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> is that objects created\nby a query can be shared between the different objects that they are related to\ni.e. a single Python model instance can appear at more than one point in the\ntree of objects that are returned. This will normally happen with foreign key\nrelationships. Typically this behavior will not be a problem, and will in fact\nsave both memory and CPU time.</p>\n<p>While <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> supports prefetching <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code>\nrelationships, the number of queries will depend on the data. Since a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code> can reference data in multiple tables, one query per table\nreferenced is needed, rather than one query for all the items. There could be\nadditional queries on the <code class=\"docutils literal notranslate\"><span class=\"pre\">ContentType</span></code> table if the relevant rows have not\nalready been fetched.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> in most cases will be implemented using an SQL query that\nuses the \u2018IN\u2019 operator. This means that for a large <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> a large \u2018IN\u2019 clause\ncould be generated, which, depending on the database, might have performance\nproblems of its own when it comes to parsing or executing the SQL query. Always\nprofile for your use case!</p>\n<p>If you use <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code> to run the query, <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code> calls will\nonly be observed if a value for <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> is provided.</p>\n<p>You can use the <a class=\"reference internal\" href=\"#django.db.models.Prefetch\" title=\"django.db.models.Prefetch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code></a> object to further control\nthe prefetch operation.</p>\n<p>In its simplest form <code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code> is equivalent to the traditional string based\nlookups:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Prefetch</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas__toppings&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>You can provide a custom queryset with the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> argument.\nThis can be used to change the default ordering of the queryset:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas__toppings&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Toppings</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p>Or to call <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> when\napplicable to reduce the number of queries even further:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;restaurants&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s1\">&#39;best_pizza&#39;</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p>You can also assign the prefetched result to a custom attribute with the optional\n<code class=\"docutils literal notranslate\"><span class=\"pre\">to_attr</span></code> argument. The result will be stored directly in a list.</p>\n<p>This allows prefetching the same relation multiple times with a different\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>; for instance:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vegetarian_pizzas</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">vegetarian</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">to_attr</span><span class=\"o\">=</span><span class=\"s1\">&#39;menu&#39;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">vegetarian_pizzas</span><span class=\"p\">,</span> <span class=\"n\">to_attr</span><span class=\"o\">=</span><span class=\"s1\">&#39;vegetarian_menu&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Lookups created with custom <code class=\"docutils literal notranslate\"><span class=\"pre\">to_attr</span></code> can still be traversed as usual by other\nlookups:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vegetarian_pizzas</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">vegetarian</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">vegetarian_pizzas</span><span class=\"p\">,</span> <span class=\"n\">to_attr</span><span class=\"o\">=</span><span class=\"s1\">&#39;vegetarian_menu&#39;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"s1\">&#39;vegetarian_menu__toppings&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">to_attr</span></code> is recommended when filtering down the prefetch result as it is\nless ambiguous than storing a filtered result in the related manager\u2019s cache:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">vegetarian</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Recommended:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">restaurants</span> <span class=\"o\">=</span> <span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"n\">to_attr</span><span class=\"o\">=</span><span class=\"s1\">&#39;vegetarian_pizzas&#39;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vegetarian_pizzas</span> <span class=\"o\">=</span> <span class=\"n\">restaurants</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">vegetarian_pizzas</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Not recommended:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">restaurants</span> <span class=\"o\">=</span> <span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">queryset</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">vegetarian_pizzas</span> <span class=\"o\">=</span> <span class=\"n\">restaurants</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">pizzas</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Custom prefetching also works with single related relations like\nforward <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code>. Generally you\u2019ll want to use\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> for these relations, but there are a number of cases\nwhere prefetching with a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is useful:</p>\n<ul>\n<li><p class=\"first\">You want to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> that performs further prefetching\non related models.</p>\n</li>\n<li><p class=\"first\">You want to prefetch only a subset of the related objects.</p>\n</li>\n<li><p class=\"first\">You want to use performance optimization techniques like\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">deferred</span> <span class=\"pre\">fields</span></code></a>:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s1\">&#39;name&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">restaurants</span> <span class=\"o\">=</span> <span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;best_pizza&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">queryset</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>When using multiple databases, <code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code> will respect your choice of\ndatabase. If the inner query does not specify a database, it will use the\ndatabase selected by the outer query. All of the following are valid:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Both inner and outer queries will use the &#39;replica&#39; database</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizzas__toppings&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;replica&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizzas__toppings&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;replica&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Inner will use the &#39;replica&#39; database; outer will use &#39;default&#39; database</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizzas__toppings&quot;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Toppings</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;replica&quot;</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Inner will use &#39;replica&#39; database; outer will use &#39;cold-storage&#39; database</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s2\">&quot;pizzas__toppings&quot;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Toppings</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;replica&quot;</span><span class=\"p\">)),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;cold-storage&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The ordering of lookups matters.</p>\n<p>Take the following examples:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas__toppings&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This works even though it\u2019s unordered because <code class=\"docutils literal notranslate\"><span class=\"pre\">'pizzas__toppings'</span></code>\nalready contains all the needed information, therefore the second argument\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'pizzas'</span></code> is actually redundant.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas__toppings&#39;</span><span class=\"p\">,</span> <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()))</span>\n</pre></div>\n</div>\n<p>This will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> because of the attempt to redefine the\nqueryset of a previously seen lookup. Note that an implicit queryset was\ncreated to traverse <code class=\"docutils literal notranslate\"><span class=\"pre\">'pizzas'</span></code> as part of the <code class=\"docutils literal notranslate\"><span class=\"pre\">'pizzas__toppings'</span></code>\nlookup.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizza_list__toppings&#39;</span><span class=\"p\">,</span> <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;pizzas&#39;</span><span class=\"p\">,</span> <span class=\"n\">to_attr</span><span class=\"o\">=</span><span class=\"s1\">&#39;pizza_list&#39;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>This will trigger an <code class=\"docutils literal notranslate\"><span class=\"pre\">AttributeError</span></code> because <code class=\"docutils literal notranslate\"><span class=\"pre\">'pizza_list'</span></code> doesn\u2019t exist yet\nwhen <code class=\"docutils literal notranslate\"><span class=\"pre\">'pizza_list__toppings'</span></code> is being processed.</p>\n<p class=\"last\">This consideration is not limited to the use of <code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code> objects. Some\nadvanced techniques may require that the lookups be performed in a\nspecific order to avoid creating extra queries; therefore it\u2019s recommended\nto always carefully order <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> arguments.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-extra\">\n<span id=\"extra\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code><a class=\"headerlink\" href=\"#extra\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.extra\">\n<code class=\"sig-name descname\"><span class=\"pre\">extra</span></code>(<em><span class=\"n\"><span class=\"pre\">select</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">where</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">params</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">tables</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">order_by</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">select_params</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.extra\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sometimes, the Django query syntax by itself can\u2019t easily express a complex\n<code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause. For these edge cases, Django provides the <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> modifier \u2014 a hook for injecting specific clauses into the SQL\ngenerated by a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<div class=\"admonition-use-this-method-as-a-last-resort admonition\">\n<p class=\"first admonition-title\">Use this method as a last resort</p>\n<p>This is an old API that we aim to deprecate at some point in the future.\nUse it only if you cannot express your query using other queryset methods.\nIf you do need to use it, please <a class=\"reference external\" href=\"https://code.djangoproject.com/newticket\">file a ticket</a> using the <a class=\"reference external\" href=\"https://code.djangoproject.com/query?status=assigned&amp;status=new&amp;keywords=~QuerySet.extra\">QuerySet.extra\nkeyword</a>\nwith your use case (please check the list of existing tickets first) so\nthat we can enhance the QuerySet API to allow removing <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code>. We are\nno longer improving or fixing bugs for this method.</p>\n<p>For example, this use of <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;val&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;select col from sometable where othercol = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"n\">select_params</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">someparam</span><span class=\"p\">,),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>is equivalent to:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">RawSQL</span><span class=\"p\">(</span><span class=\"s2\">&quot;select col from sometable where othercol = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">someparam</span><span class=\"p\">,)))</span>\n</pre></div>\n</div>\n<p class=\"last\">The main benefit of using <a class=\"reference internal\" href=\"../expressions/#django.db.models.expressions.RawSQL\" title=\"django.db.models.expressions.RawSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code></a> is\nthat you can set <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if needed. The main downside is that if\nyou refer to some table alias of the queryset in the raw SQL, then it is\npossible that Django might change that alias (for example, when the\nqueryset is used as a subquery in yet another query).</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>You should be very careful whenever you use <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code>. Every time you use\nit, you should escape any parameters that the user can control by using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> in order to protect against SQL injection attacks.</p>\n<p>You also must not quote placeholders in the SQL string. This example is\nvulnerable to SQL injection because of the quotes around <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code>:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">col</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">sometable</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">othercol</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;%s&#39;</span><span class=\"w\">  </span><span class=\"o\">#</span><span class=\"w\"> </span><span class=\"n\">unsafe</span><span class=\"o\">!</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p class=\"last\">You can read more about how Django\u2019s <a class=\"reference internal\" href=\"../../../topics/security/#sql-injection-protection\"><span class=\"std std-ref\">SQL injection protection</span></a> works.</p>\n</div>\n<p>By definition, these extra lookups may not be portable to different database\nengines (because you\u2019re explicitly writing SQL code) and violate the DRY\nprinciple, so you should avoid them if possible.</p>\n<p>Specify one or more of <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">tables</span></code>. None\nof the arguments is required, but you should use at least one of them.</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code></p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code> argument lets you put extra fields in the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code>\nclause.  It should be a dictionary mapping attribute names to SQL\nclauses to use to calculate that attribute.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;is_recent&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;pub_date &gt; &#39;2006-01-01&#39;&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>As a result, each <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> object will have an extra attribute,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">is_recent</span></code>, a boolean representing whether the entry\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code>\nis greater than Jan. 1, 2006.</p>\n<p>Django inserts the given SQL snippet directly into the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code>\nstatement, so the resulting SQL of the above example would be something like:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">blog_entry</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"s1\">&#39;2006-01-01&#39;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">is_recent</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">blog_entry</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>The next example is more advanced; it does a subquery to give each\nresulting <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> object an <code class=\"docutils literal notranslate\"><span class=\"pre\">entry_count</span></code> attribute, an integer count\nof associated <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> objects:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span>\n    <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s2\">&quot;entry_count&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;SELECT COUNT(*) FROM blog_entry WHERE blog_entry.blog_id = blog_blog.id&quot;</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In this particular case, we\u2019re exploiting the fact that the query will\nalready contain the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog_blog</span></code> table in its <code class=\"docutils literal notranslate\"><span class=\"pre\">FROM</span></code> clause.</p>\n<p>The resulting SQL of the above example would be:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">blog_blog</span><span class=\"p\">.</span><span class=\"o\">*</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"k\">COUNT</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">blog_entry</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">blog_entry</span><span class=\"p\">.</span><span class=\"n\">blog_id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">blog_blog</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"n\">entry_count</span><span class=\"w\"></span>\n<span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">blog_blog</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note that the parentheses required by most database engines around\nsubqueries are not required in Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code> clauses. Also note\nthat some database backends, such as some MySQL versions, don\u2019t support\nsubqueries.</p>\n<p>In some rare cases, you might wish to pass parameters to the SQL\nfragments in <code class=\"docutils literal notranslate\"><span class=\"pre\">extra(select=...)</span></code>. For this purpose, use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_params</span></code> parameter.</p>\n<p>This will work, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span>\n    <span class=\"n\">select</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">},</span>\n    <span class=\"n\">select_params</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;one&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;two&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you need to use a literal <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code> inside your select string, use\nthe sequence <code class=\"docutils literal notranslate\"><span class=\"pre\">%%s</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">tables</span></code></p>\n<p>You can define explicit SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clauses \u2014 perhaps to perform\nnon-explicit joins \u2014 by using <code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code>. You can manually add tables to\nthe SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">FROM</span></code> clause by using <code class=\"docutils literal notranslate\"><span class=\"pre\">tables</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">tables</span></code> both take a list of strings. All <code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code>\nparameters are \u201cAND\u201ded to any other search criteria.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo=&#39;a&#39; OR bar = &#39;a&#39;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;baz = &#39;a&#39;&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>\u2026translates (roughly) into the following SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">blog_entry</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"n\">bar</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">baz</span><span class=\"o\">=</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Be careful when using the <code class=\"docutils literal notranslate\"><span class=\"pre\">tables</span></code> parameter if you\u2019re specifying\ntables that are already used in the query. When you add extra tables\nvia the <code class=\"docutils literal notranslate\"><span class=\"pre\">tables</span></code> parameter, Django assumes you want that table\nincluded an extra time, if it is already included. That creates a\nproblem, since the table name will then be given an alias. If a table\nappears multiple times in an SQL statement, the second and subsequent\noccurrences must use aliases so the database can tell them apart. If\nyou\u2019re referring to the extra table you added in the extra <code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code>\nparameter this is going to cause errors.</p>\n<p>Normally you\u2019ll only be adding extra tables that don\u2019t already appear\nin the query. However, if the case outlined above does occur, there are\na few solutions. First, see if you can get by without including the\nextra table and use the one already in the query. If that isn\u2019t\npossible, put your <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code> call at the front of the queryset\nconstruction so that your table is the first use of that table.\nFinally, if all else fails, look at the query produced and rewrite your\n<code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> addition to use the alias given to your extra table. The\nalias will be the same each time you construct the queryset in the same\nway, so you can rely upon the alias name to not change.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">order_by</span></code></p>\n<p>If you need to order the resulting queryset using some of the new\nfields or tables you have included via <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code> use the <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by</span></code>\nparameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code> and pass in a sequence of strings. These\nstrings should either be model fields (as in the normal\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> method on querysets), of the form\n<code class=\"docutils literal notranslate\"><span class=\"pre\">table_name.column_name</span></code> or an alias for a column that you specified\nin the <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code>.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">select</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;is_recent&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;pub_date &gt; &#39;2006-01-01&#39;&quot;</span><span class=\"p\">})</span>\n<span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;-is_recent&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>This would sort all the items for which <code class=\"docutils literal notranslate\"><span class=\"pre\">is_recent</span></code> is true to the\nfront of the result set (<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> sorts before <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> in a\ndescending ordering).</p>\n<p>This shows, by the way, that you can make multiple calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code>\nand it will behave as you expect (adding new constraints each time).</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code></p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> parameter described above may use standard Python\ndatabase string placeholders \u2014 <code class=\"docutils literal notranslate\"><span class=\"pre\">'%s'</span></code> to indicate parameters the\ndatabase engine should automatically quote. The <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> argument is\na list of any extra parameters to be substituted.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;headline=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">],</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Always use <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> instead of embedding values directly into\n<code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> because <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> will ensure values are quoted correctly\naccording to your particular backend. For example, quotes will be\nescaped correctly.</p>\n<p>Bad:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;headline=&#39;Lennon&#39;&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Good:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">extra</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;headline=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">],</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">If you are performing queries on MySQL, note that MySQL\u2019s silent type coercion\nmay cause unexpected results when mixing types. If you query on a string\ntype column, but with an integer value, MySQL will coerce the types of all values\nin the table to an integer before performing the comparison. For example, if your\ntable contains the values <code class=\"docutils literal notranslate\"><span class=\"pre\">'abc'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'def'</span></code> and you query for <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span> <span class=\"pre\">mycolumn=0</span></code>,\nboth rows will match. To prevent this, perform the correct typecasting\nbefore using the value in a query.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-defer\">\n<span id=\"defer\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code><a class=\"headerlink\" href=\"#defer\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.defer\">\n<code class=\"sig-name descname\"><span class=\"pre\">defer</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.defer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>In some complex data-modeling situations, your models might contain a lot of\nfields, some of which could contain a lot of data (for example, text fields),\nor require expensive processing to convert them to Python objects. If you are\nusing the results of a queryset in some situation where you don\u2019t know\nif you need those particular fields when you initially fetch the data, you can\ntell Django not to retrieve them from the database.</p>\n<p>This is done by passing the names of the fields to not load to <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>A queryset that has deferred fields will still return model instances. Each\ndeferred field will be retrieved from the database if you access that field\n(one at a time, not all the deferred fields at once).</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Deferred fields will not lazy-load like this from asynchronous code.\nInstead, you will get a <code class=\"docutils literal notranslate\"><span class=\"pre\">SynchronousOnlyOperation</span></code> exception. If you are\nwriting asynchronous code, you should not try to access any fields that you\n<code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code>.</p>\n</div>\n<p>You can make multiple calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code>. Each call adds new fields to the\ndeferred set:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Defers both the body and headline fields.</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">rating</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The order in which fields are added to the deferred set does not matter.\nCalling <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> with a field name that has already been deferred is\nharmless (the field will still be deferred).</p>\n<p>You can defer loading of fields in related models (if the related models are\nloading via <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a>) by using the standard double-underscore\nnotation to separate related fields:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry__headline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;entry__body&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you want to clear the set of deferred fields, pass <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as a parameter\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Load all fields immediately.</span>\n<span class=\"n\">my_queryset</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Some fields in a model won\u2019t be deferred, even if you ask for them. You can\nnever defer the loading of the primary key. If you are using\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> to retrieve related models, you shouldn\u2019t defer the\nloading of the field that connects from the primary model to the related\none, doing so will result in an error.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> method (and its cousin, <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a>, below) are only for\nadvanced use-cases. They provide an optimization for when you have analyzed\nyour queries closely and understand <em>exactly</em> what information you need and\nhave measured that the difference between returning the fields you need and\nthe full set of fields for the model will be significant.</p>\n<p>Even if you think you are in the advanced use-case situation, <strong>only use</strong>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> <strong>when you cannot, at queryset load time, determine if you will\nneed the extra fields or not</strong>. If you are frequently loading and using a\nparticular subset of your data, the best choice you can make is to\nnormalize your models and put the non-loaded data into a separate model\n(and database table). If the columns <em>must</em> stay in the one table for some\nreason, create a model with <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.managed</span> <span class=\"pre\">=</span> <span class=\"pre\">False</span></code> (see the\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.managed\" title=\"django.db.models.Options.managed\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">managed</span> <span class=\"pre\">attribute</span></code></a> documentation)\ncontaining just the fields you normally need to load and use that where you\nmight otherwise call <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code>. This makes your code more explicit to the\nreader, is slightly faster and consumes a little less memory in the Python\nprocess.</p>\n<p>For example, both of these models use the same underlying database table:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CommonlyUsedModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">managed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;app_largetable&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ManagedModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;app_largetable&quot;</span>\n\n\n<span class=\"c1\"># Two equivalent QuerySets:</span>\n<span class=\"n\">CommonlyUsedModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"n\">ManagedModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;f2&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"last\">If many fields need to be duplicated in the unmanaged model, it may be best\nto create an abstract model with the shared fields and then have the\nunmanaged and managed models inherit from the abstract model.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When calling <a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> for instances with\ndeferred fields, only the loaded fields will be saved. See\n<a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> for more details.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-only\">\n<span id=\"only\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code><a class=\"headerlink\" href=\"#only\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.only\">\n<code class=\"sig-name descname\"><span class=\"pre\">only</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.only\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> method is essentially the opposite of <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a>. Only the\nfields passed into this method and that are <em>not</em> already specified as deferred\nare loaded immediately when the queryset is evaluated.</p>\n<p>If you have a model where almost all the fields need to be deferred, using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> to specify the complementary set of fields can result in simpler\ncode.</p>\n<p>Suppose you have a model with fields <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">age</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">biography</span></code>. The\nfollowing two querysets are the same, in terms of deferred fields:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;age&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;biography&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Whenever you call <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> it <em>replaces</em> the set of fields to load\nimmediately. The method\u2019s name is mnemonic: <strong>only</strong> those fields are loaded\nimmediately; the remainder are deferred. Thus, successive calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code>\nresult in only the final fields being considered:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># This will defer all fields except the headline.</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s2\">&quot;body&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Since <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> acts incrementally (adding fields to the deferred list), you\ncan combine calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> and things will behave\nlogically:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Final result is that everything except &quot;headline&quot; is deferred.</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Final result loads headline immediately.</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">defer</span><span class=\"p\">(</span><span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">only</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;body&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>All of the cautions in the note for the <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> documentation apply to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> as well. Use it cautiously and only after exhausting your other\noptions.</p>\n<p>Using <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a> and omitting a field requested using <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a>\nis an error as well.</p>\n<p>As with <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code>, you cannot access the non-loaded fields from asynchronous\ncode and expect them to load. Instead, you will get a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SynchronousOnlyOperation</span></code> exception. Ensure that all fields you might access\nare in your <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> call.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When calling <a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> for instances with\ndeferred fields, only the loaded fields will be saved. See\n<a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> for more details.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When using <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> after <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> the fields in <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> will\noverride <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> for fields that are listed in both.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-using\">\n<span id=\"using\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">using()</span></code><a class=\"headerlink\" href=\"#using\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.using\">\n<code class=\"sig-name descname\"><span class=\"pre\">using</span></code>(<em><span class=\"n\"><span class=\"pre\">alias</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.using\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method is for controlling which database the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> will be\nevaluated against if you are using more than one database.  The only argument\nthis method takes is the alias of a database, as defined in\n<a class=\"reference internal\" href=\"../../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>.</p>\n<p>For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># queries the database with the &#39;default&#39; alias.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"go\"># queries the database with the &#39;backup&#39; alias</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">&quot;backup&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-select-for-update\">\n<span id=\"select-for-update\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code><a class=\"headerlink\" href=\"#select-for-update\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.select_for_update\">\n<code class=\"sig-name descname\"><span class=\"pre\">select_for_update</span></code>(<em><span class=\"n\"><span class=\"pre\">nowait</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">skip_locked</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">of</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">()</span></span></em>, <em><span class=\"n\"><span class=\"pre\">no_key</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.select_for_update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a queryset that will lock rows until the end of the transaction,\ngenerating a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">...</span> <span class=\"pre\">FOR</span> <span class=\"pre\">UPDATE</span></code> SQL statement on supported databases.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">transaction</span>\n\n<span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_for_update</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">transaction</span><span class=\"o\">.</span><span class=\"n\">atomic</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">entries</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>When the queryset is evaluated (<code class=\"docutils literal notranslate\"><span class=\"pre\">for</span> <span class=\"pre\">entry</span> <span class=\"pre\">in</span> <span class=\"pre\">entries</span></code> in this case), all\nmatched entries will be locked until the end of the transaction block, meaning\nthat other transactions will be prevented from changing or acquiring locks on\nthem.</p>\n<p>Usually, if another transaction has already acquired a lock on one of the\nselected rows, the query will block until the lock is released. If this is\nnot the behavior you want, call <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update(nowait=True)</span></code>. This will\nmake the call non-blocking. If a conflicting lock is already acquired by\nanother transaction, <a class=\"reference internal\" href=\"../../exceptions/#django.db.DatabaseError\" title=\"django.db.DatabaseError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DatabaseError</span></code></a> will be raised when the\nqueryset is evaluated. You can also ignore locked rows by using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update(skip_locked=True)</span></code> instead. The <code class=\"docutils literal notranslate\"><span class=\"pre\">nowait</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">skip_locked</span></code> are mutually exclusive and attempts to call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> with both options enabled will result in a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a>.</p>\n<p>By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> locks all rows that are selected by the\nquery. For example, rows of related objects specified in <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a>\nare locked in addition to rows of the queryset\u2019s model. If this isn\u2019t desired,\nspecify the related objects you want to lock in <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update(of=(...))</span></code>\nusing the same fields syntax as <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a>. Use the value <code class=\"docutils literal notranslate\"><span class=\"pre\">'self'</span></code>\nto refer to the queryset\u2019s model.</p>\n<div class=\"admonition-lock-parents-models-in-select-for-update-of admonition\">\n<p class=\"first admonition-title\">Lock parents models in <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update(of=(...))</span></code></p>\n<p>If you want to lock parents models when using <a class=\"reference internal\" href=\"../../../topics/db/models/#multi-table-inheritance\"><span class=\"std std-ref\">multi-table inheritance</span></a>, you must specify parent link fields (by default\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;parent_model_name&gt;_ptr</span></code>) in the <code class=\"docutils literal notranslate\"><span class=\"pre\">of</span></code> argument. For example:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_for_update</span><span class=\"p\">(</span><span class=\"n\">of</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;self&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;place_ptr&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition-using-select-for-update-of-with-specified-fields admonition\">\n<p class=\"first admonition-title\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update(of=(...))</span></code> with specified fields</p>\n<p class=\"last\">If you want to lock models and specify selected fields, e.g. using\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a>, you must select at least one field from each model in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">of</span></code> argument. Models without selected fields will not be locked.</p>\n</div>\n<p>On PostgreSQL only, you can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">no_key=True</span></code> in order to acquire a weaker\nlock, that still allows creating rows that merely reference locked rows\n(through a foreign key, for example) while the lock is in place. The\nPostgreSQL documentation has more details about <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/explicit-locking.html#LOCKING-ROWS\">row-level lock modes</a>.</p>\n<p>You can\u2019t use <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> on nullable relations:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;hometown&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select_for_update</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">django.db.utils.NotSupportedError</span>: <span class=\"n\">FOR UPDATE cannot be applied to the nullable side of an outer join</span>\n</pre></div>\n</div>\n<p>To avoid that restriction, you can exclude null objects if you don\u2019t care about\nthem:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;hometown&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select_for_update</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">hometown</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Person: ...)&gt;, ...]&gt;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">oracle</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">mysql</span></code> database backends support\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code>. However, MariaDB only supports the <code class=\"docutils literal notranslate\"><span class=\"pre\">nowait</span></code>\nargument, MariaDB 10.6+ also supports the <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_locked</span></code> argument, and MySQL\n8.0.1+ supports the <code class=\"docutils literal notranslate\"><span class=\"pre\">nowait</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_locked</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">of</span></code> arguments. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">no_key</span></code> argument is only supported on PostgreSQL.</p>\n<p>Passing <code class=\"docutils literal notranslate\"><span class=\"pre\">nowait=True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_locked=True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">no_key=True</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">of</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> using database backends that do not support these\noptions, such as MySQL, raises a <a class=\"reference internal\" href=\"../../exceptions/#django.db.NotSupportedError\" title=\"django.db.NotSupportedError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NotSupportedError</span></code></a>. This\nprevents code from unexpectedly blocking.</p>\n<p>Evaluating a queryset with <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> in autocommit mode on\nbackends which support <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">...</span> <span class=\"pre\">FOR</span> <span class=\"pre\">UPDATE</span></code> is a\n<a class=\"reference internal\" href=\"../../exceptions/#django.db.transaction.TransactionManagementError\" title=\"django.db.transaction.TransactionManagementError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TransactionManagementError</span></code></a> error because the\nrows are not locked in that case. If allowed, this would facilitate data\ncorruption and could easily be caused by calling code that expects to be run in\na transaction outside of one.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> on backends which do not support\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">...</span> <span class=\"pre\">FOR</span> <span class=\"pre\">UPDATE</span></code> (such as SQLite) will have no effect.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">...</span> <span class=\"pre\">FOR</span> <span class=\"pre\">UPDATE</span></code> will not be added to the query, and an error isn\u2019t\nraised if <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> is used in autocommit mode.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Although <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> normally fails in autocommit mode, since\n<a class=\"reference internal\" href=\"../../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> automatically wraps each test in a\ntransaction, calling <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> in a <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> even outside\nan <a class=\"reference internal\" href=\"../../../topics/db/transactions/#django.db.transaction.atomic\" title=\"django.db.transaction.atomic\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">atomic()</span></code></a> block will (perhaps unexpectedly)\npass without raising a <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionManagementError</span></code>. To properly test\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> you should use\n<a class=\"reference internal\" href=\"../../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a>.</p>\n</div>\n<div class=\"admonition-certain-expressions-may-not-be-supported admonition\">\n<p class=\"first admonition-title\">Certain expressions may not be supported</p>\n<p class=\"last\">PostgreSQL doesn\u2019t support <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> with\n<a class=\"reference internal\" href=\"../expressions/#django.db.models.expressions.Window\" title=\"django.db.models.expressions.Window\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Window</span></code></a> expressions.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-raw\">\n<span id=\"raw\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code><a class=\"headerlink\" href=\"#raw\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.raw\">\n<code class=\"sig-name descname\"><span class=\"pre\">raw</span></code>(<em><span class=\"n\"><span class=\"pre\">raw_query</span></span></em>, <em><span class=\"n\"><span class=\"pre\">params</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">()</span></span></em>, <em><span class=\"n\"><span class=\"pre\">translations</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.raw\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Takes a raw SQL query, executes it, and returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.query.RawQuerySet</span></code> instance. This <code class=\"docutils literal notranslate\"><span class=\"pre\">RawQuerySet</span></code> instance\ncan be iterated over just like a normal <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> to provide object\ninstances.</p>\n<p>See the <a class=\"reference internal\" href=\"../../../topics/db/sql/\"><span class=\"doc\">Performing raw SQL queries</span></a> for more information.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code> always triggers a new query and doesn\u2019t account for previous\nfiltering. As such, it should generally be called from the <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code> or\nfrom a fresh <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> instance.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-operators-that-return-new-querysets\">\n<span id=\"operators-that-return-new-querysets\"></span><h3>Operators that return new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#operators-that-return-new-querysets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Combined querysets must use the same model.</p>\n<div class=\"section\" id=\"s-and\">\n<span id=\"and\"></span><h4>AND (<code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>)<a class=\"headerlink\" href=\"#and\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Combines two <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s using the SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">AND</span></code> operator in a manner similar\nto chaining filters.</p>\n<p>The following are equivalent:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-or\">\n<span id=\"or\"></span><h4>OR (<code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>)<a class=\"headerlink\" href=\"#or\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Combines two <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s using the SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code> operator.</p>\n<p>The following are equivalent:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Q</span>\n\n<span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code> is not a commutative operation, as different (though equivalent) queries\nmay be generated.</p>\n</div>\n<div class=\"section\" id=\"s-xor\">\n<span id=\"xor\"></span><h4>XOR (<code class=\"docutils literal notranslate\"><span class=\"pre\">^</span></code>)<a class=\"headerlink\" href=\"#xor\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Combines two <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s using the SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code> operator. A <code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code>\nexpression matches rows that are matched by an odd number of operands.</p>\n<p>The following are equivalent:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Q</span>\n\n<span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">^</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"n\">XOR</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<blockquote>\n<div><p><code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code> is natively supported on MariaDB and MySQL. On other databases,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">x</span> <span class=\"pre\">^</span> <span class=\"pre\">y</span> <span class=\"pre\">^</span> <span class=\"pre\">...</span> <span class=\"pre\">^</span> <span class=\"pre\">z</span></code> is converted to an equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"></span>\n<span class=\"mi\">1</span><span class=\"o\">=</span><span class=\"k\">MOD</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">CASE</span><span class=\"w\"> </span><span class=\"k\">WHEN</span><span class=\"w\"> </span><span class=\"n\">x</span><span class=\"w\"> </span><span class=\"k\">THEN</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">ELSE</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">END</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">CASE</span><span class=\"w\"> </span><span class=\"k\">WHEN</span><span class=\"w\"> </span><span class=\"n\">y</span><span class=\"w\"> </span><span class=\"k\">THEN</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">ELSE</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">END</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">(</span><span class=\"k\">CASE</span><span class=\"w\"> </span><span class=\"k\">WHEN</span><span class=\"w\"> </span><span class=\"n\">z</span><span class=\"w\"> </span><span class=\"k\">THEN</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"> </span><span class=\"k\">ELSE</span><span class=\"w\"> </span><span class=\"mi\">0</span><span class=\"w\"> </span><span class=\"k\">END</span><span class=\"p\">),</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"mi\">2</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div></blockquote>\n<div class=\"last versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p>In older versions, on databases without native support for the SQL\n<code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code> operator, <code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code> returned rows that were matched by exactly\none operand. The previous behavior was not consistent with MySQL,\nMariaDB, and Python behavior.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-methods-that-do-not-return-querysets\">\n<span id=\"methods-that-do-not-return-querysets\"></span><h3>Methods that do not return <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#methods-that-do-not-return-querysets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods evaluate the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and return\nsomething <em>other than</em> a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<p>These methods do not use a cache (see <a class=\"reference internal\" href=\"../../../topics/db/queries/#caching-and-querysets\"><span class=\"std std-ref\">Caching and QuerySets</span></a>). Rather,\nthey query the database each time they\u2019re called.</p>\n<p>Because these methods evaluate the QuerySet, they are blocking calls, and so\ntheir main (synchronous) versions cannot be called from asynchronous code. For\nthis reason, each has a corresponding asynchronous version with an <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> prefix\n- for example, rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">get(\u2026)</span></code> you can <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span> <span class=\"pre\">aget(\u2026)</span></code>.</p>\n<p>There is usually no difference in behavior apart from their asynchronous\nnature, but any differences are noted below next to each method.</p>\n<div class=\"section\" id=\"s-get\">\n<span id=\"get\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code><a class=\"headerlink\" href=\"#get\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.get\">\n<code class=\"sig-name descname\"><span class=\"pre\">get</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aget\">\n<code class=\"sig-name descname\"><span class=\"pre\">aget</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aget\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aget()</span></code></p>\n<p>Returns the object matching the given lookup parameters, which should be in\nthe format described in <a class=\"reference internal\" href=\"#id4\">Field lookups</a>. You should use lookups that are\nguaranteed unique, such as the primary key or fields in a unique constraint.\nFor example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">blog</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">entry_number</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>If you expect a queryset to already return one row, you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code>\nwithout any arguments to return the object for that row:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> doesn\u2019t find any object, it raises a <a class=\"reference internal\" href=\"../class/#django.db.models.Model.DoesNotExist\" title=\"django.db.models.Model.DoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Model.DoesNotExist</span></code></a> exception:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=-</span><span class=\"mi\">999</span><span class=\"p\">)</span>  <span class=\"c1\"># raises Entry.DoesNotExist</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> finds more than one object, it raises a\n<a class=\"reference internal\" href=\"../class/#django.db.models.Model.MultipleObjectsReturned\" title=\"django.db.models.Model.MultipleObjectsReturned\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Model.MultipleObjectsReturned</span></code></a> exception:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;A Duplicated Name&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># raises Entry.MultipleObjectsReturned</span>\n</pre></div>\n</div>\n<p>Both these exception classes are attributes of the model class, and specific to\nthat model. If you want to handle such exceptions from several <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> calls\nfor different models, you can use their generic base classes. For example, you\ncan use <a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ObjectDoesNotExist\" title=\"django.core.exceptions.ObjectDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">django.core.exceptions.ObjectDoesNotExist</span></code></a>  to handle\n<a class=\"reference internal\" href=\"../class/#django.db.models.Model.DoesNotExist\" title=\"django.db.models.Model.DoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code></a> exceptions from multiple models:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectDoesNotExist</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">blog</span><span class=\"p\">,</span> <span class=\"n\">entry_number</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">ObjectDoesNotExist</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Either the blog or entry doesn&#39;t exist.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-create\">\n<span id=\"create\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code><a class=\"headerlink\" href=\"#create\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.create\">\n<code class=\"sig-name descname\"><span class=\"pre\">create</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.acreate\">\n<code class=\"sig-name descname\"><span class=\"pre\">acreate</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.acreate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">acreate()</span></code></p>\n<p>A convenience method for creating an object and saving it all in one step.  Thus:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bruce&quot;</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Springsteen&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>and:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bruce&quot;</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Springsteen&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">force_insert</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>are equivalent.</p>\n<p>The <a class=\"reference internal\" href=\"../instances/#ref-models-force-insert\"><span class=\"std std-ref\">force_insert</span></a> parameter is documented\nelsewhere, but all it means is that a new object will always be created.\nNormally you won\u2019t need to worry about this. However, if your model contains a\nmanual primary key value that you set and if that value already exists in the\ndatabase, a call to <code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code> will fail with an\n<a class=\"reference internal\" href=\"../../exceptions/#django.db.IntegrityError\" title=\"django.db.IntegrityError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">IntegrityError</span></code></a> since primary keys must be unique. Be\nprepared to handle the exception if you are using manual primary keys.</p>\n</div>\n<div class=\"section\" id=\"s-get-or-create\">\n<span id=\"get-or-create\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code><a class=\"headerlink\" href=\"#get-or-create\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.get_or_create\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_or_create</span></code>(<em><span class=\"n\"><span class=\"pre\">defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.get_or_create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aget_or_create\">\n<code class=\"sig-name descname\"><span class=\"pre\">aget_or_create</span></code>(<em><span class=\"n\"><span class=\"pre\">defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aget_or_create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aget_or_create()</span></code></p>\n<p>A convenience method for looking up an object with the given <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> (may be\nempty if your model has defaults for all fields), creating one if necessary.</p>\n<p>Returns a tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(object,</span> <span class=\"pre\">created)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">object</span></code> is the retrieved or\ncreated object and <code class=\"docutils literal notranslate\"><span class=\"pre\">created</span></code> is a boolean specifying whether a new object was\ncreated.</p>\n<p>This is meant to prevent duplicate objects from being created when requests are\nmade in parallel, and as a shortcut to boilerplatish code. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">,</span> <span class=\"n\">birthday</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">))</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Here, with concurrent requests, multiple attempts to save a <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> with\nthe same parameters may be made. To avoid this race condition, the above\nexample can be rewritten using <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span>\n    <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;birthday&quot;</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)},</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Any keyword arguments passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> \u2014 <em>except</em> an optional one\ncalled <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> \u2014 will be used in a <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> call. If an object is\nfound, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> returns a tuple of that object and <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">This method is atomic assuming that the database enforces uniqueness of the\nkeyword arguments (see <a class=\"reference internal\" href=\"../fields/#django.db.models.Field.unique\" title=\"django.db.models.Field.unique\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique</span></code></a> or\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.unique_together\" title=\"django.db.models.Options.unique_together\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique_together</span></code></a>). If the fields used in the\nkeyword arguments do not have a uniqueness constraint, concurrent calls to\nthis method may result in multiple rows with the same parameters being\ninserted.</p>\n</div>\n<p>You can specify more complex conditions for the retrieved object by chaining\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> and using <a class=\"reference internal\" href=\"#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">objects</span></code></a>. For example, to retrieve Robert or Bob Marley if either\nexists, and create the latter otherwise:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Q</span>\n\n<span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Robert&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Marley&quot;</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>If multiple objects are found, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> raises\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.MultipleObjectsReturned\" title=\"django.core.exceptions.MultipleObjectsReturned\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">MultipleObjectsReturned</span></code></a>. If an object is <em>not</em>\nfound, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> will instantiate and save a new object, returning a\ntuple of the new object and <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. The new object will be created roughly\naccording to this algorithm:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;__&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">k</span><span class=\"p\">}</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">defaults</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()})</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">params</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>In English, that means start with any non-<code class=\"docutils literal notranslate\"><span class=\"pre\">'defaults'</span></code> keyword argument that\ndoesn\u2019t contain a double underscore (which would indicate a non-exact lookup).\nThen add the contents of <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code>, overriding any keys if necessary, and\nuse the result as the keyword arguments to the model class. If there are any\ncallables in <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code>, evaluate them. As hinted at above, this is a\nsimplification of the algorithm that is used, but it contains all the pertinent\ndetails. The internal implementation has some more error-checking than this and\nhandles some extra edge-conditions; if you\u2019re interested, read the code.</p>\n<p>If you have a field named <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> and want to use it as an exact lookup in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code>, use <code class=\"docutils literal notranslate\"><span class=\"pre\">'defaults__exact'</span></code>, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Foo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">defaults__exact</span><span class=\"o\">=</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;defaults&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;baz&quot;</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> method has similar error behavior to <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.create\" title=\"django.db.models.query.QuerySet.create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create()</span></code></a>\nwhen you\u2019re using manually specified primary keys. If an object needs to be\ncreated and the key already exists in the database, an\n<a class=\"reference internal\" href=\"../../exceptions/#django.db.IntegrityError\" title=\"django.db.IntegrityError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">IntegrityError</span></code></a> will be raised.</p>\n<p>Finally, a word on using <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> in Django views. Please make sure\nto use it only in <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> requests unless you have a good reason not to.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> requests shouldn\u2019t have any effect on data. Instead, use <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>\nwhenever a request to a page has a side effect on your data. For more, see\n<span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-9.2.1\"><strong>Safe methods</strong></a> in the HTTP spec.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> through <a class=\"reference internal\" href=\"../fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>\nattributes and reverse relations. In that case you will restrict the queries\ninside the context of that relation. That could lead you to some integrity\nproblems if you don\u2019t use it consistently.</p>\n<p>Being the following models:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Chapter</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"n\">unique</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n    <span class=\"n\">chapters</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Chapter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code> through Book\u2019s chapters field, but it only\nfetches inside the context of that book:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Ulysses&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">chapters</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Telemachus&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">(&lt;Chapter: Telemachus&gt;, True)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">chapters</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Telemachus&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">(&lt;Chapter: Telemachus&gt;, False)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Chapter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Chapter 1&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Chapter: Chapter 1&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">chapters</span><span class=\"o\">.</span><span class=\"n\">get_or_create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Chapter 1&quot;</span><span class=\"p\">)</span>\n<span class=\"go\"># Raises IntegrityError</span>\n</pre></div>\n</div>\n<p class=\"last\">This is happening because it\u2019s trying to get or create \u201cChapter 1\u201d through the\nbook \u201cUlysses\u201d, but it can\u2019t do any of them: the relation can\u2019t fetch that\nchapter because it isn\u2019t related to that book, but it can\u2019t create it either\nbecause <code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code> field should be unique.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-update-or-create\">\n<span id=\"update-or-create\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">update_or_create()</span></code><a class=\"headerlink\" href=\"#update-or-create\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.update_or_create\">\n<code class=\"sig-name descname\"><span class=\"pre\">update_or_create</span></code>(<em><span class=\"n\"><span class=\"pre\">defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">create_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.update_or_create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aupdate_or_create\">\n<code class=\"sig-name descname\"><span class=\"pre\">aupdate_or_create</span></code>(<em><span class=\"n\"><span class=\"pre\">defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">create_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aupdate_or_create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aupdate_or_create()</span></code></p>\n<p>A convenience method for updating an object with the given <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code>, creating\na new one if necessary. Both <code class=\"docutils literal notranslate\"><span class=\"pre\">create_defaults</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> are\ndictionaries of (field, value) pairs. The values in both <code class=\"docutils literal notranslate\"><span class=\"pre\">create_defaults</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> can be callables. <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> is used to update the object\nwhile <code class=\"docutils literal notranslate\"><span class=\"pre\">create_defaults</span></code> are used for the create operation. If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">create_defaults</span></code> is not supplied, <code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> will be used for the create\noperation.</p>\n<p>Returns a tuple of <code class=\"docutils literal notranslate\"><span class=\"pre\">(object,</span> <span class=\"pre\">created)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">object</span></code> is the created or\nupdated object and <code class=\"docutils literal notranslate\"><span class=\"pre\">created</span></code> is a boolean specifying whether a new object was\ncreated.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">update_or_create</span></code> method tries to fetch an object from database based on\nthe given <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code>. If a match is found, it updates the fields passed in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">defaults</span></code> dictionary.</p>\n<p>This is meant as a shortcut to boilerplatish code. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">}</span>\n<span class=\"n\">create_defaults</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;birthday&quot;</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)}</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">defaults</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n    <span class=\"n\">new_values</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;last_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">}</span>\n    <span class=\"n\">new_values</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">create_defaults</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">new_values</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This pattern gets quite unwieldy as the number of fields in a model goes up.\nThe above example can be rewritten using <code class=\"docutils literal notranslate\"><span class=\"pre\">update_or_create()</span></code> like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">created</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update_or_create</span><span class=\"p\">(</span>\n    <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">},</span>\n    <span class=\"n\">create_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;birthday&quot;</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1940</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)},</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For a detailed description of how names passed in <code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> are resolved, see\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.get_or_create\" title=\"django.db.models.query.QuerySet.get_or_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code></a>.</p>\n<p>As described above in <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.get_or_create\" title=\"django.db.models.query.QuerySet.get_or_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code></a>, this method is prone to a\nrace-condition which can result in multiple rows being inserted simultaneously\nif uniqueness is not enforced at the database level.</p>\n<p>Like <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.get_or_create\" title=\"django.db.models.query.QuerySet.get_or_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.create\" title=\"django.db.models.query.QuerySet.create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create()</span></code></a>, if you\u2019re using manually\nspecified primary keys and an object needs to be created but the key already\nexists in the database, an <a class=\"reference internal\" href=\"../../exceptions/#django.db.IntegrityError\" title=\"django.db.IntegrityError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">IntegrityError</span></code></a> is raised.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>In older versions, <code class=\"docutils literal notranslate\"><span class=\"pre\">update_or_create()</span></code> didn\u2019t specify <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code>\nwhen calling <a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a>.</p>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">create_defaults</span></code> argument was added.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-bulk-create\">\n<span id=\"bulk-create\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">bulk_create()</span></code><a class=\"headerlink\" href=\"#bulk-create\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.bulk_create\">\n<code class=\"sig-name descname\"><span class=\"pre\">bulk_create</span></code>(<em><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">batch_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">ignore_conflicts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">update_conflicts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">update_fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">unique_fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.bulk_create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.abulk_create\">\n<code class=\"sig-name descname\"><span class=\"pre\">abulk_create</span></code>(<em><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">batch_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">ignore_conflicts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">update_conflicts</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">update_fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">unique_fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.abulk_create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">abulk_create()</span></code></p>\n<p>This method inserts the provided list of objects into the database in an\nefficient manner (generally only 1 query, no matter how many objects there\nare), and returns created objects as a list, in the same order as provided:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">[</span>\n<span class=\"gp\">... </span>        <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is a test&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is only a test&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">]</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This has a number of caveats though:</p>\n<ul>\n<li><p class=\"first\">The model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method will not be called, and the <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post_save</span></code> signals will not be sent.</p>\n</li>\n<li><p class=\"first\">It does not work with child models in a multi-table inheritance scenario.</p>\n</li>\n<li><p class=\"first\">If the model\u2019s primary key is an <a class=\"reference internal\" href=\"../fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a>, the\nprimary key attribute can only be retrieved on certain databases (currently\nPostgreSQL, MariaDB 10.5+, and SQLite 3.35+). On other databases, it will not\nbe set.</p>\n</li>\n<li><p class=\"first\">It does not work with many-to-many relationships.</p>\n</li>\n<li><p class=\"first\">It casts <code class=\"docutils literal notranslate\"><span class=\"pre\">objs</span></code> to a list, which fully evaluates <code class=\"docutils literal notranslate\"><span class=\"pre\">objs</span></code> if it\u2019s a\ngenerator. The cast allows inspecting all objects so that any objects with a\nmanually set primary key can be inserted first. If you want to insert objects\nin batches without evaluating the entire generator at once, you can use this\ntechnique as long as the objects don\u2019t have any manually set primary keys:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">itertools</span> <span class=\"kn\">import</span> <span class=\"n\">islice</span>\n\n<span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Test </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">))</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">batch</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">islice</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">batch</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n    <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_create</span><span class=\"p\">(</span><span class=\"n\">batch</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">batch_size</span></code> parameter controls how many objects are created in a single\nquery. The default is to create all objects in one batch, except for SQLite\nwhere the default is such that at most 999 variables per query are used.</p>\n<p>On databases that support it (all but Oracle), setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">ignore_conflicts</span></code>\nparameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> tells the database to ignore failure to insert any rows\nthat fail constraints such as duplicate unique values.</p>\n<p>On databases that support it (all except Oracle and SQLite &lt; 3.24), setting the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_conflicts</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, tells the database to update\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> when a row insertion fails on conflicts. On PostgreSQL and\nSQLite, in addition to <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code>, a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">unique_fields</span></code> that may\nbe in conflict must be provided.</p>\n<p>Enabling the <code class=\"docutils literal notranslate\"><span class=\"pre\">ignore_conflicts</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">update_conflicts</span></code> parameter disable\nsetting the primary key on each model instance (if the database normally\nsupport it).</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">On MySQL and MariaDB, setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">ignore_conflicts</span></code> parameter to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> turns certain types of errors, other than duplicate key, into\nwarnings. Even with Strict Mode. For example: invalid values or\nnon-nullable violations. See the <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/sql-mode.html#ignore-strict-comparison\">MySQL documentation</a> and\n<a class=\"reference external\" href=\"https://mariadb.com/kb/en/ignore/\">MariaDB documentation</a> for more details.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-bulk-update\">\n<span id=\"bulk-update\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">bulk_update()</span></code><a class=\"headerlink\" href=\"#bulk-update\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.bulk_update\">\n<code class=\"sig-name descname\"><span class=\"pre\">bulk_update</span></code>(<em><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fields</span></span></em>, <em><span class=\"n\"><span class=\"pre\">batch_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.bulk_update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.abulk_update\">\n<code class=\"sig-name descname\"><span class=\"pre\">abulk_update</span></code>(<em><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fields</span></span></em>, <em><span class=\"n\"><span class=\"pre\">batch_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.abulk_update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">abulk_update()</span></code></p>\n<p>This method efficiently updates the given fields on the provided model\ninstances, generally with one query, and returns the number of objects\nupdated:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Entry 1&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Entry 2&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is entry 1&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">objs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;This is entry 2&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">bulk_update</span><span class=\"p\">(</span><span class=\"n\">objs</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">2</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.update\" title=\"django.db.models.query.QuerySet.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code></a> is used to save the changes, so this is more efficient\nthan iterating through the list of models and calling <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> on each of\nthem, but it has a few caveats:</p>\n<ul class=\"simple\">\n<li>You cannot update the model\u2019s primary key.</li>\n<li>Each model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method isn\u2019t called, and the\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a> and\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a> signals aren\u2019t sent.</li>\n<li>If updating a large number of columns in a large number of rows, the SQL\ngenerated can be very large. Avoid this by specifying a suitable\n<code class=\"docutils literal notranslate\"><span class=\"pre\">batch_size</span></code>.</li>\n<li>Updating fields defined on multi-table inheritance ancestors will incur an\nextra query per ancestor.</li>\n<li>When an individual batch contains duplicates, only the first instance in that\nbatch will result in an update.</li>\n<li>The number of objects updated returned by the function may be fewer than the\nnumber of objects passed in. This can be due to duplicate objects passed in\nwhich are updated in the same batch or race conditions such that objects are\nno longer present in the database.</li>\n</ul>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">batch_size</span></code> parameter controls how many objects are saved in a single\nquery. The default is to update all objects in one batch, except for SQLite\nand Oracle which have restrictions on the number of variables used in a query.</p>\n</div>\n<div class=\"section\" id=\"s-count\">\n<span id=\"count\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code><a class=\"headerlink\" href=\"#count\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.count\">\n<code class=\"sig-name descname\"><span class=\"pre\">count</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.count\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.acount\">\n<code class=\"sig-name descname\"><span class=\"pre\">acount</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.acount\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">acount()</span></code></p>\n<p>Returns an integer representing the number of objects in the database matching\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Returns the total number of entries in the database.</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Returns the number of entries whose headline contains &#39;Lennon&#39;</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> call performs a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">COUNT(*)</span></code> behind the scenes, so you\nshould always use <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> rather than loading all of the record into Python\nobjects and calling <code class=\"docutils literal notranslate\"><span class=\"pre\">len()</span></code> on the result (unless you need to load the\nobjects into memory anyway, in which case <code class=\"docutils literal notranslate\"><span class=\"pre\">len()</span></code> will be faster).</p>\n<p>Note that if you want the number of items in a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and are also\nretrieving model instances from it (for example, by iterating over it), it\u2019s\nprobably more efficient to use <code class=\"docutils literal notranslate\"><span class=\"pre\">len(queryset)</span></code> which won\u2019t cause an extra\ndatabase query like <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> would.</p>\n<p>If the queryset has already been fully retrieved, <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> will use that\nlength rather than perform an extra database query.</p>\n</div>\n<div class=\"section\" id=\"s-in-bulk\">\n<span id=\"in-bulk\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">in_bulk()</span></code><a class=\"headerlink\" href=\"#in-bulk\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.in_bulk\">\n<code class=\"sig-name descname\"><span class=\"pre\">in_bulk</span></code>(<em><span class=\"n\"><span class=\"pre\">id_list</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field_name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'pk'</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.in_bulk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.ain_bulk\">\n<code class=\"sig-name descname\"><span class=\"pre\">ain_bulk</span></code>(<em><span class=\"n\"><span class=\"pre\">id_list</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field_name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'pk'</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.ain_bulk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">ain_bulk()</span></code></p>\n<p>Takes a list of field values (<code class=\"docutils literal notranslate\"><span class=\"pre\">id_list</span></code>) and the <code class=\"docutils literal notranslate\"><span class=\"pre\">field_name</span></code> for those\nvalues, and returns a dictionary mapping each value to an instance of the\nobject with the given field value. No\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ObjectDoesNotExist\" title=\"django.core.exceptions.ObjectDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">django.core.exceptions.ObjectDoesNotExist</span></code></a> exceptions will ever be raised\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">in_bulk</span></code>; that is, any <code class=\"docutils literal notranslate\"><span class=\"pre\">id_list</span></code> value not matching any instance will\nsimply be ignored. If <code class=\"docutils literal notranslate\"><span class=\"pre\">id_list</span></code> isn\u2019t provided, all objects\nin the queryset are returned. <code class=\"docutils literal notranslate\"><span class=\"pre\">field_name</span></code> must be a unique field or a\ndistinct field (if there\u2019s only one field specified in <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.distinct\" title=\"django.db.models.query.QuerySet.distinct\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">distinct()</span></code></a>).\n<code class=\"docutils literal notranslate\"><span class=\"pre\">field_name</span></code> defaults to the primary key.</p>\n<p>Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">in_bulk</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"go\">{1: &lt;Blog: Beatles Blog&gt;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">in_bulk</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"go\">{1: &lt;Blog: Beatles Blog&gt;, 2: &lt;Blog: Cheddar Talk&gt;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">in_bulk</span><span class=\"p\">([])</span>\n<span class=\"go\">{}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">in_bulk</span><span class=\"p\">()</span>\n<span class=\"go\">{1: &lt;Blog: Beatles Blog&gt;, 2: &lt;Blog: Cheddar Talk&gt;, 3: &lt;Blog: Django Weblog&gt;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">in_bulk</span><span class=\"p\">([</span><span class=\"s2\">&quot;beatles_blog&quot;</span><span class=\"p\">],</span> <span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;slug&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;beatles_blog&#39;: &lt;Blog: Beatles Blog&gt;}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">in_bulk</span><span class=\"p\">(</span><span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">{&#39;Beatles Blog&#39;: &lt;Blog: Beatles Blog&gt;, &#39;Cheddar Talk&#39;: &lt;Blog: Cheddar Talk&gt;, &#39;Django Weblog&#39;: &lt;Blog: Django Weblog&gt;}</span>\n</pre></div>\n</div>\n<p>If you pass <code class=\"docutils literal notranslate\"><span class=\"pre\">in_bulk()</span></code> an empty list, you\u2019ll get an empty dictionary.</p>\n</div>\n<div class=\"section\" id=\"s-iterator\">\n<span id=\"iterator\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code><a class=\"headerlink\" href=\"#iterator\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.iterator\">\n<code class=\"sig-name descname\"><span class=\"pre\">iterator</span></code>(<em><span class=\"n\"><span class=\"pre\">chunk_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.iterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aiterator\">\n<code class=\"sig-name descname\"><span class=\"pre\">aiterator</span></code>(<em><span class=\"n\"><span class=\"pre\">chunk_size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aiterator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aiterator()</span></code></p>\n<p>Evaluates the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> (by performing the query) and returns an iterator\n(see <span class=\"target\" id=\"index-1\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0234/\"><strong>PEP 234</strong></a>) over the results, or an asynchronous iterator (see <span class=\"target\" id=\"index-2\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0492/\"><strong>PEP 492</strong></a>)\nif you call its asynchronous version <code class=\"docutils literal notranslate\"><span class=\"pre\">aiterator</span></code>.</p>\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> typically caches its results internally so that repeated\nevaluations do not result in additional queries. In contrast, <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code>\nwill read results directly, without doing any caching at the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> level\n(internally, the default iterator calls <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code> and caches the return\nvalue). For a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> which returns a large number of objects that you\nonly need to access once, this can result in better performance and a\nsignificant reduction in memory.</p>\n<p>Note that using <code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code> on a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> which has already been\nevaluated will force it to evaluate again, repeating the query.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code> is compatible with previous calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code> as\nlong as <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> is given. Larger values will necessitate fewer queries\nto accomplish the prefetching at the cost of greater memory usage.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">aiterator()</span></code> is <em>not</em> compatible with previous calls to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code>.</p>\n</div>\n<p>On some databases (e.g. Oracle, <a class=\"reference external\" href=\"https://www.sqlite.org/limits.html#max_variable_number\">SQLite</a>), the maximum number\nof terms in an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">IN</span></code> clause might be limited. Hence values below this\nlimit should be used. (In particular, when prefetching across two or more\nrelations, a <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> should be small enough that the anticipated number\nof results for each prefetched relation still falls below the limit.)</p>\n<p>So long as the QuerySet does not prefetch any related objects, providing no\nvalue for <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> will result in Django using an implicit default of\n2000.</p>\n<p>Depending on the database backend, query results will either be loaded all at\nonce or streamed from the database using server-side cursors.</p>\n<div class=\"section\" id=\"s-with-server-side-cursors\">\n<span id=\"with-server-side-cursors\"></span><h5>With server-side cursors<a class=\"headerlink\" href=\"#with-server-side-cursors\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Oracle and <a class=\"reference internal\" href=\"../../databases/#postgresql-server-side-cursors\"><span class=\"std std-ref\">PostgreSQL</span></a> use server-side\ncursors to stream results from the database without loading the entire result\nset into memory.</p>\n<p>The Oracle database driver always uses server-side cursors.</p>\n<p>With server-side cursors, the <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> parameter specifies the number of\nresults to cache at the database driver level. Fetching bigger chunks\ndiminishes the number of round trips between the database driver and the\ndatabase, at the expense of memory.</p>\n<p>On PostgreSQL, server-side cursors will only be used when the\n<a class=\"reference internal\" href=\"../../settings/#std-setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DISABLE_SERVER_SIDE_CURSORS</span></code></a>\nsetting is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. Read <a class=\"reference internal\" href=\"../../databases/#transaction-pooling-server-side-cursors\"><span class=\"std std-ref\">Transaction pooling and server-side cursors</span></a> if\nyou\u2019re using a connection pooler configured in transaction pooling mode. When\nserver-side cursors are disabled, the behavior is the same as databases that\ndon\u2019t support server-side cursors.</p>\n</div>\n<div class=\"section\" id=\"s-without-server-side-cursors\">\n<span id=\"without-server-side-cursors\"></span><h5>Without server-side cursors<a class=\"headerlink\" href=\"#without-server-side-cursors\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>MySQL doesn\u2019t support streaming results, hence the Python database driver loads\nthe entire result set into memory. The result set is then transformed into\nPython row objects by the database adapter using the <code class=\"docutils literal notranslate\"><span class=\"pre\">fetchmany()</span></code> method\ndefined in <span class=\"target\" id=\"index-3\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0249/\"><strong>PEP 249</strong></a>.</p>\n<p>SQLite can fetch results in batches using <code class=\"docutils literal notranslate\"><span class=\"pre\">fetchmany()</span></code>, but since SQLite\ndoesn\u2019t provide isolation between queries within a connection, be careful when\nwriting to the table being iterated over. See <a class=\"reference internal\" href=\"../../databases/#sqlite-isolation\"><span class=\"std std-ref\">Isolation when using QuerySet.iterator()</span></a> for\nmore information.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> parameter controls the size of batches Django retrieves from\nthe database driver. Larger batches decrease the overhead of communicating with\nthe database driver at the expense of a slight increase in memory consumption.</p>\n<p>So long as the QuerySet does not prefetch any related objects, providing no\nvalue for <code class=\"docutils literal notranslate\"><span class=\"pre\">chunk_size</span></code> will result in Django using an implicit default of\n2000, a value derived from <a class=\"reference external\" href=\"https://www.postgresql.org/message-id/4D2F2C71.8080805%40dndg.it\">a calculation on the psycopg mailing list</a>:</p>\n<blockquote>\n<div>Assuming rows of 10-20 columns with a mix of textual and numeric data, 2000\nis going to fetch less than 100KB of data, which seems a good compromise\nbetween the number of rows transferred and the data discarded if the loop\nis exited early.</div></blockquote>\n</div>\n</div>\n<div class=\"section\" id=\"s-latest\">\n<span id=\"latest\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code><a class=\"headerlink\" href=\"#latest\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.latest\">\n<code class=\"sig-name descname\"><span class=\"pre\">latest</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.latest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.alatest\">\n<code class=\"sig-name descname\"><span class=\"pre\">alatest</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.alatest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">alatest()</span></code></p>\n<p>Returns the latest object in the table based on the given field(s).</p>\n<p>This example returns the latest <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> in the table, according to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">latest</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can also choose the latest based on several fields. For example, to select\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> with the earliest <code class=\"docutils literal notranslate\"><span class=\"pre\">expire_date</span></code> when two entries have the same\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">latest</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;-expire_date&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The negative sign in <code class=\"docutils literal notranslate\"><span class=\"pre\">'-expire_date'</span></code> means to sort <code class=\"docutils literal notranslate\"><span class=\"pre\">expire_date</span></code> in\n<em>descending</em> order. Since <code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code> gets the last result, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> with\nthe earliest <code class=\"docutils literal notranslate\"><span class=\"pre\">expire_date</span></code> is selected.</p>\n<p>If your model\u2019s <a class=\"reference internal\" href=\"../../../topics/db/models/#meta-options\"><span class=\"std std-ref\">Meta</span></a> specifies\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.get_latest_by\" title=\"django.db.models.Options.get_latest_by\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">get_latest_by</span></code></a>, you can omit any arguments to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">earliest()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code>. The fields specified in\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.get_latest_by\" title=\"django.db.models.Options.get_latest_by\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">get_latest_by</span></code></a> will be used by default.</p>\n<p>Like <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">earliest()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code> raise\n<a class=\"reference internal\" href=\"../class/#django.db.models.Model.DoesNotExist\" title=\"django.db.models.Model.DoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code></a> if there is no object with the\ngiven parameters.</p>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">earliest()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code> exist purely for convenience and\nreadability.</p>\n<div class=\"admonition-earliest-and-latest-may-return-instances-with-null-dates admonition\">\n<p class=\"first admonition-title\"><code class=\"docutils literal notranslate\"><span class=\"pre\">earliest()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code> may return instances with null dates.</p>\n<p>Since ordering is delegated to the database, results on fields that allow\nnull values may be ordered differently if you use different databases. For\nexample, PostgreSQL and MySQL sort null values as if they are higher than\nnon-null values, while SQLite does the opposite.</p>\n<p>You may want to filter out null values:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__isnull</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">latest</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-earliest\">\n<span id=\"earliest\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">earliest()</span></code><a class=\"headerlink\" href=\"#earliest\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.earliest\">\n<code class=\"sig-name descname\"><span class=\"pre\">earliest</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.earliest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aearliest\">\n<code class=\"sig-name descname\"><span class=\"pre\">aearliest</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">fields</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aearliest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aearliest()</span></code></p>\n<p>Works otherwise like <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.latest\" title=\"django.db.models.query.QuerySet.latest\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">latest()</span></code></a> except\nthe direction is changed.</p>\n</div>\n<div class=\"section\" id=\"s-first\">\n<span id=\"first\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">first()</span></code><a class=\"headerlink\" href=\"#first\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.first\">\n<code class=\"sig-name descname\"><span class=\"pre\">first</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.first\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.afirst\">\n<code class=\"sig-name descname\"><span class=\"pre\">afirst</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.afirst\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">afirst()</span></code></p>\n<p>Returns the first object matched by the queryset, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if there\nis no matching object. If the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> has no ordering defined, then the\nqueryset is automatically ordered by the primary key. This can affect\naggregation results as described in <a class=\"reference internal\" href=\"../../../topics/db/aggregation/#aggregation-ordering-interaction\"><span class=\"std std-ref\">Interaction with order_by()</span></a>.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">first()</span></code> is a convenience method, the following code sample is\nequivalent to the above example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-last\">\n<span id=\"last\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">last()</span></code><a class=\"headerlink\" href=\"#last\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.last\">\n<code class=\"sig-name descname\"><span class=\"pre\">last</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.last\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.alast\">\n<code class=\"sig-name descname\"><span class=\"pre\">alast</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.alast\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">alast()</span></code></p>\n<p>Works like  <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.first\" title=\"django.db.models.query.QuerySet.first\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">first()</span></code></a>, but returns the last object in the queryset.</p>\n</div>\n<div class=\"section\" id=\"s-aggregate\">\n<span id=\"aggregate\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">aggregate()</span></code><a class=\"headerlink\" href=\"#aggregate\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aggregate\">\n<code class=\"sig-name descname\"><span class=\"pre\">aggregate</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aggregate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aaggregate\">\n<code class=\"sig-name descname\"><span class=\"pre\">aaggregate</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">args</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aaggregate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aaggregate()</span></code></p>\n<p>Returns a dictionary of aggregate values (averages, sums, etc.) calculated over\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>. Each argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">aggregate()</span></code> specifies a value that will\nbe included in the dictionary that is returned.</p>\n<p>The aggregation functions that are provided by Django are described in\n<a class=\"reference internal\" href=\"#id6\">Aggregation Functions</a> below. Since aggregates are also <a class=\"reference internal\" href=\"../expressions/\"><span class=\"doc\">query\nexpressions</span></a>, you may combine aggregates with other\naggregates or values to create complex aggregates.</p>\n<p>Aggregates specified using keyword arguments will use the keyword as the name\nfor the annotation. Anonymous arguments will have a name generated for them\nbased upon the name of the aggregate function and the model field that is being\naggregated. Complex aggregates cannot use anonymous arguments and must specify\na keyword argument as an alias.</p>\n<p>For example, when you are working with blog entries, you may want to know the\nnumber of authors that have contributed blog entries:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Count</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">(</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">{&#39;entry__count&#39;: 16}</span>\n</pre></div>\n</div>\n<p>By using a keyword argument to specify the aggregate function, you can\ncontrol the name of the aggregation value that is returned:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">(</span><span class=\"n\">number_of_entries</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">{&#39;number_of_entries&#39;: 16}</span>\n</pre></div>\n</div>\n<p>For an in-depth discussion of aggregation, see <a class=\"reference internal\" href=\"../../../topics/db/aggregation/\"><span class=\"doc\">the topic guide on\nAggregation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-exists\">\n<span id=\"exists\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">exists()</span></code><a class=\"headerlink\" href=\"#exists\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.exists\">\n<code class=\"sig-name descname\"><span class=\"pre\">exists</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.exists\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aexists\">\n<code class=\"sig-name descname\"><span class=\"pre\">aexists</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aexists\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aexists()</span></code></p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> contains any results, and <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>\nif not. This tries to perform the query in the simplest and fastest way\npossible, but it <em>does</em> execute nearly the same query as a normal\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> query.</p>\n<p><a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exists\" title=\"django.db.models.query.QuerySet.exists\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a> is useful for searches relating to the existence of\nany objects in a <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, particularly in the context of a large\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>.</p>\n<p>To find whether a queryset contains any items:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">some_queryset</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is at least one object in some_queryset&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Which will be faster than:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">some_queryset</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;There is at least one object in some_queryset&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026 but not by a large degree (hence needing a large queryset for efficiency\ngains).</p>\n<p>Additionally, if a <code class=\"docutils literal notranslate\"><span class=\"pre\">some_queryset</span></code> has not yet been evaluated, but you know\nthat it will be at some point, then using <code class=\"docutils literal notranslate\"><span class=\"pre\">some_queryset.exists()</span></code> will do\nmore overall work (one query for the existence check plus an extra one to later\nretrieve the results) than using <code class=\"docutils literal notranslate\"><span class=\"pre\">bool(some_queryset)</span></code>, which retrieves the\nresults and then checks if any were returned.</p>\n</div>\n<div class=\"section\" id=\"s-contains\">\n<span id=\"contains\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contains()</span></code><a class=\"headerlink\" href=\"#contains\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.contains\">\n<code class=\"sig-name descname\"><span class=\"pre\">contains</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.contains\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.acontains\">\n<code class=\"sig-name descname\"><span class=\"pre\">acontains</span></code>(<em><span class=\"n\"><span class=\"pre\">obj</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.acontains\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">acontains()</span></code></p>\n<p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> contains <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if\nnot. This tries to perform the query in the simplest and fastest way possible.</p>\n<p><a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.contains\" title=\"django.db.models.query.QuerySet.contains\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">contains()</span></code></a> is useful for checking an object membership in a\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, particularly in the context of a large <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>.</p>\n<p>To check whether a queryset contains a specific item:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">some_queryset</span><span class=\"o\">.</span><span class=\"n\">contains</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Entry contained in queryset&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This will be faster than the following which requires evaluating and iterating\nthrough the entire queryset:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">some_queryset</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Entry contained in queryset&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Like <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exists\" title=\"django.db.models.query.QuerySet.exists\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a>, if <code class=\"docutils literal notranslate\"><span class=\"pre\">some_queryset</span></code> has not yet been evaluated, but you\nknow that it will be at some point, then using <code class=\"docutils literal notranslate\"><span class=\"pre\">some_queryset.contains(obj)</span></code>\nwill make an additional database query, generally resulting in slower overall\nperformance.</p>\n</div>\n<div class=\"section\" id=\"s-update\">\n<span id=\"update\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code><a class=\"headerlink\" href=\"#update\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.update\">\n<code class=\"sig-name descname\"><span class=\"pre\">update</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aupdate\">\n<code class=\"sig-name descname\"><span class=\"pre\">aupdate</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aupdate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aupdate()</span></code></p>\n<p>Performs an SQL update query for the specified fields, and returns\nthe number of rows matched (which may not be equal to the number of rows\nupdated if some rows already have the new value).</p>\n<p>For example, to turn comments off for all blog entries published in 2010,\nyou could do this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(This assumes your <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> model has fields <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">comments_on</span></code>.)</p>\n<p>You can update multiple fields \u2014 there\u2019s no limit on how many. For example,\nhere we update the <code class=\"docutils literal notranslate\"><span class=\"pre\">comments_on</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">headline</span></code> fields:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;This is old&quot;</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> method is applied instantly, and the only restriction on the\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> that is updated is that it can only update columns in the\nmodel\u2019s main table, not on related models. You can\u2019t do this, for example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">blog__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">)</span>  <span class=\"c1\"># Won&#39;t work!</span>\n</pre></div>\n</div>\n<p>Filtering based on related fields is still possible, though:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You cannot call <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> on a <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> that has had a slice taken\nor can otherwise no longer be filtered.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> method returns the number of affected rows:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">1</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">slug</span><span class=\"o\">=</span><span class=\"s2\">&quot;nonexistent-slug&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">0</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">132</span>\n</pre></div>\n</div>\n<p>If you\u2019re just updating a record and don\u2019t need to do anything with the model\nobject, the most efficient approach is to call <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code>, rather than\nloading the model object into memory. For example, instead of doing this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">comments_on</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>\u2026do this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">comments_on</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> also prevents a race condition wherein something might\nchange in your database in the short period of time between loading the object\nand calling <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>.</p>\n<p>Finally, realize that <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> does an update at the SQL level and, thus,\ndoes not call any <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> methods on your models, nor does it emit the\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a> or\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a> signals (which are a consequence of\ncalling <a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a>). If you want to\nupdate a bunch of records for a model that has a custom\n<a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method, loop over them and call\n<a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>, like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">):</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">comments_on</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-ordered-queryset\">\n<span id=\"ordered-queryset\"></span><h5>Ordered queryset<a class=\"headerlink\" href=\"#ordered-queryset\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Chaining <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> is supported only on MariaDB and\nMySQL, and is ignored for different databases. This is useful for updating a\nunique field in the order that is specified without conflicts. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-number&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> clause will be ignored if it contains annotations, inherited\nfields, or lookups spanning relations.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-delete\">\n<span id=\"delete\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code><a class=\"headerlink\" href=\"#delete\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.delete\">\n<code class=\"sig-name descname\"><span class=\"pre\">delete</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.delete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.adelete\">\n<code class=\"sig-name descname\"><span class=\"pre\">adelete</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.adelete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">adelete()</span></code></p>\n<p>Performs an SQL delete query on all rows in the <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> and\nreturns the number of objects deleted and a dictionary with the number of\ndeletions per object type.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> is applied instantly. You cannot call <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> on a\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> that has had a slice taken or can otherwise no longer be\nfiltered.</p>\n<p>For example, to delete all the entries in a particular blog:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Delete all the entries belonging to this Blog.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"go\">(4, {&#39;blog.Entry&#39;: 2, &#39;blog.Entry_authors&#39;: 2})</span>\n</pre></div>\n</div>\n<p>By default, Django\u2019s <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> emulates the SQL\nconstraint <code class=\"docutils literal notranslate\"><span class=\"pre\">ON</span> <span class=\"pre\">DELETE</span> <span class=\"pre\">CASCADE</span></code> \u2014 in other words, any objects with foreign\nkeys pointing at the objects to be deleted will be deleted along with them.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">blogs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"go\"># This will delete all Blogs and all of their Entry objects.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">blogs</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"go\">(5, {&#39;blog.Blog&#39;: 1, &#39;blog.Entry&#39;: 2, &#39;blog.Entry_authors&#39;: 2})</span>\n</pre></div>\n</div>\n<p>This cascade behavior is customizable via the\n<a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey.on_delete\" title=\"django.db.models.ForeignKey.on_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">on_delete</span></code></a> argument to the\n<a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> method does a bulk delete and does not call any <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code>\nmethods on your models. It does, however, emit the\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.pre_delete\" title=\"django.db.models.signals.pre_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_delete</span></code></a> and\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.post_delete\" title=\"django.db.models.signals.post_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_delete</span></code></a> signals for all deleted objects\n(including cascaded deletions).</p>\n<p>Django needs to fetch objects into memory to send signals and handle cascades.\nHowever, if there are no cascades and no signals, then Django may take a\nfast-path and delete objects without fetching into memory. For large\ndeletes this can result in significantly reduced memory usage. The amount of\nexecuted queries can be reduced, too.</p>\n<p>ForeignKeys which are set to <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey.on_delete\" title=\"django.db.models.ForeignKey.on_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">on_delete</span></code></a>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DO_NOTHING</span></code> do not prevent taking the fast-path in deletion.</p>\n<p>Note that the queries generated in object deletion is an implementation\ndetail subject to change.</p>\n</div>\n<div class=\"section\" id=\"s-as-manager\">\n<span id=\"as-manager\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">as_manager()</span></code><a class=\"headerlink\" href=\"#as-manager\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.as_manager\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">as_manager</span></code>()<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.as_manager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Class method that returns an instance of <a class=\"reference internal\" href=\"../../../topics/db/managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a>\nwith a copy of the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>\u2019s methods. See\n<a class=\"reference internal\" href=\"../../../topics/db/managers/#create-manager-with-queryset-methods\"><span class=\"std std-ref\">Creating a manager with QuerySet methods</span></a> for more details.</p>\n<p>Note that unlike the other entries in this section, this does not have an\nasynchronous variant as it does not execute a query.</p>\n</div>\n<div class=\"section\" id=\"s-explain\">\n<span id=\"explain\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">explain()</span></code><a class=\"headerlink\" href=\"#explain\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.explain\">\n<code class=\"sig-name descname\"><span class=\"pre\">explain</span></code>(<em><span class=\"n\"><span class=\"pre\">format</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.explain\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.query.QuerySet.aexplain\">\n<code class=\"sig-name descname\"><span class=\"pre\">aexplain</span></code>(<em><span class=\"n\"><span class=\"pre\">format</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.query.QuerySet.aexplain\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aexplain()</span></code></p>\n<p>Returns a string of the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>\u2019s execution plan, which details how the\ndatabase would execute the query, including any indexes or joins that would be\nused. Knowing these details may help you improve the performance of slow\nqueries.</p>\n<p>For example, when using PostgreSQL:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;My Blog&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">explain</span><span class=\"p\">())</span>\n<span class=\"go\">Seq Scan on blog  (cost=0.00..35.50 rows=10 width=12)</span>\n<span class=\"go\">  Filter: (title = &#39;My Blog&#39;::bpchar)</span>\n</pre></div>\n</div>\n<p>The output differs significantly between databases.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">explain()</span></code> is supported by all built-in database backends except Oracle\nbecause an implementation there isn\u2019t straightforward.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">format</span></code> parameter changes the output format from the databases\u2019s\ndefault, which is usually text-based. PostgreSQL supports <code class=\"docutils literal notranslate\"><span class=\"pre\">'TEXT'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'JSON'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'YAML'</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">'XML'</span></code> formats. MariaDB and MySQL support\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'TEXT'</span></code> (also called <code class=\"docutils literal notranslate\"><span class=\"pre\">'TRADITIONAL'</span></code>) and <code class=\"docutils literal notranslate\"><span class=\"pre\">'JSON'</span></code> formats. MySQL\n8.0.16+ also supports an improved <code class=\"docutils literal notranslate\"><span class=\"pre\">'TREE'</span></code> format, which is similar to\nPostgreSQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">'TEXT'</span></code> output and is used by default, if supported.</p>\n<p>Some databases accept flags that can return more information about the query.\nPass these flags as keyword arguments. For example, when using PostgreSQL:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;My Blog&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">explain</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">analyze</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"go\">Seq Scan on public.blog  (cost=0.00..35.50 rows=10 width=12) (actual time=0.004..0.004 rows=10 loops=1)</span>\n<span class=\"go\">  Output: id, title</span>\n<span class=\"go\">  Filter: (blog.title = &#39;My Blog&#39;::bpchar)</span>\n<span class=\"go\">Planning time: 0.064 ms</span>\n<span class=\"go\">Execution time: 0.058 ms</span>\n</pre></div>\n</div>\n<p>On some databases, flags may cause the query to be executed which could have\nadverse effects on your database. For example, the <code class=\"docutils literal notranslate\"><span class=\"pre\">ANALYZE</span></code> flag supported\nby MariaDB, MySQL 8.0.18+, and PostgreSQL could result in changes to data if\nthere are triggers or if a function is called, even for a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> query.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-field-lookups\">\n<span id=\"s-id4\"></span><span id=\"field-lookups\"></span><span id=\"id4\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> lookups<a class=\"headerlink\" href=\"#field-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Field lookups are how you specify the meat of an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause. They\u2019re\nspecified as keyword arguments to the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>.</p>\n<p>For an introduction, see <a class=\"reference internal\" href=\"../../../topics/db/queries/#field-lookups-intro\"><span class=\"std std-ref\">models and database queries documentation</span></a>.</p>\n<p>Django\u2019s built-in lookups are listed below. It is also possible to write\n<a class=\"reference internal\" href=\"../../../howto/custom-lookups/\"><span class=\"doc\">custom lookups</span></a> for model fields.</p>\n<p>As a convenience when no lookup type is provided (like in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Entry.objects.get(id=14)</span></code>) the lookup type is assumed to be <a class=\"reference internal\" href=\"#std-fieldlookup-exact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">exact</span></code></a>.</p>\n<div class=\"section\" id=\"s-exact\">\n<span id=\"s-std-fieldlookup-exact\"></span><span id=\"s-std:fieldlookup-exact\"></span><span id=\"exact\"></span><span id=\"std-fieldlookup-exact\"></span><span id=\"std:fieldlookup-exact\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code><a class=\"headerlink\" href=\"#exact\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Exact match. If the value provided for comparison is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, it will be\ninterpreted as an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> (see <a class=\"reference internal\" href=\"#std-fieldlookup-isnull\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">isnull</span></code></a> for more details).</p>\n<p>Examples:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">id__exact</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">id__exact</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalents:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mi\">14</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"k\">IS</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition-mysql-comparisons admonition\">\n<p class=\"first admonition-title\">MySQL comparisons</p>\n<p class=\"last\">In MySQL, a database table\u2019s \u201ccollation\u201d setting determines whether\n<code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code> comparisons are case-sensitive. This is a database setting, <em>not</em>\na Django setting. It\u2019s possible to configure your MySQL tables to use\ncase-sensitive comparisons, but some trade-offs are involved. For more\ninformation about this, see the <a class=\"reference internal\" href=\"../../databases/#mysql-collation\"><span class=\"std std-ref\">collation section</span></a>\nin the <a class=\"reference internal\" href=\"../../databases/\"><span class=\"doc\">databases</span></a> documentation.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-iexact\">\n<span id=\"s-std-fieldlookup-iexact\"></span><span id=\"s-std:fieldlookup-iexact\"></span><span id=\"iexact\"></span><span id=\"std-fieldlookup-iexact\"></span><span id=\"std:fieldlookup-iexact\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">iexact</span></code><a class=\"headerlink\" href=\"#iexact\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-insensitive exact match. If the value provided for comparison is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>,\nit will be interpreted as an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> (see <a class=\"reference internal\" href=\"#std-fieldlookup-isnull\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">isnull</span></code></a> for more\ndetails).</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name__iexact</span><span class=\"o\">=</span><span class=\"s2\">&quot;beatles blog&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name__iexact</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalents:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"k\">ILIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;beatles blog&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">name</span><span class=\"w\"> </span><span class=\"k\">IS</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note the first query will match <code class=\"docutils literal notranslate\"><span class=\"pre\">'Beatles</span> <span class=\"pre\">Blog'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'beatles</span> <span class=\"pre\">blog'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'BeAtLes</span> <span class=\"pre\">BLoG'</span></code>, etc.</p>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">When using the SQLite backend and non-ASCII strings, bear in mind the\n<a class=\"reference internal\" href=\"../../databases/#sqlite-string-matching\"><span class=\"std std-ref\">database note</span></a> about string comparisons.\nSQLite does not do case-insensitive matching for non-ASCII strings.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-std-fieldlookup-contains\">\n<span id=\"s-std:fieldlookup-contains\"></span><span id=\"s-id5\"></span><span id=\"std-fieldlookup-contains\"></span><span id=\"std:fieldlookup-contains\"></span><span id=\"id5\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code><a class=\"headerlink\" href=\"#std-fieldlookup-contains\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-sensitive containment test.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%Lennon%&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note this will match the headline <code class=\"docutils literal notranslate\"><span class=\"pre\">'Lennon</span> <span class=\"pre\">honored</span> <span class=\"pre\">today'</span></code> but not <code class=\"docutils literal notranslate\"><span class=\"pre\">'lennon</span>\n<span class=\"pre\">honored</span> <span class=\"pre\">today'</span></code>.</p>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">SQLite doesn\u2019t support case-sensitive <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> statements; <code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code>\nacts like <code class=\"docutils literal notranslate\"><span class=\"pre\">icontains</span></code> for SQLite. See the <a class=\"reference internal\" href=\"../../databases/#sqlite-string-matching\"><span class=\"std std-ref\">database note</span></a> for more information.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-icontains\">\n<span id=\"s-std-fieldlookup-icontains\"></span><span id=\"s-std:fieldlookup-icontains\"></span><span id=\"icontains\"></span><span id=\"std-fieldlookup-icontains\"></span><span id=\"std:fieldlookup-icontains\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">icontains</span></code><a class=\"headerlink\" href=\"#icontains\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-insensitive containment test.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">headline__icontains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">ILIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%Lennon%&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">When using the SQLite backend and non-ASCII strings, bear in mind the\n<a class=\"reference internal\" href=\"../../databases/#sqlite-string-matching\"><span class=\"std std-ref\">database note</span></a> about string comparisons.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-in\">\n<span id=\"s-std-fieldlookup-in\"></span><span id=\"s-std:fieldlookup-in\"></span><span id=\"in\"></span><span id=\"std-fieldlookup-in\"></span><span id=\"std:fieldlookup-in\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code><a class=\"headerlink\" href=\"#in\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In a given iterable; often a list, tuple, or queryset. It\u2019s not a common use\ncase, but strings (being iterables) are accepted.</p>\n<p>Examples:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">id__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__in</span><span class=\"o\">=</span><span class=\"s2\">&quot;abc&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalents:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"s1\">&#39;a&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;b&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>You can also use a queryset to dynamically evaluate the list of values\ninstead of providing a list of literal values:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">inner_qs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheddar&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__in</span><span class=\"o\">=</span><span class=\"n\">inner_qs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This queryset will be evaluated as subselect statement:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">blog</span><span class=\"p\">.</span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"k\">IN</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">NAME</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%Cheddar%&#39;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>If you pass in a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> resulting from <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code>\nas the value to an <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> lookup, you need to ensure you are only extracting\none field in the result. For example, this will work (filtering on the blog\nnames):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">inner_qs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Ch&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__name__in</span><span class=\"o\">=</span><span class=\"n\">inner_qs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This example will raise an exception, since the inner query is trying to\nextract two field values, where only one is expected:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Bad code! Will raise a TypeError.</span>\n<span class=\"n\">inner_qs</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Ch&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__name__in</span><span class=\"o\">=</span><span class=\"n\">inner_qs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition-performance-considerations admonition\" id=\"nested-queries-performance\">\n<p class=\"first admonition-title\">Performance considerations</p>\n<p>Be cautious about using nested queries and understand your database\nserver\u2019s performance characteristics (if in doubt, benchmark!). Some\ndatabase backends, most notably MySQL, don\u2019t optimize nested queries very\nwell. It is more efficient, in those cases, to extract a list of values\nand then pass that into the second query. That is, execute two queries\ninstead of one:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheddar&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__in</span><span class=\"o\">=</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p class=\"last\">Note the <code class=\"docutils literal notranslate\"><span class=\"pre\">list()</span></code> call around the Blog <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> to force execution of\nthe first query. Without it, a nested query would be executed, because\n<a class=\"reference internal\" href=\"../../../topics/db/queries/#querysets-are-lazy\"><span class=\"std std-ref\">QuerySets are lazy</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-gt\">\n<span id=\"s-std-fieldlookup-gt\"></span><span id=\"s-std:fieldlookup-gt\"></span><span id=\"gt\"></span><span id=\"std-fieldlookup-gt\"></span><span id=\"std:fieldlookup-gt\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">gt</span></code><a class=\"headerlink\" href=\"#gt\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Greater than.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">id__gt</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">id</span><span class=\"w\"> </span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"mi\">4</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-gte\">\n<span id=\"s-std-fieldlookup-gte\"></span><span id=\"s-std:fieldlookup-gte\"></span><span id=\"gte\"></span><span id=\"std-fieldlookup-gte\"></span><span id=\"std:fieldlookup-gte\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">gte</span></code><a class=\"headerlink\" href=\"#gte\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Greater than or equal to.</p>\n</div>\n<div class=\"section\" id=\"s-lt\">\n<span id=\"s-std-fieldlookup-lt\"></span><span id=\"s-std:fieldlookup-lt\"></span><span id=\"lt\"></span><span id=\"std-fieldlookup-lt\"></span><span id=\"std:fieldlookup-lt\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">lt</span></code><a class=\"headerlink\" href=\"#lt\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Less than.</p>\n</div>\n<div class=\"section\" id=\"s-lte\">\n<span id=\"s-std-fieldlookup-lte\"></span><span id=\"s-std:fieldlookup-lte\"></span><span id=\"lte\"></span><span id=\"std-fieldlookup-lte\"></span><span id=\"std:fieldlookup-lte\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">lte</span></code><a class=\"headerlink\" href=\"#lte\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Less than or equal to.</p>\n</div>\n<div class=\"section\" id=\"s-startswith\">\n<span id=\"s-std-fieldlookup-startswith\"></span><span id=\"s-std:fieldlookup-startswith\"></span><span id=\"startswith\"></span><span id=\"std-fieldlookup-startswith\"></span><span id=\"std:fieldlookup-startswith\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code><a class=\"headerlink\" href=\"#startswith\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-sensitive starts-with.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;Lennon%&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>SQLite doesn\u2019t support case-sensitive <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> statements; <code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code> acts\nlike <code class=\"docutils literal notranslate\"><span class=\"pre\">istartswith</span></code> for SQLite.</p>\n</div>\n<div class=\"section\" id=\"s-istartswith\">\n<span id=\"s-std-fieldlookup-istartswith\"></span><span id=\"s-std:fieldlookup-istartswith\"></span><span id=\"istartswith\"></span><span id=\"std-fieldlookup-istartswith\"></span><span id=\"std:fieldlookup-istartswith\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">istartswith</span></code><a class=\"headerlink\" href=\"#istartswith\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-insensitive starts-with.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__istartswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">ILIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;Lennon%&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">When using the SQLite backend and non-ASCII strings, bear in mind the\n<a class=\"reference internal\" href=\"../../databases/#sqlite-string-matching\"><span class=\"std std-ref\">database note</span></a> about string comparisons.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-endswith\">\n<span id=\"s-std-fieldlookup-endswith\"></span><span id=\"s-std:fieldlookup-endswith\"></span><span id=\"endswith\"></span><span id=\"std-fieldlookup-endswith\"></span><span id=\"std:fieldlookup-endswith\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">endswith</span></code><a class=\"headerlink\" href=\"#endswith\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-sensitive ends-with.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__endswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%Lennon&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">SQLite doesn\u2019t support case-sensitive <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> statements; <code class=\"docutils literal notranslate\"><span class=\"pre\">endswith</span></code>\nacts like <code class=\"docutils literal notranslate\"><span class=\"pre\">iendswith</span></code> for SQLite. Refer to the <a class=\"reference internal\" href=\"../../databases/#sqlite-string-matching\"><span class=\"std std-ref\">database note</span></a> documentation for more.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-iendswith\">\n<span id=\"s-std-fieldlookup-iendswith\"></span><span id=\"s-std:fieldlookup-iendswith\"></span><span id=\"iendswith\"></span><span id=\"std-fieldlookup-iendswith\"></span><span id=\"std:fieldlookup-iendswith\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">iendswith</span></code><a class=\"headerlink\" href=\"#iendswith\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-insensitive ends-with.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__iendswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">ILIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%Lennon&#39;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">When using the SQLite backend and non-ASCII strings, bear in mind the\n<a class=\"reference internal\" href=\"../../databases/#sqlite-string-matching\"><span class=\"std std-ref\">database note</span></a> about string comparisons.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-range\">\n<span id=\"s-std-fieldlookup-range\"></span><span id=\"s-std:fieldlookup-range\"></span><span id=\"range\"></span><span id=\"std-fieldlookup-range\"></span><span id=\"std:fieldlookup-range\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code><a class=\"headerlink\" href=\"#range\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Range test (inclusive).</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"n\">start_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">end_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">start_date</span><span class=\"p\">,</span> <span class=\"n\">end_date</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"k\">BETWEEN</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-03-31&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code> anywhere you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">BETWEEN</span></code> in SQL \u2014 for dates,\nnumbers and even characters.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Filtering a <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code> with dates won\u2019t include items on the last\nday, because the bounds are interpreted as \u201c0am on the given date\u201d. If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> was a <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code>, the above expression would be turned\ninto this SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"k\">BETWEEN</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-01-01 00:00:00&#39;</span><span class=\"w\"> </span><span class=\"k\">and</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-03-31 00:00:00&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p class=\"last\">Generally speaking, you can\u2019t mix dates and datetimes.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-date\">\n<span id=\"s-std-fieldlookup-date\"></span><span id=\"s-std:fieldlookup-date\"></span><span id=\"date\"></span><span id=\"std-fieldlookup-date\"></span><span id=\"std:fieldlookup-date\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code><a class=\"headerlink\" href=\"#date\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For datetime fields, casts the value as date. Allows chaining additional field\nlookups. Takes a date value.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__date__gt</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>(No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, fields are converted to the current time\nzone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions in the\ndatabase</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-year\">\n<span id=\"s-std-fieldlookup-year\"></span><span id=\"s-std:fieldlookup-year\"></span><span id=\"year\"></span><span id=\"std-fieldlookup-year\"></span><span id=\"std:fieldlookup-year\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">year</span></code><a class=\"headerlink\" href=\"#year\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, an exact year match. Allows chaining additional\nfield lookups. Takes an integer year.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year__gte</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"k\">BETWEEN</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-12-31&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-iso-year\">\n<span id=\"s-std-fieldlookup-iso_year\"></span><span id=\"s-std:fieldlookup-iso_year\"></span><span id=\"iso-year\"></span><span id=\"std-fieldlookup-iso_year\"></span><span id=\"std:fieldlookup-iso_year\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">iso_year</span></code><a class=\"headerlink\" href=\"#iso-year\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, an exact ISO 8601 week-numbering year match.\nAllows chaining additional field lookups. Takes an integer year.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__iso_year</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__iso_year__gte</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-month\">\n<span id=\"s-std-fieldlookup-month\"></span><span id=\"s-std:fieldlookup-month\"></span><span id=\"month\"></span><span id=\"std-fieldlookup-month\"></span><span id=\"std:fieldlookup-month\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">month</span></code><a class=\"headerlink\" href=\"#month\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, an exact month match. Allows chaining additional\nfield lookups. Takes an integer 1 (January) through 12 (December).</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__month</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__month__gte</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;month&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;12&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;month&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;6&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-day\">\n<span id=\"s-std-fieldlookup-day\"></span><span id=\"s-std:fieldlookup-day\"></span><span id=\"day\"></span><span id=\"std-fieldlookup-day\"></span><span id=\"std:fieldlookup-day\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">day</span></code><a class=\"headerlink\" href=\"#day\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, an exact day match. Allows chaining additional\nfield lookups. Takes an integer day.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__day</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__day__gte</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;day&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;3&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;day&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;3&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>Note this will match any record with a pub_date on the third day of the month,\nsuch as January 3, July 3, etc.</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-week\">\n<span id=\"s-std-fieldlookup-week\"></span><span id=\"s-std:fieldlookup-week\"></span><span id=\"week\"></span><span id=\"std-fieldlookup-week\"></span><span id=\"std:fieldlookup-week\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">week</span></code><a class=\"headerlink\" href=\"#week\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, return the week number (1-52 or 53) according\nto <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/ISO-8601\">ISO-8601</a>, i.e., weeks start\non a Monday and the first week contains the year\u2019s first Thursday.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__week</span><span class=\"o\">=</span><span class=\"mi\">52</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__week__gte</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span> <span class=\"n\">pub_date__week__lte</span><span class=\"o\">=</span><span class=\"mi\">38</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-week-day\">\n<span id=\"s-std-fieldlookup-week_day\"></span><span id=\"s-std:fieldlookup-week_day\"></span><span id=\"week-day\"></span><span id=\"std-fieldlookup-week_day\"></span><span id=\"std:fieldlookup-week_day\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">week_day</span></code><a class=\"headerlink\" href=\"#week-day\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, a \u2018day of the week\u2019 match. Allows chaining\nadditional field lookups.</p>\n<p>Takes an integer value representing the day of week from 1 (Sunday) to 7\n(Saturday).</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__week_day</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__week_day__gte</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.)</p>\n<p>Note this will match any record with a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> that falls on a Monday (day\n2 of the week), regardless of the month or year in which it occurs. Week days\nare indexed with day 1 being Sunday and day 7 being Saturday.</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-iso-week-day\">\n<span id=\"s-std-fieldlookup-iso_week_day\"></span><span id=\"s-std:fieldlookup-iso_week_day\"></span><span id=\"iso-week-day\"></span><span id=\"std-fieldlookup-iso_week_day\"></span><span id=\"std:fieldlookup-iso_week_day\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">iso_week_day</span></code><a class=\"headerlink\" href=\"#iso-week-day\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, an exact ISO 8601 day of the week match. Allows\nchaining additional field lookups.</p>\n<p>Takes an integer value representing the day of the week from 1 (Monday) to 7\n(Sunday).</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__iso_week_day</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__iso_week_day__gte</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.)</p>\n<p>Note this will match any record with a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> that falls on a Monday (day\n1 of the week), regardless of the month or year in which it occurs. Week days\nare indexed with day 1 being Monday and day 7 being Sunday.</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-quarter\">\n<span id=\"s-std-fieldlookup-quarter\"></span><span id=\"s-std:fieldlookup-quarter\"></span><span id=\"quarter\"></span><span id=\"std-fieldlookup-quarter\"></span><span id=\"std:fieldlookup-quarter\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">quarter</span></code><a class=\"headerlink\" href=\"#quarter\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For date and datetime fields, a \u2018quarter of the year\u2019 match. Allows chaining\nadditional field lookups. Takes an integer value between 1 and 4 representing\nthe quarter of the year.</p>\n<p>Example to retrieve entries in the second quarter (April 1 to June 30):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__quarter</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-time\">\n<span id=\"s-std-fieldlookup-time\"></span><span id=\"s-std:fieldlookup-time\"></span><span id=\"time\"></span><span id=\"std-fieldlookup-time\"></span><span id=\"std:fieldlookup-time\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">time</span></code><a class=\"headerlink\" href=\"#time\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For datetime fields, casts the value as time. Allows chaining additional field\nlookups. Takes a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.time\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.time</span></code></a> value.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__time</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__time__range</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">17</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p>(No equivalent SQL code fragment is included for this lookup because\nimplementation of the relevant query varies among different database engines.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, fields are converted to the current time\nzone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions in the\ndatabase</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-hour\">\n<span id=\"s-std-fieldlookup-hour\"></span><span id=\"s-std:fieldlookup-hour\"></span><span id=\"hour\"></span><span id=\"std-fieldlookup-hour\"></span><span id=\"std:fieldlookup-hour\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">hour</span></code><a class=\"headerlink\" href=\"#hour\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For datetime and time fields, an exact hour match. Allows chaining additional\nfield lookups. Takes an integer between 0 and 23.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">timestamp__hour</span><span class=\"o\">=</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">time__hour</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">timestamp__hour__gte</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;hour&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;23&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;hour&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">time</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;5&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;hour&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;12&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-minute\">\n<span id=\"s-std-fieldlookup-minute\"></span><span id=\"s-std:fieldlookup-minute\"></span><span id=\"minute\"></span><span id=\"std-fieldlookup-minute\"></span><span id=\"std:fieldlookup-minute\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">minute</span></code><a class=\"headerlink\" href=\"#minute\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For datetime and time fields, an exact minute match. Allows chaining additional\nfield lookups. Takes an integer between 0 and 59.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">timestamp__minute</span><span class=\"o\">=</span><span class=\"mi\">29</span><span class=\"p\">)</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">time__minute</span><span class=\"o\">=</span><span class=\"mi\">46</span><span class=\"p\">)</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">timestamp__minute__gte</span><span class=\"o\">=</span><span class=\"mi\">29</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;minute&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;29&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;minute&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">time</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;46&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;minute&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;29&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-second\">\n<span id=\"s-std-fieldlookup-second\"></span><span id=\"s-std:fieldlookup-second\"></span><span id=\"second\"></span><span id=\"std-fieldlookup-second\"></span><span id=\"std:fieldlookup-second\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code><a class=\"headerlink\" href=\"#second\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For datetime and time fields, an exact second match. Allows chaining additional\nfield lookups. Takes an integer between 0 and 59.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">timestamp__second</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">time__second</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">timestamp__second__gte</span><span class=\"o\">=</span><span class=\"mi\">31</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;second&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;31&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;second&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">time</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;2&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"k\">EXTRACT</span><span class=\"p\">(</span><span class=\"s1\">&#39;second&#39;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;31&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>(The exact SQL syntax varies for each database engine.)</p>\n<p>When <a class=\"reference internal\" href=\"../../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, datetime fields are converted to the\ncurrent time zone before filtering. This requires <a class=\"reference internal\" href=\"#database-time-zone-definitions\"><span class=\"std std-ref\">time zone definitions\nin the database</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-isnull\">\n<span id=\"s-std-fieldlookup-isnull\"></span><span id=\"s-std:fieldlookup-isnull\"></span><span id=\"isnull\"></span><span id=\"std-fieldlookup-isnull\"></span><span id=\"std:fieldlookup-isnull\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">isnull</span></code><a class=\"headerlink\" href=\"#isnull\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Takes either <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, which correspond to SQL queries of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IS</span> <span class=\"pre\">NULL</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">IS</span> <span class=\"pre\">NOT</span> <span class=\"pre\">NULL</span></code>, respectively.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalent:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"k\">IS</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-regex\">\n<span id=\"s-std-fieldlookup-regex\"></span><span id=\"s-std:fieldlookup-regex\"></span><span id=\"regex\"></span><span id=\"std-fieldlookup-regex\"></span><span id=\"std:fieldlookup-regex\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">regex</span></code><a class=\"headerlink\" href=\"#regex\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-sensitive regular expression match.</p>\n<p>The regular expression syntax is that of the database backend in use.\nIn the case of SQLite, which has no built in regular expression support,\nthis feature is provided by a (Python) user-defined REGEXP function, and\nthe regular expression syntax is therefore that of Python\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">re</span></code> module.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title__regex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^(An?|The) +&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalents:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"n\">REGEXP</span><span class=\"w\"> </span><span class=\"nb\">BINARY</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(An?|The) +&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- MySQL</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">REGEXP_LIKE</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(An?|The) +&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;c&#39;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">-- Oracle</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">~</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(An?|The) +&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- PostgreSQL</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"n\">REGEXP</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(An?|The) +&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- SQLite</span>\n</pre></div>\n</div>\n<p>Using raw strings (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">r'foo'</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">'foo'</span></code>) for passing in the\nregular expression syntax is recommended.</p>\n</div>\n<div class=\"section\" id=\"s-iregex\">\n<span id=\"s-std-fieldlookup-iregex\"></span><span id=\"s-std:fieldlookup-iregex\"></span><span id=\"iregex\"></span><span id=\"std-fieldlookup-iregex\"></span><span id=\"std:fieldlookup-iregex\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">iregex</span></code><a class=\"headerlink\" href=\"#iregex\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Case-insensitive regular expression match.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">title__iregex</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^(an?|the) +&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>SQL equivalents:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"n\">REGEXP</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(an?|the) +&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- MySQL</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">REGEXP_LIKE</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(an?|the) +&#39;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"s1\">&#39;i&#39;</span><span class=\"p\">);</span><span class=\"w\"> </span><span class=\"c1\">-- Oracle</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"o\">~*</span><span class=\"w\"> </span><span class=\"s1\">&#39;^(an?|the) +&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- PostgreSQL</span>\n\n<span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">title</span><span class=\"w\"> </span><span class=\"n\">REGEXP</span><span class=\"w\"> </span><span class=\"s1\">&#39;(?i)^(an?|the) +&#39;</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"c1\">-- SQLite</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-aggregation-functions\">\n<span id=\"s-id6\"></span><span id=\"aggregation-functions\"></span><span id=\"id6\"></span><h3>Aggregation functions<a class=\"headerlink\" href=\"#aggregation-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django provides the following aggregation functions in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models</span></code> module. For details on how to use these\naggregate functions, see <a class=\"reference internal\" href=\"../../../topics/db/aggregation/\"><span class=\"doc\">the topic guide on aggregation</span></a>. See the <a class=\"reference internal\" href=\"../expressions/#django.db.models.Aggregate\" title=\"django.db.models.Aggregate\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Aggregate</span></code></a>\ndocumentation to learn how to create your aggregates.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">SQLite can\u2019t handle aggregation on date/time fields out of the box.\nThis is because there are no native date/time fields in SQLite and Django\ncurrently emulates these features using a text field. Attempts to use\naggregation on date/time fields in SQLite will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">NotSupportedError</span></code>.</p>\n</div>\n<div class=\"admonition-empty-queryset admonition\">\n<p class=\"first admonition-title\">Empty queryset</p>\n<p class=\"last\">Aggregation functions return <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> when used with an empty\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>. For example, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Sum</span></code> aggregation function returns <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>\ninstead of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> if the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> contains no entries. To return another\nvalue instead, pass a value to the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> argument. An exception is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Count</span></code>, which does return <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> if the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> is empty. <code class=\"docutils literal notranslate\"><span class=\"pre\">Count</span></code>\ndoes not support the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> argument.</p>\n</div>\n<p>All aggregates have the following parameters in common:</p>\n<div class=\"section\" id=\"s-expressions\">\n<span id=\"expressions\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code><a class=\"headerlink\" href=\"#expressions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Strings that reference fields on the model, transforms of the field, or\n<a class=\"reference internal\" href=\"../expressions/\"><span class=\"doc\">query expressions</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-output-field\">\n<span id=\"output-field\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code><a class=\"headerlink\" href=\"#output-field\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>An optional argument that represents the <a class=\"reference internal\" href=\"../fields/\"><span class=\"doc\">model field</span></a>\nof the return value</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When combining multiple field types, Django can only determine the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if all fields are of the same type. Otherwise, you\nmust provide the <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> yourself.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-aggregate-filter\">\n<span id=\"s-id7\"></span><span id=\"aggregate-filter\"></span><span id=\"id7\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">filter</span></code><a class=\"headerlink\" href=\"#aggregate-filter\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>An optional <a class=\"reference internal\" href=\"#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">object</span></code></a> that\u2019s used to filter the\nrows that are aggregated.</p>\n<p>See <a class=\"reference internal\" href=\"../conditional-expressions/#conditional-aggregation\"><span class=\"std std-ref\">Conditional aggregation</span></a> and <a class=\"reference internal\" href=\"../../../topics/db/aggregation/#filtering-on-annotations\"><span class=\"std std-ref\">Filtering on annotations</span></a> for\nexample usage.</p>\n</div>\n<div class=\"section\" id=\"s-default\">\n<span id=\"s-aggregate-default\"></span><span id=\"default\"></span><span id=\"aggregate-default\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code><a class=\"headerlink\" href=\"#default\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>An optional argument that allows specifying a value to use as a default value\nwhen the queryset (or grouping) contains no entries.</p>\n</div>\n<div class=\"section\" id=\"s-id8\">\n<span id=\"id8\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">**extra</span></code><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Keyword arguments that can provide extra context for the SQL generated\nby the aggregate.</p>\n</div>\n<div class=\"section\" id=\"s-avg\">\n<span id=\"avg\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Avg</span></code><a class=\"headerlink\" href=\"#avg\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Avg\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Avg</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">distinct</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Avg\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Avg\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the mean value of the given expression, which must be numeric\nunless you specify a different <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code>.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__avg</span></code></li>\n<li>Return type: <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code> if input is <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, otherwise same as input\nfield, or <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if supplied</li>\n</ul>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Avg.distinct\">\n<code class=\"sig-name descname\"><span class=\"pre\">distinct</span></code><a class=\"headerlink\" href=\"#django.db.models.Avg.distinct\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. If <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct=True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Avg</span></code> returns the mean value of\nunique values. This is the SQL equivalent of <code class=\"docutils literal notranslate\"><span class=\"pre\">AVG(DISTINCT</span> <span class=\"pre\">&lt;field&gt;)</span></code>.\nThe default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-id9\">\n<span id=\"id9\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Count</span></code><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Count\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Count</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">distinct</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Count\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Count\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the number of objects that are related through the provided\nexpression. <code class=\"docutils literal notranslate\"><span class=\"pre\">Count('*')</span></code> is equivalent to the SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">COUNT(*)</span></code>\nexpression.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__count</span></code></li>\n<li>Return type: <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code></li>\n</ul>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Count.distinct\">\n<code class=\"sig-name descname\"><span class=\"pre\">distinct</span></code><a class=\"headerlink\" href=\"#django.db.models.Count.distinct\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. If <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct=True</span></code>, the count will only include unique\ninstances. This is the SQL equivalent of <code class=\"docutils literal notranslate\"><span class=\"pre\">COUNT(DISTINCT</span> <span class=\"pre\">&lt;field&gt;)</span></code>.\nThe default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> argument is not supported.</p>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-max\">\n<span id=\"max\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Max</span></code><a class=\"headerlink\" href=\"#max\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Max\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Max</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Max\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Max\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the maximum value of the given expression.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__max</span></code></li>\n<li>Return type: same as input field, or <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if supplied</li>\n</ul>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-min\">\n<span id=\"min\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Min</span></code><a class=\"headerlink\" href=\"#min\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Min\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Min</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Min\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Min\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the minimum value of the given expression.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__min</span></code></li>\n<li>Return type: same as input field, or <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if supplied</li>\n</ul>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-stddev\">\n<span id=\"stddev\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">StdDev</span></code><a class=\"headerlink\" href=\"#stddev\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.StdDev\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">StdDev</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">sample</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#StdDev\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.StdDev\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the standard deviation of the data in the provided expression.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__stddev</span></code></li>\n<li>Return type: <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code> if input is <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, otherwise same as input\nfield, or <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if supplied</li>\n</ul>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.StdDev.sample\">\n<code class=\"sig-name descname\"><span class=\"pre\">sample</span></code><a class=\"headerlink\" href=\"#django.db.models.StdDev.sample\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">StdDev</span></code> returns the population standard\ndeviation. However, if <code class=\"docutils literal notranslate\"><span class=\"pre\">sample=True</span></code>, the return value will be the\nsample standard deviation.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-sum\">\n<span id=\"sum\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Sum</span></code><a class=\"headerlink\" href=\"#sum\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Sum\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Sum</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">distinct</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Sum\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Sum\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Computes the sum of all values of the given expression.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__sum</span></code></li>\n<li>Return type: same as input field, or <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if supplied</li>\n</ul>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Sum.distinct\">\n<code class=\"sig-name descname\"><span class=\"pre\">distinct</span></code><a class=\"headerlink\" href=\"#django.db.models.Sum.distinct\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. If <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct=True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Sum</span></code> returns the sum of unique\nvalues. This is the SQL equivalent of <code class=\"docutils literal notranslate\"><span class=\"pre\">SUM(DISTINCT</span> <span class=\"pre\">&lt;field&gt;)</span></code>. The\ndefault value is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-variance\">\n<span id=\"variance\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Variance</span></code><a class=\"headerlink\" href=\"#variance\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Variance\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Variance</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">sample</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Variance\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Variance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the variance of the data in the provided expression.</p>\n<ul class=\"simple\">\n<li>Default alias: <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;field&gt;__variance</span></code></li>\n<li>Return type: <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code> if input is <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, otherwise same as input\nfield, or <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> if supplied</li>\n</ul>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Variance.sample\">\n<code class=\"sig-name descname\"><span class=\"pre\">sample</span></code><a class=\"headerlink\" href=\"#django.db.models.Variance.sample\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">Variance</span></code> returns the population variance.\nHowever, if <code class=\"docutils literal notranslate\"><span class=\"pre\">sample=True</span></code>, the return value will be the sample\nvariance.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-query-related-tools\">\n<span id=\"query-related-tools\"></span><h2>Query-related tools<a class=\"headerlink\" href=\"#query-related-tools\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This section provides reference material for query-related tools not documented\nelsewhere.</p>\n<div class=\"section\" id=\"s-q-objects\">\n<span id=\"q-objects\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Q()</span></code> objects<a class=\"headerlink\" href=\"#q-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Q\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Q</span></code><a class=\"reference internal\" href=\"../../../_modules/django/db/models/query_utils/#Q\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Q\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Q()</span></code> object represents an SQL condition that can be used in\ndatabase-related operations. It\u2019s similar to how an\n<a class=\"reference internal\" href=\"../expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F()</span></code></a> object represents the value of a model field\nor annotation. They make it possible to define and reuse conditions, and\ncombine them using operators such as <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code>), <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">AND</span></code>), and <code class=\"docutils literal notranslate\"><span class=\"pre\">^</span></code>\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code>). See <a class=\"reference internal\" href=\"../../../topics/db/queries/#complex-lookups-with-q\"><span class=\"std std-ref\">Complex lookups with Q objects</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-prefetch-objects\">\n<span id=\"prefetch-objects\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch()</span></code> objects<a class=\"headerlink\" href=\"#prefetch-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Prefetch\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Prefetch</span></code>(<em><span class=\"n\"><span class=\"pre\">lookup</span></span></em>, <em><span class=\"n\"><span class=\"pre\">queryset</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">to_attr</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/query/#Prefetch\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Prefetch\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch()</span></code> object can be used to control the operation of\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup</span></code> argument describes the relations to follow and works the same\nas the string based lookups passed to\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a>. For example:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Prefetch</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;choice_set&#39;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span>\n<span class=\"go\"># This will only execute two queries regardless of the number of Question</span>\n<span class=\"go\"># and Choice objects.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;choice_set&#39;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> argument supplies a base <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> for the given lookup.\nThis is useful to further filter down the prefetch operation, or to call\n<a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> from the prefetched\nrelation, hence reducing the number of queries even further:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">voted_choices</span> <span class=\"o\">=</span> <span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">votes__gt</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">voted_choices</span>\n<span class=\"go\">&lt;QuerySet [&lt;Choice: The sky&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prefetch</span> <span class=\"o\">=</span> <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;choice_set&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">voted_choices</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">prefetch</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Choice: The sky&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">to_attr</span></code> argument sets the result of the prefetch operation to a custom\nattribute:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prefetch</span> <span class=\"o\">=</span> <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s1\">&#39;choice_set&#39;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">voted_choices</span><span class=\"p\">,</span> <span class=\"n\">to_attr</span><span class=\"o\">=</span><span class=\"s1\">&#39;voted_choices&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">prefetch</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">voted_choices</span>\n<span class=\"go\">[&lt;Choice: The sky&gt;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">prefetch</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When using <code class=\"docutils literal notranslate\"><span class=\"pre\">to_attr</span></code> the prefetched result is stored in a list. This can\nprovide a significant speed improvement over traditional\n<code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> calls which store the cached result within a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> instance.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-prefetch-related-objects\">\n<span id=\"prefetch-related-objects\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related_objects()</span></code><a class=\"headerlink\" href=\"#prefetch-related-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.prefetch_related_objects\">\n<code class=\"sig-name descname\"><span class=\"pre\">prefetch_related_objects</span></code>(<em><span class=\"n\"><span class=\"pre\">model_instances</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">related_lookups</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/query/#prefetch_related_objects\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.prefetch_related_objects\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Prefetches the given lookups on an iterable of model instances. This is useful\nin code that receives a list of model instances as opposed to a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>;\nfor example, when fetching models from a cache or instantiating them manually.</p>\n<p>Pass an iterable of model instances (must all be of the same class) and the\nlookups or <a class=\"reference internal\" href=\"#django.db.models.Prefetch\" title=\"django.db.models.Prefetch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code></a> objects you want to prefetch for. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">prefetch_related_objects</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">restaurants</span> <span class=\"o\">=</span> <span class=\"n\">fetch_top_restaurants_from_cache</span><span class=\"p\">()</span>  <span class=\"c1\"># A list of Restaurants</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">prefetch_related_objects</span><span class=\"p\">(</span><span class=\"n\">restaurants</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pizzas__toppings&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>When using multiple databases with <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related_objects</span></code>, the prefetch\nquery will use the database associated with the model instance. This can be\noverridden by using a custom queryset in a related lookup.</p>\n</div>\n<div class=\"section\" id=\"s-filteredrelation-objects\">\n<span id=\"filteredrelation-objects\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">FilteredRelation()</span></code> objects<a class=\"headerlink\" href=\"#filteredrelation-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.FilteredRelation\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">FilteredRelation</span></code>(<em><span class=\"n\"><span class=\"pre\">relation_name</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">condition</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">Q()</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/query_utils/#FilteredRelation\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.FilteredRelation\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.FilteredRelation.relation_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">relation_name</span></code><a class=\"headerlink\" href=\"#django.db.models.FilteredRelation.relation_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The name of the field on which you\u2019d like to filter the relation.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.FilteredRelation.condition\">\n<code class=\"sig-name descname\"><span class=\"pre\">condition</span></code><a class=\"headerlink\" href=\"#django.db.models.FilteredRelation.condition\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A <a class=\"reference internal\" href=\"#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span></code></a> object to control the filtering.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">FilteredRelation</span></code> is used with <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a> to create an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ON</span></code> clause when a <code class=\"docutils literal notranslate\"><span class=\"pre\">JOIN</span></code> is performed. It doesn\u2019t act on the default\nrelationship but on the annotation name (<code class=\"docutils literal notranslate\"><span class=\"pre\">pizzas_vegetarian</span></code> in example\nbelow).</p>\n<p>For example, to find restaurants that have vegetarian pizzas with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'mozzarella'</span></code> in the name:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">FilteredRelation</span><span class=\"p\">,</span> <span class=\"n\">Q</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pizzas_vegetarian</span><span class=\"o\">=</span><span class=\"n\">FilteredRelation</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;pizzas&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pizzas__vegetarian</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pizzas_vegetarian__name__icontains</span><span class=\"o\">=</span><span class=\"s2\">&quot;mozzarella&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If there are a large number of pizzas, this queryset performs better than:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pizzas__vegetarian</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pizzas__name__icontains</span><span class=\"o\">=</span><span class=\"s2\">&quot;mozzarella&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>because the filtering in the <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause of the first queryset will only\noperate on vegetarian pizzas.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">FilteredRelation</span></code> doesn\u2019t support:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.only()</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a>.</li>\n<li>A <a class=\"reference internal\" href=\"../../contrib/contenttypes/#django.contrib.contenttypes.fields.GenericForeignKey\" title=\"django.contrib.contenttypes.fields.GenericForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code></a>\ninherited from a parent model.</li>\n</ul>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/models/lookups", "Lookup API reference", "N", "next"], ["ref/models/instances", "Model instance reference", "P", "previous"]], "sourcename": "ref/models/querysets.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference</a><ul>\n<li><a class=\"reference internal\" href=\"#when-querysets-are-evaluated\">When <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are evaluated</a><ul>\n<li><a class=\"reference internal\" href=\"#pickling-querysets\">Pickling <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#queryset-api\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API</a><ul>\n<li><a class=\"reference internal\" href=\"#methods-that-return-new-querysets\">Methods that return new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a><ul>\n<li><a class=\"reference internal\" href=\"#filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#exclude\"><code class=\"docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#annotate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#alias\"><code class=\"docutils literal notranslate\"><span class=\"pre\">alias()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#order-by\"><code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reverse\"><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#distinct\"><code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#values\"><code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#values-list\"><code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#dates\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dates()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#datetimes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">datetimes()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#none\"><code class=\"docutils literal notranslate\"><span class=\"pre\">none()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#all\"><code class=\"docutils literal notranslate\"><span class=\"pre\">all()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#union\"><code class=\"docutils literal notranslate\"><span class=\"pre\">union()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#intersection\"><code class=\"docutils literal notranslate\"><span class=\"pre\">intersection()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#difference\"><code class=\"docutils literal notranslate\"><span class=\"pre\">difference()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#select-related\"><code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#prefetch-related\"><code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#extra\"><code class=\"docutils literal notranslate\"><span class=\"pre\">extra()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#defer\"><code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#only\"><code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using\"><code class=\"docutils literal notranslate\"><span class=\"pre\">using()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#select-for-update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#raw\"><code class=\"docutils literal notranslate\"><span class=\"pre\">raw()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#operators-that-return-new-querysets\">Operators that return new <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a><ul>\n<li><a class=\"reference internal\" href=\"#and\">AND (<code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>)</a></li>\n<li><a class=\"reference internal\" href=\"#or\">OR (<code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>)</a></li>\n<li><a class=\"reference internal\" href=\"#xor\">XOR (<code class=\"docutils literal notranslate\"><span class=\"pre\">^</span></code>)</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#methods-that-do-not-return-querysets\">Methods that do not return <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a><ul>\n<li><a class=\"reference internal\" href=\"#get\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#create\"><code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-or-create\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#update-or-create\"><code class=\"docutils literal notranslate\"><span class=\"pre\">update_or_create()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bulk-create\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bulk_create()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bulk-update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">bulk_update()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#count\"><code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#in-bulk\"><code class=\"docutils literal notranslate\"><span class=\"pre\">in_bulk()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iterator\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iterator()</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#with-server-side-cursors\">With server-side cursors</a></li>\n<li><a class=\"reference internal\" href=\"#without-server-side-cursors\">Without server-side cursors</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#latest\"><code class=\"docutils literal notranslate\"><span class=\"pre\">latest()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#earliest\"><code class=\"docutils literal notranslate\"><span class=\"pre\">earliest()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">first()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">last()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#aggregate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">aggregate()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#exists\"><code class=\"docutils literal notranslate\"><span class=\"pre\">exists()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#contains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#update\"><code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#ordered-queryset\">Ordered queryset</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#delete\"><code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#as-manager\"><code class=\"docutils literal notranslate\"><span class=\"pre\">as_manager()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#explain\"><code class=\"docutils literal notranslate\"><span class=\"pre\">explain()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#field-lookups\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> lookups</a><ul>\n<li><a class=\"reference internal\" href=\"#exact\"><code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iexact\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#std-fieldlookup-contains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#icontains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">icontains</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#in\"><code class=\"docutils literal notranslate\"><span class=\"pre\">in</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gte\"><code class=\"docutils literal notranslate\"><span class=\"pre\">gte</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lte\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lte</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#startswith\"><code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#istartswith\"><code class=\"docutils literal notranslate\"><span class=\"pre\">istartswith</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#endswith\"><code class=\"docutils literal notranslate\"><span class=\"pre\">endswith</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iendswith\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iendswith</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#range\"><code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#date\"><code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#year\"><code class=\"docutils literal notranslate\"><span class=\"pre\">year</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iso-year\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iso_year</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#month\"><code class=\"docutils literal notranslate\"><span class=\"pre\">month</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#day\"><code class=\"docutils literal notranslate\"><span class=\"pre\">day</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#week\"><code class=\"docutils literal notranslate\"><span class=\"pre\">week</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#week-day\"><code class=\"docutils literal notranslate\"><span class=\"pre\">week_day</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iso-week-day\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iso_week_day</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#quarter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">quarter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#time\"><code class=\"docutils literal notranslate\"><span class=\"pre\">time</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#hour\"><code class=\"docutils literal notranslate\"><span class=\"pre\">hour</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#minute\"><code class=\"docutils literal notranslate\"><span class=\"pre\">minute</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#second\"><code class=\"docutils literal notranslate\"><span class=\"pre\">second</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#isnull\"><code class=\"docutils literal notranslate\"><span class=\"pre\">isnull</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#regex\"><code class=\"docutils literal notranslate\"><span class=\"pre\">regex</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#iregex\"><code class=\"docutils literal notranslate\"><span class=\"pre\">iregex</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#aggregation-functions\">Aggregation functions</a><ul>\n<li><a class=\"reference internal\" href=\"#expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#output-field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#aggregate-filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">filter</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#default\"><code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id8\"><code class=\"docutils literal notranslate\"><span class=\"pre\">**extra</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#avg\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Avg</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id9\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Count</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#max\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Max</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#min\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Min</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#stddev\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StdDev</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#sum\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Sum</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#variance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Variance</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#query-related-tools\">Query-related tools</a><ul>\n<li><a class=\"reference internal\" href=\"#q-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Q()</span></code> objects</a></li>\n<li><a class=\"reference internal\" href=\"#prefetch-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch()</span></code> objects</a></li>\n<li><a class=\"reference internal\" href=\"#prefetch-related-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related_objects()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#filteredrelation-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FilteredRelation()</span></code> objects</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/models/querysets", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
