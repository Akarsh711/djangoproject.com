{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Models"}], "prev": {"link": "../options/", "title": "Model <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> options"}, "next": {"link": "../querysets/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference"}, "title": "Model instance reference", "meta": {}, "body": "<div class=\"section\" id=\"s-model-instance-reference\">\n<span id=\"model-instance-reference\"></span><h1>Model instance reference<a class=\"headerlink\" href=\"#model-instance-reference\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document describes the details of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> API. It builds on the\nmaterial presented in the <a class=\"reference internal\" href=\"../../../topics/db/models/\"><span class=\"doc\">model</span></a> and <a class=\"reference internal\" href=\"../../../topics/db/queries/\"><span class=\"doc\">database\nquery</span></a> guides, so you\u2019ll probably want to read and\nunderstand those documents before reading this one.</p>\n<p>Throughout this reference we\u2019ll use the <a class=\"reference internal\" href=\"../../../topics/db/queries/#queryset-model-example\"><span class=\"std std-ref\">example blog models</span></a> presented in the <a class=\"reference internal\" href=\"../../../topics/db/queries/\"><span class=\"doc\">database query guide</span></a>.</p>\n<div class=\"section\" id=\"s-creating-objects\">\n<span id=\"creating-objects\"></span><h2>Creating objects<a class=\"headerlink\" href=\"#creating-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To create a new instance of a model, instantiate it like any other Python\nclass:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Model</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The keyword arguments are the names of the fields you\u2019ve defined on your model.\nNote that instantiating a model in no way touches your database; for that, you\nneed to <a class=\"reference internal\" href=\"#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>You may be tempted to customize the model by overriding the <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>\nmethod. If you do so, however, take care not to change the calling\nsignature as any change may prevent the model instance from being saved.\nRather than overriding <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>, try using one of these approaches:</p>\n<ol class=\"last arabic\">\n<li><p class=\"first\">Add a classmethod on the model class:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">)</span>\n        <span class=\"c1\"># do something with the book</span>\n        <span class=\"k\">return</span> <span class=\"n\">book</span>\n\n\n<span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s2\">&quot;Pride and Prejudice&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Add a method on a custom manager (usually preferred):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">BookManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_book</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">):</span>\n        <span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">title</span><span class=\"o\">=</span><span class=\"n\">title</span><span class=\"p\">)</span>\n        <span class=\"c1\"># do something with the book</span>\n        <span class=\"k\">return</span> <span class=\"n\">book</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">BookManager</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create_book</span><span class=\"p\">(</span><span class=\"s2\">&quot;Pride and Prejudice&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-customizing-model-loading\">\n<span id=\"customizing-model-loading\"></span><h3>Customizing model loading<a class=\"headerlink\" href=\"#customizing-model-loading\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.from_db\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">from_db</span></code>(<em><span class=\"n\"><span class=\"pre\">db</span></span></em>, <em><span class=\"n\"><span class=\"pre\">field_names</span></span></em>, <em><span class=\"n\"><span class=\"pre\">values</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.from_db\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.from_db\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">from_db()</span></code> method can be used to customize model instance creation\nwhen loading from the database.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">db</span></code> argument contains the database alias for the database the model\nis loaded from, <code class=\"docutils literal notranslate\"><span class=\"pre\">field_names</span></code> contains the names of all loaded fields, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code> contains the loaded values for each field in <code class=\"docutils literal notranslate\"><span class=\"pre\">field_names</span></code>. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">field_names</span></code> are in the same order as the <code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code>. If all of the model\u2019s\nfields are present, then <code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code> are guaranteed to be in the order\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> expects them. That is, the instance can be created by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cls(*values)</span></code>. If any fields are deferred, they won\u2019t appear in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">field_names</span></code>. In that case, assign a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.DEFERRED</span></code>\nto each of the missing fields.</p>\n<p>In addition to creating the new model, the <code class=\"docutils literal notranslate\"><span class=\"pre\">from_db()</span></code> method must set the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">adding</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">db</span></code> flags in the new instance\u2019s <a class=\"reference internal\" href=\"#django.db.models.Model._state\" title=\"django.db.models.Model._state\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">_state</span></code></a> attribute.</p>\n<p>Below is an example showing how to record the initial values of fields that\nare loaded from the database:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">DEFERRED</span>\n\n\n<span class=\"nd\">@classmethod</span>\n<span class=\"k\">def</span> <span class=\"nf\">from_db</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">field_names</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Default implementation of from_db() (subject to change and could</span>\n    <span class=\"c1\"># be replaced with super()).</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">concrete_fields</span><span class=\"p\">):</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span>\n        <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">attname</span> <span class=\"ow\">in</span> <span class=\"n\">field_names</span> <span class=\"k\">else</span> <span class=\"n\">DEFERRED</span>\n            <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"bp\">cls</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">concrete_fields</span>\n        <span class=\"p\">]</span>\n    <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"bp\">cls</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">values</span><span class=\"p\">)</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">db</span>\n    <span class=\"c1\"># customization to store the original field values on the instance</span>\n    <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_loaded_values</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n        <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">field_names</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">values</span> <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">DEFERRED</span><span class=\"p\">))</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">instance</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check how the current values differ from ._loaded_values. For example,</span>\n    <span class=\"c1\"># prevent changing the creator_id of the model. (This example doesn&#39;t</span>\n    <span class=\"c1\"># support cases where &#39;creator_id&#39; is deferred).</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">adding</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">creator_id</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_loaded_values</span><span class=\"p\">[</span><span class=\"s2\">&quot;creator_id&quot;</span><span class=\"p\">]</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updating the value of creator isn&#39;t allowed&quot;</span><span class=\"p\">)</span>\n    <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The example above shows a full <code class=\"docutils literal notranslate\"><span class=\"pre\">from_db()</span></code> implementation to clarify how that\nis done. In this case it would be possible to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> call in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">from_db()</span></code> method.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-refreshing-objects-from-database\">\n<span id=\"refreshing-objects-from-database\"></span><h2>Refreshing objects from database<a class=\"headerlink\" href=\"#refreshing-objects-from-database\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you delete a field from a model instance, accessing it again reloads the\nvalue from the database:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">del</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">field</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">field</span>  <span class=\"c1\"># Loads the field from the database</span>\n</pre></div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.refresh_from_db\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">refresh_from_db</span></code>(<em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.refresh_from_db\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.refresh_from_db\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.arefresh_from_db\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">arefresh_from_db</span></code>(<em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.arefresh_from_db\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.arefresh_from_db\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">arefresh_from_db()</span></code></p>\n<p>If you need to reload a model\u2019s values from the database, you can use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">refresh_from_db()</span></code> method. When this method is called without arguments the\nfollowing is done:</p>\n<ol class=\"arabic simple\">\n<li>All non-deferred fields of the model are updated to the values currently\npresent in the database.</li>\n<li>Any cached relations are cleared from the reloaded instance.</li>\n</ol>\n<p>Only fields of the model are reloaded from the database. Other\ndatabase-dependent values such as annotations aren\u2019t reloaded. Any\n<a class=\"reference internal\" href=\"../../utils/#django.utils.functional.cached_property\" title=\"django.utils.functional.cached_property\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;cached_property</span></code></a> attributes\naren\u2019t cleared either.</p>\n<p>The reloading happens from the database the instance was loaded from, or from\nthe default database if the instance wasn\u2019t loaded from the database. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code> argument can be used to force the database used for reloading.</p>\n<p>It is possible to force the set of fields to be loaded by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code>\nargument.</p>\n<p>For example, to test that an <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> call resulted in the expected\nupdate, you could write a test similar to this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">test_update_result</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;val&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"c1\"># At this point obj.val is still 1, but the value in the database</span>\n    <span class=\"c1\"># was updated to 2. The object&#39;s updated value needs to be reloaded</span>\n    <span class=\"c1\"># from the database.</span>\n    <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">refresh_from_db</span><span class=\"p\">()</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">val</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note that when deferred fields are accessed, the loading of the deferred\nfield\u2019s value happens through this method. Thus it is possible to customize\nthe way deferred loading happens. The example below shows how one can reload\nall of the instance\u2019s fields when a deferred field is reloaded:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ExampleModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">refresh_from_db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># fields contains the name of the deferred field to be</span>\n        <span class=\"c1\"># loaded.</span>\n        <span class=\"k\">if</span> <span class=\"n\">fields</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">)</span>\n            <span class=\"n\">deferred_fields</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_deferred_fields</span><span class=\"p\">()</span>\n            <span class=\"c1\"># If any deferred field is going to be loaded</span>\n            <span class=\"k\">if</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">intersection</span><span class=\"p\">(</span><span class=\"n\">deferred_fields</span><span class=\"p\">):</span>\n                <span class=\"c1\"># then load all of them</span>\n                <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">deferred_fields</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">refresh_from_db</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.get_deferred_fields\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_deferred_fields</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.get_deferred_fields\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.get_deferred_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A helper method that returns a set containing the attribute names of all those\nfields that are currently deferred for this model.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">arefresh_from_db()</span></code> method was added.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-validating-objects\">\n<span id=\"s-id1\"></span><span id=\"validating-objects\"></span><span id=\"id1\"></span><h2>Validating objects<a class=\"headerlink\" href=\"#validating-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are four steps involved in validating a model:</p>\n<ol class=\"arabic simple\">\n<li>Validate the model fields - <a class=\"reference internal\" href=\"#django.db.models.Model.clean_fields\" title=\"django.db.models.Model.clean_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.clean_fields()</span></code></a></li>\n<li>Validate the model as a whole - <a class=\"reference internal\" href=\"#django.db.models.Model.clean\" title=\"django.db.models.Model.clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.clean()</span></code></a></li>\n<li>Validate the field uniqueness - <a class=\"reference internal\" href=\"#django.db.models.Model.validate_unique\" title=\"django.db.models.Model.validate_unique\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.validate_unique()</span></code></a></li>\n<li>Validate the constraints - <a class=\"reference internal\" href=\"#django.db.models.Model.validate_constraints\" title=\"django.db.models.Model.validate_constraints\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.validate_constraints()</span></code></a></li>\n</ol>\n<p>All four steps are performed when you call a model\u2019s <a class=\"reference internal\" href=\"#django.db.models.Model.full_clean\" title=\"django.db.models.Model.full_clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code></a>\nmethod.</p>\n<p>When you use a <a class=\"reference internal\" href=\"../../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a>, the call to\n<a class=\"reference internal\" href=\"../../forms/api/#django.forms.Form.is_valid\" title=\"django.forms.Form.is_valid\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code></a> will perform these validation steps for\nall the fields that are included on the form. See the <a class=\"reference internal\" href=\"../../../topics/forms/modelforms/\"><span class=\"doc\">ModelForm\ndocumentation</span></a> for more information. You should only\nneed to call a model\u2019s <a class=\"reference internal\" href=\"#django.db.models.Model.full_clean\" title=\"django.db.models.Model.full_clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code></a> method if you plan to handle\nvalidation errors yourself, or if you have excluded fields from the\n<a class=\"reference internal\" href=\"../../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a> that require validation.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Constraints containing <a class=\"reference internal\" href=\"../fields/#django.db.models.JSONField\" title=\"django.db.models.JSONField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a> may not raise\nvalidation errors as key, index, and path transforms have many\ndatabase-specific caveats. This <a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/34059\">may be fully supported later</a>.</p>\n<p class=\"last\">You should always check that there are no log messages, in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models</span></code> logger, like <em>\u201cGot a database error calling check() on\n\u2026\u201d</em> to confirm it\u2019s validated properly.</p>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.full_clean\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">full_clean</span></code>(<em><span class=\"n\"><span class=\"pre\">exclude</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">validate_unique</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">validate_constraints</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.full_clean\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.full_clean\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method calls <a class=\"reference internal\" href=\"#django.db.models.Model.clean_fields\" title=\"django.db.models.Model.clean_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.clean_fields()</span></code></a>, <a class=\"reference internal\" href=\"#django.db.models.Model.clean\" title=\"django.db.models.Model.clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.clean()</span></code></a>,\n<a class=\"reference internal\" href=\"#django.db.models.Model.validate_unique\" title=\"django.db.models.Model.validate_unique\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.validate_unique()</span></code></a> (if <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_unique</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>),  and\n<a class=\"reference internal\" href=\"#django.db.models.Model.validate_constraints\" title=\"django.db.models.Model.validate_constraints\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.validate_constraints()</span></code></a> (if <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_constraints</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>)\nin that order and raises a <a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> that\nhas a <code class=\"docutils literal notranslate\"><span class=\"pre\">message_dict</span></code> attribute containing errors from all four stages.</p>\n<p>The optional <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code> argument can be used to provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span></code> of field\nnames that can be excluded from validation and cleaning.\n<a class=\"reference internal\" href=\"../../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a> uses this argument to exclude fields that\naren\u2019t present on your form from being validated since any errors raised could\nnot be corrected by the user.</p>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code> will <em>not</em> be called automatically when you call\nyour model\u2019s <a class=\"reference internal\" href=\"#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method. You\u2019ll need to call it manually\nwhen you want to run one-step model validation for your own manually created\nmodels. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">full_clean</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Do something based on the errors contained in e.message_dict.</span>\n    <span class=\"c1\"># Display them to a user, or handle them programmatically.</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>The first step <code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code> performs is to clean each individual field.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.clean_fields\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">clean_fields</span></code>(<em><span class=\"n\"><span class=\"pre\">exclude</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.clean_fields\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.clean_fields\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method will validate all fields on your model. The optional <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code>\nargument lets you provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span></code> of field names to exclude from validation.\nIt will raise a <a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> if any fields\nfail validation.</p>\n<p>The second step <code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code> performs is to call <a class=\"reference internal\" href=\"#django.db.models.Model.clean\" title=\"django.db.models.Model.clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.clean()</span></code></a>.\nThis method should be overridden to perform custom validation on your model.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.clean\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">clean</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.clean\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.clean\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method should be used to provide custom model validation, and to modify\nattributes on your model if desired. For instance, you could use it to\nautomatically provide a value for a field, or to do validation that requires\naccess to more than a single field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext_lazy</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Don&#39;t allow draft entries to have a pub_date.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;draft&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Draft entries may not have a publication date.&quot;</span><span class=\"p\">))</span>\n        <span class=\"c1\"># Set the pub_date for published items if it hasn&#39;t been set already.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;published&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Note, however, that like <a class=\"reference internal\" href=\"#django.db.models.Model.full_clean\" title=\"django.db.models.Model.full_clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.full_clean()</span></code></a>, a model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">clean()</span></code>\nmethod is not invoked when you call your model\u2019s <a class=\"reference internal\" href=\"#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method.</p>\n<p>In the above example, the <a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a>\nexception raised by <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.clean()</span></code> was instantiated with a string, so it\nwill be stored in a special error dictionary key,\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.NON_FIELD_ERRORS\" title=\"django.core.exceptions.NON_FIELD_ERRORS\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">NON_FIELD_ERRORS</span></code></a>. This key is used for errors\nthat are tied to the entire model instead of to a specific field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">NON_FIELD_ERRORS</span><span class=\"p\">,</span> <span class=\"n\">ValidationError</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">article</span><span class=\"o\">.</span><span class=\"n\">full_clean</span><span class=\"p\">()</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">non_field_errors</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">message_dict</span><span class=\"p\">[</span><span class=\"n\">NON_FIELD_ERRORS</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>To assign exceptions to a specific field, instantiate the\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> with a dictionary, where the\nkeys are the field names. We could update the previous example to assign the\nerror to the <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Don&#39;t allow draft entries to have a pub_date.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;draft&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n                <span class=\"p\">{</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Draft entries may not have a publication date.&quot;</span><span class=\"p\">)}</span>\n            <span class=\"p\">)</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>If you detect errors in multiple fields during <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.clean()</span></code>, you can also\npass a dictionary mapping field names to errors:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Missing title.&quot;</span><span class=\"p\">),</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">&quot;required&quot;</span><span class=\"p\">),</span>\n        <span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">:</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid date.&quot;</span><span class=\"p\">),</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s2\">&quot;invalid&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Then, <code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code> will check unique constraints on your model.</p>\n<div class=\"admonition-how-to-raise-field-specific-validation-errors-if-those-fields-don-t-appear-in-a-modelform admonition\">\n<p class=\"first admonition-title\">How to raise field-specific validation errors if those fields don\u2019t appear in a <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></p>\n<p>You can\u2019t raise validation errors in <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.clean()</span></code> for fields that\ndon\u2019t appear in a model form (a form may limit its fields using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.fields</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.exclude</span></code>). Doing so will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code>\nbecause the validation error won\u2019t be able to be associated with the\nexcluded field.</p>\n<p>To work around this dilemma, instead override <a class=\"reference internal\" href=\"#django.db.models.Model.clean_fields\" title=\"django.db.models.Model.clean_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.clean_fields()</span></code></a> as it receives the list of fields\nthat are excluded from validation. For example:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">clean_fields</span><span class=\"p\">(</span><span class=\"n\">exclude</span><span class=\"o\">=</span><span class=\"n\">exclude</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;draft&quot;</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">exclude</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;status&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">exclude</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n                    <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;Draft entries may not have a publication date.&quot;</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Set status to draft if there is not a &quot;</span> <span class=\"s2\">&quot;publication date.&quot;</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.validate_unique\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">validate_unique</span></code>(<em><span class=\"n\"><span class=\"pre\">exclude</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.validate_unique\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.validate_unique\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method is similar to <a class=\"reference internal\" href=\"#django.db.models.Model.clean_fields\" title=\"django.db.models.Model.clean_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">clean_fields()</span></code></a>, but validates\nuniqueness constraints defined via <a class=\"reference internal\" href=\"../fields/#django.db.models.Field.unique\" title=\"django.db.models.Field.unique\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.unique</span></code></a>,\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.unique_for_date\" title=\"django.db.models.Field.unique_for_date\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.unique_for_date</span></code></a>, <a class=\"reference internal\" href=\"../fields/#django.db.models.Field.unique_for_month\" title=\"django.db.models.Field.unique_for_month\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.unique_for_month</span></code></a>,\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.unique_for_year\" title=\"django.db.models.Field.unique_for_year\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.unique_for_year</span></code></a>, or <a class=\"reference internal\" href=\"../options/#django.db.models.Options.unique_together\" title=\"django.db.models.Options.unique_together\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.unique_together</span></code></a> on your model instead of individual\nfield values. The optional <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code> argument allows you to provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span></code>\nof field names to exclude from validation. It will raise a\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> if any fields fail validation.</p>\n<p><a class=\"reference internal\" href=\"../constraints/#django.db.models.UniqueConstraint\" title=\"django.db.models.UniqueConstraint\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UniqueConstraint</span></code></a>s defined in the\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.constraints\" title=\"django.db.models.Options.constraints\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.constraints</span></code></a> are validated\nby <a class=\"reference internal\" href=\"#django.db.models.Model.validate_constraints\" title=\"django.db.models.Model.validate_constraints\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.validate_constraints()</span></code></a>.</p>\n<p>Note that if you provide an <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_unique()</span></code>, any\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.unique_together\" title=\"django.db.models.Options.unique_together\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique_together</span></code></a> constraint involving one of\nthe fields you provided will not be checked.</p>\n<p>Finally, <code class=\"docutils literal notranslate\"><span class=\"pre\">full_clean()</span></code> will check any other constraints on your model.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.validate_constraints\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">validate_constraints</span></code>(<em><span class=\"n\"><span class=\"pre\">exclude</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.validate_constraints\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.validate_constraints\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This method validates all constraints defined in\n<a class=\"reference internal\" href=\"../options/#django.db.models.Options.constraints\" title=\"django.db.models.Options.constraints\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.constraints</span></code></a>. The\noptional <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude</span></code> argument allows you to provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span></code> of field names to\nexclude from validation. It will raise a\n<a class=\"reference internal\" href=\"../../exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> if any constraints fail\nvalidation.</p>\n</div>\n<div class=\"section\" id=\"s-saving-objects\">\n<span id=\"saving-objects\"></span><h2>Saving objects<a class=\"headerlink\" href=\"#saving-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To save an object back to the database, call <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.save\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">save</span></code>(<em><span class=\"n\"><span class=\"pre\">force_insert</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">force_update</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_DB_ALIAS</span></span></em>, <em><span class=\"n\"><span class=\"pre\">update_fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.save\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.asave\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">asave</span></code>(<em><span class=\"n\"><span class=\"pre\">force_insert</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">force_update</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_DB_ALIAS</span></span></em>, <em><span class=\"n\"><span class=\"pre\">update_fields</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.asave\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.asave\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">asave()</span></code></p>\n<p>For details on using the <code class=\"docutils literal notranslate\"><span class=\"pre\">force_insert</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">force_update</span></code> arguments, see\n<a class=\"reference internal\" href=\"#ref-models-force-insert\"><span class=\"std std-ref\">Forcing an INSERT or UPDATE</span></a>. Details about the <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> argument\ncan be found in the <a class=\"reference internal\" href=\"#ref-models-update-fields\"><span class=\"std std-ref\">Specifying which fields to save</span></a> section.</p>\n<p>If you want customized saving behavior, you can override this <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>\nmethod. See <a class=\"reference internal\" href=\"../../../topics/db/models/#overriding-model-methods\"><span class=\"std std-ref\">Overriding predefined model methods</span></a> for more details.</p>\n<p>The model save process also has some subtleties; see the sections below.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">asave()</span></code> method was added.</p>\n</div>\n<div class=\"section\" id=\"s-auto-incrementing-primary-keys\">\n<span id=\"auto-incrementing-primary-keys\"></span><h3>Auto-incrementing primary keys<a class=\"headerlink\" href=\"#auto-incrementing-primary-keys\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If a model has an <a class=\"reference internal\" href=\"../fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> \u2014 an auto-incrementing\nprimary key \u2014 then that auto-incremented value will be calculated and saved as\nan attribute on your object the first time you call <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b2</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheddar Talk&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Thoughts on cheese.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># Returns None, because b2 doesn&#39;t have an ID yet.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b2</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># Returns the ID of your new object.</span>\n</pre></div>\n</div>\n<p>There\u2019s no way to tell what the value of an ID will be before you call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>, because that value is calculated by your database, not by Django.</p>\n<p>For convenience, each model has an <a class=\"reference internal\" href=\"../fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> by default unless you explicitly specify <code class=\"docutils literal notranslate\"><span class=\"pre\">primary_key=True</span></code> on a field\nin your model. See the documentation for <a class=\"reference internal\" href=\"../fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a>\nfor more details.</p>\n<div class=\"section\" id=\"s-the-pk-property\">\n<span id=\"the-pk-property\"></span><h4>The <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> property<a class=\"headerlink\" href=\"#the-pk-property\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.pk\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pk</span></code><a class=\"headerlink\" href=\"#django.db.models.Model.pk\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Regardless of whether you define a primary key field yourself, or let Django\nsupply one for you, each model will have a property called <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code>. It behaves\nlike a normal attribute on the model, but is actually an alias for whichever\nattribute is the primary key field for the model. You can read and set this\nvalue, just as you would for any other attribute, and it will update the\ncorrect field in the model.</p>\n</div>\n<div class=\"section\" id=\"s-explicitly-specifying-auto-primary-key-values\">\n<span id=\"explicitly-specifying-auto-primary-key-values\"></span><h4>Explicitly specifying auto-primary-key values<a class=\"headerlink\" href=\"#explicitly-specifying-auto-primary-key-values\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If a model has an <a class=\"reference internal\" href=\"../fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> but you want to define a\nnew object\u2019s ID explicitly when saving, define it explicitly before saving,\nrather than relying on the auto-assignment of the ID:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b3</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheddar Talk&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Thoughts on cheese.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b3</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># Returns 3.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b3</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b3</span><span class=\"o\">.</span><span class=\"n\">id</span>  <span class=\"c1\"># Returns 3.</span>\n</pre></div>\n</div>\n<p>If you assign auto-primary-key values manually, make sure not to use an\nalready-existing primary-key value! If you create a new object with an explicit\nprimary-key value that already exists in the database, Django will assume you\u2019re\nchanging the existing record rather than creating a new one.</p>\n<p>Given the above <code class=\"docutils literal notranslate\"><span class=\"pre\">'Cheddar</span> <span class=\"pre\">Talk'</span></code> blog example, this example would override the\nprevious record in the database:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b4</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Not Cheddar&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Anything but cheese.&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">b4</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># Overrides the previous blog with ID=3!</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"#how-django-knows-to-update-vs-insert\">How Django knows to UPDATE vs. INSERT</a>, below, for the reason this\nhappens.</p>\n<p>Explicitly specifying auto-primary-key values is mostly useful for bulk-saving\nobjects, when you\u2019re confident you won\u2019t have primary-key collision.</p>\n<p>If you\u2019re using PostgreSQL, the sequence associated with the primary key might\nneed to be updated; see <a class=\"reference internal\" href=\"../../databases/#manually-specified-autoincrement-pk\"><span class=\"std std-ref\">Manually-specifying values of auto-incrementing primary keys</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-what-happens-when-you-save\">\n<span id=\"what-happens-when-you-save\"></span><h3>What happens when you save?<a class=\"headerlink\" href=\"#what-happens-when-you-save\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When you save an object, Django performs the following steps:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\"><strong>Emit a pre-save signal.</strong> The <a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a>\nsignal is sent, allowing any functions listening for that signal to do\nsomething.</p>\n</li>\n<li><p class=\"first\"><strong>Preprocess the data.</strong> Each field\u2019s\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.pre_save\" title=\"django.db.models.Field.pre_save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">pre_save()</span></code></a> method is called to perform any\nautomated data modification that\u2019s needed. For example, the date/time fields\noverride <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save()</span></code> to implement\n<a class=\"reference internal\" href=\"../fields/#django.db.models.DateField.auto_now_add\" title=\"django.db.models.DateField.auto_now_add\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now_add</span></code></a> and\n<a class=\"reference internal\" href=\"../fields/#django.db.models.DateField.auto_now\" title=\"django.db.models.DateField.auto_now\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now</span></code></a>.</p>\n</li>\n<li><p class=\"first\"><strong>Prepare the data for the database.</strong> Each field\u2019s\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.get_db_prep_save\" title=\"django.db.models.Field.get_db_prep_save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_db_prep_save()</span></code></a> method is asked to provide\nits current value in a data type that can be written to the database.</p>\n<p>Most fields don\u2019t require data preparation. Simple data types, such as\nintegers and strings, are \u2018ready to write\u2019 as a Python object. However, more\ncomplex data types often require some modification.</p>\n<p>For example, <a class=\"reference internal\" href=\"../fields/#django.db.models.DateField\" title=\"django.db.models.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a> fields use a Python\n<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> object to store data. Databases don\u2019t store <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code>\nobjects, so the field value must be converted into an ISO-compliant date\nstring for insertion into the database.</p>\n</li>\n<li><p class=\"first\"><strong>Insert the data into the database.</strong> The preprocessed, prepared data is\ncomposed into an SQL statement for insertion into the database.</p>\n</li>\n<li><p class=\"first\"><strong>Emit a post-save signal.</strong> The <a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a>\nsignal is sent, allowing any functions listening for that signal to do\nsomething.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-how-django-knows-to-update-vs-insert\">\n<span id=\"how-django-knows-to-update-vs-insert\"></span><h3>How Django knows to UPDATE vs. INSERT<a class=\"headerlink\" href=\"#how-django-knows-to-update-vs-insert\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You may have noticed Django database objects use the same <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method\nfor creating and changing objects. Django abstracts the need to use <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> SQL statements. Specifically, when you call <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> and the\nobject\u2019s primary key attribute does <strong>not</strong> define a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a> or\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.db_default\" title=\"django.db.models.Field.db_default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_default</span></code></a>, Django follows this algorithm:</p>\n<ul class=\"simple\">\n<li>If the object\u2019s primary key attribute is set to a value that evaluates to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> (i.e., a value other than <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> or the empty string), Django\nexecutes an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>.</li>\n<li>If the object\u2019s primary key attribute is <em>not</em> set or if the <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>\ndidn\u2019t update anything (e.g. if primary key is set to a value that doesn\u2019t\nexist in the database), Django executes an <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>.</li>\n</ul>\n<p>If the object\u2019s primary key attribute defines a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a> or\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.db_default\" title=\"django.db.models.Field.db_default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_default</span></code></a> then Django executes an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>\nif it is an existing model instance and primary key is set to a value that\nexists in the database. Otherwise, Django executes an <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>.</p>\n<p>The one gotcha here is that you should be careful not to specify a primary-key\nvalue explicitly when saving new objects, if you cannot guarantee the\nprimary-key value is unused. For more on this nuance, see <a class=\"reference internal\" href=\"#explicitly-specifying-auto-primary-key-values\">Explicitly specifying\nauto-primary-key values</a> above and <a class=\"reference internal\" href=\"#forcing-an-insert-or-update\">Forcing an INSERT or UPDATE</a> below.</p>\n<p>In Django 1.5 and earlier, Django did a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> when the primary key\nattribute was set. If the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> found a row, then Django did an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>,\notherwise it did an <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code>. The old algorithm results in one more query in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> case. There are some rare cases where the database doesn\u2019t\nreport that a row was updated even if the database contains a row for the\nobject\u2019s primary key value. An example is the PostgreSQL <code class=\"docutils literal notranslate\"><span class=\"pre\">ON</span> <span class=\"pre\">UPDATE</span></code> trigger\nwhich returns <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>. In such cases it is possible to revert to the old\nalgorithm by setting the <a class=\"reference internal\" href=\"../options/#django.db.models.Options.select_on_save\" title=\"django.db.models.Options.select_on_save\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">select_on_save</span></code></a>\noption to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django Development version:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.db_default</span></code> parameter was added.</p>\n</div>\n<div class=\"section\" id=\"s-forcing-an-insert-or-update\">\n<span id=\"s-ref-models-force-insert\"></span><span id=\"forcing-an-insert-or-update\"></span><span id=\"ref-models-force-insert\"></span><h4>Forcing an INSERT or UPDATE<a class=\"headerlink\" href=\"#forcing-an-insert-or-update\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In some rare circumstances, it\u2019s necessary to be able to force the\n<a class=\"reference internal\" href=\"#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method to perform an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code> and not fall back to\ndoing an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code>. Or vice-versa: update, if possible, but not insert a new\nrow. In these cases you can pass the <code class=\"docutils literal notranslate\"><span class=\"pre\">force_insert=True</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">force_update=True</span></code> parameters to the <a class=\"reference internal\" href=\"#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method.\nPassing both parameters is an error: you cannot both insert <em>and</em> update at the\nsame time!</p>\n<p>It should be very rare that you\u2019ll need to use these parameters. Django will\nalmost always do the right thing and trying to override that will lead to\nerrors that are difficult to track down. This feature is for advanced use\nonly.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> will force an update similarly to <code class=\"docutils literal notranslate\"><span class=\"pre\">force_update</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-updating-attributes-based-on-existing-fields\">\n<span id=\"s-ref-models-field-updates-using-f-expressions\"></span><span id=\"updating-attributes-based-on-existing-fields\"></span><span id=\"ref-models-field-updates-using-f-expressions\"></span><h3>Updating attributes based on existing fields<a class=\"headerlink\" href=\"#updating-attributes-based-on-existing-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Sometimes you\u2019ll need to perform a simple arithmetic task on a field, such\nas incrementing or decrementing the current value. One way of achieving this is\ndoing the arithmetic in Python like:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Venezuelan Beaver Cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">number_sold</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If the old <code class=\"docutils literal notranslate\"><span class=\"pre\">number_sold</span></code> value retrieved from the database was 10, then\nthe value of 11 will be written back to the database.</p>\n<p>The process can be made robust, <a class=\"reference internal\" href=\"../expressions/#avoiding-race-conditions-using-f\"><span class=\"std std-ref\">avoiding a race condition</span></a>, as well as slightly faster by expressing\nthe update relative to the original field value, rather than as an explicit\nassignment of a new value. Django provides <a class=\"reference internal\" href=\"../expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> for performing this kind of relative update. Using\n<a class=\"reference internal\" href=\"../expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a>, the previous example is expressed\nas:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Venezuelan Beaver Cheese&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">number_sold</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_sold&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>For more details, see the documentation on <a class=\"reference internal\" href=\"../expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> and their <a class=\"reference internal\" href=\"../../../topics/db/queries/#topics-db-queries-update\"><span class=\"std std-ref\">use in update queries</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-specifying-which-fields-to-save\">\n<span id=\"s-ref-models-update-fields\"></span><span id=\"specifying-which-fields-to-save\"></span><span id=\"ref-models-update-fields\"></span><h3>Specifying which fields to save<a class=\"headerlink\" href=\"#specifying-which-fields-to-save\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> is passed a list of field names in keyword argument\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code>, only the fields named in that list will be updated.\nThis may be desirable if you want to update just one or a few fields on\nan object. There will be a slight performance benefit from preventing\nall of the model fields from being updated in the database. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Name changed again&quot;</span>\n<span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> argument can be any iterable containing strings. An\nempty <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> iterable will skip the save. A value of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> will\nperform an update on all fields.</p>\n<p>Specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> will force an update.</p>\n<p>When saving a model fetched through deferred model loading\n(<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a> or\n<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a>) only the fields loaded\nfrom the DB will get updated. In effect there is an automatic\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> in this case. If you assign or change any deferred field\nvalue, the field will be added to the updated fields.</p>\n<div class=\"admonition-field-pre-save-and-update-fields admonition\">\n<p class=\"first admonition-title\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Field.pre_save()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code></p>\n<p class=\"last\">If <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> is passed in, only the\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.pre_save\" title=\"django.db.models.Field.pre_save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">pre_save()</span></code></a> methods of the <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code>\nare called. For example, this means that date/time fields with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">auto_now=True</span></code> will not be updated unless they are included in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-deleting-objects\">\n<span id=\"deleting-objects\"></span><h2>Deleting objects<a class=\"headerlink\" href=\"#deleting-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.delete\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">delete</span></code>(<em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_DB_ALIAS</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keep_parents</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.delete\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.delete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.adelete\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">adelete</span></code>(<em><span class=\"n\"><span class=\"pre\">using</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DEFAULT_DB_ALIAS</span></span></em>, <em><span class=\"n\"><span class=\"pre\">keep_parents</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.adelete\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.adelete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">adelete()</span></code></p>\n<p>Issues an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">DELETE</span></code> for the object. This only deletes the object in the\ndatabase; the Python instance will still exist and will still have data in\nits fields, except for the primary key set to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. This method returns the\nnumber of objects deleted and a dictionary with the number of deletions per\nobject type.</p>\n<p>For more details, including how to delete objects in bulk, see\n<a class=\"reference internal\" href=\"../../../topics/db/queries/#topics-db-queries-delete\"><span class=\"std std-ref\">Deleting objects</span></a>.</p>\n<p>If you want customized deletion behavior, you can override the <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code>\nmethod. See <a class=\"reference internal\" href=\"../../../topics/db/models/#overriding-model-methods\"><span class=\"std std-ref\">Overriding predefined model methods</span></a> for more details.</p>\n<p>Sometimes with <a class=\"reference internal\" href=\"../../../topics/db/models/#multi-table-inheritance\"><span class=\"std std-ref\">multi-table inheritance</span></a> you may\nwant to delete only a child model\u2019s data. Specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">keep_parents=True</span></code> will\nkeep the parent model\u2019s data.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">adelete()</span></code> method was added.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-pickling-objects\">\n<span id=\"pickling-objects\"></span><h2>Pickling objects<a class=\"headerlink\" href=\"#pickling-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a> a model, its current state is pickled. When you unpickle\nit, it\u2019ll contain the model instance at the moment it was pickled, rather than\nthe data that\u2019s currently in the database.</p>\n<div class=\"admonition-you-can-t-share-pickles-between-versions admonition\">\n<p class=\"first admonition-title\">You can\u2019t share pickles between versions</p>\n<p>Pickles of models are only valid for the version of Django that\nwas used to generate them. If you generate a pickle using Django\nversion N, there is no guarantee that pickle will be readable with\nDjango version N+1. Pickles should not be used as part of a long-term\narchival strategy.</p>\n<p class=\"last\">Since pickle compatibility errors can be difficult to diagnose, such as\nsilently corrupted objects, a <code class=\"docutils literal notranslate\"><span class=\"pre\">RuntimeWarning</span></code> is raised when you try to\nunpickle a model in a Django version that is different than the one in\nwhich it was pickled.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-other-model-instance-methods\">\n<span id=\"s-model-instance-methods\"></span><span id=\"other-model-instance-methods\"></span><span id=\"model-instance-methods\"></span><h2>Other model instance methods<a class=\"headerlink\" href=\"#other-model-instance-methods\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A few object methods have special purposes.</p>\n<div class=\"section\" id=\"s-str\">\n<span id=\"str\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">__str__()</span></code><a class=\"headerlink\" href=\"#str\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.__str__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__str__</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.__str__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.__str__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">__str__()</span></code> method is called whenever you call <code class=\"docutils literal notranslate\"><span class=\"pre\">str()</span></code> on an object.\nDjango uses <code class=\"docutils literal notranslate\"><span class=\"pre\">str(obj)</span></code> in a number of places. Most notably, to display an\nobject in the Django admin site and as the value inserted into a template when\nit displays an object. Thus, you should always return a nice, human-readable\nrepresentation of the model from the <code class=\"docutils literal notranslate\"><span class=\"pre\">__str__()</span></code> method.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-eq\">\n<span id=\"eq\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">__eq__()</span></code><a class=\"headerlink\" href=\"#eq\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.__eq__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__eq__</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.__eq__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.__eq__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The equality method is defined such that instances with the same primary\nkey value and the same concrete class are considered equal, except that\ninstances with a primary key value of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> aren\u2019t equal to anything except\nthemselves. For proxy models, concrete class is defined as the model\u2019s first\nnon-proxy parent; for all other models it\u2019s simply the model\u2019s class.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">AutoField</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyProxyModel</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MultitableInherited</span><span class=\"p\">(</span><span class=\"n\">MyModel</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># Primary keys compared</span>\n<span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># Primary keys are None</span>\n<span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"c1\"># Same instance</span>\n<span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"n\">instance</span> <span class=\"o\">==</span> <span class=\"n\">instance</span>\n<span class=\"c1\"># Proxy model</span>\n<span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">MyProxyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># Multi-table inheritance</span>\n<span class=\"n\">MyModel</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">MultitableInherited</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-hash\">\n<span id=\"hash\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code><a class=\"headerlink\" href=\"#hash\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.__hash__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__hash__</span></code>()<a class=\"reference internal\" href=\"../../../_modules/django/db/models/base/#Model.__hash__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Model.__hash__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code> method is based on the instance\u2019s primary key value. It\nis effectively <code class=\"docutils literal notranslate\"><span class=\"pre\">hash(obj.pk)</span></code>. If the instance doesn\u2019t have a primary key\nvalue then a <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code> will be raised (otherwise the <code class=\"docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code>\nmethod would return different values before and after the instance is\nsaved, but changing the <a class=\"reference external\" href=\"https://docs.python.org/3/reference/datamodel.html#object.__hash__\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code></a> value of an instance is\nforbidden in Python.</p>\n</div>\n<div class=\"section\" id=\"s-get-absolute-url\">\n<span id=\"get-absolute-url\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code><a class=\"headerlink\" href=\"#get-absolute-url\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.get_absolute_url\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_absolute_url</span></code>()<a class=\"headerlink\" href=\"#django.db.models.Model.get_absolute_url\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Define a <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> method to tell Django how to calculate the\ncanonical URL for an object. To callers, this method should appear to return a\nstring that can be used to refer to the object over HTTP.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;/people/</span><span class=\"si\">%i</span><span class=\"s2\">/&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span>\n</pre></div>\n</div>\n<p>While this code is correct and simple, it may not be the most portable way to\nto write this kind of method. The <a class=\"reference internal\" href=\"../../urlresolvers/#django.urls.reverse\" title=\"django.urls.reverse\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">reverse()</span></code></a> function is\nusually the best approach.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;people-detail&quot;</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>One place Django uses <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> is in the admin app. If an object\ndefines this method, the object-editing page will have a \u201cView on site\u201d link\nthat will jump you directly to the object\u2019s public view, as given by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code>.</p>\n<p>Similarly, a couple of other bits of Django, such as the <a class=\"reference internal\" href=\"../../contrib/syndication/\"><span class=\"doc\">syndication feed\nframework</span></a>, use <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> when it is\ndefined. If it makes sense for your model\u2019s instances to each have a unique\nURL, you should define <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code>.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>You should avoid building the URL from unvalidated user input, in order to\nreduce possibilities of link or redirect poisoning:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_absolute_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;/</span><span class=\"si\">%s</span><span class=\"s2\">/&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n</div>\n<p class=\"last\">If <code class=\"docutils literal notranslate\"><span class=\"pre\">self.name</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">'/example.com'</span></code> this returns <code class=\"docutils literal notranslate\"><span class=\"pre\">'//example.com/'</span></code>\nwhich, in turn, is a valid schema relative URL but not the expected\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'/%2Fexample.com/'</span></code>.</p>\n</div>\n<p>It\u2019s good practice to use <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> in templates, instead of\nhard-coding your objects\u2019 URLs. For example, this template code is bad:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cm\">&lt;!-- BAD template code. Avoid! --&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/people/</span><span class=\"cp\">{{</span> <span class=\"nv\">object.id</span> <span class=\"cp\">}}</span><span class=\"s\">/&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">object.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This template code is much better:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">object.get_absolute_url</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">object.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The logic here is that if you change the URL structure of your objects, even\nfor something small like correcting a spelling error, you don\u2019t want to have to\ntrack down every place that the URL might be created. Specify it once, in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> and have all your other code call that one place.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The string you return from <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> <strong>must</strong> contain only\nASCII characters (required by the URI specification, <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc3986.html#section-2\"><strong>RFC 3986#section-2</strong></a>)\nand be URL-encoded, if necessary.</p>\n<p class=\"last\">Code and templates calling <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> should be able to use the\nresult directly without any further processing. You may wish to use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.encoding.iri_to_uri()</span></code> function to help with this if you\nare using strings containing characters outside the ASCII range.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-extra-instance-methods\">\n<span id=\"extra-instance-methods\"></span><h2>Extra instance methods<a class=\"headerlink\" href=\"#extra-instance-methods\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In addition to <a class=\"reference internal\" href=\"#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>, <a class=\"reference internal\" href=\"#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a>, a model object\nmight have some of the following methods:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.get_FOO_display\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_FOO_display</span></code>()<a class=\"headerlink\" href=\"#django.db.models.Model.get_FOO_display\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>For every field that has <a class=\"reference internal\" href=\"../fields/#django.db.models.Field.choices\" title=\"django.db.models.Field.choices\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">choices</span></code></a> set, the\nobject will have a <code class=\"docutils literal notranslate\"><span class=\"pre\">get_FOO_display()</span></code> method, where <code class=\"docutils literal notranslate\"><span class=\"pre\">FOO</span></code> is the name of\nthe field. This method returns the \u201chuman-readable\u201d value of the field.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">SHIRT_SIZES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Small&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;M&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Medium&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;L&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Large&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">shirt_size</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">SHIRT_SIZES</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred Flintstone&quot;</span><span class=\"p\">,</span> <span class=\"n\">shirt_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;L&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">shirt_size</span>\n<span class=\"go\">&#39;L&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_shirt_size_display</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;Large&#39;</span>\n</pre></div>\n</div>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.get_next_by_FOO\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_next_by_FOO</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Model.get_next_by_FOO\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model.get_previous_by_FOO\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_previous_by_FOO</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Model.get_previous_by_FOO\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>For every <a class=\"reference internal\" href=\"../fields/#django.db.models.DateField\" title=\"django.db.models.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a> and\n<a class=\"reference internal\" href=\"../fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> that does not have <a class=\"reference internal\" href=\"../fields/#django.db.models.Field.null\" title=\"django.db.models.Field.null\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">null=True</span></code></a>, the object will have <code class=\"docutils literal notranslate\"><span class=\"pre\">get_next_by_FOO()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_previous_by_FOO()</span></code> methods, where <code class=\"docutils literal notranslate\"><span class=\"pre\">FOO</span></code> is the name of the field. This\nreturns the next and previous object with respect to the date field, raising\na <a class=\"reference internal\" href=\"../class/#django.db.models.Model.DoesNotExist\" title=\"django.db.models.Model.DoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code></a> exception when appropriate.</p>\n<p>Both of these methods will perform their queries using the default\nmanager for the model. If you need to emulate filtering used by a\ncustom manager, or want to perform one-off custom filtering, both\nmethods also accept optional keyword arguments, which should be in the\nformat described in <a class=\"reference internal\" href=\"../querysets/#field-lookups\"><span class=\"std std-ref\">Field lookups</span></a>.</p>\n<p>Note that in the case of identical date values, these methods will use the\nprimary key as a tie-breaker. This guarantees that no records are skipped or\nduplicated. That also means you cannot use those methods on unsaved objects.</p>\n<div class=\"admonition-overriding-extra-instance-methods admonition\">\n<p class=\"first admonition-title\">Overriding extra instance methods</p>\n<p class=\"last\">In most cases overriding or inheriting <code class=\"docutils literal notranslate\"><span class=\"pre\">get_FOO_display()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_next_by_FOO()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_previous_by_FOO()</span></code> should work as\nexpected. Since they are added by the metaclass however, it is not\npractical to account for all possible inheritance structures. In more\ncomplex cases you should override <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.contribute_to_class()</span></code> to set\nthe methods you need.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-other-attributes\">\n<span id=\"other-attributes\"></span><h2>Other attributes<a class=\"headerlink\" href=\"#other-attributes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-state\">\n<span id=\"state\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">_state</span></code><a class=\"headerlink\" href=\"#state\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Model._state\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Model.</span></code><code class=\"sig-name descname\"><span class=\"pre\">_state</span></code><a class=\"headerlink\" href=\"#django.db.models.Model._state\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">_state</span></code> attribute refers to a <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelState</span></code> object that tracks\nthe lifecycle of the model instance.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelState</span></code> object has two attributes: <code class=\"docutils literal notranslate\"><span class=\"pre\">adding</span></code>, a flag which is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the model has not been saved to the database yet, and <code class=\"docutils literal notranslate\"><span class=\"pre\">db</span></code>,\na string referring to the database alias the instance was loaded from or\nsaved to.</p>\n<p>Newly instantiated instances have <code class=\"docutils literal notranslate\"><span class=\"pre\">adding=True</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">db=None</span></code>,\nsince they are yet to be saved. Instances fetched from a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>\nwill have <code class=\"docutils literal notranslate\"><span class=\"pre\">adding=False</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">db</span></code> set to the alias of the associated\ndatabase.</p>\n</dd></dl>\n\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/models/querysets", "<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference", "N", "next"], ["ref/models/options", "Model <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> options", "P", "previous"]], "sourcename": "ref/models/instances.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Model instance reference</a><ul>\n<li><a class=\"reference internal\" href=\"#creating-objects\">Creating objects</a><ul>\n<li><a class=\"reference internal\" href=\"#customizing-model-loading\">Customizing model loading</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#refreshing-objects-from-database\">Refreshing objects from database</a></li>\n<li><a class=\"reference internal\" href=\"#validating-objects\">Validating objects</a></li>\n<li><a class=\"reference internal\" href=\"#saving-objects\">Saving objects</a><ul>\n<li><a class=\"reference internal\" href=\"#auto-incrementing-primary-keys\">Auto-incrementing primary keys</a><ul>\n<li><a class=\"reference internal\" href=\"#the-pk-property\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> property</a></li>\n<li><a class=\"reference internal\" href=\"#explicitly-specifying-auto-primary-key-values\">Explicitly specifying auto-primary-key values</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#what-happens-when-you-save\">What happens when you save?</a></li>\n<li><a class=\"reference internal\" href=\"#how-django-knows-to-update-vs-insert\">How Django knows to UPDATE vs. INSERT</a><ul>\n<li><a class=\"reference internal\" href=\"#forcing-an-insert-or-update\">Forcing an INSERT or UPDATE</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#updating-attributes-based-on-existing-fields\">Updating attributes based on existing fields</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-which-fields-to-save\">Specifying which fields to save</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#deleting-objects\">Deleting objects</a></li>\n<li><a class=\"reference internal\" href=\"#pickling-objects\">Pickling objects</a></li>\n<li><a class=\"reference internal\" href=\"#other-model-instance-methods\">Other model instance methods</a><ul>\n<li><a class=\"reference internal\" href=\"#str\"><code class=\"docutils literal notranslate\"><span class=\"pre\">__str__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#eq\"><code class=\"docutils literal notranslate\"><span class=\"pre\">__eq__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#hash\"><code class=\"docutils literal notranslate\"><span class=\"pre\">__hash__()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-absolute-url\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#extra-instance-methods\">Extra instance methods</a></li>\n<li><a class=\"reference internal\" href=\"#other-attributes\">Other attributes</a><ul>\n<li><a class=\"reference internal\" href=\"#state\"><code class=\"docutils literal notranslate\"><span class=\"pre\">_state</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/models/instances", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}