{"parents": [{"link": "../", "title": "API Reference"}], "prev": {"link": "../models/database-functions/", "title": "Database Functions"}, "next": {"link": "../request-response/", "title": "Request and response objects"}, "title": "Paginator", "meta": {}, "body": "<div class=\"section\" id=\"s-paginator\">\n<span id=\"paginator\"></span><h1>Paginator<a class=\"headerlink\" href=\"#paginator\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django provides a few classes that help you manage paginated data \u2013 that is,\ndata that\u2019s split across several pages, with \u201cPrevious/Next\u201d links. These\nclasses live in <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/core/paginator.py\">django/core/paginator.py</a>.</p>\n<p>For examples, see the <a class=\"reference internal\" href=\"../../topics/pagination/\"><span class=\"doc\">Pagination topic guide</span></a>.</p>\n<span class=\"target\" id=\"module-django.core.paginator\"></span><div class=\"section\" id=\"s-paginator-class\">\n<span id=\"paginator-class\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> class<a class=\"headerlink\" href=\"#paginator-class\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Paginator</span></code>(<em><span class=\"n\"><span class=\"pre\">object_list</span></span></em>, <em><span class=\"n\"><span class=\"pre\">per_page</span></span></em>, <em><span class=\"n\"><span class=\"pre\">orphans</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">0</span></span></em>, <em><span class=\"n\"><span class=\"pre\">allow_empty_first_page</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">error_messages</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Paginator\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Paginator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A paginator acts like a sequence of <a class=\"reference internal\" href=\"#django.core.paginator.Page\" title=\"django.core.paginator.Page\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Page</span></code></a> when using <code class=\"docutils literal notranslate\"><span class=\"pre\">len()</span></code> or\niterating it directly.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.object_list\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">object_list</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.object_list\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Required. A list, tuple, <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, or other sliceable object with a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">__len__()</span></code> method. For consistent pagination,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s should be ordered, e.g. with an\n<a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> clause or with a default\n<a class=\"reference internal\" href=\"../models/options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ordering</span></code></a> on the model.</p>\n<div class=\"admonition-performance-issues-paginating-large-queryset-s admonition\">\n<p class=\"first admonition-title\">Performance issues paginating large <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</p>\n<p class=\"last\">If you\u2019re using a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> with a very large number of items,\nrequesting high page numbers might be slow on some databases, because\nthe resulting <code class=\"docutils literal notranslate\"><span class=\"pre\">LIMIT</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">OFFSET</span></code> query needs to count the number of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OFFSET</span></code> records which takes longer as the page number gets higher.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.per_page\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">per_page</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.per_page\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Required. The maximum number of items to include on a page, not including\norphans (see the <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.orphans\" title=\"django.core.paginator.Paginator.orphans\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">orphans</span></code></a> optional argument below).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.orphans\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">orphans</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.orphans\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. Use this when you don\u2019t want to have a last page with very few\nitems. If the last page would normally have a number of items less than or\nequal to <code class=\"docutils literal notranslate\"><span class=\"pre\">orphans</span></code>, then those items will be added to the previous page\n(which becomes the last page) instead of leaving the items on a page by\nthemselves. For example, with 23 items, <code class=\"docutils literal notranslate\"><span class=\"pre\">per_page=10</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">orphans=3</span></code>,\nthere will be two pages; the first page with 10 items and the second\n(and last) page with 13 items. <code class=\"docutils literal notranslate\"><span class=\"pre\">orphans</span></code> defaults to zero, which means\npages are never combined and the last page may have one item.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.allow_empty_first_page\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">allow_empty_first_page</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.allow_empty_first_page\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. Whether or not the first page is allowed to be empty.  If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code> is  empty, then an <code class=\"docutils literal notranslate\"><span class=\"pre\">EmptyPage</span></code> error will\nbe raised.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.error_messages\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">error_messages</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.error_messages\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"versionadded\">\n<span class=\"title\">New in Django Development version.</span> </div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">error_messages</span></code> argument lets you override the default messages that\nthe paginator will raise. Pass in a dictionary with keys matching the error\nmessages you want to override. Available error message keys are:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">invalid_page</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">min_page</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">no_results</span></code>.</p>\n<p>For example, here is the default error message:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.paginator</span> <span class=\"kn\">import</span> <span class=\"n\">Paginator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  <span class=\"c\">...</span>\n<span class=\"gr\">EmptyPage</span>: <span class=\"n\">That page contains no results</span>\n</pre></div>\n</div>\n<p>And here is a custom error message:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paginator</span> <span class=\"o\">=</span> <span class=\"n\">Paginator</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"mi\">2</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">error_messages</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;no_results&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Page does not exist&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paginator</span><span class=\"o\">.</span><span class=\"n\">page</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n  <span class=\"c\">...</span>\n<span class=\"gr\">EmptyPage</span>: <span class=\"n\">Page does not exist</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<div class=\"section\" id=\"s-methods\">\n<span id=\"methods\"></span><h3>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.get_page\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_page</span></code>(<em><span class=\"n\"><span class=\"pre\">number</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Paginator.get_page\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.get_page\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a <a class=\"reference internal\" href=\"#django.core.paginator.Page\" title=\"django.core.paginator.Page\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Page</span></code></a> object with the given 1-based index, while also\nhandling out of range and invalid page numbers.</p>\n<p>If the page isn\u2019t a number, it returns the first page. If the page number\nis negative or greater than the number of pages, it returns the last page.</p>\n<p>Raises an <a class=\"reference internal\" href=\"#django.core.paginator.EmptyPage\" title=\"django.core.paginator.EmptyPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">EmptyPage</span></code></a> exception only if you specify\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator(...,</span> <span class=\"pre\">allow_empty_first_page=False)</span></code> and the <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code> is\nempty.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.page\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">page</span></code>(<em><span class=\"n\"><span class=\"pre\">number</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Paginator.page\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.page\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a <a class=\"reference internal\" href=\"#django.core.paginator.Page\" title=\"django.core.paginator.Page\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Page</span></code></a> object with the given 1-based index. Raises\n<a class=\"reference internal\" href=\"#django.core.paginator.PageNotAnInteger\" title=\"django.core.paginator.PageNotAnInteger\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">PageNotAnInteger</span></code></a> if the <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> cannot be converted to an integer\nby calling <code class=\"docutils literal notranslate\"><span class=\"pre\">int()</span></code>. Raises <a class=\"reference internal\" href=\"#django.core.paginator.EmptyPage\" title=\"django.core.paginator.EmptyPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">EmptyPage</span></code></a> if the given page number\ndoesn\u2019t exist.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.get_elided_page_range\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_elided_page_range</span></code>(<em><span class=\"n\"><span class=\"pre\">number</span></span></em>, <em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">on_each_side</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">3</span></span></em>, <em><span class=\"n\"><span class=\"pre\">on_ends</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">2</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Paginator.get_elided_page_range\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.get_elided_page_range\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a 1-based list of page numbers similar to\n<a class=\"reference internal\" href=\"#django.core.paginator.Paginator.page_range\" title=\"django.core.paginator.Paginator.page_range\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Paginator.page_range</span></code></a>, but may add an ellipsis to either or both\nsides of the current page number when <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.num_pages\" title=\"django.core.paginator.Paginator.num_pages\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Paginator.num_pages</span></code></a> is large.</p>\n<p>The number of pages to include on each side of the current page number is\ndetermined by the <code class=\"docutils literal notranslate\"><span class=\"pre\">on_each_side</span></code> argument which defaults to 3.</p>\n<p>The number of pages to include at the beginning and end of page range is\ndetermined by the <code class=\"docutils literal notranslate\"><span class=\"pre\">on_ends</span></code> argument which defaults to 2.</p>\n<p>For example, with the default values for <code class=\"docutils literal notranslate\"><span class=\"pre\">on_each_side</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">on_ends</span></code>,\nif the current page is 10 and there are 50 pages, the page range will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">[1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">'\u2026',</span> <span class=\"pre\">7,</span> <span class=\"pre\">8,</span> <span class=\"pre\">9,</span> <span class=\"pre\">10,</span> <span class=\"pre\">11,</span> <span class=\"pre\">12,</span> <span class=\"pre\">13,</span> <span class=\"pre\">'\u2026',</span> <span class=\"pre\">49,</span> <span class=\"pre\">50]</span></code>. This will result in\npages 7, 8, and 9 to the left of and 11, 12, and 13 to the right of the\ncurrent page as well as pages 1 and 2 at the start and 49 and 50 at the\nend.</p>\n<p>Raises <a class=\"reference internal\" href=\"#django.core.paginator.InvalidPage\" title=\"django.core.paginator.InvalidPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">InvalidPage</span></code></a> if the given page number doesn\u2019t exist.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-attributes\">\n<span id=\"attributes\"></span><h3>Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.ELLIPSIS\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">ELLIPSIS</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.ELLIPSIS\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A translatable string used as a substitute for elided page numbers in the\npage range returned by <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.get_elided_page_range\" title=\"django.core.paginator.Paginator.get_elided_page_range\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_elided_page_range()</span></code></a>. Default is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'\u2026'</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.count\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">count</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.count\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The total number of objects, across all pages.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">When determining the number of objects contained in <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> will first try calling <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list.count()</span></code>. If\n<code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code> has no <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> method, then <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> will\nfall back to using <code class=\"docutils literal notranslate\"><span class=\"pre\">len(object_list)</span></code>. This allows objects, such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, to use a more efficient <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> method when\navailable.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.num_pages\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">num_pages</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.num_pages\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The total number of pages.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Paginator.page_range\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Paginator.</span></code><code class=\"sig-name descname\"><span class=\"pre\">page_range</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Paginator.page_range\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A 1-based range iterator of page numbers, e.g. yielding <code class=\"docutils literal notranslate\"><span class=\"pre\">[1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">3,</span> <span class=\"pre\">4]</span></code>.</p>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-page-class\">\n<span id=\"page-class\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">Page</span></code> class<a class=\"headerlink\" href=\"#page-class\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You usually won\u2019t construct <code class=\"docutils literal notranslate\"><span class=\"pre\">Page</span></code> objects by hand \u2013 you\u2019ll get them by\niterating <a class=\"reference internal\" href=\"#django.core.paginator.Paginator\" title=\"django.core.paginator.Paginator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Paginator</span></code></a>, or by using <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.page\" title=\"django.core.paginator.Paginator.page\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Paginator.page()</span></code></a>.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Page</span></code>(<em><span class=\"n\"><span class=\"pre\">object_list</span></span></em>, <em><span class=\"n\"><span class=\"pre\">number</span></span></em>, <em><span class=\"n\"><span class=\"pre\">paginator</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A page acts like a sequence of <a class=\"reference internal\" href=\"#django.core.paginator.Page.object_list\" title=\"django.core.paginator.Page.object_list\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Page.object_list</span></code></a> when using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">len()</span></code> or iterating it directly.</p>\n</dd></dl>\n\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h3>Methods<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.has_next\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">has_next</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.has_next\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.has_next\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if there\u2019s a next page.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.has_previous\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">has_previous</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.has_previous\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.has_previous\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if there\u2019s a previous page.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.has_other_pages\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">has_other_pages</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.has_other_pages\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.has_other_pages\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if there\u2019s a next <strong>or</strong> previous page.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.next_page_number\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">next_page_number</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.next_page_number\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.next_page_number\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the next page number. Raises <a class=\"reference internal\" href=\"#django.core.paginator.InvalidPage\" title=\"django.core.paginator.InvalidPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">InvalidPage</span></code></a> if next page\ndoesn\u2019t exist.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.previous_page_number\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">previous_page_number</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.previous_page_number\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.previous_page_number\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the previous page number. Raises <a class=\"reference internal\" href=\"#django.core.paginator.InvalidPage\" title=\"django.core.paginator.InvalidPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">InvalidPage</span></code></a> if previous\npage doesn\u2019t exist.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.start_index\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">start_index</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.start_index\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.start_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the 1-based index of the first object on the page, relative to all\nof the objects in the paginator\u2019s list. For example, when paginating a list\nof 5 objects with 2 objects per page, the second page\u2019s\n<a class=\"reference internal\" href=\"#django.core.paginator.Page.start_index\" title=\"django.core.paginator.Page.start_index\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">start_index()</span></code></a> would return <code class=\"docutils literal notranslate\"><span class=\"pre\">3</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.end_index\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">end_index</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#Page.end_index\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.Page.end_index\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the 1-based index of the last object on the page, relative to all\nof the objects in the paginator\u2019s list. For example, when paginating a list\nof 5 objects with 2 objects per page, the second page\u2019s\n<a class=\"reference internal\" href=\"#django.core.paginator.Page.end_index\" title=\"django.core.paginator.Page.end_index\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">end_index()</span></code></a> would return <code class=\"docutils literal notranslate\"><span class=\"pre\">4</span></code>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-id2\">\n<span id=\"id2\"></span><h3>Attributes<a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.object_list\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">object_list</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Page.object_list\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The list of objects on this page.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.number\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">number</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Page.number\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The 1-based page number for this page.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.Page.paginator\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Page.</span></code><code class=\"sig-name descname\"><span class=\"pre\">paginator</span></code><a class=\"headerlink\" href=\"#django.core.paginator.Page.paginator\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The associated <a class=\"reference internal\" href=\"#django.core.paginator.Paginator\" title=\"django.core.paginator.Paginator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Paginator</span></code></a> object.</p>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-exceptions\">\n<span id=\"exceptions\"></span><h2>Exceptions<a class=\"headerlink\" href=\"#exceptions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py exception\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.InvalidPage\">\n<em class=\"property\"><span class=\"pre\">exception</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">InvalidPage</span></code><a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#InvalidPage\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.InvalidPage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A base class for exceptions raised when a paginator is passed an invalid\npage number.</p>\n</dd></dl>\n\n<p>The <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.page\" title=\"django.core.paginator.Paginator.page\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Paginator.page()</span></code></a> method raises an exception if the requested page is\ninvalid (i.e. not an integer) or contains no objects. Generally, it\u2019s enough\nto catch the <code class=\"docutils literal notranslate\"><span class=\"pre\">InvalidPage</span></code> exception, but if you\u2019d like more granularity,\nyou can catch either of the following exceptions:</p>\n<dl class=\"py exception\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.PageNotAnInteger\">\n<em class=\"property\"><span class=\"pre\">exception</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">PageNotAnInteger</span></code><a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#PageNotAnInteger\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.PageNotAnInteger\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Raised when <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.page\" title=\"django.core.paginator.Paginator.page\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">page()</span></code></a> is given a value that isn\u2019t an integer.</p>\n</dd></dl>\n\n<dl class=\"py exception\">\n<dt class=\"sig sig-object py\" id=\"django.core.paginator.EmptyPage\">\n<em class=\"property\"><span class=\"pre\">exception</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">EmptyPage</span></code><a class=\"reference internal\" href=\"../../_modules/django/core/paginator/#EmptyPage\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.core.paginator.EmptyPage\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Raised when <a class=\"reference internal\" href=\"#django.core.paginator.Paginator.page\" title=\"django.core.paginator.Paginator.page\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">page()</span></code></a> is given a valid value but no objects\nexist on that page.</p>\n</dd></dl>\n\n<p>Both of the exceptions are subclasses of <a class=\"reference internal\" href=\"#django.core.paginator.InvalidPage\" title=\"django.core.paginator.InvalidPage\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">InvalidPage</span></code></a>, so you can handle\nthem both with <code class=\"docutils literal notranslate\"><span class=\"pre\">except</span> <span class=\"pre\">InvalidPage</span></code>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/request-response", "Request and response objects", "N", "next"], ["ref/models/database-functions", "Database Functions", "P", "previous"]], "sourcename": "ref/paginator.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Paginator</a><ul>\n<li><a class=\"reference internal\" href=\"#paginator-class\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator</span></code> class</a><ul>\n<li><a class=\"reference internal\" href=\"#methods\">Methods</a></li>\n<li><a class=\"reference internal\" href=\"#attributes\">Attributes</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#page-class\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Page</span></code> class</a><ul>\n<li><a class=\"reference internal\" href=\"#id1\">Methods</a></li>\n<li><a class=\"reference internal\" href=\"#id2\">Attributes</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#exceptions\">Exceptions</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/paginator", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
