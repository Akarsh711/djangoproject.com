{"parents": [{"link": "../", "title": "Meta-documentation and miscellany"}], "prev": {"link": "../api-stability/", "title": "API stability"}, "next": {"link": "../distributions/", "title": "Third-party distributions of Django"}, "title": "Design philosophies", "meta": {}, "body": "<div class=\"section\" id=\"s-design-philosophies\">\n<span id=\"design-philosophies\"></span><h1>Design philosophies<a class=\"headerlink\" href=\"#design-philosophies\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document explains some of the fundamental philosophies Django\u2019s developers\nhave used in creating the framework. Its goal is to explain the past and guide\nthe future.</p>\n<div class=\"section\" id=\"s-overall\">\n<span id=\"overall\"></span><h2>Overall<a class=\"headerlink\" href=\"#overall\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-loose-coupling\">\n<span id=\"s-id1\"></span><span id=\"loose-coupling\"></span><span id=\"id1\"></span><h3>Loose coupling<a class=\"headerlink\" href=\"#loose-coupling\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p id=\"index-0\">A fundamental goal of Django\u2019s stack is <a class=\"reference external\" href=\"http://wiki.c2.com/?CouplingAndCohesion\">loose coupling and tight cohesion</a>.\nThe various layers of the framework shouldn\u2019t \u201cknow\u201d about each other unless\nabsolutely necessary.</p>\n<p>For example, the template system knows nothing about web requests, the database\nlayer knows nothing about data display and the view system doesn\u2019t care which\ntemplate system a programmer uses.</p>\n<p>Although Django comes with a full stack for convenience, the pieces of the\nstack are independent of another wherever possible.</p>\n</div>\n<div class=\"section\" id=\"s-less-code\">\n<span id=\"s-id2\"></span><span id=\"less-code\"></span><span id=\"id2\"></span><h3>Less code<a class=\"headerlink\" href=\"#less-code\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django apps should use as little code as possible; they should lack boilerplate.\nDjango should take full advantage of Python\u2019s dynamic capabilities, such as\nintrospection.</p>\n</div>\n<div class=\"section\" id=\"s-quick-development\">\n<span id=\"s-id3\"></span><span id=\"quick-development\"></span><span id=\"id3\"></span><h3>Quick development<a class=\"headerlink\" href=\"#quick-development\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The point of a web framework in the 21st century is to make the tedious aspects\nof web development fast. Django should allow for incredibly quick web\ndevelopment.</p>\n</div>\n<div class=\"section\" id=\"s-don-t-repeat-yourself-dry\">\n<span id=\"s-dry\"></span><span id=\"don-t-repeat-yourself-dry\"></span><span id=\"dry\"></span><h3>Don\u2019t repeat yourself (DRY)<a class=\"headerlink\" href=\"#don-t-repeat-yourself-dry\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p id=\"index-1\">Every distinct concept and/or piece of data should live in one, and only one,\nplace. Redundancy is bad. Normalization is good.</p>\n<p>The framework, within reason, should deduce as much as possible from as little\nas possible.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">The <a class=\"reference external\" href=\"http://wiki.c2.com/?DontRepeatYourself\">discussion of DRY on the Portland Pattern Repository</a></p>\n</div>\n</div>\n<div class=\"section\" id=\"s-explicit-is-better-than-implicit\">\n<span id=\"s-id5\"></span><span id=\"explicit-is-better-than-implicit\"></span><span id=\"id5\"></span><h3>Explicit is better than implicit<a class=\"headerlink\" href=\"#explicit-is-better-than-implicit\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This is a core Python principle listed in <span class=\"target\" id=\"index-2\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0020/\"><strong>PEP 20</strong></a>, and it means Django\nshouldn\u2019t do too much \u201cmagic.\u201d Magic shouldn\u2019t happen unless there\u2019s a really\ngood reason for it. Magic is worth using only if it creates a huge convenience\nunattainable in other ways, and it isn\u2019t implemented in a way that confuses\ndevelopers who are trying to learn how to use the feature.</p>\n</div>\n<div class=\"section\" id=\"s-consistency\">\n<span id=\"s-id6\"></span><span id=\"consistency\"></span><span id=\"id6\"></span><h3>Consistency<a class=\"headerlink\" href=\"#consistency\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The framework should be consistent at all levels. Consistency applies to\neverything from low-level (the Python coding style used) to high-level (the\n\u201cexperience\u201d of using Django).</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-models\">\n<span id=\"models\"></span><h2>Models<a class=\"headerlink\" href=\"#models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-id7\">\n<span id=\"id7\"></span><h3>Explicit is better than implicit<a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Fields shouldn\u2019t assume certain behaviors based solely on the name of the\nfield. This requires too much knowledge of the system and is prone to errors.\nInstead, behaviors should be based on keyword arguments and, in some cases, on\nthe type of the field.</p>\n</div>\n<div class=\"section\" id=\"s-include-all-relevant-domain-logic\">\n<span id=\"include-all-relevant-domain-logic\"></span><h3>Include all relevant domain logic<a class=\"headerlink\" href=\"#include-all-relevant-domain-logic\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Models should encapsulate every aspect of an \u201cobject,\u201d following Martin\nFowler\u2019s <a class=\"reference external\" href=\"https://www.martinfowler.com/eaaCatalog/activeRecord.html\">Active Record</a> design pattern.</p>\n<p>This is why both the data represented by a model and information about\nit (its human-readable name, options like default ordering, etc.) are\ndefined in the model class; all the information needed to understand a\ngiven model should be stored <em>in</em> the model.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-database-api\">\n<span id=\"database-api\"></span><h2>Database API<a class=\"headerlink\" href=\"#database-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The core goals of the database API are:</p>\n<div class=\"section\" id=\"s-sql-efficiency\">\n<span id=\"sql-efficiency\"></span><h3>SQL efficiency<a class=\"headerlink\" href=\"#sql-efficiency\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It should execute SQL statements as few times as possible, and it should\noptimize statements internally.</p>\n<p>This is why developers need to call <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> explicitly, rather than the\nframework saving things behind the scenes silently.</p>\n<p>This is also why the <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> method exists. It\u2019s an\noptional performance booster for the common case of selecting \u201cevery related\nobject.\u201d</p>\n</div>\n<div class=\"section\" id=\"s-terse-powerful-syntax\">\n<span id=\"terse-powerful-syntax\"></span><h3>Terse, powerful syntax<a class=\"headerlink\" href=\"#terse-powerful-syntax\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The database API should allow rich, expressive statements in as little syntax\nas possible. It should not rely on importing other modules or helper objects.</p>\n<p>Joins should be performed automatically, behind the scenes, when necessary.</p>\n<p>Every object should be able to access every related object, systemwide. This\naccess should work both ways.</p>\n</div>\n<div class=\"section\" id=\"s-option-to-drop-into-raw-sql-easily-when-needed\">\n<span id=\"option-to-drop-into-raw-sql-easily-when-needed\"></span><h3>Option to drop into raw SQL easily, when needed<a class=\"headerlink\" href=\"#option-to-drop-into-raw-sql-easily-when-needed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The database API should realize it\u2019s a shortcut but not necessarily an\nend-all-be-all. The framework should make it easy to write custom SQL \u2013 entire\nstatements, or just custom <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clauses as custom parameters to API calls.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-url-design\">\n<span id=\"url-design\"></span><h2>URL design<a class=\"headerlink\" href=\"#url-design\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-id8\">\n<span id=\"id8\"></span><h3>Loose coupling<a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>URLs in a Django app should not be coupled to the underlying Python code. Tying\nURLs to Python function names is a Bad And Ugly Thing.</p>\n<p>Along these lines, the Django URL system should allow URLs for the same app to\nbe different in different contexts. For example, one site may put stories at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/stories/</span></code>, while another may use <code class=\"docutils literal notranslate\"><span class=\"pre\">/news/</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-infinite-flexibility\">\n<span id=\"infinite-flexibility\"></span><h3>Infinite flexibility<a class=\"headerlink\" href=\"#infinite-flexibility\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>URLs should be as flexible as possible. Any conceivable URL design should be\nallowed.</p>\n</div>\n<div class=\"section\" id=\"s-encourage-best-practices\">\n<span id=\"encourage-best-practices\"></span><h3>Encourage best practices<a class=\"headerlink\" href=\"#encourage-best-practices\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The framework should make it just as easy (or even easier) for a developer to\ndesign pretty URLs than ugly ones.</p>\n<p>File extensions in web-page URLs should be avoided.</p>\n<p>Vignette-style commas in URLs deserve severe punishment.</p>\n</div>\n<div class=\"section\" id=\"s-definitive-urls\">\n<span id=\"s-id9\"></span><span id=\"definitive-urls\"></span><span id=\"id9\"></span><h3>Definitive URLs<a class=\"headerlink\" href=\"#definitive-urls\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p id=\"index-3\">Technically, <code class=\"docutils literal notranslate\"><span class=\"pre\">foo.com/bar</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">foo.com/bar/</span></code> are two different URLs, and\nsearch-engine robots (and some web traffic-analyzing tools) would treat them as\nseparate pages. Django should make an effort to \u201cnormalize\u201d URLs so that\nsearch-engine robots don\u2019t get confused.</p>\n<p>This is the reasoning behind the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-APPEND_SLASH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APPEND_SLASH</span></code></a> setting.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-template-system\">\n<span id=\"template-system\"></span><h2>Template system<a class=\"headerlink\" href=\"#template-system\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-separate-logic-from-presentation\">\n<span id=\"s-separation-of-logic-and-presentation\"></span><span id=\"separate-logic-from-presentation\"></span><span id=\"separation-of-logic-and-presentation\"></span><h3>Separate logic from presentation<a class=\"headerlink\" href=\"#separate-logic-from-presentation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We see a template system as a tool that controls presentation and\npresentation-related logic \u2013 and that\u2019s it. The template system shouldn\u2019t\nsupport functionality that goes beyond this basic goal.</p>\n</div>\n<div class=\"section\" id=\"s-discourage-redundancy\">\n<span id=\"discourage-redundancy\"></span><h3>Discourage redundancy<a class=\"headerlink\" href=\"#discourage-redundancy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The majority of dynamic websites use some sort of common sitewide design \u2013\na common header, footer, navigation bar, etc. The Django template system should\nmake it easy to store those elements in a single place, eliminating duplicate\ncode.</p>\n<p>This is the philosophy behind <a class=\"reference internal\" href=\"../../ref/templates/language/#template-inheritance\"><span class=\"std std-ref\">template inheritance</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-be-decoupled-from-html\">\n<span id=\"be-decoupled-from-html\"></span><h3>Be decoupled from HTML<a class=\"headerlink\" href=\"#be-decoupled-from-html\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system shouldn\u2019t be designed so that it only outputs HTML. It\nshould be equally good at generating other text-based formats, or just plain\ntext.</p>\n</div>\n<div class=\"section\" id=\"s-xml-should-not-be-used-for-template-languages\">\n<span id=\"xml-should-not-be-used-for-template-languages\"></span><h3>XML should not be used for template languages<a class=\"headerlink\" href=\"#xml-should-not-be-used-for-template-languages\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p id=\"index-4\">Using an XML engine to parse templates introduces a whole new world of human\nerror in editing templates \u2013 and incurs an unacceptable level of overhead in\ntemplate processing.</p>\n</div>\n<div class=\"section\" id=\"s-assume-designer-competence\">\n<span id=\"assume-designer-competence\"></span><h3>Assume designer competence<a class=\"headerlink\" href=\"#assume-designer-competence\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system shouldn\u2019t be designed so that templates necessarily are\ndisplayed nicely in WYSIWYG editors such as Dreamweaver. That is too severe of\na limitation and wouldn\u2019t allow the syntax to be as nice as it is. Django\nexpects template authors are comfortable editing HTML directly.</p>\n</div>\n<div class=\"section\" id=\"s-treat-whitespace-obviously\">\n<span id=\"treat-whitespace-obviously\"></span><h3>Treat whitespace obviously<a class=\"headerlink\" href=\"#treat-whitespace-obviously\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system shouldn\u2019t do magic things with whitespace. If a template\nincludes whitespace, the system should treat the whitespace as it treats text\n\u2013 just display it. Any whitespace that\u2019s not in a template tag should be\ndisplayed.</p>\n</div>\n<div class=\"section\" id=\"s-don-t-invent-a-programming-language\">\n<span id=\"don-t-invent-a-programming-language\"></span><h3>Don\u2019t invent a programming language<a class=\"headerlink\" href=\"#don-t-invent-a-programming-language\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The goal is not to invent a programming language. The goal is to offer just\nenough programming-esque functionality, such as branching and looping, that is\nessential for making presentation-related decisions. The <a class=\"reference internal\" href=\"../../topics/templates/#template-language-intro\"><span class=\"std std-ref\">Django Template\nLanguage (DTL)</span></a> aims to avoid advanced logic.</p>\n<p>The Django template system recognizes that templates are most often written by\n<em>designers</em>, not <em>programmers</em>, and therefore should not assume Python\nknowledge.</p>\n</div>\n<div class=\"section\" id=\"s-safety-and-security\">\n<span id=\"safety-and-security\"></span><h3>Safety and security<a class=\"headerlink\" href=\"#safety-and-security\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system, out of the box, should forbid the inclusion of malicious\ncode \u2013 such as commands that delete database records.</p>\n<p>This is another reason the template system doesn\u2019t allow arbitrary Python code.</p>\n</div>\n<div class=\"section\" id=\"s-extensibility\">\n<span id=\"extensibility\"></span><h3>Extensibility<a class=\"headerlink\" href=\"#extensibility\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system should recognize that advanced template authors may want\nto extend its technology.</p>\n<p>This is the philosophy behind custom template tags and filters.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-views\">\n<span id=\"views\"></span><h2>Views<a class=\"headerlink\" href=\"#views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-simplicity\">\n<span id=\"simplicity\"></span><h3>Simplicity<a class=\"headerlink\" href=\"#simplicity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Writing a view should be as simple as writing a Python function. Developers\nshouldn\u2019t have to instantiate a class when a function will do.</p>\n</div>\n<div class=\"section\" id=\"s-use-request-objects\">\n<span id=\"use-request-objects\"></span><h3>Use request objects<a class=\"headerlink\" href=\"#use-request-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Views should have access to a request object \u2013 an object that stores metadata\nabout the current request. The object should be passed directly to a view\nfunction, rather than the view function having to access the request data from\na global variable. This makes it light, clean and easy to test views by passing\nin \u201cfake\u201d request objects.</p>\n</div>\n<div class=\"section\" id=\"s-id10\">\n<span id=\"id10\"></span><h3>Loose coupling<a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A view shouldn\u2019t care about which template system the developer uses \u2013 or even\nwhether a template system is used at all.</p>\n</div>\n<div class=\"section\" id=\"s-differentiate-between-get-and-post\">\n<span id=\"differentiate-between-get-and-post\"></span><h3>Differentiate between GET and POST<a class=\"headerlink\" href=\"#differentiate-between-get-and-post\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>GET and POST are distinct; developers should explicitly use one or the other.\nThe framework should make it easy to distinguish between GET and POST data.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-cache-framework\">\n<span id=\"s-cache-design-philosophy\"></span><span id=\"cache-framework\"></span><span id=\"cache-design-philosophy\"></span><h2>Cache Framework<a class=\"headerlink\" href=\"#cache-framework\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The core goals of Django\u2019s <a class=\"reference internal\" href=\"../../topics/cache/\"><span class=\"doc\">cache framework</span></a> are:</p>\n<div class=\"section\" id=\"s-id11\">\n<span id=\"id11\"></span><h3>Less code<a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A cache should be as fast as possible.  Hence, all framework code surrounding\nthe cache backend should be kept to the absolute minimum, especially for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> operations.</p>\n</div>\n<div class=\"section\" id=\"s-id12\">\n<span id=\"id12\"></span><h3>Consistency<a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The cache API should provide a consistent interface across the different\ncache backends.</p>\n</div>\n<div class=\"section\" id=\"s-id13\">\n<span id=\"id13\"></span><h3>Extensibility<a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The cache API should be extensible at the application level based on the\ndeveloper\u2019s needs (for example, see <a class=\"reference internal\" href=\"../../topics/cache/#cache-key-transformation\"><span class=\"std std-ref\">Cache key transformation</span></a>).</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["misc/distributions", "Third-party distributions of Django", "N", "next"], ["misc/api-stability", "API stability", "P", "previous"]], "sourcename": "misc/design-philosophies.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Design philosophies</a><ul>\n<li><a class=\"reference internal\" href=\"#overall\">Overall</a><ul>\n<li><a class=\"reference internal\" href=\"#loose-coupling\">Loose coupling</a></li>\n<li><a class=\"reference internal\" href=\"#less-code\">Less code</a></li>\n<li><a class=\"reference internal\" href=\"#quick-development\">Quick development</a></li>\n<li><a class=\"reference internal\" href=\"#don-t-repeat-yourself-dry\">Don\u2019t repeat yourself (DRY)</a></li>\n<li><a class=\"reference internal\" href=\"#explicit-is-better-than-implicit\">Explicit is better than implicit</a></li>\n<li><a class=\"reference internal\" href=\"#consistency\">Consistency</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#models\">Models</a><ul>\n<li><a class=\"reference internal\" href=\"#id7\">Explicit is better than implicit</a></li>\n<li><a class=\"reference internal\" href=\"#include-all-relevant-domain-logic\">Include all relevant domain logic</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#database-api\">Database API</a><ul>\n<li><a class=\"reference internal\" href=\"#sql-efficiency\">SQL efficiency</a></li>\n<li><a class=\"reference internal\" href=\"#terse-powerful-syntax\">Terse, powerful syntax</a></li>\n<li><a class=\"reference internal\" href=\"#option-to-drop-into-raw-sql-easily-when-needed\">Option to drop into raw SQL easily, when needed</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#url-design\">URL design</a><ul>\n<li><a class=\"reference internal\" href=\"#id8\">Loose coupling</a></li>\n<li><a class=\"reference internal\" href=\"#infinite-flexibility\">Infinite flexibility</a></li>\n<li><a class=\"reference internal\" href=\"#encourage-best-practices\">Encourage best practices</a></li>\n<li><a class=\"reference internal\" href=\"#definitive-urls\">Definitive URLs</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#template-system\">Template system</a><ul>\n<li><a class=\"reference internal\" href=\"#separate-logic-from-presentation\">Separate logic from presentation</a></li>\n<li><a class=\"reference internal\" href=\"#discourage-redundancy\">Discourage redundancy</a></li>\n<li><a class=\"reference internal\" href=\"#be-decoupled-from-html\">Be decoupled from HTML</a></li>\n<li><a class=\"reference internal\" href=\"#xml-should-not-be-used-for-template-languages\">XML should not be used for template languages</a></li>\n<li><a class=\"reference internal\" href=\"#assume-designer-competence\">Assume designer competence</a></li>\n<li><a class=\"reference internal\" href=\"#treat-whitespace-obviously\">Treat whitespace obviously</a></li>\n<li><a class=\"reference internal\" href=\"#don-t-invent-a-programming-language\">Don\u2019t invent a programming language</a></li>\n<li><a class=\"reference internal\" href=\"#safety-and-security\">Safety and security</a></li>\n<li><a class=\"reference internal\" href=\"#extensibility\">Extensibility</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#views\">Views</a><ul>\n<li><a class=\"reference internal\" href=\"#simplicity\">Simplicity</a></li>\n<li><a class=\"reference internal\" href=\"#use-request-objects\">Use request objects</a></li>\n<li><a class=\"reference internal\" href=\"#id10\">Loose coupling</a></li>\n<li><a class=\"reference internal\" href=\"#differentiate-between-get-and-post\">Differentiate between GET and POST</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#cache-framework\">Cache Framework</a><ul>\n<li><a class=\"reference internal\" href=\"#id11\">Less code</a></li>\n<li><a class=\"reference internal\" href=\"#id12\">Consistency</a></li>\n<li><a class=\"reference internal\" href=\"#id13\">Extensibility</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "misc/design-philosophies", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}