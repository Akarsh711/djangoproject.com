{"parents": [{"link": "../", "title": "Getting started"}], "prev": {"link": "../", "title": "Getting started"}, "next": {"link": "../install/", "title": "Quick install guide"}, "title": "Django at a glance", "meta": {}, "body": "<div class=\"section\" id=\"s-django-at-a-glance\">\n<span id=\"django-at-a-glance\"></span><h1>Django at a glance<a class=\"headerlink\" href=\"#django-at-a-glance\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Because Django was developed in a fast-paced newsroom environment, it was\ndesigned to make common web development tasks fast and easy. Here\u2019s an informal\noverview of how to write a database-driven web app with Django.</p>\n<p>The goal of this document is to give you enough technical specifics to\nunderstand how Django works, but this isn\u2019t intended to be a tutorial or\nreference \u2013 but we\u2019ve got both! When you\u2019re ready to start a project, you can\n<a class=\"reference internal\" href=\"../tutorial01/\"><span class=\"doc\">start with the tutorial</span></a> or <a class=\"reference internal\" href=\"../../topics/\"><span class=\"doc\">dive right into more\ndetailed documentation</span></a>.</p>\n<div class=\"section\" id=\"s-design-your-model\">\n<span id=\"design-your-model\"></span><h2>Design your model<a class=\"headerlink\" href=\"#design-your-model\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Although you can use Django without a database, it comes with an\n<a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Object-relational_mapping\">object-relational mapper</a> in which you describe your database layout in Python\ncode.</p>\n<p>The <a class=\"reference internal\" href=\"../../topics/db/models/\"><span class=\"doc\">data-model syntax</span></a> offers many rich ways of\nrepresenting your models \u2013 so far, it\u2019s been solving many years\u2019 worth of\ndatabase-schema problems. Here\u2019s a quick example:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/news/models.py</span></code></span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Reporter</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">70</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">full_name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Reporter</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headline</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-install-it\">\n<span id=\"install-it\"></span><h2>Install it<a class=\"headerlink\" href=\"#install-it\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Next, run the Django command-line utilities to create the database tables\nautomatically:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py makemigrations\n<span class=\"gp\">$ </span>python manage.py migrate\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py makemigrations\n<span class=\"gp\">...\\&gt;</span> py manage.py migrate\n</pre></div>\n</section>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> command looks at all your available models and\ncreates migrations for whichever tables don\u2019t already exist. <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>\nruns the migrations and creates tables in your database, as well as optionally\nproviding <a class=\"reference internal\" href=\"../../topics/migrations/\"><span class=\"doc\">much richer schema control</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-enjoy-the-free-api\">\n<span id=\"enjoy-the-free-api\"></span><h2>Enjoy the free API<a class=\"headerlink\" href=\"#enjoy-the-free-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>With that, you\u2019ve got a free, and rich, <a class=\"reference internal\" href=\"../../topics/db/queries/\"><span class=\"doc\">Python API</span></a>\nto access your data. The API is created on the fly, no code generation\nnecessary:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># Import the models we created from our &quot;news&quot; app</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">news.models</span> <span class=\"kn\">import</span> <span class=\"n\">Article</span><span class=\"p\">,</span> <span class=\"n\">Reporter</span>\n\n<span class=\"go\"># No reporters are in the system yet.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n\n<span class=\"go\"># Create a new Reporter.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">Reporter</span><span class=\"p\">(</span><span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John Smith&quot;</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Save the object into the database. You have to call save() explicitly.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"go\"># Now it has an ID.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"go\">1</span>\n\n<span class=\"go\"># Now the new reporter is in the database.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Reporter: John Smith&gt;]&gt;</span>\n\n<span class=\"go\"># Fields are represented as attributes on the Python object.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">full_name</span>\n<span class=\"go\">&#39;John Smith&#39;</span>\n\n<span class=\"go\"># Django provides a rich database lookup API.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Reporter: John Smith&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">full_name__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Reporter: John Smith&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">full_name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;mith&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Reporter: John Smith&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">DoesNotExist</span>: <span class=\"n\">Reporter matching query does not exist.</span>\n\n<span class=\"go\"># Create an article.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">(),</span> <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django is cool&quot;</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s2\">&quot;Yeah.&quot;</span><span class=\"p\">,</span> <span class=\"n\">reporter</span><span class=\"o\">=</span><span class=\"n\">r</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"go\"># Now the article is in the database.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Article: Django is cool&gt;]&gt;</span>\n\n<span class=\"go\"># Article objects get API access to related Reporter objects.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">reporter</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">full_name</span>\n<span class=\"go\">&#39;John Smith&#39;</span>\n\n<span class=\"go\"># And vice versa: Reporter objects get API access to Article objects.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">article_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Article: Django is cool&gt;]&gt;</span>\n\n<span class=\"go\"># The API follows relationships as far as you need, performing efficient</span>\n<span class=\"go\"># JOINs for you behind the scenes.</span>\n<span class=\"go\"># This finds all articles by a reporter whose name starts with &quot;John&quot;.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">reporter__full_name__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Article: Django is cool&gt;]&gt;</span>\n\n<span class=\"go\"># Change an object by altering its attributes and calling save().</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Billy Goat&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"go\"># Delete an object with delete().</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-a-dynamic-admin-interface-it-s-not-just-scaffolding-it-s-the-whole-house\">\n<span id=\"a-dynamic-admin-interface-it-s-not-just-scaffolding-it-s-the-whole-house\"></span><h2>A dynamic admin interface: it\u2019s not just scaffolding \u2013 it\u2019s the whole house<a class=\"headerlink\" href=\"#a-dynamic-admin-interface-it-s-not-just-scaffolding-it-s-the-whole-house\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once your models are defined, Django can automatically create a professional,\nproduction ready <a class=\"reference internal\" href=\"../../ref/contrib/admin/\"><span class=\"doc\">administrative interface</span></a> \u2013\na website that lets authenticated users add, change and delete objects. The\nonly step required is to register your model in the admin site:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/news/models.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Reporter</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/news/admin.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Article</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>The philosophy here is that your site is edited by a staff, or a client, or\nmaybe just you \u2013 and you don\u2019t want to have to deal with creating backend\ninterfaces only to manage content.</p>\n<p>One typical workflow in creating Django apps is to create models and get the\nadmin sites up and running as fast as possible, so your staff (or clients) can\nstart populating data. Then, develop the way data is presented to the public.</p>\n</div>\n<div class=\"section\" id=\"s-design-your-urls\">\n<span id=\"design-your-urls\"></span><h2>Design your URLs<a class=\"headerlink\" href=\"#design-your-urls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A clean, elegant URL scheme is an important detail in a high-quality web\napplication. Django encourages beautiful URL design and doesn\u2019t put any cruft\nin URLs, like <code class=\"docutils literal notranslate\"><span class=\"pre\">.php</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">.asp</span></code>.</p>\n<p>To design URLs for an app, you create a Python module called a <a class=\"reference internal\" href=\"../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a>. A table of contents for your app, it contains a mapping\nbetween URL patterns and Python callback functions. URLconfs also serve to\ndecouple URLs from Python code.</p>\n<p>Here\u2019s what a URLconf might look like for the <code class=\"docutils literal notranslate\"><span class=\"pre\">Reporter</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">Article</span></code>\nexample above:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/news/urls.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;articles/&lt;int:year&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">year_archive</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">month_archive</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;int:pk&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">article_detail</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>The code above maps URL paths to Python callback functions (\u201cviews\u201d). The path\nstrings use parameter tags to \u201ccapture\u201d values from the URLs. When a user\nrequests a page, Django runs through each path, in order, and stops at the\nfirst one that matches the requested URL. (If none of them matches, Django\ncalls a special-case 404 view.) This is blazingly fast, because the paths are\ncompiled into regular expressions at load time.</p>\n<p>Once one of the URL patterns matches, Django calls the given view, which is a\nPython function. Each view gets passed a request object \u2013 which contains\nrequest metadata \u2013 and the values captured in the pattern.</p>\n<p>For example, if a user requested the URL \u201c/articles/2005/05/39323/\u201d, Django\nwould call the function <code class=\"docutils literal notranslate\"><span class=\"pre\">news.views.article_detail(request,</span>\n<span class=\"pre\">year=2005,</span> <span class=\"pre\">month=5,</span> <span class=\"pre\">pk=39323)</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-write-your-views\">\n<span id=\"write-your-views\"></span><h2>Write your views<a class=\"headerlink\" href=\"#write-your-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Each view is responsible for doing one of two things: Returning an\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> object containing the content for the\nrequested page, or raising an exception such as <a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a>.\nThe rest is up to you.</p>\n<p>Generally, a view retrieves data according to the parameters, loads a template\nand renders the template with the retrieved data. Here\u2019s an example view for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">year_archive</span></code> from above:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/news/views.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Article</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">year_archive</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"p\">):</span>\n    <span class=\"n\">a_list</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"n\">year</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;year&quot;</span><span class=\"p\">:</span> <span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"s2\">&quot;article_list&quot;</span><span class=\"p\">:</span> <span class=\"n\">a_list</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;news/year_archive.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>This example uses Django\u2019s <a class=\"reference internal\" href=\"../../topics/templates/\"><span class=\"doc\">template system</span></a>, which has\nseveral powerful features but strives to stay simple enough for non-programmers\nto use.</p>\n</div>\n<div class=\"section\" id=\"s-design-your-templates\">\n<span id=\"design-your-templates\"></span><h2>Design your templates<a class=\"headerlink\" href=\"#design-your-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The code above loads the <code class=\"docutils literal notranslate\"><span class=\"pre\">news/year_archive.html</span></code> template.</p>\n<p>Django has a template search path, which allows you to minimize redundancy among\ntemplates. In your Django settings, you specify a list of directories to check\nfor templates with <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a>. If a template doesn\u2019t exist\nin the first directory, it checks the second, and so on.</p>\n<p>Let\u2019s say the <code class=\"docutils literal notranslate\"><span class=\"pre\">news/year_archive.html</span></code> template was found. Here\u2019s what that\nmight look like:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/news/templates/news/year_archive.html</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base.html&quot;</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}</span>Articles for <span class=\"cp\">{{</span> <span class=\"nv\">year</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>Articles for <span class=\"cp\">{{</span> <span class=\"nv\">year</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">article</span> <span class=\"k\">in</span> <span class=\"nv\">article_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">article.headline</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>By <span class=\"cp\">{{</span> <span class=\"nv\">article.reporter.full_name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>Published <span class=\"cp\">{{</span> <span class=\"nv\">article.pub_date</span><span class=\"o\">|</span><span class=\"nf\">date</span><span class=\"s2\">:&quot;F j, Y&quot;</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<p>Variables are surrounded by double-curly braces. <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">article.headline</span> <span class=\"pre\">}}</span></code>\nmeans \u201cOutput the value of the article\u2019s headline attribute.\u201d But dots aren\u2019t\nused only for attribute lookup. They also can do dictionary-key lookup, index\nlookup and function calls.</p>\n<p>Note <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">article.pub_date|date:&quot;F</span> <span class=\"pre\">j,</span> <span class=\"pre\">Y&quot;</span> <span class=\"pre\">}}</span></code> uses a Unix-style \u201cpipe\u201d (the \u201c|\u201d\ncharacter). This is called a template filter, and it\u2019s a way to filter the value\nof a variable. In this case, the date filter formats a Python datetime object in\nthe given format (as found in PHP\u2019s date function).</p>\n<p>You can chain together as many filters as you\u2019d like. You can write <a class=\"reference internal\" href=\"../../howto/custom-template-tags/#howto-writing-custom-template-filters\"><span class=\"std std-ref\">custom\ntemplate filters</span></a>. You can write\n<a class=\"reference internal\" href=\"../../howto/custom-template-tags/\"><span class=\"doc\">custom template tags</span></a>, which run custom\nPython code behind the scenes.</p>\n<p>Finally, Django uses the concept of \u201ctemplate inheritance\u201d. That\u2019s what the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">&quot;base.html&quot;</span> <span class=\"pre\">%}</span></code> does. It means \u201cFirst load the template called\n\u2018base\u2019, which has defined a bunch of blocks, and fill the blocks with the\nfollowing blocks.\u201d In short, that lets you dramatically cut down on redundancy\nin templates: each template has to define only what\u2019s unique to that template.</p>\n<p>Here\u2019s what the \u201cbase.html\u201d template, including the use of <a class=\"reference internal\" href=\"../../howto/static-files/\"><span class=\"doc\">static files</span></a>, might look like:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/templates/base.html</span></code></span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">title</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">title</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">head</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">&#39;images/sitelogo.png&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;Logo&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">body</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">html</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<p>Simplistically, it defines the look-and-feel of the site (with the site\u2019s logo),\nand provides \u201choles\u201d for child templates to fill. This means that a site redesign\ncan be done by changing a single file \u2013 the base template.</p>\n<p>It also lets you create multiple versions of a site, with different base\ntemplates, while reusing child templates. Django\u2019s creators have used this\ntechnique to create strikingly different mobile versions of sites by only\ncreating a new base template.</p>\n<p>Note that you don\u2019t have to use Django\u2019s template system if you prefer another\nsystem. While Django\u2019s template system is particularly well-integrated with\nDjango\u2019s model layer, nothing forces you to use it. For that matter, you don\u2019t\nhave to use Django\u2019s database API, either. You can use another database\nabstraction layer, you can read XML files, you can read files off disk, or\nanything you want. Each piece of Django \u2013 models, views, templates \u2013 is\ndecoupled from the next.</p>\n</div>\n<div class=\"section\" id=\"s-this-is-just-the-surface\">\n<span id=\"this-is-just-the-surface\"></span><h2>This is just the surface<a class=\"headerlink\" href=\"#this-is-just-the-surface\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This has been only a quick overview of Django\u2019s functionality. Some more useful\nfeatures:</p>\n<ul class=\"simple\">\n<li>A <a class=\"reference internal\" href=\"../../topics/cache/\"><span class=\"doc\">caching framework</span></a> that integrates with memcached\nor other backends.</li>\n<li>A <a class=\"reference internal\" href=\"../../ref/contrib/syndication/\"><span class=\"doc\">syndication framework</span></a> that lets you\ncreate RSS and Atom feeds by writing a small Python class.</li>\n<li>More attractive automatically-generated admin features \u2013 this overview\nbarely scratched the surface.</li>\n</ul>\n<p>The next steps are for you to <a class=\"reference external\" href=\"https://www.djangoproject.com/download/\">download Django</a>, read <a class=\"reference internal\" href=\"../tutorial01/\"><span class=\"doc\">the tutorial</span></a> and join <a class=\"reference external\" href=\"https://www.djangoproject.com/community/\">the community</a>. Thanks for your interest!</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["intro/install", "Quick install guide", "N", "next"], ["intro/index", "Getting started", "P", "previous"]], "sourcename": "intro/overview.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django at a glance</a><ul>\n<li><a class=\"reference internal\" href=\"#design-your-model\">Design your model</a></li>\n<li><a class=\"reference internal\" href=\"#install-it\">Install it</a></li>\n<li><a class=\"reference internal\" href=\"#enjoy-the-free-api\">Enjoy the free API</a></li>\n<li><a class=\"reference internal\" href=\"#a-dynamic-admin-interface-it-s-not-just-scaffolding-it-s-the-whole-house\">A dynamic admin interface: it\u2019s not just scaffolding \u2013 it\u2019s the whole house</a></li>\n<li><a class=\"reference internal\" href=\"#design-your-urls\">Design your URLs</a></li>\n<li><a class=\"reference internal\" href=\"#write-your-views\">Write your views</a></li>\n<li><a class=\"reference internal\" href=\"#design-your-templates\">Design your templates</a></li>\n<li><a class=\"reference internal\" href=\"#this-is-just-the-surface\">This is just the surface</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "intro/overview", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}