{"parents": [{"link": "../", "title": "Getting started"}], "prev": {"link": "../tutorial01/", "title": "Writing your first Django app, part 1"}, "next": {"link": "../tutorial03/", "title": "Writing your first Django app, part 3"}, "title": "Writing your first Django app, part 2", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-your-first-django-app-part-2\">\n<span id=\"writing-your-first-django-app-part-2\"></span><h1>Writing your first Django app, part 2<a class=\"headerlink\" href=\"#writing-your-first-django-app-part-2\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This tutorial begins where <a class=\"reference internal\" href=\"../tutorial01/\"><span class=\"doc\">Tutorial 1</span></a> left off.\nWe\u2019ll set up the database, create your first model, and get a quick\nintroduction to Django\u2019s automatically-generated admin site.</p>\n<div class=\"admonition-where-to-get-help admonition\">\n<p class=\"first admonition-title\">Where to get help:</p>\n<p class=\"last\">If you\u2019re having trouble going through this tutorial, please head over to\nthe <a class=\"reference internal\" href=\"../../faq/help/\"><span class=\"doc\">Getting Help</span></a> section of the FAQ.</p>\n</div>\n<div class=\"section\" id=\"s-database-setup\">\n<span id=\"database-setup\"></span><h2>Database setup<a class=\"headerlink\" href=\"#database-setup\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now, open up <code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code>. It\u2019s a normal Python module with\nmodule-level variables representing Django settings.</p>\n<p>By default, the configuration uses SQLite. If you\u2019re new to databases, or\nyou\u2019re just interested in trying Django, this is the easiest choice. SQLite is\nincluded in Python, so you won\u2019t need to install anything else to support your\ndatabase. When starting your first real project, however, you may want to use a\nmore scalable database like PostgreSQL, to avoid database-switching headaches\ndown the road.</p>\n<p>If you wish to use another database, install the appropriate <a class=\"reference internal\" href=\"../../topics/install/#database-installation\"><span class=\"std std-ref\">database\nbindings</span></a> and change the following keys in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">'default'</span></code> item to match your database connection\nsettings:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ENGINE</span></code></a> \u2013 Either\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.db.backends.sqlite3'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.db.backends.postgresql'</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.db.backends.mysql'</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.db.backends.oracle'</span></code>. Other backends are <a class=\"reference internal\" href=\"../../ref/databases/#third-party-notes\"><span class=\"std std-ref\">also available</span></a>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> \u2013 The name of your database. If you\u2019re using SQLite, the\ndatabase will be a file on your computer; in that case, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a>\nshould be the full absolute path, including filename, of that file. The\ndefault value, <code class=\"docutils literal notranslate\"><span class=\"pre\">BASE_DIR</span> <span class=\"pre\">/</span> <span class=\"pre\">'db.sqlite3'</span></code>, will store the file in your\nproject directory.</li>\n</ul>\n<p>If you are not using SQLite as your database, additional settings such as\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a>, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD</span></code></a>, and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a> must be added.\nFor more details, see the reference documentation for <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>.</p>\n<div class=\"admonition-for-databases-other-than-sqlite admonition\">\n<p class=\"first admonition-title\">For databases other than SQLite</p>\n<p>If you\u2019re using a database besides SQLite, make sure you\u2019ve created a\ndatabase by this point. Do that with \u201c<code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">DATABASE</span> <span class=\"pre\">database_name;</span></code>\u201d\nwithin your database\u2019s interactive prompt.</p>\n<p>Also make sure that the database user provided in <code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code>\nhas \u201ccreate database\u201d privileges. This allows automatic creation of a\n<a class=\"reference internal\" href=\"../../topics/testing/overview/#the-test-database\"><span class=\"std std-ref\">test database</span></a> which will be needed in a later\ntutorial.</p>\n<p class=\"last\">If you\u2019re using SQLite, you don\u2019t need to create anything beforehand - the\ndatabase file will be created automatically when it is needed.</p>\n</div>\n<p>While you\u2019re editing <code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code>, set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TIME_ZONE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code></a> to\nyour time zone.</p>\n<p>Also, note the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting at the top of the file. That\nholds the names of all Django applications that are activated in this Django\ninstance. Apps can be used in multiple projects, and you can package and\ndistribute them for use by others in their projects.</p>\n<p>By default, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> contains the following apps, all of which\ncome with Django:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a> \u2013 The admin site. You\u2019ll use it shortly.</li>\n<li><a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a> \u2013 An authentication system.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes\" title=\"django.contrib.contenttypes: Provides generic interface to installed models.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes</span></code></a> \u2013 A framework for content types.</li>\n<li><a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a> \u2013 A session framework.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/messages/#module-django.contrib.messages\" title=\"django.contrib.messages: Provides cookie- and session-based temporary message storage.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.messages</span></code></a> \u2013 A messaging framework.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a> \u2013 A framework for managing\nstatic files.</li>\n</ul>\n<p>These applications are included by default as a convenience for the common case.</p>\n<p>Some of these applications make use of at least one database table, though,\nso we need to create the tables in the database before we can use them. To do\nthat, run the following command:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py migrate\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py migrate\n</pre></div>\n</section>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> command looks at the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting\nand creates any necessary database tables according to the database settings\nin your <code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code> file and the database migrations shipped\nwith the app (we\u2019ll cover those later). You\u2019ll see a message for each\nmigration it applies. If you\u2019re interested, run the command-line client for your\ndatabase and type <code class=\"docutils literal notranslate\"><span class=\"pre\">\\dt</span></code> (PostgreSQL), <code class=\"docutils literal notranslate\"><span class=\"pre\">SHOW</span> <span class=\"pre\">TABLES;</span></code> (MariaDB, MySQL),\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.tables</span></code> (SQLite), or <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">TABLE_NAME</span> <span class=\"pre\">FROM</span> <span class=\"pre\">USER_TABLES;</span></code> (Oracle) to\ndisplay the tables Django created.</p>\n<div class=\"admonition-for-the-minimalists admonition\">\n<p class=\"first admonition-title\">For the minimalists</p>\n<p class=\"last\">Like we said above, the default applications are included for the common\ncase, but not everybody needs them. If you don\u2019t need any or all of them,\nfeel free to comment-out or delete the appropriate line(s) from\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> before running <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>. The\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> command will only run migrations for apps in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-creating-models\">\n<span id=\"s-id1\"></span><span id=\"creating-models\"></span><span id=\"id1\"></span><h2>Creating models<a class=\"headerlink\" href=\"#creating-models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now we\u2019ll define your models \u2013 essentially, your database layout, with\nadditional metadata.</p>\n<div class=\"admonition-philosophy admonition\">\n<p class=\"first admonition-title\">Philosophy</p>\n<p>A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you\u2019re storing.\nDjango follows the <a class=\"reference internal\" href=\"../../misc/design-philosophies/#dry\"><span class=\"std std-ref\">DRY Principle</span></a>. The goal is to define your\ndata model in one place and automatically derive things from it.</p>\n<p class=\"last\">This includes the migrations - unlike in Ruby On Rails, for example, migrations\nare entirely derived from your models file, and are essentially a\nhistory that Django can roll through to update your database schema to\nmatch your current models.</p>\n</div>\n<p>In our poll app, we\u2019ll create two models: <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code>. A\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> has a question and a publication date. A <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> has two\nfields: the text of the choice and a vote tally. Each <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> is associated\nwith a <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>.</p>\n<p>These concepts are represented by Python classes. Edit the\n<code class=\"file docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code> file so it looks like this:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">question_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">(</span><span class=\"s2\">&quot;date published&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Choice</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">choice_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">votes</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Here, each model is represented by a class that subclasses\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model\" title=\"django.db.models.Model\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Model</span></code></a>. Each model has a number of class variables,\neach of which represents a database field in the model.</p>\n<p>Each field is represented by an instance of a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>\nclass \u2013 e.g., <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> for character fields and\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> for datetimes. This tells Django what\ntype of data each field holds.</p>\n<p>The name of each <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> instance (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">question_text</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code>) is the field\u2019s name, in machine-friendly\nformat. You\u2019ll use this value in your Python code, and your database will use\nit as the column name.</p>\n<p>You can use an optional first positional argument to a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> to designate a human-readable name. That\u2019s used\nin a couple of introspective parts of Django, and it doubles as documentation.\nIf this field isn\u2019t provided, Django will use the machine-readable name. In this\nexample, we\u2019ve only defined a human-readable name for <code class=\"docutils literal notranslate\"><span class=\"pre\">Question.pub_date</span></code>.\nFor all other fields in this model, the field\u2019s machine-readable name will\nsuffice as its human-readable name.</p>\n<p>Some <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> classes have required arguments.\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>, for example, requires that you give it a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField.max_length\" title=\"django.db.models.CharField.max_length\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">max_length</span></code></a>. That\u2019s used not only in the\ndatabase schema, but in validation, as we\u2019ll soon see.</p>\n<p>A <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> can also have various optional arguments; in\nthis case, we\u2019ve set the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a> value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">votes</span></code> to 0.</p>\n<p>Finally, note a relationship is defined, using\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>. That tells Django each <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> is\nrelated to a single <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>. Django supports all the common database\nrelationships: many-to-one, many-to-many, and one-to-one.</p>\n</div>\n<div class=\"section\" id=\"s-activating-models\">\n<span id=\"activating-models\"></span><h2>Activating models<a class=\"headerlink\" href=\"#activating-models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>That small bit of model code gives Django a lot of information. With it, Django\nis able to:</p>\n<ul class=\"simple\">\n<li>Create a database schema (<code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">TABLE</span></code> statements) for this app.</li>\n<li>Create a Python database-access API for accessing <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> objects.</li>\n</ul>\n<p>But first we need to tell our project that the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> app is installed.</p>\n<div class=\"admonition-philosophy admonition\">\n<p class=\"first admonition-title\">Philosophy</p>\n<p class=\"last\">Django apps are \u201cpluggable\u201d: You can use an app in multiple projects, and\nyou can distribute apps, because they don\u2019t have to be tied to a given\nDjango installation.</p>\n</div>\n<p>To include the app in our project, we need to add a reference to its\nconfiguration class in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">PollsConfig</span></code> class is in the <code class=\"file docutils literal notranslate\"><span class=\"pre\">polls/apps.py</span></code> file, so its dotted path\nis <code class=\"docutils literal notranslate\"><span class=\"pre\">'polls.apps.PollsConfig'</span></code>. Edit the <code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code> file and\nadd that dotted path to the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting. It\u2019ll look like\nthis:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;polls.apps.PollsConfig&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.admin&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.auth&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.contenttypes&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.sessions&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.messages&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;django.contrib.staticfiles&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Now Django knows to include the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> app. Let\u2019s run another command:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py makemigrations polls\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py makemigrations polls\n</pre></div>\n</section>\n</div>\n<p>You should see something similar to the following:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>Migrations for &#39;polls&#39;:\n  polls/migrations/0001_initial.py\n    - Create model Question\n    - Create model Choice\n</pre></div>\n</div>\n<p>By running <code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code>, you\u2019re telling Django that you\u2019ve made\nsome changes to your models (in this case, you\u2019ve made new ones) and that\nyou\u2019d like the changes to be stored as a <em>migration</em>.</p>\n<p>Migrations are how Django stores changes to your models (and thus your\ndatabase schema) - they\u2019re files on disk. You can read the migration for your\nnew model if you like; it\u2019s the file <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/migrations/0001_initial.py</span></code>.\nDon\u2019t worry, you\u2019re not expected to read them every time Django makes one, but\nthey\u2019re designed to be human-editable in case you want to manually tweak how\nDjango changes things.</p>\n<p>There\u2019s a command that will run the migrations for you and manage your database\nschema automatically - that\u2019s called <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>, and we\u2019ll come to it in a\nmoment - but first, let\u2019s see what SQL that migration would run. The\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-sqlmigrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">sqlmigrate</span></code></a> command takes migration names and returns their SQL:</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py sqlmigrate polls <span class=\"m\">0001</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py sqlmigrate polls 0001\n</pre></div>\n</section>\n</div>\n<p>You should see something similar to the following (we\u2019ve reformatted it for\nreadability):</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">BEGIN</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- Create model Question</span>\n<span class=\"c1\">--</span>\n<span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_question&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;id&quot;</span><span class=\"w\"> </span><span class=\"nb\">bigint</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"> </span><span class=\"k\">PRIMARY</span><span class=\"w\"> </span><span class=\"k\">KEY</span><span class=\"w\"> </span><span class=\"k\">GENERATED</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"k\">DEFAULT</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"k\">IDENTITY</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;question_text&quot;</span><span class=\"w\"> </span><span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;pub_date&quot;</span><span class=\"w\"> </span><span class=\"k\">timestamp</span><span class=\"w\"> </span><span class=\"k\">with</span><span class=\"w\"> </span><span class=\"k\">time</span><span class=\"w\"> </span><span class=\"k\">zone</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"c1\">--</span>\n<span class=\"c1\">-- Create model Choice</span>\n<span class=\"c1\">--</span>\n<span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_choice&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;id&quot;</span><span class=\"w\"> </span><span class=\"nb\">bigint</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"> </span><span class=\"k\">PRIMARY</span><span class=\"w\"> </span><span class=\"k\">KEY</span><span class=\"w\"> </span><span class=\"k\">GENERATED</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"k\">DEFAULT</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"k\">IDENTITY</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;choice_text&quot;</span><span class=\"w\"> </span><span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;votes&quot;</span><span class=\"w\"> </span><span class=\"nb\">integer</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;question_id&quot;</span><span class=\"w\"> </span><span class=\"nb\">bigint</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_choice&quot;</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"k\">ADD</span><span class=\"w\"> </span><span class=\"k\">CONSTRAINT</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_choice_question_id_c5b4b260_fk_polls_question_id&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FOREIGN</span><span class=\"w\"> </span><span class=\"k\">KEY</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">&quot;question_id&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">REFERENCES</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_question&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">&quot;id&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">DEFERRABLE</span><span class=\"w\"> </span><span class=\"k\">INITIALLY</span><span class=\"w\"> </span><span class=\"k\">DEFERRED</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">INDEX</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_choice_question_id_c5b4b260&quot;</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"ss\">&quot;polls_choice&quot;</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">&quot;question_id&quot;</span><span class=\"p\">);</span><span class=\"w\"></span>\n\n<span class=\"k\">COMMIT</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note the following:</p>\n<ul class=\"simple\">\n<li>The exact output will vary depending on the database you are using. The\nexample above is generated for PostgreSQL.</li>\n<li>Table names are automatically generated by combining the name of the app\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code>) and the lowercase name of the model \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">question</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">choice</span></code>. (You can override this behavior.)</li>\n<li>Primary keys (IDs) are added automatically. (You can override this, too.)</li>\n<li>By convention, Django appends <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_id&quot;</span></code> to the foreign key field name.\n(Yes, you can override this, as well.)</li>\n<li>The foreign key relationship is made explicit by a <code class=\"docutils literal notranslate\"><span class=\"pre\">FOREIGN</span> <span class=\"pre\">KEY</span></code>\nconstraint. Don\u2019t worry about the <code class=\"docutils literal notranslate\"><span class=\"pre\">DEFERRABLE</span></code> parts; it\u2019s telling\nPostgreSQL to not enforce the foreign key until the end of the transaction.</li>\n<li>It\u2019s tailored to the database you\u2019re using, so database-specific field types\nsuch as <code class=\"docutils literal notranslate\"><span class=\"pre\">auto_increment</span></code> (MySQL), <code class=\"docutils literal notranslate\"><span class=\"pre\">bigint</span> <span class=\"pre\">PRIMARY</span> <span class=\"pre\">KEY</span> <span class=\"pre\">GENERATED</span> <span class=\"pre\">BY</span> <span class=\"pre\">DEFAULT</span>\n<span class=\"pre\">AS</span> <span class=\"pre\">IDENTITY</span></code> (PostgreSQL), or <code class=\"docutils literal notranslate\"><span class=\"pre\">integer</span> <span class=\"pre\">primary</span> <span class=\"pre\">key</span> <span class=\"pre\">autoincrement</span></code> (SQLite)\nare handled for you automatically. Same goes for the quoting of field names\n\u2013 e.g., using double quotes or single quotes.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-sqlmigrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">sqlmigrate</span></code></a> command doesn\u2019t actually run the migration on your\ndatabase - instead, it prints it to the screen so that you can see what SQL\nDjango thinks is required. It\u2019s useful for checking what Django is going to\ndo or if you have database administrators who require SQL scripts for\nchanges.</li>\n</ul>\n<p>If you\u2019re interested, you can also run\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-check\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">check</span></code></a>; this checks for any problems in\nyour project without making migrations or touching the database.</p>\n<p>Now, run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> again to create those model tables in your database:</p>\n<div class=\"console-block\" id=\"console-block-3\">\n<input class=\"c-tab-unix\" id=\"c-tab-3-unix\" type=\"radio\" name=\"console-3\" checked>\n<label for=\"c-tab-3-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-3-win\" type=\"radio\" name=\"console-3\">\n<label for=\"c-tab-3-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-3-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py migrate\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Applying polls.0001_initial... OK</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-3-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py migrate\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Applying polls.0001_initial... OK</span>\n</pre></div>\n</section>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> command takes all the migrations that haven\u2019t been\napplied (Django tracks which ones are applied using a special table in your\ndatabase called <code class=\"docutils literal notranslate\"><span class=\"pre\">django_migrations</span></code>) and runs them against your database -\nessentially, synchronizing the changes you made to your models with the schema\nin the database.</p>\n<p>Migrations are very powerful and let you change your models over time, as you\ndevelop your project, without the need to delete your database or tables and\nmake new ones - it specializes in upgrading your database live, without\nlosing data. We\u2019ll cover them in more depth in a later part of the tutorial,\nbut for now, remember the three-step guide to making model changes:</p>\n<ul class=\"simple\">\n<li>Change your models (in <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code>).</li>\n<li>Run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">makemigrations</span></code></a> to create\nmigrations for those changes</li>\n<li>Run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code></a> to apply those changes to\nthe database.</li>\n</ul>\n<p>The reason that there are separate commands to make and apply migrations is\nbecause you\u2019ll commit migrations to your version control system and ship them\nwith your app; they not only make your development easier, they\u2019re also\nusable by other developers and in production.</p>\n<p>Read the <a class=\"reference internal\" href=\"../../ref/django-admin/\"><span class=\"doc\">django-admin documentation</span></a> for full\ninformation on what the <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> utility can do.</p>\n</div>\n<div class=\"section\" id=\"s-playing-with-the-api\">\n<span id=\"playing-with-the-api\"></span><h2>Playing with the API<a class=\"headerlink\" href=\"#playing-with-the-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now, let\u2019s hop into the interactive Python shell and play around with the free\nAPI Django gives you. To invoke the Python shell, use this command:</p>\n<div class=\"console-block\" id=\"console-block-4\">\n<input class=\"c-tab-unix\" id=\"c-tab-4-unix\" type=\"radio\" name=\"console-4\" checked>\n<label for=\"c-tab-4-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-4-win\" type=\"radio\" name=\"console-4\">\n<label for=\"c-tab-4-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-4-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py shell\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-4-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py shell\n</pre></div>\n</section>\n</div>\n<p>We\u2019re using this instead of simply typing \u201cpython\u201d, because <code class=\"file docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>\nsets the <span class=\"target\" id=\"index-0\"></span><a class=\"reference internal\" href=\"../../topics/settings/#envvar-DJANGO_SETTINGS_MODULE\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_SETTINGS_MODULE</span></code></a> environment variable, which gives\nDjango the Python import path to your <code class=\"file docutils literal notranslate\"><span class=\"pre\">mysite/settings.py</span></code> file.</p>\n<p>Once you\u2019re in the shell, explore the <a class=\"reference internal\" href=\"../../topics/db/queries/\"><span class=\"doc\">database API</span></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>  <span class=\"c1\"># Import the model classes we just wrote.</span>\n\n<span class=\"go\"># No questions are in the system yet.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n\n<span class=\"go\"># Create a new Question.</span>\n<span class=\"go\"># Support for time zones is enabled in the default settings file, so</span>\n<span class=\"go\"># Django expects a datetime with tzinfo for pub_date. Use timezone.now()</span>\n<span class=\"go\"># instead of datetime.datetime.now() and it will do the right thing.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&#39;s new?&quot;</span><span class=\"p\">,</span> <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n\n<span class=\"go\"># Save the object into the database. You have to call save() explicitly.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"go\"># Now it has an ID.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"go\">1</span>\n\n<span class=\"go\"># Access model field values via Python attributes.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">question_text</span>\n<span class=\"go\">&quot;What&#39;s new?&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">pub_date</span>\n<span class=\"go\">datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)</span>\n\n<span class=\"go\"># Change values by changing the attributes, then calling save().</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">question_text</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;What&#39;s up?&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"go\"># objects.all() displays all the questions in the database.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>Wait a minute. <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;Question:</span> <span class=\"pre\">Question</span> <span class=\"pre\">object</span> <span class=\"pre\">(1)&gt;</span></code> isn\u2019t a helpful\nrepresentation of this object. Let\u2019s fix that by editing the <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> model\n(in the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code> file) and adding a\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.__str__\" title=\"django.db.models.Model.__str__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__str__()</span></code></a> method to both <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">question_text</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Choice</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">choice_text</span>\n</pre></div>\n</div>\n</div>\n<p>It\u2019s important to add <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.__str__\" title=\"django.db.models.Model.__str__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__str__()</span></code></a> methods to your\nmodels, not only for your own convenience when dealing with the interactive\nprompt, but also because objects\u2019 representations are used throughout Django\u2019s\nautomatically-generated admin.</p>\n<p id=\"tutorial02-import-timezone\">Let\u2019s also add a custom method to this model:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/models.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Question</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">def</span> <span class=\"nf\">was_published_recently</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"o\">&gt;=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Note the addition of <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span> <span class=\"pre\">datetime</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span> <span class=\"pre\">django.utils</span> <span class=\"pre\">import</span>\n<span class=\"pre\">timezone</span></code>, to reference Python\u2019s standard <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#module-datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> module and Django\u2019s\ntime-zone-related utilities in <a class=\"reference internal\" href=\"../../ref/utils/#module-django.utils.timezone\" title=\"django.utils.timezone: Timezone support.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.utils.timezone</span></code></a>, respectively. If\nyou aren\u2019t familiar with time zone handling in Python, you can learn more in\nthe <a class=\"reference internal\" href=\"../../topics/i18n/timezones/\"><span class=\"doc\">time zone support docs</span></a>.</p>\n<p>Save these changes and start a new Python interactive shell by running\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">shell</span></code> again:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">polls.models</span> <span class=\"kn\">import</span> <span class=\"n\">Choice</span><span class=\"p\">,</span> <span class=\"n\">Question</span>\n\n<span class=\"go\"># Make sure our __str__() addition worked.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;</span>\n\n<span class=\"go\"># Django provides a rich database lookup API that&#39;s entirely driven by</span>\n<span class=\"go\"># keyword arguments.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">question_text__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Question: What&#39;s up?&gt;]&gt;</span>\n\n<span class=\"go\"># Get the question that was published this year.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">current_year</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">year</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"n\">current_year</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Question: What&#39;s up?&gt;</span>\n\n<span class=\"go\"># Request an ID that doesn&#39;t exist, this will raise an exception.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n    <span class=\"o\">...</span>\n<span class=\"gr\">DoesNotExist</span>: <span class=\"n\">Question matching query does not exist.</span>\n\n<span class=\"go\"># Lookup by a primary key is the most common case, so Django provides a</span>\n<span class=\"go\"># shortcut for primary-key exact lookups.</span>\n<span class=\"go\"># The following is identical to Question.objects.get(id=1).</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Question: What&#39;s up?&gt;</span>\n\n<span class=\"go\"># Make sure our custom method worked.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">was_published_recently</span><span class=\"p\">()</span>\n<span class=\"go\">True</span>\n\n<span class=\"go\"># Give the Question a couple of Choices. The create call constructs a new</span>\n<span class=\"go\"># Choice object, does the INSERT statement, adds the choice to the set</span>\n<span class=\"go\"># of available choices and returns the new Choice object. Django creates</span>\n<span class=\"go\"># a set to hold the &quot;other side&quot; of a ForeignKey relation</span>\n<span class=\"go\"># (e.g. a question&#39;s choice) which can be accessed via the API.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Display any choices from the related object set -- none so far.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n\n<span class=\"go\"># Create three choices.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">choice_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Not much&quot;</span><span class=\"p\">,</span> <span class=\"n\">votes</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Choice: Not much&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">choice_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;The sky&quot;</span><span class=\"p\">,</span> <span class=\"n\">votes</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Choice: The sky&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">choice_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Just hacking again&quot;</span><span class=\"p\">,</span> <span class=\"n\">votes</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Choice objects have API access to their related Question objects.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">question</span>\n<span class=\"go\">&lt;Question: What&#39;s up?&gt;</span>\n\n<span class=\"go\"># And vice versa: Question objects get access to Choice objects.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"go\">3</span>\n\n<span class=\"go\"># The API automatically follows relationships as far as you need.</span>\n<span class=\"go\"># Use double underscores to separate relationships.</span>\n<span class=\"go\"># This works as many levels deep as you want; there&#39;s no limit.</span>\n<span class=\"go\"># Find all Choices for any question whose pub_date is in this year</span>\n<span class=\"go\"># (reusing the &#39;current_year&#39; variable we created above).</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Choice</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">question__pub_date__year</span><span class=\"o\">=</span><span class=\"n\">current_year</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Choice: Not much&gt;, &lt;Choice: The sky&gt;, &lt;Choice: Just hacking again&gt;]&gt;</span>\n\n<span class=\"go\"># Let&#39;s delete one of the choices. Use delete() for that.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">choice_text__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Just hacking&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>For more information on model relations, see <a class=\"reference internal\" href=\"../../ref/models/relations/\"><span class=\"doc\">Accessing related objects</span></a>. For more on how to use double underscores to perform\nfield lookups via the API, see <a class=\"reference internal\" href=\"../../topics/db/queries/#field-lookups-intro\"><span class=\"std std-ref\">Field lookups</span></a>. For\nfull details on the database API, see our <a class=\"reference internal\" href=\"../../topics/db/queries/\"><span class=\"doc\">Database API reference</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-introducing-the-django-admin\">\n<span id=\"introducing-the-django-admin\"></span><h2>Introducing the Django Admin<a class=\"headerlink\" href=\"#introducing-the-django-admin\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition-philosophy admonition\">\n<p class=\"first admonition-title\">Philosophy</p>\n<p>Generating admin sites for your staff or clients to add, change, and delete\ncontent is tedious work that doesn\u2019t require much creativity. For that\nreason, Django entirely automates creation of admin interfaces for models.</p>\n<p>Django was written in a newsroom environment, with a very clear separation\nbetween \u201ccontent publishers\u201d and the \u201cpublic\u201d site. Site managers use the\nsystem to add news stories, events, sports scores, etc., and that content is\ndisplayed on the public site. Django solves the problem of creating a\nunified interface for site administrators to edit content.</p>\n<p class=\"last\">The admin isn\u2019t intended to be used by site visitors. It\u2019s for site\nmanagers.</p>\n</div>\n<div class=\"section\" id=\"s-creating-an-admin-user\">\n<span id=\"creating-an-admin-user\"></span><h3>Creating an admin user<a class=\"headerlink\" href=\"#creating-an-admin-user\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>First we\u2019ll need to create a user who can login to the admin site. Run the\nfollowing command:</p>\n<div class=\"console-block\" id=\"console-block-5\">\n<input class=\"c-tab-unix\" id=\"c-tab-5-unix\" type=\"radio\" name=\"console-5\" checked>\n<label for=\"c-tab-5-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-5-win\" type=\"radio\" name=\"console-5\">\n<label for=\"c-tab-5-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-5-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py createsuperuser\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-5-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py createsuperuser\n</pre></div>\n</section>\n</div>\n<p>Enter your desired username and press enter.</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>Username: admin\n</pre></div>\n</div>\n<p>You will then be prompted for your desired email address:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>Email address: admin@example.com\n</pre></div>\n</div>\n<p>The final step is to enter your password. You will be asked to enter your\npassword twice, the second time as a confirmation of the first.</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>Password: **********\nPassword (again): *********\nSuperuser created successfully.\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-start-the-development-server\">\n<span id=\"start-the-development-server\"></span><h3>Start the development server<a class=\"headerlink\" href=\"#start-the-development-server\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The Django admin site is activated by default. Let\u2019s start the development\nserver and explore it.</p>\n<p>If the server is not running start it like so:</p>\n<div class=\"console-block\" id=\"console-block-6\">\n<input class=\"c-tab-unix\" id=\"c-tab-6-unix\" type=\"radio\" name=\"console-6\" checked>\n<label for=\"c-tab-6-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-6-win\" type=\"radio\" name=\"console-6\">\n<label for=\"c-tab-6-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-6-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py runserver\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-6-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py runserver\n</pre></div>\n</section>\n</div>\n<p>Now, open a web browser and go to \u201c/admin/\u201d on your local domain \u2013 e.g.,\n<a class=\"reference external\" href=\"http://127.0.0.1:8000/admin/\">http://127.0.0.1:8000/admin/</a>. You should see the admin\u2019s login screen:</p>\n<img alt=\"Django admin login screen\" src=\"../../_images/admin01.png\" />\n<p>Since <a class=\"reference internal\" href=\"../../topics/i18n/translation/\"><span class=\"doc\">translation</span></a> is turned on by default, if\nyou set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGE_CODE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code></a>, the login screen will be displayed in the\ngiven language (if Django has appropriate translations).</p>\n</div>\n<div class=\"section\" id=\"s-enter-the-admin-site\">\n<span id=\"enter-the-admin-site\"></span><h3>Enter the admin site<a class=\"headerlink\" href=\"#enter-the-admin-site\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Now, try logging in with the superuser account you created in the previous step.\nYou should see the Django admin index page:</p>\n<img alt=\"Django admin index page\" src=\"../../_images/admin02.png\" />\n<p>You should see a few types of editable content: groups and users. They are\nprovided by <a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a>, the authentication framework shipped\nby Django.</p>\n</div>\n<div class=\"section\" id=\"s-make-the-poll-app-modifiable-in-the-admin\">\n<span id=\"make-the-poll-app-modifiable-in-the-admin\"></span><h3>Make the poll app modifiable in the admin<a class=\"headerlink\" href=\"#make-the-poll-app-modifiable-in-the-admin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>But where\u2019s our poll app? It\u2019s not displayed on the admin index page.</p>\n<p>Only one more thing to do: we need to tell the admin that <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> objects\nhave an admin interface. To do this, open the <code class=\"file docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code> file, and\nedit it to look like this:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/admin.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-explore-the-free-admin-functionality\">\n<span id=\"explore-the-free-admin-functionality\"></span><h3>Explore the free admin functionality<a class=\"headerlink\" href=\"#explore-the-free-admin-functionality\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Now that we\u2019ve registered <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code>, Django knows that it should be displayed on\nthe admin index page:</p>\n<img alt=\"Django admin index page, now with polls displayed\" src=\"../../_images/admin03t.png\" />\n<p>Click \u201cQuestions\u201d. Now you\u2019re at the \u201cchange list\u201d page for questions. This page\ndisplays all the questions in the database and lets you choose one to change it.\nThere\u2019s the \u201cWhat\u2019s up?\u201d question we created earlier:</p>\n<img alt=\"Polls change list page\" src=\"../../_images/admin04t.png\" />\n<p>Click the \u201cWhat\u2019s up?\u201d question to edit it:</p>\n<img alt=\"Editing form for question object\" src=\"../../_images/admin05t.png\" />\n<p>Things to note here:</p>\n<ul class=\"simple\">\n<li>The form is automatically generated from the <code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> model.</li>\n<li>The different model field types (<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>) correspond to the appropriate HTML\ninput widget. Each type of field knows how to display itself in the Django\nadmin.</li>\n<li>Each <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> gets free JavaScript\nshortcuts. Dates get a \u201cToday\u201d shortcut and calendar popup, and times get\na \u201cNow\u201d shortcut and a convenient popup that lists commonly entered times.</li>\n</ul>\n<p>The bottom part of the page gives you a couple of options:</p>\n<ul class=\"simple\">\n<li>Save \u2013 Saves changes and returns to the change-list page for this type of\nobject.</li>\n<li>Save and continue editing \u2013 Saves changes and reloads the admin page for\nthis object.</li>\n<li>Save and add another \u2013 Saves changes and loads a new, blank form for this\ntype of object.</li>\n<li>Delete \u2013 Displays a delete confirmation page.</li>\n</ul>\n<p>If the value of \u201cDate published\u201d doesn\u2019t match the time when you created the\nquestion in <a class=\"reference internal\" href=\"../tutorial01/\"><span class=\"doc\">Tutorial 1</span></a>, it probably\nmeans you forgot to set the correct value for the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TIME_ZONE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code></a> setting.\nChange it, reload the page and check that the correct value appears.</p>\n<p>Change the \u201cDate published\u201d by clicking the \u201cToday\u201d and \u201cNow\u201d shortcuts. Then\nclick \u201cSave and continue editing.\u201d Then click \u201cHistory\u201d in the upper right.\nYou\u2019ll see a page listing all changes made to this object via the Django admin,\nwith the timestamp and username of the person who made the change:</p>\n<img alt=\"History page for question object\" src=\"../../_images/admin06t.png\" />\n<p>When you\u2019re comfortable with the models API and have familiarized yourself with\nthe admin site, read <a class=\"reference internal\" href=\"../tutorial03/\"><span class=\"doc\">part 3 of this tutorial</span></a> to learn\nabout how to add more views to our polls app.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["intro/tutorial03", "Writing your first Django app, part 3", "N", "next"], ["intro/tutorial01", "Writing your first Django app, part 1", "P", "previous"]], "sourcename": "intro/tutorial02.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing your first Django app, part 2</a><ul>\n<li><a class=\"reference internal\" href=\"#database-setup\">Database setup</a></li>\n<li><a class=\"reference internal\" href=\"#creating-models\">Creating models</a></li>\n<li><a class=\"reference internal\" href=\"#activating-models\">Activating models</a></li>\n<li><a class=\"reference internal\" href=\"#playing-with-the-api\">Playing with the API</a></li>\n<li><a class=\"reference internal\" href=\"#introducing-the-django-admin\">Introducing the Django Admin</a><ul>\n<li><a class=\"reference internal\" href=\"#creating-an-admin-user\">Creating an admin user</a></li>\n<li><a class=\"reference internal\" href=\"#start-the-development-server\">Start the development server</a></li>\n<li><a class=\"reference internal\" href=\"#enter-the-admin-site\">Enter the admin site</a></li>\n<li><a class=\"reference internal\" href=\"#make-the-poll-app-modifiable-in-the-admin\">Make the poll app modifiable in the admin</a></li>\n<li><a class=\"reference internal\" href=\"#explore-the-free-admin-functionality\">Explore the free admin functionality</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "intro/tutorial02", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}