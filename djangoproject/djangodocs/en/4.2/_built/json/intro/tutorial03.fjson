{"parents": [{"link": "../", "title": "Getting started"}], "prev": {"link": "../tutorial02/", "title": "Writing your first Django app, part 2"}, "next": {"link": "../tutorial04/", "title": "Writing your first Django app, part 4"}, "title": "Writing your first Django app, part 3", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-your-first-django-app-part-3\">\n<span id=\"writing-your-first-django-app-part-3\"></span><h1>Writing your first Django app, part 3<a class=\"headerlink\" href=\"#writing-your-first-django-app-part-3\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This tutorial begins where <a class=\"reference internal\" href=\"../tutorial02/\"><span class=\"doc\">Tutorial 2</span></a> left off. We\u2019re\ncontinuing the web-poll application and will focus on creating the public\ninterface \u2013 \u201cviews.\u201d</p>\n<div class=\"admonition-where-to-get-help admonition\">\n<p class=\"first admonition-title\">Where to get help:</p>\n<p class=\"last\">If you\u2019re having trouble going through this tutorial, please head over to\nthe <a class=\"reference internal\" href=\"../../faq/help/\"><span class=\"doc\">Getting Help</span></a> section of the FAQ.</p>\n</div>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A view is a \u201ctype\u201d of web page in your Django application that generally serves\na specific function and has a specific template. For example, in a blog\napplication, you might have the following views:</p>\n<ul class=\"simple\">\n<li>Blog homepage \u2013 displays the latest few entries.</li>\n<li>Entry \u201cdetail\u201d page \u2013 permalink page for a single entry.</li>\n<li>Year-based archive page \u2013 displays all months with entries in the\ngiven year.</li>\n<li>Month-based archive page \u2013 displays all days with entries in the\ngiven month.</li>\n<li>Day-based archive page \u2013 displays all entries in the given day.</li>\n<li>Comment action \u2013 handles posting comments to a given entry.</li>\n</ul>\n<p>In our poll application, we\u2019ll have the following four views:</p>\n<ul class=\"simple\">\n<li>Question \u201cindex\u201d page \u2013 displays the latest few questions.</li>\n<li>Question \u201cdetail\u201d page \u2013 displays a question text, with no results but\nwith a form to vote.</li>\n<li>Question \u201cresults\u201d page \u2013 displays results for a particular question.</li>\n<li>Vote action \u2013 handles voting for a particular choice in a particular\nquestion.</li>\n</ul>\n<p>In Django, web pages and other content are delivered by views. Each view is\nrepresented by a Python function (or method, in the case of class-based views).\nDjango will choose a view by examining the URL that\u2019s requested (to be precise,\nthe part of the URL after the domain name).</p>\n<p>Now in your time on the web you may have come across such beauties as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ME2/Sites/dirmod.htm?sid=&amp;type=gen&amp;mod=Core+Pages&amp;gid=A6CD4967199A42D9B65B1B</span></code>.\nYou will be pleased to know that Django allows us much more elegant\n<em>URL patterns</em> than that.</p>\n<p>A URL pattern is the general form of a URL - for example:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/newsarchive/&lt;year&gt;/&lt;month&gt;/</span></code>.</p>\n<p>To get from a URL to a view, Django uses what are known as \u2018URLconfs\u2019. A\nURLconf maps URL patterns to views.</p>\n<p>This tutorial provides basic instruction in the use of URLconfs, and you can\nrefer to <a class=\"reference internal\" href=\"../../topics/http/urls/\"><span class=\"doc\">URL dispatcher</span></a> for more information.</p>\n</div>\n<div class=\"section\" id=\"s-writing-more-views\">\n<span id=\"writing-more-views\"></span><h2>Writing more views<a class=\"headerlink\" href=\"#writing-more-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now let\u2019s add a few more views to <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code>. These views are\nslightly different, because they take an argument:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;You&#39;re looking at question </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">question_id</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">results</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;You&#39;re looking at the results of question </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">response</span> <span class=\"o\">%</span> <span class=\"n\">question_id</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">vote</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;You&#39;re voting on question </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">question_id</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Wire these new views into the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls.urls</span></code> module by adding the following\n<a class=\"reference internal\" href=\"../../ref/urls/#django.urls.path\" title=\"django.urls.path\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">path()</span></code></a> calls:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/urls.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ex: /polls/</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">),</span>\n    <span class=\"c1\"># ex: /polls/5/</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;detail&quot;</span><span class=\"p\">),</span>\n    <span class=\"c1\"># ex: /polls/5/results/</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/results/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;results&quot;</span><span class=\"p\">),</span>\n    <span class=\"c1\"># ex: /polls/5/vote/</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/vote/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">vote</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;vote&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Take a look in your browser, at \u201c/polls/34/\u201d. It\u2019ll run the <code class=\"docutils literal notranslate\"><span class=\"pre\">detail()</span></code>\nmethod and display whatever ID you provide in the URL. Try\n\u201c/polls/34/results/\u201d and \u201c/polls/34/vote/\u201d too \u2013 these will display the\nplaceholder results and voting pages.</p>\n<p>When somebody requests a page from your website \u2013 say, \u201c/polls/34/\u201d, Django\nwill load the <code class=\"docutils literal notranslate\"><span class=\"pre\">mysite.urls</span></code> Python module because it\u2019s pointed to by the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ROOT_URLCONF\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ROOT_URLCONF</span></code></a> setting. It finds the variable named <code class=\"docutils literal notranslate\"><span class=\"pre\">urlpatterns</span></code>\nand traverses the patterns in order. After finding the match at <code class=\"docutils literal notranslate\"><span class=\"pre\">'polls/'</span></code>,\nit strips off the matching text (<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;polls/&quot;</span></code>) and sends the remaining text \u2013\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;34/&quot;</span></code> \u2013 to the \u2018polls.urls\u2019 URLconf for further processing. There it\nmatches <code class=\"docutils literal notranslate\"><span class=\"pre\">'&lt;int:question_id&gt;/'</span></code>, resulting in a call to the <code class=\"docutils literal notranslate\"><span class=\"pre\">detail()</span></code> view\nlike so:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">detail(request=&lt;HttpRequest object&gt;, question_id=34)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">question_id=34</span></code> part comes from <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;int:question_id&gt;</span></code>. Using angle\nbrackets \u201ccaptures\u201d part of the URL and sends it as a keyword argument to the\nview function. The <code class=\"docutils literal notranslate\"><span class=\"pre\">question_id</span></code> part of the string defines the name that\nwill be used to identify the matched pattern, and the <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> part is a\nconverter that determines what patterns should match this part of the URL path.\nThe colon (<code class=\"docutils literal notranslate\"><span class=\"pre\">:</span></code>) separates the converter and pattern name.</p>\n</div>\n<div class=\"section\" id=\"s-write-views-that-actually-do-something\">\n<span id=\"write-views-that-actually-do-something\"></span><h2>Write views that actually do something<a class=\"headerlink\" href=\"#write-views-that-actually-do-something\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Each view is responsible for doing one of two things: returning an\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> object containing the content for the\nrequested page, or raising an exception such as <a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a>. The\nrest is up to you.</p>\n<p>Your view can read records from a database, or not. It can use a template\nsystem such as Django\u2019s \u2013 or a third-party Python template system \u2013 or not.\nIt can generate a PDF file, output XML, create a ZIP file on the fly, anything\nyou want, using whatever Python libraries you want.</p>\n<p>All Django wants is that <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>. Or an exception.</p>\n<p>Because it\u2019s convenient, let\u2019s use Django\u2019s own database API, which we covered\nin <a class=\"reference internal\" href=\"../tutorial02/\"><span class=\"doc\">Tutorial 2</span></a>. Here\u2019s one stab at a new <code class=\"docutils literal notranslate\"><span class=\"pre\">index()</span></code>\nview, which displays the latest 5 poll questions in the system, separated by\ncommas, according to publication date:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">latest_question_list</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">question_text</span> <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"n\">latest_question_list</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Leave the rest of the views (detail, results, vote) unchanged</span>\n</pre></div>\n</div>\n</div>\n<p>There\u2019s a problem here, though: the page\u2019s design is hard-coded in the view. If\nyou want to change the way the page looks, you\u2019ll have to edit this Python code.\nSo let\u2019s use Django\u2019s template system to separate the design from Python by\ncreating a template that the view can use.</p>\n<p>First, create a directory called <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> in your <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> directory.\nDjango will look for templates in there.</p>\n<p>Your project\u2019s <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting describes how Django will load and\nrender templates. The default settings file configures a <code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code>\nbackend whose <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-APP_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APP_DIRS</span></code></a> option is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. By convention <code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code> looks for a \u201ctemplates\u201d\nsubdirectory in each of the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<p>Within the <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> directory you have just created, create another\ndirectory called <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code>, and within that create a file called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">index.html</span></code>. In other words, your template should be at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates/polls/index.html</span></code>. Because of how the <code class=\"docutils literal notranslate\"><span class=\"pre\">app_directories</span></code>\ntemplate loader works as described above, you can refer to this template within\nDjango as <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/index.html</span></code>.</p>\n<div class=\"admonition-template-namespacing admonition\">\n<p class=\"first admonition-title\">Template namespacing</p>\n<p class=\"last\">Now we <em>might</em> be able to get away with putting our templates directly in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates</span></code> (rather than creating another <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> subdirectory),\nbut it would actually be a bad idea. Django will choose the first template\nit finds whose name matches, and if you had a template with the same name\nin a <em>different</em> application, Django would be unable to distinguish between\nthem. We need to be able to point Django at the right one, and the best\nway to ensure this is by <em>namespacing</em> them. That is, by putting those\ntemplates inside <em>another</em> directory named for the application itself.</p>\n</div>\n<p>Put the following code in that template:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates/polls/index.html</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">latest_question_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">question</span> <span class=\"k\">in</span> <span class=\"nv\">latest_question_list</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/polls/</span><span class=\"cp\">{{</span> <span class=\"nv\">question.id</span> <span class=\"cp\">}}</span><span class=\"s\">/&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">question.question_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>No polls are available.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">To make the tutorial shorter, all template examples use incomplete HTML. In\nyour own projects you should use <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started#anatomy_of_an_html_document\">complete HTML documents</a>.</p>\n</div>\n<p>Now let\u2019s update our <code class=\"docutils literal notranslate\"><span class=\"pre\">index</span></code> view in <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code> to use the template:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">latest_question_list</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls/index.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">:</span> <span class=\"n\">latest_question_list</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<p>That code loads the template called  <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/index.html</span></code> and passes it a\ncontext. The context is a dictionary mapping template variable names to Python\nobjects.</p>\n<p>Load the page by pointing your browser at \u201c/polls/\u201d, and you should see a\nbulleted-list containing the \u201cWhat\u2019s up\u201d question from <a class=\"reference internal\" href=\"../tutorial02/\"><span class=\"doc\">Tutorial 2</span></a>. The link points to the question\u2019s detail page.</p>\n<div class=\"section\" id=\"s-a-shortcut-render\">\n<span id=\"a-shortcut-render\"></span><h3>A shortcut: <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render()</span></code></a><a class=\"headerlink\" href=\"#a-shortcut-render\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s a very common idiom to load a template, fill a context and return an\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> object with the result of the rendered\ntemplate. Django provides a shortcut. Here\u2019s the full <code class=\"docutils literal notranslate\"><span class=\"pre\">index()</span></code> view,\nrewritten:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">latest_question_list</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;latest_question_list&quot;</span><span class=\"p\">:</span> <span class=\"n\">latest_question_list</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;polls/index.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Note that once we\u2019ve done this in all these views, we no longer need to import\n<a class=\"reference internal\" href=\"../../topics/templates/#module-django.template.loader\" title=\"django.template.loader\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">loader</span></code></a> and <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> (you\u2019ll\nwant to keep <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> if you still have the stub methods for <code class=\"docutils literal notranslate\"><span class=\"pre\">detail</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">results</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">vote</span></code>).</p>\n<p>The <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render()</span></code></a> function takes the request object as its\nfirst argument, a template name as its second argument and a dictionary as its\noptional third argument. It returns an <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>\nobject of the given template rendered with the given context.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-raising-a-404-error\">\n<span id=\"raising-a-404-error\"></span><h2>Raising a 404 error<a class=\"headerlink\" href=\"#raising-a-404-error\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now, let\u2019s tackle the question detail view \u2013 the page that displays the question text\nfor a given poll. Here\u2019s the view:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id8\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">Http404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"c1\"># ...</span>\n<span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Question</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Http404</span><span class=\"p\">(</span><span class=\"s2\">&quot;Question does not exist&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;polls/detail.html&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;question&quot;</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</div>\n<p>The new concept here: The view raises the <a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a> exception\nif a question with the requested ID doesn\u2019t exist.</p>\n<p>We\u2019ll discuss what you could put in that <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/detail.html</span></code> template a bit\nlater, but if you\u2019d like to quickly get the above example working, a file\ncontaining just:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates/polls/detail.html</span></code></span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">question</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n<p>will get you started for now.</p>\n<div class=\"section\" id=\"s-a-shortcut-get-object-or-404\">\n<span id=\"a-shortcut-get-object-or-404\"></span><h3>A shortcut: <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.get_object_or_404\" title=\"django.shortcuts.get_object_or_404\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_object_or_404()</span></code></a><a class=\"headerlink\" href=\"#a-shortcut-get-object-or-404\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s a very common idiom to use <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>\nand raise <a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a> if the object doesn\u2019t exist. Django\nprovides a shortcut. Here\u2019s the <code class=\"docutils literal notranslate\"><span class=\"pre\">detail()</span></code> view, rewritten:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id10\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/views.py</span></code></span><a class=\"headerlink\" href=\"#id10\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">,</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Question</span>\n\n\n<span class=\"c1\"># ...</span>\n<span class=\"k\">def</span> <span class=\"nf\">detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">question_id</span><span class=\"p\">):</span>\n    <span class=\"n\">question</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Question</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">question_id</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;polls/detail.html&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;question&quot;</span><span class=\"p\">:</span> <span class=\"n\">question</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.get_object_or_404\" title=\"django.shortcuts.get_object_or_404\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_object_or_404()</span></code></a> function takes a Django model\nas its first argument and an arbitrary number of keyword arguments, which it\npasses to the <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> function of the\nmodel\u2019s manager. It raises <a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a> if the object doesn\u2019t\nexist.</p>\n<div class=\"admonition-philosophy admonition\">\n<p class=\"first admonition-title\">Philosophy</p>\n<p>Why do we use a helper function <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.get_object_or_404\" title=\"django.shortcuts.get_object_or_404\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_object_or_404()</span></code></a>\ninstead of automatically catching the\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ObjectDoesNotExist\" title=\"django.core.exceptions.ObjectDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ObjectDoesNotExist</span></code></a> exceptions at a higher\nlevel, or having the model API raise <a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a> instead of\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ObjectDoesNotExist\" title=\"django.core.exceptions.ObjectDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ObjectDoesNotExist</span></code></a>?</p>\n<p class=\"last\">Because that would couple the model layer to the view layer. One of the\nforemost design goals of Django is to maintain loose coupling. Some\ncontrolled coupling is introduced in the <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#module-django.shortcuts\" title=\"django.shortcuts: Convenience shortcuts that span multiple levels of Django's MVC stack.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.shortcuts</span></code></a> module.</p>\n</div>\n<p>There\u2019s also a <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.get_list_or_404\" title=\"django.shortcuts.get_list_or_404\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_list_or_404()</span></code></a> function, which works\njust as <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.get_object_or_404\" title=\"django.shortcuts.get_object_or_404\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_object_or_404()</span></code></a> \u2013 except using\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> instead of\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>. It raises\n<a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a> if the list is empty.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-use-the-template-system\">\n<span id=\"use-the-template-system\"></span><h2>Use the template system<a class=\"headerlink\" href=\"#use-the-template-system\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Back to the <code class=\"docutils literal notranslate\"><span class=\"pre\">detail()</span></code> view for our poll application. Given the context\nvariable <code class=\"docutils literal notranslate\"><span class=\"pre\">question</span></code>, here\u2019s what the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/detail.html</span></code> template might look\nlike:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id11\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates/polls/detail.html</span></code></span><a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">question.question_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h1</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">choice</span> <span class=\"k\">in</span> <span class=\"nv\">question.choice_set.all</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">choice.choice_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<p>The template system uses dot-lookup syntax to access variable attributes. In\nthe example of <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">question.question_text</span> <span class=\"pre\">}}</span></code>, first Django does a dictionary lookup\non the object <code class=\"docutils literal notranslate\"><span class=\"pre\">question</span></code>. Failing that, it tries an attribute lookup \u2013 which\nworks, in this case. If attribute lookup had failed, it would\u2019ve tried a\nlist-index lookup.</p>\n<p>Method-calling happens in the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">%}</span></code></a> loop:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">question.choice_set.all</span></code> is interpreted as the Python code\n<code class=\"docutils literal notranslate\"><span class=\"pre\">question.choice_set.all()</span></code>, which returns an iterable of <code class=\"docutils literal notranslate\"><span class=\"pre\">Choice</span></code> objects and is\nsuitable for use in the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">%}</span></code></a> tag.</p>\n<p>See the <a class=\"reference internal\" href=\"../../topics/templates/\"><span class=\"doc\">template guide</span></a> for more about templates.</p>\n</div>\n<div class=\"section\" id=\"s-removing-hardcoded-urls-in-templates\">\n<span id=\"removing-hardcoded-urls-in-templates\"></span><h2>Removing hardcoded URLs in templates<a class=\"headerlink\" href=\"#removing-hardcoded-urls-in-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Remember, when we wrote the link to a question in the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/index.html</span></code>\ntemplate, the link was partially hardcoded like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;/polls/</span><span class=\"cp\">{{</span> <span class=\"nv\">question.id</span> <span class=\"cp\">}}</span><span class=\"s\">/&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">question.question_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The problem with this hardcoded, tightly-coupled approach is that it becomes\nchallenging to change URLs on projects with a lot of templates. However, since\nyou defined the name argument in the <a class=\"reference internal\" href=\"../../ref/urls/#django.urls.path\" title=\"django.urls.path\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">path()</span></code></a> functions in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">polls.urls</span></code> module, you can remove a reliance on specific URL paths\ndefined in your url configurations by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">%}</span></code> template tag:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;detail&#39;</span> <span class=\"nv\">question.id</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">question.question_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The way this works is by looking up the URL definition as specified in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">polls.urls</span></code> module. You can see exactly where the URL name of \u2018detail\u2019 is\ndefined below:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">...</span>\n<span class=\"c1\"># the &#39;name&#39; value as called by the {% url %} template tag</span>\n<span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;detail&quot;</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>If you want to change the URL of the polls detail view to something else,\nperhaps to something like <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/specifics/12/</span></code> instead of doing it in the\ntemplate (or templates) you would change it in <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/urls.py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">...</span>\n<span class=\"c1\"># added the word &#39;specifics&#39;</span>\n<span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;specifics/&lt;int:question_id&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;detail&quot;</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-namespacing-url-names\">\n<span id=\"namespacing-url-names\"></span><h2>Namespacing URL names<a class=\"headerlink\" href=\"#namespacing-url-names\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The tutorial project has just one app, <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code>. In real Django projects,\nthere might be five, ten, twenty apps or more. How does Django differentiate\nthe URL names between them? For example, the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> app has a <code class=\"docutils literal notranslate\"><span class=\"pre\">detail</span></code>\nview, and so might an app on the same project that is for a blog. How does one\nmake it so that Django knows which app view to create for a url when using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">%}</span></code> template tag?</p>\n<p>The answer is to add namespaces to your  URLconf. In the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/urls.py</span></code>\nfile, go ahead and add an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> to set the application namespace:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id12\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/urls.py</span></code></span><a class=\"headerlink\" href=\"#id12\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;polls&quot;</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">detail</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;detail&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/results/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;results&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;int:question_id&gt;/vote/&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">vote</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;vote&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Now change your <code class=\"docutils literal notranslate\"><span class=\"pre\">polls/index.html</span></code> template from:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id13\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates/polls/index.html</span></code></span><a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;detail&#39;</span> <span class=\"nv\">question.id</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">question.question_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<p>to point at the namespaced detail view:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id14\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/templates/polls/index.html</span></code></span><a class=\"headerlink\" href=\"#id14\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">url</span> <span class=\"s1\">&#39;polls:detail&#39;</span> <span class=\"nv\">question.id</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">question.question_text</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<p>When you\u2019re comfortable with writing views, read <a class=\"reference internal\" href=\"../tutorial04/\"><span class=\"doc\">part 4 of this tutorial</span></a> to learn the basics about form processing and generic\nviews.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["intro/tutorial04", "Writing your first Django app, part 4", "N", "next"], ["intro/tutorial02", "Writing your first Django app, part 2", "P", "previous"]], "sourcename": "intro/tutorial03.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing your first Django app, part 3</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#writing-more-views\">Writing more views</a></li>\n<li><a class=\"reference internal\" href=\"#write-views-that-actually-do-something\">Write views that actually do something</a><ul>\n<li><a class=\"reference internal\" href=\"#a-shortcut-render\">A shortcut: <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#raising-a-404-error\">Raising a 404 error</a><ul>\n<li><a class=\"reference internal\" href=\"#a-shortcut-get-object-or-404\">A shortcut: <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_object_or_404()</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#use-the-template-system\">Use the template system</a></li>\n<li><a class=\"reference internal\" href=\"#removing-hardcoded-urls-in-templates\">Removing hardcoded URLs in templates</a></li>\n<li><a class=\"reference internal\" href=\"#namespacing-url-names\">Namespacing URL names</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "intro/tutorial03", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}