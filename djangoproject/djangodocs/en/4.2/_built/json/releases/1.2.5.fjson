{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.2.6/", "title": "Django 1.2.6 release notes"}, "next": {"link": "../1.2.4/", "title": "Django 1.2.4 release notes"}, "title": "Django 1.2.5 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-2-5-release-notes\">\n<span id=\"django-1-2-5-release-notes\"></span><h1>Django 1.2.5 release notes<a class=\"headerlink\" href=\"#django-1-2-5-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Welcome to Django 1.2.5!</p>\n<p>This is the fifth \u201cbugfix\u201d release in the Django 1.2 series,\nimproving the stability and performance of the Django 1.2 codebase.</p>\n<p>With four exceptions, Django 1.2.5 maintains backwards compatibility\nwith Django 1.2.4. It also contains a number of fixes and other\nimprovements. Django 1.2.5 is a recommended upgrade for any\ndevelopment or deployment currently using or targeting Django 1.2.</p>\n<p>For full details on the new features, backwards incompatibilities, and\ndeprecated features in the 1.2 branch, see the <a class=\"reference internal\" href=\"../1.2/\"><span class=\"doc\">Django 1.2 release notes</span></a>.</p>\n<div class=\"section\" id=\"s-backwards-incompatible-changes\">\n<span id=\"backwards-incompatible-changes\"></span><h2>Backwards incompatible changes<a class=\"headerlink\" href=\"#backwards-incompatible-changes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-csrf-exception-for-ajax-requests\">\n<span id=\"csrf-exception-for-ajax-requests\"></span><h3>CSRF exception for AJAX requests<a class=\"headerlink\" href=\"#csrf-exception-for-ajax-requests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django includes a CSRF-protection mechanism, which makes use of a\ntoken inserted into outgoing forms. Middleware then checks for the\ntoken\u2019s presence on form submission, and validates it.</p>\n<p>Prior to Django 1.2.5, our CSRF protection made an exception for AJAX\nrequests, on the following basis:</p>\n<ul class=\"simple\">\n<li>Many AJAX toolkits add an X-Requested-With header when using\nXMLHttpRequest.</li>\n<li>Browsers have strict same-origin policies regarding\nXMLHttpRequest.</li>\n<li>In the context of a browser, the only way that a custom header\nof this nature can be added is with XMLHttpRequest.</li>\n</ul>\n<p>Therefore, for ease of use, we did not apply CSRF checks to requests\nthat appeared to be AJAX on the basis of the X-Requested-With header.\nThe Ruby on Rails web framework had a similar exemption.</p>\n<p>Recently, engineers at Google made members of the Ruby on Rails\ndevelopment team aware of a combination of browser plugins and\nredirects which can allow an attacker to provide custom HTTP headers\non a request to any website. This can allow a forged request to appear\nto be an AJAX request, thereby defeating CSRF protection which trusts\nthe same-origin nature of AJAX requests.</p>\n<p>Michael Koziarski of the Rails team brought this to our attention, and\nwe were able to produce a proof-of-concept demonstrating the same\nvulnerability in Django\u2019s CSRF handling.</p>\n<p>To remedy this, Django will now apply full CSRF validation to all\nrequests, regardless of apparent AJAX origin. This is technically\nbackwards-incompatible, but the security risks have been judged to\noutweigh the compatibility concerns in this case.</p>\n<p>Additionally, Django will now accept the CSRF token in the custom HTTP\nheader X-CSRFTOKEN, as well as in the form submission itself, for ease\nof use with popular JavaScript toolkits which allow insertion of\ncustom headers into all AJAX requests.</p>\n<p>Please see the <a class=\"reference internal\" href=\"../../howto/csrf/#csrf-ajax\"><span class=\"std std-ref\">CSRF docs for example jQuery code</span></a>\nthat demonstrates this technique, ensuring that you are looking at the\ndocumentation for your version of Django, as the exact code necessary\nis different for some older versions of Django.</p>\n</div>\n<div class=\"section\" id=\"s-filefield-no-longer-deletes-files\">\n<span id=\"filefield-no-longer-deletes-files\"></span><h3>FileField no longer deletes files<a class=\"headerlink\" href=\"#filefield-no-longer-deletes-files\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In earlier Django versions, when a model instance containing a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> was deleted,\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> took it upon itself to also delete the\nfile from the backend storage. This opened the door to several potentially\nserious data-loss scenarios, including rolled-back transactions and fields on\ndifferent models referencing the same file. In Django 1.2.5,\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> will never delete files from the backend\nstorage. If you need cleanup of orphaned files, you\u2019ll need to handle it\nyourself (for instance, with a custom management command that can be run\nmanually or scheduled to run periodically via e.g. cron).</p>\n</div>\n<div class=\"section\" id=\"s-use-of-custom-sql-to-load-initial-data-in-tests\">\n<span id=\"use-of-custom-sql-to-load-initial-data-in-tests\"></span><h3>Use of custom SQL to load initial data in tests<a class=\"headerlink\" href=\"#use-of-custom-sql-to-load-initial-data-in-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django provides a custom SQL hooks as a way to inject hand-crafted SQL\ninto the database synchronization process. One of the possible uses\nfor this custom SQL is to insert data into your database. If your\ncustom SQL contains <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code> statements, those insertions will be\nperformed every time your database is synchronized. This includes the\nsynchronization of any test databases that are created when you run a\ntest suite.</p>\n<p>However, in the process of testing the Django 1.3, it was discovered\nthat this feature has never completely worked as advertised. When\nusing database backends that don\u2019t support transactions, or when using\na TransactionTestCase, data that has been inserted using custom SQL\nwill not be visible during the testing process.</p>\n<p>Unfortunately, there was no way to rectify this problem without\nintroducing a backwards incompatibility. Rather than leave\nSQL-inserted initial data in an uncertain state, Django now enforces\nthe policy that data inserted by custom SQL will <em>not</em> be visible\nduring testing.</p>\n<p>This change only affects the testing process. You can still use custom\nSQL to load data into your production database as part of the <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code>\nprocess. If you require data to exist during test conditions, you\nshould either insert it using <a class=\"reference internal\" href=\"../../topics/testing/tools/#topics-testing-fixtures\"><span class=\"std std-ref\">test fixtures</span></a>, or using the <code class=\"docutils literal notranslate\"><span class=\"pre\">setUp()</span></code> method of your\ntest case.</p>\n</div>\n<div class=\"section\" id=\"s-modeladmin-lookup-allowed-signature-changed\">\n<span id=\"modeladmin-lookup-allowed-signature-changed\"></span><h3>ModelAdmin.lookup_allowed signature changed<a class=\"headerlink\" href=\"#modeladmin-lookup-allowed-signature-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.2.4 introduced a method <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_allowed</span></code> on <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code>, to cope\nwith a security issue (changeset <a class=\"reference external\" href=\"https://github.com/django/django/commit/85207a245bf09fdebe486b4c7bbcb65300f2a693\">[15033]</a>). Although this method was never\ndocumented, it seems some people have overridden <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_allowed</span></code>, especially\nto cope with regressions introduced by that changeset. While the method is\nstill undocumented and not marked as stable, it may be helpful to know that the\nsignature of this function has changed.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.2.4", "Django 1.2.4 release notes", "N", "next"], ["releases/1.2.6", "Django 1.2.6 release notes", "P", "previous"]], "sourcename": "releases/1.2.5.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.2.5 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes\">Backwards incompatible changes</a><ul>\n<li><a class=\"reference internal\" href=\"#csrf-exception-for-ajax-requests\">CSRF exception for AJAX requests</a></li>\n<li><a class=\"reference internal\" href=\"#filefield-no-longer-deletes-files\">FileField no longer deletes files</a></li>\n<li><a class=\"reference internal\" href=\"#use-of-custom-sql-to-load-initial-data-in-tests\">Use of custom SQL to load initial data in tests</a></li>\n<li><a class=\"reference internal\" href=\"#modeladmin-lookup-allowed-signature-changed\">ModelAdmin.lookup_allowed signature changed</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.2.5", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}