{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.8.1/", "title": "Django 1.8.1 release notes"}, "next": {"link": "../1.7.11/", "title": "Django 1.7.11 release notes"}, "title": "Django 1.8 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-8-release-notes\">\n<span id=\"django-1-8-release-notes\"></span><h1>Django 1.8 release notes<a class=\"headerlink\" href=\"#django-1-8-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>April 1, 2015</em></p>\n<p>Welcome to Django 1.8!</p>\n<p>These release notes cover the <a class=\"reference internal\" href=\"#whats-new-1-8\"><span class=\"std std-ref\">new features</span></a>, as well as\nsome <a class=\"reference internal\" href=\"#backwards-incompatible-1-8\"><span class=\"std std-ref\">backwards incompatible changes</span></a> you\u2019ll\nwant to be aware of when upgrading from Django 1.7 or older versions. We\u2019ve\nalso <a class=\"reference internal\" href=\"#deprecated-features-1-8\"><span class=\"std std-ref\">begun the deprecation process for some features</span></a>, and some features have reached the end of their\ndeprecation process and <a class=\"reference internal\" href=\"#removed-features-1-8\"><span class=\"std std-ref\">have been removed</span></a>.</p>\n<p>See the <a class=\"reference internal\" href=\"../../howto/upgrade-version/\"><span class=\"doc\">How to upgrade Django to a newer version</span></a> guide if you\u2019re updating an existing\nproject.</p>\n<p>Django 1.8 has been designated as Django\u2019s second <a class=\"reference internal\" href=\"../../internals/release-process/#term-Long-term-support-release\"><span class=\"xref std std-term\">long-term support\nrelease</span></a>. It will receive security updates for at\nleast three years after its release. Support for the previous LTS, Django 1.4,\nwill end 6 months from the release date of Django 1.8.</p>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.8 requires Python 2.7, 3.2, 3.3, 3.4, or 3.5. We <strong>highly recommend</strong>\nand only officially support the latest release of each series.</p>\n<p>Django 1.8 is the first release to support Python 3.5.</p>\n<p>Due to the end of upstream support for Python 3.2 in February 2016, we won\u2019t\ntest Django 1.8.x on Python 3.2 after the end of 2016.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-8\">\n<span id=\"s-whats-new-1-8\"></span><span id=\"what-s-new-in-django-1-8\"></span><span id=\"whats-new-1-8\"></span><h2>What\u2019s new in Django 1.8<a class=\"headerlink\" href=\"#what-s-new-in-django-1-8\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-model-meta-api\">\n<span id=\"model-meta-api\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta</span></code> API<a class=\"headerlink\" href=\"#model-meta-api\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now has a formalized API for <a class=\"reference internal\" href=\"../../ref/models/meta/\"><span class=\"doc\">Model._meta</span></a>,\nproviding an officially supported way to <a class=\"reference internal\" href=\"../../ref/models/meta/#model-meta-field-api\"><span class=\"std std-ref\">retrieve fields</span></a> and filter fields based on their <a class=\"reference internal\" href=\"../../ref/models/fields/#model-field-attributes\"><span class=\"std std-ref\">attributes</span></a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta</span></code> object has been part of Django since the days of pre-0.96\n\u201cMagic Removal\u201d \u2013 it just wasn\u2019t an official, stable API. In recognition of\nthis, we\u2019ve endeavored to maintain backwards-compatibility with the old\nAPI endpoint where possible. However, API endpoints that aren\u2019t part of the\nnew official API have been deprecated and will eventually be removed.</p>\n</div>\n<div class=\"section\" id=\"s-multiple-template-engines\">\n<span id=\"multiple-template-engines\"></span><h3>Multiple template engines<a class=\"headerlink\" href=\"#multiple-template-engines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.8 defines a stable API for integrating template backends. It includes\nbuilt-in support for the Django template language and for\n<a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.jinja2.Jinja2\" title=\"django.template.backends.jinja2.Jinja2\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Jinja2</span></code></a>. It supports rendering\ntemplates with multiple engines within the same project. Learn more about the\nnew features in the <a class=\"reference internal\" href=\"../../topics/templates/\"><span class=\"doc\">topic guide</span></a> and check the\nupgrade instructions in older versions of the documentation.</p>\n</div>\n<div class=\"section\" id=\"s-security-enhancements\">\n<span id=\"security-enhancements\"></span><h3>Security enhancements<a class=\"headerlink\" href=\"#security-enhancements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Several features of the <a class=\"reference external\" href=\"https://pypi.org/project/django-secure/\">django-secure</a> third-party library have been\nintegrated into Django. <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.security.SecurityMiddleware\" title=\"django.middleware.security.SecurityMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.middleware.security.SecurityMiddleware</span></code></a>\nprovides several security enhancements to the request/response cycle. The new\n<a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-check-deploy\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">check</span> <span class=\"pre\">--deploy</span></code></a> option allows you to check your production settings\nfile for ways to increase the security of your site.</p>\n</div>\n<div class=\"section\" id=\"s-new-postgresql-specific-functionality\">\n<span id=\"new-postgresql-specific-functionality\"></span><h3>New PostgreSQL specific functionality<a class=\"headerlink\" href=\"#new-postgresql-specific-functionality\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now has a module with extensions for PostgreSQL specific features, such\nas <a class=\"reference internal\" href=\"../../ref/contrib/postgres/fields/#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/contrib/postgres/fields/#django.contrib.postgres.fields.HStoreField\" title=\"django.contrib.postgres.fields.HStoreField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code></a>, <a class=\"reference internal\" href=\"../../ref/contrib/postgres/fields/#range-fields\"><span class=\"std std-ref\">Range Fields</span></a>, and\n<a class=\"reference internal\" href=\"../../ref/contrib/postgres/lookups/#std-fieldlookup-unaccent\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">unaccent</span></code></a> lookup. A full breakdown of the features is available\n<a class=\"reference internal\" href=\"../../ref/contrib/postgres/\"><span class=\"doc\">in the documentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-new-data-types\">\n<span id=\"new-data-types\"></span><h3>New data types<a class=\"headerlink\" href=\"#new-data-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Django now has a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.UUIDField\" title=\"django.db.models.UUIDField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UUIDField</span></code></a> for storing\nuniversally unique identifiers. It is stored as the native <code class=\"docutils literal notranslate\"><span class=\"pre\">uuid</span></code> data type\non PostgreSQL and as a fixed length character field on other backends. There\nis a corresponding <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.UUIDField\" title=\"django.forms.UUIDField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">form</span> <span class=\"pre\">field</span></code></a>.</li>\n<li>Django now has a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DurationField\" title=\"django.db.models.DurationField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DurationField</span></code></a> for storing periods\nof time - modeled in Python by <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">timedelta</span></code></a>. It is\nstored in the native <code class=\"docutils literal notranslate\"><span class=\"pre\">interval</span></code> data type on PostgreSQL, as a <code class=\"docutils literal notranslate\"><span class=\"pre\">INTERVAL</span>\n<span class=\"pre\">DAY(9)</span> <span class=\"pre\">TO</span> <span class=\"pre\">SECOND(6)</span></code> on Oracle, and as a <code class=\"docutils literal notranslate\"><span class=\"pre\">bigint</span></code> of microseconds on other\nbackends. Date and time related arithmetic has also been improved on all\nbackends. There is a corresponding <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.DurationField\" title=\"django.forms.DurationField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">form</span> <span class=\"pre\">field</span></code></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-query-expressions-conditional-expressions-and-database-functions\">\n<span id=\"query-expressions-conditional-expressions-and-database-functions\"></span><h3>Query Expressions, Conditional Expressions, and Database Functions<a class=\"headerlink\" href=\"#query-expressions-conditional-expressions-and-database-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/models/expressions/\"><span class=\"doc\">Query Expressions</span></a> allow you to create,\ncustomize, and compose complex SQL expressions. This has enabled annotate\nto accept expressions other than aggregates. Aggregates are now able to\nreference multiple fields, as well as perform arithmetic, similar to <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code>\nobjects. <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> has also gained the\nability to accept expressions.</p>\n<p><a class=\"reference internal\" href=\"../../ref/models/conditional-expressions/\"><span class=\"doc\">Conditional Expressions</span></a> allow\nyou to use <a class=\"reference external\" href=\"https://docs.python.org/3/reference/compound_stmts.html#if\" title=\"(in Python v3.11)\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">if</span></code></a> \u2026 <a class=\"reference external\" href=\"https://docs.python.org/3/reference/compound_stmts.html#elif\" title=\"(in Python v3.11)\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">elif</span></code></a> \u2026 <a class=\"reference external\" href=\"https://docs.python.org/3/reference/compound_stmts.html#else\" title=\"(in Python v3.11)\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">else</span></code></a> logic within\nqueries.</p>\n<p>A collection of <a class=\"reference internal\" href=\"../../ref/models/database-functions/\"><span class=\"doc\">database functions</span></a> is\nalso included with functionality such as\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Coalesce\" title=\"django.db.models.functions.Coalesce\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Coalesce</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Concat\" title=\"django.db.models.functions.Concat\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Concat</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Substr\" title=\"django.db.models.functions.Substr\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Substr</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-testcase-data-setup\">\n<span id=\"testcase-data-setup\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> data setup<a class=\"headerlink\" href=\"#testcase-data-setup\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> has been refactored to allow for data\ninitialization at the class level using transactions and savepoints. Database\nbackends which do not support transactions, like MySQL with the MyISAM storage\nengine, will still be able to run these tests but won\u2019t benefit from the\nimprovements. Tests are now run within two nested\n<a class=\"reference internal\" href=\"../../topics/db/transactions/#django.db.transaction.atomic\" title=\"django.db.transaction.atomic\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">atomic()</span></code></a> blocks: one for the whole class and one\nfor each test.</p>\n<ul class=\"simple\">\n<li>The class method\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase.setUpTestData\" title=\"django.test.TestCase.setUpTestData\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">TestCase.setUpTestData()</span></code></a> adds\nthe ability to set up test data at the class level. Using this technique can\nspeed up the tests as compared to using <code class=\"docutils literal notranslate\"><span class=\"pre\">setUp()</span></code>.</li>\n<li>Fixture loading within <code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> is now performed once for the whole\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-minor-features\">\n<span id=\"minor-features\"></span><h3>Minor features<a class=\"headerlink\" href=\"#minor-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-django-contrib-admin\">\n<span id=\"django-contrib-admin\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a><a class=\"headerlink\" href=\"#django-contrib-admin\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> now has a\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.has_module_permission\" title=\"django.contrib.admin.ModelAdmin.has_module_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_module_permission()</span></code></a>\nmethod to allow limiting access to the module on the admin index page.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin\" title=\"django.contrib.admin.InlineModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">InlineModelAdmin</span></code></a> now has an attribute\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.InlineModelAdmin.show_change_link\" title=\"django.contrib.admin.InlineModelAdmin.show_change_link\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">show_change_link</span></code></a> that\nsupports showing a link to an inline object\u2019s change form.</li>\n<li>Use the new <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.RelatedOnlyFieldListFilter</span></code> in\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter\" title=\"django.contrib.admin.ModelAdmin.list_filter\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.list_filter</span></code></a>\nto limit the <code class=\"docutils literal notranslate\"><span class=\"pre\">list_filter</span></code> choices to foreign objects which are attached to\nthose from the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.delete_view\" title=\"django.contrib.admin.ModelAdmin.delete_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.delete_view()</span></code></a> displays a summary of objects\nto be deleted on the deletion confirmation page.</li>\n<li>The jQuery library embedded in the admin has been upgraded to version 1.11.2.</li>\n<li>You can now specify <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.site_url\" title=\"django.contrib.admin.AdminSite.site_url\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AdminSite.site_url</span></code></a> in order to display a link to the\nfront-end site.</li>\n<li>You can now specify <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.show_full_result_count\" title=\"django.contrib.admin.ModelAdmin.show_full_result_count\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.show_full_result_count</span></code></a> to control whether\nor not the full count of objects should be displayed on a filtered admin page.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite.password_change()</span></code> method now has an <code class=\"docutils literal notranslate\"><span class=\"pre\">extra_context</span></code>\nparameter.</li>\n<li>You can now control who may login to the admin site by overriding only\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.has_permission\" title=\"django.contrib.admin.AdminSite.has_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.has_permission()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.login_form\" title=\"django.contrib.admin.AdminSite.login_form\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AdminSite.login_form</span></code></a>.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code> template has a new block <code class=\"docutils literal notranslate\"><span class=\"pre\">usertools</span></code> which contains the\nuser-specific header. A new context variable <code class=\"docutils literal notranslate\"><span class=\"pre\">has_permission</span></code>, which gets\nits value from <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.has_permission\" title=\"django.contrib.admin.AdminSite.has_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_permission()</span></code></a>,\nindicates whether the user may access the site.</li>\n<li>Foreign key dropdowns now have buttons for changing or deleting related\nobjects using a popup.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-admindocs\">\n<span id=\"django-contrib-admindocs\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/admin/admindocs/#module-django.contrib.admindocs\" title=\"django.contrib.admindocs: Django's admin documentation generator.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs</span></code></a><a class=\"headerlink\" href=\"#django-contrib-admindocs\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>reStructuredText is now parsed in model docstrings.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-auth\">\n<span id=\"django-contrib-auth\"></span><h4><a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a><a class=\"headerlink\" href=\"#django-contrib-auth\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Authorization backends can now raise\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.PermissionDenied\" title=\"django.core.exceptions.PermissionDenied\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code></a> in\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.has_perm\" title=\"django.contrib.auth.models.User.has_perm\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_perm()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.has_module_perms\" title=\"django.contrib.auth.models.User.has_module_perms\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_module_perms()</span></code></a>\nto short-circuit permission checking.</li>\n<li><a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.forms.PasswordResetForm\" title=\"django.contrib.auth.forms.PasswordResetForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PasswordResetForm</span></code></a> now\nhas a method <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.forms.PasswordResetForm.send_mail\" title=\"django.contrib.auth.forms.PasswordResetForm.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a>\nthat can be overridden to customize the mail to be sent.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> of <a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.Permission.name\" title=\"django.contrib.auth.models.Permission.name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Permission.name</span></code></a> has been increased from 50 to\n255 characters. Please run the database migration.</li>\n<li><a class=\"reference internal\" href=\"../../topics/auth/customizing/#django.contrib.auth.models.CustomUser.USERNAME_FIELD\" title=\"django.contrib.auth.models.CustomUser.USERNAME_FIELD\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">USERNAME_FIELD</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/auth/customizing/#django.contrib.auth.models.CustomUser.REQUIRED_FIELDS\" title=\"django.contrib.auth.models.CustomUser.REQUIRED_FIELDS\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">REQUIRED_FIELDS</span></code></a> now supports\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>s.</li>\n<li>The default iteration count for the PBKDF2 password hasher has been\nincreased by 33%. This backwards compatible change will not affect users who\nhave subclassed <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></code> to\nchange the default value.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-gis\">\n<span id=\"django-contrib-gis\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/gis/#module-django.contrib.gis\" title=\"django.contrib.gis: Geographic Information System (GIS) extensions for Django\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a><a class=\"headerlink\" href=\"#django-contrib-gis\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>A new <a class=\"reference internal\" href=\"../../ref/contrib/gis/serializers/\"><span class=\"doc\">GeoJSON serializer</span></a> is now\navailable.</li>\n<li>It is now allowed to include a subquery as a geographic lookup argument, for\nexample <code class=\"docutils literal notranslate\"><span class=\"pre\">City.objects.filter(point__within=Country.objects.filter(continent='Africa').values('mpoly'))</span></code>.</li>\n<li>The SpatiaLite backend now supports <code class=\"docutils literal notranslate\"><span class=\"pre\">Collect</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Extent</span></code> aggregates\nwhen the database version is 3.0 or later.</li>\n<li>The PostGIS 2 <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">EXTENSION</span> <span class=\"pre\">postgis</span></code> and the SpatiaLite\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">InitSpatialMetaData</span></code> initialization commands are now automatically\nrun by <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>.</li>\n<li>The GDAL interface now supports retrieving properties of\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/gdal/#raster-data-source-objects\"><span class=\"std std-ref\">raster (image) data file</span></a>.</li>\n<li>Compatibility shims for <code class=\"docutils literal notranslate\"><span class=\"pre\">SpatialRefSys</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeometryColumns</span></code> changed in\nDjango 1.2 have been removed.</li>\n<li>All GDAL-related exceptions are now raised with <code class=\"docutils literal notranslate\"><span class=\"pre\">GDALException</span></code>. The former\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OGRException</span></code> has been kept for backwards compatibility but should not be\nused any longer.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sessions\">\n<span id=\"django-contrib-sessions\"></span><h4><a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sessions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Session cookie is now deleted after\n<a class=\"reference internal\" href=\"../../topics/http/sessions/#django.contrib.sessions.backends.base.SessionBase.flush\" title=\"django.contrib.sessions.backends.base.SessionBase.flush\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">flush()</span></code></a> is called.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sitemaps\">\n<span id=\"django-contrib-sitemaps\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#module-django.contrib.sitemaps\" title=\"django.contrib.sitemaps: A framework for generating Google sitemap XML files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sitemaps\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The new <a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#django.contrib.sitemaps.Sitemap.i18n\" title=\"django.contrib.sitemaps.Sitemap.i18n\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Sitemap.i18n</span></code></a> attribute\nallows you to generate a sitemap based on the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGES</span></code></a> setting.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sites\">\n<span id=\"django-contrib-sites\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/sites/#module-django.contrib.sites\" title=\"django.contrib.sites: Lets you operate multiple websites from the same database and Django project\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sites\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/sites/#django.contrib.sites.shortcuts.get_current_site\" title=\"django.contrib.sites.shortcuts.get_current_site\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code></a> will now lookup\nthe current site based on <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">request.get_host()</span></code></a> if the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting is not\ndefined.</li>\n<li>The default <a class=\"reference internal\" href=\"../../ref/contrib/sites/#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> created when running\n<code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> now respects the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting (instead of always\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">pk=1</span></code>).</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-cache\">\n<span id=\"cache\"></span><h4>Cache<a class=\"headerlink\" href=\"#cache\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">incr()</span></code> method of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.backends.locmem.LocMemCache</span></code> backend is now thread-safe.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-cryptography\">\n<span id=\"cryptography\"></span><h4>Cryptography<a class=\"headerlink\" href=\"#cryptography\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> parameter of the\n<a class=\"reference internal\" href=\"../../topics/signing/#django.core.signing.TimestampSigner.unsign\" title=\"django.core.signing.TimestampSigner.unsign\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.core.signing.TimestampSigner.unsign()</span></code></a> method now also accepts a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.timedelta</span></code></a> object.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-database-backends\">\n<span id=\"database-backends\"></span><h4>Database backends<a class=\"headerlink\" href=\"#database-backends\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The MySQL backend no longer strips microseconds from <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> values as\nMySQL 5.6.4 and up supports fractional seconds depending on the declaration\nof the datetime field (when <code class=\"docutils literal notranslate\"><span class=\"pre\">DATETIME</span></code> includes fractional precision greater\nthan 0). New datetime database columns created with Django 1.8 and MySQL 5.6.4\nand up will support microseconds. See the <a class=\"reference internal\" href=\"../../ref/databases/#mysql-fractional-seconds\"><span class=\"std std-ref\">MySQL database notes</span></a> for more details.</li>\n<li>The MySQL backend no longer creates explicit indexes for foreign keys when\nusing the InnoDB storage engine, as MySQL already creates them automatically.</li>\n<li>The Oracle backend no longer defines the <code class=\"docutils literal notranslate\"><span class=\"pre\">connection_persists_old_columns</span></code>\nfeature as <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Instead, Oracle will now include a cache busting clause\nwhen getting the description of a table.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-email\">\n<span id=\"email\"></span><h4>Email<a class=\"headerlink\" href=\"#email\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../topics/email/#topic-email-backends\"><span class=\"std std-ref\">Email backends</span></a> now support the context manager\nprotocol for opening and closing connections.</li>\n<li>The SMTP email backend now supports <code class=\"docutils literal notranslate\"><span class=\"pre\">keyfile</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">certfile</span></code>\nauthentication with the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_SSL_CERTFILE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_SSL_CERTFILE</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_SSL_KEYFILE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_SSL_KEYFILE</span></code></a> settings.</li>\n<li>The SMTP <a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.backends.smtp.EmailBackend\" title=\"django.core.mail.backends.smtp.EmailBackend\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailBackend</span></code></a> now supports\nsetting the <code class=\"docutils literal notranslate\"><span class=\"pre\">timeout</span></code> parameter with the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_TIMEOUT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_TIMEOUT</span></code></a> setting.</li>\n<li><a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.EmailMessage\" title=\"django.core.mail.EmailMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailMessage</span></code></a> and <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailMultiAlternatives</span></code> now\nsupport the <code class=\"docutils literal notranslate\"><span class=\"pre\">reply_to</span></code> parameter.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-file-storage\">\n<span id=\"file-storage\"></span><h4>File Storage<a class=\"headerlink\" href=\"#file-storage\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.get_available_name\" title=\"django.core.files.storage.Storage.get_available_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.get_available_name()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.save\" title=\"django.core.files.storage.Storage.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.save()</span></code></a>\nnow take a <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> argument to implement storage-level maximum\nfilename length constraints. Filenames exceeding this argument will get\ntruncated. This prevents a database error when appending a unique suffix to a\nlong filename that already exists on the storage. See the <a class=\"reference internal\" href=\"#storage-max-length-update\"><span class=\"std std-ref\">deprecation\nnote</span></a> about adding this argument to your custom\nstorage classes.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-forms\">\n<span id=\"forms\"></span><h4>Forms<a class=\"headerlink\" href=\"#forms\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Form widgets now render attributes with a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>\nas HTML5 boolean attributes.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.has_error\" title=\"django.forms.Form.has_error\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_error()</span></code></a> method allows checking\nif a specific error has happened.</li>\n<li>If <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.required_css_class\" title=\"django.forms.Form.required_css_class\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">required_css_class</span></code></a> is defined on a form, then\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> tags for required fields will have this class present in its\nattributes.</li>\n<li>The rendering of non-field errors in unordered lists (<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;ul&gt;</span></code>) now includes\n<code class=\"docutils literal notranslate\"><span class=\"pre\">nonfield</span></code> in its list of classes to distinguish them from field-specific\nerrors.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field\" title=\"django.forms.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> now accepts a\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.label_suffix\" title=\"django.forms.Field.label_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code></a> argument, which will override the\nform\u2019s <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.label_suffix\" title=\"django.forms.Form.label_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code></a>. This enables customizing the\nsuffix on a per-field basis \u2014 previously it wasn\u2019t possible to override\na form\u2019s <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.label_suffix\" title=\"django.forms.Form.label_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code></a> while using  shortcuts such\nas <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form.as_p</span> <span class=\"pre\">}}</span></code> in templates.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.SelectDateWidget\" title=\"django.forms.SelectDateWidget\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectDateWidget</span></code></a> now accepts an\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.SelectDateWidget.empty_label\" title=\"django.forms.SelectDateWidget.empty_label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">empty_label</span></code></a> argument, which will\noverride the top list choice label when <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.DateField\" title=\"django.forms.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a>\nis not required.</li>\n<li>After an <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ImageField\" title=\"django.forms.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a> has been cleaned and validated, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code> object will have an additional <code class=\"docutils literal notranslate\"><span class=\"pre\">image</span></code> attribute containing\nthe Pillow <code class=\"docutils literal notranslate\"><span class=\"pre\">Image</span></code> instance used to check if the file was a valid image. It\nwill also update <code class=\"docutils literal notranslate\"><span class=\"pre\">UploadedFile.content_type</span></code> with the image\u2019s content type\nas determined by Pillow.</li>\n<li>You can now pass a callable that returns an iterable of choices when\ninstantiating a <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ChoiceField\" title=\"django.forms.ChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ChoiceField</span></code></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-generic-views\">\n<span id=\"generic-views\"></span><h4>Generic Views<a class=\"headerlink\" href=\"#generic-views\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Generic views that use <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin\" title=\"django.views.generic.list.MultipleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectMixin</span></code></a>\nmay now specify the ordering applied to the\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.queryset\" title=\"django.views.generic.list.MultipleObjectMixin.queryset\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">queryset</span></code></a> by setting\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.ordering\" title=\"django.views.generic.list.MultipleObjectMixin.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ordering</span></code></a> or overriding\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_ordering\" title=\"django.views.generic.list.MultipleObjectMixin.get_ordering\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_ordering()</span></code></a>.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.query_pk_and_slug\" title=\"django.views.generic.detail.SingleObjectMixin.query_pk_and_slug\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin.query_pk_and_slug</span></code></a>\nattribute allows changing the behavior of\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.get_object\" title=\"django.views.generic.detail.SingleObjectMixin.get_object\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_object()</span></code></a>\nso that it\u2019ll perform its lookup using both the primary key and the slug.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.get_form\" title=\"django.views.generic.edit.FormMixin.get_form\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_form()</span></code></a> method doesn\u2019t\nrequire a <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> to be provided anymore. If not provided <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code>\ndefaults to <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.get_form_class\" title=\"django.views.generic.edit.FormMixin.get_form_class\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_form_class()</span></code></a>.</li>\n<li>Placeholders in <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.ModelFormMixin.success_url\" title=\"django.views.generic.edit.ModelFormMixin.success_url\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelFormMixin.success_url</span></code></a> now support the Python\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#str.format\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">str.format()</span></code></a> syntax. The legacy <code class=\"docutils literal notranslate\"><span class=\"pre\">%(&lt;foo&gt;)s</span></code> syntax is still\nsupported but will be removed in Django 1.10.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-internationalization\">\n<span id=\"internationalization\"></span><h4>Internationalization<a class=\"headerlink\" href=\"#internationalization\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FORMAT_MODULE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FORMAT_MODULE_PATH</span></code></a> can now be a list of strings representing\nmodule paths. This allows importing several format modules from different\nreusable apps. It also allows overriding those custom formats in your main\nDjango project.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-logging\">\n<span id=\"logging\"></span><h4>Logging<a class=\"headerlink\" href=\"#logging\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/logging/#django.utils.log.AdminEmailHandler\" title=\"django.utils.log.AdminEmailHandler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.log.AdminEmailHandler</span></code></a> class now has a\n<a class=\"reference internal\" href=\"../../ref/logging/#django.utils.log.AdminEmailHandler.send_mail\" title=\"django.utils.log.AdminEmailHandler.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> method to make it more\nsubclass friendly.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-management-commands\">\n<span id=\"management-commands\"></span><h4>Management Commands<a class=\"headerlink\" href=\"#management-commands\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Database connections are now always closed after a management command called\nfrom the command line has finished doing its job.</li>\n<li>Commands from alternate package formats like eggs are now also discovered.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-dumpdata-output\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">dumpdata</span> <span class=\"pre\">--output</span></code></a> option allows specifying a file to which\nthe serialized data is written.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-makemessages-exclude\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">makemessages</span> <span class=\"pre\">--exclude</span></code></a> and <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-compilemessages-exclude\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">compilemessages</span>\n<span class=\"pre\">--exclude</span></code></a> options allow excluding specific locales from processing.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-compilemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">compilemessages</span></code></a> now has a <code class=\"docutils literal notranslate\"><span class=\"pre\">--use-fuzzy</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">-f</span></code> option which\nincludes fuzzy translations into compiled files.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-loaddata-ignorenonexistent\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">loaddata</span> <span class=\"pre\">--ignorenonexistent</span></code></a> option now ignores data for models\nthat no longer exist.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a> now uses daemon threads for faster reloading.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-inspectdb\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">inspectdb</span></code></a> now outputs <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.unique_together</span></code>. It is also able to\nintrospect <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> for MySQL and PostgreSQL\ndatabases.</li>\n<li>When calling management commands with options using\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django.core.management.call_command\" title=\"django.core.management.call_command\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">call_command()</span></code></a>, the option name can match the\ncommand line option name (without the initial dashes) or the final option\ndestination variable name, but in either case, the resulting option received\nby the command is now always the <code class=\"docutils literal notranslate\"><span class=\"pre\">dest</span></code> name specified in the command\noption definition (as long as the command uses the <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#module-argparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code></a> module).</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dbshell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dbshell</span></code></a> command now supports MySQL\u2019s optional SSL certificate\nauthority setting (<code class=\"docutils literal notranslate\"><span class=\"pre\">--ssl-ca</span></code>).</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-makemigrations-name\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">makemigrations</span> <span class=\"pre\">--name</span></code></a> allows giving the migration(s) a\ncustom name instead of a generated one.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-loaddata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">loaddata</span></code></a> command now prevents repeated fixture loading. If\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FIXTURE_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FIXTURE_DIRS</span></code></a> contains duplicates or a default fixture directory\npath (<code class=\"docutils literal notranslate\"><span class=\"pre\">app_name/fixtures</span></code>), an exception is raised.</li>\n<li>The new <code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span> <span class=\"pre\">--exit</span></code> option allows exiting with an error\ncode if no migrations are created.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-showmigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">showmigrations</span></code></a> command allows listing all migrations and\ntheir dependencies in a project.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-middleware\">\n<span id=\"middleware\"></span><h4>Middleware<a class=\"headerlink\" href=\"#middleware\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.CommonMiddleware.response_redirect_class\" title=\"django.middleware.common.CommonMiddleware.response_redirect_class\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">CommonMiddleware.response_redirect_class</span></code></a>\nattribute allows you to customize the redirects issued by the middleware.</li>\n<li>A debug message will be logged to the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.request</span></code> logger when a\nmiddleware raises a <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.MiddlewareNotUsed\" title=\"django.core.exceptions.MiddlewareNotUsed\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">MiddlewareNotUsed</span></code></a> exception\nin <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> mode.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-migrations\">\n<span id=\"migrations\"></span><h4>Migrations<a class=\"headerlink\" href=\"#migrations\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a> operation can now handle\nparameters passed to the SQL statements.</li>\n<li>It is now possible to have migrations (most probably <a class=\"reference internal\" href=\"../../topics/migrations/#data-migrations\"><span class=\"std std-ref\">data migrations</span></a>) for applications without models.</li>\n<li>Migrations can now <a class=\"reference internal\" href=\"../../topics/migrations/#using-managers-in-migrations\"><span class=\"std std-ref\">serialize model managers</span></a> as part of the model state.</li>\n<li>A <a class=\"reference internal\" href=\"../../topics/migrations/#migrations-removing-model-fields\"><span class=\"std std-ref\">generic mechanism to handle the deprecation of model fields</span></a> was added.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython.noop\" title=\"django.db.migrations.operations.RunPython.noop\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">RunPython.noop()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL.noop\" title=\"django.db.migrations.operations.RunSQL.noop\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">RunSQL.noop</span></code></a> class\nmethod/attribute were added to ease in making <code class=\"docutils literal notranslate\"><span class=\"pre\">RunPython</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code>\noperations reversible.</li>\n<li>The migration operations <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a> now call the\n<a class=\"reference internal\" href=\"../../topics/db/multi-db/#allow_migrate\" title=\"allow_migrate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">allow_migrate()</span></code></a> method of database routers. The router can use the\nnewly introduced <code class=\"docutils literal notranslate\"><span class=\"pre\">app_label</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">hints</span></code> arguments to make a routing\ndecision. To take advantage of this feature you need to update the router to\nthe new <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code> signature, see the <a class=\"reference internal\" href=\"#deprecated-signature-of-allow-migrate\"><span class=\"std std-ref\">deprecation section</span></a> for more details.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-models\">\n<span id=\"models\"></span><h4>Models<a class=\"headerlink\" href=\"#models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Django now logs at most 9000 queries in <code class=\"docutils literal notranslate\"><span class=\"pre\">connections.queries</span></code>, in order\nto prevent excessive memory usage in long-running processes in debug mode.</li>\n<li>There is now a model <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> option to define a\n<a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.default_related_name\" title=\"django.db.models.Options.default_related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span> <span class=\"pre\">related</span> <span class=\"pre\">name</span></code></a>\nfor all relational fields of a model.</li>\n<li>Pickling models and querysets across different versions of Django isn\u2019t\nofficially supported (it may work, but there\u2019s no guarantee). An extra\nvariable that specifies the current Django version is now added to the\npickled state of models and querysets, and Django raises a <code class=\"docutils literal notranslate\"><span class=\"pre\">RuntimeWarning</span></code>\nwhen these objects are unpickled in a different version than the one in\nwhich they were pickled.</li>\n<li>Added <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.from_db\" title=\"django.db.models.Model.from_db\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.from_db()</span></code></a> which\nDjango uses whenever objects are loaded using the ORM. The method allows\ncustomizing model loading behavior.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">extra(select={...})</span></code> now allows you to escape a literal <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code> sequence\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">%%s</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../howto/custom-lookups/\"><span class=\"doc\">Custom Lookups</span></a> can now be registered using\na decorator pattern.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/models/lookups/#django.db.models.Transform.bilateral\" title=\"django.db.models.Transform.bilateral\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Transform.bilateral</span></code></a>\nattribute allows creating bilateral transformations. These transformations\nare applied to both <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs</span></code> when used in a lookup expression,\nproviding opportunities for more sophisticated lookups.</li>\n<li>SQL special characters (, %, _) are now escaped properly when a pattern\nlookup (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code>, etc.) is used with an <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code>\nexpression as the right-hand side. In those cases, the escaping is performed\nby the database, which can lead to somewhat complex queries involving nested\n<code class=\"docutils literal notranslate\"><span class=\"pre\">REPLACE</span></code> function calls.</li>\n<li>You can now refresh model instances by using <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.refresh_from_db\" title=\"django.db.models.Model.refresh_from_db\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.refresh_from_db()</span></code></a>.</li>\n<li>You can now get the set of deferred fields for a model using\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.get_deferred_fields\" title=\"django.db.models.Model.get_deferred_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.get_deferred_fields()</span></code></a>.</li>\n<li>Model field <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>\u2019s are now used when primary key field\u2019s are set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-signals\">\n<span id=\"signals\"></span><h4>Signals<a class=\"headerlink\" href=\"#signals\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Exceptions from the <code class=\"docutils literal notranslate\"><span class=\"pre\">(receiver,</span> <span class=\"pre\">exception)</span></code> tuples returned by\n<a class=\"reference internal\" href=\"../../topics/signals/#django.dispatch.Signal.send_robust\" title=\"django.dispatch.Signal.send_robust\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Signal.send_robust()</span></code></a> now have\ntheir traceback attached as a <code class=\"docutils literal notranslate\"><span class=\"pre\">__traceback__</span></code> attribute.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">environ</span></code> argument, which contains the WSGI environment structure from\nthe request, was added to the <a class=\"reference internal\" href=\"../../ref/signals/#django.core.signals.request_started\" title=\"django.core.signals.request_started\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">request_started</span></code></a>\nsignal.</li>\n<li>You can now import the <a class=\"reference internal\" href=\"../../ref/signals/#django.test.signals.setting_changed\" title=\"django.test.signals.setting_changed\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">setting_changed()</span></code></a> signal\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.signals</span></code> to avoid loading <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test</span></code> in non-test\nsituations. Django no longer does so itself.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-system-check-framework\">\n<span id=\"system-check-framework\"></span><h4>System Check Framework<a class=\"headerlink\" href=\"#system-check-framework\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../topics/checks/#django.core.checks.register\" title=\"django.core.checks.register\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">register</span></code></a> can now be used as a function.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-templates\">\n<span id=\"templates\"></span><h4>Templates<a class=\"headerlink\" href=\"#templates\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-urlize\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">urlize</span></code></a> now supports domain-only links that include characters after\nthe top-level domain (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com/</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com/download/</span></code>).</li>\n<li><a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-urlize\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">urlize</span></code></a> doesn\u2019t treat exclamation marks at the end of a domain or\nits query string as part of the URL (the URL in e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'djangoproject.com!</span></code>\nis <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com</span></code>)</li>\n<li>Added a <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.loaders.locmem.Loader\" title=\"django.template.loaders.locmem.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">locmem.Loader</span></code></a>\nclass that loads Django templates from a Python dictionary.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-now\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">now</span></code></a> tag can now store its output in a context variable with the\nusual syntax: <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">now</span> <span class=\"pre\">'j</span> <span class=\"pre\">n</span> <span class=\"pre\">Y'</span> <span class=\"pre\">as</span> <span class=\"pre\">varname</span> <span class=\"pre\">%}</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-requests-and-responses\">\n<span id=\"requests-and-responses\"></span><h4>Requests and Responses<a class=\"headerlink\" href=\"#requests-and-responses\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code> now respects paths starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">//</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.build_absolute_uri\" title=\"django.http.HttpRequest.build_absolute_uri\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.build_absolute_uri()</span></code></a> method now handles paths\nstarting with <code class=\"docutils literal notranslate\"><span class=\"pre\">//</span></code> correctly.</li>\n<li>If <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> and a request raises a\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.SuspiciousOperation\" title=\"django.core.exceptions.SuspiciousOperation\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SuspiciousOperation</span></code></a>, the response will be\nrendered with a detailed error page.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">query_string</span></code> argument of <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.QueryDict\" title=\"django.http.QueryDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code></a> is now\noptional, defaulting to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, so a blank <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> can now be\ninstantiated with <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict()</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict(None)</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict('')</span></code>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> attributes of an <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a>\nobject are now <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.QueryDict\" title=\"django.http.QueryDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code></a>s rather than dictionaries,\nand the <code class=\"docutils literal notranslate\"><span class=\"pre\">FILES</span></code> attribute is now a <code class=\"docutils literal notranslate\"><span class=\"pre\">MultiValueDict</span></code>.\nThis brings this class into line with the documentation and with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.charset\" title=\"django.http.HttpResponse.charset\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.charset</span></code></a> attribute\nwas added.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequestHandler</span></code> now follows RFC in converting URI to IRI, using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">uri_to_iri()</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.get_full_path\" title=\"django.http.HttpRequest.get_full_path\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.get_full_path()</span></code></a> method now escapes unsafe characters\nfrom the path portion of a Uniform Resource Identifier (URI) properly.</li>\n<li><a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> now implements a few additional methods\nlike <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.getvalue\" title=\"django.http.HttpResponse.getvalue\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">getvalue()</span></code></a> so that instances can be used\nas stream objects.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.setdefault\" title=\"django.http.HttpResponse.setdefault\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpResponse.setdefault()</span></code></a> method allows setting a header unless\nit has already been set.</li>\n<li>You can use the new <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.FileResponse\" title=\"django.http.FileResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code></a> to stream files.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/http/decorators/#django.views.decorators.http.condition\" title=\"django.views.decorators.http.condition\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">condition()</span></code></a> decorator for\nconditional view processing now supports the <code class=\"docutils literal notranslate\"><span class=\"pre\">If-unmodified-since</span></code> header.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-tests\">\n<span id=\"tests\"></span><h4>Tests<a class=\"headerlink\" href=\"#tests\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.RequestFactory\" title=\"django.test.RequestFactory\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestFactory.trace()</span></code></a>\nand <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client.trace\" title=\"django.test.Client.trace\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Client.trace()</span></code></a> methods were\nimplemented, allowing you to create <code class=\"docutils literal notranslate\"><span class=\"pre\">TRACE</span></code> requests in your tests.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">count</span></code> argument was added to\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertTemplateUsed\" title=\"django.test.SimpleTestCase.assertTemplateUsed\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertTemplateUsed()</span></code></a>. This allows you to\nassert that a template was rendered a specific number of times.</li>\n<li>The new <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertJSONNotEqual\" title=\"django.test.SimpleTestCase.assertJSONNotEqual\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertJSONNotEqual()</span></code></a> assertion\nallows you to test that two JSON fragments are not equal.</li>\n<li>Added options to the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-test\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">test</span></code></a> command to preserve the test database\n(<a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-test-keepdb\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--keepdb</span></code></a>), to run the test cases in reverse order\n(<a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-test-reverse\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--reverse</span></code></a>), and to enable SQL logging for failing\ntests (<a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-test-debug-sql\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--debug-sql</span></code></a>).</li>\n<li>Added the <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Response.resolver_match\" title=\"django.test.Response.resolver_match\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">resolver_match</span></code></a> attribute to test\nclient responses.</li>\n<li>Added several settings that allow customization of test tablespace parameters\nfor Oracle: <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATAFILE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATAFILE</span></code></a>, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATAFILE_TMP\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATAFILE_TMP</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATAFILE_MAXSIZE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATAFILE_MAXSIZE</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATAFILE_TMP_MAXSIZE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATAFILE_TMP_MAXSIZE</span></code></a>.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code></a> decorator can now affect the\nmaster router in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE_ROUTERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASE_ROUTERS</span></code></a>.</li>\n<li>Added test client support for file uploads with file-like objects.</li>\n<li>A shared cache is now used when testing with an SQLite in-memory database when\nusing Python 3.4+ and SQLite 3.7.13+. This allows sharing the database\nbetween threads.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-validators\">\n<span id=\"validators\"></span><h4>Validators<a class=\"headerlink\" href=\"#validators\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.URLValidator\" title=\"django.core.validators.URLValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">URLValidator</span></code></a> now supports IPv6 addresses,\nUnicode domains, and URLs containing authentication data.</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-8\">\n<span id=\"s-backwards-incompatible-1-8\"></span><span id=\"backwards-incompatible-changes-in-1-8\"></span><span id=\"backwards-incompatible-1-8\"></span><h2>Backwards incompatible changes in 1.8<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-8\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">In addition to the changes outlined in this section, be sure to review the\n<a class=\"reference internal\" href=\"../../internals/deprecation/#deprecation-removed-in-1-8\"><span class=\"std std-ref\">deprecation plan</span></a> for any features that\nhave been removed. If you haven\u2019t updated your code within the\ndeprecation timeline for a given feature, its removal may appear as a\nbackwards incompatible change.</p>\n</div>\n<div class=\"section\" id=\"s-related-object-operations-are-run-in-a-transaction\">\n<span id=\"related-object-operations-are-run-in-a-transaction\"></span><h3>Related object operations are run in a transaction<a class=\"headerlink\" href=\"#related-object-operations-are-run-in-a-transaction\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some operations on related objects such as\n<a class=\"reference internal\" href=\"../../ref/models/relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a> or direct\nassignment ran multiple data modifying queries without wrapping them in\ntransactions. To reduce the risk of data corruption, all data modifying methods\nthat affect multiple related objects (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code>, and direct assignment) now perform their data modifying queries\nfrom within a transaction, provided your database supports transactions.</p>\n<p>This has one backwards incompatible side effect, signal handlers triggered from\nthese methods are now executed within the method\u2019s transaction and any\nexception in a signal handler will prevent the whole operation.</p>\n</div>\n<div class=\"section\" id=\"s-assigning-unsaved-objects-to-relations-raises-an-error\">\n<span id=\"s-unsaved-model-instance-check-18\"></span><span id=\"assigning-unsaved-objects-to-relations-raises-an-error\"></span><span id=\"unsaved-model-instance-check-18\"></span><h3>Assigning unsaved objects to relations raises an error<a class=\"headerlink\" href=\"#assigning-unsaved-objects-to-relations-raises-an-error\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>To more easily allow in-memory usage of models, this change was reverted in\nDjango 1.8.4 and replaced with a check during <code class=\"docutils literal notranslate\"><span class=\"pre\">model.save()</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">save() prohibited to prevent data loss due to unsaved related object &#39;author&#39;.</span>\n</pre></div>\n</div>\n<p class=\"last\">A similar check on assignment to reverse one-to-one relations was removed\nin Django 1.8.5.</p>\n</div>\n<p>Assigning unsaved objects to a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericForeignKey\" title=\"django.contrib.contenttypes.fields.GenericForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> now raises a <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a>.</p>\n<p>Previously, the assignment of an unsaved object would be silently ignored.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span>\n<span class=\"go\">&gt;&gt;&gt;</span>\n</pre></div>\n</div>\n<p>Now, an error will be raised to prevent data loss:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">author</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;john&quot;</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Cannot assign &quot;&lt;Author: John&gt;&quot;: &quot;Author&quot; instance isn&#39;t saved in the database.</span>\n</pre></div>\n</div>\n<p>If you require allowing the assignment of unsaved instances (the old behavior)\nand aren\u2019t concerned about the data loss possibility (e.g. you never save the\nobjects to the database), you can disable this check by using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey.allow_unsaved_instance_assignment</span></code> attribute. (This attribute was\nremoved in 1.8.4 as it\u2019s no longer relevant.)</p>\n</div>\n<div class=\"section\" id=\"s-management-commands-that-only-accept-positional-arguments\">\n<span id=\"management-commands-that-only-accept-positional-arguments\"></span><h3>Management commands that only accept positional arguments<a class=\"headerlink\" href=\"#management-commands-that-only-accept-positional-arguments\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you have written a custom management command that only accepts positional\narguments and you didn\u2019t specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> command variable, you might get\nan error like <code class=\"docutils literal notranslate\"><span class=\"pre\">Error:</span> <span class=\"pre\">unrecognized</span> <span class=\"pre\">arguments:</span> <span class=\"pre\">...</span></code>, as variable parsing is\nnow based on <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#module-argparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code></a> which doesn\u2019t implicitly accept positional\narguments. You can make your command backwards compatible by simply setting the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> class variable. However, if you don\u2019t have to keep compatibility with\nolder Django versions, it\u2019s better to implement the new\n<a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.BaseCommand.add_arguments\" title=\"django.core.management.BaseCommand.add_arguments\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_arguments()</span></code></a> method as described\nin <a class=\"reference internal\" href=\"../../howto/custom-management-commands/\"><span class=\"doc\">How to create custom django-admin commands</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-custom-test-management-command-arguments-through-test-runner\">\n<span id=\"custom-test-management-command-arguments-through-test-runner\"></span><h3>Custom test management command arguments through test runner<a class=\"headerlink\" href=\"#custom-test-management-command-arguments-through-test-runner\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The method to add custom arguments to the <code class=\"docutils literal notranslate\"><span class=\"pre\">test</span></code> management command through\nthe test runner has changed. Previously, you could provide an <code class=\"docutils literal notranslate\"><span class=\"pre\">option_list</span></code>\nclass variable on the test runner to add more arguments (\u00e0 la\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/optparse.html#module-optparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code></a>). Now to implement the same behavior, you have to create an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">add_arguments(cls,</span> <span class=\"pre\">parser)</span></code> class method on the test runner and call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">parser.add_argument</span></code> to add any custom arguments, as parser is now an\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">argparse.ArgumentParser</span></code></a> instance.</p>\n</div>\n<div class=\"section\" id=\"s-model-check-ensures-auto-generated-column-names-are-within-limits-specified-by-database\">\n<span id=\"model-check-ensures-auto-generated-column-names-are-within-limits-specified-by-database\"></span><h3>Model check ensures auto-generated column names are within limits specified by database<a class=\"headerlink\" href=\"#model-check-ensures-auto-generated-column-names-are-within-limits-specified-by-database\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A field name that\u2019s longer than the column name length supported by a database\ncan create problems. For example, with MySQL you\u2019ll get an exception trying to\ncreate the column, and with PostgreSQL the column name is truncated by the\ndatabase (you may see a warning in the PostgreSQL logs).</p>\n<p>A model check has been introduced to better alert users to this scenario before\nthe actual creation of database tables.</p>\n<p>If you have an existing model where this check seems to be a false positive,\nfor example on PostgreSQL where the name was already being truncated, simply\nuse <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_column\" title=\"django.db.models.Field.db_column\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_column</span></code></a> to specify the name that\u2019s being\nused.</p>\n<p>The check also applies to the columns generated in an implicit\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField.through</span></code> model. If you run into an issue there, use\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ManyToManyField.through\" title=\"django.db.models.ManyToManyField.through\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">through</span></code></a> to create an explicit model\nand then specify <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.db_column\" title=\"django.db.models.Field.db_column\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_column</span></code></a> on its column(s)\nas needed.</p>\n</div>\n<div class=\"section\" id=\"s-query-relation-lookups-now-check-object-types\">\n<span id=\"query-relation-lookups-now-check-object-types\"></span><h3>Query relation lookups now check object types<a class=\"headerlink\" href=\"#query-relation-lookups-now-check-object-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Querying for model lookups now checks if the object passed is of correct type\nand raises a <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> if not. Previously, Django didn\u2019t care if the\nobject was of correct type; it just used the object\u2019s related field attribute\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code>) for the lookup. Now, an error is raised to prevent incorrect\nlookups:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">book</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">ValueError</span>: <span class=\"n\">Cannot query &quot;&lt;Book: Django&gt;&quot;: Must be &quot;Author&quot; instance.</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-select-related-now-checks-given-fields\">\n<span id=\"select-related-now-checks-given-fields\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> now checks given fields<a class=\"headerlink\" href=\"#select-related-now-checks-given-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> now validates that the given fields actually exist.\nPreviously, nonexistent fields were silently ignored. Now, an error is raised:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;nonexistent_field&quot;</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">FieldError</span>: <span class=\"n\">Invalid field name(s) given in select_related: &#39;nonexistent_field&#39;</span>\n</pre></div>\n</div>\n<p>The validation also makes sure that the given field is relational:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">book</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"gt\">Traceback (most recent call last):</span>\n<span class=\"c\">...</span>\n<span class=\"gr\">FieldError</span>: <span class=\"n\">Non-relational field given in select_related: &#39;name&#39;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-default-emailfield-max-length-increased-to-254\">\n<span id=\"default-emailfield-max-length-increased-to-254\"></span><h3>Default <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailField.max_length</span></code> increased to 254<a class=\"headerlink\" href=\"#default-emailfield-max-length-increased-to-254\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The old default 75 character <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> was not capable of storing all\npossible RFC3696/5321-compliant email addresses. In order to store all\npossible valid email addresses, the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> has been increased to 254\ncharacters. You will need to generate and apply database migrations for your\naffected models (or add <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length=75</span></code> if you wish to keep the length on\nyour current fields). A migration for\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.email\" title=\"django.contrib.auth.models.User.email\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.User.email</span></code></a> is included.</p>\n</div>\n<div class=\"section\" id=\"s-support-for-postgresql-versions-older-than-9-0\">\n<span id=\"support-for-postgresql-versions-older-than-9-0\"></span><h3>Support for PostgreSQL versions older than 9.0<a class=\"headerlink\" href=\"#support-for-postgresql-versions-older-than-9-0\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The end of upstream support periods was reached in July 2014 for PostgreSQL 8.4.\nAs a consequence, Django 1.8 sets 9.0 as the minimum PostgreSQL version it\nofficially supports.</p>\n<p>This also includes dropping support for PostGIS 1.3 and 1.4 as these versions\nare not supported on versions of PostgreSQL later than 8.4.</p>\n<p>Django also now requires the use of Psycopg2 version 2.4.5 or higher (or 2.5+\nif you want to use <a class=\"reference internal\" href=\"../../ref/contrib/postgres/#module-django.contrib.postgres\" title=\"django.contrib.postgres: PostgreSQL-specific fields and features\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code></a>).</p>\n</div>\n<div class=\"section\" id=\"s-support-for-mysql-versions-older-than-5-5\">\n<span id=\"support-for-mysql-versions-older-than-5-5\"></span><h3>Support for MySQL versions older than 5.5<a class=\"headerlink\" href=\"#support-for-mysql-versions-older-than-5-5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The end of upstream support periods was reached in January 2012 for MySQL 5.0\nand December 2013 for MySQL 5.1. As a consequence, Django 1.8 sets 5.5 as the\nminimum MySQL version it officially supports.</p>\n</div>\n<div class=\"section\" id=\"s-support-for-oracle-versions-older-than-11-1\">\n<span id=\"support-for-oracle-versions-older-than-11-1\"></span><h3>Support for Oracle versions older than 11.1<a class=\"headerlink\" href=\"#support-for-oracle-versions-older-than-11-1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The end of upstream support periods was reached in July 2010 for Oracle 9.2,\nJanuary 2012 for Oracle 10.1, and July 2013 for Oracle 10.2. As a consequence,\nDjango 1.8 sets 11.1 as the minimum Oracle version it officially supports.</p>\n</div>\n<div class=\"section\" id=\"s-specific-privileges-used-instead-of-roles-for-tests-on-oracle\">\n<span id=\"specific-privileges-used-instead-of-roles-for-tests-on-oracle\"></span><h3>Specific privileges used instead of roles for tests on Oracle<a class=\"headerlink\" href=\"#specific-privileges-used-instead-of-roles-for-tests-on-oracle\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Earlier versions of Django granted the CONNECT and RESOURCE roles to the test\nuser on Oracle. These roles have been deprecated, so Django 1.8 uses the\nspecific underlying privileges instead. This changes the privileges required\nof the main user for running tests (unless the project is configured to avoid\ncreating a test user). The exact privileges required now are detailed in\n<a class=\"reference internal\" href=\"../../ref/databases/#oracle-notes\"><span class=\"std std-ref\">Oracle notes</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-abstractuser-last-login-allows-null-values\">\n<span id=\"abstractuser-last-login-allows-null-values\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractUser.last_login</span></code> allows null values<a class=\"headerlink\" href=\"#abstractuser-last-login-allows-null-values\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.last_login\" title=\"django.contrib.auth.models.User.last_login\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AbstractUser.last_login</span></code></a>\nfield now allows null values. Previously, it defaulted to the time when the user\nwas created which was misleading if the user never logged in. If you are using\nthe default user (<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User\" title=\"django.contrib.auth.models.User\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.User</span></code></a>), run the database\nmigration included in <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.auth</span></code>.</p>\n<p>If you are using a custom user model that inherits from <code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractUser</span></code>,\nyou\u2019ll need to run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> and generate a migration for your\napp that contains that model. Also, if wish to set <code class=\"docutils literal notranslate\"><span class=\"pre\">last_login</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>\nfor users who haven\u2019t logged in, you can run this query:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">get_user_model</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractBaseUser</span>\n\n<span class=\"n\">UserModel</span> <span class=\"o\">=</span> <span class=\"n\">get_user_model</span><span class=\"p\">()</span>\n<span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">UserModel</span><span class=\"p\">,</span> <span class=\"n\">AbstractBaseUser</span><span class=\"p\">):</span>\n    <span class=\"n\">UserModel</span><span class=\"o\">.</span><span class=\"n\">_default_manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">last_login</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;date_joined&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span>\n        <span class=\"n\">last_login</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h3><a class=\"reference internal\" href=\"../../ref/contrib/gis/#module-django.contrib.gis\" title=\"django.contrib.gis: Geographic Information System (GIS) extensions for Django\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Support for GEOS 3.1 and GDAL 1.6 has been dropped.</li>\n<li>Support for SpatiaLite &lt; 2.4 has been dropped.</li>\n<li>GIS-specific lookups have been refactored to use the\n<a class=\"reference internal\" href=\"../../ref/models/lookups/#django.db.models.Lookup\" title=\"django.db.models.Lookup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Lookup</span></code></a> API.</li>\n<li>The default <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> representation of\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/geos/#django.contrib.gis.geos.GEOSGeometry\" title=\"django.contrib.gis.geos.GEOSGeometry\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GEOSGeometry</span></code></a> objects has been changed from\nWKT to EWKT format (including the SRID). As this representation is used in\nthe serialization framework, that means that <code class=\"docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code> output will now\ncontain the SRID value of geometry objects.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-priority-of-context-processors-for-templateresponse-brought-in-line-with-render\">\n<span id=\"priority-of-context-processors-for-templateresponse-brought-in-line-with-render\"></span><h3>Priority of context processors for <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code> brought in line with <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code><a class=\"headerlink\" href=\"#priority-of-context-processors-for-templateresponse-brought-in-line-with-render\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> constructor is designed to be a\ndrop-in replacement for the <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render()</span></code></a> function. However,\nit had a slight incompatibility, in that for <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code>, context data\nfrom the passed in context dictionary could be shadowed by context data returned\nfrom context processors, whereas for <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> it was the other way\naround. This was a bug, and the behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> is more appropriate,\nsince it allows the globally defined context processors to be overridden locally\nin the view. If you were relying on the fact context data in a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code> could be overridden using a context processor, you will\nneed to change your code.</p>\n</div>\n<div class=\"section\" id=\"s-overriding-setupclass-teardownclass-in-test-cases\">\n<span id=\"overriding-setupclass-teardownclass-in-test-cases\"></span><h3>Overriding <code class=\"docutils literal notranslate\"><span class=\"pre\">setUpClass</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">tearDownClass</span></code> in test cases<a class=\"headerlink\" href=\"#overriding-setupclass-teardownclass-in-test-cases\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The decorators <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">override_settings()</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.modify_settings\" title=\"django.test.modify_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">modify_settings()</span></code></a> now act at the class level when used as\nclass decorators. As a consequence, when overriding <code class=\"docutils literal notranslate\"><span class=\"pre\">setUpClass()</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tearDownClass()</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">super</span></code> implementation should always be called.</p>\n</div>\n<div class=\"section\" id=\"s-removal-of-django-contrib-formtools\">\n<span id=\"removal-of-django-contrib-formtools\"></span><h3>Removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.formtools</span></code><a class=\"headerlink\" href=\"#removal-of-django-contrib-formtools\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The formtools contrib app has been moved to a separate package and the\nrelevant documentation pages have been updated or removed.</p>\n<p>The new package is available <a class=\"reference external\" href=\"https://github.com/jazzband/django-formtools/\">on GitHub</a> and on PyPI.</p>\n</div>\n<div class=\"section\" id=\"s-database-connection-reloading-between-tests\">\n<span id=\"database-connection-reloading-between-tests\"></span><h3>Database connection reloading between tests<a class=\"headerlink\" href=\"#database-connection-reloading-between-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django previously closed database connections between each test within a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code>. This is no longer the case as Django now wraps the whole\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> within a transaction. If some of your tests relied on the old\nbehavior, you should have them inherit from <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-cleanup-of-the-django-template-namespace\">\n<span id=\"cleanup-of-the-django-template-namespace\"></span><h3>Cleanup of the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template</span></code> namespace<a class=\"headerlink\" href=\"#cleanup-of-the-django-template-namespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019ve been relying on private APIs exposed in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template</span></code>\nmodule, you may have to import them from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base</span></code> instead.</p>\n<p>Also private APIs <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base.compile_string()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.find_template()</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.get_template_from_string()</span></code> were removed.</p>\n</div>\n<div class=\"section\" id=\"s-model-attribute-on-private-model-relations\">\n<span id=\"model-attribute-on-private-model-relations\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> attribute on private model relations<a class=\"headerlink\" href=\"#model-attribute-on-private-model-relations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In earlier versions of Django, on a model with a reverse foreign key\nrelationship (for example), <code class=\"docutils literal notranslate\"><span class=\"pre\">model._meta.get_all_related_objects()</span></code> returned\nthe relationship as a <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.related.RelatedObject</span></code> with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> attribute set to the source of the relationship. Now, this method\nreturns the relationship as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.fields.related.ManyToOneRel</span></code>\n(private API <code class=\"docutils literal notranslate\"><span class=\"pre\">RelatedObject</span></code> has been removed), and the <code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> attribute\nis set to the target of the relationship instead of the source. The source\nmodel is accessible on the <code class=\"docutils literal notranslate\"><span class=\"pre\">related_model</span></code> attribute instead.</p>\n<p>Consider this example from the tutorial in Django 1.8:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_all_related_objects</span><span class=\"p\">()</span>\n<span class=\"go\">[&lt;ManyToOneRel: polls.choice&gt;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_all_related_objects</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">model</span>\n<span class=\"go\">&lt;class &#39;polls.models.Poll&#39;&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_all_related_objects</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">related_model</span>\n<span class=\"go\">&lt;class &#39;polls.models.Choice&#39;&gt;</span>\n</pre></div>\n</div>\n<p>and compare it to the behavior on older versions:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_all_related_objects</span><span class=\"p\">()</span>\n<span class=\"go\">[&lt;RelatedObject: polls:choice related to poll&gt;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_all_related_objects</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">model</span>\n<span class=\"go\">&lt;class &#39;polls.models.Choice&#39;&gt;</span>\n</pre></div>\n</div>\n<p>To access the source model, you can use a pattern like this to write code that\nwill work with both Django 1.8 and older versions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">relation</span> <span class=\"ow\">in</span> <span class=\"n\">opts</span><span class=\"o\">.</span><span class=\"n\">get_all_related_objects</span><span class=\"p\">():</span>\n    <span class=\"n\">to_model</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">relation</span><span class=\"p\">,</span> <span class=\"s2\">&quot;related_model&quot;</span><span class=\"p\">,</span> <span class=\"n\">relation</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Also note that <code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_related_objects()</span></code> is deprecated in 1.8.</p>\n</div>\n<div class=\"section\" id=\"s-database-backend-api\">\n<span id=\"database-backend-api\"></span><h3>Database backend API<a class=\"headerlink\" href=\"#database-backend-api\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following changes to the database backend API are documented to assist\nthose writing third-party backends in updating their code:</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BaseDatabaseXXX</span></code> classes have been moved to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.base</span></code>.\nPlease import them from the new locations:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseWrapper</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.client</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.creation</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseCreation</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.features</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseFeatures</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.introspection</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseIntrospection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.introspection</span> <span class=\"kn\">import</span> <span class=\"n\">FieldInfo</span><span class=\"p\">,</span> <span class=\"n\">TableInfo</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.operations</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseOperations</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.schema</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseSchemaEditor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.base.validation</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDatabaseValidation</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">data_types</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">data_types_suffix</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">data_type_check_constraints</span></code> attributes have moved from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseCreation</span></code> class to <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseWrapper</span></code>.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler.as_sql()</span></code> method now takes a <code class=\"docutils literal notranslate\"><span class=\"pre\">subquery</span></code> parameter\n(<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/24164\">#24164</a>).</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseDatabaseOperations.date_interval_sql()</span></code> method now only takes a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">timedelta</span></code> parameter.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-id2\">\n<span id=\"id2\"></span><h3><a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite</span></code> no longer takes an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> argument and its <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code>\nattribute has been removed. The application name is always <code class=\"docutils literal notranslate\"><span class=\"pre\">admin</span></code> (as\nopposed to the instance name which you can still customize using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite(name=&quot;...&quot;)</span></code>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_object()</span></code> method (private API) now takes a third\nargument named <code class=\"docutils literal notranslate\"><span class=\"pre\">from_field</span></code> in order to specify which field should match\nthe provided <code class=\"docutils literal notranslate\"><span class=\"pre\">object_id</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.response_delete\" title=\"django.contrib.admin.ModelAdmin.response_delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.response_delete()</span></code></a> method\nnow takes a second argument named <code class=\"docutils literal notranslate\"><span class=\"pre\">obj_id</span></code> which is the serialized\nidentifier used to retrieve the object before deletion.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-default-autoescaping-of-functions-in-django-template-defaultfilters\">\n<span id=\"default-autoescaping-of-functions-in-django-template-defaultfilters\"></span><h3>Default autoescaping of functions in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.defaultfilters</span></code><a class=\"headerlink\" href=\"#default-autoescaping-of-functions-in-django-template-defaultfilters\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In order to make built-in template filters that output HTML \u201csafe by default\u201d\nwhen calling them in Python code, the following functions in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.defaultfilters</span></code> have been changed to automatically escape\ntheir input value:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">join</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">linebreaksbr</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">linebreaks_filter</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">linenumbers</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">unordered_list</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">urlize</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">urlizetrunc</span></code></li>\n</ul>\n<p>You can revert to the old behavior by specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape=False</span></code> if you\nare passing trusted content. This change doesn\u2019t have any effect when using\nthe corresponding filters in templates.</p>\n</div>\n<div class=\"section\" id=\"s-miscellaneous\">\n<span id=\"miscellaneous\"></span><h3>Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">connections.queries</span></code> is now a read-only attribute.</p>\n</li>\n<li><p class=\"first\">Database connections are considered equal only if they\u2019re the same object.\nThey aren\u2019t hashable any more.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.gzip.GZipMiddleware\" title=\"django.middleware.gzip.GZipMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GZipMiddleware</span></code></a> used to disable compression\nfor some content types when the request is from Internet Explorer, in order\nto work around a bug in IE6 and earlier. This behavior could affect\nperformance on IE7 and later. It was removed.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">URLField.to_python</span></code> no longer adds a trailing slash to pathless URLs.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-length\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">length</span></code></a> template filter now returns <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> for an undefined\nvariable, rather than an empty string.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey.default_error_message['invalid']</span></code> has been changed from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(model)s</span> <span class=\"pre\">instance</span> <span class=\"pre\">with</span> <span class=\"pre\">pk</span> <span class=\"pre\">%(pk)r</span> <span class=\"pre\">does</span> <span class=\"pre\">not</span> <span class=\"pre\">exist.'</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(model)s</span> <span class=\"pre\">instance</span> <span class=\"pre\">with</span> <span class=\"pre\">%(field)s</span> <span class=\"pre\">%(value)r</span> <span class=\"pre\">does</span> <span class=\"pre\">not</span> <span class=\"pre\">exist.'</span></code> If you are\nusing this message in your own code, please update the list of interpolated\nparameters. Internally, Django will continue to provide the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> parameter in <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> for backwards compatibility.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">UserCreationForm.error_messages['duplicate_username']</span></code> is no longer used.\nIf you wish to customize that error message, <a class=\"reference internal\" href=\"../../topics/forms/modelforms/#modelforms-overriding-default-fields\"><span class=\"std std-ref\">override it on the form</span></a> using the <code class=\"docutils literal notranslate\"><span class=\"pre\">'unique'</span></code> key in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.error_messages['username']</span></code> or, if you have a custom form field for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'username'</span></code>, using the <code class=\"docutils literal notranslate\"><span class=\"pre\">'unique'</span></code> key in its\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.error_messages\" title=\"django.forms.Field.error_messages\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">error_messages</span></code></a> argument.</p>\n</li>\n<li><p class=\"first\">The block <code class=\"docutils literal notranslate\"><span class=\"pre\">usertools</span></code> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">base.html</span></code> template of\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a> now requires the <code class=\"docutils literal notranslate\"><span class=\"pre\">has_permission</span></code> context\nvariable to be set. If you have any custom admin views that use this\ntemplate, update them to pass <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.has_permission\" title=\"django.contrib.admin.AdminSite.has_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.has_permission()</span></code></a> as this new variable\u2019s\nvalue or simply include <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.each_context\" title=\"django.contrib.admin.AdminSite.each_context\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.each_context(request)</span></code></a> in the context.</p>\n</li>\n<li><p class=\"first\">Internal changes were made to the <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.ClearableFileInput\" title=\"django.forms.ClearableFileInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ClearableFileInput</span></code></a>\nwidget to allow more customization. The undocumented <code class=\"docutils literal notranslate\"><span class=\"pre\">url_markup_template</span></code>\nattribute was removed in favor of <code class=\"docutils literal notranslate\"><span class=\"pre\">template_with_initial</span></code>.</p>\n</li>\n<li><p class=\"first\">For consistency with other major vendors, the <code class=\"docutils literal notranslate\"><span class=\"pre\">en_GB</span></code> locale now has Monday\nas the first day of the week.</p>\n</li>\n<li><p class=\"first\">Seconds have been removed from any locales that had them in <code class=\"docutils literal notranslate\"><span class=\"pre\">TIME_FORMAT</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DATETIME_FORMAT</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">SHORT_DATETIME_FORMAT</span></code>.</p>\n</li>\n<li><p class=\"first\">The default max size of the Oracle test tablespace has increased from 300M\n(or 200M, before 1.7.2) to 500M.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse_lazy()</span></code> now return Unicode strings instead of\nbytestrings.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">CacheClass</span></code> shim has been removed from all cache backends.\nThese aliases were provided for backwards compatibility with Django 1.3.\nIf you are still using them, please update your project to use the real\nclass name found in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES-BACKEND\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">BACKEND</span></code></a> key of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> setting.</p>\n</li>\n<li><p class=\"first\">By default, <a class=\"reference internal\" href=\"../../ref/django-admin/#django.core.management.call_command\" title=\"django.core.management.call_command\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">call_command()</span></code></a> now always skips the\ncheck framework (unless you pass it <code class=\"docutils literal notranslate\"><span class=\"pre\">skip_checks=False</span></code>).</p>\n</li>\n<li><p class=\"first\">When iterating over lines, <a class=\"reference internal\" href=\"../../ref/files/file/#django.core.files.File\" title=\"django.core.files.File\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">File</span></code></a> now uses\n<span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0278/\"><strong>universal newlines</strong></a>. The following are recognized as ending a\nline: the Unix end-of-line convention <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\n'</span></code>, the Windows convention\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'\\r\\n'</span></code>, and the old Macintosh convention <code class=\"docutils literal notranslate\"><span class=\"pre\">'\\r'</span></code>.</p>\n</li>\n<li><p class=\"first\">The Memcached cache backends <code class=\"docutils literal notranslate\"><span class=\"pre\">MemcachedCache</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">PyLibMCCache</span></code> will\ndelete a key if <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> fails. This is necessary to ensure the <code class=\"docutils literal notranslate\"><span class=\"pre\">cache_db</span></code>\nsession store always fetches the most current session data.</p>\n</li>\n<li><p class=\"first\">Private APIs <code class=\"docutils literal notranslate\"><span class=\"pre\">override_template_loaders</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">override_with_test_loader</span></code>\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils</span></code> were removed. Override <code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code> with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">override_settings</span></code> instead.</p>\n</li>\n<li><p class=\"first\">Warnings from the MySQL database backend are no longer converted to\nexceptions when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> now has a simplified <code class=\"docutils literal notranslate\"><span class=\"pre\">repr</span></code> (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;WSGIRequest:</span> <span class=\"pre\">GET</span> <span class=\"pre\">'/somepath/'&gt;</span></code>). This won\u2019t change the behavior of\nthe <a class=\"reference internal\" href=\"../../howto/error-reporting/#django.views.debug.SafeExceptionReporterFilter\" title=\"django.views.debug.SafeExceptionReporterFilter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SafeExceptionReporterFilter</span></code></a> class.</p>\n</li>\n<li><p class=\"first\">Class-based views that use <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.ModelFormMixin\" title=\"django.views.generic.edit.ModelFormMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelFormMixin</span></code></a>\nwill raise an <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ImproperlyConfigured\" title=\"django.core.exceptions.ImproperlyConfigured\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code></a> exception\nwhen both the <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> attributes are specified.\nPreviously, <code class=\"docutils literal notranslate\"><span class=\"pre\">fields</span></code> was silently ignored.</p>\n</li>\n<li><p class=\"first\">When following redirects, the test client now raises\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.test.client.RedirectCycleError\" title=\"django.test.client.RedirectCycleError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">RedirectCycleError</span></code></a> if it detects a loop or hits a\nmaximum redirect limit (rather than passing silently).</p>\n</li>\n<li><p class=\"first\">Translatable strings set as the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> parameter of the field are cast\nto concrete strings later, so the return type of <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.get_default()</span></code> is\ndifferent in some cases. There is no change to default values which are the\nresult of a callable.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GenericIPAddressField.empty_strings_allowed</span></code> is now <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. Database\nbackends that interpret empty strings as null (only Oracle among the backends\nthat Django includes) will no longer convert null values back to an empty\nstring. This is consistent with other backends.</p>\n</li>\n<li><p class=\"first\">When the <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand.leave_locale_alone</span></code>\nattribute is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, translations are now deactivated instead of forcing\nthe \u201cen-us\u201d locale. In the case your models contained non-English strings and\nyou counted on English translations to be activated in management commands,\nthis will not happen any longer. It might be that new database migrations are\ngenerated (once) after migrating to 1.8.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/utils/#django.utils.translation.get_language\" title=\"django.utils.translation.get_language\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.translation.get_language()</span></code></a> now returns <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> instead\nof <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGE_CODE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code></a> when translations are temporarily deactivated.</p>\n</li>\n<li><p class=\"first\">When a translation doesn\u2019t exist for a specific literal, the fallback is now\ntaken from the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGE_CODE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_CODE</span></code></a> language (instead of from the\nuntranslated <code class=\"docutils literal notranslate\"><span class=\"pre\">msgid</span></code> message).</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> field of <a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.models.ContentType\" title=\"django.contrib.contenttypes.models.ContentType\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.models.ContentType</span></code></a>\nhas been removed by a migration and replaced by a property. That means it\u2019s\nnot possible to query or filter a <code class=\"docutils literal notranslate\"><span class=\"pre\">ContentType</span></code> by this field any longer.</p>\n<p>Be careful if you upgrade to Django 1.8 and skip Django 1.7. If you run\n<code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span> <span class=\"pre\">--fake</span></code>, this migration will be skipped and you\u2019ll see\na <code class=\"docutils literal notranslate\"><span class=\"pre\">RuntimeError:</span> <span class=\"pre\">Error</span> <span class=\"pre\">creating</span> <span class=\"pre\">new</span> <span class=\"pre\">content</span> <span class=\"pre\">types.</span></code> exception because the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> column won\u2019t be dropped from the database. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span>\n<span class=\"pre\">--fake-initial</span></code> to fake only the initial migration instead.</p>\n</li>\n<li><p class=\"first\">The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-migrate-fake-initial\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">migrate</span> <span class=\"pre\">--fake-initial</span></code></a> option allows faking initial\nmigrations. In 1.7, initial migrations were always automatically faked if all\ntables created in an initial migration already existed.</p>\n</li>\n<li><p class=\"first\">An app <em>without</em> migrations with a <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> to an app <em>with</em> migrations\nmay now result in a foreign key constraint error when migrating the database\nor running tests. In Django 1.7, this could fail silently and result in a\nmissing constraint. To resolve the error, add migrations to the app without\nthem.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-8\">\n<span id=\"s-deprecated-features-1-8\"></span><span id=\"features-deprecated-in-1-8\"></span><span id=\"deprecated-features-1-8\"></span><h2>Features deprecated in 1.8<a class=\"headerlink\" href=\"#features-deprecated-in-1-8\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-selected-methods-in-django-db-models-options-options\">\n<span id=\"selected-methods-in-django-db-models-options-options\"></span><h3>Selected methods in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.options.Options</span></code><a class=\"headerlink\" href=\"#selected-methods-in-django-db-models-options-options\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As part of the formalization of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta</span></code> API (from the\n<a class=\"reference internal\" href=\"../../ref/models/meta/#django.db.models.options.Options\" title=\"django.db.models.options.Options\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.options.Options</span></code></a> class), a number of methods have been\ndeprecated and will be removed in Django 1.10:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_field_names()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_related_objects()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_related_objects_with_model()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_related_many_to_many_objects()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_all_related_m2m_objects_with_model()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_concrete_fields_with_model()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_field_by_name()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_fields_with_model()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_m2m_with_model()</span></code></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-loading-cycle-and-firstof-template-tags-from-future-library\">\n<span id=\"loading-cycle-and-firstof-template-tags-from-future-library\"></span><h3>Loading <code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">firstof</span></code> template tags from <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> library<a class=\"headerlink\" href=\"#loading-cycle-and-firstof-template-tags-from-future-library\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.6 introduced <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">cycle</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">firstof</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> syntax for forward compatibility of the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> and <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-firstof\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a> template tags. This syntax is now deprecated\nand will be removed in Django 1.10. You can simply remove the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">...</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> tags.</p>\n</div>\n<div class=\"section\" id=\"s-django-conf-urls-patterns\">\n<span id=\"django-conf-urls-patterns\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.patterns()</span></code><a class=\"headerlink\" href=\"#django-conf-urls-patterns\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In the olden days of Django, it was encouraged to reference views as strings\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">urlpatterns</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;myapp.views.myview&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>and Django would magically import <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp.views.myview</span></code> internally and turn\nthe string into a real function reference. In order to reduce repetition when\nreferencing many views from the same module, the <code class=\"docutils literal notranslate\"><span class=\"pre\">patterns()</span></code> function takes\na required initial <code class=\"docutils literal notranslate\"><span class=\"pre\">prefix</span></code> argument which is prepended to all\nviews-as-strings in that set of <code class=\"docutils literal notranslate\"><span class=\"pre\">urlpatterns</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;myapp.views&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;myview&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^other/$&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;otherview&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In the modern era, we have updated the tutorial to instead recommend importing\nyour views module and referencing your view functions (or classes) directly.\nThis has a number of advantages, all deriving from the fact that we are using\nnormal Python in place of \u201cDjango String Magic\u201d: the errors when you mistype a\nview name are less obscure, IDEs can help with autocompletion of view names,\netc.</p>\n<p>So these days, the above use of the <code class=\"docutils literal notranslate\"><span class=\"pre\">prefix</span></code> arg is much more likely to be\nwritten (and is better written) as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">patterns</span><span class=\"p\">(</span>\n    <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^$&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">myview</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^other/$&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">otherview</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Thus <code class=\"docutils literal notranslate\"><span class=\"pre\">patterns()</span></code> serves little purpose and is a burden when teaching new users\n(answering the newbie\u2019s question \u201cwhy do I need this empty string as the first\nargument to <code class=\"docutils literal notranslate\"><span class=\"pre\">patterns()</span></code>?\u201d). For these reasons, we are deprecating it.\nUpdating your code is as simple as ensuring that <code class=\"docutils literal notranslate\"><span class=\"pre\">urlpatterns</span></code> is a list of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.url()</span></code> instances. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp</span> <span class=\"kn\">import</span> <span class=\"n\">views</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^$&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">myview</span><span class=\"p\">),</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"s2\">&quot;^other/$&quot;</span><span class=\"p\">,</span> <span class=\"n\">views</span><span class=\"o\">.</span><span class=\"n\">otherview</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-passing-a-string-as-view-to-django-conf-urls-url\">\n<span id=\"passing-a-string-as-view-to-django-conf-urls-url\"></span><h3>Passing a string as <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.url()</span></code><a class=\"headerlink\" href=\"#passing-a-string-as-view-to-django-conf-urls-url\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Related to the previous item, referencing views as strings in the <code class=\"docutils literal notranslate\"><span class=\"pre\">url()</span></code>\nfunction is deprecated. Pass the callable view as described in the previous\nsection instead.</p>\n</div>\n<div class=\"section\" id=\"s-template-related-settings\">\n<span id=\"template-related-settings\"></span><h3>Template-related settings<a class=\"headerlink\" href=\"#template-related-settings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As a consequence of the multiple template engines refactor, several settings\nare deprecated in favor of <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a>:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ALLOWED_INCLUDE_ROOTS</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_CONTEXT_PROCESSORS</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_DEBUG</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_DIRS</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_LOADERS</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_STRING_IF_INVALID</span></code></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-core-context-processors\">\n<span id=\"django-core-context-processors\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.context_processors</span></code><a class=\"headerlink\" href=\"#django-core-context-processors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Built-in template context processors have been moved to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.context_processors</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-django-test-simpletestcase-urls\">\n<span id=\"django-test-simpletestcase-urls\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.SimpleTestCase.urls</span></code><a class=\"headerlink\" href=\"#django-test-simpletestcase-urls\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The attribute <code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTestCase.urls</span></code> for specifying URLconf configuration in\ntests has been deprecated and will be removed in Django 1.10. Use\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">&#64;override_settings(ROOT_URLCONF=...)</span></code></a>\ninstead.</p>\n</div>\n<div class=\"section\" id=\"s-prefix-argument-to-i18n-patterns\">\n<span id=\"prefix-argument-to-i18n-patterns\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">prefix</span></code> argument to <a class=\"reference internal\" href=\"../../topics/i18n/translation/#django.conf.urls.i18n.i18n_patterns\" title=\"django.conf.urls.i18n.i18n_patterns\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">i18n_patterns()</span></code></a><a class=\"headerlink\" href=\"#prefix-argument-to-i18n-patterns\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Related to the previous item, the <code class=\"docutils literal notranslate\"><span class=\"pre\">prefix</span></code> argument to\n<a class=\"reference internal\" href=\"../../topics/i18n/translation/#django.conf.urls.i18n.i18n_patterns\" title=\"django.conf.urls.i18n.i18n_patterns\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.conf.urls.i18n.i18n_patterns()</span></code></a> has been deprecated. Simply pass a\nlist of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.url()</span></code> instances instead.</p>\n</div>\n<div class=\"section\" id=\"s-using-an-incorrect-count-of-unpacked-values-in-the-for-template-tag\">\n<span id=\"using-an-incorrect-count-of-unpacked-values-in-the-for-template-tag\"></span><h3>Using an incorrect count of unpacked values in the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">for</span></code></a> template tag<a class=\"headerlink\" href=\"#using-an-incorrect-count-of-unpacked-values-in-the-for-template-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Using an incorrect count of unpacked values in <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">for</span></code></a> tag will raise an\nexception rather than fail silently in Django 1.10.</p>\n</div>\n<div class=\"section\" id=\"s-passing-a-dotted-path-to-reverse-and-url\">\n<span id=\"passing-a-dotted-path-to-reverse-and-url\"></span><h3>Passing a dotted path to <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> and <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-url\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">url</span></code></a><a class=\"headerlink\" href=\"#passing-a-dotted-path-to-reverse-and-url\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Reversing URLs by Python path is an expensive operation as it causes the\npath being reversed to be imported. This behavior has also resulted in a\n<a class=\"reference external\" href=\"https://www.djangoproject.com/weblog/2014/apr/21/security/#s-issue-unexpected-code-execution-using-reverse\">security issue</a>. Use <a class=\"reference internal\" href=\"../../topics/http/urls/#naming-url-patterns\"><span class=\"std std-ref\">named URL patterns</span></a>\nfor reversing instead.</p>\n<p>If you are using <a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#module-django.contrib.sitemaps\" title=\"django.contrib.sitemaps: A framework for generating Google sitemap XML files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps</span></code></a>, add the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> argument to\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> that references <a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#django.contrib.sitemaps.views.sitemap\" title=\"django.contrib.sitemaps.views.sitemap\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps.views.sitemap()</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sitemaps.views</span> <span class=\"kn\">import</span> <span class=\"n\">sitemap</span>\n\n<span class=\"n\">url</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^sitemap\\.xml$&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">sitemap</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s2\">&quot;sitemaps&quot;</span><span class=\"p\">:</span> <span class=\"n\">sitemaps</span><span class=\"p\">},</span>\n    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;django.contrib.sitemaps.views.sitemap&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>to ensure compatibility when reversing by Python path is removed in Django 1.10.</p>\n<p>Similarly for GIS sitemaps, add <code class=\"docutils literal notranslate\"><span class=\"pre\">name='django.contrib.gis.sitemaps.views.kml'</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">name='django.contrib.gis.sitemaps.views.kmz'</span></code>.</p>\n<p>If you are using a Python path for the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOGIN_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOGIN_URL</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LOGIN_REDIRECT_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LOGIN_REDIRECT_URL</span></code></a> setting, use the name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">url()</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-aggregate-methods-and-modules\">\n<span id=\"aggregate-methods-and-modules\"></span><h3>Aggregate methods and modules<a class=\"headerlink\" href=\"#aggregate-methods-and-modules\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.sql.aggregates</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.models.sql.aggregates</span></code> modules (both private API), have\nbeen deprecated as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.aggregates</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.models.aggregates</span></code> are now also responsible\nfor SQL generation. The old modules will be removed in Django 1.10.</p>\n<p>If you were using the old modules, see <a class=\"reference internal\" href=\"../../ref/models/expressions/\"><span class=\"doc\">Query Expressions</span></a> for instructions on rewriting custom aggregates\nusing the new stable API.</p>\n<p>The following methods and properties of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.sql.query.Query</span></code>\nhave also been deprecated and the backwards compatibility shims will be removed\nin Django 1.10:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">Query.aggregates</span></code>, replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">annotations</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">Query.aggregate_select</span></code>, replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">annotation_select</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">Query.add_aggregate()</span></code>, replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">add_annotation()</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">Query.set_aggregate_mask()</span></code>, replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">set_annotation_mask()</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">Query.append_aggregate_mask()</span></code>, replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">append_annotation_mask()</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-extending-management-command-arguments-through-command-option-list\">\n<span id=\"extending-management-command-arguments-through-command-option-list\"></span><h3>Extending management command arguments through <code class=\"docutils literal notranslate\"><span class=\"pre\">Command.option_list</span></code><a class=\"headerlink\" href=\"#extending-management-command-arguments-through-command-option-list\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Management commands now use <a class=\"reference external\" href=\"https://docs.python.org/3/library/argparse.html#module-argparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">argparse</span></code></a> instead of <a class=\"reference external\" href=\"https://docs.python.org/3/library/optparse.html#module-optparse\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">optparse</span></code></a> to\nparse command-line arguments passed to commands. This also means that the way\nto add custom arguments to commands has changed: instead of extending the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">option_list</span></code> class list, you should now override the\n<a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.BaseCommand.add_arguments\" title=\"django.core.management.BaseCommand.add_arguments\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_arguments()</span></code></a> method and add\narguments through <code class=\"docutils literal notranslate\"><span class=\"pre\">argparse.add_argument()</span></code>. See\n<a class=\"reference internal\" href=\"../../howto/custom-management-commands/#custom-commands-options\"><span class=\"std std-ref\">this example</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-django-core-management-noargscommand\">\n<span id=\"django-core-management-noargscommand\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.management.NoArgsCommand</span></code><a class=\"headerlink\" href=\"#django-core-management-noargscommand\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The class <code class=\"docutils literal notranslate\"><span class=\"pre\">NoArgsCommand</span></code> is now deprecated and will be removed in Django\n1.10. Use <a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.BaseCommand\" title=\"django.core.management.BaseCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseCommand</span></code></a> instead, which takes no\narguments by default.</p>\n</div>\n<div class=\"section\" id=\"s-listing-all-migrations-in-a-project\">\n<span id=\"listing-all-migrations-in-a-project\"></span><h3>Listing all migrations in a project<a class=\"headerlink\" href=\"#listing-all-migrations-in-a-project\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--list</span></code> option of the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> management command is\ndeprecated and will be removed in Django 1.10. Use <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-showmigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">showmigrations</span></code></a>\ninstead.</p>\n</div>\n<div class=\"section\" id=\"s-cache-choices-option-of-modelchoicefield-and-modelmultiplechoicefield\">\n<span id=\"cache-choices-option-of-modelchoicefield-and-modelmultiplechoicefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">cache_choices</span></code> option of <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelChoiceField</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code><a class=\"headerlink\" href=\"#cache-choices-option-of-modelchoicefield-and-modelmultiplechoicefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ModelChoiceField\" title=\"django.forms.ModelChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelChoiceField</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ModelMultipleChoiceField\" title=\"django.forms.ModelMultipleChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code></a> took an undocumented, untested\noption <code class=\"docutils literal notranslate\"><span class=\"pre\">cache_choices</span></code>. This cached querysets between multiple renderings of\nthe same <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> object. This option is subject to an accelerated deprecation\nand will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-resolve-variable\">\n<span id=\"django-template-resolve-variable\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.resolve_variable()</span></code><a class=\"headerlink\" href=\"#django-template-resolve-variable\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The function has been informally marked as \u201cDeprecated\u201d for some time. Replace\n<code class=\"docutils literal notranslate\"><span class=\"pre\">resolve_variable(path,</span> <span class=\"pre\">context)</span></code> with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Variable(path).resolve(context)</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-webdesign\">\n<span id=\"django-contrib-webdesign\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.webdesign</span></code><a class=\"headerlink\" href=\"#django-contrib-webdesign\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It provided the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-lorem\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">lorem</span></code></a> template tag which is now included in the\nbuilt-in tags. Simply remove <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.webdesign'</span></code> from\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">webdesign</span> <span class=\"pre\">%}</span></code> from your templates.</p>\n</div>\n<div class=\"section\" id=\"s-error-message-argument-to-django-forms-regexfield\">\n<span id=\"error-message-argument-to-django-forms-regexfield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">error_message</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.RegexField</span></code><a class=\"headerlink\" href=\"#error-message-argument-to-django-forms-regexfield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It provided backwards compatibility for pre-1.0 code, but its functionality is\nredundant. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.error_messages['invalid']</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-old-unordered-list-syntax\">\n<span id=\"old-unordered-list-syntax\"></span><h3>Old <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-unordered_list\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">unordered_list</span></code></a> syntax<a class=\"headerlink\" href=\"#old-unordered-list-syntax\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>An older (pre-1.0), more restrictive and verbose input format for the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-unordered_list\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">unordered_list</span></code></a> template filter has been deprecated:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"s2\">&quot;States&quot;</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"s2\">&quot;Kansas&quot;</span><span class=\"p\">,</span> <span class=\"p\">[[</span><span class=\"s2\">&quot;Lawrence&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]],</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Topeka&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]]]],</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Illinois&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]]]]</span>\n</pre></div>\n</div>\n<p>Using the new syntax, this becomes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"s2\">&quot;States&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Kansas&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Lawrence&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Topeka&quot;</span><span class=\"p\">],</span> <span class=\"s2\">&quot;Illinois&quot;</span><span class=\"p\">]]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-django-forms-field-has-changed\">\n<span id=\"django-forms-field-has-changed\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.Field._has_changed()</span></code><a class=\"headerlink\" href=\"#django-forms-field-has-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Rename this method to <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.has_changed\" title=\"django.forms.Field.has_changed\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">has_changed()</span></code></a> by removing the\nleading underscore. The old name will still work until Django 1.10.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-html-remove-tags-and-removetags-template-filter\">\n<span id=\"django-utils-html-remove-tags-and-removetags-template-filter\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.remove_tags()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">removetags</span></code> template filter<a class=\"headerlink\" href=\"#django-utils-html-remove-tags-and-removetags-template-filter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.remove_tags()</span></code> as well as the template filter\n<code class=\"docutils literal notranslate\"><span class=\"pre\">removetags</span></code> have been deprecated as they cannot guarantee safe output. Their\nexistence is likely to lead to their use in security-sensitive contexts where\nthey are not actually safe.</p>\n<p>The unused and undocumented <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.strip_entities()</span></code> function has\nalso been deprecated.</p>\n</div>\n<div class=\"section\" id=\"s-is-admin-site-argument-to-django-contrib-auth-views-password-reset\">\n<span id=\"is-admin-site-argument-to-django-contrib-auth-views-password-reset\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">is_admin_site</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset()</span></code><a class=\"headerlink\" href=\"#is-admin-site-argument-to-django-contrib-auth-views-password-reset\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s a legacy option that should no longer be necessary.</p>\n</div>\n<div class=\"section\" id=\"s-subfieldbase\">\n<span id=\"subfieldbase\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SubfieldBase</span></code><a class=\"headerlink\" href=\"#subfieldbase\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.fields.subclassing.SubfieldBase</span></code> has been deprecated and\nwill be removed in Django 1.10. Historically, it was used to handle fields where\ntype conversion was needed when loading from the database, but it was not used\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">.values()</span></code> calls or in aggregates. It has been replaced with\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.from_db_value\" title=\"django.db.models.Field.from_db_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">from_db_value()</span></code></a>.</p>\n<p>The new approach doesn\u2019t call the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.to_python\" title=\"django.db.models.Field.to_python\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">to_python()</span></code></a>\nmethod on assignment as was the case with <code class=\"docutils literal notranslate\"><span class=\"pre\">SubfieldBase</span></code>. If you need that\nbehavior, reimplement the <code class=\"docutils literal notranslate\"><span class=\"pre\">Creator</span></code> class <a class=\"reference external\" href=\"https://github.com/django/django/blob/stable/1.8.x/django/db/models/fields/subclassing.py#L31-L44\">from Django\u2019s source code</a>\nin your project.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-checksums\">\n<span id=\"django-utils-checksums\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.checksums</span></code><a class=\"headerlink\" href=\"#django-utils-checksums\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.checksums</span></code> module has been deprecated and will be removed\nin Django 1.10. The functionality it provided (validating checksum using the\nLuhn algorithm) was undocumented and not used in Django. The module has been\nmoved to the <a class=\"reference external\" href=\"https://pypi.org/project/django-localflavor/\">django-localflavor</a> package (version 1.1+).</p>\n</div>\n<div class=\"section\" id=\"s-inlineadminform-original-content-type-id\">\n<span id=\"inlineadminform-original-content-type-id\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">InlineAdminForm.original_content_type_id</span></code><a class=\"headerlink\" href=\"#inlineadminform-original-content-type-id\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">original_content_type_id</span></code> attribute on <code class=\"docutils literal notranslate\"><span class=\"pre\">InlineAdminForm</span></code> has been\ndeprecated and will be removed in Django 1.10. Historically, it was used\nto construct the \u201cview on site\u201d URL. This URL is now accessible using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">absolute_url</span></code> attribute of the form.</p>\n</div>\n<div class=\"section\" id=\"s-django-views-generic-edit-formmixin-get-form-s-form-class-argument\">\n<span id=\"django-views-generic-edit-formmixin-get-form-s-form-class-argument\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.edit.FormMixin.get_form()</span></code>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> argument<a class=\"headerlink\" href=\"#django-views-generic-edit-formmixin-get-form-s-form-class-argument\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code> subclasses that override the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_form()</span></code> method should make\nsure to provide a default value for the <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> argument since it\u2019s\nnow optional.</p>\n</div>\n<div class=\"section\" id=\"s-rendering-templates-loaded-by-get-template-with-a-context\">\n<span id=\"rendering-templates-loaded-by-get-template-with-a-context\"></span><h3>Rendering templates loaded by <a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.get_template\" title=\"django.template.loader.get_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_template()</span></code></a> with a <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a><a class=\"headerlink\" href=\"#rendering-templates-loaded-by-get-template-with-a-context\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The return type of <a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.get_template\" title=\"django.template.loader.get_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_template()</span></code></a> has changed\nin Django 1.8: instead of a <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.Template</span></code></a>, it returns a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code> instance whose exact type depends on which backend loaded it.</p>\n<p>Both classes provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method, however, the former takes a\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.Context</span></code></a> as an argument while the latter expects a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>. This change is enforced through a deprecation path for Django\ntemplates.</p>\n<p>All this also applies to <a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.select_template\" title=\"django.template.loader.select_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">select_template()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-template-and-context-classes-in-template-responses\">\n<span id=\"template-and-context-classes-in-template-responses\"></span><h3><a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> and <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> classes in template responses<a class=\"headerlink\" href=\"#template-and-context-classes-in-template-responses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some methods of <a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.SimpleTemplateResponse\" title=\"django.template.response.SimpleTemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTemplateResponse</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> accepted\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.Context</span></code></a> and <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.Template</span></code></a> objects\nas arguments. They should now receive <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a> and backend-dependent\ntemplate objects respectively.</p>\n<p>This also applies to the return types if you have subclassed either template\nresponse class.</p>\n<p>Check the <a class=\"reference internal\" href=\"../../ref/template-response/\"><span class=\"doc\">template response API documentation</span></a>\nfor details.</p>\n</div>\n<div class=\"section\" id=\"s-current-app-argument-of-template-related-apis\">\n<span id=\"current-app-argument-of-template-related-apis\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code> argument of template-related APIs<a class=\"headerlink\" href=\"#current-app-argument-of-template-related-apis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following functions and classes will no longer accept a <code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code>\nparameter to set an URL namespace in Django 1.10:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Context()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.RequestContext()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.response.TemplateResponse()</span></code></li>\n</ul>\n<p>Set <code class=\"docutils literal notranslate\"><span class=\"pre\">request.current_app</span></code> instead, where <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> is the first argument\nto these functions or classes. If you\u2019re using a plain <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code>, use a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-dictionary-and-context-instance-arguments-of-rendering-functions\">\n<span id=\"dictionary-and-context-instance-arguments-of-rendering-functions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">dictionary</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">context_instance</span></code> arguments of rendering functions<a class=\"headerlink\" href=\"#dictionary-and-context-instance-arguments-of-rendering-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following functions will no longer accept the <code class=\"docutils literal notranslate\"><span class=\"pre\">dictionary</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context_instance</span></code> parameters in Django 1.10:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render_to_response()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.render_to_string()</span></code></li>\n</ul>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> parameter instead. When <code class=\"docutils literal notranslate\"><span class=\"pre\">dictionary</span></code> is passed as a\npositional argument, which is the most common idiom, no changes are needed.</p>\n<p>If you\u2019re passing a <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> in <code class=\"docutils literal notranslate\"><span class=\"pre\">context_instance</span></code>,\npass a <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> parameter instead. If you\u2019re passing a\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a>, pass the request separately in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> parameter.</p>\n</div>\n<div class=\"section\" id=\"s-dirs-argument-of-template-finding-functions\">\n<span id=\"dirs-argument-of-template-finding-functions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">dirs</span></code> argument of template-finding functions<a class=\"headerlink\" href=\"#dirs-argument-of-template-finding-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following functions will no longer accept a <code class=\"docutils literal notranslate\"><span class=\"pre\">dirs</span></code> parameter to override\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_DIRS</span></code> in Django 1.10:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.get_template\" title=\"django.template.loader.get_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.template.loader.get_template()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.select_template\" title=\"django.template.loader.select_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.template.loader.select_template()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render()</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render_to_response()</span></code></li>\n</ul>\n<p>The parameter didn\u2019t work consistently across different template loaders and\ndidn\u2019t work for included templates.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-loader-baseloader\">\n<span id=\"django-template-loader-baseloader\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.BaseLoader</span></code><a class=\"headerlink\" href=\"#django-template-loader-baseloader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.BaseLoader</span></code> was renamed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.base.Loader</span></code>. If you\u2019ve written a custom template\nloader that inherits <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseLoader</span></code>, you must inherit <code class=\"docutils literal notranslate\"><span class=\"pre\">Loader</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-django-test-utils-testtemplateloader\">\n<span id=\"django-test-utils-testtemplateloader\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils.TestTemplateLoader</span></code><a class=\"headerlink\" href=\"#django-test-utils-testtemplateloader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Private API <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils.TestTemplateLoader</span></code> is deprecated in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.locmem.Loader</span></code> and will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-support-for-the-max-length-argument-on-custom-storage-classes\">\n<span id=\"s-storage-max-length-update\"></span><span id=\"support-for-the-max-length-argument-on-custom-storage-classes\"></span><span id=\"storage-max-length-update\"></span><h3>Support for the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> argument on custom <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage</span></code> classes<a class=\"headerlink\" href=\"#support-for-the-max-length-argument-on-custom-storage-classes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Storage</span></code> subclasses should add <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length=None</span></code> as a parameter to\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.get_available_name\" title=\"django.core.files.storage.Storage.get_available_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_available_name()</span></code></a> and/or\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.save\" title=\"django.core.files.storage.Storage.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> if they override either method.\nSupport for storages that do not accept this argument will be removed in\nDjango 1.10.</p>\n</div>\n<div class=\"section\" id=\"s-qn-replaced-by-compiler\">\n<span id=\"qn-replaced-by-compiler\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">qn</span></code> replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code><a class=\"headerlink\" href=\"#qn-replaced-by-compiler\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In previous Django versions, various internal ORM methods (mostly <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql</span></code>\nmethods) accepted a <code class=\"docutils literal notranslate\"><span class=\"pre\">qn</span></code> (for \u201cquote name\u201d) argument, which was a reference\nto a function that quoted identifiers for sending to the database. In Django\n1.8, that argument has been renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code> and is now a full\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler</span></code> instance. For backwards-compatibility, calling a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler</span></code> instance performs the same name-quoting that the <code class=\"docutils literal notranslate\"><span class=\"pre\">qn</span></code>\nfunction used to. However, this backwards-compatibility shim is immediately\ndeprecated: you should rename your <code class=\"docutils literal notranslate\"><span class=\"pre\">qn</span></code> arguments to <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code>, and call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.quote_name_unless_alias(...)</span></code> where you previously called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">qn(...)</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-default-value-of-redirectview-permanent\">\n<span id=\"default-value-of-redirectview-permanent\"></span><h3>Default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">RedirectView.permanent</span></code><a class=\"headerlink\" href=\"#default-value-of-redirectview-permanent\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The default value of the\n<a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView.permanent\" title=\"django.views.generic.base.RedirectView.permanent\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">RedirectView.permanent</span></code></a>\nattribute will change from <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-using-authenticationmiddleware-without-sessionauthenticationmiddleware\">\n<span id=\"using-authenticationmiddleware-without-sessionauthenticationmiddleware\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthenticationMiddleware</span></code> without <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionAuthenticationMiddleware</span></code><a class=\"headerlink\" href=\"#using-authenticationmiddleware-without-sessionauthenticationmiddleware\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.middleware.SessionAuthenticationMiddleware</span></code> was\nadded in Django 1.7. In Django 1.7.2, its functionality was moved to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">auth.get_user()</span></code> and, for backwards compatibility, enabled only if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.auth.middleware.SessionAuthenticationMiddleware'</span></code> appears in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code>.</p>\n<p>In Django 1.10, session verification will be enabled regardless of whether or not\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SessionAuthenticationMiddleware</span></code> is enabled (at which point\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SessionAuthenticationMiddleware</span></code> will have no significance). You can add it\nto your <code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code> sometime before then to opt-in. Please read the\n<a class=\"reference internal\" href=\"../../topics/auth/default/#session-invalidation-on-password-change\"><span class=\"std std-ref\">upgrade considerations</span></a> first.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sitemaps-flatpagesitemap\">\n<span id=\"django-contrib-sitemaps-flatpagesitemap\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps.FlatPageSitemap</span></code><a class=\"headerlink\" href=\"#django-contrib-sitemaps-flatpagesitemap\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps.FlatPageSitemap</span></code> has moved to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.flatpages.sitemaps.FlatPageSitemap</span></code>. The old import location\nis deprecated and will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-model-field-related\">\n<span id=\"model-field-related\"></span><h3>Model <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.related</span></code><a class=\"headerlink\" href=\"#model-field-related\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Private attribute <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.Field.related</span></code> is deprecated in favor\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.rel</span></code>.  The latter is an instance of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.fields.related.ForeignObjectRel</span></code> which replaces\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.related.RelatedObject</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.related</span></code>\nmodule has been removed and the <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.related</span></code> attribute will be removed in\nDjango 1.10.</p>\n</div>\n<div class=\"section\" id=\"s-ssi-template-tag\">\n<span id=\"ssi-template-tag\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> template tag<a class=\"headerlink\" href=\"#ssi-template-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> template tag allows files to be included in a template by\nabsolute path. This is of limited use in most deployment situations, and\nthe <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> tag often makes more sense. This tag is now deprecated and\nwill be removed in Django 1.10.</p>\n</div>\n<div class=\"section\" id=\"s-as-comparison-operator-in-if-template-tag\">\n<span id=\"as-comparison-operator-in-if-template-tag\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code> as comparison operator in <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> template tag<a class=\"headerlink\" href=\"#as-comparison-operator-in-if-template-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Using a single equals sign with the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">if</span> <span class=\"pre\">%}</span></code> template tag for equality\ntesting was undocumented and untested. It\u2019s now deprecated in favor of <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-foo-s-syntax-in-modelformmixin-success-url\">\n<span id=\"foo-s-syntax-in-modelformmixin-success-url\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">%(&lt;foo&gt;)s</span></code> syntax in <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelFormMixin.success_url</span></code><a class=\"headerlink\" href=\"#foo-s-syntax-in-modelformmixin-success-url\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The legacy <code class=\"docutils literal notranslate\"><span class=\"pre\">%(&lt;foo&gt;)s</span></code> syntax in <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.ModelFormMixin.success_url\" title=\"django.views.generic.edit.ModelFormMixin.success_url\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelFormMixin.success_url</span></code></a> is deprecated and\nwill be removed in Django 1.10.</p>\n</div>\n<div class=\"section\" id=\"s-geoqueryset-aggregate-methods\">\n<span id=\"geoqueryset-aggregate-methods\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> aggregate methods<a class=\"headerlink\" href=\"#geoqueryset-aggregate-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">collect()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">extent()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">extent3d()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">make_line()</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unionagg()</span></code> aggregate methods are deprecated and should be replaced by their\nfunction-based aggregate equivalents (<code class=\"docutils literal notranslate\"><span class=\"pre\">Collect</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Extent</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Extent3D</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">MakeLine</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">Union</span></code>).</p>\n</div>\n<div class=\"section\" id=\"s-signature-of-the-allow-migrate-router-method\">\n<span id=\"s-deprecated-signature-of-allow-migrate\"></span><span id=\"signature-of-the-allow-migrate-router-method\"></span><span id=\"deprecated-signature-of-allow-migrate\"></span><h3>Signature of the <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code> router method<a class=\"headerlink\" href=\"#signature-of-the-allow-migrate-router-method\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The signature of the <a class=\"reference internal\" href=\"../../topics/db/multi-db/#allow_migrate\" title=\"allow_migrate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">allow_migrate()</span></code></a> method of database routers has\nchanged from <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate(db,</span> <span class=\"pre\">model)</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate(db,</span> <span class=\"pre\">app_label,</span> <span class=\"pre\">model_name=None,</span> <span class=\"pre\">**hints)</span></code>.</p>\n<p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">model_name</span></code> is set, the value that was previously given through the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> positional argument may now be found inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">hints</span></code> dictionary\nunder the key <code class=\"docutils literal notranslate\"><span class=\"pre\">'model'</span></code>.</p>\n<p>After switching to the new signature the router will also be called by the\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a> operations.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-removed-in-1-8\">\n<span id=\"s-removed-features-1-8\"></span><span id=\"features-removed-in-1-8\"></span><span id=\"removed-features-1-8\"></span><h2>Features removed in 1.8<a class=\"headerlink\" href=\"#features-removed-in-1-8\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>These features have reached the end of their deprecation cycle and are removed\nin Django 1.8. See <a class=\"reference internal\" href=\"../1.6/#deprecated-features-1-6\"><span class=\"std std-ref\">Features deprecated in 1.6</span></a> for details, including how to\nremove usage of these features.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.comments</span></code> is removed.</li>\n<li>The following transaction management APIs are removed:<ul>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionMiddleware</span></code></li>\n<li>the decorators and context managers <code class=\"docutils literal notranslate\"><span class=\"pre\">autocommit</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">commit_on_success</span></code>,\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">commit_manually</span></code>, defined in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction</span></code></li>\n<li>the functions <code class=\"docutils literal notranslate\"><span class=\"pre\">commit_unless_managed</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rollback_unless_managed</span></code>,\nalso defined in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction</span></code></li>\n<li>the <code class=\"docutils literal notranslate\"><span class=\"pre\">TRANSACTIONS_MANAGED</span></code> setting</li>\n</ul>\n</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> and <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-firstof\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a> template tags auto-escape their\narguments.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">SEND_BROKEN_LINK_EMAILS</span></code> setting is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.doc.XViewMiddleware</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta.module_name</span></code> alias is removed.</li>\n<li>The backward compatible shims introduced to rename <code class=\"docutils literal notranslate\"><span class=\"pre\">get_query_set</span></code>\nand similar queryset methods are removed. This affects the following classes:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">BaseModelAdmin</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">ChangeList</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommentNode</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleRelatedObjectDescriptor</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ReverseSingleRelatedObjectDescriptor</span></code>.</li>\n<li>The backward compatible shims introduced to rename the attributes\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ChangeList.root_query_set</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ChangeList.query_set</span></code> are removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.defaults.shortcut</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.shortcut</span></code> are\nremoved.</li>\n<li>Support for the Python Imaging Library (PIL) module is removed.</li>\n<li>The following private APIs are removed:<ul>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backend</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.close_connection()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.creation.BaseDatabaseCreation.set_autocommit()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction.is_managed()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.transaction.managed()</span></code></li>\n</ul>\n</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.widgets.RadioInput</span></code> is removed.</li>\n<li>The module <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.simple</span></code> and the class\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.simple.DjangoTestSuiteRunner</span></code> are removed.</li>\n<li>The module <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test._doctest</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">CACHE_MIDDLEWARE_ANONYMOUS_ONLY</span></code> setting is removed. This change\naffects both <code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.cache.CacheMiddleware</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.cache.UpdateCacheMiddleware</span></code> despite the lack of a\ndeprecation warning in the latter class.</li>\n<li>Usage of the hard-coded <em>Hold down \u201cControl\u201d, or \u201cCommand\u201d on a Mac, to select\nmore than one.</em> string to override or append to user-provided <code class=\"docutils literal notranslate\"><span class=\"pre\">help_text</span></code> in\nforms for <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToMany</span></code> model fields is not performed by Django anymore\neither at the model or forms layer.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta.get_(add|change|delete)_permission</span></code> methods are removed.</li>\n<li>The session key <code class=\"docutils literal notranslate\"><span class=\"pre\">django_language</span></code> is no longer read for backwards\ncompatibility.</li>\n<li>Geographic Sitemaps are removed\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.sitemaps.views.index</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.sitemaps.views.sitemap</span></code>).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.fix_ampersands</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code> template filter,\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.clean_html</span></code> are removed.</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.7.11", "Django 1.7.11 release notes", "N", "next"], ["releases/1.8.1", "Django 1.8.1 release notes", "P", "previous"]], "sourcename": "releases/1.8.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.8 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-8\">What\u2019s new in Django 1.8</a><ul>\n<li><a class=\"reference internal\" href=\"#model-meta-api\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Model._meta</span></code> API</a></li>\n<li><a class=\"reference internal\" href=\"#multiple-template-engines\">Multiple template engines</a></li>\n<li><a class=\"reference internal\" href=\"#security-enhancements\">Security enhancements</a></li>\n<li><a class=\"reference internal\" href=\"#new-postgresql-specific-functionality\">New PostgreSQL specific functionality</a></li>\n<li><a class=\"reference internal\" href=\"#new-data-types\">New data types</a></li>\n<li><a class=\"reference internal\" href=\"#query-expressions-conditional-expressions-and-database-functions\">Query Expressions, Conditional Expressions, and Database Functions</a></li>\n<li><a class=\"reference internal\" href=\"#testcase-data-setup\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TestCase</span></code> data setup</a></li>\n<li><a class=\"reference internal\" href=\"#minor-features\">Minor features</a><ul>\n<li><a class=\"reference internal\" href=\"#django-contrib-admin\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-admindocs\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-auth\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-gis\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sessions\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sitemaps\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sites\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cache\">Cache</a></li>\n<li><a class=\"reference internal\" href=\"#cryptography\">Cryptography</a></li>\n<li><a class=\"reference internal\" href=\"#database-backends\">Database backends</a></li>\n<li><a class=\"reference internal\" href=\"#email\">Email</a></li>\n<li><a class=\"reference internal\" href=\"#file-storage\">File Storage</a></li>\n<li><a class=\"reference internal\" href=\"#forms\">Forms</a></li>\n<li><a class=\"reference internal\" href=\"#generic-views\">Generic Views</a></li>\n<li><a class=\"reference internal\" href=\"#internationalization\">Internationalization</a></li>\n<li><a class=\"reference internal\" href=\"#logging\">Logging</a></li>\n<li><a class=\"reference internal\" href=\"#management-commands\">Management Commands</a></li>\n<li><a class=\"reference internal\" href=\"#middleware\">Middleware</a></li>\n<li><a class=\"reference internal\" href=\"#migrations\">Migrations</a></li>\n<li><a class=\"reference internal\" href=\"#models\">Models</a></li>\n<li><a class=\"reference internal\" href=\"#signals\">Signals</a></li>\n<li><a class=\"reference internal\" href=\"#system-check-framework\">System Check Framework</a></li>\n<li><a class=\"reference internal\" href=\"#templates\">Templates</a></li>\n<li><a class=\"reference internal\" href=\"#requests-and-responses\">Requests and Responses</a></li>\n<li><a class=\"reference internal\" href=\"#tests\">Tests</a></li>\n<li><a class=\"reference internal\" href=\"#validators\">Validators</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-8\">Backwards incompatible changes in 1.8</a><ul>\n<li><a class=\"reference internal\" href=\"#related-object-operations-are-run-in-a-transaction\">Related object operations are run in a transaction</a></li>\n<li><a class=\"reference internal\" href=\"#assigning-unsaved-objects-to-relations-raises-an-error\">Assigning unsaved objects to relations raises an error</a></li>\n<li><a class=\"reference internal\" href=\"#management-commands-that-only-accept-positional-arguments\">Management commands that only accept positional arguments</a></li>\n<li><a class=\"reference internal\" href=\"#custom-test-management-command-arguments-through-test-runner\">Custom test management command arguments through test runner</a></li>\n<li><a class=\"reference internal\" href=\"#model-check-ensures-auto-generated-column-names-are-within-limits-specified-by-database\">Model check ensures auto-generated column names are within limits specified by database</a></li>\n<li><a class=\"reference internal\" href=\"#query-relation-lookups-now-check-object-types\">Query relation lookups now check object types</a></li>\n<li><a class=\"reference internal\" href=\"#select-related-now-checks-given-fields\"><code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> now checks given fields</a></li>\n<li><a class=\"reference internal\" href=\"#default-emailfield-max-length-increased-to-254\">Default <code class=\"docutils literal notranslate\"><span class=\"pre\">EmailField.max_length</span></code> increased to 254</a></li>\n<li><a class=\"reference internal\" href=\"#support-for-postgresql-versions-older-than-9-0\">Support for PostgreSQL versions older than 9.0</a></li>\n<li><a class=\"reference internal\" href=\"#support-for-mysql-versions-older-than-5-5\">Support for MySQL versions older than 5.5</a></li>\n<li><a class=\"reference internal\" href=\"#support-for-oracle-versions-older-than-11-1\">Support for Oracle versions older than 11.1</a></li>\n<li><a class=\"reference internal\" href=\"#specific-privileges-used-instead-of-roles-for-tests-on-oracle\">Specific privileges used instead of roles for tests on Oracle</a></li>\n<li><a class=\"reference internal\" href=\"#abstractuser-last-login-allows-null-values\"><code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractUser.last_login</span></code> allows null values</a></li>\n<li><a class=\"reference internal\" href=\"#id1\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#priority-of-context-processors-for-templateresponse-brought-in-line-with-render\">Priority of context processors for <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code> brought in line with <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#overriding-setupclass-teardownclass-in-test-cases\">Overriding <code class=\"docutils literal notranslate\"><span class=\"pre\">setUpClass</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">tearDownClass</span></code> in test cases</a></li>\n<li><a class=\"reference internal\" href=\"#removal-of-django-contrib-formtools\">Removal of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.formtools</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#database-connection-reloading-between-tests\">Database connection reloading between tests</a></li>\n<li><a class=\"reference internal\" href=\"#cleanup-of-the-django-template-namespace\">Cleanup of the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template</span></code> namespace</a></li>\n<li><a class=\"reference internal\" href=\"#model-attribute-on-private-model-relations\"><code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> attribute on private model relations</a></li>\n<li><a class=\"reference internal\" href=\"#database-backend-api\">Database backend API</a></li>\n<li><a class=\"reference internal\" href=\"#id2\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#default-autoescaping-of-functions-in-django-template-defaultfilters\">Default autoescaping of functions in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.defaultfilters</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#miscellaneous\">Miscellaneous</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-8\">Features deprecated in 1.8</a><ul>\n<li><a class=\"reference internal\" href=\"#selected-methods-in-django-db-models-options-options\">Selected methods in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.options.Options</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#loading-cycle-and-firstof-template-tags-from-future-library\">Loading <code class=\"docutils literal notranslate\"><span class=\"pre\">cycle</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">firstof</span></code> template tags from <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> library</a></li>\n<li><a class=\"reference internal\" href=\"#django-conf-urls-patterns\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.patterns()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#passing-a-string-as-view-to-django-conf-urls-url\">Passing a string as <code class=\"docutils literal notranslate\"><span class=\"pre\">view</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.url()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#template-related-settings\">Template-related settings</a></li>\n<li><a class=\"reference internal\" href=\"#django-core-context-processors\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.context_processors</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-test-simpletestcase-urls\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.SimpleTestCase.urls</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#prefix-argument-to-i18n-patterns\"><code class=\"docutils literal notranslate\"><span class=\"pre\">prefix</span></code> argument to <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">i18n_patterns()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-an-incorrect-count-of-unpacked-values-in-the-for-template-tag\">Using an incorrect count of unpacked values in the <code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">for</span></code> template tag</a></li>\n<li><a class=\"reference internal\" href=\"#passing-a-dotted-path-to-reverse-and-url\">Passing a dotted path to <code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> and <code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">url</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#aggregate-methods-and-modules\">Aggregate methods and modules</a></li>\n<li><a class=\"reference internal\" href=\"#extending-management-command-arguments-through-command-option-list\">Extending management command arguments through <code class=\"docutils literal notranslate\"><span class=\"pre\">Command.option_list</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-core-management-noargscommand\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.management.NoArgsCommand</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#listing-all-migrations-in-a-project\">Listing all migrations in a project</a></li>\n<li><a class=\"reference internal\" href=\"#cache-choices-option-of-modelchoicefield-and-modelmultiplechoicefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">cache_choices</span></code> option of <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelChoiceField</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-template-resolve-variable\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.resolve_variable()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-webdesign\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.webdesign</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#error-message-argument-to-django-forms-regexfield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">error_message</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.RegexField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#old-unordered-list-syntax\">Old <code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">unordered_list</span></code> syntax</a></li>\n<li><a class=\"reference internal\" href=\"#django-forms-field-has-changed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.Field._has_changed()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-html-remove-tags-and-removetags-template-filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.remove_tags()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">removetags</span></code> template filter</a></li>\n<li><a class=\"reference internal\" href=\"#is-admin-site-argument-to-django-contrib-auth-views-password-reset\"><code class=\"docutils literal notranslate\"><span class=\"pre\">is_admin_site</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#subfieldbase\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SubfieldBase</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-checksums\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.checksums</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#inlineadminform-original-content-type-id\"><code class=\"docutils literal notranslate\"><span class=\"pre\">InlineAdminForm.original_content_type_id</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-views-generic-edit-formmixin-get-form-s-form-class-argument\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.edit.FormMixin.get_form()</span></code>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> argument</a></li>\n<li><a class=\"reference internal\" href=\"#rendering-templates-loaded-by-get-template-with-a-context\">Rendering templates loaded by <code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_template()</span></code> with a <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#template-and-context-classes-in-template-responses\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code> and <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code> classes in template responses</a></li>\n<li><a class=\"reference internal\" href=\"#current-app-argument-of-template-related-apis\"><code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code> argument of template-related APIs</a></li>\n<li><a class=\"reference internal\" href=\"#dictionary-and-context-instance-arguments-of-rendering-functions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dictionary</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">context_instance</span></code> arguments of rendering functions</a></li>\n<li><a class=\"reference internal\" href=\"#dirs-argument-of-template-finding-functions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">dirs</span></code> argument of template-finding functions</a></li>\n<li><a class=\"reference internal\" href=\"#django-template-loader-baseloader\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.BaseLoader</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-test-utils-testtemplateloader\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils.TestTemplateLoader</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#support-for-the-max-length-argument-on-custom-storage-classes\">Support for the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> argument on custom <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage</span></code> classes</a></li>\n<li><a class=\"reference internal\" href=\"#qn-replaced-by-compiler\"><code class=\"docutils literal notranslate\"><span class=\"pre\">qn</span></code> replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#default-value-of-redirectview-permanent\">Default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">RedirectView.permanent</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-authenticationmiddleware-without-sessionauthenticationmiddleware\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthenticationMiddleware</span></code> without <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionAuthenticationMiddleware</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sitemaps-flatpagesitemap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps.FlatPageSitemap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#model-field-related\">Model <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.related</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ssi-template-tag\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> template tag</a></li>\n<li><a class=\"reference internal\" href=\"#as-comparison-operator-in-if-template-tag\"><code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code> as comparison operator in <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span></code> template tag</a></li>\n<li><a class=\"reference internal\" href=\"#foo-s-syntax-in-modelformmixin-success-url\"><code class=\"docutils literal notranslate\"><span class=\"pre\">%(&lt;foo&gt;)s</span></code> syntax in <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelFormMixin.success_url</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#geoqueryset-aggregate-methods\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> aggregate methods</a></li>\n<li><a class=\"reference internal\" href=\"#signature-of-the-allow-migrate-router-method\">Signature of the <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code> router method</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-removed-in-1-8\">Features removed in 1.8</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.8", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}