{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.7/", "title": "Django 1.7 release notes"}, "next": {"link": "../1.6.10/", "title": "Django 1.6.10 release notes"}, "title": "Django 1.6.11 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-6-11-release-notes\">\n<span id=\"django-1-6-11-release-notes\"></span><h1>Django 1.6.11 release notes<a class=\"headerlink\" href=\"#django-1-6-11-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>March 18, 2015</em></p>\n<p>Django 1.6.11 fixes two security issues in 1.6.10.</p>\n<div class=\"section\" id=\"s-denial-of-service-possibility-with-strip-tags\">\n<span id=\"denial-of-service-possibility-with-strip-tags\"></span><h2>Denial-of-service possibility with <code class=\"docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code><a class=\"headerlink\" href=\"#denial-of-service-possibility-with-strip-tags\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Last year <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.strip_tags\" title=\"django.utils.html.strip_tags\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code></a>  was changed to work\niteratively. The problem is that the size of the input it\u2019s processing can\nincrease on each iteration which results in an infinite loop in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code>. This issue only affects versions of Python that haven\u2019t\nreceived <a class=\"reference external\" href=\"https://bugs.python.org/issue?&#64;action=redirect&amp;bpo=20288\">a bugfix in HTMLParser</a>; namely Python &lt; 2.7.7 and\n3.3.5. Some operating system vendors have also backported the fix for the\nPython bug into their packages of earlier versions.</p>\n<p>To remedy this issue, <code class=\"docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code> will now return the original input if\nit detects the length of the string it\u2019s processing increases. Remember that\nabsolutely NO guarantee is provided about the results of <code class=\"docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code> being\nHTML safe. So NEVER mark safe the result of a <code class=\"docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code> call without\nescaping it first, for example with <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.escape\" title=\"django.utils.html.escape\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">escape()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-mitigated-possible-xss-attack-via-user-supplied-redirect-urls\">\n<span id=\"mitigated-possible-xss-attack-via-user-supplied-redirect-urls\"></span><h2>Mitigated possible XSS attack via user-supplied redirect URLs<a class=\"headerlink\" href=\"#mitigated-possible-xss-attack-via-user-supplied-redirect-urls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django relies on user input in some cases (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.login()</span></code> and <a class=\"reference internal\" href=\"../../topics/i18n/\"><span class=\"doc\">i18n</span></a>)\nto redirect the user to an \u201con success\u201d URL. The security checks for these\nredirects (namely <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.http.is_safe_url()</span></code>) accepted URLs with\nleading control characters and so considered URLs like <code class=\"docutils literal notranslate\"><span class=\"pre\">\\x08javascript:...</span></code>\nsafe. This issue doesn\u2019t affect Django currently, since we only put this URL\ninto the <code class=\"docutils literal notranslate\"><span class=\"pre\">Location</span></code> response header and browsers seem to ignore JavaScript\nthere. Browsers we tested also treat URLs prefixed with control characters such\nas <code class=\"docutils literal notranslate\"><span class=\"pre\">%08//example.com</span></code> as relative paths so redirection to an unsafe target\nisn\u2019t a problem either.</p>\n<p>However, if a developer relies on <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe_url()</span></code> to\nprovide safe redirect targets and puts such a URL into a link, they could\nsuffer from an XSS attack as some browsers such as Google Chrome ignore control\ncharacters at the start of a URL in an anchor <code class=\"docutils literal notranslate\"><span class=\"pre\">href</span></code>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.6.10", "Django 1.6.10 release notes", "N", "next"], ["releases/1.7", "Django 1.7 release notes", "P", "previous"]], "sourcename": "releases/1.6.11.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.6.11 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#denial-of-service-possibility-with-strip-tags\">Denial-of-service possibility with <code class=\"docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mitigated-possible-xss-attack-via-user-supplied-redirect-urls\">Mitigated possible XSS attack via user-supplied redirect URLs</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.6.11", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
