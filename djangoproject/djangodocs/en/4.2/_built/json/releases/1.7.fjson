{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.7.1/", "title": "Django 1.7.1 release notes"}, "next": {"link": "../1.6.11/", "title": "Django 1.6.11 release notes"}, "title": "Django 1.7 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-7-release-notes\">\n<span id=\"django-1-7-release-notes\"></span><h1>Django 1.7 release notes<a class=\"headerlink\" href=\"#django-1-7-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>September 2, 2014</em></p>\n<p>Welcome to Django 1.7!</p>\n<p>These release notes cover the <a class=\"reference internal\" href=\"#whats-new-1-7\"><span class=\"std std-ref\">new features</span></a>, as well as\nsome <a class=\"reference internal\" href=\"#backwards-incompatible-1-7\"><span class=\"std std-ref\">backwards incompatible changes</span></a> you\u2019ll\nwant to be aware of when upgrading from Django 1.6 or older versions. We\u2019ve\n<a class=\"reference internal\" href=\"#deprecated-features-1-7\"><span class=\"std std-ref\">begun the deprecation process for some features</span></a>, and some features have reached the end of their\ndeprecation process and <a class=\"reference internal\" href=\"#removed-features-1-7\"><span class=\"std std-ref\">have been removed</span></a>.</p>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.7 requires Python 2.7, 3.2, 3.3, or 3.4. We <strong>highly recommend</strong> and\nonly officially support the latest release of each series.</p>\n<p>The Django 1.6 series is the last to support Python 2.6. Django 1.7 is the\nfirst release to support Python 3.4.</p>\n<p>This change should affect only a small number of Django users, as most\noperating-system vendors today are shipping Python 2.7 or newer as their default\nversion. If you\u2019re still using Python 2.6, however, you\u2019ll need to stick to\nDjango 1.6 until you can upgrade your Python version. Per <a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">our support\npolicy</span></a>, Django 1.6 will continue to receive\nsecurity support until the release of Django 1.8.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-7\">\n<span id=\"s-whats-new-1-7\"></span><span id=\"what-s-new-in-django-1-7\"></span><span id=\"whats-new-1-7\"></span><h2>What\u2019s new in Django 1.7<a class=\"headerlink\" href=\"#what-s-new-in-django-1-7\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-schema-migrations\">\n<span id=\"schema-migrations\"></span><h3>Schema migrations<a class=\"headerlink\" href=\"#schema-migrations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now has built-in support for schema migrations. It allows models\nto be updated, changed, and deleted by creating migration files that represent\nthe model changes and which can be run on any development, staging or production\ndatabase.</p>\n<p>Migrations are covered in <a class=\"reference internal\" href=\"../../topics/migrations/\"><span class=\"doc\">their own documentation</span></a>,\nbut a few of the key features are:</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> has been deprecated and replaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code>. Don\u2019t worry -\ncalls to <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> will still work as before.</p>\n</li>\n<li><p class=\"first\">A new <code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code> command provides an easy way to autodetect changes\nto your models and make migrations for them.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.signals.pre_syncdb</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.signals.post_syncdb</span></code> have been deprecated,\nto be replaced by <a class=\"reference internal\" href=\"../../ref/signals/#django.db.models.signals.pre_migrate\" title=\"django.db.models.signals.pre_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_migrate</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> respectively. These\nnew signals have slightly different arguments. Check the\ndocumentation for details.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_syncdb</span></code> method on database routers is now called <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code>,\nbut still performs the same function. Routers with <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_syncdb</span></code> methods\nwill still work, but that method name is deprecated and you should change\nit as soon as possible (nothing more than renaming is required).</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">initial_data</span></code> fixtures are no longer loaded for apps with migrations; if\nyou want to load initial data for an app, we suggest you create a migration for\nyour application and define a <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a>\nor <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a> operation in the <code class=\"docutils literal notranslate\"><span class=\"pre\">operations</span></code> section of the migration.</p>\n</li>\n<li><p class=\"first\">Test rollback behavior is different for apps with migrations; in particular,\nDjango will no longer emulate rollbacks on non-transactional databases or\ninside <code class=\"docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code> <a class=\"reference internal\" href=\"../../topics/testing/overview/#test-case-serialized-rollback\"><span class=\"std std-ref\">unless specifically requested</span></a>.</p>\n</li>\n<li><p class=\"first\">It is not advised to have apps without migrations depend on (have a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> to) apps with migrations.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-app-loading-refactor\">\n<span id=\"s-app-loading-refactor-17-release-note\"></span><span id=\"app-loading-refactor\"></span><span id=\"app-loading-refactor-17-release-note\"></span><h3>App-loading refactor<a class=\"headerlink\" href=\"#app-loading-refactor\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Historically, Django applications were tightly linked to models. A singleton\nknown as the \u201capp cache\u201d dealt with both installed applications and models.\nThe models module was used as an identifier for applications in many APIs.</p>\n<p>As the concept of <a class=\"reference internal\" href=\"../../ref/applications/\"><span class=\"doc\">Django applications</span></a> matured, this\ncode showed some shortcomings. It has been refactored into an \u201capp registry\u201d\nwhere models modules no longer have a central role and where it\u2019s possible to\nattach configuration data to applications.</p>\n<p>Improvements thus far include:</p>\n<ul class=\"simple\">\n<li>Applications can run code at startup, before Django does anything else, with\nthe <a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ready()</span></code></a> method of their configuration.</li>\n<li>Application labels are assigned correctly to models even when they\u2019re\ndefined outside of <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code>. You don\u2019t have to set\n<a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.app_label\" title=\"django.db.models.Options.app_label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">app_label</span></code></a> explicitly any more.</li>\n<li>It is possible to omit <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> entirely if an application doesn\u2019t\nhave any models.</li>\n<li>Applications can be relabeled with the <a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig.label\" title=\"django.apps.AppConfig.label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label</span></code></a>\nattribute of application configurations, to work around label conflicts.</li>\n<li>The name of applications can be customized in the admin with the\n<a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig.verbose_name\" title=\"django.apps.AppConfig.verbose_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name</span></code></a> of application configurations.</li>\n<li>The admin automatically calls <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.autodiscover\" title=\"django.contrib.admin.autodiscover\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">autodiscover()</span></code></a>\nwhen Django starts. You can consequently remove this line from your\nURLconf.</li>\n<li>Django imports all application configurations and models as soon as it\nstarts, through a deterministic and straightforward process. This should\nmake it easier to diagnose import issues such as import loops.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-new-method-on-field-subclasses\">\n<span id=\"new-method-on-field-subclasses\"></span><h3>New method on Field subclasses<a class=\"headerlink\" href=\"#new-method-on-field-subclasses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To help power both schema migrations and to enable easier addition of\ncomposite keys in future releases of Django, the\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> API now has a new required method:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code>.</p>\n<p>This method takes no arguments, and returns a tuple of four items:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>: The field\u2019s attribute name on its parent model, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if it\nis not part of a model</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>: A dotted, Python path to the class of this field, including the class name.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code>: Positional arguments, as a list</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code>: Keyword arguments, as a dict</li>\n</ul>\n<p>These four values allow any field to be serialized into a file, as well as\nallowing the field to be copied safely, both essential parts of these new features.</p>\n<p>This change should not affect you unless you write custom Field subclasses;\nif you do, you may need to reimplement the <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method if your\nsubclass changes the method signature of <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> in any way. If your\nfield just inherits from a built-in Django field and doesn\u2019t override <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>,\nno changes are necessary.</p>\n<p>If you do need to override <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code>, a good place to start is the\nbuilt-in Django fields (<code class=\"docutils literal notranslate\"><span class=\"pre\">django/db/models/fields/__init__.py</span></code>) as several\nfields, including <code class=\"docutils literal notranslate\"><span class=\"pre\">DecimalField</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code>, override it and show how\nto call the method on the superclass and simply add or remove extra arguments.</p>\n<p>This also means that all arguments to fields must themselves be serializable;\nto see what we consider serializable, and to find out how to make your own\nclasses serializable, read the\n<a class=\"reference internal\" href=\"../../topics/migrations/#migration-serializing\"><span class=\"std std-ref\">migration serialization documentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-calling-custom-queryset-methods-from-the-manager\">\n<span id=\"calling-custom-queryset-methods-from-the-manager\"></span><h3>Calling custom <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods from the <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code><a class=\"headerlink\" href=\"#calling-custom-queryset-methods-from-the-manager\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Historically, the recommended way to make reusable model queries was to create\nmethods on a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code> class. The problem with this approach was that\nafter the first method call, you\u2019d get back a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> instance and\ncouldn\u2019t call additional custom manager methods.</p>\n<p>Though not documented, it was common to work around this issue by creating a\ncustom <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> so that custom methods could be chained; but the solution\nhad a number of drawbacks:</p>\n<ul class=\"simple\">\n<li>The custom <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and its custom methods were lost after the first\ncall to <code class=\"docutils literal notranslate\"><span class=\"pre\">values()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code>.</li>\n<li>Writing a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code> was still necessary to return the custom\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> class and all methods that were desired on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code>\nhad to be proxied to the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>. The whole process went against\nthe DRY principle.</li>\n</ul>\n<p>The <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.as_manager\" title=\"django.db.models.query.QuerySet.as_manager\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.as_manager()</span></code></a>\nclass method can now directly <a class=\"reference internal\" href=\"../../topics/db/managers/#create-manager-with-queryset-methods\"><span class=\"std std-ref\">create Manager with QuerySet methods</span></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">FoodQuerySet</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">QuerySet</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">pizzas</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">&quot;pizza&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">vegetarian</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">vegetarian</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Food</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">kind</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">vegetarian</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">FoodQuerySet</span><span class=\"o\">.</span><span class=\"n\">as_manager</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">Food</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">pizzas</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">vegetarian</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-a-custom-manager-when-traversing-reverse-relations\">\n<span id=\"using-a-custom-manager-when-traversing-reverse-relations\"></span><h3>Using a custom manager when traversing reverse relations<a class=\"headerlink\" href=\"#using-a-custom-manager-when-traversing-reverse-relations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It is now possible to <a class=\"reference internal\" href=\"../../topics/db/queries/#using-custom-reverse-manager\"><span class=\"std std-ref\">specify a custom manager</span></a> when traversing a reverse relationship:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Blog</span><span class=\"p\">)</span>\n\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>  <span class=\"c1\"># Default Manager</span>\n    <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">EntryManager</span><span class=\"p\">()</span>  <span class=\"c1\"># Custom Manager</span>\n\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-new-system-check-framework\">\n<span id=\"new-system-check-framework\"></span><h3>New system check framework<a class=\"headerlink\" href=\"#new-system-check-framework\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>We\u2019ve added a new <a class=\"reference internal\" href=\"../../ref/checks/\"><span class=\"doc\">System check framework</span></a> for\ndetecting common problems (like invalid models) and providing hints for\nresolving those problems. The framework is extensible so you can add your\nown checks for your own apps and libraries.</p>\n<p>To perform system checks, you use the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-check\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">check</span></code></a> management command.\nThis command replaces the older <code class=\"docutils literal notranslate\"><span class=\"pre\">validate</span></code> management command.</p>\n</div>\n<div class=\"section\" id=\"s-new-prefetch-object-for-advanced-prefetch-related-operations\">\n<span id=\"new-prefetch-object-for-advanced-prefetch-related-operations\"></span><h3>New <code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code> object for advanced <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> operations.<a class=\"headerlink\" href=\"#new-prefetch-object-for-advanced-prefetch-related-operations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The new <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.Prefetch\" title=\"django.db.models.Prefetch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code></a> object allows customizing\nprefetch operations.</p>\n<p>You can specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> used to traverse a given relation\nor customize the storage location of prefetch results.</p>\n<p>This enables things like filtering prefetched relations, calling\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> from a prefetched\nrelation, or prefetching the same relation multiple times with different\nquerysets. See <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a>\nfor more details.</p>\n</div>\n<div class=\"section\" id=\"s-admin-shortcuts-support-time-zones\">\n<span id=\"admin-shortcuts-support-time-zones\"></span><h3>Admin shortcuts support time zones<a class=\"headerlink\" href=\"#admin-shortcuts-support-time-zones\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The \u201ctoday\u201d and \u201cnow\u201d shortcuts next to date and time input widgets in the\nadmin are now operating in the <a class=\"reference internal\" href=\"../../topics/i18n/timezones/#default-current-time-zone\"><span class=\"std std-ref\">current time zone</span></a>. Previously, they used the browser time zone,\nwhich could result in saving the wrong value when it didn\u2019t match the current\ntime zone on the server.</p>\n<p>In addition, the widgets now display a help message when the browser and\nserver time zone are different, to clarify how the value inserted in the field\nwill be interpreted.</p>\n</div>\n<div class=\"section\" id=\"s-using-database-cursors-as-context-managers\">\n<span id=\"using-database-cursors-as-context-managers\"></span><h3>Using database cursors as context managers<a class=\"headerlink\" href=\"#using-database-cursors-as-context-managers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Prior to Python 2.7, database cursors could be used as a context manager. The\nspecific backend\u2019s cursor defined the behavior of the context manager. The\nbehavior of magic method lookups was changed with Python 2.7 and cursors were\nno longer usable as context managers.</p>\n<p>Django 1.7 allows a cursor to be used as a context manager. That is,\nthe following can be used:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">c</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>instead of:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-lookups\">\n<span id=\"custom-lookups\"></span><h3>Custom lookups<a class=\"headerlink\" href=\"#custom-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It is now possible to write custom lookups and transforms for the ORM.\nCustom lookups work just like Django\u2019s built-in lookups (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">lte</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">icontains</span></code>) while transforms are a new concept.</p>\n<p>The <a class=\"reference internal\" href=\"../../ref/models/lookups/#django.db.models.Lookup\" title=\"django.db.models.Lookup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Lookup</span></code></a> class provides a way to add lookup\noperators for model fields. As an example it is possible to add <code class=\"docutils literal notranslate\"><span class=\"pre\">day_lte</span></code>\noperator for <code class=\"docutils literal notranslate\"><span class=\"pre\">DateFields</span></code>.</p>\n<p>The <a class=\"reference internal\" href=\"../../ref/models/lookups/#django.db.models.Transform\" title=\"django.db.models.Transform\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Transform</span></code></a> class allows transformations of\ndatabase values prior to the final lookup. For example it is possible to\nwrite a <code class=\"docutils literal notranslate\"><span class=\"pre\">year</span></code> transform that extracts year from the field\u2019s value.\nTransforms allow for chaining. After the <code class=\"docutils literal notranslate\"><span class=\"pre\">year</span></code> transform has been added\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code> it is possible to filter on the transformed value, for\nexample <code class=\"docutils literal notranslate\"><span class=\"pre\">qs.filter(author__birthdate__year__lte=1981)</span></code>.</p>\n<p>For more information about both custom lookups and transforms refer to\nthe <a class=\"reference internal\" href=\"../../howto/custom-lookups/\"><span class=\"doc\">custom lookups</span></a> documentation.</p>\n</div>\n<div class=\"section\" id=\"s-improvements-to-form-error-handling\">\n<span id=\"improvements-to-form-error-handling\"></span><h3>Improvements to <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> error handling<a class=\"headerlink\" href=\"#improvements-to-form-error-handling\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-form-add-error\">\n<span id=\"form-add-error\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Form.add_error()</span></code><a class=\"headerlink\" href=\"#form-add-error\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Previously there were two main patterns for handling errors in forms:</p>\n<ul class=\"simple\">\n<li>Raising a <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> from within certain\nfunctions (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.clean()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Form.clean_&lt;fieldname&gt;()</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Form.clean()</span></code> for non-field errors.)</li>\n<li>Fiddling with <code class=\"docutils literal notranslate\"><span class=\"pre\">Form._errors</span></code> when targeting a specific field in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Form.clean()</span></code> or adding errors from outside of a \u201cclean\u201d method\n(e.g. directly from a view).</li>\n</ul>\n<p>Using the former pattern was straightforward since the form can guess from the\ncontext (i.e. which method raised the exception) where the errors belong and\nautomatically process them. This remains the canonical way of adding errors\nwhen possible. However the latter was fiddly and error-prone, since the burden\nof handling edge cases fell on the user.</p>\n<p>The new <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.add_error\" title=\"django.forms.Form.add_error\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add_error()</span></code></a> method allows adding errors\nto specific form fields from anywhere without having to worry about the details\nsuch as creating instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.utils.ErrorList</span></code> or dealing with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Form.cleaned_data</span></code>. This new API replaces manipulating <code class=\"docutils literal notranslate\"><span class=\"pre\">Form._errors</span></code>\nwhich now becomes a private API.</p>\n<p>See <a class=\"reference internal\" href=\"../../ref/forms/validation/#validating-fields-with-clean\"><span class=\"std std-ref\">Cleaning and validating fields that depend on each other</span></a> for an example using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Form.add_error()</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-error-metadata\">\n<span id=\"error-metadata\"></span><h4>Error metadata<a class=\"headerlink\" href=\"#error-metadata\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> constructor accepts metadata\nsuch as error <code class=\"docutils literal notranslate\"><span class=\"pre\">code</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> which are then available for interpolating\ninto the error message (see <a class=\"reference internal\" href=\"../../ref/forms/validation/#raising-validation-error\"><span class=\"std std-ref\">Raising ValidationError</span></a> for more details);\nhowever, before Django 1.7 those metadata were discarded as soon as the errors\nwere added to <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.errors\" title=\"django.forms.Form.errors\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Form.errors</span></code></a>.</p>\n<p><a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.errors\" title=\"django.forms.Form.errors\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Form.errors</span></code></a> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.utils.ErrorList</span></code> now store the <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> instances\nso these metadata can be retrieved at any time through the new\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.errors.as_data\" title=\"django.forms.Form.errors.as_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.errors.as_data</span></code></a> method.</p>\n<p>The retrieved <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> instances can then be identified thanks to\ntheir error <code class=\"docutils literal notranslate\"><span class=\"pre\">code</span></code> which enables things like rewriting the error\u2019s message\nor writing custom logic in a view when a given error is present. It can also\nbe used to serialize the errors in a custom format such as XML.</p>\n<p>The new <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.errors.as_json\" title=\"django.forms.Form.errors.as_json\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.errors.as_json()</span></code></a>\nmethod is a convenience method which returns error messages along with error\ncodes serialized as JSON. <code class=\"docutils literal notranslate\"><span class=\"pre\">as_json()</span></code> uses <code class=\"docutils literal notranslate\"><span class=\"pre\">as_data()</span></code> and gives an idea\nof how the new system could be extended.</p>\n</div>\n<div class=\"section\" id=\"s-error-containers-and-backward-compatibility\">\n<span id=\"error-containers-and-backward-compatibility\"></span><h4>Error containers and backward compatibility<a class=\"headerlink\" href=\"#error-containers-and-backward-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Heavy changes to the various error containers were necessary in order\nto support the features above, specifically\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.errors\" title=\"django.forms.Form.errors\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Form.errors</span></code></a>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.utils.ErrorList</span></code>, and the internal storages of\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a>. These containers which used\nto store error strings now store <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> instances and public APIs\nhave been adapted to make this as transparent as possible, but if you\u2019ve been\nusing private APIs, some of the changes are backwards incompatible; see\n<a class=\"reference internal\" href=\"#validation-error-constructor-and-internal-storage\"><span class=\"std std-ref\">ValidationError constructor and internal storage</span></a> for more details.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-minor-features\">\n<span id=\"minor-features\"></span><h3>Minor features<a class=\"headerlink\" href=\"#minor-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-django-contrib-admin\">\n<span id=\"django-contrib-admin\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a><a class=\"headerlink\" href=\"#django-contrib-admin\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>You can now implement <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.site_header\" title=\"django.contrib.admin.AdminSite.site_header\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">site_header</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.site_title\" title=\"django.contrib.admin.AdminSite.site_title\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">site_title</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.index_title\" title=\"django.contrib.admin.AdminSite.index_title\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">index_title</span></code></a> attributes on a custom\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite\" title=\"django.contrib.admin.AdminSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AdminSite</span></code></a> in order to easily change the admin\nsite\u2019s page title and header text. No more needing to override templates!</li>\n<li>Buttons in <a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a> now use the <code class=\"docutils literal notranslate\"><span class=\"pre\">border-radius</span></code> CSS\nproperty for rounded corners rather than GIF background images.</li>\n<li>Some admin templates now have <code class=\"docutils literal notranslate\"><span class=\"pre\">app-&lt;app_name&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">model-&lt;model_name&gt;</span></code>\nclasses in their <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;body&gt;</span></code> tag to allow customizing the CSS per app or per\nmodel.</li>\n<li>The admin changelist cells now have a <code class=\"docutils literal notranslate\"><span class=\"pre\">field-&lt;field_name&gt;</span></code> class in the\nHTML to enable style customizations.</li>\n<li>The admin\u2019s search fields can now be customized per-request thanks to the new\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_search_fields\" title=\"django.contrib.admin.ModelAdmin.get_search_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.ModelAdmin.get_search_fields()</span></code></a> method.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_fields\" title=\"django.contrib.admin.ModelAdmin.get_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_fields()</span></code></a> method may be overridden to\ncustomize the value of <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.fields\" title=\"django.contrib.admin.ModelAdmin.fields\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.fields</span></code></a>.</li>\n<li>In addition to the existing <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.site.register</span></code> syntax, you can use the\nnew <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.register\" title=\"django.contrib.admin.register\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">register()</span></code></a> decorator to register a\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a>.</li>\n<li>You may specify <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display_links\" title=\"django.contrib.admin.ModelAdmin.list_display_links\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.list_display_links</span></code></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">=</span> <span class=\"pre\">None</span></code> to disable\nlinks on the change list page grid.</li>\n<li>You may now specify <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.view_on_site\" title=\"django.contrib.admin.ModelAdmin.view_on_site\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.view_on_site</span></code></a> to control whether or not to\ndisplay the \u201cView on site\u201d link.</li>\n<li>You can specify a descending ordering for a <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_display\" title=\"django.contrib.admin.ModelAdmin.list_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.list_display</span></code></a> value by prefixing the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">admin_order_field</span></code> value with a hyphen.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_changeform_initial_data\" title=\"django.contrib.admin.ModelAdmin.get_changeform_initial_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_changeform_initial_data()</span></code></a> method may be\noverridden to define custom behavior for setting initial change form data.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-auth\">\n<span id=\"django-contrib-auth\"></span><h4><a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a><a class=\"headerlink\" href=\"#django-contrib-auth\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Any <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> passed to\n<a class=\"reference internal\" href=\"../../ref/contrib/auth/#django.contrib.auth.models.User.email_user\" title=\"django.contrib.auth.models.User.email_user\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">email_user()</span></code></a> are passed to the\nunderlying <a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> call.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.decorators.permission_required\" title=\"django.contrib.auth.decorators.permission_required\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">permission_required()</span></code></a> decorator can\ntake a list of permissions as well as a single permission.</li>\n<li>You can override the new <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed\" title=\"django.contrib.auth.forms.AuthenticationForm.confirm_login_allowed\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AuthenticationForm.confirm_login_allowed()</span></code></a> method\nto more easily customize the login policy.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset()</span></code> takes an optional\n<code class=\"docutils literal notranslate\"><span class=\"pre\">html_email_template_name</span></code> parameter used to send a multipart HTML email\nfor password resets.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\" title=\"django.contrib.auth.models.AbstractBaseUser.get_session_auth_hash\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser.get_session_auth_hash()</span></code></a>\nmethod was added and if your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> inherits from\n<a class=\"reference internal\" href=\"../../topics/auth/customizing/#django.contrib.auth.models.AbstractBaseUser\" title=\"django.contrib.auth.models.AbstractBaseUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code></a>, changing a user\u2019s\npassword now invalidates old sessions if the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.middleware.SessionAuthenticationMiddleware</span></code> is\nenabled. See <a class=\"reference internal\" href=\"../../topics/auth/default/#session-invalidation-on-password-change\"><span class=\"std std-ref\">Session invalidation on password change</span></a> for more details.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-formtools\">\n<span id=\"django-contrib-formtools\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.formtools</span></code><a class=\"headerlink\" href=\"#django-contrib-formtools\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Calls to <code class=\"docutils literal notranslate\"><span class=\"pre\">WizardView.done()</span></code> now include a <code class=\"docutils literal notranslate\"><span class=\"pre\">form_dict</span></code> to allow easier\naccess to forms by their step name.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-gis\">\n<span id=\"django-contrib-gis\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/gis/#module-django.contrib.gis\" title=\"django.contrib.gis: Geographic Information System (GIS) extensions for Django\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a><a class=\"headerlink\" href=\"#django-contrib-gis\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The default OpenLayers library version included in widgets has been updated\nfrom 2.11 to 2.13.</li>\n<li>Prepared geometries now also support the <code class=\"docutils literal notranslate\"><span class=\"pre\">crosses</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">disjoint</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">overlaps</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">touches</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">within</span></code> predicates, if GEOS 3.3 or later is\ninstalled.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-messages\">\n<span id=\"django-contrib-messages\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/messages/#module-django.contrib.messages\" title=\"django.contrib.messages: Provides cookie- and session-based temporary message storage.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.messages</span></code></a><a class=\"headerlink\" href=\"#django-contrib-messages\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The backends for <a class=\"reference internal\" href=\"../../ref/contrib/messages/#module-django.contrib.messages\" title=\"django.contrib.messages: Provides cookie- and session-based temporary message storage.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.messages</span></code></a> that use cookies, will now\nfollow the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SESSION_COOKIE_SECURE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_SECURE</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SESSION_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_HTTPONLY</span></code></a> settings.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/messages/#message-displaying\"><span class=\"std std-ref\">messages context processor</span></a> now adds a\ndictionary of default levels under the name <code class=\"docutils literal notranslate\"><span class=\"pre\">DEFAULT_MESSAGE_LEVELS</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/messages/#django.contrib.messages.storage.base.Message\" title=\"django.contrib.messages.storage.base.Message\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Message</span></code></a> objects now have a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">level_tag</span></code> attribute that contains the string representation of the\nmessage level.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-redirects\">\n<span id=\"django-contrib-redirects\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/redirects/#module-django.contrib.redirects\" title=\"django.contrib.redirects: A framework for managing redirects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.redirects</span></code></a><a class=\"headerlink\" href=\"#django-contrib-redirects\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/redirects/#django.contrib.redirects.middleware.RedirectFallbackMiddleware\" title=\"django.contrib.redirects.middleware.RedirectFallbackMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RedirectFallbackMiddleware</span></code></a>\nhas two new attributes\n(<a class=\"reference internal\" href=\"../../ref/contrib/redirects/#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_gone_class\" title=\"django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_gone_class\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">response_gone_class</span></code></a>\nand\n<a class=\"reference internal\" href=\"../../ref/contrib/redirects/#django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class\" title=\"django.contrib.redirects.middleware.RedirectFallbackMiddleware.response_redirect_class\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">response_redirect_class</span></code></a>)\nthat specify the types of <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instances the\nmiddleware returns.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sessions\">\n<span id=\"django-contrib-sessions\"></span><h4><a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sessions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django.contrib.sessions.backends.cached_db&quot;</span></code> session backend now\nrespects <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SESSION_CACHE_ALIAS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_CACHE_ALIAS</span></code></a>. In previous versions, it always used\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> cache.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sitemaps\">\n<span id=\"django-contrib-sitemaps\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#module-django.contrib.sitemaps\" title=\"django.contrib.sitemaps: A framework for generating Google sitemap XML files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sitemaps\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#module-django.contrib.sitemaps\" title=\"django.contrib.sitemaps: A framework for generating Google sitemap XML files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sitemap</span> <span class=\"pre\">framework</span></code></a> now makes use of\n<a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#django.contrib.sitemaps.Sitemap.lastmod\" title=\"django.contrib.sitemaps.Sitemap.lastmod\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">lastmod</span></code></a> to set a <code class=\"docutils literal notranslate\"><span class=\"pre\">Last-Modified</span></code>\nheader in the response. This makes it possible for the\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.http.ConditionalGetMiddleware\" title=\"django.middleware.http.ConditionalGetMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConditionalGetMiddleware</span></code></a> to handle\nconditional <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> requests for sitemaps which set <code class=\"docutils literal notranslate\"><span class=\"pre\">lastmod</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sites\">\n<span id=\"django-contrib-sites\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/sites/#module-django.contrib.sites\" title=\"django.contrib.sites: Lets you operate multiple websites from the same database and Django project\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sites\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The new <a class=\"reference internal\" href=\"../../ref/middleware/#django.contrib.sites.middleware.CurrentSiteMiddleware\" title=\"django.contrib.sites.middleware.CurrentSiteMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.middleware.CurrentSiteMiddleware</span></code></a> allows\nsetting the current site on each request.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-staticfiles\">\n<span id=\"django-contrib-staticfiles\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a><a class=\"headerlink\" href=\"#django-contrib-staticfiles\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#staticfiles-storages\"><span class=\"std std-ref\">static files storage classes</span></a> may be\nsubclassed to override the permissions that collected static files and\ndirectories receive by setting the\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.FileSystemStorage.file_permissions_mode\" title=\"django.core.files.storage.FileSystemStorage.file_permissions_mode\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">file_permissions_mode</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.FileSystemStorage.directory_permissions_mode\" title=\"django.core.files.storage.FileSystemStorage.directory_permissions_mode\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">directory_permissions_mode</span></code></a>\nparameters. See <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> for example usage.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">CachedStaticFilesStorage</span></code> backend gets a sibling class called\n<a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.storage.ManifestStaticFilesStorage\" title=\"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManifestStaticFilesStorage</span></code></a>\nthat doesn\u2019t use the cache system at all but instead a JSON file called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles.json</span></code> for storing the mapping between the original file name\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">css/styles.css</span></code>) and the hashed file name (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">css/styles.55e7cbb9ba48.css</span></code>). The <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles.json</span></code> file is created\nwhen running the <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> management command and should\nbe a less expensive alternative for remote storages such as Amazon S3.</p>\n<p>See the <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.storage.ManifestStaticFilesStorage\" title=\"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManifestStaticFilesStorage</span></code></a>\ndocs for more information.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-findstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">findstatic</span></code></a> now accepts verbosity flag level 2, meaning it will\nshow the relative paths of the directories it searched. See\n<a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-findstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">findstatic</span></code></a> for example output.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-syndication\">\n<span id=\"django-contrib-syndication\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/syndication/#module-django.contrib.syndication\" title=\"django.contrib.syndication: A framework for generating syndication feeds, in RSS and Atom, quite easily.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication</span></code></a><a class=\"headerlink\" href=\"#django-contrib-syndication\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.feedgenerator.Atom1Feed\" title=\"django.utils.feedgenerator.Atom1Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Atom1Feed</span></code></a> syndication feed\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">updated</span></code> element now utilizes <code class=\"docutils literal notranslate\"><span class=\"pre\">updateddate</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">pubdate</span></code>,\nallowing the <code class=\"docutils literal notranslate\"><span class=\"pre\">published</span></code> element to be included in the feed (which\nrelies on <code class=\"docutils literal notranslate\"><span class=\"pre\">pubdate</span></code>).</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-cache\">\n<span id=\"cache\"></span><h4>Cache<a class=\"headerlink\" href=\"#cache\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Access to caches configured in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> is now available via\n<a class=\"reference internal\" href=\"../../topics/cache/#django.core.cache.caches\" title=\"django.core.cache.caches\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">django.core.cache.caches</span></code></a>. This dict-like object provides a different\ninstance per thread. It supersedes <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.get_cache()</span></code> which\nis now deprecated.</li>\n<li>If you instantiate cache backends directly, be aware that they aren\u2019t\nthread-safe any more, as <a class=\"reference internal\" href=\"../../topics/cache/#django.core.cache.caches\" title=\"django.core.cache.caches\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">django.core.cache.caches</span></code></a> now yields\ndifferent instances per thread.</li>\n<li>Defining the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES-TIMEOUT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIMEOUT</span></code></a> argument of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> setting as <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> will set the cache keys as\n\u201cnon-expiring\u201d by default. Previously, it was only possible to pass\n<code class=\"docutils literal notranslate\"><span class=\"pre\">timeout=None</span></code> to the cache backend\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> method.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-cross-site-request-forgery\">\n<span id=\"cross-site-request-forgery\"></span><h4>Cross Site Request Forgery<a class=\"headerlink\" href=\"#cross-site-request-forgery\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_AGE</span></code></a> setting facilitates the use of session-based\nCSRF cookies.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-email\">\n<span id=\"email\"></span><h4>Email<a class=\"headerlink\" href=\"#email\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.send_mail\" title=\"django.core.mail.send_mail\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">send_mail()</span></code></a> now accepts an <code class=\"docutils literal notranslate\"><span class=\"pre\">html_message</span></code>\nparameter for sending a multipart <em class=\"mimetype\">text/plain</em> and\n<em class=\"mimetype\">text/html</em> email.</li>\n<li>The SMTP <a class=\"reference internal\" href=\"../../topics/email/#django.core.mail.backends.smtp.EmailBackend\" title=\"django.core.mail.backends.smtp.EmailBackend\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailBackend</span></code></a> now accepts a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">timeout</span></code> parameter.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-file-storage\">\n<span id=\"file-storage\"></span><h4>File Storage<a class=\"headerlink\" href=\"#file-storage\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>File locking on Windows previously depended on the PyWin32 package; if it\nwasn\u2019t installed, file locking failed silently. That dependency has been\nremoved, and file locking is now implemented natively on both Windows\nand Unix.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-file-uploads\">\n<span id=\"file-uploads\"></span><h4>File Uploads<a class=\"headerlink\" href=\"#file-uploads\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The new <a class=\"reference internal\" href=\"../../ref/files/uploads/#django.core.files.uploadedfile.UploadedFile.content_type_extra\" title=\"django.core.files.uploadedfile.UploadedFile.content_type_extra\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">UploadedFile.content_type_extra</span></code></a> attribute\ncontains extra parameters passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">content-type</span></code> header on a file\nupload.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FILE_UPLOAD_DIRECTORY_PERMISSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FILE_UPLOAD_DIRECTORY_PERMISSIONS</span></code></a> setting controls\nthe file system permissions of directories created during file upload, like\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FILE_UPLOAD_PERMISSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FILE_UPLOAD_PERMISSIONS</span></code></a> does for the files themselves.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField.upload_to\" title=\"django.db.models.FileField.upload_to\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">FileField.upload_to</span></code></a>\nattribute is now optional. If it is omitted or given <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> or an empty\nstring, a subdirectory won\u2019t be used for storing the uploaded files.</li>\n<li>Uploaded files are now explicitly closed before the response is delivered to\nthe client. Partially uploaded files are also closed as long as they are\nnamed <code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> in the upload handler.</li>\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.get_available_name\" title=\"django.core.files.storage.Storage.get_available_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.get_available_name()</span></code></a> now appends an\nunderscore plus a random 7 character alphanumeric string (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_x3a1gho&quot;</span></code>), rather than iterating through an underscore followed by a\nnumber (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_1&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;_2&quot;</span></code>, etc.) to prevent a denial-of-service attack.\nThis change was also made in the 1.6.6, 1.5.9, and 1.4.14 security releases.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-forms\">\n<span id=\"forms\"></span><h4>Forms<a class=\"headerlink\" href=\"#forms\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> tags rendered by\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.RadioSelect\" title=\"django.forms.RadioSelect\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RadioSelect</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.CheckboxSelectMultiple\" title=\"django.forms.CheckboxSelectMultiple\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CheckboxSelectMultiple</span></code></a> when looping over the radio\nbuttons or checkboxes now include <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> attributes, respectively.\nEach radio button or checkbox includes an <code class=\"docutils literal notranslate\"><span class=\"pre\">id_for_label</span></code> attribute to\noutput the element\u2019s ID.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;textarea&gt;</span></code> tags rendered by <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.Textarea\" title=\"django.forms.Textarea\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Textarea</span></code></a> now\ninclude a <code class=\"docutils literal notranslate\"><span class=\"pre\">maxlength</span></code> attribute if the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.TextField\" title=\"django.db.models.TextField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextField</span></code></a>\nmodel field has a <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.choices\" title=\"django.db.models.Field.choices\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.choices</span></code></a> now allows you to\ncustomize the \u201cempty choice\u201d label by including a tuple with an empty string\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> for the key and the custom label as the value. The default blank\noption <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;----------&quot;</span></code> will be omitted in this case.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.MultiValueField\" title=\"django.forms.MultiValueField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultiValueField</span></code></a> allows optional subfields by setting\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">require_all_fields</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">required</span></code> attribute\nfor each individual field will be respected, and a new <code class=\"docutils literal notranslate\"><span class=\"pre\">incomplete</span></code>\nvalidation error will be raised when any required fields are empty.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.clean\" title=\"django.forms.Form.clean\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">clean()</span></code></a> method on a form no longer needs to\nreturn <code class=\"docutils literal notranslate\"><span class=\"pre\">self.cleaned_data</span></code>. If it does return a changed dictionary then\nthat will still be used.</li>\n<li>After a temporary regression in Django 1.6, it\u2019s now possible again to make\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.TypedChoiceField\" title=\"django.forms.TypedChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TypedChoiceField</span></code></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">coerce</span></code> method return an arbitrary\nvalue.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.SelectDateWidget.months\" title=\"django.forms.SelectDateWidget.months\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">SelectDateWidget.months</span></code></a> can be used to\ncustomize the wording of the months displayed in the select widget.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">min_num</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_min</span></code> parameters were added to\n<a class=\"reference internal\" href=\"../../ref/forms/formsets/#django.forms.formsets.formset_factory\" title=\"django.forms.formsets.formset_factory\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">formset_factory()</span></code></a> to allow validating\na minimum number of submitted forms.</li>\n<li>The metaclasses used by <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> have been reworked to\nsupport more inheritance scenarios. The previous limitation that prevented\ninheriting from both <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> simultaneously have been\nremoved as long as <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> appears first in the MRO.</li>\n<li>It\u2019s now possible to remove a field from a <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> when subclassing by\nsetting the name to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</li>\n<li>It\u2019s now possible to customize the error messages for <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code>\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unique</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">unique_for_date</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">unique_together</span></code> constraints.\nIn order to support <code class=\"docutils literal notranslate\"><span class=\"pre\">unique_together</span></code> or any other <code class=\"docutils literal notranslate\"><span class=\"pre\">NON_FIELD_ERROR</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> now looks for the <code class=\"docutils literal notranslate\"><span class=\"pre\">NON_FIELD_ERROR</span></code> key in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">error_messages</span></code> dictionary of the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code>\u2019s inner <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> class.\nSee <a class=\"reference internal\" href=\"../../topics/forms/modelforms/#considerations-regarding-model-errormessages\"><span class=\"std std-ref\">considerations regarding model\u2019s error_messages</span></a> for more details.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-internationalization\">\n<span id=\"internationalization\"></span><h4>Internationalization<a class=\"headerlink\" href=\"#internationalization\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.locale.LocaleMiddleware.response_redirect_class\" title=\"django.middleware.locale.LocaleMiddleware.response_redirect_class\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.middleware.locale.LocaleMiddleware.response_redirect_class</span></code></a>\nattribute allows you to customize the redirects issued by the middleware.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.locale.LocaleMiddleware\" title=\"django.middleware.locale.LocaleMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocaleMiddleware</span></code></a> now stores the user\u2019s\nselected language with the session key <code class=\"docutils literal notranslate\"><span class=\"pre\">_language</span></code>. This should only be\naccessed using the <code class=\"docutils literal notranslate\"><span class=\"pre\">LANGUAGE_SESSION_KEY</span></code> constant. Previously it was\nstored with the key <code class=\"docutils literal notranslate\"><span class=\"pre\">django_language</span></code> and the <code class=\"docutils literal notranslate\"><span class=\"pre\">LANGUAGE_SESSION_KEY</span></code>\nconstant did not exist, but keys reserved for Django should start with an\nunderscore. For backwards compatibility <code class=\"docutils literal notranslate\"><span class=\"pre\">django_language</span></code> is still read\nfrom in 1.7. Sessions will be migrated to the new key as they are written.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/i18n/translation/#std-templatetag-blocktrans\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">blocktrans</span></code></a> tag now supports a <code class=\"docutils literal notranslate\"><span class=\"pre\">trimmed</span></code> option. This\noption will remove newline characters from the beginning and the end of the\ncontent of the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">blocktrans</span> <span class=\"pre\">%}</span></code> tag, replace any whitespace at the\nbeginning and end of a line and merge all lines into one using a space\ncharacter to separate them. This is quite useful for indenting the content of\na <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">blocktrans</span> <span class=\"pre\">%}</span></code> tag without having the indentation characters end up\nin the corresponding entry in the <code class=\"docutils literal notranslate\"><span class=\"pre\">.po</span></code> file, which makes the translation\nprocess easier.</li>\n<li>When you run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemessages</span></code></a> from the root directory of your project,\nany extracted strings will now be automatically distributed to the proper\napp or project message file. See <a class=\"reference internal\" href=\"../../topics/i18n/translation/#how-to-create-language-files\"><span class=\"std std-ref\">Localization: how to create language files</span></a> for\ndetails.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemessages</span></code></a> command now always adds the <code class=\"docutils literal notranslate\"><span class=\"pre\">--previous</span></code>\ncommand line flag to the <code class=\"docutils literal notranslate\"><span class=\"pre\">msgmerge</span></code> command, keeping previously translated\nstrings in <code class=\"docutils literal notranslate\"><span class=\"pre\">.po</span></code> files for fuzzy strings.</li>\n<li>The following settings to adjust the language cookie options were introduced:\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGE_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_COOKIE_AGE</span></code></a>, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGE_COOKIE_DOMAIN\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_COOKIE_DOMAIN</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-LANGUAGE_COOKIE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">LANGUAGE_COOKIE_PATH</span></code></a>.</li>\n<li>Added <a class=\"reference internal\" href=\"../../topics/i18n/formatting/\"><span class=\"doc\">Format localization</span></a> for Esperanto.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-management-commands\">\n<span id=\"management-commands\"></span><h4>Management Commands<a class=\"headerlink\" href=\"#management-commands\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul>\n<li><p class=\"first\">The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-no-color\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--no-color</span></code></a> option for <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> disables the\ncolorization of management command output.</p>\n</li>\n<li><p class=\"first\">The new <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-dumpdata-natural-foreign\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">dumpdata</span> <span class=\"pre\">--natural-foreign</span></code></a> and <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-dumpdata-natural-primary\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">dumpdata</span>\n<span class=\"pre\">--natural-primary</span></code></a> options, and the new <code class=\"docutils literal notranslate\"><span class=\"pre\">use_natural_foreign_keys</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">use_natural_primary_keys</span></code> arguments for <code class=\"docutils literal notranslate\"><span class=\"pre\">serializers.serialize()</span></code>, allow\nthe use of natural primary keys when serializing.</p>\n</li>\n<li><p class=\"first\">It is no longer necessary to provide the cache table name or the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--database</span></code> option for the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-createcachetable\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">createcachetable</span></code></a> command.\nDjango takes this information from your settings file. If you have configured\nmultiple caches or multiple databases, all cache tables are created.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a> command received several improvements:</p>\n<ul class=\"simple\">\n<li>On Linux systems, if <a class=\"reference external\" href=\"https://pypi.org/project/pyinotify/\">pyinotify</a> is installed, the development server\nwill reload immediately when a file is changed. Previously, it polled the\nfilesystem for changes every second. That caused a small delay before\nreloads and reduced battery life on laptops.</li>\n<li>In addition, the development server automatically reloads when a\ntranslation file is updated, i.e. after running\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-compilemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">compilemessages</span></code></a>.</li>\n<li>All HTTP requests are logged to the console, including requests for static\nfiles or <code class=\"docutils literal notranslate\"><span class=\"pre\">favicon.ico</span></code> that used to be filtered out.</li>\n</ul>\n</li>\n<li><p class=\"first\">Management commands can now produce syntax colored output under Windows if\nthe ANSICON third-party tool is installed and active.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> command with symlink option is now supported on\nWindows NT 6 (Windows Vista and newer).</p>\n</li>\n<li><p class=\"first\">Initial SQL data now works better if the <a class=\"reference external\" href=\"https://pypi.org/project/sqlparse/\">sqlparse</a> Python library is\ninstalled.</p>\n<p>Note that it\u2019s deprecated in favor of the\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a> operation of migrations,\nwhich benefits from the improved behavior.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-models\">\n<span id=\"models\"></span><h4>Models<a class=\"headerlink\" href=\"#models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.update_or_create\" title=\"django.db.models.query.QuerySet.update_or_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.update_or_create()</span></code></a> method was added.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.default_permissions\" title=\"django.db.models.Options.default_permissions\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default_permissions</span></code></a> model\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> option allows you to customize (or disable) creation of the default\nadd, change, and delete permissions.</li>\n<li>Explicit <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> for\n<a class=\"reference internal\" href=\"../../topics/db/models/#multi-table-inheritance\"><span class=\"std std-ref\">Multi-table inheritance</span></a> are now discovered in abstract classes.</li>\n<li>It is now possible to avoid creating a backward relation for\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> by setting its\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'+'</span></code> or ending it with <code class=\"docutils literal notranslate\"><span class=\"pre\">'+'</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> support the power operator\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">**</span></code>).</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> methods of the related managers created by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code> now accept the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> keyword\nargument to control whether or not to perform operations in bulk\n(i.e. using <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code>). Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</li>\n<li>It is now possible to use <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as a query value for the <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-iexact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a>\nlookup.</li>\n<li>It is now possible to pass a callable as value for the attribute\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ForeignKey.limit_choices_to\" title=\"django.db.models.ForeignKey.limit_choices_to\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">limit_choices_to</span></code></a> when defining a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code>.</li>\n<li>Calling <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> on the result of\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.values()</span></code></a> now raises\nan error (before that, it would either result in a database error or\nincorrect data).</li>\n<li>You can use a single list for <a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.index_together\" title=\"django.db.models.Options.index_together\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">index_together</span></code></a>\n(rather than a list of lists) when specifying a single set of fields.</li>\n<li>Custom intermediate models having more than one foreign key to any of the\nmodels participating in a many-to-many relationship are now permitted,\nprovided you explicitly specify which foreign keys should be used by setting\nthe new <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ManyToManyField.through_fields\" title=\"django.db.models.ManyToManyField.through_fields\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ManyToManyField.through_fields</span></code></a>\nargument.</li>\n<li>Assigning a model instance to a non-relation field will now throw an error.\nPreviously this used to work if the field accepted integers as input as it\ntook the primary key.</li>\n<li>Integer fields are now validated against database backend specific min and\nmax values based on their <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.get_internal_type\" title=\"django.db.models.Field.get_internal_type\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">internal_type</span></code></a>.\nPreviously model field validation didn\u2019t prevent values out of their associated\ncolumn data type range from being saved resulting in an integrity error.</li>\n<li>It is now possible to explicitly <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a>\na relation <code class=\"docutils literal notranslate\"><span class=\"pre\">_id</span></code> field by using its attribute name.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-signals\">\n<span id=\"signals\"></span><h4>Signals<a class=\"headerlink\" href=\"#signals\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">enter</span></code> argument was added to the\n<a class=\"reference internal\" href=\"../../ref/signals/#django.test.signals.setting_changed\" title=\"django.test.signals.setting_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">setting_changed</span></code></a> signal.</li>\n<li>The model signals can be now be connected to using a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'app_label.ModelName'</span></code> form \u2013 just like related fields \u2013 to lazily\nreference their senders.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-templates\">\n<span id=\"templates\"></span><h4>Templates<a class=\"headerlink\" href=\"#templates\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.push\" title=\"django.template.Context.push\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Context.push()</span></code></a> method now returns\na context manager which automatically calls <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.pop\" title=\"django.template.Context.pop\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">pop()</span></code></a> upon exiting the <code class=\"docutils literal notranslate\"><span class=\"pre\">with</span></code> statement.\nAdditionally, <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.push\" title=\"django.template.Context.push\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">push()</span></code></a> now accepts\nparameters that are passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> constructor used to build the new\ncontext level.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.flatten\" title=\"django.template.Context.flatten\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Context.flatten()</span></code></a> method\nreturns a <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code>\u2019s stack as one flat dictionary.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> objects can now be compared for equality (internally, this\nuses <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.flatten\" title=\"django.template.Context.flatten\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Context.flatten()</span></code></a> so the\ninternal structure of each <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code>\u2019s stack doesn\u2019t matter as long as their\nflattened version is identical).</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-widthratio\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">widthratio</span></code></a> template tag now accepts an <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;as&quot;</span></code> parameter to\ncapture the result in a variable.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> template tag will now also accept anything with a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method (such as a <code class=\"docutils literal notranslate\"><span class=\"pre\">Template</span></code>) as an argument. String\narguments will be looked up using\n<a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.get_template\" title=\"django.template.loader.get_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_template()</span></code></a> as always.</li>\n<li>It is now possible to <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-include\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">include</span></code></a> templates recursively.</li>\n<li>Template objects now have an origin attribute set when\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_DEBUG</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. This allows template origins to be\ninspected and logged outside of the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template</span></code> infrastructure.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code> exceptions are no longer silenced when raised during the\nrendering of a template.</li>\n<li>The following functions now accept a <code class=\"docutils literal notranslate\"><span class=\"pre\">dirs</span></code> parameter which is a list or\ntuple to override <code class=\"docutils literal notranslate\"><span class=\"pre\">TEMPLATE_DIRS</span></code>:<ul>\n<li><a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.get_template\" title=\"django.template.loader.get_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.template.loader.get_template()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../topics/templates/#django.template.loader.select_template\" title=\"django.template.loader.select_template\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.template.loader.select_template()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render()</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.shortcuts.render_to_response()</span></code></li>\n</ul>\n</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-time\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">time</span></code></a> filter now accepts timezone-related <a class=\"reference internal\" href=\"../../ref/templates/builtins/#date-and-time-formatting-specifiers\"><span class=\"std std-ref\">format\nspecifiers</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">'e'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'O'</span></code> , <code class=\"docutils literal notranslate\"><span class=\"pre\">'T'</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">'Z'</span></code> and is able to digest <a class=\"reference internal\" href=\"../../topics/i18n/timezones/#naive-vs-aware-datetimes\"><span class=\"std std-ref\">time-zone-aware</span></a> <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> instances performing the expected\nrendering.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/cache/#std-templatetag-cache\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cache</span></code></a> tag will now try to use the cache called\n\u201ctemplate_fragments\u201d if it exists and fall back to using the default cache\notherwise. It also now accepts an optional <code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code> keyword argument to\ncontrol which cache it uses.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-truncatechars_html\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">truncatechars_html</span></code></a> filter truncates a string to be no\nlonger than the specified number of characters, taking HTML into account.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-requests-and-responses\">\n<span id=\"requests-and-responses\"></span><h4>Requests and Responses<a class=\"headerlink\" href=\"#requests-and-responses\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The new <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.scheme\" title=\"django.http.HttpRequest.scheme\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpRequest.scheme</span></code></a> attribute\nspecifies the scheme of the request (<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">https</span></code> normally).</li>\n<li>The shortcut <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.redirect\" title=\"django.shortcuts.redirect\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">redirect()</span></code></a> now supports\nrelative URLs.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.JsonResponse\" title=\"django.http.JsonResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JsonResponse</span></code></a> subclass of\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> helps easily create JSON-encoded responses.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-tests\">\n<span id=\"tests\"></span><h4>Tests<a class=\"headerlink\" href=\"#tests\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.runner.DiscoverRunner\" title=\"django.test.runner.DiscoverRunner\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DiscoverRunner</span></code></a> has two new attributes,\n<a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.runner.DiscoverRunner.test_suite\" title=\"django.test.runner.DiscoverRunner.test_suite\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">test_suite</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.runner.DiscoverRunner.test_runner\" title=\"django.test.runner.DiscoverRunner.test_runner\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">test_runner</span></code></a>, which facilitate\noverriding the way tests are collected and run.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">fetch_redirect_response</span></code> argument was added to\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertRedirects\" title=\"django.test.SimpleTestCase.assertRedirects\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRedirects()</span></code></a>. Since the test\nclient can\u2019t fetch externals URLs, this allows you to use <code class=\"docutils literal notranslate\"><span class=\"pre\">assertRedirects</span></code>\nwith redirects that aren\u2019t part of your Django app.</li>\n<li>Correct handling of scheme when making comparisons in\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase.assertRedirects\" title=\"django.test.SimpleTestCase.assertRedirects\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertRedirects()</span></code></a>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">secure</span></code> argument was added to all the request methods of\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client\" title=\"django.test.Client\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Client</span></code></a>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the request will be made\nthrough HTTPS.</li>\n<li><a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase.assertNumQueries\" title=\"django.test.TransactionTestCase.assertNumQueries\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">assertNumQueries()</span></code></a> now prints\nout the list of executed queries if the assertion fails.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code> instance generated by the test handler is now attached to\nthe <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Response.wsgi_request\" title=\"django.test.Response.wsgi_request\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.test.Response.wsgi_request</span></code></a> attribute.</li>\n<li>The database settings for testing have been collected into a dictionary\nnamed <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-TEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST</span></code></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-utilities\">\n<span id=\"utilities\"></span><h4>Utilities<a class=\"headerlink\" href=\"#utilities\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Improved <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.strip_tags\" title=\"django.utils.html.strip_tags\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">strip_tags()</span></code></a> accuracy (but it still cannot\nguarantee an HTML-safe result, as stated in the documentation).</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-validators\">\n<span id=\"validators\"></span><h4>Validators<a class=\"headerlink\" href=\"#validators\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.RegexValidator\" title=\"django.core.validators.RegexValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RegexValidator</span></code></a> now accepts the optional\n<a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.RegexValidator.flags\" title=\"django.core.validators.RegexValidator.flags\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">flags</span></code></a> and\nBoolean <a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.RegexValidator.inverse_match\" title=\"django.core.validators.RegexValidator.inverse_match\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">inverse_match</span></code></a> arguments.\nThe <a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.RegexValidator.inverse_match\" title=\"django.core.validators.RegexValidator.inverse_match\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">inverse_match</span></code></a> attribute\ndetermines if the <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ValidationError\" title=\"django.core.exceptions.ValidationError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code></a> should\nbe raised when the regular expression pattern matches (<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>) or does not\nmatch (<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, by default) the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. The\n<a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.RegexValidator.flags\" title=\"django.core.validators.RegexValidator.flags\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">flags</span></code></a> attribute sets the flags\nused when compiling a regular expression string.</li>\n<li><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.URLValidator\" title=\"django.core.validators.URLValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">URLValidator</span></code></a> now accepts an optional\n<code class=\"docutils literal notranslate\"><span class=\"pre\">schemes</span></code> argument which allows customization of the accepted URI schemes\n(instead of the defaults <code class=\"docutils literal notranslate\"><span class=\"pre\">http(s)</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ftp(s)</span></code>).</li>\n<li><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.validate_email\" title=\"django.core.validators.validate_email\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">validate_email()</span></code></a> now accepts addresses with\nIPv6 literals, like <code class=\"docutils literal notranslate\"><span class=\"pre\">example&#64;[2001:db8::1]</span></code>, as specified in RFC 5321.</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-7\">\n<span id=\"s-backwards-incompatible-1-7\"></span><span id=\"backwards-incompatible-changes-in-1-7\"></span><span id=\"backwards-incompatible-1-7\"></span><h2>Backwards incompatible changes in 1.7<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-7\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">In addition to the changes outlined in this section, be sure to review the\n<a class=\"reference internal\" href=\"../../internals/deprecation/#deprecation-removed-in-1-7\"><span class=\"std std-ref\">deprecation plan</span></a> for any features that\nhave been removed. If you haven\u2019t updated your code within the\ndeprecation timeline for a given feature, its removal may appear as a\nbackwards incompatible change.</p>\n</div>\n<div class=\"section\" id=\"s-allow-syncdb-allow-migrate\">\n<span id=\"allow-syncdb-allow-migrate\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">allow_syncdb</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code><a class=\"headerlink\" href=\"#allow-syncdb-allow-migrate\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>While Django will still look at <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_syncdb</span></code> methods even though they\nshould be renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code>, there is a subtle difference in which\nmodels get passed to these methods.</p>\n<p>For apps with migrations, <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code> will now get passed\n<a class=\"reference internal\" href=\"../../topics/migrations/#historical-models\"><span class=\"std std-ref\">historical models</span></a>, which are special versioned models\nwithout custom attributes, methods or managers. Make sure your <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code>\nmethods are only referring to fields or other items in <code class=\"docutils literal notranslate\"><span class=\"pre\">model._meta</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-initial-data\">\n<span id=\"initial-data\"></span><h3>initial_data<a class=\"headerlink\" href=\"#initial-data\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Apps with migrations will not load <code class=\"docutils literal notranslate\"><span class=\"pre\">initial_data</span></code> fixtures when they have\nfinished migrating. Apps without migrations will continue to load these fixtures\nduring the phase of <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> which emulates the old <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> behavior,\nbut any new apps will not have this support.</p>\n<p>Instead, you are encouraged to load initial data in migrations if you need it\n(using the <code class=\"docutils literal notranslate\"><span class=\"pre\">RunPython</span></code> operation and your model classes);\nthis has the added advantage that your initial data will not need updating\nevery time you change the schema.</p>\n<p>Additionally, like the rest of Django\u2019s old <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> code, <code class=\"docutils literal notranslate\"><span class=\"pre\">initial_data</span></code>\nhas been started down the deprecation path and will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-deconstruct-and-serializability\">\n<span id=\"deconstruct-and-serializability\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> and serializability<a class=\"headerlink\" href=\"#deconstruct-and-serializability\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now requires all Field classes and all of their constructor arguments\nto be serializable. If you modify the constructor signature in your custom\nField in any way, you\u2019ll need to implement a <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method;\nwe\u2019ve expanded the custom field documentation with <a class=\"reference internal\" href=\"../../howto/custom-model-fields/#custom-field-deconstruct-method\"><span class=\"std std-ref\">instructions\non implementing this method</span></a>.</p>\n<p>The requirement for all field arguments to be\n<a class=\"reference internal\" href=\"../../topics/migrations/#migration-serializing\"><span class=\"std std-ref\">serializable</span></a> means that any custom class\ninstances being passed into Field constructors - things like custom Storage\nsubclasses, for instance - need to have a <a class=\"reference internal\" href=\"../../topics/migrations/#custom-deconstruct-method\"><span class=\"std std-ref\">deconstruct method defined on\nthem as well</span></a>, though Django provides a handy\nclass decorator that will work for most applications.</p>\n</div>\n<div class=\"section\" id=\"s-app-loading-changes\">\n<span id=\"app-loading-changes\"></span><h3>App-loading changes<a class=\"headerlink\" href=\"#app-loading-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-start-up-sequence\">\n<span id=\"start-up-sequence\"></span><h4>Start-up sequence<a class=\"headerlink\" href=\"#start-up-sequence\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Django 1.7 loads application configurations and models as soon as it starts.\nWhile this behavior is more straightforward and is believed to be more robust,\nregressions cannot be ruled out. See <a class=\"reference internal\" href=\"../../ref/applications/#applications-troubleshooting\"><span class=\"std std-ref\">Troubleshooting</span></a> for\nsolutions to some problems you may encounter.</p>\n</div>\n<div class=\"section\" id=\"s-standalone-scripts\">\n<span id=\"standalone-scripts\"></span><h4>Standalone scripts<a class=\"headerlink\" href=\"#standalone-scripts\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you\u2019re using Django in a plain Python script \u2014 rather than a management\ncommand \u2014 and you rely on the <span class=\"target\" id=\"index-0\"></span><a class=\"reference internal\" href=\"../../topics/settings/#envvar-DJANGO_SETTINGS_MODULE\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_SETTINGS_MODULE</span></code></a> environment\nvariable, you must now explicitly initialize Django at the beginning of your\nscript with:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">django</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Otherwise, you will hit an <code class=\"docutils literal notranslate\"><span class=\"pre\">AppRegistryNotReady</span></code> exception.</p>\n</div>\n<div class=\"section\" id=\"s-wsgi-scripts\">\n<span id=\"wsgi-scripts\"></span><h4>WSGI scripts<a class=\"headerlink\" href=\"#wsgi-scripts\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Until Django 1.3, the recommended way to create a WSGI application was:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">django.core.handlers.wsgi</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">core</span><span class=\"o\">.</span><span class=\"n\">handlers</span><span class=\"o\">.</span><span class=\"n\">wsgi</span><span class=\"o\">.</span><span class=\"n\">WSGIHandler</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>In Django 1.4, support for WSGI was improved and the API changed to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.wsgi</span> <span class=\"kn\">import</span> <span class=\"n\">get_wsgi_application</span>\n\n<span class=\"n\">application</span> <span class=\"o\">=</span> <span class=\"n\">get_wsgi_application</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you\u2019re still using the former style in your WSGI script, you need to\nupgrade to the latter, or you will hit an <code class=\"docutils literal notranslate\"><span class=\"pre\">AppRegistryNotReady</span></code> exception.</p>\n</div>\n<div class=\"section\" id=\"s-app-registry-consistency\">\n<span id=\"app-registry-consistency\"></span><h4>App registry consistency<a class=\"headerlink\" href=\"#app-registry-consistency\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>It is no longer possible to have multiple installed applications with the same\nlabel. In previous versions of Django, this didn\u2019t always work correctly, but\ndidn\u2019t crash outright either.</p>\n<p>If you have two apps with the same label, you should create an\n<a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> for one of them and override its\n<a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig.label\" title=\"django.apps.AppConfig.label\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">label</span></code></a> there. You should then adjust your code\nwherever it references this application or its models with the old label.</p>\n<p>It isn\u2019t possible to import the same model twice through different paths any\nmore. As of Django 1.6, this may happen only if you\u2019re manually putting a\ndirectory and a subdirectory on <span class=\"target\" id=\"index-1\"></span><a class=\"reference external\" href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\" title=\"(in Python v3.11)\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHONPATH</span></code></a>. Refer to the section on\nthe new project layout in the <a class=\"reference internal\" href=\"../1.4/\"><span class=\"doc\">1.4 release notes</span></a> for\nmigration instructions.</p>\n<p>You should make sure that:</p>\n<ul class=\"simple\">\n<li>All models are defined in applications that are listed in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> or have an explicit\n<a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.app_label\" title=\"django.db.models.Options.app_label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">app_label</span></code></a>.</li>\n<li>Models aren\u2019t imported as a side-effect of loading their application.\nSpecifically, you shouldn\u2019t import models in the root module of an\napplication nor in the module that define its configuration class.</li>\n</ul>\n<p>Django will enforce these requirements as of version 1.9, after a deprecation\nperiod.</p>\n</div>\n<div class=\"section\" id=\"s-subclassing-appcommand\">\n<span id=\"subclassing-appcommand\"></span><h4>Subclassing AppCommand<a class=\"headerlink\" href=\"#subclassing-appcommand\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Subclasses of <a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.AppCommand\" title=\"django.core.management.AppCommand\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppCommand</span></code></a> must now implement a\n<a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.AppCommand.handle_app_config\" title=\"django.core.management.AppCommand.handle_app_config\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle_app_config()</span></code></a> method instead of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handle_app()</span></code>. This method receives an <a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a>\ninstance instead of a models module.</p>\n</div>\n<div class=\"section\" id=\"s-introspecting-applications\">\n<span id=\"introspecting-applications\"></span><h4>Introspecting applications<a class=\"headerlink\" href=\"#introspecting-applications\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Since <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> now supports application configuration classes\nin addition to application modules, you should review code that accesses this\nsetting directly and use the app registry (<a class=\"reference internal\" href=\"../../ref/applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">django.apps.apps</span></code></a>) instead.</p>\n<p>The app registry has preserved some features of the old app cache. Even though\nthe app cache was a private API, obsolete methods and arguments will be\nremoved through a standard deprecation path, with the exception of the\nfollowing changes that take effect immediately:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">get_model</span></code> raises <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#LookupError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">LookupError</span></code></a> instead of returning <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> when no\nmodel is found.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">only_installed</span></code> argument of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_model</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_models</span></code> no\nlonger exists, nor does the <code class=\"docutils literal notranslate\"><span class=\"pre\">seed_cache</span></code> argument of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_model</span></code>.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-management-commands-and-order-of-installed-apps\">\n<span id=\"management-commands-and-order-of-installed-apps\"></span><h3>Management commands and order of <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a><a class=\"headerlink\" href=\"#management-commands-and-order-of-installed-apps\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When several applications provide management commands with the same name,\nDjango loads the command from the application that comes first in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>. Previous versions loaded the command from the\napplication that came last.</p>\n<p>This brings discovery of management commands in line with other parts of\nDjango that rely on the order of <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, such as static\nfiles, templates, and translations.</p>\n</div>\n<div class=\"section\" id=\"s-validationerror-constructor-and-internal-storage\">\n<span id=\"s-validation-error-constructor-and-internal-storage\"></span><span id=\"validationerror-constructor-and-internal-storage\"></span><span id=\"validation-error-constructor-and-internal-storage\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> constructor and internal storage<a class=\"headerlink\" href=\"#validationerror-constructor-and-internal-storage\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The behavior of the <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> constructor has changed when it\nreceives a container of errors as an argument (e.g. a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> or an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ErrorList</span></code>):</p>\n<ul class=\"simple\">\n<li>It converts any strings it finds to instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code>\nbefore adding them to its internal storage.</li>\n<li>It doesn\u2019t store the given container but rather copies its content to its\nown internal storage; previously the container itself was added to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> instance and used as internal storage.</li>\n</ul>\n<p>This means that if you access the <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> internal storages, such\nas <code class=\"docutils literal notranslate\"><span class=\"pre\">error_list</span></code>; <code class=\"docutils literal notranslate\"><span class=\"pre\">error_dict</span></code>; or the return value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">update_error_dict()</span></code> you may find instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> where you\nwould have previously found strings.</p>\n<p>Also if you directly assigned the return value of <code class=\"docutils literal notranslate\"><span class=\"pre\">update_error_dict()</span></code>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">Form._errors</span></code> you may inadvertently add <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> instances where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ErrorList</span></code> instances are expected. This is a problem because unlike a\nsimple <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code>, an <code class=\"docutils literal notranslate\"><span class=\"pre\">ErrorList</span></code> knows how to handle instances of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code>.</p>\n<p>Most use-cases that warranted using these private APIs are now covered by\nthe newly introduced <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.add_error\" title=\"django.forms.Form.add_error\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.add_error()</span></code></a>\nmethod:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Old pattern:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">update_error_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># New pattern:</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_error</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you need both Django &lt;= 1.6 and 1.7 compatibility you can\u2019t use\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.add_error\" title=\"django.forms.Form.add_error\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.add_error()</span></code></a> since it\nwasn\u2019t available before Django 1.7, but you can use the following\nworkaround to convert any <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> into <code class=\"docutils literal notranslate\"><span class=\"pre\">ErrorList</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n<span class=\"k\">except</span> <span class=\"n\">ValidationError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span> <span class=\"o\">=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">update_error_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Additional code to ensure ``ErrorDict`` is exclusively</span>\n<span class=\"c1\"># composed of ``ErrorList`` instances.</span>\n<span class=\"k\">for</span> <span class=\"n\">field</span><span class=\"p\">,</span> <span class=\"n\">error_list</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_errors</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error_class</span><span class=\"p\">(</span><span class=\"n\">error_list</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-behavior-of-locmemcache-regarding-pickle-errors\">\n<span id=\"behavior-of-locmemcache-regarding-pickle-errors\"></span><h3>Behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">LocMemCache</span></code> regarding pickle errors<a class=\"headerlink\" href=\"#behavior-of-locmemcache-regarding-pickle-errors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>An inconsistency existed in previous versions of Django regarding how pickle\nerrors are handled by different cache backends.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.backends.locmem.LocMemCache</span></code> used to fail silently when\nsuch an error occurs, which is inconsistent with other backends and leads to\ncache-specific errors. This has been fixed in Django 1.7, see\n<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/21200\">#21200</a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-cache-keys-are-now-generated-from-the-request-s-absolute-url\">\n<span id=\"cache-keys-are-now-generated-from-the-request-s-absolute-url\"></span><h3>Cache keys are now generated from the request\u2019s absolute URL<a class=\"headerlink\" href=\"#cache-keys-are-now-generated-from-the-request-s-absolute-url\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previous versions of Django generated cache keys using a request\u2019s path and\nquery string but not the scheme or host. If a Django application was serving\nmultiple subdomains or domains, cache keys could collide. In Django 1.7, cache\nkeys vary by the absolute URL of the request including scheme, host, path, and\nquery string. For example, the URL portion of a cache key is now generated from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">https://www.example.com/path/to/?key=val</span></code> rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">/path/to/?key=val</span></code>.\nThe cache keys generated by Django 1.7 will be different from the keys\ngenerated by older versions of Django. After upgrading to Django 1.7, the first\nrequest to any previously cached URL will be a cache miss.</p>\n</div>\n<div class=\"section\" id=\"s-passing-none-to-manager-db-manager\">\n<span id=\"passing-none-to-manager-db-manager\"></span><h3>Passing <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager.db_manager()</span></code><a class=\"headerlink\" href=\"#passing-none-to-manager-db-manager\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In previous versions of Django, it was possible to use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">db_manager(using=None)</span></code> on a model manager instance to obtain a manager\ninstance using default routing behavior, overriding any manually specified\ndatabase routing. In Django 1.7, a value of <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> passed to db_manager will\nproduce a router that <em>retains</em> any manually assigned database routing \u2013 the\nmanager will <em>not</em> be reset. This was necessary to resolve an inconsistency in\nthe way routing information cascaded over joins. See <a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/13724\">#13724</a> for more\ndetails.</p>\n</div>\n<div class=\"section\" id=\"s-pytz-may-be-required\">\n<span id=\"pytz-may-be-required\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pytz</span></code> may be required<a class=\"headerlink\" href=\"#pytz-may-be-required\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If your project handles datetimes before 1970 or after 2037 and Django raises\na <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> when encountering them, you will have to install\n<a class=\"reference external\" href=\"https://pypi.org/project/pytz/\">pytz</a>. You may be affected by this problem if you use Django\u2019s time\nzone-related date formats or <a class=\"reference internal\" href=\"../../ref/contrib/syndication/#module-django.contrib.syndication\" title=\"django.contrib.syndication: A framework for generating syndication feeds, in RSS and Atom, quite easily.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-remove-and-clear-methods-of-related-managers\">\n<span id=\"remove-and-clear-methods-of-related-managers\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> methods of related managers<a class=\"headerlink\" href=\"#remove-and-clear-methods-of-related-managers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> methods of the related managers created by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> suffered from a\nnumber of issues. Some operations ran multiple data modifying queries without\nwrapping them in a transaction, and some operations didn\u2019t respect default\nfiltering when it was present (i.e. when the default manager on the related\nmodel implemented a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code>).</p>\n<p>Fixing the issues introduced some backward incompatible changes:</p>\n<ul class=\"simple\">\n<li>The default implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> for <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> related managers\nchanged from a series of <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code> calls to a single\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code> call. The change means that <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post_save</span></code> signals aren\u2019t sent anymore. You can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk=False</span></code>\nkeyword argument to revert to the previous behavior.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> methods for <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code> related\nmanagers now perform bulk delete. The <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.delete()</span></code> method isn\u2019t called\non each instance anymore. You can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk=False</span></code> keyword argument to\nrevert to the previous behavior.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> methods for <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> related\nmanagers perform nested queries when filtering is involved, which may or\nmay not be an issue depending on your database and your data itself.\nSee <a class=\"reference internal\" href=\"../../ref/models/querysets/#nested-queries-performance\"><span class=\"std std-ref\">this note</span></a> for more details.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-admin-login-redirection-strategy\">\n<span id=\"admin-login-redirection-strategy\"></span><h3>Admin login redirection strategy<a class=\"headerlink\" href=\"#admin-login-redirection-strategy\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Historically, the Django admin site passed the request from an unauthorized or\nunauthenticated user directly to the login view, without HTTP redirection. In\nDjango 1.7, this behavior changed to conform to a more traditional workflow\nwhere any unauthorized request to an admin page will be redirected (by HTTP\nstatus code 302) to the login page, with the <code class=\"docutils literal notranslate\"><span class=\"pre\">next</span></code> parameter set to the\nreferring path. The user will be redirected there after a successful login.</p>\n<p>Note also that the admin login form has been updated to not contain the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">this_is_the_login_form</span></code> field (now unused) and the <code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> code\nhas been set to the more regular <code class=\"docutils literal notranslate\"><span class=\"pre\">invalid_login</span></code> key.</p>\n</div>\n<div class=\"section\" id=\"s-select-for-update-requires-a-transaction\">\n<span id=\"select-for-update-requires-a-transaction\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> requires a transaction<a class=\"headerlink\" href=\"#select-for-update-requires-a-transaction\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Historically, queries that use\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_for_update\" title=\"django.db.models.query.QuerySet.select_for_update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code></a> could be\nexecuted in autocommit mode, outside of a transaction. Before Django\n1.6, Django\u2019s automatic transactions mode allowed this to be used to\nlock records until the next write operation. Django 1.6 introduced\ndatabase-level autocommit; since then, execution in such a context\nvoids the effect of <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code>. It is, therefore, assumed\nnow to be an error and raises an exception.</p>\n<p>This change was made because such errors can be caused by including an\napp which expects global transactions (e.g. <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-ATOMIC_REQUESTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ATOMIC_REQUESTS</span></code></a> set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>), or Django\u2019s old autocommit\nbehavior, in a project which runs without them; and further, such\nerrors may manifest as data-corruption bugs. It was also made in\nDjango 1.6.3.</p>\n<p>This change may cause test failures if you use <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code>\nin a test class which is a subclass of\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> rather than\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-contrib-middleware-removed-from-default-middleware-classes\">\n<span id=\"contrib-middleware-removed-from-default-middleware-classes\"></span><h3>Contrib middleware removed from default <code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code><a class=\"headerlink\" href=\"#contrib-middleware-removed-from-default-middleware-classes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"#app-loading-refactor-17-release-note\"><span class=\"std std-ref\">app-loading refactor</span></a>\ndeprecated using models from apps which are not part of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting. This exposed an incompatibility between\nthe default <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> and <code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code> in the\nglobal defaults (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.global_settings</span></code>). To bring these settings in\nsync and prevent deprecation warnings when doing things like testing reusable\napps with minimal settings,\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.contrib.sessions.middleware.SessionMiddleware\" title=\"django.contrib.sessions.middleware.SessionMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SessionMiddleware</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.contrib.auth.middleware.AuthenticationMiddleware\" title=\"django.contrib.auth.middleware.AuthenticationMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationMiddleware</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.contrib.messages.middleware.MessageMiddleware\" title=\"django.contrib.messages.middleware.MessageMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MessageMiddleware</span></code></a> were removed\nfrom the defaults. These classes will still be included in the default settings\ngenerated by <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-startproject\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startproject</span></code></a>. Most projects will not be affected by\nthis change but if you were not previously declaring the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code> in your project settings and relying on the\nglobal default you should ensure that the new defaults are in line with your\nproject\u2019s needs. You should also check for any code that accesses\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.global_settings.MIDDLEWARE_CLASSES</span></code> directly.</p>\n</div>\n<div class=\"section\" id=\"s-miscellaneous\">\n<span id=\"miscellaneous\"></span><h3>Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.new_file\" title=\"django.core.files.uploadhandler.FileUploadHandler.new_file\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.core.files.uploadhandler.FileUploadHandler.new_file()</span></code></a>\nmethod is now passed an additional <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type_extra</span></code> parameter. If you\nhave a custom <a class=\"reference internal\" href=\"../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler\" title=\"django.core.files.uploadhandler.FileUploadHandler\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileUploadHandler</span></code></a>\nthat implements <code class=\"docutils literal notranslate\"><span class=\"pre\">new_file()</span></code>, be sure it accepts this new parameter.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.models.BaseModelFormSet\" title=\"django.forms.models.BaseModelFormSet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelFormSet</span></code></a>s no longer\ndelete instances when <code class=\"docutils literal notranslate\"><span class=\"pre\">save(commit=False)</span></code> is called. See\n<a class=\"reference internal\" href=\"../../topics/forms/formsets/#django.forms.formsets.BaseFormSet.can_delete\" title=\"django.forms.formsets.BaseFormSet.can_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">can_delete</span></code></a> for instructions on how\nto manually delete objects from deleted forms.</p>\n</li>\n<li><p class=\"first\">Loading empty fixtures emits a <code class=\"docutils literal notranslate\"><span class=\"pre\">RuntimeWarning</span></code> rather than raising\n<a class=\"reference internal\" href=\"../../howto/custom-management-commands/#django.core.management.CommandError\" title=\"django.core.management.CommandError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">CommandError</span></code></a>.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.views.serve\" title=\"django.contrib.staticfiles.views.serve\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles.views.serve()</span></code></a> will now raise an\n<a class=\"reference internal\" href=\"../../topics/http/views/#django.http.Http404\" title=\"django.http.Http404\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">Http404</span></code></a> exception instead of\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ImproperlyConfigured\" title=\"django.core.exceptions.ImproperlyConfigured\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code></a> when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a>\nis <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. This change removes the need to conditionally add the view to\nyour root URLconf, which in turn makes it safe to reverse by name. It also\nremoves the ability for visitors to generate spurious HTTP 500 errors by\nrequesting static files that don\u2019t exist or haven\u2019t been collected yet.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.__eq__\" title=\"django.db.models.Model.__eq__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.db.models.Model.__eq__()</span></code></a> method is now defined in a\nway where instances of a proxy model and its base model are considered\nequal when primary keys match. Previously only instances of exact same\nclass were considered equal on primary key match.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.__eq__\" title=\"django.db.models.Model.__eq__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.db.models.Model.__eq__()</span></code></a> method has changed such that\ntwo <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> instances without primary key values won\u2019t be considered\nequal (unless they are the same instance).</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.__hash__\" title=\"django.db.models.Model.__hash__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.db.models.Model.__hash__()</span></code></a> method will now raise <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code>\nwhen called on an instance without a primary key value. This is done to\navoid mutable <code class=\"docutils literal notranslate\"><span class=\"pre\">__hash__</span></code> values in containers.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> columns in SQLite databases will now be\ncreated using the <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTOINCREMENT</span></code> option, which guarantees monotonic\nincrements. This will cause primary key numbering behavior to change on\nSQLite, becoming consistent with most other SQL databases. This will only\napply to newly created tables. If you have a database created with an older\nversion of Django, you will need to migrate it to take advantage of this\nfeature. For example, you could do the following:</p>\n<ol class=\"arabic simple\">\n<li>Use <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> to save your data.</li>\n<li>Rename the existing database file (keep it as a backup).</li>\n<li>Run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> to create the updated schema.</li>\n<li>Use <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-loaddata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">loaddata</span></code></a> to import the fixtures you exported in (1).</li>\n</ol>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.models.AbstractUser</span></code> no longer defines a\n<a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.get_absolute_url\" title=\"django.db.models.Model.get_absolute_url\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code></a> method. The old definition\nreturned  <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/users/%s/&quot;</span> <span class=\"pre\">%</span> <span class=\"pre\">urlquote(self.username)</span></code> which was arbitrary\nsince applications may or may not define such a url in <code class=\"docutils literal notranslate\"><span class=\"pre\">urlpatterns</span></code>.\nDefine a <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> method on your own custom user object or use\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ABSOLUTE_URL_OVERRIDES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ABSOLUTE_URL_OVERRIDES</span></code></a> if you want a URL for your user.</p>\n</li>\n<li><p class=\"first\">The static asset-serving functionality of the\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.LiveServerTestCase</span></code></a> class has been simplified: Now it\u2019s\nonly able to serve content already present in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a> when\ntests are run. The ability to transparently serve all the static assets\n(similarly to what one gets with <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code></a> at\ndevelopment-time) has been moved to a new class that lives in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> application (the one actually in charge of such feature):\n<a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.testing.StaticLiveServerTestCase\" title=\"django.contrib.staticfiles.testing.StaticLiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles.testing.StaticLiveServerTestCase</span></code></a>. In other\nwords, <code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code> itself is less powerful but at the same time\nhas less magic.</p>\n<p>Rationale behind this is removal of dependency of non-contrib code on\ncontrib applications.</p>\n</li>\n<li><p class=\"first\">The old cache URI syntax (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;locmem://&quot;</span></code>) is no longer supported. It\nstill worked, even though it was not documented or officially supported. If\nyou\u2019re still using it, please update to the current <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> syntax.</p>\n</li>\n<li><p class=\"first\">The default ordering of <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> fields in case of inheritance has changed to\nfollow normal Python MRO. Fields are now discovered by iterating through the\nMRO in reverse with the topmost class coming last. This only affects you if\nyou relied on the default field ordering while having fields defined on both\nthe current class <em>and</em> on a parent <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code>.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">required</span></code> argument of\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.SelectDateWidget\" title=\"django.forms.SelectDateWidget\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectDateWidget</span></code></a> has been removed.\nThis widget now respects the form field\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">is_required</span></code> attribute like\nother widgets.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Widget.is_hidden</span></code> is now a read-only property, getting its value by\nintrospecting the presence of <code class=\"docutils literal notranslate\"><span class=\"pre\">input_type</span> <span class=\"pre\">==</span> <span class=\"pre\">'hidden'</span></code>.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> now chains in the\nsame way as other similar calls like <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code>. That is,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related('foo',</span> <span class=\"pre\">'bar')</span></code> is equivalent to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">select_related('foo').select_related('bar')</span></code>. Previously the latter would\nhave been equivalent to <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related('bar')</span></code>.</p>\n</li>\n<li><p class=\"first\">GeoDjango dropped support for GEOS &lt; 3.1.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">init_connection_state</span></code> method of database backends now executes in\nautocommit mode (unless you set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-AUTOCOMMIT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTOCOMMIT</span></code></a>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>). If you maintain a custom database backend, you should check\nthat method.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.BaseDatabaseFeatures.allows_primary_key_0</span></code>\nattribute has been renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">allows_auto_pk_0</span></code> to better describe it.\nIt\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> for all database backends included with Django except MySQL\nwhich does allow primary keys with value 0. It only forbids <em>autoincrement</em>\nprimary keys with value 0.</p>\n</li>\n<li><p class=\"first\">Shadowing model fields defined in a parent model has been forbidden as this\ncreates ambiguity in the expected model behavior. In addition, clashing\nfields in the model inheritance hierarchy result in a system check error.\nFor example, if you use multi-inheritance, you need to define custom primary\nkey fields on parent models, otherwise the default <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> fields will clash.\nSee <a class=\"reference internal\" href=\"../../topics/db/models/#model-multiple-inheritance-topic\"><span class=\"std std-ref\">Multiple inheritance</span></a> for details.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.translation.parse_accept_lang_header()</span></code> now returns\nlowercase locales, instead of the case as it was provided. As locales should\nbe treated case-insensitive this allows us to speed up locale detection.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.translation.get_language_from_path()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.translation.trans_real.get_supported_language_variant()</span></code>\nnow no longer have a <code class=\"docutils literal notranslate\"><span class=\"pre\">supported</span></code> argument.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">shortcut</span></code> view in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.views</span></code> now supports\nprotocol-relative URLs (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">//example.com</span></code>).</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericRelation\" title=\"django.contrib.contenttypes.fields.GenericRelation\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericRelation</span></code></a> now supports an\noptional <code class=\"docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code> argument. Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code> adds\na relation from the related object back to the content type for filtering,\nordering and other query operations.</p>\n</li>\n<li><p class=\"first\">When running tests on PostgreSQL, the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a> will need read access\nto the built-in <code class=\"docutils literal notranslate\"><span class=\"pre\">postgres</span></code> database. This is in lieu of the previous\nbehavior of connecting to the actual non-test database.</p>\n</li>\n<li><p class=\"first\">As part of the <a class=\"reference internal\" href=\"../../ref/checks/\"><span class=\"doc\">System check framework</span></a>, <a class=\"reference internal\" href=\"../../topics/checks/#field-checking\"><span class=\"std std-ref\">fields,\nmodels, and model managers</span></a> all implement a <code class=\"docutils literal notranslate\"><span class=\"pre\">check()</span></code>\nmethod that is registered with the check framework. If you have an existing\nmethod called <code class=\"docutils literal notranslate\"><span class=\"pre\">check()</span></code> on one of these objects, you will need to rename it.</p>\n</li>\n<li><p class=\"first\">As noted above in the \u201cCache\u201d section of \u201cMinor Features\u201d, defining the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES-TIMEOUT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIMEOUT</span></code></a> argument of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> setting as <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> will set the cache keys as\n\u201cnon-expiring\u201d. Previously, with the memcache backend, a\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CACHES-TIMEOUT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIMEOUT</span></code></a> of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> would set non-expiring keys,\nbut this was inconsistent with the set-and-expire (i.e. no caching) behavior\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">set(&quot;key&quot;,</span> <span class=\"pre\">&quot;value&quot;,</span> <span class=\"pre\">timeout=0)</span></code>. If you want non-expiring keys,\nplease update your settings to use <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code> as the latter\nnow designates set-and-expire in the settings as well.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">sql*</span></code> management commands now respect the <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate()</span></code> method\nof <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE_ROUTERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASE_ROUTERS</span></code></a>. If you have models synced to non-default\ndatabases, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">--database</span></code> flag to get SQL for those models\n(previously they would always be included in the output).</p>\n</li>\n<li><p class=\"first\">Decoding the query string from URLs now falls back to the ISO-8859-1 encoding\nwhen the input is not valid UTF-8.</p>\n</li>\n<li><p class=\"first\">With the addition of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.middleware.SessionAuthenticationMiddleware</span></code> to\nthe default project template (pre-1.7.2 only), a database must be created\nbefore accessing a page using <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a>.</p>\n</li>\n<li><p class=\"first\">The addition of the <code class=\"docutils literal notranslate\"><span class=\"pre\">schemes</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">URLValidator</span></code> will appear\nas a backwards-incompatible change if you were previously using a custom\nregular expression to validate schemes. Any scheme not listed in <code class=\"docutils literal notranslate\"><span class=\"pre\">schemes</span></code>\nwill fail validation, even if the regular expression matches the given URL.</p>\n</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-7\">\n<span id=\"s-deprecated-features-1-7\"></span><span id=\"features-deprecated-in-1-7\"></span><span id=\"deprecated-features-1-7\"></span><h2>Features deprecated in 1.7<a class=\"headerlink\" href=\"#features-deprecated-in-1-7\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-django-core-cache-get-cache\">\n<span id=\"django-core-cache-get-cache\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.get_cache</span></code><a class=\"headerlink\" href=\"#django-core-cache-get-cache\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.get_cache</span></code> has been supplanted by\n<a class=\"reference internal\" href=\"../../topics/cache/#django.core.cache.caches\" title=\"django.core.cache.caches\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">django.core.cache.caches</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-dictconfig-django-utils-importlib\">\n<span id=\"django-utils-dictconfig-django-utils-importlib\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.dictconfig</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.importlib</span></code><a class=\"headerlink\" href=\"#django-utils-dictconfig-django-utils-importlib\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.dictconfig</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.importlib</span></code> were copies of\nrespectively <a class=\"reference external\" href=\"https://docs.python.org/3/library/logging.config.html#module-logging.config\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">logging.config</span></code></a> and <a class=\"reference external\" href=\"https://docs.python.org/3/library/importlib.html#module-importlib\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">importlib</span></code></a> provided for Python\nversions prior to 2.7. They have been deprecated.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-module-loading-import-by-path\">\n<span id=\"django-utils-module-loading-import-by-path\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.module_loading.import_by_path</span></code><a class=\"headerlink\" href=\"#django-utils-module-loading-import-by-path\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The current <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.module_loading.import_by_path</span></code> function\ncatches <code class=\"docutils literal notranslate\"><span class=\"pre\">AttributeError</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">ImportError</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code> exceptions,\nand re-raises <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.ImproperlyConfigured\" title=\"django.core.exceptions.ImproperlyConfigured\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code></a>. Such\nexception masking makes it needlessly hard to diagnose circular import\nproblems, because it makes it look like the problem comes from inside Django.\nIt has been deprecated in favor of\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.module_loading.import_string\" title=\"django.utils.module_loading.import_string\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">import_string()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-tzinfo\">\n<span id=\"django-utils-tzinfo\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.tzinfo</span></code><a class=\"headerlink\" href=\"#django-utils-tzinfo\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.tzinfo</span></code> provided two <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.tzinfo\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">tzinfo</span></code></a> subclasses,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LocalTimezone</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">FixedOffset</span></code>. They\u2019ve been deprecated in favor of\nmore correct alternatives provided by <a class=\"reference internal\" href=\"../../ref/utils/#module-django.utils.timezone\" title=\"django.utils.timezone: Timezone support.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.utils.timezone</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.timezone.get_default_timezone\" title=\"django.utils.timezone.get_default_timezone\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.timezone.get_default_timezone()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.timezone.get_fixed_timezone\" title=\"django.utils.timezone.get_fixed_timezone\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.timezone.get_fixed_timezone()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-unittest\">\n<span id=\"django-utils-unittest\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.unittest</span></code><a class=\"headerlink\" href=\"#django-utils-unittest\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.unittest</span></code> provided uniform access to the <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> library\non all Python versions. Since <code class=\"docutils literal notranslate\"><span class=\"pre\">unittest2</span></code> became the standard library\u2019s\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a> module in Python 2.7, and Django 1.7 drops support for older\nPython versions, this module isn\u2019t useful anymore. It has been deprecated. Use\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/unittest.html#module-unittest\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">unittest</span></code></a> instead.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-datastructures-sorteddict\">\n<span id=\"django-utils-datastructures-sorteddict\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.SortedDict</span></code><a class=\"headerlink\" href=\"#django-utils-datastructures-sorteddict\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As <a class=\"reference external\" href=\"https://docs.python.org/3/library/collections.html#collections.OrderedDict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OrderedDict</span></code></a> was added to the standard library in\nPython 2.7, <code class=\"docutils literal notranslate\"><span class=\"pre\">SortedDict</span></code> is no longer needed and has been deprecated.</p>\n<p>The two additional, deprecated methods provided by <code class=\"docutils literal notranslate\"><span class=\"pre\">SortedDict</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">insert()</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">value_for_index()</span></code>) have been removed. If you relied on these methods to\nalter structures like form fields, you should now treat these <code class=\"docutils literal notranslate\"><span class=\"pre\">OrderedDict</span></code>s\nas immutable objects and override them to change their content.</p>\n<p>For example, you might want to override <code class=\"docutils literal notranslate\"><span class=\"pre\">MyFormClass.base_fields</span></code> (although\nthis attribute isn\u2019t considered a public API) to change the ordering of fields\nfor all <code class=\"docutils literal notranslate\"><span class=\"pre\">MyFormClass</span></code> instances; or similarly, you could override\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.fields</span></code> from inside <code class=\"docutils literal notranslate\"><span class=\"pre\">MyFormClass.__init__()</span></code>, to change the fields\nfor a particular form instance. For example (from Django itself):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">PasswordChangeForm</span><span class=\"o\">.</span><span class=\"n\">base_fields</span> <span class=\"o\">=</span> <span class=\"n\">OrderedDict</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">PasswordChangeForm</span><span class=\"o\">.</span><span class=\"n\">base_fields</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">])</span>\n    <span class=\"k\">for</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;old_password&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;new_password1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;new_password2&quot;</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-sql-location-for-models-package\">\n<span id=\"custom-sql-location-for-models-package\"></span><h3>Custom SQL location for models package<a class=\"headerlink\" href=\"#custom-sql-location-for-models-package\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Previously, if models were organized in a package (<code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/models/</span></code>) rather\nthan simply <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/models.py</span></code>, Django would look for initial SQL data in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/models/sql/</span></code>. This bug has been fixed so that Django\nwill search <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/sql/</span></code> as documented. After this issue was fixed, migrations\nwere added which deprecates initial SQL data. Thus, while this change still\nexists, the deprecation is irrelevant as the entire feature will be removed in\nDjango 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-reorganization-of-django-contrib-sites\">\n<span id=\"reorganization-of-django-contrib-sites\"></span><h3>Reorganization of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code><a class=\"headerlink\" href=\"#reorganization-of-django-contrib-sites\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code> provides reduced functionality when it isn\u2019t in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>. The app-loading refactor adds some constraints in\nthat situation. As a consequence, two objects were moved, and the old\nlocations are deprecated:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/sites/#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> now lives in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.requests</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/sites/#django.contrib.sites.shortcuts.get_current_site\" title=\"django.contrib.sites.shortcuts.get_current_site\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code></a> now lives in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.shortcuts</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-declared-fieldsets-attribute-on-modeladmin\">\n<span id=\"declared-fieldsets-attribute-on-modeladmin\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">declared_fieldsets</span></code> attribute on <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code><a class=\"headerlink\" href=\"#declared-fieldsets-attribute-on-modeladmin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.declared_fieldsets</span></code> has been deprecated. Despite being a private\nAPI, it will go through a regular deprecation path. This attribute was mostly\nused by methods that bypassed <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_fieldsets()</span></code> but this was\nconsidered a bug and has been addressed.</p>\n</div>\n<div class=\"section\" id=\"s-reorganization-of-django-contrib-contenttypes\">\n<span id=\"reorganization-of-django-contrib-contenttypes\"></span><h3>Reorganization of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes</span></code><a class=\"headerlink\" href=\"#reorganization-of-django-contrib-contenttypes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Since <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.generic</span></code> defined both admin and model\nrelated objects, an import of this module could trigger unexpected side effects.\nAs a consequence, its contents were split into <a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes\" title=\"django.contrib.contenttypes: Provides generic interface to installed models.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">contenttypes</span></code></a>\nsubmodules and the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.generic</span></code> module is deprecated:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericForeignKey\" title=\"django.contrib.contenttypes.fields.GenericForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.fields.GenericRelation\" title=\"django.contrib.contenttypes.fields.GenericRelation\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericRelation</span></code></a> now live in\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes.fields\" title=\"django.contrib.contenttypes.fields\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">fields</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.forms.BaseGenericInlineFormSet\" title=\"django.contrib.contenttypes.forms.BaseGenericInlineFormSet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseGenericInlineFormSet</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.forms.generic_inlineformset_factory\" title=\"django.contrib.contenttypes.forms.generic_inlineformset_factory\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">generic_inlineformset_factory()</span></code></a> now\nlive in <a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes.forms\" title=\"django.contrib.contenttypes.forms\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">forms</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.admin.GenericInlineModelAdmin\" title=\"django.contrib.contenttypes.admin.GenericInlineModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericInlineModelAdmin</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.admin.GenericStackedInline\" title=\"django.contrib.contenttypes.admin.GenericStackedInline\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericStackedInline</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#django.contrib.contenttypes.admin.GenericTabularInline\" title=\"django.contrib.contenttypes.admin.GenericTabularInline\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GenericTabularInline</span></code></a> now live in\n<a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes.admin\" title=\"django.contrib.contenttypes.admin\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">admin</span></code></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-syncdb\">\n<span id=\"syncdb\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code><a class=\"headerlink\" href=\"#syncdb\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> command has been deprecated in favor of the new <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>\ncommand. <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> takes the same arguments as <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> used to plus a few\nmore, so it\u2019s safe to just change the name you\u2019re calling and nothing else.</p>\n</div>\n<div class=\"section\" id=\"s-util-modules-renamed-to-utils\">\n<span id=\"util-modules-renamed-to-utils\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">util</span></code> modules renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code><a class=\"headerlink\" href=\"#util-modules-renamed-to-utils\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The following instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">util.py</span></code> in the Django codebase have been renamed\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">utils.py</span></code> in an effort to unify all util and utils references:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.util</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends.util</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.util</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.util</span></code></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-get-formsets-method-on-modeladmin\">\n<span id=\"get-formsets-method-on-modeladmin\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">get_formsets</span></code> method on <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code><a class=\"headerlink\" href=\"#get-formsets-method-on-modeladmin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_formsets</span></code> has been deprecated in favor of the new\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_formsets_with_inlines\" title=\"django.contrib.admin.ModelAdmin.get_formsets_with_inlines\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_formsets_with_inlines()</span></code></a>, in order to\nbetter handle the case of selectively showing inlines on a <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-ipaddressfield\">\n<span id=\"ipaddressfield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">IPAddressField</span></code><a class=\"headerlink\" href=\"#ipaddressfield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.IPAddressField</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.IPAddressField</span></code>\nfields have been deprecated in favor of\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.GenericIPAddressField\" title=\"django.db.models.GenericIPAddressField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.GenericIPAddressField</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.GenericIPAddressField\" title=\"django.forms.GenericIPAddressField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.forms.GenericIPAddressField</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-basememcachedcache-get-memcache-timeout-method\">\n<span id=\"basememcachedcache-get-memcache-timeout-method\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BaseMemcachedCache._get_memcache_timeout</span></code> method<a class=\"headerlink\" href=\"#basememcachedcache-get-memcache-timeout-method\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseMemcachedCache._get_memcache_timeout()</span></code> method has been renamed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_backend_timeout()</span></code>. Despite being a private API, it will go through the\nnormal deprecation.</p>\n</div>\n<div class=\"section\" id=\"s-natural-key-serialization-options\">\n<span id=\"natural-key-serialization-options\"></span><h3>Natural key serialization options<a class=\"headerlink\" href=\"#natural-key-serialization-options\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--natural</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">-n</span></code> options for <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> have been\ndeprecated. Use <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-dumpdata-natural-foreign\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">dumpdata</span> <span class=\"pre\">--natural-foreign</span></code></a> instead.</p>\n<p>Similarly, the <code class=\"docutils literal notranslate\"><span class=\"pre\">use_natural_keys</span></code> argument for <code class=\"docutils literal notranslate\"><span class=\"pre\">serializers.serialize()</span></code>\nhas been deprecated. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">use_natural_foreign_keys</span></code> instead.</p>\n</div>\n<div class=\"section\" id=\"s-merging-of-post-and-get-arguments-into-wsgirequest-request\">\n<span id=\"merging-of-post-and-get-arguments-into-wsgirequest-request\"></span><h3>Merging of <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> arguments into <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest.REQUEST</span></code><a class=\"headerlink\" href=\"#merging-of-post-and-get-arguments-into-wsgirequest-request\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It was already strongly suggested that you use <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> instead of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">REQUEST</span></code>, because the former are more explicit. The property <code class=\"docutils literal notranslate\"><span class=\"pre\">REQUEST</span></code> is\ndeprecated and will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-datastructures-mergedict-class\">\n<span id=\"django-utils-datastructures-mergedict-class\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.MergeDict</span></code> class<a class=\"headerlink\" href=\"#django-utils-datastructures-mergedict-class\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">MergeDict</span></code> exists primarily to support merging <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>\narguments into a <code class=\"docutils literal notranslate\"><span class=\"pre\">REQUEST</span></code> property on <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest</span></code>. To merge\ndictionaries, use <code class=\"docutils literal notranslate\"><span class=\"pre\">dict.update()</span></code> instead. The class <code class=\"docutils literal notranslate\"><span class=\"pre\">MergeDict</span></code> is\ndeprecated and will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-language-codes-zh-cn-zh-tw-and-fy-nl\">\n<span id=\"language-codes-zh-cn-zh-tw-and-fy-nl\"></span><h3>Language codes <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-cn</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-tw</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">fy-nl</span></code><a class=\"headerlink\" href=\"#language-codes-zh-cn-zh-tw-and-fy-nl\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The currently used language codes for Simplified Chinese <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-cn</span></code>,\nTraditional Chinese <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-tw</span></code> and (Western) Frysian <code class=\"docutils literal notranslate\"><span class=\"pre\">fy-nl</span></code> are deprecated\nand should be replaced by the language codes <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-hans</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-hant</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">fy</span></code> respectively. If you use these language codes, you should rename the\nlocale directories and update your settings to reflect these changes. The\ndeprecated language codes will be removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-functional-memoize-function\">\n<span id=\"django-utils-functional-memoize-function\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.functional.memoize</span></code> function<a class=\"headerlink\" href=\"#django-utils-functional-memoize-function\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The function <code class=\"docutils literal notranslate\"><span class=\"pre\">memoize</span></code> is deprecated and should be replaced by the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">functools.lru_cache</span></code> decorator (available from Python 3.2 onward).</p>\n<p>Django ships a backport of this decorator for older Python versions and it\u2019s\navailable at <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.lru_cache.lru_cache</span></code>. The deprecated function will\nbe removed in Django 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-geo-sitemaps\">\n<span id=\"geo-sitemaps\"></span><h3>Geo Sitemaps<a class=\"headerlink\" href=\"#geo-sitemaps\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Google has retired support for the Geo Sitemaps format. Hence Django support\nfor Geo Sitemaps is deprecated and will be removed in Django 1.8.</p>\n</div>\n<div class=\"section\" id=\"s-passing-callable-arguments-to-queryset-methods\">\n<span id=\"passing-callable-arguments-to-queryset-methods\"></span><h3>Passing callable arguments to queryset methods<a class=\"headerlink\" href=\"#passing-callable-arguments-to-queryset-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Callable arguments for querysets were an undocumented feature that was\nunreliable. It\u2019s been deprecated and will be removed in Django 1.9.</p>\n<p>Callable arguments were evaluated when a queryset was constructed rather than\nwhen it was evaluated, thus this feature didn\u2019t offer any benefit compared to\nevaluating arguments before passing them to queryset and created confusion that\nthe arguments may have been evaluated at query time.</p>\n</div>\n<div class=\"section\" id=\"s-admin-for-setting\">\n<span id=\"admin-for-setting\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ADMIN_FOR</span></code> setting<a class=\"headerlink\" href=\"#admin-for-setting\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ADMIN_FOR</span></code> feature, part of the admindocs, has been removed. You can\nremove the setting from your configuration at your convenience.</p>\n</div>\n<div class=\"section\" id=\"s-splitdatetimewidget-with-datetimefield\">\n<span id=\"splitdatetimewidget-with-datetimefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SplitDateTimeWidget</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code><a class=\"headerlink\" href=\"#splitdatetimewidget-with-datetimefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SplitDateTimeWidget</span></code> support in <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.DateTimeField\" title=\"django.forms.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> is\ndeprecated, use <code class=\"docutils literal notranslate\"><span class=\"pre\">SplitDateTimeWidget</span></code> with\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.SplitDateTimeField\" title=\"django.forms.SplitDateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SplitDateTimeField</span></code></a> instead.</p>\n</div>\n<div class=\"section\" id=\"s-validate\">\n<span id=\"validate\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">validate</span></code><a class=\"headerlink\" href=\"#validate\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">validate</span></code> management command is deprecated in favor of the\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-check\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">check</span></code></a> command.</p>\n</div>\n<div class=\"section\" id=\"s-django-core-management-basecommand\">\n<span id=\"django-core-management-basecommand\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.management.BaseCommand</span></code><a class=\"headerlink\" href=\"#django-core-management-basecommand\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">requires_model_validation</span></code> is deprecated in favor of a new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">requires_system_checks</span></code> flag. If the latter flag is missing, then the\nvalue of the former flag is used. Defining both <code class=\"docutils literal notranslate\"><span class=\"pre\">requires_system_checks</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">requires_model_validation</span></code> results in an error.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">check()</span></code> method has replaced the old <code class=\"docutils literal notranslate\"><span class=\"pre\">validate()</span></code> method.</p>\n</div>\n<div class=\"section\" id=\"s-modeladmin-validators\">\n<span id=\"modeladmin-validators\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> validators<a class=\"headerlink\" href=\"#modeladmin-validators\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.validator_class</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">default_validator_class</span></code> attributes\nare deprecated in favor of the new <code class=\"docutils literal notranslate\"><span class=\"pre\">checks_class</span></code> attribute.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.validate()</span></code> method is deprecated in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.check()</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.validation</span></code> module is deprecated.</p>\n</div>\n<div class=\"section\" id=\"s-django-db-backends-databasevalidation-validate-field\">\n<span id=\"django-db-backends-databasevalidation-validate-field\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.DatabaseValidation.validate_field</span></code><a class=\"headerlink\" href=\"#django-db-backends-databasevalidation-validate-field\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This method is deprecated in favor of a new <code class=\"docutils literal notranslate\"><span class=\"pre\">check_field</span></code> method.\nThe functionality required by <code class=\"docutils literal notranslate\"><span class=\"pre\">check_field()</span></code> is the same as that provided\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_field()</span></code>, but the output format is different. Third-party database\nbackends needing this functionality should provide an implementation of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">check_field()</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-loading-ssi-and-url-template-tags-from-future-library\">\n<span id=\"loading-ssi-and-url-template-tags-from-future-library\"></span><h3>Loading <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> template tags from <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> library<a class=\"headerlink\" href=\"#loading-ssi-and-url-template-tags-from-future-library\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.3 introduced <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">ssi</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">url</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> syntax for forward compatibility of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> and <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-url\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">url</span></code></a> template tags. This syntax is now deprecated and\nwill be removed in Django 1.9. You can simply remove the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">...</span> <span class=\"pre\">from</span> <span class=\"pre\">future</span> <span class=\"pre\">%}</span></code> tags.</p>\n</div>\n<div class=\"section\" id=\"s-django-utils-text-javascript-quote\">\n<span id=\"django-utils-text-javascript-quote\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.text.javascript_quote</span></code><a class=\"headerlink\" href=\"#django-utils-text-javascript-quote\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">javascript_quote()</span></code> was an undocumented function present in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.text</span></code>.\nIt was used internally in the <code class=\"docutils literal notranslate\"><span class=\"pre\">javascript_catalog()</span></code> view\nwhose implementation was changed to make use of <code class=\"docutils literal notranslate\"><span class=\"pre\">json.dumps()</span></code> instead.\nIf you were relying on this function to provide safe output from untrusted\nstrings, you should use <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.escapejs</span></code> or the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-escapejs\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">escapejs</span></code></a> template filter.\nIf all you need is to generate valid JavaScript strings, you can simply use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">json.dumps()</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-fix-ampersands-utils-method-and-template-filter\">\n<span id=\"fix-ampersands-utils-method-and-template-filter\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code> utils method and template filter<a class=\"headerlink\" href=\"#fix-ampersands-utils-method-and-template-filter\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.fix_ampersands</span></code> method and the <code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code>\ntemplate filter are deprecated, as the escaping of ampersands is already taken care\nof by Django\u2019s standard HTML escaping features. Combining this with <code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code>\nwould either result in double escaping, or, if the output is assumed to be safe,\na risk of introducing XSS vulnerabilities. Along with <code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.clean_html</span></code> is deprecated, an undocumented function that calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code>.\nAs this is an accelerated deprecation, <code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clean_html</span></code>\nwill be removed in Django 1.8.</p>\n</div>\n<div class=\"section\" id=\"s-reorganization-of-database-test-settings\">\n<span id=\"reorganization-of-database-test-settings\"></span><h3>Reorganization of database test settings<a class=\"headerlink\" href=\"#reorganization-of-database-test-settings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All database settings with a <code class=\"docutils literal notranslate\"><span class=\"pre\">TEST_</span></code> prefix have been deprecated in favor of\nentries in a <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-TEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST</span></code></a> dictionary in the database\nsettings. The old settings will be supported until Django 1.9. For backwards\ncompatibility with older versions of Django, you can define both versions of\nthe settings as long as they match.</p>\n</div>\n<div class=\"section\" id=\"s-fastcgi-support\">\n<span id=\"fastcgi-support\"></span><h3>FastCGI support<a class=\"headerlink\" href=\"#fastcgi-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>FastCGI support via the <code class=\"docutils literal notranslate\"><span class=\"pre\">runfcgi</span></code> management command will be removed in\nDjango 1.9. Please deploy your project using WSGI.</p>\n</div>\n<div class=\"section\" id=\"s-moved-objects-in-contrib-sites\">\n<span id=\"moved-objects-in-contrib-sites\"></span><h3>Moved objects in <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.sites</span></code><a class=\"headerlink\" href=\"#moved-objects-in-contrib-sites\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Following the app-loading refactor, two objects in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.models</span></code> needed to be moved because they must be\navailable without importing <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.models</span></code> when\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code> isn\u2019t installed. Import <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code> from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.requests</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code> from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.shortcuts</span></code>. The old import locations will work until\nDjango 1.9.</p>\n</div>\n<div class=\"section\" id=\"s-django-forms-forms-get-declared-fields\">\n<span id=\"django-forms-forms-get-declared-fields\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.forms.get_declared_fields()</span></code><a class=\"headerlink\" href=\"#django-forms-forms-get-declared-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django no longer uses this functional internally. Even though it\u2019s a private\nAPI, it\u2019ll go through the normal deprecation cycle.</p>\n</div>\n<div class=\"section\" id=\"s-private-query-lookup-apis\">\n<span id=\"private-query-lookup-apis\"></span><h3>Private Query Lookup APIs<a class=\"headerlink\" href=\"#private-query-lookup-apis\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Private APIs <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.sql.where.WhereNode.make_atom()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.sql.where.Constraint</span></code> are deprecated in favor of the new\n<a class=\"reference internal\" href=\"../../ref/models/lookups/\"><span class=\"doc\">custom lookups API</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-removed-in-1-7\">\n<span id=\"s-removed-features-1-7\"></span><span id=\"features-removed-in-1-7\"></span><span id=\"removed-features-1-7\"></span><h2>Features removed in 1.7<a class=\"headerlink\" href=\"#features-removed-in-1-7\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>These features have reached the end of their deprecation cycle and are removed\nin Django 1.7. See <a class=\"reference internal\" href=\"../1.5/#deprecated-features-1-5\"><span class=\"std std-ref\">Features deprecated in 1.5</span></a> for details, including how to\nremove usage of these features.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.simplejson</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.itercompat.product</span></code> is removed.</li>\n<li>INSTALLED_APPS and TEMPLATE_DIRS are no longer corrected from a plain\nstring into a tuple.</li>\n<li><a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.SimpleTemplateResponse\" title=\"django.template.response.SimpleTemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTemplateResponse</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code>, <a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#django.contrib.sitemaps.views.index\" title=\"django.contrib.sitemaps.views.index\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">index()</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/contrib/sitemaps/#django.contrib.sitemaps.views.sitemap\" title=\"django.contrib.sitemaps.views.sitemap\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sitemap()</span></code></a> no longer take a <code class=\"docutils literal notranslate\"><span class=\"pre\">mimetype</span></code>\nargument</li>\n<li><a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> immediately consumes its content if it\u2019s\nan iterator.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTH_PROFILE_MODULE</span></code> setting, and the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_profile()</span></code> method on\nthe User model are removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">cleanup</span></code> management command is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">daily_cleanup.py</span></code> script is removed.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a> no longer has a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">depth</span></code> keyword argument.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">get_warnings_state()</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">restore_warnings_state()</span></code>\nfunctions from <a class=\"reference internal\" href=\"../../topics/testing/advanced/#module-django.test.utils\" title=\"django.test.utils: Helpers to write custom test runners.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.test.utils</span></code></a> and the <code class=\"docutils literal notranslate\"><span class=\"pre\">save_warnings_state()</span></code>/\n<code class=\"docutils literal notranslate\"><span class=\"pre\">restore_warnings_state()</span></code>\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django-testcase-subclasses\"><span class=\"std std-ref\">django.test.*TestCase</span></a> are removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">check_for_test_cookie</span></code> method in\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.forms.AuthenticationForm\" title=\"django.contrib.auth.forms.AuthenticationForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationForm</span></code></a> is removed.</li>\n<li>The version of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm()</span></code> that\nsupports base36 encoded user IDs\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset_confirm_uidb36</span></code>) is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.encoding.StrAndUnicode</span></code> mix-in is removed.</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.6.11", "Django 1.6.11 release notes", "N", "next"], ["releases/1.7.1", "Django 1.7.1 release notes", "P", "previous"]], "sourcename": "releases/1.7.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.7 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-7\">What\u2019s new in Django 1.7</a><ul>\n<li><a class=\"reference internal\" href=\"#schema-migrations\">Schema migrations</a></li>\n<li><a class=\"reference internal\" href=\"#app-loading-refactor\">App-loading refactor</a></li>\n<li><a class=\"reference internal\" href=\"#new-method-on-field-subclasses\">New method on Field subclasses</a></li>\n<li><a class=\"reference internal\" href=\"#calling-custom-queryset-methods-from-the-manager\">Calling custom <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods from the <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-a-custom-manager-when-traversing-reverse-relations\">Using a custom manager when traversing reverse relations</a></li>\n<li><a class=\"reference internal\" href=\"#new-system-check-framework\">New system check framework</a></li>\n<li><a class=\"reference internal\" href=\"#new-prefetch-object-for-advanced-prefetch-related-operations\">New <code class=\"docutils literal notranslate\"><span class=\"pre\">Prefetch</span></code> object for advanced <code class=\"docutils literal notranslate\"><span class=\"pre\">prefetch_related</span></code> operations.</a></li>\n<li><a class=\"reference internal\" href=\"#admin-shortcuts-support-time-zones\">Admin shortcuts support time zones</a></li>\n<li><a class=\"reference internal\" href=\"#using-database-cursors-as-context-managers\">Using database cursors as context managers</a></li>\n<li><a class=\"reference internal\" href=\"#custom-lookups\">Custom lookups</a></li>\n<li><a class=\"reference internal\" href=\"#improvements-to-form-error-handling\">Improvements to <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> error handling</a><ul>\n<li><a class=\"reference internal\" href=\"#form-add-error\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Form.add_error()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#error-metadata\">Error metadata</a></li>\n<li><a class=\"reference internal\" href=\"#error-containers-and-backward-compatibility\">Error containers and backward compatibility</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#minor-features\">Minor features</a><ul>\n<li><a class=\"reference internal\" href=\"#django-contrib-admin\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-auth\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-formtools\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.formtools</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-gis\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-messages\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.messages</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-redirects\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.redirects</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sessions\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sitemaps\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sites\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-staticfiles\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-syndication\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cache\">Cache</a></li>\n<li><a class=\"reference internal\" href=\"#cross-site-request-forgery\">Cross Site Request Forgery</a></li>\n<li><a class=\"reference internal\" href=\"#email\">Email</a></li>\n<li><a class=\"reference internal\" href=\"#file-storage\">File Storage</a></li>\n<li><a class=\"reference internal\" href=\"#file-uploads\">File Uploads</a></li>\n<li><a class=\"reference internal\" href=\"#forms\">Forms</a></li>\n<li><a class=\"reference internal\" href=\"#internationalization\">Internationalization</a></li>\n<li><a class=\"reference internal\" href=\"#management-commands\">Management Commands</a></li>\n<li><a class=\"reference internal\" href=\"#models\">Models</a></li>\n<li><a class=\"reference internal\" href=\"#signals\">Signals</a></li>\n<li><a class=\"reference internal\" href=\"#templates\">Templates</a></li>\n<li><a class=\"reference internal\" href=\"#requests-and-responses\">Requests and Responses</a></li>\n<li><a class=\"reference internal\" href=\"#tests\">Tests</a></li>\n<li><a class=\"reference internal\" href=\"#utilities\">Utilities</a></li>\n<li><a class=\"reference internal\" href=\"#validators\">Validators</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-7\">Backwards incompatible changes in 1.7</a><ul>\n<li><a class=\"reference internal\" href=\"#allow-syncdb-allow-migrate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">allow_syncdb</span></code> / <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#initial-data\">initial_data</a></li>\n<li><a class=\"reference internal\" href=\"#deconstruct-and-serializability\"><code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> and serializability</a></li>\n<li><a class=\"reference internal\" href=\"#app-loading-changes\">App-loading changes</a><ul>\n<li><a class=\"reference internal\" href=\"#start-up-sequence\">Start-up sequence</a></li>\n<li><a class=\"reference internal\" href=\"#standalone-scripts\">Standalone scripts</a></li>\n<li><a class=\"reference internal\" href=\"#wsgi-scripts\">WSGI scripts</a></li>\n<li><a class=\"reference internal\" href=\"#app-registry-consistency\">App registry consistency</a></li>\n<li><a class=\"reference internal\" href=\"#subclassing-appcommand\">Subclassing AppCommand</a></li>\n<li><a class=\"reference internal\" href=\"#introspecting-applications\">Introspecting applications</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#management-commands-and-order-of-installed-apps\">Management commands and order of <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#validationerror-constructor-and-internal-storage\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ValidationError</span></code> constructor and internal storage</a></li>\n<li><a class=\"reference internal\" href=\"#behavior-of-locmemcache-regarding-pickle-errors\">Behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">LocMemCache</span></code> regarding pickle errors</a></li>\n<li><a class=\"reference internal\" href=\"#cache-keys-are-now-generated-from-the-request-s-absolute-url\">Cache keys are now generated from the request\u2019s absolute URL</a></li>\n<li><a class=\"reference internal\" href=\"#passing-none-to-manager-db-manager\">Passing <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager.db_manager()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pytz-may-be-required\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pytz</span></code> may be required</a></li>\n<li><a class=\"reference internal\" href=\"#remove-and-clear-methods-of-related-managers\"><code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> methods of related managers</a></li>\n<li><a class=\"reference internal\" href=\"#admin-login-redirection-strategy\">Admin login redirection strategy</a></li>\n<li><a class=\"reference internal\" href=\"#select-for-update-requires-a-transaction\"><code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> requires a transaction</a></li>\n<li><a class=\"reference internal\" href=\"#contrib-middleware-removed-from-default-middleware-classes\">Contrib middleware removed from default <code class=\"docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE_CLASSES</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#miscellaneous\">Miscellaneous</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-7\">Features deprecated in 1.7</a><ul>\n<li><a class=\"reference internal\" href=\"#django-core-cache-get-cache\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.get_cache</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-dictconfig-django-utils-importlib\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.dictconfig</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.importlib</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-module-loading-import-by-path\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.module_loading.import_by_path</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-tzinfo\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.tzinfo</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-unittest\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.unittest</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-datastructures-sorteddict\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.SortedDict</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#custom-sql-location-for-models-package\">Custom SQL location for models package</a></li>\n<li><a class=\"reference internal\" href=\"#reorganization-of-django-contrib-sites\">Reorganization of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#declared-fieldsets-attribute-on-modeladmin\"><code class=\"docutils literal notranslate\"><span class=\"pre\">declared_fieldsets</span></code> attribute on <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#reorganization-of-django-contrib-contenttypes\">Reorganization of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#syncdb\"><code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#util-modules-renamed-to-utils\"><code class=\"docutils literal notranslate\"><span class=\"pre\">util</span></code> modules renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">utils</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#get-formsets-method-on-modeladmin\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_formsets</span></code> method on <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#ipaddressfield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IPAddressField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#basememcachedcache-get-memcache-timeout-method\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BaseMemcachedCache._get_memcache_timeout</span></code> method</a></li>\n<li><a class=\"reference internal\" href=\"#natural-key-serialization-options\">Natural key serialization options</a></li>\n<li><a class=\"reference internal\" href=\"#merging-of-post-and-get-arguments-into-wsgirequest-request\">Merging of <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> arguments into <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest.REQUEST</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-datastructures-mergedict-class\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.MergeDict</span></code> class</a></li>\n<li><a class=\"reference internal\" href=\"#language-codes-zh-cn-zh-tw-and-fy-nl\">Language codes <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-cn</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-tw</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">fy-nl</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-functional-memoize-function\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.functional.memoize</span></code> function</a></li>\n<li><a class=\"reference internal\" href=\"#geo-sitemaps\">Geo Sitemaps</a></li>\n<li><a class=\"reference internal\" href=\"#passing-callable-arguments-to-queryset-methods\">Passing callable arguments to queryset methods</a></li>\n<li><a class=\"reference internal\" href=\"#admin-for-setting\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ADMIN_FOR</span></code> setting</a></li>\n<li><a class=\"reference internal\" href=\"#splitdatetimewidget-with-datetimefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SplitDateTimeWidget</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#validate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">validate</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-core-management-basecommand\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.management.BaseCommand</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#modeladmin-validators\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> validators</a></li>\n<li><a class=\"reference internal\" href=\"#django-db-backends-databasevalidation-validate-field\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.DatabaseValidation.validate_field</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#loading-ssi-and-url-template-tags-from-future-library\">Loading <code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> template tags from <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> library</a></li>\n<li><a class=\"reference internal\" href=\"#django-utils-text-javascript-quote\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.text.javascript_quote</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#fix-ampersands-utils-method-and-template-filter\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fix_ampersands</span></code> utils method and template filter</a></li>\n<li><a class=\"reference internal\" href=\"#reorganization-of-database-test-settings\">Reorganization of database test settings</a></li>\n<li><a class=\"reference internal\" href=\"#fastcgi-support\">FastCGI support</a></li>\n<li><a class=\"reference internal\" href=\"#moved-objects-in-contrib-sites\">Moved objects in <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.sites</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-forms-forms-get-declared-fields\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.forms.get_declared_fields()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#private-query-lookup-apis\">Private Query Lookup APIs</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-removed-in-1-7\">Features removed in 1.7</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.7", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
