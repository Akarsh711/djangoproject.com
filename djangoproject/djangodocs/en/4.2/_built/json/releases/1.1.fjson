{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.1.2/", "title": "Django 1.1.2 release notes"}, "next": {"link": "../1.0.2/", "title": "Django 1.0.2 release notes"}, "title": "Django 1.1 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-1-release-notes\">\n<span id=\"django-1-1-release-notes\"></span><h1>Django 1.1 release notes<a class=\"headerlink\" href=\"#django-1-1-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>July 29, 2009</p>\n<p>Welcome to Django 1.1!</p>\n<p>Django 1.1 includes a number of nifty <a class=\"reference internal\" href=\"#whats-new-1-1\"><span class=\"std std-ref\">new features</span></a>, lots\nof bug fixes, and an easy upgrade path from Django 1.0.</p>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-1\">\n<span id=\"s-backwards-incompatible-changes-1-1\"></span><span id=\"backwards-incompatible-changes-in-1-1\"></span><span id=\"backwards-incompatible-changes-1-1\"></span><h2>Backwards-incompatible changes in 1.1<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-1\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django has a policy of <a class=\"reference internal\" href=\"../../misc/api-stability/\"><span class=\"doc\">API stability</span></a>. This means\nthat, in general, code you develop against Django 1.0 should continue to work\nagainst 1.1 unchanged. However, we do sometimes make backwards-incompatible\nchanges if they\u2019re necessary to resolve bugs, and there are a handful of such\n(minor) changes between Django 1.0 and Django 1.1.</p>\n<p>Before upgrading to Django 1.1 you should double-check that the following\nchanges don\u2019t impact you, and upgrade your code if they do.</p>\n<div class=\"section\" id=\"s-changes-to-constraint-names\">\n<span id=\"changes-to-constraint-names\"></span><h3>Changes to constraint names<a class=\"headerlink\" href=\"#changes-to-constraint-names\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.1 modifies the method used to generate database constraint names so\nthat names are consistent regardless of machine word size. This change is\nbackwards incompatible for some users.</p>\n<p>If you are using a 32-bit platform, you\u2019re off the hook; you\u2019ll observe no\ndifferences as a result of this change.</p>\n<p>However, <strong>users on 64-bit platforms may experience some problems</strong> using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reset</span></code> management command. Prior to this change, 64-bit platforms\nwould generate a 64-bit, 16 character digest in the constraint name; for\nexample:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">myapp_sometable</span><span class=\"w\"> </span><span class=\"k\">ADD</span><span class=\"w\"> </span><span class=\"k\">CONSTRAINT</span><span class=\"w\"> </span><span class=\"n\">object_id_refs_id_5e8f10c132091d1e</span><span class=\"w\"> </span><span class=\"k\">FOREIGN</span><span class=\"w\"> </span><span class=\"k\">KEY</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Following this change, all platforms, regardless of word size, will generate a\n32-bit, 8 character digest in the constraint name; for example:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">myapp_sometable</span><span class=\"w\"> </span><span class=\"k\">ADD</span><span class=\"w\"> </span><span class=\"k\">CONSTRAINT</span><span class=\"w\"> </span><span class=\"n\">object_id_refs_id_32091d1e</span><span class=\"w\"> </span><span class=\"k\">FOREIGN</span><span class=\"w\"> </span><span class=\"k\">KEY</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>As a result of this change, you will not be able to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">reset</span></code>\nmanagement command on any table made by a 64-bit machine. This is because the\nnew generated name will not match the historically generated name; as a\nresult, the SQL constructed by the reset command will be invalid.</p>\n<p>If you need to reset an application that was created with 64-bit constraints,\nyou will need to manually drop the old constraint prior to invoking\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reset</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-test-cases-are-now-run-in-a-transaction\">\n<span id=\"test-cases-are-now-run-in-a-transaction\"></span><h3>Test cases are now run in a transaction<a class=\"headerlink\" href=\"#test-cases-are-now-run-in-a-transaction\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.1 runs tests inside a transaction, allowing better test performance\n(see <a class=\"reference internal\" href=\"#test-performance-improvements\">test performance improvements</a> for details).</p>\n<p>This change is slightly backwards incompatible if existing tests need to test\ntransactional behavior, if they rely on invalid assumptions about the test\nenvironment, or if they require a specific test case ordering.</p>\n<p>For these cases, <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> can be used instead.\nThis is a just a quick fix to get around test case errors revealed by the new\nrollback approach; in the long-term tests should be rewritten to correct the\ntest case.</p>\n</div>\n<div class=\"section\" id=\"s-removed-setremoteaddrfromforwardedfor-middleware\">\n<span id=\"s-id1\"></span><span id=\"removed-setremoteaddrfromforwardedfor-middleware\"></span><span id=\"id1\"></span><h3>Removed <code class=\"docutils literal notranslate\"><span class=\"pre\">SetRemoteAddrFromForwardedFor</span></code> middleware<a class=\"headerlink\" href=\"#removed-setremoteaddrfromforwardedfor-middleware\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For convenience, Django 1.0 included an optional middleware class \u2013\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.middleware.http.SetRemoteAddrFromForwardedFor</span></code> \u2013 which updated the\nvalue of <code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_ADDR</span></code> based on the HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Forwarded-For</span></code> header commonly\nset by some proxy configurations.</p>\n<p>It has been demonstrated that this mechanism cannot be made reliable enough for\ngeneral-purpose use, and that (despite documentation to the contrary) its\ninclusion in Django may lead application developers to assume that the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_ADDR</span></code> is \u201csafe\u201d or in some way reliable as a source of authentication.</p>\n<p>While not directly a security issue, we\u2019ve decided to remove this middleware\nwith the Django 1.1 release. It has been replaced with a class that does nothing\nother than raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>.</p>\n<p>If you\u2019ve been relying on this middleware, the easiest upgrade path is:</p>\n<ul class=\"simple\">\n<li>Examine <a class=\"reference external\" href=\"https://github.com/django/django/blob/91f18400cc0fb37659e2dbaab5484ff2081f1f30/django/middleware/http.py#L33\">the code as it existed before it was removed</a>.</li>\n<li>Verify that it works correctly with your upstream proxy, modifying\nit to support your particular proxy (if necessary).</li>\n<li>Introduce your modified version of <code class=\"docutils literal notranslate\"><span class=\"pre\">SetRemoteAddrFromForwardedFor</span></code> as a\npiece of middleware in your own project.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-names-of-uploaded-files-are-available-later\">\n<span id=\"names-of-uploaded-files-are-available-later\"></span><h3>Names of uploaded files are available later<a class=\"headerlink\" href=\"#names-of-uploaded-files-are-available-later\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In Django 1.0, files uploaded and stored in a model\u2019s <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> were\nsaved to disk before the model was saved to the database. This meant that the\nactual file name assigned to the file was available before saving. For example,\nit was available in a model\u2019s pre-save signal handler.</p>\n<p>In Django 1.1 the file is saved as part of saving the model in the database, so\nthe actual file name used on disk cannot be relied on until <em>after</em> the model\nhas been saved.</p>\n</div>\n<div class=\"section\" id=\"s-changes-to-how-model-formsets-are-saved\">\n<span id=\"changes-to-how-model-formsets-are-saved\"></span><h3>Changes to how model formsets are saved<a class=\"headerlink\" href=\"#changes-to-how-model-formsets-are-saved\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In Django 1.1, <a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.models.BaseModelFormSet\" title=\"django.forms.models.BaseModelFormSet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseModelFormSet</span></code></a> now calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm.save()</span></code>.</p>\n<p>This is backwards-incompatible if you were modifying <code class=\"docutils literal notranslate\"><span class=\"pre\">self.initial</span></code> in a model\nformset\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code>, or if you relied on the internal <code class=\"docutils literal notranslate\"><span class=\"pre\">_total_form_count</span></code>\nor <code class=\"docutils literal notranslate\"><span class=\"pre\">_initial_form_count</span></code> attributes of BaseFormSet. Those attributes are now\npublic methods.</p>\n</div>\n<div class=\"section\" id=\"s-fixed-the-join-filter-s-escaping-behavior\">\n<span id=\"fixed-the-join-filter-s-escaping-behavior\"></span><h3>Fixed the <code class=\"docutils literal notranslate\"><span class=\"pre\">join</span></code> filter\u2019s escaping behavior<a class=\"headerlink\" href=\"#fixed-the-join-filter-s-escaping-behavior\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-join\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">join</span></code></a> filter no longer escapes the literal value that is\npassed in for the connector.</p>\n<p>This is backwards incompatible for the special situation of the literal string\ncontaining one of the five special HTML characters. Thus, if you were writing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">foo|join:&quot;&amp;&quot;</span> <span class=\"pre\">}}</span></code>, you now have to write <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">foo|join:&quot;&amp;amp;&quot;</span> <span class=\"pre\">}}</span></code>.</p>\n<p>The previous behavior was a bug and contrary to what was documented\nand expected.</p>\n</div>\n<div class=\"section\" id=\"s-permanent-redirects-and-the-redirect-to-generic-view\">\n<span id=\"permanent-redirects-and-the-redirect-to-generic-view\"></span><h3>Permanent redirects and the <code class=\"docutils literal notranslate\"><span class=\"pre\">redirect_to()</span></code> generic view<a class=\"headerlink\" href=\"#permanent-redirects-and-the-redirect-to-generic-view\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.1 adds a <code class=\"docutils literal notranslate\"><span class=\"pre\">permanent</span></code> argument to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.generic.simple.redirect_to()</span></code> view. This is technically\nbackwards-incompatible if you were using the <code class=\"docutils literal notranslate\"><span class=\"pre\">redirect_to</span></code> view with a\nformat-string key called \u2018permanent\u2019, which is highly unlikely.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-1\">\n<span id=\"s-deprecated-features-1-1\"></span><span id=\"features-deprecated-in-1-1\"></span><span id=\"deprecated-features-1-1\"></span><h2>Features deprecated in 1.1<a class=\"headerlink\" href=\"#features-deprecated-in-1-1\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>One feature has been marked as deprecated in Django 1.1:</p>\n<ul>\n<li><p class=\"first\">You should no longer use <code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite.root()</span></code> to register that admin\nviews. That is, if your URLconf contains the line:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^admin/(.*)&quot;</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"p\">),</span>\n</pre></div>\n</div>\n<p>You should change it to read:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^admin/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">)),</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>You should begin to remove use of this feature from your code immediately.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite.root</span></code> will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">PendingDeprecationWarning</span></code> if used in\nDjango 1.1. This warning is hidden by default. In Django 1.2, this warning will\nbe upgraded to a <code class=\"docutils literal notranslate\"><span class=\"pre\">DeprecationWarning</span></code>, which will be displayed loudly. Django\n1.3 will remove <code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite.root()</span></code> entirely.</p>\n<p>For more details on our deprecation policies and strategy, see\n<a class=\"reference internal\" href=\"../../internals/release-process/\"><span class=\"doc\">Django\u2019s release process</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-1\">\n<span id=\"s-whats-new-1-1\"></span><span id=\"what-s-new-in-django-1-1\"></span><span id=\"whats-new-1-1\"></span><h2>What\u2019s new in Django 1.1<a class=\"headerlink\" href=\"#what-s-new-in-django-1-1\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Quite a bit: since Django 1.0, we\u2019ve made 1,290 code commits, fixed 1,206 bugs,\nand added roughly 10,000 lines of documentation.</p>\n<p>The major new features in Django 1.1 are:</p>\n<div class=\"section\" id=\"s-orm-improvements\">\n<span id=\"orm-improvements\"></span><h3>ORM improvements<a class=\"headerlink\" href=\"#orm-improvements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Two major enhancements have been added to Django\u2019s object-relational mapper\n(ORM): aggregate support, and query expressions.</p>\n<div class=\"section\" id=\"s-aggregate-support\">\n<span id=\"aggregate-support\"></span><h4>Aggregate support<a class=\"headerlink\" href=\"#aggregate-support\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>It\u2019s now possible to run SQL aggregate queries (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">COUNT()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">MAX()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">MIN()</span></code>, etc.) from within Django\u2019s ORM. You can choose to either return the\nresults of the aggregate directly, or else annotate the objects in a\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> with the results of the aggregate\nquery.</p>\n<p>This feature is available as new\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.aggregate\" title=\"django.db.models.query.QuerySet.aggregate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">aggregate()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a> methods, and is covered in\ndetail in <a class=\"reference internal\" href=\"../../topics/db/aggregation/\"><span class=\"doc\">the ORM aggregation documentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-query-expressions\">\n<span id=\"query-expressions\"></span><h4>Query expressions<a class=\"headerlink\" href=\"#query-expressions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Queries can now refer to another field on the query and can traverse\nrelationships to refer to fields on related models. This is implemented in the\nnew <a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span></code></a> object; for full details, including examples,\nconsult the <a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span> <span class=\"pre\">documentation</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-model-improvements\">\n<span id=\"model-improvements\"></span><h3>Model improvements<a class=\"headerlink\" href=\"#model-improvements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A number of features have been added to Django\u2019s model layer:</p>\n<div class=\"section\" id=\"s-unmanaged-models\">\n<span id=\"unmanaged-models\"></span><h4>\u201cUnmanaged\u201d models<a class=\"headerlink\" href=\"#unmanaged-models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You can now control whether or not Django manages the life-cycle of the database\ntables for a model using the <a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.managed\" title=\"django.db.models.Options.managed\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">managed</span></code></a> model option. This\ndefaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, meaning that Django will create the appropriate database\ntables in <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> and remove them as part of the <code class=\"docutils literal notranslate\"><span class=\"pre\">reset</span></code>\ncommand. That is, Django <em>manages</em> the database table\u2019s lifecycle.</p>\n<p>If you set this to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, however, no database table creating or deletion\nwill be automatically performed for this model. This is useful if the model\nrepresents an existing table or a database view that has been created by some\nother means.</p>\n<p>For more details, see the documentation for the <a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.managed\" title=\"django.db.models.Options.managed\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">managed</span></code></a>\noption.</p>\n</div>\n<div class=\"section\" id=\"s-proxy-models\">\n<span id=\"proxy-models\"></span><h4>Proxy models<a class=\"headerlink\" href=\"#proxy-models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You can now create <a class=\"reference internal\" href=\"../../topics/db/models/#proxy-models\"><span class=\"std std-ref\">proxy models</span></a>: subclasses of existing\nmodels that only add Python-level (rather than database-level) behavior and\naren\u2019t represented by a new table. That is, the new model is a <em>proxy</em> for some\nunderlying model, which stores all the real data.</p>\n<p>All the details can be found in the <a class=\"reference internal\" href=\"../../topics/db/models/#proxy-models\"><span class=\"std std-ref\">proxy models documentation</span></a>. This feature is similar on the surface to unmanaged models,\nso the documentation has an explanation of <a class=\"reference internal\" href=\"../../topics/db/models/#proxy-vs-unmanaged-models\"><span class=\"std std-ref\">how proxy models differ from\nunmanaged models</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-deferred-fields\">\n<span id=\"deferred-fields\"></span><h4>Deferred fields<a class=\"headerlink\" href=\"#deferred-fields\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In some complex situations, your models might contain fields which could\ncontain a lot of data (for example, large text fields), or require expensive\nprocessing to convert them to Python objects. If you know you don\u2019t need those\nparticular fields, you can now tell Django not to retrieve them from the\ndatabase.</p>\n<p>You\u2019ll do this with the new queryset methods\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.defer\" title=\"django.db.models.query.QuerySet.defer\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">defer()</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.only\" title=\"django.db.models.query.QuerySet.only\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">only()</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-testing-improvements\">\n<span id=\"testing-improvements\"></span><h3>Testing improvements<a class=\"headerlink\" href=\"#testing-improvements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A few notable improvements have been made to the <a class=\"reference internal\" href=\"../../topics/testing/\"><span class=\"doc\">testing framework</span></a>.</p>\n<div class=\"section\" id=\"s-test-performance-improvements\">\n<span id=\"test-performance-improvements\"></span><h4>Test performance improvements<a class=\"headerlink\" href=\"#test-performance-improvements\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Tests written using Django\u2019s <a class=\"reference internal\" href=\"../../topics/testing/\"><span class=\"doc\">testing framework</span></a> now run\ndramatically faster (as much as 10 times faster in many cases).</p>\n<p>This was accomplished through the introduction of transaction-based tests: when\nusing <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.test.TestCase</span></code></a>, your tests will now be run in a transaction\nwhich is rolled back when finished, instead of by flushing and re-populating the\ndatabase. This results in an immense speedup for most types of unit tests. See\nthe documentation for <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TestCase\" title=\"django.test.TestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TestCase</span></code></a> and <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase\" title=\"django.test.TransactionTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionTestCase</span></code></a> for a\nfull description, and some important notes on database support.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-test-client-improvements\">\n<span id=\"test-client-improvements\"></span><h3>Test client improvements<a class=\"headerlink\" href=\"#test-client-improvements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A couple of small \u2013 but highly useful \u2013 improvements have been made to the\ntest client:</p>\n<ul class=\"simple\">\n<li>The test <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client\" title=\"django.test.Client\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Client</span></code></a> now can automatically follow redirects with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">follow</span></code> argument to <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client.get\" title=\"django.test.Client.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.get()</span></code></a> and <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client.post\" title=\"django.test.Client.post\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Client.post()</span></code></a>. This\nmakes testing views that issue redirects simpler.</li>\n<li>It\u2019s now easier to get at the template context in the response returned\nthe test client: you\u2019ll simply access the context as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.context[key]</span></code>. The old way, which treats <code class=\"docutils literal notranslate\"><span class=\"pre\">request.context</span></code> as\na list of contexts, one for each rendered template in the inheritance\nchain, is still available if you need it.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-new-admin-features\">\n<span id=\"new-admin-features\"></span><h3>New admin features<a class=\"headerlink\" href=\"#new-admin-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.1 adds a couple of nifty new features to Django\u2019s admin interface:</p>\n<div class=\"section\" id=\"s-editable-fields-on-the-change-list\">\n<span id=\"editable-fields-on-the-change-list\"></span><h4>Editable fields on the change list<a class=\"headerlink\" href=\"#editable-fields-on-the-change-list\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You can now make fields editable on the admin list views via the new\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#admin-list-editable\"><span class=\"std std-ref\">list_editable</span></a> admin option. These fields will show\nup as form widgets on the list pages, and can be edited and saved in bulk.</p>\n</div>\n<div class=\"section\" id=\"s-admin-actions\">\n<span id=\"admin-actions\"></span><h4>Admin \u201cactions\u201d<a class=\"headerlink\" href=\"#admin-actions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>You can now define <a class=\"reference internal\" href=\"../../ref/contrib/admin/actions/\"><span class=\"doc\">admin actions</span></a> that can\nperform some action to a group of models in bulk. Users will be able to select\nobjects on the change list page and then apply these bulk actions to all\nselected objects.</p>\n<p>Django ships with one pre-defined admin action to delete a group of objects in\none fell swoop.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-conditional-view-processing\">\n<span id=\"conditional-view-processing\"></span><h3>Conditional view processing<a class=\"headerlink\" href=\"#conditional-view-processing\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now has much better support for <a class=\"reference internal\" href=\"../../topics/conditional-view-processing/\"><span class=\"doc\">conditional view processing</span></a> using the standard <code class=\"docutils literal notranslate\"><span class=\"pre\">ETag</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Last-Modified</span></code> HTTP headers. This means you can now easily short-circuit\nview processing by testing less-expensive conditions. For many views this can\nlead to a serious improvement in speed and reduction in bandwidth.</p>\n</div>\n<div class=\"section\" id=\"s-url-namespaces\">\n<span id=\"url-namespaces\"></span><h3>URL namespaces<a class=\"headerlink\" href=\"#url-namespaces\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.1 improves <a class=\"reference internal\" href=\"../../topics/http/urls/#naming-url-patterns\"><span class=\"std std-ref\">named URL patterns</span></a> with the\nintroduction of URL \u201cnamespaces.\u201d</p>\n<p>In short, this feature allows the same group of URLs, from the same application,\nto be included in a Django URLConf multiple times, with varying (and potentially\nnested) named prefixes which will be used when performing reverse resolution. In\nother words, reusable applications like Django\u2019s admin interface may be\nregistered multiple times without URL conflicts.</p>\n<p>For full details, see <a class=\"reference internal\" href=\"../../topics/http/urls/#topics-http-defining-url-namespaces\"><span class=\"std std-ref\">the documentation on defining URL namespaces</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-geodjango\">\n<span id=\"geodjango\"></span><h3>GeoDjango<a class=\"headerlink\" href=\"#geodjango\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In Django 1.1, <a class=\"reference internal\" href=\"../../ref/contrib/gis/\"><span class=\"doc\">GeoDjango</span></a> (i.e.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code>) has several new features:</p>\n<ul class=\"simple\">\n<li>Support for <a class=\"reference external\" href=\"https://www.gaia-gis.it/gaia-sins/\">SpatiaLite</a> \u2013 a spatial database for SQLite \u2013 as a spatial\nbackend.</li>\n<li>Geographic aggregates (<code class=\"docutils literal notranslate\"><span class=\"pre\">Collect</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Extent</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">MakeLine</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Union</span></code>)\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">F</span></code> expressions.</li>\n<li>New <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> methods: <code class=\"docutils literal notranslate\"><span class=\"pre\">collect</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">geojson</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">snap_to_grid</span></code>.</li>\n<li>A new list interface methods for <code class=\"docutils literal notranslate\"><span class=\"pre\">GEOSGeometry</span></code> objects.</li>\n</ul>\n<p>For more details, see the GeoDjango documentation.</p>\n</div>\n<div class=\"section\" id=\"s-other-improvements\">\n<span id=\"other-improvements\"></span><h3>Other improvements<a class=\"headerlink\" href=\"#other-improvements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Other new features and changes introduced since Django 1.0 include:</p>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/csrf/\"><span class=\"doc\">CSRF protection middleware</span></a> has been split into\ntwo classes \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> checks incoming requests, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfResponseMiddleware</span></code> processes outgoing responses. The combined\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfMiddleware</span></code> class (which does both) remains for\nbackwards-compatibility, but using the split classes is now recommended in\norder to allow fine-grained control of when and where the CSRF processing\ntakes place.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse()</span></code> and code which uses it (e.g., the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">url</span> <span class=\"pre\">%}</span></code> template tag)\nnow works with URLs in Django\u2019s administrative site, provided that the admin\nURLs are set up via <code class=\"docutils literal notranslate\"><span class=\"pre\">include(admin.site.urls)</span></code> (sending admin requests to\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.site.root</span></code> view still works, but URLs in the admin will not be\n\u201creversible\u201d when configured this way).</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code> function in Django URLconf modules can now accept sequences\nof URL patterns (generated by <code class=\"docutils literal notranslate\"><span class=\"pre\">patterns()</span></code>) in addition to module names.</li>\n<li>Instances of Django forms (see <a class=\"reference internal\" href=\"../../topics/forms/\"><span class=\"doc\">the forms overview</span></a>)\nnow have two additional methods, <code class=\"docutils literal notranslate\"><span class=\"pre\">hidden_fields()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">visible_fields()</span></code>,\nwhich return the list of hidden \u2013 i.e., <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span> <span class=\"pre\">type=&quot;hidden&quot;&gt;</span></code> \u2013 and\nvisible fields on the form, respectively.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">redirect_to</span></code> generic view\nnow accepts an additional keyword argument\n<code class=\"docutils literal notranslate\"><span class=\"pre\">permanent</span></code>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">permanent</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the view will emit an HTTP\npermanent redirect (status code 301). If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the view will emit an HTTP\ntemporary redirect (status code 302).</li>\n<li>A new database lookup type \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">week_day</span></code> \u2013 has been added for <code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code>. This type of lookup accepts a number between 1 (Sunday)\nand 7 (Saturday), and returns objects where the field value matches that day\nof the week. See <a class=\"reference internal\" href=\"../../ref/models/querysets/#field-lookups\"><span class=\"std std-ref\">the full list of lookup types</span></a> for\ndetails.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">%}</span></code> tag in Django\u2019s template language now accepts an optional\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">empty</span> <span class=\"pre\">%}</span></code> clause, to be displayed when <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">%}</span></code> is asked to loop\nover an empty sequence. See <a class=\"reference internal\" href=\"../../ref/templates/builtins/\"><span class=\"doc\">the list of built-in template tags</span></a> for examples of this.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> management command now accepts individual\nmodel names as arguments, allowing you to export the data just from\nparticular models.</li>\n<li>There\u2019s a new <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-safeseq\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safeseq</span></code></a> template filter which works just like\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a> for lists, marking each item in the list as safe.</li>\n<li><a class=\"reference internal\" href=\"../../topics/cache/\"><span class=\"doc\">Cache backends</span></a> now support <code class=\"docutils literal notranslate\"><span class=\"pre\">incr()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">decr()</span></code> commands to increment and decrement the value of a cache key.\nOn cache backends that support atomic increment/decrement \u2013 most\nnotably, the memcached backend \u2013 these operations will be atomic, and\nquite fast.</li>\n<li>Django now can <a class=\"reference internal\" href=\"../../howto/auth-remote-user/\"><span class=\"doc\">easily delegate authentication to the web server</span></a> via a new authentication backend that supports\nthe standard <code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_USER</span></code> environment variable used for this purpose.</li>\n<li>There\u2019s a new <a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.redirect\" title=\"django.shortcuts.redirect\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.shortcuts.redirect()</span></code></a> function that makes it\neasier to issue redirects given an object, a view name, or a URL.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql_psycopg2</span></code> backend now supports <a class=\"reference internal\" href=\"../../ref/databases/#postgresql-notes\"><span class=\"std std-ref\">native PostgreSQL\nautocommit</span></a>. This is an advanced, PostgreSQL-specific\nfeature, that can make certain read-heavy applications a good deal\nfaster.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-what-s-next\">\n<span id=\"what-s-next\"></span><h2>What\u2019s next?<a class=\"headerlink\" href=\"#what-s-next\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We\u2019ll take a short break, and then work on Django 1.2 will begin \u2013 no rest for\nthe weary! If you\u2019d like to help, discussion of Django development, including\nprogress toward the 1.2 release, takes place daily on the <a class=\"reference internal\" href=\"../../internals/mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a>\nmailing list and in the <code class=\"docutils literal notranslate\"><span class=\"pre\">#django-dev</span></code> IRC channel on <code class=\"docutils literal notranslate\"><span class=\"pre\">irc.libera.chat</span></code>.\nFeel free to join the discussions!</p>\n<p>Django\u2019s online documentation also includes pointers on how to contribute to\nDjango:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../internals/contributing/\"><span class=\"doc\">How to contribute to Django</span></a></li>\n</ul>\n<p>Contributions on any level \u2013 developing code, writing documentation or simply\ntriaging tickets and helping to test proposed bugfixes \u2013 are always welcome and\nappreciated.</p>\n<p>And that\u2019s the way it is.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.0.2", "Django 1.0.2 release notes", "N", "next"], ["releases/1.1.2", "Django 1.1.2 release notes", "P", "previous"]], "sourcename": "releases/1.1.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.1 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-1\">Backwards-incompatible changes in 1.1</a><ul>\n<li><a class=\"reference internal\" href=\"#changes-to-constraint-names\">Changes to constraint names</a></li>\n<li><a class=\"reference internal\" href=\"#test-cases-are-now-run-in-a-transaction\">Test cases are now run in a transaction</a></li>\n<li><a class=\"reference internal\" href=\"#removed-setremoteaddrfromforwardedfor-middleware\">Removed <code class=\"docutils literal notranslate\"><span class=\"pre\">SetRemoteAddrFromForwardedFor</span></code> middleware</a></li>\n<li><a class=\"reference internal\" href=\"#names-of-uploaded-files-are-available-later\">Names of uploaded files are available later</a></li>\n<li><a class=\"reference internal\" href=\"#changes-to-how-model-formsets-are-saved\">Changes to how model formsets are saved</a></li>\n<li><a class=\"reference internal\" href=\"#fixed-the-join-filter-s-escaping-behavior\">Fixed the <code class=\"docutils literal notranslate\"><span class=\"pre\">join</span></code> filter\u2019s escaping behavior</a></li>\n<li><a class=\"reference internal\" href=\"#permanent-redirects-and-the-redirect-to-generic-view\">Permanent redirects and the <code class=\"docutils literal notranslate\"><span class=\"pre\">redirect_to()</span></code> generic view</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-1\">Features deprecated in 1.1</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-1\">What\u2019s new in Django 1.1</a><ul>\n<li><a class=\"reference internal\" href=\"#orm-improvements\">ORM improvements</a><ul>\n<li><a class=\"reference internal\" href=\"#aggregate-support\">Aggregate support</a></li>\n<li><a class=\"reference internal\" href=\"#query-expressions\">Query expressions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#model-improvements\">Model improvements</a><ul>\n<li><a class=\"reference internal\" href=\"#unmanaged-models\">\u201cUnmanaged\u201d models</a></li>\n<li><a class=\"reference internal\" href=\"#proxy-models\">Proxy models</a></li>\n<li><a class=\"reference internal\" href=\"#deferred-fields\">Deferred fields</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#testing-improvements\">Testing improvements</a><ul>\n<li><a class=\"reference internal\" href=\"#test-performance-improvements\">Test performance improvements</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#test-client-improvements\">Test client improvements</a></li>\n<li><a class=\"reference internal\" href=\"#new-admin-features\">New admin features</a><ul>\n<li><a class=\"reference internal\" href=\"#editable-fields-on-the-change-list\">Editable fields on the change list</a></li>\n<li><a class=\"reference internal\" href=\"#admin-actions\">Admin \u201cactions\u201d</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#conditional-view-processing\">Conditional view processing</a></li>\n<li><a class=\"reference internal\" href=\"#url-namespaces\">URL namespaces</a></li>\n<li><a class=\"reference internal\" href=\"#geodjango\">GeoDjango</a></li>\n<li><a class=\"reference internal\" href=\"#other-improvements\">Other improvements</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#what-s-next\">What\u2019s next?</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.1", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}