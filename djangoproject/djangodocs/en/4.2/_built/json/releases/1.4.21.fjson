{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.4.22/", "title": "Django 1.4.22 release notes"}, "next": {"link": "../1.4.20/", "title": "Django 1.4.20 release notes"}, "title": "Django 1.4.21 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-4-21-release-notes\">\n<span id=\"django-1-4-21-release-notes\"></span><h1>Django 1.4.21 release notes<a class=\"headerlink\" href=\"#django-1-4-21-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>July 8, 2015</em></p>\n<p>Django 1.4.21 fixes several security issues in 1.4.20.</p>\n<div class=\"section\" id=\"s-denial-of-service-possibility-by-filling-session-store\">\n<span id=\"denial-of-service-possibility-by-filling-session-store\"></span><h2>Denial-of-service possibility by filling session store<a class=\"headerlink\" href=\"#denial-of-service-possibility-by-filling-session-store\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In previous versions of Django, the session backends created a new empty record\nin the session storage anytime <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code> was accessed and there was a\nsession key provided in the request cookies that didn\u2019t already have a session\nrecord. This could allow an attacker to easily create many new session records\nsimply by sending repeated requests with unknown session keys, potentially\nfilling up the session store or causing other users\u2019 session records to be\nevicted.</p>\n<p>The built-in session backends now create a session record only if the session\nis actually modified; empty session records are not created. Thus this\npotential DoS is now only possible if the site chooses to expose a\nsession-modifying view to anonymous users.</p>\n<p>As each built-in session backend was fixed separately (rather than a fix in the\ncore sessions framework), maintainers of third-party session backends should\ncheck whether the same vulnerability is present in their backend and correct\nit if so.</p>\n</div>\n<div class=\"section\" id=\"s-header-injection-possibility-since-validators-accept-newlines-in-input\">\n<span id=\"header-injection-possibility-since-validators-accept-newlines-in-input\"></span><h2>Header injection possibility since validators accept newlines in input<a class=\"headerlink\" href=\"#header-injection-possibility-since-validators-accept-newlines-in-input\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Some of Django\u2019s built-in validators\n(<a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.EmailValidator\" title=\"django.core.validators.EmailValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailValidator</span></code></a>, most seriously) didn\u2019t\nprohibit newline characters (due to the usage of <code class=\"docutils literal notranslate\"><span class=\"pre\">$</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">\\Z</span></code> in the\nregular expressions). If you use values with newlines in HTTP response or email\nheaders, you can suffer from header injection attacks. Django itself isn\u2019t\nvulnerable because <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> and the mail sending\nutilities in <a class=\"reference internal\" href=\"../../topics/email/#module-django.core.mail\" title=\"django.core.mail: Helpers to easily send email.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.core.mail</span></code></a> prohibit newlines in HTTP and SMTP\nheaders, respectively. While the validators have been fixed in Django, if\nyou\u2019re creating HTTP responses or email messages in other ways, it\u2019s a good\nidea to ensure that those methods prohibit newlines as well. You might also\nwant to validate that any existing data in your application doesn\u2019t contain\nunexpected newlines.</p>\n<p><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.validate_ipv4_address\" title=\"django.core.validators.validate_ipv4_address\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">validate_ipv4_address()</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.validate_slug\" title=\"django.core.validators.validate_slug\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">validate_slug()</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.URLValidator\" title=\"django.core.validators.URLValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">URLValidator</span></code></a> and their usage in the\ncorresponding form fields <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericIPAddresseField</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">IPAddressField</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SlugField</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">URLField</span></code> are also affected.</p>\n<p>The undocumented, internally unused <code class=\"docutils literal notranslate\"><span class=\"pre\">validate_integer()</span></code> function is now\nstricter as it validates using a regular expression instead of simply casting\nthe value using <code class=\"docutils literal notranslate\"><span class=\"pre\">int()</span></code> and checking if an exception was raised.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.4.20", "Django 1.4.20 release notes", "N", "next"], ["releases/1.4.22", "Django 1.4.22 release notes", "P", "previous"]], "sourcename": "releases/1.4.21.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.4.21 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#denial-of-service-possibility-by-filling-session-store\">Denial-of-service possibility by filling session store</a></li>\n<li><a class=\"reference internal\" href=\"#header-injection-possibility-since-validators-accept-newlines-in-input\">Header injection possibility since validators accept newlines in input</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.4.21", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
