{"parents": [{"link": "../", "title": "Release notes"}], "prev": {"link": "../1.9.1/", "title": "Django 1.9.1 release notes"}, "next": {"link": "../1.8.19/", "title": "Django 1.8.19 release notes"}, "title": "Django 1.9 release notes", "meta": {}, "body": "<div class=\"section\" id=\"s-django-1-9-release-notes\">\n<span id=\"django-1-9-release-notes\"></span><h1>Django 1.9 release notes<a class=\"headerlink\" href=\"#django-1-9-release-notes\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p><em>December 1, 2015</em></p>\n<p>Welcome to Django 1.9!</p>\n<p>These release notes cover the <a class=\"reference internal\" href=\"#whats-new-1-9\"><span class=\"std std-ref\">new features</span></a>, as well as\nsome <a class=\"reference internal\" href=\"#backwards-incompatible-1-9\"><span class=\"std std-ref\">backwards incompatible changes</span></a> you\u2019ll\nwant to be aware of when upgrading from Django 1.8 or older versions. We\u2019ve\n<a class=\"reference internal\" href=\"#removed-features-1-9\"><span class=\"std std-ref\">dropped some features</span></a> that have reached the end of\ntheir deprecation cycle, and we\u2019ve <a class=\"reference internal\" href=\"#deprecated-features-1-9\"><span class=\"std std-ref\">begun the deprecation process for some\nfeatures</span></a>.</p>\n<p>See the <a class=\"reference internal\" href=\"../../howto/upgrade-version/\"><span class=\"doc\">How to upgrade Django to a newer version</span></a> guide if you\u2019re updating an existing\nproject.</p>\n<div class=\"section\" id=\"s-python-compatibility\">\n<span id=\"python-compatibility\"></span><h2>Python compatibility<a class=\"headerlink\" href=\"#python-compatibility\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django 1.9 requires Python 2.7, 3.4, or 3.5. We <strong>highly recommend</strong> and only\nofficially support the latest release of each series.</p>\n<p>The Django 1.8 series is the last to support Python 3.2 and 3.3.</p>\n</div>\n<div class=\"section\" id=\"s-what-s-new-in-django-1-9\">\n<span id=\"s-whats-new-1-9\"></span><span id=\"what-s-new-in-django-1-9\"></span><span id=\"whats-new-1-9\"></span><h2>What\u2019s new in Django 1.9<a class=\"headerlink\" href=\"#what-s-new-in-django-1-9\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-performing-actions-after-a-transaction-commit\">\n<span id=\"performing-actions-after-a-transaction-commit\"></span><h3>Performing actions after a transaction commit<a class=\"headerlink\" href=\"#performing-actions-after-a-transaction-commit\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The new <a class=\"reference internal\" href=\"../../topics/db/transactions/#django.db.transaction.on_commit\" title=\"django.db.transaction.on_commit\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">on_commit()</span></code></a> hook allows performing actions\nafter a database transaction is successfully committed. This is useful for\ntasks such as sending notification emails, creating queued tasks, or\ninvalidating caches.</p>\n<p>This functionality from the <a class=\"reference external\" href=\"https://pypi.org/project/django-transaction-hooks/\">django-transaction-hooks</a> package has been\nintegrated into Django.</p>\n</div>\n<div class=\"section\" id=\"s-password-validation\">\n<span id=\"password-validation\"></span><h3>Password validation<a class=\"headerlink\" href=\"#password-validation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now offers password validation to help prevent the usage of weak\npasswords by users. The validation is integrated in the included password\nchange and reset forms and is simple to integrate in any other code.\nValidation is performed by one or more validators, configured in the new\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a> setting.</p>\n<p>Four validators are included in Django, which can enforce a minimum length,\ncompare the password to the user\u2019s attributes like their name, ensure\npasswords aren\u2019t entirely numeric, or check against an included list of common\npasswords. You can combine multiple validators, and some validators have\ncustom configuration options. For example, you can choose to provide a custom\nlist of common passwords. Each validator provides a help text to explain its\nrequirements to the user.</p>\n<p>By default, no validation is performed and all passwords are accepted, so if\nyou don\u2019t set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-AUTH_PASSWORD_VALIDATORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_PASSWORD_VALIDATORS</span></code></a>, you will not see any\nchange. In new projects created with the default <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-startproject\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startproject</span></code></a>\ntemplate, a simple set of validators is enabled. To enable basic validation in\nthe included auth forms for your project, you could set, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">AUTH_PASSWORD_VALIDATORS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.MinimumLengthValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.CommonPasswordValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.contrib.auth.password_validation.NumericPasswordValidator&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../topics/auth/passwords/#password-validation\"><span class=\"std std-ref\">Password validation</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-permission-mixins-for-class-based-views\">\n<span id=\"permission-mixins-for-class-based-views\"></span><h3>Permission mixins for class-based views<a class=\"headerlink\" href=\"#permission-mixins-for-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django now ships with the mixins\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.AccessMixin\" title=\"django.contrib.auth.mixins.AccessMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AccessMixin</span></code></a>,\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.LoginRequiredMixin\" title=\"django.contrib.auth.mixins.LoginRequiredMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoginRequiredMixin</span></code></a>,\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.PermissionRequiredMixin\" title=\"django.contrib.auth.mixins.PermissionRequiredMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionRequiredMixin</span></code></a>, and\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.UserPassesTestMixin\" title=\"django.contrib.auth.mixins.UserPassesTestMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UserPassesTestMixin</span></code></a> to provide the\nfunctionality of the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.decorators</span></code> for class-based views.\nThese mixins have been taken from, or are at least inspired by, the\n<a class=\"reference external\" href=\"https://django-braces.readthedocs.io/en/latest/index.html\">django-braces</a> project.</p>\n<p>There are a few differences between Django\u2019s and <code class=\"docutils literal notranslate\"><span class=\"pre\">django-braces</span></code>'\nimplementation, though:</p>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.AccessMixin.raise_exception\" title=\"django.contrib.auth.mixins.AccessMixin.raise_exception\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">raise_exception</span></code></a> attribute\ncan only be <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. Custom exceptions or callables are not\nsupported.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.AccessMixin.handle_no_permission\" title=\"django.contrib.auth.mixins.AccessMixin.handle_no_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">handle_no_permission()</span></code></a>\nmethod does not take a <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> argument. The current request is available\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">self.request</span></code>.</li>\n<li>The custom <code class=\"docutils literal notranslate\"><span class=\"pre\">test_func()</span></code> of <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.UserPassesTestMixin\" title=\"django.contrib.auth.mixins.UserPassesTestMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UserPassesTestMixin</span></code></a>\ndoes not take a <code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code> argument. The current user is available in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.request.user</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.PermissionRequiredMixin\" title=\"django.contrib.auth.mixins.PermissionRequiredMixin\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">permission_required</span></code></a>\nattribute supports a string (defining one permission) or a list/tuple of\nstrings (defining multiple permissions) that need to be fulfilled to grant\naccess.</li>\n<li>The new <a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.mixins.AccessMixin.permission_denied_message\" title=\"django.contrib.auth.mixins.AccessMixin.permission_denied_message\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">permission_denied_message</span></code></a>\nattribute allows passing a message to the <code class=\"docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code> exception.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-new-styling-for-contrib-admin\">\n<span id=\"new-styling-for-contrib-admin\"></span><h3>New styling for <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code><a class=\"headerlink\" href=\"#new-styling-for-contrib-admin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The admin sports a modern, flat design with new SVG icons which look perfect\non HiDPI screens. It still provides a fully-functional experience to <a class=\"reference external\" href=\"https://github.com/yui/yui3/wiki/Graded-Browser-Support\">YUI\u2019s\nA-grade</a> browsers. Older browser may experience varying levels of graceful\ndegradation.</p>\n</div>\n<div class=\"section\" id=\"s-running-tests-in-parallel\">\n<span id=\"running-tests-in-parallel\"></span><h3>Running tests in parallel<a class=\"headerlink\" href=\"#running-tests-in-parallel\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-test\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">test</span></code></a> command now supports a <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-test-parallel\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--parallel</span></code></a> option to run a project\u2019s tests in multiple processes in parallel.</p>\n<p>Each process gets its own database. You must ensure that different test cases\ndon\u2019t access the same resources. For instance, test cases that touch the\nfilesystem should create a temporary directory for their own use.</p>\n<p>This option is enabled by default for Django\u2019s own test suite provided:</p>\n<ul class=\"simple\">\n<li>the OS supports it (all but Windows)</li>\n<li>the database backend supports it (all the built-in backends but Oracle)</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-minor-features\">\n<span id=\"minor-features\"></span><h3>Minor features<a class=\"headerlink\" href=\"#minor-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-django-contrib-admin\">\n<span id=\"django-contrib-admin\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/admin/#module-django.contrib.admin\" title=\"django.contrib.admin: Django's admin site.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a><a class=\"headerlink\" href=\"#django-contrib-admin\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Admin views now have <code class=\"docutils literal notranslate\"><span class=\"pre\">model_admin</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">admin_site</span></code> attributes.</li>\n<li>The URL of the admin change view has been changed (was at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/admin/&lt;app&gt;/&lt;model&gt;/&lt;pk&gt;/</span></code> by default and is now at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/admin/&lt;app&gt;/&lt;model&gt;/&lt;pk&gt;/change/</span></code>). This should not affect your\napplication unless you have hardcoded admin URLs. In that case, replace those\nlinks by <a class=\"reference internal\" href=\"../../ref/contrib/admin/#admin-reverse-urls\"><span class=\"std std-ref\">reversing admin URLs</span></a> instead. Note that\nthe old URL still redirects to the new one for backwards compatibility, but\nit may be removed in a future version.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_list_select_related\" title=\"django.contrib.admin.ModelAdmin.get_list_select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_list_select_related()</span></code></a> was added to allow\nchanging the <code class=\"docutils literal notranslate\"><span class=\"pre\">select_related()</span></code> values used in the admin\u2019s changelist query\nbased on the request.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">available_apps</span></code> context variable, which lists the available\napplications for the current user, has been added to the\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.each_context\" title=\"django.contrib.admin.AdminSite.each_context\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.each_context()</span></code></a>\nmethod.</li>\n<li><a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.AdminSite.empty_value_display\" title=\"django.contrib.admin.AdminSite.empty_value_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AdminSite.empty_value_display</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin.empty_value_display\" title=\"django.contrib.admin.ModelAdmin.empty_value_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.empty_value_display</span></code></a> were added to override\nthe display of empty values in admin change list. You can also customize the\nvalue for each field.</li>\n<li>Added jQuery events <a class=\"reference internal\" href=\"../../ref/contrib/admin/javascript/#admin-javascript-inline-form-events\"><span class=\"std std-ref\">when an inline form is added or removed</span></a> on the change form page.</li>\n<li>The time picker widget includes a \u20186 p.m\u2019 option for consistency of having\npredefined options every 6 hours.</li>\n<li>JavaScript slug generation now supports Romanian characters.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-admindocs\">\n<span id=\"django-contrib-admindocs\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/admin/admindocs/#module-django.contrib.admindocs\" title=\"django.contrib.admindocs: Django's admin documentation generator.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs</span></code></a><a class=\"headerlink\" href=\"#django-contrib-admindocs\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The model section of the <code class=\"docutils literal notranslate\"><span class=\"pre\">admindocs</span></code> now also describes methods that take\narguments, rather than ignoring them.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-auth\">\n<span id=\"django-contrib-auth\"></span><h4><a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a><a class=\"headerlink\" href=\"#django-contrib-auth\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The default iteration count for the PBKDF2 password hasher has been increased\nby 20%. This backwards compatible change will not affect users who have\nsubclassed <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></code> to change the\ndefault value.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">BCryptSHA256PasswordHasher</span></code> will now update passwords if its\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rounds</span></code> attribute is changed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractBaseUser</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseUserManager</span></code> were moved to a new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.base_user</span></code> module so that they can be imported without\nincluding <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code> in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> (doing so\nraised a deprecation warning in older versions and is no longer supported in\nDjango 1.9).</li>\n<li>The permission argument of\n<a class=\"reference internal\" href=\"../../topics/auth/default/#django.contrib.auth.decorators.permission_required\" title=\"django.contrib.auth.decorators.permission_required\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">permission_required()</span></code></a> accepts all\nkinds of iterables, not only list and tuples.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/middleware/#django.contrib.auth.middleware.PersistentRemoteUserMiddleware\" title=\"django.contrib.auth.middleware.PersistentRemoteUserMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PersistentRemoteUserMiddleware</span></code></a>\nmakes it possible to use <code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_USER</span></code> for setups where the header is only\npopulated on login pages instead of every request in the session.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.password_reset()</span></code> view accepts an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">extra_email_context</span></code> parameter.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-contenttypes\">\n<span id=\"django-contrib-contenttypes\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/contenttypes/#module-django.contrib.contenttypes\" title=\"django.contrib.contenttypes: Provides generic interface to installed models.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes</span></code></a><a class=\"headerlink\" href=\"#django-contrib-contenttypes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>It\u2019s now possible to use\n<a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.order_with_respect_to\" title=\"django.db.models.Options.order_with_respect_to\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">order_with_respect_to</span></code></a> with a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-gis\">\n<span id=\"django-contrib-gis\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/gis/#module-django.contrib.gis\" title=\"django.contrib.gis: Geographic Information System (GIS) extensions for Django\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a><a class=\"headerlink\" href=\"#django-contrib-gis\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>All <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> methods have been deprecated and replaced by\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/functions/\"><span class=\"doc\">equivalent database functions</span></a>. As soon\nas the legacy methods have been replaced in your code, you should even be\nable to remove the special <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoManager</span></code> from your GIS-enabled classes.</li>\n<li>The GDAL interface now supports instantiating file-based and in-memory\n<a class=\"reference internal\" href=\"../../ref/contrib/gis/gdal/#raster-data-source-objects\"><span class=\"std std-ref\">GDALRaster objects</span></a> from raw data.\nSetters for raster properties such as projection or pixel values have\nbeen added.</li>\n<li>For PostGIS users, the new <a class=\"reference internal\" href=\"../../ref/contrib/gis/model-api/#django.contrib.gis.db.models.RasterField\" title=\"django.contrib.gis.db.models.RasterField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RasterField</span></code></a>\nallows <a class=\"reference internal\" href=\"../../ref/contrib/gis/db-api/#creating-and-saving-raster-models\"><span class=\"std std-ref\">storing GDALRaster objects</span></a>.\nIt supports automatic spatial index creation and reprojection when saving a\nmodel. It does not yet support spatial querying.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/contrib/gis/gdal/#django.contrib.gis.gdal.GDALRaster.warp\" title=\"django.contrib.gis.gdal.GDALRaster.warp\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">GDALRaster.warp()</span></code></a>\nmethod allows warping a raster by specifying target raster properties such as\norigin, width, height, or pixel size (among others).</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/contrib/gis/gdal/#django.contrib.gis.gdal.GDALRaster.transform\" title=\"django.contrib.gis.gdal.GDALRaster.transform\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">GDALRaster.transform()</span></code></a> method allows transforming a\nraster into a different spatial reference system by specifying a target\n<code class=\"docutils literal notranslate\"><span class=\"pre\">srid</span></code>.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/contrib/gis/geoip2/#django.contrib.gis.geoip2.GeoIP2\" title=\"django.contrib.gis.geoip2.GeoIP2\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GeoIP2</span></code></a> class allows using\nMaxMind\u2019s GeoLite2 databases which includes support for IPv6 addresses.</li>\n<li>The default OpenLayers library version included in widgets has been updated\nfrom 2.13 to 2.13.1.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-postgres\">\n<span id=\"django-contrib-postgres\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/postgres/#module-django.contrib.postgres\" title=\"django.contrib.postgres: PostgreSQL-specific fields and features\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code></a><a class=\"headerlink\" href=\"#django-contrib-postgres\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Added support for the <a class=\"reference internal\" href=\"../../ref/contrib/postgres/fields/#std-fieldlookup-rangefield.contained_by\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">rangefield.contained_by</span></code></a> lookup for some built\nin fields which correspond to the range fields.</li>\n<li>Added <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres.fields.JSONField</span></code>.</li>\n<li>Added <a class=\"reference internal\" href=\"../../ref/contrib/postgres/aggregates/\"><span class=\"doc\">PostgreSQL specific aggregation functions</span></a>.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../ref/contrib/postgres/functions/#django.contrib.postgres.functions.TransactionNow\" title=\"django.contrib.postgres.functions.TransactionNow\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TransactionNow</span></code></a> database\nfunction.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sessions\">\n<span id=\"django-contrib-sessions\"></span><h4><a class=\"reference internal\" href=\"../../topics/http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sessions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The session model and <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> classes for the <code class=\"docutils literal notranslate\"><span class=\"pre\">db</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cached_db</span></code> backends are refactored to allow a custom database session\nbackend to build upon them. See\n<a class=\"reference internal\" href=\"../../topics/http/sessions/#extending-database-backed-session-engines\"><span class=\"std std-ref\">Extending database-backed session engines</span></a> for more details.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-sites\">\n<span id=\"django-contrib-sites\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/sites/#module-django.contrib.sites\" title=\"django.contrib.sites: Lets you operate multiple websites from the same database and Django project\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a><a class=\"headerlink\" href=\"#django-contrib-sites\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/contrib/sites/#django.contrib.sites.shortcuts.get_current_site\" title=\"django.contrib.sites.shortcuts.get_current_site\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code></a> now handles the case\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">request.get_host()</span></code> returns <code class=\"docutils literal notranslate\"><span class=\"pre\">domain:port</span></code>, e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">example.com:80</span></code>. If the lookup fails because the host does not match a\nrecord in the database and the host has a port, the port is stripped and the\nlookup is retried with the domain part only.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-contrib-syndication\">\n<span id=\"django-contrib-syndication\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/syndication/#module-django.contrib.syndication\" title=\"django.contrib.syndication: A framework for generating syndication feeds, in RSS and Atom, quite easily.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication</span></code></a><a class=\"headerlink\" href=\"#django-contrib-syndication\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Support for multiple enclosures per feed item has been added. If multiple\nenclosures are defined on a RSS feed, an exception is raised as RSS feeds,\nunlike Atom feeds, do not support multiple enclosures per feed item.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-cache\">\n<span id=\"cache\"></span><h4>Cache<a class=\"headerlink\" href=\"#cache\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.backends.base.BaseCache</span></code> now has a <code class=\"docutils literal notranslate\"><span class=\"pre\">get_or_set()</span></code>\nmethod.</li>\n<li><a class=\"reference internal\" href=\"../../topics/http/decorators/#django.views.decorators.cache.never_cache\" title=\"django.views.decorators.cache.never_cache\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.views.decorators.cache.never_cache()</span></code></a> now sends more persuasive\nheaders (added <code class=\"docutils literal notranslate\"><span class=\"pre\">no-cache,</span> <span class=\"pre\">no-store,</span> <span class=\"pre\">must-revalidate</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">Cache-Control</span></code>)\nto better prevent caching. This was also added in Django 1.8.8.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-csrf\">\n<span id=\"csrf\"></span><h4>CSRF<a class=\"headerlink\" href=\"#csrf\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The request header\u2019s name used for CSRF authentication can be customized\nwith <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_HEADER_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_HEADER_NAME</span></code></a>.</li>\n<li>The CSRF referer header is now validated against the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_DOMAIN\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_DOMAIN</span></code></a> setting if set. See <a class=\"reference internal\" href=\"../../ref/csrf/#how-csrf-works\"><span class=\"std std-ref\">How it works</span></a> for\ndetails.</li>\n<li>The new <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_TRUSTED_ORIGINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_TRUSTED_ORIGINS</span></code></a> setting provides a way to allow\ncross-origin unsafe requests (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>) over HTTPS.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-database-backends\">\n<span id=\"database-backends\"></span><h4>Database backends<a class=\"headerlink\" href=\"#database-backends\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The PostgreSQL backend (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql_psycopg2</span></code>) is also\navailable as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql</span></code>. The old name will continue to\nbe available for backwards compatibility.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-file-storage\">\n<span id=\"file-storage\"></span><h4>File Storage<a class=\"headerlink\" href=\"#file-storage\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.get_valid_name\" title=\"django.core.files.storage.Storage.get_valid_name\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.get_valid_name()</span></code></a> is now called when\nthe <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField.upload_to\" title=\"django.db.models.FileField.upload_to\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">upload_to</span></code></a> is a callable.</li>\n<li><a class=\"reference internal\" href=\"../../ref/files/file/#django.core.files.File\" title=\"django.core.files.File\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">File</span></code></a> now has the <code class=\"docutils literal notranslate\"><span class=\"pre\">seekable()</span></code> method when using\nPython 3.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-forms\">\n<span id=\"forms\"></span><h4>Forms<a class=\"headerlink\" href=\"#forms\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../topics/forms/modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a> accepts the new <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> option\n<code class=\"docutils literal notranslate\"><span class=\"pre\">field_classes</span></code> to customize the type of the fields. See\n<a class=\"reference internal\" href=\"../../topics/forms/modelforms/#modelforms-overriding-default-fields\"><span class=\"std std-ref\">Overriding the default fields</span></a> for details.</li>\n<li>You can now specify the order in which form fields are rendered with the\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.field_order\" title=\"django.forms.Form.field_order\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">field_order</span></code></a> attribute, the <code class=\"docutils literal notranslate\"><span class=\"pre\">field_order</span></code>\nconstructor argument , or the <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.order_fields\" title=\"django.forms.Form.order_fields\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_fields()</span></code></a> method.</li>\n<li>A form prefix can be specified inside a form class, not only when\ninstantiating a form. See <a class=\"reference internal\" href=\"../../ref/forms/api/#form-prefix\"><span class=\"std std-ref\">Prefixes for forms</span></a> for details.</li>\n<li>You can now <a class=\"reference internal\" href=\"../../topics/forms/formsets/#custom-formset-form-kwargs\"><span class=\"std std-ref\">specify keyword arguments</span></a>\nthat you want to pass to the constructor of forms in a formset.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.SlugField\" title=\"django.forms.SlugField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlugField</span></code></a> now accepts an\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.SlugField.allow_unicode\" title=\"django.forms.SlugField.allow_unicode\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">allow_unicode</span></code></a> argument to allow Unicode\ncharacters in slugs.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField\" title=\"django.forms.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> now accepts a\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField.strip\" title=\"django.forms.CharField.strip\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">strip</span></code></a> argument to strip input data of leading\nand trailing whitespace.  As this defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> this is different\nbehavior from previous releases.</li>\n<li>Form fields now support the <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.disabled\" title=\"django.forms.Field.disabled\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">disabled</span></code></a> argument,\nallowing the field widget to be displayed disabled by browsers.</li>\n<li>It\u2019s now possible to customize bound fields by overriding a field\u2019s\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Field.get_bound_field\" title=\"django.forms.Field.get_bound_field\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_bound_field()</span></code></a> method.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-generic-views\">\n<span id=\"generic-views\"></span><h4>Generic Views<a class=\"headerlink\" href=\"#generic-views\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Class-based views generated using <code class=\"docutils literal notranslate\"><span class=\"pre\">as_view()</span></code> now have <code class=\"docutils literal notranslate\"><span class=\"pre\">view_class</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">view_initkwargs</span></code> attributes.</li>\n<li><a class=\"reference internal\" href=\"../../ref/utils/#django.utils.decorators.method_decorator\" title=\"django.utils.decorators.method_decorator\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">method_decorator()</span></code></a> can now be used with a list\nor tuple of decorators. It can also be used to <a class=\"reference internal\" href=\"../../topics/class-based-views/intro/#id1\"><span class=\"std std-ref\">decorate classes instead\nof methods</span></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-internationalization\">\n<span id=\"internationalization\"></span><h4>Internationalization<a class=\"headerlink\" href=\"#internationalization\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../topics/i18n/translation/#django.views.i18n.set_language\" title=\"django.views.i18n.set_language\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.views.i18n.set_language()</span></code></a> view now properly redirects to\n<a class=\"reference internal\" href=\"../../topics/i18n/translation/#url-internationalization\"><span class=\"std std-ref\">translated URLs</span></a>, when available.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.i18n.javascript_catalog()</span></code> view now works correctly\nif used multiple times with different configurations on the same page.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.timezone.make_aware\" title=\"django.utils.timezone.make_aware\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.timezone.make_aware()</span></code></a> function gained an <code class=\"docutils literal notranslate\"><span class=\"pre\">is_dst</span></code>\nargument to help resolve ambiguous times during DST transitions.</li>\n<li>You can now use locale variants supported by gettext. These are usually used\nfor languages which can be written in different scripts, for example Latin\nand Cyrillic (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">be&#64;latin</span></code>).</li>\n<li>Added the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.views.i18n.json_catalog()</span></code> view to help build a custom\nclient-side i18n library upon Django translations. It returns a JSON object\ncontaining a translations catalog, formatting settings, and a plural rule.</li>\n<li>Added the <code class=\"docutils literal notranslate\"><span class=\"pre\">name_translated</span></code> attribute to the object returned by the\n<a class=\"reference internal\" href=\"../../topics/i18n/translation/#std-templatetag-get_language_info\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">get_language_info</span></code></a> template tag. Also added a corresponding template\nfilter: <a class=\"reference internal\" href=\"../../topics/i18n/translation/#std-templatefilter-language_name_translated\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">language_name_translated</span></code></a>.</li>\n<li>You can now run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-compilemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">compilemessages</span></code></a> from the root directory of your\nproject and it will find all the app message files that were created by\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemessages</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemessages\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemessages</span></code></a> now calls <code class=\"docutils literal notranslate\"><span class=\"pre\">xgettext</span></code> once per locale directory\nrather than once per translatable file. This speeds up localization builds.</li>\n<li><a class=\"reference internal\" href=\"../../topics/i18n/translation/#std-templatetag-blocktrans\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">blocktrans</span></code></a> supports assigning its output to a variable using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">asvar</span></code>.</li>\n<li>Two new languages are available: Colombian Spanish and Scottish Gaelic.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-management-commands\">\n<span id=\"management-commands\"></span><h4>Management Commands<a class=\"headerlink\" href=\"#management-commands\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>The new <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-sendtestemail\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">sendtestemail</span></code></a> command lets you send a test email to\neasily confirm that email sending through Django is working.</li>\n<li>To increase the readability of the SQL code generated by\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-sqlmigrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">sqlmigrate</span></code></a>, the SQL code generated for each migration operation is\npreceded by the operation\u2019s description.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> command output is now deterministically ordered.\nMoreover, when the <code class=\"docutils literal notranslate\"><span class=\"pre\">--output</span></code> option is specified, it also shows a progress\nbar in the terminal.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-createcachetable\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">createcachetable</span></code></a> command now has a <code class=\"docutils literal notranslate\"><span class=\"pre\">--dry-run</span></code> flag to\nprint out the SQL rather than execute it.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-startapp\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">startapp</span></code></a> command creates an <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> file. Since it doesn\u2019t\nuse <code class=\"docutils literal notranslate\"><span class=\"pre\">default_app_config</span></code> (<a class=\"reference internal\" href=\"../../ref/applications/#configuring-applications-ref\"><span class=\"std std-ref\">a discouraged API</span></a>), you must specify the app config\u2019s path,\ne.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'polls.apps.PollsConfig'</span></code>, in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> for it to be\nused (instead of just <code class=\"docutils literal notranslate\"><span class=\"pre\">'polls'</span></code>).</li>\n<li>When using the PostgreSQL backend, the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dbshell\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dbshell</span></code></a> command can connect\nto the database using the password from your settings file (instead of\nrequiring it to be manually entered).</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django</span></code> package may be run as a script, i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-m</span> <span class=\"pre\">django</span></code>,\nwhich will behave the same as <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code>.</li>\n<li>Management commands that have the <code class=\"docutils literal notranslate\"><span class=\"pre\">--noinput</span></code> option now also take\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--no-input</span></code> as an alias for that option.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-migrations\">\n<span id=\"migrations\"></span><h4>Migrations<a class=\"headerlink\" href=\"#migrations\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul>\n<li><p class=\"first\">Initial migrations are now marked with an <a class=\"reference internal\" href=\"../../topics/migrations/#django.db.migrations.Migration.initial\" title=\"django.db.migrations.Migration.initial\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">initial</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code></a> class attribute which allows\n<a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-migrate-fake-initial\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">migrate</span> <span class=\"pre\">--fake-initial</span></code></a> to more easily detect initial migrations.</p>\n</li>\n<li><p class=\"first\">Added support for serialization of <code class=\"docutils literal notranslate\"><span class=\"pre\">functools.partial</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code>\ninstances.</p>\n</li>\n<li><p class=\"first\">When supplying <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as a value in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MIGRATION_MODULES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIGRATION_MODULES</span></code></a>, Django\nwill consider the app an app without migrations.</p>\n</li>\n<li><p class=\"first\">When applying migrations, the \u201cRendering model states\u201d step that\u2019s displayed\nwhen running migrate with verbosity 2 or higher now computes only the states\nfor the migrations that have already been applied. The model states for\nmigrations being applied are generated on demand, drastically reducing the\namount of required memory.</p>\n<p>However, this improvement is not available when unapplying migrations and\ntherefore still requires the precomputation and storage of the intermediate\nmigration states.</p>\n<p>This improvement also requires that Django no longer supports mixed migration\nplans. Mixed plans consist of a list of migrations where some are being\napplied and others are being unapplied. This was never officially supported\nand never had a public API that supports this behavior.</p>\n</li>\n<li><p class=\"first\">The <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-squashmigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">squashmigrations</span></code></a> command now supports specifying the starting\nmigration from which migrations will be squashed.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-models\">\n<span id=\"models\"></span><h4>Models<a class=\"headerlink\" href=\"#models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.bulk_create()</span></code></a>\nnow works on proxy models.</li>\n<li>Database configuration gained a <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-TIME_ZONE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code></a>\noption for interacting with databases that store datetimes in local time and\ndon\u2019t support time zones when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../ref/models/relations/#django.db.models.fields.related.RelatedManager.set\" title=\"django.db.models.fields.related.RelatedManager.set\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">RelatedManager.set()</span></code></a> method to the related\nmanagers created by <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/models/relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a> method on\na reverse foreign key now has a <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> parameter to allow executing one\nquery regardless of the number of objects being added rather than one query\nper object.</li>\n<li>Added the <code class=\"docutils literal notranslate\"><span class=\"pre\">keep_parents</span></code> parameter to <a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.delete()</span></code></a> to allow deleting only a child\u2019s data in a\nmodel that uses multi-table inheritance.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.delete()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.delete()</span></code></a> return\nthe number of objects deleted.</li>\n<li>Added a system check to prevent defining both <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.ordering</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">order_with_respect_to</span></code> on the same model.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-year\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">Date</span> <span class=\"pre\">and</span> <span class=\"pre\">time</span></code></a> lookups can be chained with other lookups\n(such as <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-exact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">exact</span></code></a>, <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-gt\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">gt</span></code></a>, <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-lt\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">lt</span></code></a>, etc.). For example:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Entry.objects.filter(pub_date__month__gt=6)</span></code>.</li>\n<li>Time lookups (hour, minute, second) are now supported by\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.TimeField\" title=\"django.db.models.TimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TimeField</span></code></a> for all database backends. Support for\nbackends other than SQLite was added but undocumented in Django 1.7.</li>\n<li>You can specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> parameter of the\n<a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.Avg\" title=\"django.db.models.Avg\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Avg</span></code></a> aggregate in order to aggregate over\nnon-numeric columns, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">DurationField</span></code>.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../ref/models/querysets/#std-fieldlookup-date\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">date</span></code></a> lookup to <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>\nto allow querying the field by only the date portion.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Greatest\" title=\"django.db.models.functions.Greatest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Greatest</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Least\" title=\"django.db.models.functions.Least\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Least</span></code></a> database functions.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Now\" title=\"django.db.models.functions.Now\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Now</span></code></a> database function, which\nreturns the current date and time.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/lookups/#django.db.models.Transform\" title=\"django.db.models.Transform\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Transform</span></code></a> is now a subclass of\n<a class=\"reference internal\" href=\"../../ref/models/expressions/#func-expressions\"><span class=\"std std-ref\">Func()</span></a> which allows <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code>s to be used on\nthe right hand side of an expression, just like regular <code class=\"docutils literal notranslate\"><span class=\"pre\">Func</span></code>s. This\nallows registering some database functions like\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Length\" title=\"django.db.models.functions.Length\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Length</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Lower\" title=\"django.db.models.functions.Lower\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Lower</span></code></a>, and\n<a class=\"reference internal\" href=\"../../ref/models/database-functions/#django.db.models.functions.Upper\" title=\"django.db.models.functions.Upper\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Upper</span></code></a> as transforms.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.SlugField\" title=\"django.db.models.SlugField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlugField</span></code></a> now accepts an\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.SlugField.allow_unicode\" title=\"django.db.models.SlugField.allow_unicode\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">allow_unicode</span></code></a> argument to allow Unicode\ncharacters in slugs.</li>\n<li>Added support for referencing annotations in <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.distinct()</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">connection.queries</span></code> shows queries with substituted parameters on SQLite.</li>\n<li><a class=\"reference internal\" href=\"../../ref/models/expressions/\"><span class=\"doc\">Query expressions</span></a> can now be used when\ncreating new model instances using <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">bulk_create()</span></code>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-requests-and-responses\">\n<span id=\"requests-and-responses\"></span><h4>Requests and Responses<a class=\"headerlink\" href=\"#requests-and-responses\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Unless <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.reason_phrase\" title=\"django.http.HttpResponse.reason_phrase\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.reason_phrase</span></code></a> is explicitly set, it now is\ndetermined by the current value of <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse.status_code\" title=\"django.http.HttpResponse.status_code\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.status_code</span></code></a>. Modifying the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">status_code</span></code> outside of the constructor will also modify the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code>.</li>\n<li>The debug view now shows details of chained exceptions on Python 3.</li>\n<li>The default 40x error views now accept a second positional parameter, the\nexception that triggered the view.</li>\n<li>View error handlers now support\n<a class=\"reference internal\" href=\"../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a>, commonly used with\nclass-based views.</li>\n<li>Exceptions raised by the <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method are now passed to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">process_exception()</span></code> method of each middleware.</li>\n<li>Request middleware can now set <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.urlconf\" title=\"django.http.HttpRequest.urlconf\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpRequest.urlconf</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to revert any changes made\nby previous middleware and return to using the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ROOT_URLCONF\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ROOT_URLCONF</span></code></a>.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DISALLOWED_USER_AGENTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DISALLOWED_USER_AGENTS</span></code></a> check in\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.CommonMiddleware\" title=\"django.middleware.common.CommonMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CommonMiddleware</span></code></a> now raises a\n<a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.PermissionDenied\" title=\"django.core.exceptions.PermissionDenied\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">PermissionDenied</span></code></a> exception as opposed to\nreturning an <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponseForbidden\" title=\"django.http.HttpResponseForbidden\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseForbidden</span></code></a> so that\n<a class=\"reference internal\" href=\"../../ref/urls/#django.conf.urls.handler403\" title=\"django.conf.urls.handler403\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">handler403</span></code></a> is invoked.</li>\n<li>Added <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.get_port\" title=\"django.http.HttpRequest.get_port\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.get_port()</span></code></a> to\nfetch the originating port of the request.</li>\n<li>Added the <code class=\"docutils literal notranslate\"><span class=\"pre\">json_dumps_params</span></code> parameter to\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.JsonResponse\" title=\"django.http.JsonResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JsonResponse</span></code></a> to allow passing keyword arguments to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">json.dumps()</span></code> call used to generate the response.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.BrokenLinkEmailsMiddleware\" title=\"django.middleware.common.BrokenLinkEmailsMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BrokenLinkEmailsMiddleware</span></code></a> now\nignores 404s when the referer is equal to the requested URL. To circumvent\nthe empty referer check already implemented, some web bots set the referer to\nthe requested URL.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-templates\">\n<span id=\"templates\"></span><h4>Templates<a class=\"headerlink\" href=\"#templates\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Template tags created with the <a class=\"reference internal\" href=\"../../howto/custom-template-tags/#django.template.Library.simple_tag\" title=\"django.template.Library.simple_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">simple_tag()</span></code></a>\nhelper can now store results in a template variable by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">as</span></code>\nargument.</li>\n<li>Added a <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.setdefault\" title=\"django.template.Context.setdefault\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Context.setdefault()</span></code></a>\nmethod.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/logging/#django-template-logger\"><span class=\"std std-ref\">django.template</span></a> logger was added and\nincludes the following messages:<ul>\n<li>A <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code> level message for missing context variables.</li>\n<li>A <code class=\"docutils literal notranslate\"><span class=\"pre\">WARNING</span></code> level message for uncaught exceptions raised\nduring the rendering of an <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">include</span> <span class=\"pre\">%}</span></code> when debug mode is off\n(helpful since <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">include</span> <span class=\"pre\">%}</span></code> silences the exception and returns an\nempty string).</li>\n</ul>\n</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-firstof\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">firstof</span></code></a> template tag supports storing the output in a variable\nusing \u2018as\u2019.</li>\n<li><a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context.update\" title=\"django.template.Context.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Context.update()</span></code></a> can now be used as\na context manager.</li>\n<li>Django template loaders can now extend templates recursively.</li>\n<li>The debug page template postmortem now include output from each engine that\nis installed.</li>\n<li><a class=\"reference internal\" href=\"../../howto/custom-template-backend/#template-debug-integration\"><span class=\"std std-ref\">Debug page integration</span></a> for custom\ntemplate engines was added.</li>\n<li>The <a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend gained\nthe ability to register libraries and builtins explicitly through the\ntemplate <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">timesince</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">timeuntil</span></code> filters were improved to deal with leap\nyears when given large time spans.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">include</span></code> tag now caches parsed templates objects during template\nrendering, speeding up reuse in places such as for loops.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-tests\">\n<span id=\"tests\"></span><h4>Tests<a class=\"headerlink\" href=\"#tests\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Added the <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Response.json\" title=\"django.test.Response.json\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">json()</span></code></a> method to test client\nresponses to give access to the response body as JSON.</li>\n<li>Added the <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client.force_login\" title=\"django.test.Client.force_login\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">force_login()</span></code></a> method to the test\nclient. Use this method to simulate the effect of a user logging into the\nsite while skipping the authentication and verification steps of\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.Client.login\" title=\"django.test.Client.login\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">login()</span></code></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-urls\">\n<span id=\"urls\"></span><h4>URLs<a class=\"headerlink\" href=\"#urls\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Regular expression lookaround assertions are now allowed in URL patterns.</li>\n<li>The application namespace can now be set using an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> attribute\non the included module or object. It can also be set by passing a 2-tuple\nof (&lt;list of patterns&gt;, &lt;application namespace&gt;) as the first argument to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code>.</li>\n<li>System checks have been added for common URL pattern mistakes.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-validators\">\n<span id=\"validators\"></span><h4>Validators<a class=\"headerlink\" href=\"#validators\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<ul class=\"simple\">\n<li>Added <a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.int_list_validator\" title=\"django.core.validators.int_list_validator\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.core.validators.int_list_validator()</span></code></a> to generate\nvalidators of strings containing integers separated with a custom character.</li>\n<li><a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.EmailValidator\" title=\"django.core.validators.EmailValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailValidator</span></code></a> now limits the length of\ndomain name labels to 63 characters per <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc1034.html\"><strong>RFC 1034</strong></a>.</li>\n<li>Added <a class=\"reference internal\" href=\"../../ref/validators/#django.core.validators.validate_unicode_slug\" title=\"django.core.validators.validate_unicode_slug\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">validate_unicode_slug()</span></code></a> to validate slugs\nthat may contain Unicode characters.</li>\n</ul>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-backwards-incompatible-changes-in-1-9\">\n<span id=\"s-backwards-incompatible-1-9\"></span><span id=\"backwards-incompatible-changes-in-1-9\"></span><span id=\"backwards-incompatible-1-9\"></span><h2>Backwards incompatible changes in 1.9<a class=\"headerlink\" href=\"#backwards-incompatible-changes-in-1-9\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">In addition to the changes outlined in this section, be sure to review the\n<a class=\"reference internal\" href=\"#removed-features-1-9\"><span class=\"std std-ref\">Features removed in 1.9</span></a> for the features that have reached the end of\ntheir deprecation cycle and therefore been removed. If you haven\u2019t updated\nyour code within the deprecation timeline for a given feature, its removal\nmay appear as a backwards incompatible change.</p>\n</div>\n<div class=\"section\" id=\"s-database-backend-api\">\n<span id=\"database-backend-api\"></span><h3>Database backend API<a class=\"headerlink\" href=\"#database-backend-api\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul>\n<li><p class=\"first\">A couple of new tests rely on the ability of the backend to introspect column\ndefaults (returning the result as <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.default</span></code>). You can set the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">can_introspect_default</span></code> database feature to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if your backend\ndoesn\u2019t implement this. You may want to review the implementation on the\nbackends that Django includes for reference (<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/24245\">#24245</a>).</p>\n</li>\n<li><p class=\"first\">Registering a global adapter or converter at the level of the DB-API module\nto handle time zone information of <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> values passed\nas query parameters or returned as query results on databases that don\u2019t\nsupport time zones is discouraged. It can conflict with other libraries.</p>\n<p>The recommended way to add a time zone to <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> values\nfetched from the database is to register a converter for <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code>\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseOperations.get_db_converters()</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">needs_datetime_string_cast</span></code> database feature was removed. Database\nbackends that set it must register a converter instead, as explained above.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseOperations.value_to_db_&lt;type&gt;()</span></code> methods were renamed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">adapt_&lt;type&gt;field_value()</span></code> to mirror the <code class=\"docutils literal notranslate\"><span class=\"pre\">convert_&lt;type&gt;field_value()</span></code>\nmethods.</p>\n</li>\n<li><p class=\"first\">To use the new <code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code> lookup, third-party database backends may need to\nimplement the <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseOperations.datetime_cast_date_sql()</span></code> method.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseOperations.time_extract_sql()</span></code> method was added. It calls the\nexisting <code class=\"docutils literal notranslate\"><span class=\"pre\">date_extract_sql()</span></code> method. This method is overridden by the\nSQLite backend to add time lookups (hour, minute, second) to\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.TimeField\" title=\"django.db.models.TimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TimeField</span></code></a>, and may be needed by third-party\ndatabase backends.</p>\n</li>\n<li><p class=\"first\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseOperations.datetime_cast_sql()</span></code> method (not to be confused\nwith <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseOperations.datetime_cast_date_sql()</span></code> mentioned above)\nhas been removed. This method served to format dates on Oracle long\nbefore 1.0, but hasn\u2019t been overridden by any core backend in years\nand hasn\u2019t been called anywhere in Django\u2019s code or tests.</p>\n</li>\n<li><p class=\"first\">In order to support test parallelization, you must implement the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseCreation._clone_test_db()</span></code> method and set\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseFeatures.can_clone_databases</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code>. You may have to adjust\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseCreation.get_test_db_clone_settings()</span></code>.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-default-settings-that-were-tuples-are-now-lists\">\n<span id=\"default-settings-that-were-tuples-are-now-lists\"></span><h3>Default settings that were tuples are now lists<a class=\"headerlink\" href=\"#default-settings-that-were-tuples-are-now-lists\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The default settings in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.global_settings</span></code> were a combination of\nlists and tuples. All settings that were formerly tuples are now lists.</p>\n</div>\n<div class=\"section\" id=\"s-is-usable-attribute-on-template-loaders-is-removed\">\n<span id=\"is-usable-attribute-on-template-loaders-is-removed\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">is_usable</span></code> attribute on template loaders is removed<a class=\"headerlink\" href=\"#is-usable-attribute-on-template-loaders-is-removed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django template loaders previously required an <code class=\"docutils literal notranslate\"><span class=\"pre\">is_usable</span></code> attribute to be\ndefined. If a loader was configured in the template settings and this attribute\nwas <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the loader would be silently ignored. In practice, this was only\nused by the egg loader to detect if setuptools was installed. The <code class=\"docutils literal notranslate\"><span class=\"pre\">is_usable</span></code>\nattribute is now removed and the egg loader instead fails at runtime if\nsetuptools is not installed.</p>\n</div>\n<div class=\"section\" id=\"s-related-set-direct-assignment\">\n<span id=\"related-set-direct-assignment\"></span><h3>Related set direct assignment<a class=\"headerlink\" href=\"#related-set-direct-assignment\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Direct assignment of related objects in the ORM used to perform a <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code>\nfollowed by a call to <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code>. This caused needlessly large data changes and\nprevented using the <a class=\"reference internal\" href=\"../../ref/signals/#django.db.models.signals.m2m_changed\" title=\"django.db.models.signals.m2m_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code></a> signal to\ntrack individual changes in many-to-many relations.</p>\n<p>Direct assignment now relies on the new\n<a class=\"reference internal\" href=\"../../ref/models/relations/#django.db.models.fields.related.RelatedManager.set\" title=\"django.db.models.fields.related.RelatedManager.set\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set()</span></code></a> method on related\nmanagers which by default only processes changes between the existing related\nset and the one that\u2019s newly assigned. The previous behavior can be restored by\nreplacing direct assignment by a call to <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> with the keyword argument\n<code class=\"docutils literal notranslate\"><span class=\"pre\">clear=True</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code>, and therefore <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code>, internally rely on direct\nassignment for many-to-many relations and as a consequence now use the new\nbehavior.</p>\n</div>\n<div class=\"section\" id=\"s-filesystem-based-template-loaders-catch-more-specific-exceptions\">\n<span id=\"filesystem-based-template-loaders-catch-more-specific-exceptions\"></span><h3>Filesystem-based template loaders catch more specific exceptions<a class=\"headerlink\" href=\"#filesystem-based-template-loaders-catch-more-specific-exceptions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When using the <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.loaders.filesystem.Loader\" title=\"django.template.loaders.filesystem.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">filesystem.Loader</span></code></a>\nor <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.loaders.app_directories.Loader\" title=\"django.template.loaders.app_directories.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">app_directories.Loader</span></code></a>\ntemplate loaders, earlier versions of Django raised a\n<a class=\"reference internal\" href=\"../../topics/templates/#django.template.TemplateDoesNotExist\" title=\"django.template.TemplateDoesNotExist\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TemplateDoesNotExist</span></code></a> error if a template source existed\nbut was unreadable. This could happen under many circumstances, such as if\nDjango didn\u2019t have permissions to open the file, or if the template source was\na directory. Now, Django only silences the exception if the template source\ndoes not exist. All other situations result in the original <code class=\"docutils literal notranslate\"><span class=\"pre\">IOError</span></code> being\nraised.</p>\n</div>\n<div class=\"section\" id=\"s-http-redirects-no-longer-forced-to-absolute-uris\">\n<span id=\"http-redirects-no-longer-forced-to-absolute-uris\"></span><h3>HTTP redirects no longer forced to absolute URIs<a class=\"headerlink\" href=\"#http-redirects-no-longer-forced-to-absolute-uris\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Relative redirects are no longer converted to absolute URIs. <span class=\"target\" id=\"index-1\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc2616.html\"><strong>RFC 2616</strong></a>\nrequired the <code class=\"docutils literal notranslate\"><span class=\"pre\">Location</span></code> header in redirect responses to be an absolute URI,\nbut it has been superseded by <span class=\"target\" id=\"index-2\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc7231.html\"><strong>RFC 7231</strong></a> which allows relative URIs in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Location</span></code>, recognizing the actual practice of user agents, almost all of\nwhich support them.</p>\n<p>Consequently, the expected URLs passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">assertRedirects</span></code> should generally\nno longer include the scheme and domain part of the URLs. For example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.assertRedirects(response,</span> <span class=\"pre\">'http://testserver/some-url/')</span></code> should be\nreplaced by <code class=\"docutils literal notranslate\"><span class=\"pre\">self.assertRedirects(response,</span> <span class=\"pre\">'/some-url/')</span></code> (unless the\nredirection specifically contained an absolute URL).</p>\n<p>In the rare case that you need the old behavior (discovered with an ancient\nversion of Apache with <code class=\"docutils literal notranslate\"><span class=\"pre\">mod_scgi</span></code> that interprets a relative redirect as an\n\u201cinternal redirect\u201d), you can restore it by writing a custom middleware:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">LocationHeaderFix</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">process_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;Location&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"p\">:</span>\n            <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Location&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">build_absolute_uri</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Location&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-dropped-support-for-postgresql-9-0\">\n<span id=\"dropped-support-for-postgresql-9-0\"></span><h3>Dropped support for PostgreSQL 9.0<a class=\"headerlink\" href=\"#dropped-support-for-postgresql-9-0\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Upstream support for PostgreSQL 9.0 ended in September 2015. As a consequence,\nDjango 1.9 sets 9.1 as the minimum PostgreSQL version it officially supports.</p>\n</div>\n<div class=\"section\" id=\"s-dropped-support-for-oracle-11-1\">\n<span id=\"dropped-support-for-oracle-11-1\"></span><h3>Dropped support for Oracle 11.1<a class=\"headerlink\" href=\"#dropped-support-for-oracle-11-1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Upstream support for Oracle 11.1 ended in August 2015. As a consequence, Django\n1.9 sets 11.2 as the minimum Oracle version it officially supports.</p>\n</div>\n<div class=\"section\" id=\"s-bulk-behavior-of-add-method-of-related-managers\">\n<span id=\"bulk-behavior-of-add-method-of-related-managers\"></span><h3>Bulk behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> method of related managers<a class=\"headerlink\" href=\"#bulk-behavior-of-add-method-of-related-managers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To improve performance, the <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> methods of the related managers created\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GenericForeignKey</span></code> changed from a series of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code> calls to a single <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code> call. The change means\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">post_save</span></code> signals aren\u2019t sent anymore. You can use\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk=False</span></code> keyword argument to revert to the previous behavior.</p>\n</div>\n<div class=\"section\" id=\"s-template-loaderorigin-and-stringorigin-are-removed\">\n<span id=\"template-loaderorigin-and-stringorigin-are-removed\"></span><h3>Template <code class=\"docutils literal notranslate\"><span class=\"pre\">LoaderOrigin</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">StringOrigin</span></code> are removed<a class=\"headerlink\" href=\"#template-loaderorigin-and-stringorigin-are-removed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In previous versions of Django, when a template engine was initialized with\ndebug as <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.LoaderOrigin</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base.StringOrigin</span></code> was set as the origin attribute on the\ntemplate object. These classes have been combined into\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.base.Origin\" title=\"django.template.base.Origin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Origin</span></code></a> and is now always set regardless of the\nengine debug setting. For a minimal level of backwards compatibility, the old\nclass names will be kept as aliases to the new <code class=\"docutils literal notranslate\"><span class=\"pre\">Origin</span></code> class until\nDjango 2.0.</p>\n</div>\n<div class=\"section\" id=\"s-changes-to-the-default-logging-configuration\">\n<span id=\"s-default-logging-changes-19\"></span><span id=\"changes-to-the-default-logging-configuration\"></span><span id=\"default-logging-changes-19\"></span><h3>Changes to the default logging configuration<a class=\"headerlink\" href=\"#changes-to-the-default-logging-configuration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To make it easier to write custom logging configurations, Django\u2019s default\nlogging configuration no longer defines <code class=\"docutils literal notranslate\"><span class=\"pre\">django.request</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.security</span></code> loggers. Instead, it defines a single <code class=\"docutils literal notranslate\"><span class=\"pre\">django</span></code> logger,\nfiltered at the <code class=\"docutils literal notranslate\"><span class=\"pre\">INFO</span></code> level, with two handlers:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">console</span></code>: filtered at the <code class=\"docutils literal notranslate\"><span class=\"pre\">INFO</span></code> level and only active if <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG=True</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">mail_admins</span></code>: filtered at the <code class=\"docutils literal notranslate\"><span class=\"pre\">ERROR</span></code> level and only active if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG=False</span></code>.</li>\n</ul>\n<p>If you aren\u2019t overriding Django\u2019s default logging, you should see minimal\nchanges in behavior, but you might see some new logging to the <code class=\"docutils literal notranslate\"><span class=\"pre\">runserver</span></code>\nconsole, for example.</p>\n<p>If you are overriding Django\u2019s default logging, you should check to see how\nyour configuration merges with the new defaults.</p>\n</div>\n<div class=\"section\" id=\"s-httprequest-details-in-error-reporting\">\n<span id=\"httprequest-details-in-error-reporting\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> details in error reporting<a class=\"headerlink\" href=\"#httprequest-details-in-error-reporting\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It was redundant to display the full details of the\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> each time it appeared as a stack frame\nvariable in the HTML version of the debug page and error email. Thus, the HTTP\nrequest will now display the same standard representation as other variables\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">repr(request)</span></code>). As a result, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ExceptionReporterFilter.get_request_repr()</span></code> method and the undocumented\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.http.build_request_repr()</span></code> function were removed.</p>\n<p>The contents of the text version of the email were modified to provide a\ntraceback of the same structure as in the case of AJAX requests. The traceback\ndetails are rendered by the <code class=\"docutils literal notranslate\"><span class=\"pre\">ExceptionReporter.get_traceback_text()</span></code> method.</p>\n</div>\n<div class=\"section\" id=\"s-removal-of-time-zone-aware-global-adapters-and-converters-for-datetimes\">\n<span id=\"removal-of-time-zone-aware-global-adapters-and-converters-for-datetimes\"></span><h3>Removal of time zone aware global adapters and converters for datetimes<a class=\"headerlink\" href=\"#removal-of-time-zone-aware-global-adapters-and-converters-for-datetimes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django no longer registers global adapters and converters for managing time\nzone information on <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> values sent to the database as\nquery parameters or read from the database in query results. This change\naffects projects that meet all the following conditions:</p>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> setting is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</li>\n<li>The database is SQLite, MySQL, Oracle, or a third-party database that\ndoesn\u2019t support time zones. In doubt, you can check the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">connection.features.supports_timezones</span></code>.</li>\n<li>The code queries the database outside of the ORM, typically with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cursor.execute(sql,</span> <span class=\"pre\">params)</span></code>.</li>\n</ul>\n<p>If you\u2019re passing aware <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> parameters to such\nqueries, you should turn them into naive datetimes in UTC:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n<span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">make_naive</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you fail to do so, the conversion will be performed as in earlier versions\n(with a deprecation warning) up until Django 1.11. Django 2.0 won\u2019t perform any\nconversion, which may result in data corruption.</p>\n<p>If you\u2019re reading <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> values from the results, they\nwill be naive instead of aware. You can compensate as follows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">make_aware</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You don\u2019t need any of this if you\u2019re querying the database through the ORM,\neven if you\u2019re using <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.raw\" title=\"django.db.models.query.QuerySet.raw\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">raw()</span></code></a>\nqueries. The ORM takes care of managing time zone information.</p>\n</div>\n<div class=\"section\" id=\"s-template-tag-modules-are-imported-when-templates-are-configured\">\n<span id=\"template-tag-modules-are-imported-when-templates-are-configured\"></span><h3>Template tag modules are imported when templates are configured<a class=\"headerlink\" href=\"#template-tag-modules-are-imported-when-templates-are-configured\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend now\nperforms discovery on installed template tag modules when instantiated. This\nupdate enables libraries to be provided explicitly via the <code class=\"docutils literal notranslate\"><span class=\"pre\">'libraries'</span></code>\nkey of <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> when defining a\n<a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend. Import\nor syntax errors in template tag modules now fail early at instantiation time\nrather than when a template with a <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag is first\ncompiled.</p>\n</div>\n<div class=\"section\" id=\"s-django-template-base-add-to-builtins-is-removed\">\n<span id=\"django-template-base-add-to-builtins-is-removed\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base.add_to_builtins()</span></code> is removed<a class=\"headerlink\" href=\"#django-template-base-add-to-builtins-is-removed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Although it was a private API, projects commonly used <code class=\"docutils literal notranslate\"><span class=\"pre\">add_to_builtins()</span></code> to\nmake template tags and filters available without using the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag. This API has been formalized. Projects should now\ndefine built-in libraries via the <code class=\"docutils literal notranslate\"><span class=\"pre\">'builtins'</span></code> key of <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> when defining a\n<a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a> backend.</p>\n</div>\n<div class=\"section\" id=\"s-simple-tag-now-wraps-tag-output-in-conditional-escape\">\n<span id=\"s-simple-tag-conditional-escape-fix\"></span><span id=\"simple-tag-now-wraps-tag-output-in-conditional-escape\"></span><span id=\"simple-tag-conditional-escape-fix\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> now wraps tag output in <code class=\"docutils literal notranslate\"><span class=\"pre\">conditional_escape</span></code><a class=\"headerlink\" href=\"#simple-tag-now-wraps-tag-output-in-conditional-escape\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In general, template tags do not autoescape their contents, and this behavior is\n<a class=\"reference internal\" href=\"../../howto/custom-template-tags/#tags-auto-escaping\"><span class=\"std std-ref\">documented</span></a>. For tags like\n<a class=\"reference internal\" href=\"../../howto/custom-template-tags/#django.template.Library.inclusion_tag\" title=\"django.template.Library.inclusion_tag\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">inclusion_tag</span></code></a>, this is not a problem because\nthe included template will perform autoescaping. For <code class=\"docutils literal notranslate\"><span class=\"pre\">assignment_tag()</span></code>,\nthe output will be escaped when it is used as a variable in the template.</p>\n<p>For the intended use cases of <a class=\"reference internal\" href=\"../../howto/custom-template-tags/#django.template.Library.simple_tag\" title=\"django.template.Library.simple_tag\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code></a>,\nhowever, it is very easy to end up with incorrect HTML and possibly an XSS\nexploit. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">simple_tag</span><span class=\"p\">(</span><span class=\"n\">takes_context</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">greeting</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;Hello </span><span class=\"si\">{0}</span><span class=\"s2\">!&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;request&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In older versions of Django, this will be an XSS issue because\n<code class=\"docutils literal notranslate\"><span class=\"pre\">user.first_name</span></code> is not escaped.</p>\n<p>In Django 1.9, this is fixed: if the template context has <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape=True</span></code>\nset (the default), then <code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> will wrap the output of the tag function\nwith <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.conditional_escape\" title=\"django.utils.html.conditional_escape\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">conditional_escape()</span></code></a>.</p>\n<p>To fix your <code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code>s, it is best to apply the following practices:</p>\n<ul class=\"simple\">\n<li>Any code that generates HTML should use either the template system or\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.format_html\" title=\"django.utils.html.format_html\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">format_html()</span></code></a>.</li>\n<li>If the output of a <code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> needs escaping, use\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.escape\" title=\"django.utils.html.escape\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">escape()</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.conditional_escape\" title=\"django.utils.html.conditional_escape\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">conditional_escape()</span></code></a>.</li>\n<li>If you are absolutely certain that you are outputting HTML from a trusted\nsource (e.g. a CMS field that stores HTML entered by admins), you can mark it\nas such using <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.mark_safe\" title=\"django.utils.safestring.mark_safe\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">mark_safe()</span></code></a>.</li>\n</ul>\n<p>Tags that follow these rules will be correct and safe whether they are run on\nDjango 1.9+ or earlier.</p>\n</div>\n<div class=\"section\" id=\"s-paginator-page-range\">\n<span id=\"paginator-page-range\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator.page_range</span></code><a class=\"headerlink\" href=\"#paginator-page-range\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../ref/paginator/#django.core.paginator.Paginator.page_range\" title=\"django.core.paginator.Paginator.page_range\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Paginator.page_range</span></code></a> is\nnow an iterator instead of a list.</p>\n<p>In versions of Django previous to 1.8, <code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator.page_range</span></code> returned a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> in Python 2 and a <code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code> in Python 3. Django 1.8 consistently\nreturned a list, but an iterator is more efficient.</p>\n<p>Existing code that depends on <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> specific features, such as indexing,\ncan be ported by converting the iterator into a <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> using <code class=\"docutils literal notranslate\"><span class=\"pre\">list()</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-implicit-queryset-in-lookup-removed\">\n<span id=\"implicit-queryset-in-lookup-removed\"></span><h3>Implicit <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> lookup removed<a class=\"headerlink\" href=\"#implicit-queryset-in-lookup-removed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In earlier versions, queries such as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">related_id</span><span class=\"o\">=</span><span class=\"n\">RelatedModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>would implicitly convert to:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Model</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">related_id__in</span><span class=\"o\">=</span><span class=\"n\">RelatedModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>resulting in SQL like <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;related_id</span> <span class=\"pre\">IN</span> <span class=\"pre\">(SELECT</span> <span class=\"pre\">id</span> <span class=\"pre\">FROM</span> <span class=\"pre\">...)&quot;</span></code>.</p>\n<p>This implicit <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> no longer happens so the \u201cIN\u201d SQL is now \u201c=\u201d, and if the\nsubquery returns multiple results, at least some databases will throw an error.</p>\n</div>\n<div class=\"section\" id=\"s-contrib-admin-browser-support\">\n<span id=\"s-admin-browser-support-19\"></span><span id=\"contrib-admin-browser-support\"></span><span id=\"admin-browser-support-19\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code> browser support<a class=\"headerlink\" href=\"#contrib-admin-browser-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The admin no longer supports Internet Explorer 8 and below, as these browsers\nhave reached end-of-life.</p>\n<p>CSS and images to support Internet Explorer 6 and 7 have been removed. PNG and\nGIF icons have been replaced with SVG icons, which are not supported by\nInternet Explorer 8 and earlier.</p>\n<p>The jQuery library embedded in the admin has been upgraded from version 1.11.2\nto 2.1.4. jQuery 2.x has the same API as jQuery 1.x, but does not support\nInternet Explorer 6, 7, or 8, allowing for better performance and a smaller\nfile size. If you need to support IE8 and must also use the latest version of\nDjango, you can override the admin\u2019s copy of jQuery with your own by creating\na Django application with this structure:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>app/static/admin/js/vendor/\n    jquery.js\n    jquery.min.js\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-syntaxerror-when-installing-django-setuptools-5-5-x\">\n<span id=\"s-syntax-error-old-setuptools-django-19\"></span><span id=\"syntaxerror-when-installing-django-setuptools-5-5-x\"></span><span id=\"syntax-error-old-setuptools-django-19\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SyntaxError</span></code> when installing Django setuptools 5.5.x<a class=\"headerlink\" href=\"#syntaxerror-when-installing-django-setuptools-5-5-x\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When installing Django 1.9 or 1.9.1 with setuptools 5.5.x, you\u2019ll see:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>Compiling django/conf/app_template/apps.py ...\n  File <span class=\"s2\">&quot;django/conf/app_template/apps.py&quot;</span>, line <span class=\"m\">4</span>\n    class <span class=\"o\">{{</span> camel_case_app_name <span class=\"o\">}}</span>Config<span class=\"o\">(</span>AppConfig<span class=\"o\">)</span>:\n          ^\nSyntaxError: invalid syntax\n\nCompiling django/conf/app_template/models.py ...\n  File <span class=\"s2\">&quot;django/conf/app_template/models.py&quot;</span>, line <span class=\"m\">1</span>\n    <span class=\"o\">{{</span> unicode_literals <span class=\"o\">}}</span>from django.db import models\n                             ^\nSyntaxError: invalid syntax\n</pre></div>\n</div>\n<p>It\u2019s safe to ignore these errors (Django will still install just fine), but you\ncan avoid them by upgrading setuptools to a more recent version. If you\u2019re\nusing pip, you can upgrade pip using <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-m</span> <span class=\"pre\">pip</span> <span class=\"pre\">install</span> <span class=\"pre\">-U</span> <span class=\"pre\">pip</span></code> which\nwill also upgrade setuptools. This is resolved in later versions of Django as\ndescribed in the <a class=\"reference internal\" href=\"../1.9.2/\"><span class=\"doc\">Django 1.9.2 release notes</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-miscellaneous\">\n<span id=\"miscellaneous\"></span><h3>Miscellaneous<a class=\"headerlink\" href=\"#miscellaneous\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>The jQuery static files in <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code> have been moved into a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">vendor/jquery</span></code> subdirectory.</li>\n<li>The text displayed for null columns in the admin changelist <code class=\"docutils literal notranslate\"><span class=\"pre\">list_display</span></code>\ncells has changed from <code class=\"docutils literal notranslate\"><span class=\"pre\">(None)</span></code> (or its translated equivalent) to <code class=\"docutils literal notranslate\"><span class=\"pre\">-</span></code> (a\ndash).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.http.responses.REASON_PHRASES</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.handlers.wsgi.STATUS_CODE_TEXT</span></code> have been removed. Use\nPython\u2019s Standard Library instead: <a class=\"reference external\" href=\"https://docs.python.org/3/library/http.client.html#http.client.responses\" title=\"(in Python v3.11)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">http.client.responses</span></code></a> for Python\n3 and <a class=\"reference external\" href=\"https://docs.python.org/2/library/httplib.html#httplib.responses\">httplib.responses</a> for Python 2.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ValuesQuerySet</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ValuesListQuerySet</span></code> have been removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base.html</span></code> template no longer sets\n<code class=\"docutils literal notranslate\"><span class=\"pre\">window.__admin_media_prefix__</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">window.__admin_utc_offset__</span></code>. Image\nreferences in JavaScript that used that value to construct absolute URLs have\nbeen moved to CSS for easier customization. The UTC offset is stored on a\ndata attribute of the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;body&gt;</span></code> tag.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">CommaSeparatedIntegerField</span></code> validation has been refined to forbid values\nlike <code class=\"docutils literal notranslate\"><span class=\"pre\">','</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">',1'</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">'1,,2'</span></code>.</li>\n<li>Form initialization was moved from the <a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.ProcessFormView.get\" title=\"django.views.generic.edit.ProcessFormView.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ProcessFormView.get()</span></code></a> method to the new\n<a class=\"reference internal\" href=\"../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin.get_context_data\" title=\"django.views.generic.edit.FormMixin.get_context_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">FormMixin.get_context_data()</span></code></a> method. This may be\nbackwards incompatible if you have overridden the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code>\nmethod without calling <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code>.</li>\n<li>Support for PostGIS 1.5 has been dropped.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.models.Site.domain</span></code> field was changed to be\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.Field.unique\" title=\"django.db.models.Field.unique\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique</span></code></a>.</li>\n<li>In order to enforce test isolation, database queries are not allowed\nby default in <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.SimpleTestCase\" title=\"django.test.SimpleTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTestCase</span></code></a> tests anymore. You\ncan disable this behavior by setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_database_queries</span></code> class\nattribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> on your test class.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ResolverMatch.app_name</span></code> was changed to contain the full namespace path in\nthe case of nested namespaces. For consistency with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ResolverMatch.namespace</span></code>, the empty value is now an empty string instead\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</li>\n<li>For security hardening, session keys must be at least 8 characters.</li>\n<li>Private function <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.functional.total_ordering()</span></code> has been\nremoved. It contained a workaround for a <code class=\"docutils literal notranslate\"><span class=\"pre\">functools.total_ordering()</span></code> bug\nin Python versions older than 2.7.3.</li>\n<li>XML serialization (either through <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> or the syndication\nframework) used to output any characters it received. Now if the content to\nbe serialized contains any control characters not allowed in the XML 1.0\nstandard, the serialization will fail with a <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField\" title=\"django.forms.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> now strips input of leading and trailing\nwhitespace by default. This can be disabled by setting the new\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField.strip\" title=\"django.forms.CharField.strip\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">strip</span></code></a> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n<li>Template text that is translated and uses two or more consecutive percent\nsigns, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;%%&quot;</span></code>, may have a new <code class=\"docutils literal notranslate\"><span class=\"pre\">msgid</span></code> after <code class=\"docutils literal notranslate\"><span class=\"pre\">makemessages</span></code> is run\n(most likely the translation will be marked fuzzy). The new <code class=\"docutils literal notranslate\"><span class=\"pre\">msgid</span></code> will be\nmarked <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;#,</span> <span class=\"pre\">python-format&quot;</span></code>.</li>\n<li>If neither <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.current_app\" title=\"django.http.HttpRequest.current_app\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">request.current_app</span></code></a>\nnor <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context.current_app</span></code></a> are set, the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-url\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">url</span></code></a> template tag will now use the namespace of the current request.\nSet <code class=\"docutils literal notranslate\"><span class=\"pre\">request.current_app</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if you don\u2019t want to use a namespace\nhint.</li>\n<li>The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SILENCED_SYSTEM_CHECKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SILENCED_SYSTEM_CHECKS</span></code></a> setting now silences messages of all\nlevels. Previously, messages of <code class=\"docutils literal notranslate\"><span class=\"pre\">ERROR</span></code> level or higher were printed to the\nconsole.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">FlatPage.enable_comments</span></code> field is removed from the <code class=\"docutils literal notranslate\"><span class=\"pre\">FlatPageAdmin</span></code>\nas it\u2019s unused by the application. If your project or a third-party app makes\nuse of it, <a class=\"reference internal\" href=\"../../ref/contrib/flatpages/#flatpages-admin\"><span class=\"std std-ref\">create a custom ModelAdmin</span></a> to add it back.</li>\n<li>The return value of\n<a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.runner.DiscoverRunner.setup_databases\" title=\"django.test.runner.DiscoverRunner.setup_databases\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setup_databases()</span></code></a> and the first\nargument of <a class=\"reference internal\" href=\"../../topics/testing/advanced/#django.test.runner.DiscoverRunner.teardown_databases\" title=\"django.test.runner.DiscoverRunner.teardown_databases\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">teardown_databases()</span></code></a>\nchanged. They used to be <code class=\"docutils literal notranslate\"><span class=\"pre\">(old_names,</span> <span class=\"pre\">mirrors)</span></code> tuples. Now they\u2019re just\nthe first item, <code class=\"docutils literal notranslate\"><span class=\"pre\">old_names</span></code>.</li>\n<li>By default <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a> attempts to find an\navailable port in the 8081-8179 range instead of just trying port 8081.</li>\n<li>The system checks for <a class=\"reference internal\" href=\"../../ref/contrib/admin/#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> now check\ninstances rather than classes.</li>\n<li>The private API to apply mixed migration plans has been dropped for\nperformance reasons. Mixed plans consist of a list of migrations where some\nare being applied and others are being unapplied.</li>\n<li>The related model object descriptor classes in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.fields.related</span></code> (private API) are moved from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">related</span></code> module to <code class=\"docutils literal notranslate\"><span class=\"pre\">related_descriptors</span></code> and renamed as follows:<ul>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ReverseSingleRelatedObjectDescriptor</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">ForwardManyToOneDescriptor</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">SingleRelatedObjectDescriptor</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">ReverseOneToOneDescriptor</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignRelatedObjectsDescriptor</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">ReverseManyToOneDescriptor</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ManyRelatedObjectsDescriptor</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyDescriptor</span></code></li>\n</ul>\n</li>\n<li>If you implement a custom <a class=\"reference internal\" href=\"../../ref/urls/#django.conf.urls.handler404\" title=\"django.conf.urls.handler404\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">handler404</span></code></a> view, it must\nreturn a response with an HTTP 404 status code. Use\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponseNotFound\" title=\"django.http.HttpResponseNotFound\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseNotFound</span></code></a> or pass <code class=\"docutils literal notranslate\"><span class=\"pre\">status=404</span></code> to the\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>. Otherwise, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-APPEND_SLASH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APPEND_SLASH</span></code></a> won\u2019t\nwork correctly with <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG=False</span></code>.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-deprecated-in-1-9\">\n<span id=\"s-deprecated-features-1-9\"></span><span id=\"features-deprecated-in-1-9\"></span><span id=\"deprecated-features-1-9\"></span><h2>Features deprecated in 1.9<a class=\"headerlink\" href=\"#features-deprecated-in-1-9\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-assignment-tag\">\n<span id=\"assignment-tag\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">assignment_tag()</span></code><a class=\"headerlink\" href=\"#assignment-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django 1.4 added the <code class=\"docutils literal notranslate\"><span class=\"pre\">assignment_tag</span></code> helper to ease the creation of\ntemplate tags that store results in a template variable. The\n<a class=\"reference internal\" href=\"../../howto/custom-template-tags/#django.template.Library.simple_tag\" title=\"django.template.Library.simple_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">simple_tag()</span></code></a> helper has gained this same\nability, making the <code class=\"docutils literal notranslate\"><span class=\"pre\">assignment_tag</span></code> obsolete. Tags that use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">assignment_tag</span></code> should be updated to use <code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-cycle-syntax-with-comma-separated-arguments\">\n<span id=\"cycle-syntax-with-comma-separated-arguments\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> syntax with comma-separated arguments<a class=\"headerlink\" href=\"#cycle-syntax-with-comma-separated-arguments\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> tag supports an inferior old syntax from previous Django\nversions:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"nv\">row1</span><span class=\"o\">,</span><span class=\"nv\">row2</span><span class=\"o\">,</span><span class=\"nv\">row3</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Its parsing caused bugs with the current syntax, so support for the old syntax\nwill be removed in Django 1.10 following an accelerated deprecation.</p>\n</div>\n<div class=\"section\" id=\"s-foreignkey-and-onetoonefield-on-delete-argument\">\n<span id=\"foreignkey-and-onetoonefield-on-delete-argument\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">on_delete</span></code> argument<a class=\"headerlink\" href=\"#foreignkey-and-onetoonefield-on-delete-argument\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In order to increase awareness about cascading model deletion, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">on_delete</span></code> argument of <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code> will be required\nin Django 2.0.</p>\n<p>Update models and existing migrations to explicitly set the argument. Since the\ndefault is <code class=\"docutils literal notranslate\"><span class=\"pre\">models.CASCADE</span></code>, add <code class=\"docutils literal notranslate\"><span class=\"pre\">on_delete=models.CASCADE</span></code> to all\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code>s that don\u2019t use a different option. You\ncan also pass it as the second positional argument if you don\u2019t care about\ncompatibility with older versions of Django.</p>\n</div>\n<div class=\"section\" id=\"s-field-rel-changes\">\n<span id=\"field-rel-changes\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Field.rel</span></code> changes<a class=\"headerlink\" href=\"#field-rel-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Field.rel</span></code> and its methods and attributes have changed to match the related\nfields API. The <code class=\"docutils literal notranslate\"><span class=\"pre\">Field.rel</span></code> attribute is renamed to <code class=\"docutils literal notranslate\"><span class=\"pre\">remote_field</span></code> and many\nof its methods and attributes are either changed or renamed.</p>\n<p>The aim of these changes is to provide a documented API for relation fields.</p>\n</div>\n<div class=\"section\" id=\"s-geomanager-and-geoqueryset-custom-methods\">\n<span id=\"geomanager-and-geoqueryset-custom-methods\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">GeoManager</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> custom methods<a class=\"headerlink\" href=\"#geomanager-and-geoqueryset-custom-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All custom <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> methods (<code class=\"docutils literal notranslate\"><span class=\"pre\">area()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">distance()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">gml()</span></code>, \u2026)\nhave been replaced by equivalent geographic expressions in annotations (see in\nnew features). Hence the need to set a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoManager</span></code> to GIS-enabled\nmodels is now obsolete. As soon as your code doesn\u2019t call any of the deprecated\nmethods, you can simply remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">objects</span> <span class=\"pre\">=</span> <span class=\"pre\">GeoManager()</span></code> lines from your\nmodels.</p>\n</div>\n<div class=\"section\" id=\"s-template-loader-apis-have-changed\">\n<span id=\"template-loader-apis-have-changed\"></span><h3>Template loader APIs have changed<a class=\"headerlink\" href=\"#template-loader-apis-have-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django template loaders have been updated to allow recursive template\nextending. This change necessitated a new template loader API. The old\n<code class=\"docutils literal notranslate\"><span class=\"pre\">load_template()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">load_template_sources()</span></code> methods are now deprecated.\nDetails about the new API can be found <a class=\"reference internal\" href=\"../../ref/templates/api/#custom-template-loaders\"><span class=\"std std-ref\">in the template loader\ndocumentation</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-passing-a-3-tuple-or-an-app-name-to-include\">\n<span id=\"passing-a-3-tuple-or-an-app-name-to-include\"></span><h3>Passing a 3-tuple or an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code><a class=\"headerlink\" href=\"#passing-a-3-tuple-or-an-app-name-to-include\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The instance namespace part of passing a tuple as an argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code>\nhas been replaced by passing the <code class=\"docutils literal notranslate\"><span class=\"pre\">namespace</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code>. For\nexample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">polls_patterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^polls/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">((</span><span class=\"n\">polls_patterns</span><span class=\"p\">,</span> <span class=\"s2\">&quot;polls&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;author-polls&quot;</span><span class=\"p\">))),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>becomes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">polls_patterns</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">[</span>\n        <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">),</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">&quot;polls&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>  <span class=\"c1\"># &#39;polls&#39; is the app_name</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^polls/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">polls_patterns</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;author-polls&quot;</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code> has been replaced by passing a\n2-tuple (as above), or passing an object or module with an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code>\nattribute (as below). If the <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> is set in this new way, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">namespace</span></code> argument is no longer required. It will default to the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code>. For example, the URL patterns in the tutorial are changed from:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/urls.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^polls/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls.urls&quot;</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s2\">&quot;polls&quot;</span><span class=\"p\">)),</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>to:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/urls.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^polls/&quot;</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls.urls&quot;</span><span class=\"p\">)),</span>  <span class=\"c1\"># &#39;namespace=&quot;polls&quot;&#39; removed</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">polls/urls.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;polls&quot;</span>  <span class=\"c1\"># added</span>\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>This change also means that the old way of including an <code class=\"docutils literal notranslate\"><span class=\"pre\">AdminSite</span></code> instance\nis deprecated. Instead, pass <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.site.urls</span></code> directly to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.urls.url()</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">urls.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^admin/&quot;</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">urls</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-url-application-namespace-required-if-setting-an-instance-namespace\">\n<span id=\"url-application-namespace-required-if-setting-an-instance-namespace\"></span><h3>URL application namespace required if setting an instance namespace<a class=\"headerlink\" href=\"#url-application-namespace-required-if-setting-an-instance-namespace\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In the past, an instance namespace without an application namespace\nwould serve the same purpose as the application namespace, but it was\nimpossible to reverse the patterns if there was an application namespace\nwith the same name. Includes that specify an instance namespace require that\nthe included URLconf sets an application namespace.</p>\n</div>\n<div class=\"section\" id=\"s-current-app-parameter-to-contrib-auth-views\">\n<span id=\"current-app-parameter-to-contrib-auth-views\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.auth</span></code> views<a class=\"headerlink\" href=\"#current-app-parameter-to-contrib-auth-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All views in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views</span></code> have the following structure:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>def view(request, ..., current_app=None, ...):\n\n    ...\n\n    if current_app is not None:\n        request.current_app = current_app\n\n    return TemplateResponse(request, template_name, context)\n</pre></div>\n</div>\n<p>As of Django 1.8, <code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code> is set on the <code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> object. For\nconsistency, these views will require the caller to set <code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code> on the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code> instead of passing it in a separate argument.</p>\n</div>\n<div class=\"section\" id=\"s-django-contrib-gis-geoip\">\n<span id=\"django-contrib-gis-geoip\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.geoip</span></code><a class=\"headerlink\" href=\"#django-contrib-gis-geoip\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../ref/contrib/gis/geoip2/#module-django.contrib.gis.geoip2\" title=\"django.contrib.gis.geoip2: Python interface for MaxMind's GeoIP2 databases.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.geoip2</span></code></a> module supersedes\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.geoip</span></code>. The new module provides a similar API except that\nit doesn\u2019t provide the legacy GeoIP-Python API compatibility methods.</p>\n</div>\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h3>Miscellaneous<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">weak</span></code> argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">django.dispatch.signals.Signal.disconnect()</span></code> has\nbeen deprecated as it has no effect.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">check_aggregate_support()</span></code> method of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.base.BaseDatabaseOperations</span></code> has been deprecated and\nwill be removed in Django 2.0. The more general <code class=\"docutils literal notranslate\"><span class=\"pre\">check_expression_support()</span></code>\nshould be used instead.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.extras</span></code> is deprecated. You can find\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.SelectDateWidget\" title=\"django.forms.SelectDateWidget\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SelectDateWidget</span></code></a> in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.widgets</span></code>\n(or simply <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms</span></code>) instead.</li>\n<li>Private API <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.fields.add_lazy_relation()</span></code> is deprecated.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.tests.utils.skipIfCustomUser()</span></code> decorator is\ndeprecated. With the test discovery changes in Django 1.6, the tests for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib</span></code> apps are no longer run as part of the user\u2019s project.\nTherefore, the <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;skipIfCustomUser</span></code> decorator is no longer needed to\ndecorate tests in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code>.</li>\n<li>If you customized some <a class=\"reference internal\" href=\"../../ref/views/#error-views\"><span class=\"std std-ref\">error handlers</span></a>, the view\nsignatures with only one request parameter are deprecated. The views should\nnow also accept a second <code class=\"docutils literal notranslate\"><span class=\"pre\">exception</span></code> positional parameter.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.Atom1Feed.mime_type</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.RssFeed.mime_type</span></code> attributes are deprecated in\nfavor of <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>.</li>\n<li><a class=\"reference internal\" href=\"../../topics/signing/#django.core.signing.Signer\" title=\"django.core.signing.Signer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Signer</span></code></a> now issues a warning if an invalid\nseparator is used. This will become an exception in Django 1.10.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.Field._get_val_from_obj()</span></code> is deprecated in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Field.value_from_object()</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loaders.eggs.Loader</span></code> is deprecated as distributing\napplications as eggs is not recommended.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">callable_obj</span></code> keyword argument to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SimpleTestCase.assertRaisesMessage()</span></code> is deprecated. Pass the callable as\na positional argument instead.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_tags</span></code> attribute on methods of <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> has been\ndeprecated. Use <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.format_html\" title=\"django.utils.html.format_html\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">format_html()</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.format_html_join\" title=\"django.utils.html.format_html_join\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">format_html_join()</span></code></a>, or\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.mark_safe\" title=\"django.utils.safestring.mark_safe\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">mark_safe()</span></code></a> when constructing the method\u2019s\nreturn value instead.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">enclosure</span></code> keyword argument to <code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.add_item()</span></code> is\ndeprecated. Use the new <code class=\"docutils literal notranslate\"><span class=\"pre\">enclosures</span></code> argument which accepts a list of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Enclosure</span></code> objects instead of a single one.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.loader.LoaderOrigin</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base.StringOrigin</span></code> aliases for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base.Origin</span></code> are deprecated.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-features-removed-in-1-9\">\n<span id=\"s-removed-features-1-9\"></span><span id=\"features-removed-in-1-9\"></span><span id=\"removed-features-1-9\"></span><h2>Features removed in 1.9<a class=\"headerlink\" href=\"#features-removed-in-1-9\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>These features have reached the end of their deprecation cycle and are removed\nin Django 1.9. See <a class=\"reference internal\" href=\"../1.7/#deprecated-features-1-7\"><span class=\"std std-ref\">Features deprecated in 1.7</span></a> for details, including how to\nremove usage of these features.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.dictconfig</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.importlib</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.tzinfo</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.unittest</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">syncdb</span></code> command is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.signals.pre_syncdb</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.signals.post_syncdb</span></code> is removed.</li>\n<li>Support for <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_syncdb</span></code> on database routers is removed.</li>\n<li>Automatic syncing of apps without migrations is removed. Migrations are\ncompulsory for all apps unless you pass the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-migrate-run-syncdb\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">migrate</span> <span class=\"pre\">--run-syncdb</span></code></a>\noption.</li>\n<li>The SQL management commands for apps without migrations, <code class=\"docutils literal notranslate\"><span class=\"pre\">sql</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlall</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sqlclear</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">sqldropindexes</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlindexes</span></code>, are removed.</li>\n<li>Support for automatic loading of <code class=\"docutils literal notranslate\"><span class=\"pre\">initial_data</span></code> fixtures and initial SQL\ndata is removed.</li>\n<li>All models need to be defined inside an installed application or declare an\nexplicit <a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.app_label\" title=\"django.db.models.Options.app_label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">app_label</span></code></a>. Furthermore, it isn\u2019t\npossible to import them before their application is loaded. In particular, it\nisn\u2019t possible to import models inside the root package of an application.</li>\n<li>The model and form <code class=\"docutils literal notranslate\"><span class=\"pre\">IPAddressField</span></code> is removed. A stub field remains for\ncompatibility with historical migrations.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">AppCommand.handle_app()</span></code> is no longer supported.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code> are no longer importable from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.models</span></code>.</li>\n<li>FastCGI support via the <code class=\"docutils literal notranslate\"><span class=\"pre\">runfcgi</span></code> management command is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.SortedDict</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.declared_fieldsets</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">util</span></code> modules that provided backwards compatibility are removed:<ul>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.util</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.db.backends.util</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.util</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.util</span></code></li>\n</ul>\n</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_formsets</span></code> is removed.</li>\n<li>The backward compatible shims introduced to rename the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">BaseMemcachedCache._get_memcache_timeout()</span></code> method to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_backend_timeout()</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--natural</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">-n</span></code> options for <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">dumpdata</span></code></a> are removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">use_natural_keys</span></code> argument for <code class=\"docutils literal notranslate\"><span class=\"pre\">serializers.serialize()</span></code> is removed.</li>\n<li>Private API <code class=\"docutils literal notranslate\"><span class=\"pre\">django.forms.forms.get_declared_fields()</span></code> is removed.</li>\n<li>The ability to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">SplitDateTimeWidget</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code> is\nremoved.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIRequest.REQUEST</span></code> property is removed.</li>\n<li>The class <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.MergeDict</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-cn</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">zh-tw</span></code> language codes are removed.</li>\n<li>The internal <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.functional.memoize()</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.cache.get_cache</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.loading</span></code> is removed.</li>\n<li>Passing callable arguments to querysets is no longer possible.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">BaseCommand.requires_model_validation</span></code> is removed in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">requires_system_checks</span></code>. Admin validators is replaced by admin checks.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.validator_class</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">default_validator_class</span></code> attributes\nare removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.validate()</span></code> is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.DatabaseValidation.validate_field</span></code> is removed in\nfavor of the <code class=\"docutils literal notranslate\"><span class=\"pre\">check_field</span></code> method.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">validate</span></code> management command is removed.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.module_loading.import_by_path</span></code> is removed in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.module_loading.import_string</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ssi</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> template tags are removed from the <code class=\"docutils literal notranslate\"><span class=\"pre\">future</span></code> template\ntag library.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.text.javascript_quote()</span></code> is removed.</li>\n<li>Database test settings as independent entries in the database settings,\nprefixed by <code class=\"docutils literal notranslate\"><span class=\"pre\">TEST_</span></code>, are no longer supported.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">cache_choices</span></code> option to <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ModelChoiceField\" title=\"django.forms.ModelChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelChoiceField</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.ModelMultipleChoiceField\" title=\"django.forms.ModelMultipleChoiceField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelMultipleChoiceField</span></code></a> is removed.</li>\n<li>The default value of the\n<a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView.permanent\" title=\"django.views.generic.base.RedirectView.permanent\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">RedirectView.permanent</span></code></a>\nattribute has changed from <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sitemaps.FlatPageSitemap</span></code> is removed in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.flatpages.sitemaps.FlatPageSitemap</span></code>.</li>\n<li>Private API <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.utils.TestTemplateLoader</span></code> is removed.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.generic</span></code> module is removed.</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["releases/1.8.19", "Django 1.8.19 release notes", "N", "next"], ["releases/1.9.1", "Django 1.9.1 release notes", "P", "previous"]], "sourcename": "releases/1.9.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Django 1.9 release notes</a><ul>\n<li><a class=\"reference internal\" href=\"#python-compatibility\">Python compatibility</a></li>\n<li><a class=\"reference internal\" href=\"#what-s-new-in-django-1-9\">What\u2019s new in Django 1.9</a><ul>\n<li><a class=\"reference internal\" href=\"#performing-actions-after-a-transaction-commit\">Performing actions after a transaction commit</a></li>\n<li><a class=\"reference internal\" href=\"#password-validation\">Password validation</a></li>\n<li><a class=\"reference internal\" href=\"#permission-mixins-for-class-based-views\">Permission mixins for class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#new-styling-for-contrib-admin\">New styling for <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#running-tests-in-parallel\">Running tests in parallel</a></li>\n<li><a class=\"reference internal\" href=\"#minor-features\">Minor features</a><ul>\n<li><a class=\"reference internal\" href=\"#django-contrib-admin\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-admindocs\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.admindocs</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-auth\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-contenttypes\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-gis\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.gis</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-postgres\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sessions\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-sites\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-syndication\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cache\">Cache</a></li>\n<li><a class=\"reference internal\" href=\"#csrf\">CSRF</a></li>\n<li><a class=\"reference internal\" href=\"#database-backends\">Database backends</a></li>\n<li><a class=\"reference internal\" href=\"#file-storage\">File Storage</a></li>\n<li><a class=\"reference internal\" href=\"#forms\">Forms</a></li>\n<li><a class=\"reference internal\" href=\"#generic-views\">Generic Views</a></li>\n<li><a class=\"reference internal\" href=\"#internationalization\">Internationalization</a></li>\n<li><a class=\"reference internal\" href=\"#management-commands\">Management Commands</a></li>\n<li><a class=\"reference internal\" href=\"#migrations\">Migrations</a></li>\n<li><a class=\"reference internal\" href=\"#models\">Models</a></li>\n<li><a class=\"reference internal\" href=\"#requests-and-responses\">Requests and Responses</a></li>\n<li><a class=\"reference internal\" href=\"#templates\">Templates</a></li>\n<li><a class=\"reference internal\" href=\"#tests\">Tests</a></li>\n<li><a class=\"reference internal\" href=\"#urls\">URLs</a></li>\n<li><a class=\"reference internal\" href=\"#validators\">Validators</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#backwards-incompatible-changes-in-1-9\">Backwards incompatible changes in 1.9</a><ul>\n<li><a class=\"reference internal\" href=\"#database-backend-api\">Database backend API</a></li>\n<li><a class=\"reference internal\" href=\"#default-settings-that-were-tuples-are-now-lists\">Default settings that were tuples are now lists</a></li>\n<li><a class=\"reference internal\" href=\"#is-usable-attribute-on-template-loaders-is-removed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">is_usable</span></code> attribute on template loaders is removed</a></li>\n<li><a class=\"reference internal\" href=\"#related-set-direct-assignment\">Related set direct assignment</a></li>\n<li><a class=\"reference internal\" href=\"#filesystem-based-template-loaders-catch-more-specific-exceptions\">Filesystem-based template loaders catch more specific exceptions</a></li>\n<li><a class=\"reference internal\" href=\"#http-redirects-no-longer-forced-to-absolute-uris\">HTTP redirects no longer forced to absolute URIs</a></li>\n<li><a class=\"reference internal\" href=\"#dropped-support-for-postgresql-9-0\">Dropped support for PostgreSQL 9.0</a></li>\n<li><a class=\"reference internal\" href=\"#dropped-support-for-oracle-11-1\">Dropped support for Oracle 11.1</a></li>\n<li><a class=\"reference internal\" href=\"#bulk-behavior-of-add-method-of-related-managers\">Bulk behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> method of related managers</a></li>\n<li><a class=\"reference internal\" href=\"#template-loaderorigin-and-stringorigin-are-removed\">Template <code class=\"docutils literal notranslate\"><span class=\"pre\">LoaderOrigin</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">StringOrigin</span></code> are removed</a></li>\n<li><a class=\"reference internal\" href=\"#changes-to-the-default-logging-configuration\">Changes to the default logging configuration</a></li>\n<li><a class=\"reference internal\" href=\"#httprequest-details-in-error-reporting\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> details in error reporting</a></li>\n<li><a class=\"reference internal\" href=\"#removal-of-time-zone-aware-global-adapters-and-converters-for-datetimes\">Removal of time zone aware global adapters and converters for datetimes</a></li>\n<li><a class=\"reference internal\" href=\"#template-tag-modules-are-imported-when-templates-are-configured\">Template tag modules are imported when templates are configured</a></li>\n<li><a class=\"reference internal\" href=\"#django-template-base-add-to-builtins-is-removed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.base.add_to_builtins()</span></code> is removed</a></li>\n<li><a class=\"reference internal\" href=\"#simple-tag-now-wraps-tag-output-in-conditional-escape\"><code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> now wraps tag output in <code class=\"docutils literal notranslate\"><span class=\"pre\">conditional_escape</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#paginator-page-range\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Paginator.page_range</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#implicit-queryset-in-lookup-removed\">Implicit <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> lookup removed</a></li>\n<li><a class=\"reference internal\" href=\"#contrib-admin-browser-support\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.admin</span></code> browser support</a></li>\n<li><a class=\"reference internal\" href=\"#syntaxerror-when-installing-django-setuptools-5-5-x\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SyntaxError</span></code> when installing Django setuptools 5.5.x</a></li>\n<li><a class=\"reference internal\" href=\"#miscellaneous\">Miscellaneous</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-deprecated-in-1-9\">Features deprecated in 1.9</a><ul>\n<li><a class=\"reference internal\" href=\"#assignment-tag\"><code class=\"docutils literal notranslate\"><span class=\"pre\">assignment_tag()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#cycle-syntax-with-comma-separated-arguments\"><code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">cycle</span> <span class=\"pre\">%}</span></code> syntax with comma-separated arguments</a></li>\n<li><a class=\"reference internal\" href=\"#foreignkey-and-onetoonefield-on-delete-argument\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">on_delete</span></code> argument</a></li>\n<li><a class=\"reference internal\" href=\"#field-rel-changes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Field.rel</span></code> changes</a></li>\n<li><a class=\"reference internal\" href=\"#geomanager-and-geoqueryset-custom-methods\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GeoManager</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">GeoQuerySet</span></code> custom methods</a></li>\n<li><a class=\"reference internal\" href=\"#template-loader-apis-have-changed\">Template loader APIs have changed</a></li>\n<li><a class=\"reference internal\" href=\"#passing-a-3-tuple-or-an-app-name-to-include\">Passing a 3-tuple or an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">include()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#url-application-namespace-required-if-setting-an-instance-namespace\">URL application namespace required if setting an instance namespace</a></li>\n<li><a class=\"reference internal\" href=\"#current-app-parameter-to-contrib-auth-views\"><code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.auth</span></code> views</a></li>\n<li><a class=\"reference internal\" href=\"#django-contrib-gis-geoip\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.gis.geoip</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#id1\">Miscellaneous</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#features-removed-in-1-9\">Features removed in 1.9</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "releases/1.9", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
