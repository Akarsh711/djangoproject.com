{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.utils.http", "body": "<h1>Source code for django.utils.http</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unicodedata</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binascii</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">BinasciiError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">email.utils</span> <span class=\"kn\">import</span> <span class=\"n\">formatdate</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote</span><span class=\"p\">,</span> <span class=\"n\">unquote</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urlencode</span> <span class=\"k\">as</span> <span class=\"n\">original_urlencode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urlparse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"n\">MultiValueDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n\n<span class=\"c1\"># Based on RFC 9110 Appendix A.</span>\n<span class=\"n\">ETAG_MATCH</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    \\A(      # start of string and capture group</span>\n<span class=\"sd\">    (?:W/)?  # optional weak indicator</span>\n<span class=\"sd\">    &quot;        # opening quote</span>\n<span class=\"sd\">    [^&quot;]*    # any sequence of non-quote characters</span>\n<span class=\"sd\">    &quot;        # end quote</span>\n<span class=\"sd\">    )\\Z      # end of string and capture group</span>\n<span class=\"sd\">&quot;&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">MONTHS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;jan feb mar apr may jun jul aug sep oct nov dec&quot;</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n<span class=\"n\">__D</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;day&gt;[0-9]</span><span class=\"si\">{2}</span><span class=\"s2\">)&quot;</span>\n<span class=\"n\">__D2</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;day&gt;[ 0-9][0-9])&quot;</span>\n<span class=\"n\">__M</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;mon&gt;\\w</span><span class=\"si\">{3}</span><span class=\"s2\">)&quot;</span>\n<span class=\"n\">__Y</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;year&gt;[0-9]</span><span class=\"si\">{4}</span><span class=\"s2\">)&quot;</span>\n<span class=\"n\">__Y2</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;year&gt;[0-9]</span><span class=\"si\">{2}</span><span class=\"s2\">)&quot;</span>\n<span class=\"n\">__T</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;hour&gt;[0-9]</span><span class=\"si\">{2}</span><span class=\"s2\">):(?P&lt;min&gt;[0-9]</span><span class=\"si\">{2}</span><span class=\"s2\">):(?P&lt;sec&gt;[0-9]</span><span class=\"si\">{2}</span><span class=\"s2\">)&quot;</span>\n<span class=\"n\">RFC1123_DATE</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^\\w</span><span class=\"si\">{3}</span><span class=\"s2\">, </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> GMT$&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">__D</span><span class=\"p\">,</span> <span class=\"n\">__M</span><span class=\"p\">,</span> <span class=\"n\">__Y</span><span class=\"p\">,</span> <span class=\"n\">__T</span><span class=\"p\">))</span>\n<span class=\"n\">RFC850_DATE</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^\\w{6,9}, </span><span class=\"si\">%s</span><span class=\"s2\">-</span><span class=\"si\">%s</span><span class=\"s2\">-</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> GMT$&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">__D</span><span class=\"p\">,</span> <span class=\"n\">__M</span><span class=\"p\">,</span> <span class=\"n\">__Y2</span><span class=\"p\">,</span> <span class=\"n\">__T</span><span class=\"p\">))</span>\n<span class=\"n\">ASCTIME_DATE</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^\\w</span><span class=\"si\">{3}</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">$&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">__M</span><span class=\"p\">,</span> <span class=\"n\">__D2</span><span class=\"p\">,</span> <span class=\"n\">__T</span><span class=\"p\">,</span> <span class=\"n\">__Y</span><span class=\"p\">))</span>\n\n<span class=\"n\">RFC3986_GENDELIMS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;:/?#[]@&quot;</span>\n<span class=\"n\">RFC3986_SUBDELIMS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;!$&amp;&#39;()*+,;=&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"urlencode\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.urlencode\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">urlencode</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">doseq</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A version of Python&#39;s urllib.parse.urlencode() function that can operate on</span>\n<span class=\"sd\">    MultiValueDict and non-string values.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">MultiValueDict</span><span class=\"p\">):</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">lists</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"s2\">&quot;items&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span>\n    <span class=\"n\">query_params</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">query</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Cannot encode None for key &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; in a query string. Did you &quot;</span>\n                <span class=\"s2\">&quot;mean to pass an empty string or omit the value?&quot;</span> <span class=\"o\">%</span> <span class=\"n\">key</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">doseq</span> <span class=\"ow\">or</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">)):</span>\n            <span class=\"n\">query_val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">itr</span> <span class=\"o\">=</span> <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n                <span class=\"n\">query_val</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Consume generators and iterators, when doseq=True, to</span>\n                <span class=\"c1\"># work around https://bugs.python.org/issue31706.</span>\n                <span class=\"n\">query_val</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">itr</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">item</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;Cannot encode None for key &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; in a query &quot;</span>\n                            <span class=\"s2\">&quot;string. Did you mean to pass an empty string or &quot;</span>\n                            <span class=\"s2\">&quot;omit the value?&quot;</span> <span class=\"o\">%</span> <span class=\"n\">key</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">):</span>\n                        <span class=\"n\">item</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n                    <span class=\"n\">query_val</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n        <span class=\"n\">query_params</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">query_val</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">original_urlencode</span><span class=\"p\">(</span><span class=\"n\">query_params</span><span class=\"p\">,</span> <span class=\"n\">doseq</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"http_date\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.http_date\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">http_date</span><span class=\"p\">(</span><span class=\"n\">epoch_seconds</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Format the time to match the RFC 5322 date format as specified by RFC 9110</span>\n<span class=\"sd\">    Section 5.6.7.</span>\n\n<span class=\"sd\">    `epoch_seconds` is a floating point number expressed in seconds since the</span>\n<span class=\"sd\">    epoch, in UTC - such as that outputted by time.time(). If set to None, it</span>\n<span class=\"sd\">    defaults to the current time.</span>\n\n<span class=\"sd\">    Output a string in the format &#39;Wdy, DD Mon YYYY HH:MM:SS GMT&#39;.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">formatdate</span><span class=\"p\">(</span><span class=\"n\">epoch_seconds</span><span class=\"p\">,</span> <span class=\"n\">usegmt</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_http_date</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parse a date format as specified by HTTP RFC 9110 Section 5.6.7.</span>\n\n<span class=\"sd\">    The three formats allowed by the RFC are accepted, even if only the first</span>\n<span class=\"sd\">    one is still in widespread use.</span>\n\n<span class=\"sd\">    Return an integer expressed in seconds since the epoch, in UTC.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># email.utils.parsedate() does the job for RFC 1123 dates; unfortunately</span>\n    <span class=\"c1\"># RFC 9110 makes it mandatory to support RFC 850 dates too. So we roll</span>\n    <span class=\"c1\"># our own RFC-compliant parsing.</span>\n    <span class=\"k\">for</span> <span class=\"n\">regex</span> <span class=\"ow\">in</span> <span class=\"n\">RFC1123_DATE</span><span class=\"p\">,</span> <span class=\"n\">RFC850_DATE</span><span class=\"p\">,</span> <span class=\"n\">ASCTIME_DATE</span><span class=\"p\">:</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> is not in a valid HTTP date format&quot;</span> <span class=\"o\">%</span> <span class=\"n\">date</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">tz</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span>\n        <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">&quot;year&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">year</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n            <span class=\"n\">current_year</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(</span><span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"n\">tz</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">year</span>\n            <span class=\"n\">current_century</span> <span class=\"o\">=</span> <span class=\"n\">current_year</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">current_year</span> <span class=\"o\">%</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">year</span> <span class=\"o\">-</span> <span class=\"p\">(</span><span class=\"n\">current_year</span> <span class=\"o\">%</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n                <span class=\"c1\"># year that appears to be more than 50 years in the future are</span>\n                <span class=\"c1\"># interpreted as representing the past.</span>\n                <span class=\"n\">year</span> <span class=\"o\">+=</span> <span class=\"n\">current_century</span> <span class=\"o\">-</span> <span class=\"mi\">100</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">year</span> <span class=\"o\">+=</span> <span class=\"n\">current_century</span>\n        <span class=\"n\">month</span> <span class=\"o\">=</span> <span class=\"n\">MONTHS</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">&quot;mon&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">day</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">&quot;day&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">hour</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">&quot;hour&quot;</span><span class=\"p\">])</span>\n        <span class=\"nb\">min</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">&quot;min&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">sec</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">[</span><span class=\"s2\">&quot;sec&quot;</span><span class=\"p\">])</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"p\">,</span> <span class=\"n\">sec</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">tz</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">())</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> is not a valid date&quot;</span> <span class=\"o\">%</span> <span class=\"n\">date</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">exc</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_http_date_safe</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Same as parse_http_date, but return None if the input is invalid.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">parse_http_date</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># Base 36 functions: useful for generating compact URLs</span>\n\n\n<div class=\"viewcode-block\" id=\"base36_to_int\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.base36_to_int\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">base36_to_int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert a base 36 string to an int. Raise ValueError if the input won&#39;t fit</span>\n<span class=\"sd\">    into an int.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># To prevent overconsumption of server resources, reject any</span>\n    <span class=\"c1\"># base36 string that is longer than 13 base36 digits (13 digits</span>\n    <span class=\"c1\"># is sufficient to base36-encode any 64-bit integer)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">13</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Base36 input too large&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"int_to_base36\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.int_to_base36\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">int_to_base36</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Convert an integer to a base36 string.&quot;&quot;&quot;</span>\n    <span class=\"n\">char_set</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0123456789abcdefghijklmnopqrstuvwxyz&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Negative base36 conversion input.&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">36</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">char_set</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span>\n    <span class=\"n\">b36</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">while</span> <span class=\"n\">i</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"mi\">36</span><span class=\"p\">)</span>\n        <span class=\"n\">b36</span> <span class=\"o\">=</span> <span class=\"n\">char_set</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">b36</span>\n    <span class=\"k\">return</span> <span class=\"n\">b36</span></div>\n\n\n<div class=\"viewcode-block\" id=\"urlsafe_base64_encode\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.urlsafe_base64_encode\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">urlsafe_base64_encode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Encode a bytestring to a base64 string for use in URLs. Strip any trailing</span>\n<span class=\"sd\">    equal signs.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">=&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"urlsafe_base64_decode\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.urlsafe_base64_decode\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">urlsafe_base64_decode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Decode a base64 encoded string. Add back any trailing equal signs that</span>\n<span class=\"sd\">    might have been stripped.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">))</span>\n    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">LookupError</span><span class=\"p\">,</span> <span class=\"n\">BinasciiError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_etags</span><span class=\"p\">(</span><span class=\"n\">etag_str</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parse a string of ETags given in an If-None-Match or If-Match header as</span>\n<span class=\"sd\">    defined by RFC 9110. Return a list of quoted ETags, or [&#39;*&#39;] if all ETags</span>\n<span class=\"sd\">    should be matched.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">etag_str</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;*&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Parse each ETag individually, and return any that are valid.</span>\n        <span class=\"n\">etag_matches</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">ETAG_MATCH</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">etag</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">())</span> <span class=\"k\">for</span> <span class=\"n\">etag</span> <span class=\"ow\">in</span> <span class=\"n\">etag_str</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">etag_matches</span> <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">quote_etag</span><span class=\"p\">(</span><span class=\"n\">etag_str</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    If the provided string is already a quoted ETag, return it. Otherwise, wrap</span>\n<span class=\"sd\">    the string in quotes, making it a strong ETag.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">ETAG_MATCH</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">etag_str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">etag_str</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot;&#39;</span> <span class=\"o\">%</span> <span class=\"n\">etag_str</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_same_domain</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return ``True`` if the host is either an exact match or a match</span>\n<span class=\"sd\">    to the wildcard pattern.</span>\n\n<span class=\"sd\">    Any pattern beginning with a period matches a domain and all of its</span>\n<span class=\"sd\">    subdomains. (e.g. ``.example.com`` matches ``example.com`` and</span>\n<span class=\"sd\">    ``foo.example.com``). Anything else is an exact string match.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">pattern</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span>\n        <span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;.&quot;</span>\n        <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">host</span> <span class=\"o\">==</span> <span class=\"n\">pattern</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n        <span class=\"ow\">or</span> <span class=\"n\">pattern</span> <span class=\"o\">==</span> <span class=\"n\">host</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">url_has_allowed_host_and_scheme</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">,</span> <span class=\"n\">require_https</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return ``True`` if the url uses an allowed host and a safe scheme.</span>\n\n<span class=\"sd\">    Always return ``False`` on an empty url.</span>\n\n<span class=\"sd\">    If ``require_https`` is ``True``, only &#39;https&#39; will be considered a valid</span>\n<span class=\"sd\">    scheme, as opposed to &#39;http&#39; and &#39;https&#39; with the default, ``False``.</span>\n\n<span class=\"sd\">    Note: &quot;True&quot; doesn&#39;t entail that a URL is &quot;safe&quot;. It may still be e.g.</span>\n<span class=\"sd\">    quoted incorrectly. Ensure to also use django.utils.encoding.iri_to_uri()</span>\n<span class=\"sd\">    on the path component of untrusted URLs.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">url</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">url</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">if</span> <span class=\"n\">allowed_hosts</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">allowed_hosts</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">allowed_hosts</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"n\">allowed_hosts</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">allowed_hosts</span><span class=\"p\">}</span>\n    <span class=\"c1\"># Chrome treats \\ completely as / in paths but it could be part of some</span>\n    <span class=\"c1\"># basic auth credentials so we need to check both URLs.</span>\n    <span class=\"k\">return</span> <span class=\"n\">_url_has_allowed_host_and_scheme</span><span class=\"p\">(</span>\n        <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">,</span> <span class=\"n\">require_https</span><span class=\"o\">=</span><span class=\"n\">require_https</span>\n    <span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">_url_has_allowed_host_and_scheme</span><span class=\"p\">(</span>\n        <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">),</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">,</span> <span class=\"n\">require_https</span><span class=\"o\">=</span><span class=\"n\">require_https</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_url_has_allowed_host_and_scheme</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">,</span> <span class=\"n\">require_https</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Chrome considers any URL with more than two slashes to be absolute, but</span>\n    <span class=\"c1\"># urlparse is not so flexible. Treat any url with three slashes as unsafe.</span>\n    <span class=\"k\">if</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;///&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">url_info</span> <span class=\"o\">=</span> <span class=\"n\">urlparse</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>  <span class=\"c1\"># e.g. invalid IPv6 addresses</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"c1\"># Forbid URLs like http:///example.com - with a scheme, but without a hostname.</span>\n    <span class=\"c1\"># In that URL, example.com is not the hostname but, a path component. However,</span>\n    <span class=\"c1\"># Chrome will still consider example.com to be the hostname, so we must not</span>\n    <span class=\"c1\"># allow this syntax.</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">netloc</span> <span class=\"ow\">and</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">scheme</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"c1\"># Forbid URLs that start with control characters. Some browsers (like</span>\n    <span class=\"c1\"># Chrome) ignore quite a few control characters at the start of a</span>\n    <span class=\"c1\"># URL and might consider the URL as scheme relative.</span>\n    <span class=\"k\">if</span> <span class=\"n\">unicodedata</span><span class=\"o\">.</span><span class=\"n\">category</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;C&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n    <span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">scheme</span>\n    <span class=\"c1\"># Consider URLs without a scheme (e.g. //example.com/p) to be http.</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">scheme</span> <span class=\"ow\">and</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">netloc</span><span class=\"p\">:</span>\n        <span class=\"n\">scheme</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;http&quot;</span>\n    <span class=\"n\">valid_schemes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;https&quot;</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">require_https</span> <span class=\"k\">else</span> <span class=\"p\">[</span><span class=\"s2\">&quot;http&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;https&quot;</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">netloc</span> <span class=\"ow\">or</span> <span class=\"n\">url_info</span><span class=\"o\">.</span><span class=\"n\">netloc</span> <span class=\"ow\">in</span> <span class=\"n\">allowed_hosts</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span>\n        <span class=\"ow\">not</span> <span class=\"n\">scheme</span> <span class=\"ow\">or</span> <span class=\"n\">scheme</span> <span class=\"ow\">in</span> <span class=\"n\">valid_schemes</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">escape_leading_slashes</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    If redirecting to an absolute path (two leading slashes), a slash must be</span>\n<span class=\"sd\">    escaped to prevent browsers from handling the path as schemaless and</span>\n<span class=\"sd\">    redirecting to another host.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;//&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/</span><span class=\"si\">%2F{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">&quot;//&quot;</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">url</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_parseparam</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">while</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;;&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">while</span> <span class=\"n\">end</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&quot;&#39;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">))</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">end</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n        <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"n\">end</span><span class=\"p\">]</span>\n        <span class=\"k\">yield</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"n\">end</span><span class=\"p\">:]</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_header_parameters</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parse a Content-type like header.</span>\n<span class=\"sd\">    Return the main content-type and a dictionary of options.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">_parseparam</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">line</span><span class=\"p\">)</span>\n    <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"fm\">__next__</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n    <span class=\"n\">pdict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">parts</span><span class=\"p\">:</span>\n        <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">has_encoding</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[:</span><span class=\"n\">i</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">):</span>\n                <span class=\"c1\"># Lang/encoding embedded in the value (like &quot;filename*=UTF-8&#39;&#39;file.ext&quot;)</span>\n                <span class=\"c1\"># https://tools.ietf.org/html/rfc2231#section-4</span>\n                <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"k\">if</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n                    <span class=\"n\">has_encoding</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">2</span> <span class=\"ow\">and</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">:</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;</span><span class=\"se\">\\\\</span><span class=\"s1\">&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">has_encoding</span><span class=\"p\">:</span>\n                <span class=\"n\">encoding</span><span class=\"p\">,</span> <span class=\"n\">lang</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">encoding</span><span class=\"p\">)</span>\n            <span class=\"n\">pdict</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n    <span class=\"k\">return</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">pdict</span>\n\n\n<div class=\"viewcode-block\" id=\"content_disposition_header\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.http.content_disposition_header\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">content_disposition_header</span><span class=\"p\">(</span><span class=\"n\">as_attachment</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Construct a Content-Disposition HTTP header value from the given filename</span>\n<span class=\"sd\">    as specified by RFC 6266.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">filename</span><span class=\"p\">:</span>\n        <span class=\"n\">disposition</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;attachment&quot;</span> <span class=\"k\">if</span> <span class=\"n\">as_attachment</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;inline&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">file_expr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;filename=&quot;</span><span class=\"si\">{}</span><span class=\"s1\">&quot;&#39;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;</span><span class=\"se\">\\&quot;</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">UnicodeEncodeError</span><span class=\"p\">:</span>\n            <span class=\"n\">file_expr</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;filename*=utf-8&#39;&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">disposition</span><span class=\"si\">}</span><span class=\"s2\">; </span><span class=\"si\">{</span><span class=\"n\">file_expr</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n    <span class=\"k\">elif</span> <span class=\"n\">as_attachment</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;attachment&quot;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span></div>\n</pre></div>", "current_page_name": "_modules/django/utils/http", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}