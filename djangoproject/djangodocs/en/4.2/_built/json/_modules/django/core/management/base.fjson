{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.core.management.base", "body": "<h1>Source code for django.core.management.base</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Base classes for writing management commands (named commands which can</span>\n<span class=\"sd\">be executed through ``django-admin`` or ``manage.py``).</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">,</span> <span class=\"n\">HelpFormatter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">TextIOBase</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">django</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">checks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.management.color</span> <span class=\"kn\">import</span> <span class=\"n\">color_style</span><span class=\"p\">,</span> <span class=\"n\">no_style</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">,</span> <span class=\"n\">connections</span>\n\n<span class=\"n\">ALL_CHECKS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;__all__&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"CommandError\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.CommandError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">CommandError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Exception class indicating a problem while executing a management</span>\n<span class=\"sd\">    command.</span>\n\n<span class=\"sd\">    If this exception is raised during the execution of a management</span>\n<span class=\"sd\">    command, it will be caught and turned into a nicely-printed error</span>\n<span class=\"sd\">    message to the appropriate output stream (i.e., stderr); as a</span>\n<span class=\"sd\">    result, raising this exception (with a sensible description of the</span>\n<span class=\"sd\">    error) is the preferred way to indicate that something has gone</span>\n<span class=\"sd\">    wrong in the execution of a command.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">returncode</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">=</span> <span class=\"n\">returncode</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SystemCheckError</span><span class=\"p\">(</span><span class=\"n\">CommandError</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The system check framework detected unrecoverable errors.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommandParser</span><span class=\"p\">(</span><span class=\"n\">ArgumentParser</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Customized ArgumentParser class to improve some error messages and prevent</span>\n<span class=\"sd\">    SystemExit in several occasions, as SystemExit is unacceptable when a</span>\n<span class=\"sd\">    command is called programmatically.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">missing_args_message</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">called_from_command_line</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">missing_args_message</span> <span class=\"o\">=</span> <span class=\"n\">missing_args_message</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">called_from_command_line</span> <span class=\"o\">=</span> <span class=\"n\">called_from_command_line</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse_args</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Catch missing argument for a better error message</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">missing_args_message</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"p\">(</span>\n            <span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"ow\">not</span> <span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">missing_args_message</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">called_from_command_line</span><span class=\"p\">:</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">CommandError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Error: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_subparsers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">parser_class</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;parser_class&quot;</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">parser_class</span><span class=\"p\">,</span> <span class=\"n\">CommandParser</span><span class=\"p\">):</span>\n            <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;parser_class&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span>\n                <span class=\"n\">parser_class</span><span class=\"p\">,</span>\n                <span class=\"n\">called_from_command_line</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">called_from_command_line</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_subparsers</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_default_options</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Include any default options that all commands should accept here</span>\n<span class=\"sd\">    so that ManagementUtility can handle them before searching for</span>\n<span class=\"sd\">    user commands.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">:</span>\n        <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s2\">&quot;DJANGO_SETTINGS_MODULE&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">settings</span>\n    <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">pythonpath</span><span class=\"p\">:</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">pythonpath</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">no_translations</span><span class=\"p\">(</span><span class=\"n\">handle_func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Decorator that forces a command to run with translations deactivated.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">translation</span>\n\n        <span class=\"n\">saved_locale</span> <span class=\"o\">=</span> <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">get_language</span><span class=\"p\">()</span>\n        <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">deactivate_all</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">handle_func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">saved_locale</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">translation</span><span class=\"o\">.</span><span class=\"n\">activate</span><span class=\"p\">(</span><span class=\"n\">saved_locale</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">res</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DjangoHelpFormatter</span><span class=\"p\">(</span><span class=\"n\">HelpFormatter</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Customized formatter so that command-specific arguments appear in the</span>\n<span class=\"sd\">    --help output before arguments common to all commands.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">show_last</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;--version&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--verbosity&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--traceback&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--settings&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--pythonpath&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--no-color&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--force-color&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;--skip-checks&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_reordered_actions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span>\n            <span class=\"n\">actions</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">option_strings</span><span class=\"p\">)</span> <span class=\"o\">&amp;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">show_last</span> <span class=\"o\">!=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_usage</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">usage</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_usage</span><span class=\"p\">(</span><span class=\"n\">usage</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reordered_actions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">),</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">actions</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reordered_actions</span><span class=\"p\">(</span><span class=\"n\">actions</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">OutputWrapper</span><span class=\"p\">(</span><span class=\"n\">TextIOBase</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Wrapper around stdout/stderr</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">style_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_style_func</span>\n\n    <span class=\"nd\">@style_func</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">style_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">style_func</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">style_func</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">isatty</span><span class=\"p\">():</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_style_func</span> <span class=\"o\">=</span> <span class=\"n\">style_func</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_style_func</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">ending</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span> <span class=\"o\">=</span> <span class=\"n\">out</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style_func</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"n\">ending</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getattr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">flush</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span><span class=\"p\">,</span> <span class=\"s2\">&quot;flush&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span><span class=\"o\">.</span><span class=\"n\">flush</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">isatty</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span><span class=\"p\">,</span> <span class=\"s2\">&quot;isatty&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span><span class=\"o\">.</span><span class=\"n\">isatty</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">style_func</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">ending</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">ending</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">ending</span> <span class=\"k\">if</span> <span class=\"n\">ending</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">ending</span>\n        <span class=\"k\">if</span> <span class=\"n\">ending</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">ending</span><span class=\"p\">):</span>\n            <span class=\"n\">msg</span> <span class=\"o\">+=</span> <span class=\"n\">ending</span>\n        <span class=\"n\">style_func</span> <span class=\"o\">=</span> <span class=\"n\">style_func</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style_func</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_out</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">style_func</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">))</span>\n\n\n<div class=\"viewcode-block\" id=\"BaseCommand\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">BaseCommand</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The base class from which all management commands ultimately</span>\n<span class=\"sd\">    derive.</span>\n\n<span class=\"sd\">    Use this class if you want access to all of the mechanisms which</span>\n<span class=\"sd\">    parse the command-line arguments and work out what code to call in</span>\n<span class=\"sd\">    response; if you don&#39;t need to change any of that behavior,</span>\n<span class=\"sd\">    consider using one of the subclasses defined in this file.</span>\n\n<span class=\"sd\">    If you are interested in overriding/customizing various aspects of</span>\n<span class=\"sd\">    the command-parsing and -execution behavior, the normal flow works</span>\n<span class=\"sd\">    as follows:</span>\n\n<span class=\"sd\">    1. ``django-admin`` or ``manage.py`` loads the command class</span>\n<span class=\"sd\">       and calls its ``run_from_argv()`` method.</span>\n\n<span class=\"sd\">    2. The ``run_from_argv()`` method calls ``create_parser()`` to get</span>\n<span class=\"sd\">       an ``ArgumentParser`` for the arguments, parses them, performs</span>\n<span class=\"sd\">       any environment changes requested by options like</span>\n<span class=\"sd\">       ``pythonpath``, and then calls the ``execute()`` method,</span>\n<span class=\"sd\">       passing the parsed arguments.</span>\n\n<span class=\"sd\">    3. The ``execute()`` method attempts to carry out the command by</span>\n<span class=\"sd\">       calling the ``handle()`` method with the parsed arguments; any</span>\n<span class=\"sd\">       output produced by ``handle()`` will be printed to standard</span>\n<span class=\"sd\">       output and, if the command is intended to produce a block of</span>\n<span class=\"sd\">       SQL statements, will be wrapped in ``BEGIN`` and ``COMMIT``.</span>\n\n<span class=\"sd\">    4. If ``handle()`` or ``execute()`` raised any exception (e.g.</span>\n<span class=\"sd\">       ``CommandError``), ``run_from_argv()`` will  instead print an error</span>\n<span class=\"sd\">       message to ``stderr``.</span>\n\n<span class=\"sd\">    Thus, the ``handle()`` method is typically the starting point for</span>\n<span class=\"sd\">    subclasses; many built-in commands and command types either place</span>\n<span class=\"sd\">    all of their logic in ``handle()``, or perform some additional</span>\n<span class=\"sd\">    parsing work in ``handle()`` and then delegate from it to more</span>\n<span class=\"sd\">    specialized methods as needed.</span>\n\n<span class=\"sd\">    Several attributes affect behavior at various steps along the way:</span>\n\n<span class=\"sd\">    ``help``</span>\n<span class=\"sd\">        A short description of the command, which will be printed in</span>\n<span class=\"sd\">        help messages.</span>\n\n<span class=\"sd\">    ``output_transaction``</span>\n<span class=\"sd\">        A boolean indicating whether the command outputs SQL</span>\n<span class=\"sd\">        statements; if ``True``, the output will automatically be</span>\n<span class=\"sd\">        wrapped with ``BEGIN;`` and ``COMMIT;``. Default value is</span>\n<span class=\"sd\">        ``False``.</span>\n\n<span class=\"sd\">    ``requires_migrations_checks``</span>\n<span class=\"sd\">        A boolean; if ``True``, the command prints a warning if the set of</span>\n<span class=\"sd\">        migrations on disk don&#39;t match the migrations in the database.</span>\n\n<span class=\"sd\">    ``requires_system_checks``</span>\n<span class=\"sd\">        A list or tuple of tags, e.g. [Tags.staticfiles, Tags.models]. System</span>\n<span class=\"sd\">        checks registered in the chosen tags will be checked for errors prior</span>\n<span class=\"sd\">        to executing the command. The value &#39;__all__&#39; can be used to specify</span>\n<span class=\"sd\">        that all system checks should be performed. Default value is &#39;__all__&#39;.</span>\n\n<span class=\"sd\">        To validate an individual application&#39;s models</span>\n<span class=\"sd\">        rather than all applications&#39; models, call</span>\n<span class=\"sd\">        ``self.check(app_configs)`` from ``handle()``, where ``app_configs``</span>\n<span class=\"sd\">        is the list of application&#39;s configuration provided by the</span>\n<span class=\"sd\">        app registry.</span>\n\n<span class=\"sd\">    ``stealth_options``</span>\n<span class=\"sd\">        A tuple of any options the command uses which aren&#39;t defined by the</span>\n<span class=\"sd\">        argument parser.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># Metadata about this command.</span>\n    <span class=\"n\">help</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"c1\"># Configuration shortcuts that alter various logic.</span>\n    <span class=\"n\">_called_from_command_line</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">output_transaction</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>  <span class=\"c1\"># Whether to wrap the output in a &quot;BEGIN; COMMIT;&quot;</span>\n    <span class=\"n\">requires_migrations_checks</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">requires_system_checks</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;__all__&quot;</span>\n    <span class=\"c1\"># Arguments, common to all commands, which aren&#39;t defined by the argument</span>\n    <span class=\"c1\"># parser.</span>\n    <span class=\"n\">base_stealth_options</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;stderr&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;stdout&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Command-specific options not defined by the argument parser.</span>\n    <span class=\"n\">stealth_options</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n    <span class=\"n\">suppressed_base_arguments</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">no_color</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">force_color</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">OutputWrapper</span><span class=\"p\">(</span><span class=\"n\">stdout</span> <span class=\"ow\">or</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">OutputWrapper</span><span class=\"p\">(</span><span class=\"n\">stderr</span> <span class=\"ow\">or</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">no_color</span> <span class=\"ow\">and</span> <span class=\"n\">force_color</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">CommandError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;no_color&#39; and &#39;force_color&#39; can&#39;t be used together.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">no_color</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">no_style</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">color_style</span><span class=\"p\">(</span><span class=\"n\">force_color</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">style_func</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">ERROR</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_system_checks</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">))</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_system_checks</span> <span class=\"o\">!=</span> <span class=\"n\">ALL_CHECKS</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;requires_system_checks must be a list or tuple.&quot;</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"BaseCommand.get_version\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand.get_version\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_version</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the Django version, which should be correct for all built-in</span>\n<span class=\"sd\">        Django commands. User-supplied commands can override this method to</span>\n<span class=\"sd\">        return their own version.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">()</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseCommand.create_parser\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand.create_parser\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">create_parser</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prog_name</span><span class=\"p\">,</span> <span class=\"n\">subcommand</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create and return the ``ArgumentParser`` which will be used to</span>\n<span class=\"sd\">        parse the arguments to this command.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;formatter_class&quot;</span><span class=\"p\">,</span> <span class=\"n\">DjangoHelpFormatter</span><span class=\"p\">)</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">CommandParser</span><span class=\"p\">(</span>\n            <span class=\"n\">prog</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">basename</span><span class=\"p\">(</span><span class=\"n\">prog_name</span><span class=\"p\">),</span> <span class=\"n\">subcommand</span><span class=\"p\">),</span>\n            <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">help</span> <span class=\"ow\">or</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n            <span class=\"n\">missing_args_message</span><span class=\"o\">=</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;missing_args_message&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n            <span class=\"n\">called_from_command_line</span><span class=\"o\">=</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_called_from_command_line&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n            <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--version&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;version&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_version</span><span class=\"p\">(),</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Show program&#39;s version number and exit.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;-v&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--verbosity&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span>\n            <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Verbosity level; 0=minimal output, 1=normal output, 2=verbose output, &quot;</span>\n                <span class=\"s2\">&quot;3=very verbose output&quot;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--settings&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The Python path to a settings module, e.g. &quot;</span>\n                <span class=\"s1\">&#39;&quot;myproject.settings.main&quot;. If this isn</span><span class=\"se\">\\&#39;</span><span class=\"s1\">t provided, the &#39;</span>\n                <span class=\"s2\">&quot;DJANGO_SETTINGS_MODULE environment variable will be used.&quot;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--pythonpath&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;A directory to add to the Python path, e.g. &quot;</span>\n                <span class=\"s1\">&#39;&quot;/home/djangoprojects/myproject&quot;.&#39;</span>\n            <span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--traceback&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Raise on CommandError exceptions.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--no-color&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Don&#39;t colorize the command output.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_base_argument</span><span class=\"p\">(</span>\n            <span class=\"n\">parser</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;--force-color&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Force colorization of the command output.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_system_checks</span><span class=\"p\">:</span>\n            <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;--skip-checks&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">action</span><span class=\"o\">=</span><span class=\"s2\">&quot;store_true&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;Skip system checks.&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_arguments</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">parser</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseCommand.add_arguments\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand.add_arguments\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Entry point for subclassed commands to add custom arguments.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_base_argument</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Call the parser&#39;s add_argument() method, suppressing the help text</span>\n<span class=\"sd\">        according to BaseCommand.suppressed_base_arguments.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">suppressed_base_arguments</span><span class=\"p\">:</span>\n                <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;help&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">SUPPRESS</span>\n                <span class=\"k\">break</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">print_help</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prog_name</span><span class=\"p\">,</span> <span class=\"n\">subcommand</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Print the help message for this command, derived from</span>\n<span class=\"sd\">        ``self.usage()``.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_parser</span><span class=\"p\">(</span><span class=\"n\">prog_name</span><span class=\"p\">,</span> <span class=\"n\">subcommand</span><span class=\"p\">)</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">print_help</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run_from_argv</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">argv</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Set up any environment changes requested (e.g., Python path</span>\n<span class=\"sd\">        and Django settings), then run this command. If the</span>\n<span class=\"sd\">        command raises a ``CommandError``, intercept it and print it sensibly</span>\n<span class=\"sd\">        to stderr. If the ``--traceback`` option is present or the raised</span>\n<span class=\"sd\">        ``Exception`` is not ``CommandError``, raise it.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_called_from_command_line</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_parser</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:])</span>\n        <span class=\"n\">cmd_options</span> <span class=\"o\">=</span> <span class=\"nb\">vars</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Move positional args out of options to mimic legacy optparse</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">cmd_options</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">,</span> <span class=\"p\">())</span>\n        <span class=\"n\">handle_default_options</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">cmd_options</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">CommandError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">traceback</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n\n            <span class=\"c1\"># SystemCheckError takes care of its own formatting.</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">SystemCheckError</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">))</span>\n            <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">returncode</span><span class=\"p\">)</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">connections</span><span class=\"o\">.</span><span class=\"n\">close_all</span><span class=\"p\">()</span>\n            <span class=\"k\">except</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Ignore if connections aren&#39;t setup at this point (e.g. no</span>\n                <span class=\"c1\"># configured settings).</span>\n                <span class=\"k\">pass</span>\n\n<div class=\"viewcode-block\" id=\"BaseCommand.execute\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand.execute\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">execute</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Try to execute this command, performing system checks if needed (as</span>\n<span class=\"sd\">        controlled by the ``requires_system_checks`` attribute, except if</span>\n<span class=\"sd\">        force-skipped).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;force_color&quot;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;no_color&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">CommandError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The --no-color and --force-color options can&#39;t be used together.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;force_color&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">color_style</span><span class=\"p\">(</span><span class=\"n\">force_color</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;no_color&quot;</span><span class=\"p\">]:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span> <span class=\"o\">=</span> <span class=\"n\">no_style</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">style_func</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;stdout&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">OutputWrapper</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;stdout&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">if</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;stderr&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span> <span class=\"o\">=</span> <span class=\"n\">OutputWrapper</span><span class=\"p\">(</span><span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;stderr&quot;</span><span class=\"p\">])</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_system_checks</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;skip_checks&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_system_checks</span> <span class=\"o\">==</span> <span class=\"n\">ALL_CHECKS</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_system_checks</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">requires_migrations_checks</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">check_migrations</span><span class=\"p\">()</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">output</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">output_transaction</span><span class=\"p\">:</span>\n                <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;database&quot;</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">)]</span>\n                <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">SQL_KEYWORD</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">start_transaction_sql</span><span class=\"p\">()),</span>\n                    <span class=\"n\">output</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">SQL_KEYWORD</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">end_transaction_sql</span><span class=\"p\">()),</span>\n                <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">output</span></div>\n\n<div class=\"viewcode-block\" id=\"BaseCommand.check\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand.check\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">app_configs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">display_num_errors</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">include_deployment_checks</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">fail_level</span><span class=\"o\">=</span><span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">,</span>\n        <span class=\"n\">databases</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Use the system check framework to validate entire Django project.</span>\n<span class=\"sd\">        Raise CommandError for any serious message (error or critical errors).</span>\n<span class=\"sd\">        If there are only light messages (like warnings), print them to stderr</span>\n<span class=\"sd\">        and don&#39;t raise an exception.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">all_issues</span> <span class=\"o\">=</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">run_checks</span><span class=\"p\">(</span>\n            <span class=\"n\">app_configs</span><span class=\"o\">=</span><span class=\"n\">app_configs</span><span class=\"p\">,</span>\n            <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"n\">tags</span><span class=\"p\">,</span>\n            <span class=\"n\">include_deployment_checks</span><span class=\"o\">=</span><span class=\"n\">include_deployment_checks</span><span class=\"p\">,</span>\n            <span class=\"n\">databases</span><span class=\"o\">=</span><span class=\"n\">databases</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"n\">footer</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"n\">visible_issue_count</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>  <span class=\"c1\"># excludes silenced warnings</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">all_issues</span><span class=\"p\">:</span>\n            <span class=\"n\">debugs</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">all_issues</span> <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"o\">&lt;</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">INFO</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_silenced</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">infos</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">all_issues</span>\n                <span class=\"k\">if</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">INFO</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"o\">&lt;</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">WARNING</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_silenced</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">warnings</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">all_issues</span>\n                <span class=\"k\">if</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">WARNING</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"o\">&lt;</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">ERROR</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_silenced</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">all_issues</span>\n                <span class=\"k\">if</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">ERROR</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"o\">&lt;</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">CRITICAL</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_silenced</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">criticals</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"n\">e</span>\n                <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">all_issues</span>\n                <span class=\"k\">if</span> <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">CRITICAL</span> <span class=\"o\">&lt;=</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">level</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_silenced</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n            <span class=\"n\">sorted_issues</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"n\">criticals</span><span class=\"p\">,</span> <span class=\"s2\">&quot;CRITICALS&quot;</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"s2\">&quot;ERRORS&quot;</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"n\">warnings</span><span class=\"p\">,</span> <span class=\"s2\">&quot;WARNINGS&quot;</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"n\">infos</span><span class=\"p\">,</span> <span class=\"s2\">&quot;INFOS&quot;</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"n\">debugs</span><span class=\"p\">,</span> <span class=\"s2\">&quot;DEBUGS&quot;</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n\n            <span class=\"k\">for</span> <span class=\"n\">issues</span><span class=\"p\">,</span> <span class=\"n\">group_name</span> <span class=\"ow\">in</span> <span class=\"n\">sorted_issues</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">issues</span><span class=\"p\">:</span>\n                    <span class=\"n\">visible_issue_count</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">issues</span><span class=\"p\">)</span>\n                    <span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n                        <span class=\"k\">if</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_serious</span><span class=\"p\">()</span>\n                        <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">WARNING</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n                        <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">issues</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">formatted</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">formatted</span><span class=\"p\">))</span>\n                    <span class=\"n\">body</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"se\">\\n</span><span class=\"si\">%s</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">group_name</span><span class=\"p\">,</span> <span class=\"n\">formatted</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">visible_issue_count</span><span class=\"p\">:</span>\n            <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;System check identified some issues:</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">display_num_errors</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">visible_issue_count</span><span class=\"p\">:</span>\n                <span class=\"n\">footer</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n            <span class=\"n\">footer</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;System check identified </span><span class=\"si\">%s</span><span class=\"s2\"> (</span><span class=\"si\">%s</span><span class=\"s2\"> silenced).&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"s2\">&quot;no issues&quot;</span>\n                <span class=\"k\">if</span> <span class=\"n\">visible_issue_count</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n                <span class=\"k\">else</span> <span class=\"s2\">&quot;1 issue&quot;</span>\n                <span class=\"k\">if</span> <span class=\"n\">visible_issue_count</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n                <span class=\"k\">else</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> issues&quot;</span> <span class=\"o\">%</span> <span class=\"n\">visible_issue_count</span><span class=\"p\">,</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">all_issues</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">visible_issue_count</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_serious</span><span class=\"p\">(</span><span class=\"n\">fail_level</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">is_silenced</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">all_issues</span><span class=\"p\">):</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">ERROR</span><span class=\"p\">(</span><span class=\"s2\">&quot;SystemCheckError: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">header</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">body</span> <span class=\"o\">+</span> <span class=\"n\">footer</span>\n            <span class=\"k\">raise</span> <span class=\"n\">SystemCheckError</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">header</span> <span class=\"o\">+</span> <span class=\"n\">body</span> <span class=\"o\">+</span> <span class=\"n\">footer</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">msg</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">visible_issue_count</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check_migrations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Print a warning if the set of migrations on disk don&#39;t match the</span>\n<span class=\"sd\">        migrations in the database.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.db.migrations.executor</span> <span class=\"kn\">import</span> <span class=\"n\">MigrationExecutor</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">MigrationExecutor</span><span class=\"p\">(</span><span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No databases are configured (or the dummy one)</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">plan</span> <span class=\"o\">=</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">migration_plan</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">graph</span><span class=\"o\">.</span><span class=\"n\">leaf_nodes</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"n\">plan</span><span class=\"p\">:</span>\n            <span class=\"n\">apps_waiting_migration</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span>\n                <span class=\"p\">{</span><span class=\"n\">migration</span><span class=\"o\">.</span><span class=\"n\">app_label</span> <span class=\"k\">for</span> <span class=\"n\">migration</span><span class=\"p\">,</span> <span class=\"n\">backwards</span> <span class=\"ow\">in</span> <span class=\"n\">plan</span><span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">NOTICE</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">You have </span><span class=\"si\">%(unapplied_migration_count)s</span><span class=\"s2\"> unapplied migration(s). &quot;</span>\n                    <span class=\"s2\">&quot;Your project may not work properly until you apply the &quot;</span>\n                    <span class=\"s2\">&quot;migrations for app(s): </span><span class=\"si\">%(apps_waiting_migration)s</span><span class=\"s2\">.&quot;</span>\n                    <span class=\"o\">%</span> <span class=\"p\">{</span>\n                        <span class=\"s2\">&quot;unapplied_migration_count&quot;</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">plan</span><span class=\"p\">),</span>\n                        <span class=\"s2\">&quot;apps_waiting_migration&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">apps_waiting_migration</span><span class=\"p\">),</span>\n                    <span class=\"p\">}</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">style</span><span class=\"o\">.</span><span class=\"n\">NOTICE</span><span class=\"p\">(</span><span class=\"s2\">&quot;Run &#39;python manage.py migrate&#39; to apply them.&quot;</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"BaseCommand.handle\"><a class=\"viewcode-back\" href=\"../../../../../howto/custom-management-commands/#django.core.management.BaseCommand.handle\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        The actual logic of the command. Subclasses must implement</span>\n<span class=\"sd\">        this method.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of BaseCommand must provide a handle() method&quot;</span>\n        <span class=\"p\">)</span></div></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AppCommand</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A management command which takes one or more installed application labels</span>\n<span class=\"sd\">    as arguments, and does something with each of them.</span>\n\n<span class=\"sd\">    Rather than implementing ``handle()``, subclasses must implement</span>\n<span class=\"sd\">    ``handle_app_config()``, which will be called once for each application.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">missing_args_message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Enter at least one application label.&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;args&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s2\">&quot;One or more application label.&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">app_labels</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">app_configs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_app_config</span><span class=\"p\">(</span><span class=\"n\">app_label</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">app_label</span> <span class=\"ow\">in</span> <span class=\"n\">app_labels</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">LookupError</span><span class=\"p\">,</span> <span class=\"ne\">ImportError</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">CommandError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">. Are you sure your INSTALLED_APPS setting is correct?&quot;</span> <span class=\"o\">%</span> <span class=\"n\">e</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">app_config</span> <span class=\"ow\">in</span> <span class=\"n\">app_configs</span><span class=\"p\">:</span>\n            <span class=\"n\">app_output</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle_app_config</span><span class=\"p\">(</span><span class=\"n\">app_config</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">app_output</span><span class=\"p\">:</span>\n                <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">app_output</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_app_config</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app_config</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Perform the command&#39;s actions for app_config, an AppConfig instance</span>\n<span class=\"sd\">        corresponding to an application label given on the command line.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Subclasses of AppCommand must provide a handle_app_config() method.&quot;</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LabelCommand</span><span class=\"p\">(</span><span class=\"n\">BaseCommand</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A management command which takes one or more arbitrary arguments</span>\n<span class=\"sd\">    (labels) on the command line, and does something with each of</span>\n<span class=\"sd\">    them.</span>\n\n<span class=\"sd\">    Rather than implementing ``handle()``, subclasses must implement</span>\n<span class=\"sd\">    ``handle_label()``, which will be called once for each label.</span>\n\n<span class=\"sd\">    If the arguments should be names of installed applications, use</span>\n<span class=\"sd\">    ``AppCommand`` instead.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;label&quot;</span>\n    <span class=\"n\">missing_args_message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Enter at least one </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">label</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s2\">&quot;args&quot;</span><span class=\"p\">,</span> <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"s2\">&quot;+&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">labels</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">label</span> <span class=\"ow\">in</span> <span class=\"n\">labels</span><span class=\"p\">:</span>\n            <span class=\"n\">label_output</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle_label</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">label_output</span><span class=\"p\">:</span>\n                <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">label_output</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_label</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">label</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Perform the command&#39;s actions for ``label``, which will be the</span>\n<span class=\"sd\">        string as given on the command line.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of LabelCommand must provide a handle_label() method&quot;</span>\n        <span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/django/core/management/base", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}