{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.core.files.uploadhandler", "body": "<h1>Source code for django.core.files.uploadhandler</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Base file upload handler classes, and the built-in concrete subclasses</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files.uploadedfile</span> <span class=\"kn\">import</span> <span class=\"n\">InMemoryUploadedFile</span><span class=\"p\">,</span> <span class=\"n\">TemporaryUploadedFile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.module_loading</span> <span class=\"kn\">import</span> <span class=\"n\">import_string</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;UploadFileException&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;StopUpload&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;SkipFile&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;FileUploadHandler&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;TemporaryFileUploadHandler&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;MemoryFileUploadHandler&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;load_handler&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;StopFutureHandlers&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UploadFileException</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Any error having to do with uploading files.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StopUpload</span><span class=\"p\">(</span><span class=\"n\">UploadFileException</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This exception is raised when an upload must abort.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">connection_reset</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        If ``connection_reset`` is ``True``, Django knows will halt the upload</span>\n<span class=\"sd\">        without consuming the rest of the upload. This will cause the browser to</span>\n<span class=\"sd\">        show a &quot;connection reset&quot; error.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connection_reset</span> <span class=\"o\">=</span> <span class=\"n\">connection_reset</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">connection_reset</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;StopUpload: Halt current upload.&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;StopUpload: Consume request data, then halt.&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SkipFile</span><span class=\"p\">(</span><span class=\"n\">UploadFileException</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    This exception is raised by an upload handler that wants to skip a given file.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StopFutureHandlers</span><span class=\"p\">(</span><span class=\"n\">UploadFileException</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Upload handlers that have handled a file and do not want future handlers to</span>\n<span class=\"sd\">    run should raise this exception instead of returning None.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">FileUploadHandler</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Base class for streaming upload handlers.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">chunk_size</span> <span class=\"o\">=</span> <span class=\"mi\">64</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">10</span>  <span class=\"c1\"># : The default chunk size is 64 KB.</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_length</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type_extra</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">request</span>\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler.handle_raw_input\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.handle_raw_input\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">handle_raw_input</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_data</span><span class=\"p\">,</span> <span class=\"n\">META</span><span class=\"p\">,</span> <span class=\"n\">content_length</span><span class=\"p\">,</span> <span class=\"n\">boundary</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Handle the raw input from the client.</span>\n\n<span class=\"sd\">        Parameters:</span>\n\n<span class=\"sd\">            :input_data:</span>\n<span class=\"sd\">                An object that supports reading via .read().</span>\n<span class=\"sd\">            :META:</span>\n<span class=\"sd\">                ``request.META``.</span>\n<span class=\"sd\">            :content_length:</span>\n<span class=\"sd\">                The (integer) value of the Content-Length header from the</span>\n<span class=\"sd\">                client.</span>\n<span class=\"sd\">            :boundary: The boundary from the Content-Type header. Be sure to</span>\n<span class=\"sd\">                prepend two &#39;--&#39;.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler.new_file\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.new_file\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">new_file</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">field_name</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"p\">,</span>\n        <span class=\"n\">content_type</span><span class=\"p\">,</span>\n        <span class=\"n\">content_length</span><span class=\"p\">,</span>\n        <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">content_type_extra</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Signal that a new file has been started.</span>\n\n<span class=\"sd\">        Warning: As with any data from the client, you should not trust</span>\n<span class=\"sd\">        content_length (and sometimes won&#39;t even get it).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_name</span> <span class=\"o\">=</span> <span class=\"n\">field_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span> <span class=\"o\">=</span> <span class=\"n\">file_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span> <span class=\"o\">=</span> <span class=\"n\">content_type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_length</span> <span class=\"o\">=</span> <span class=\"n\">content_length</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span> <span class=\"o\">=</span> <span class=\"n\">charset</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type_extra</span> <span class=\"o\">=</span> <span class=\"n\">content_type_extra</span></div>\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler.receive_data_chunk\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.receive_data_chunk\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">receive_data_chunk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raw_data</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Receive data from the streamed upload parser. ``start`` is the position</span>\n<span class=\"sd\">        in the file of the chunk.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of FileUploadHandler must provide a receive_data_chunk() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler.file_complete\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.file_complete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">file_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_size</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Signal that a file has completed. File size corresponds to the actual</span>\n<span class=\"sd\">        size accumulated by all the chunks.</span>\n\n<span class=\"sd\">        Subclasses should return a valid ``UploadedFile`` object.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of FileUploadHandler must provide a file_complete() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler.upload_complete\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.upload_complete\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">upload_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Signal that the upload is complete. Subclasses should perform cleanup</span>\n<span class=\"sd\">        that is necessary for this handler.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n\n<div class=\"viewcode-block\" id=\"FileUploadHandler.upload_interrupted\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.FileUploadHandler.upload_interrupted\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">upload_interrupted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Signal that the upload was interrupted. Subclasses should perform</span>\n<span class=\"sd\">        cleanup that is necessary for this handler.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div></div>\n\n\n<div class=\"viewcode-block\" id=\"TemporaryFileUploadHandler\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.TemporaryFileUploadHandler\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">TemporaryFileUploadHandler</span><span class=\"p\">(</span><span class=\"n\">FileUploadHandler</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Upload handler that streams data into a temporary file.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">new_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create the file object to append to as data is coming in.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">new_file</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">TemporaryUploadedFile</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type_extra</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">receive_data_chunk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raw_data</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">file_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_size</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"n\">file_size</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">upload_interrupted</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"s2\">&quot;file&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">temp_location</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">temporary_file_path</span><span class=\"p\">()</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">temp_location</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n                <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"MemoryFileUploadHandler\"><a class=\"viewcode-back\" href=\"../../../../../ref/files/uploads/#django.core.files.uploadhandler.MemoryFileUploadHandler\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">MemoryFileUploadHandler</span><span class=\"p\">(</span><span class=\"n\">FileUploadHandler</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    File upload handler to stream uploads into memory (used for small files).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_raw_input</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">input_data</span><span class=\"p\">,</span> <span class=\"n\">META</span><span class=\"p\">,</span> <span class=\"n\">content_length</span><span class=\"p\">,</span> <span class=\"n\">boundary</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Use the content_length to signal whether or not this handler should be</span>\n<span class=\"sd\">        used.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Check the content-length header to see if we should</span>\n        <span class=\"c1\"># If the post is too large, we cannot use the Memory handler.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activated</span> <span class=\"o\">=</span> <span class=\"n\">content_length</span> <span class=\"o\">&lt;=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FILE_UPLOAD_MAX_MEMORY_SIZE</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">new_file</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">new_file</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activated</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n            <span class=\"k\">raise</span> <span class=\"n\">StopFutureHandlers</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">receive_data_chunk</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">raw_data</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add the data to the BytesIO file.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activated</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">raw_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">file_complete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file_size</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return a file object if this handler is activated.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">activated</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">InMemoryUploadedFile</span><span class=\"p\">(</span>\n            <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">,</span>\n            <span class=\"n\">field_name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_name</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_name</span><span class=\"p\">,</span>\n            <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">file_size</span><span class=\"p\">,</span>\n            <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">charset</span><span class=\"p\">,</span>\n            <span class=\"n\">content_type_extra</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content_type_extra</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">load_handler</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Given a path to a handler, return an instance of that handler.</span>\n\n<span class=\"sd\">    E.g.::</span>\n<span class=\"sd\">        &gt;&gt;&gt; from django.http import HttpRequest</span>\n<span class=\"sd\">        &gt;&gt;&gt; request = HttpRequest()</span>\n<span class=\"sd\">        &gt;&gt;&gt; load_handler(</span>\n<span class=\"sd\">        ...     &#39;django.core.files.uploadhandler.TemporaryFileUploadHandler&#39;,</span>\n<span class=\"sd\">        ...     request,</span>\n<span class=\"sd\">        ... )</span>\n<span class=\"sd\">        &lt;TemporaryFileUploadHandler object at 0x...&gt;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/django/core/files/uploadhandler", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}