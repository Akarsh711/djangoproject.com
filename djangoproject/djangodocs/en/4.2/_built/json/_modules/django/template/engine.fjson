{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.template.engine", "body": "<h1>Source code for django.template.engine</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.module_loading</span> <span class=\"kn\">import</span> <span class=\"n\">import_string</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.base</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.context</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span><span class=\"p\">,</span> <span class=\"n\">_builtin_context_processors</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateDoesNotExist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.library</span> <span class=\"kn\">import</span> <span class=\"n\">import_library</span>\n\n\n<div class=\"viewcode-block\" id=\"Engine\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Engine\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Engine</span><span class=\"p\">:</span>\n    <span class=\"n\">default_builtins</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;django.template.defaulttags&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;django.template.defaultfilters&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;django.template.loader_tags&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">dirs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">app_dirs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">context_processors</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">loaders</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">string_if_invalid</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">file_charset</span><span class=\"o\">=</span><span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">libraries</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">builtins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">dirs</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">dirs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">context_processors</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">context_processors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">loaders</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">loaders</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;django.template.loaders.filesystem.Loader&quot;</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">app_dirs</span><span class=\"p\">:</span>\n                <span class=\"n\">loaders</span> <span class=\"o\">+=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;django.template.loaders.app_directories.Loader&quot;</span><span class=\"p\">]</span>\n            <span class=\"n\">loaders</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">&quot;django.template.loaders.cached.Loader&quot;</span><span class=\"p\">,</span> <span class=\"n\">loaders</span><span class=\"p\">)]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">app_dirs</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;app_dirs must not be set when loaders is defined.&quot;</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">libraries</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">libraries</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">builtins</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">builtins</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dirs</span> <span class=\"o\">=</span> <span class=\"n\">dirs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_dirs</span> <span class=\"o\">=</span> <span class=\"n\">app_dirs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autoescape</span> <span class=\"o\">=</span> <span class=\"n\">autoescape</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_processors</span> <span class=\"o\">=</span> <span class=\"n\">context_processors</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug</span> <span class=\"o\">=</span> <span class=\"n\">debug</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loaders</span> <span class=\"o\">=</span> <span class=\"n\">loaders</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span> <span class=\"o\">=</span> <span class=\"n\">string_if_invalid</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_charset</span> <span class=\"o\">=</span> <span class=\"n\">file_charset</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">libraries</span> <span class=\"o\">=</span> <span class=\"n\">libraries</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_libraries</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_template_libraries</span><span class=\"p\">(</span><span class=\"n\">libraries</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">builtins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_builtins</span> <span class=\"o\">+</span> <span class=\"n\">builtins</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_builtins</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_template_builtins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">builtins</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\"> app_dirs=</span><span class=\"si\">%s%s</span><span class=\"s2\"> debug=</span><span class=\"si\">%s</span><span class=\"s2\"> loaders=</span><span class=\"si\">%s</span><span class=\"s2\"> string_if_invalid=</span><span class=\"si\">%s</span><span class=\"s2\"> &quot;</span>\n            <span class=\"s2\">&quot;file_charset=</span><span class=\"si\">%s%s%s</span><span class=\"s2\"> autoescape=</span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span>\n        <span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dirs</span> <span class=\"k\">else</span> <span class=\"s2\">&quot; dirs=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dirs</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_dirs</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_processors</span>\n            <span class=\"k\">else</span> <span class=\"s2\">&quot; context_processors=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_processors</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">,</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loaders</span><span class=\"p\">),</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span><span class=\"p\">),</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file_charset</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">libraries</span> <span class=\"k\">else</span> <span class=\"s2\">&quot; libraries=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">libraries</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;&quot;</span> <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">builtins</span> <span class=\"k\">else</span> <span class=\"s2\">&quot; builtins=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">builtins</span><span class=\"p\">),</span>\n            <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autoescape</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Engine.get_default\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Engine.get_default\">[docs]</a>    <span class=\"nd\">@staticmethod</span>\n    <span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">lru_cache</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_default</span><span class=\"p\">():</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the first DjangoTemplates backend that&#39;s configured, or raise</span>\n<span class=\"sd\">        ImproperlyConfigured if none are configured.</span>\n\n<span class=\"sd\">        This is required for preserving historical APIs that rely on a</span>\n<span class=\"sd\">        globally available, implicitly configured engine such as:</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; from django.template import Context, Template</span>\n<span class=\"sd\">        &gt;&gt;&gt; template = Template(&quot;Hello {{ name }}!&quot;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; context = Context({&#39;name&#39;: &quot;world&quot;})</span>\n<span class=\"sd\">        &gt;&gt;&gt; template.render(context)</span>\n<span class=\"sd\">        &#39;Hello world!&#39;</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Since Engine is imported in django.template and since</span>\n        <span class=\"c1\"># DjangoTemplates is a wrapper around this Engine class,</span>\n        <span class=\"c1\"># local imports are required to avoid import loops.</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">engines</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.template.backends.django</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoTemplates</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">engine</span> <span class=\"ow\">in</span> <span class=\"n\">engines</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"n\">DjangoTemplates</span><span class=\"p\">):</span>\n                <span class=\"k\">return</span> <span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">engine</span>\n        <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"s2\">&quot;No DjangoTemplates backend is configured.&quot;</span><span class=\"p\">)</span></div>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">template_context_processors</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">context_processors</span> <span class=\"o\">=</span> <span class=\"n\">_builtin_context_processors</span>\n        <span class=\"n\">context_processors</span> <span class=\"o\">+=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_processors</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">context_processors</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_template_builtins</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">builtins</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">import_library</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">builtins</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_template_libraries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">libraries</span><span class=\"p\">):</span>\n        <span class=\"n\">loaded</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">libraries</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"n\">loaded</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">import_library</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">loaded</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">template_loaders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_template_loaders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loaders</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_template_loaders</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_loaders</span><span class=\"p\">):</span>\n        <span class=\"n\">loaders</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">template_loader</span> <span class=\"ow\">in</span> <span class=\"n\">template_loaders</span><span class=\"p\">:</span>\n            <span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_template_loader</span><span class=\"p\">(</span><span class=\"n\">template_loader</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">loader</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">loaders</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">loaders</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_template_loader</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loader</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n            <span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">loader</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">loader_class</span> <span class=\"o\">=</span> <span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">loader</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">loader_class</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Invalid value in template loaders configuration: </span><span class=\"si\">%r</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">loader</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dirs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">tried</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">loader</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_loaders</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"n\">skip</span><span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">origin</span>\n            <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">tried</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">tried</span><span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">tried</span><span class=\"o\">=</span><span class=\"n\">tried</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Engine.from_string\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Engine.from_string\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">from_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_code</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a compiled Template object for the given template code,</span>\n<span class=\"sd\">        handling template inheritance recursively.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"n\">template_code</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Engine.get_template\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Engine.get_template\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a compiled Template object for the given template name,</span>\n<span class=\"sd\">        handling template inheritance recursively.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">find_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"s2\">&quot;render&quot;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># template needs to be compiled</span>\n            <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">template</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Render the template specified by template_name with the given context.</span>\n<span class=\"sd\">        For use in Django&#39;s test suite.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">select_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Django &lt; 1.8 accepted a Context in `context` even though that&#39;s</span>\n        <span class=\"c1\"># unintended. Preserve this ability but don&#39;t rewrap `context`.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">Context</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">autoescape</span><span class=\"p\">))</span>\n\n<div class=\"viewcode-block\" id=\"Engine.select_template\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Engine.select_template\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">select_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name_list</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Given a list of template names, return the first that can be loaded.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">template_name_list</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"s2\">&quot;No template names provided&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">not_found</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">template_name</span> <span class=\"ow\">in</span> <span class=\"n\">template_name_list</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">not_found</span><span class=\"p\">:</span>\n                    <span class=\"n\">not_found</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"k\">continue</span>\n        <span class=\"c1\"># If we get here, none of the templates could be loaded</span>\n        <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">not_found</span><span class=\"p\">))</span></div></div>\n</pre></div>", "current_page_name": "_modules/django/template/engine", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
