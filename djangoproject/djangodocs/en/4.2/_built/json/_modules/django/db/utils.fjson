{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.db.utils", "body": "<h1>Source code for django.db.utils</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">pkgutil</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span>\n\n<span class=\"c1\"># For backwards compatibility with Django &lt; 3.2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.connection</span> <span class=\"kn\">import</span> <span class=\"n\">ConnectionDoesNotExist</span>  <span class=\"c1\"># NOQA: F401</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.connection</span> <span class=\"kn\">import</span> <span class=\"n\">BaseConnectionHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.module_loading</span> <span class=\"kn\">import</span> <span class=\"n\">import_string</span>\n\n<span class=\"n\">DEFAULT_DB_ALIAS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;default&quot;</span>\n<span class=\"n\">DJANGO_VERSION_PICKLE_KEY</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;_django_version&quot;</span>\n\n\n<div class=\"viewcode-block\" id=\"Error\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.Error\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"InterfaceError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.InterfaceError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">InterfaceError</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"DatabaseError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.DatabaseError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DatabaseError</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"DataError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.DataError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DataError</span><span class=\"p\">(</span><span class=\"n\">DatabaseError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"OperationalError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.OperationalError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">OperationalError</span><span class=\"p\">(</span><span class=\"n\">DatabaseError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"IntegrityError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.IntegrityError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">IntegrityError</span><span class=\"p\">(</span><span class=\"n\">DatabaseError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"InternalError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.InternalError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">InternalError</span><span class=\"p\">(</span><span class=\"n\">DatabaseError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"ProgrammingError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.ProgrammingError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ProgrammingError</span><span class=\"p\">(</span><span class=\"n\">DatabaseError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<div class=\"viewcode-block\" id=\"NotSupportedError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.NotSupportedError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">NotSupportedError</span><span class=\"p\">(</span><span class=\"n\">DatabaseError</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseErrorWrapper</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Context manager and decorator that reraises backend-specific database</span>\n<span class=\"sd\">    exceptions using Django&#39;s common wrappers.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">wrapper</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        wrapper is a database wrapper.</span>\n\n<span class=\"sd\">        It must have a Database attribute defining PEP-249 exceptions.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wrapper</span> <span class=\"o\">=</span> <span class=\"n\">wrapper</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__exit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">traceback</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">exc_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">for</span> <span class=\"n\">dj_exc_type</span> <span class=\"ow\">in</span> <span class=\"p\">(</span>\n            <span class=\"n\">DataError</span><span class=\"p\">,</span>\n            <span class=\"n\">OperationalError</span><span class=\"p\">,</span>\n            <span class=\"n\">IntegrityError</span><span class=\"p\">,</span>\n            <span class=\"n\">InternalError</span><span class=\"p\">,</span>\n            <span class=\"n\">ProgrammingError</span><span class=\"p\">,</span>\n            <span class=\"n\">NotSupportedError</span><span class=\"p\">,</span>\n            <span class=\"n\">DatabaseError</span><span class=\"p\">,</span>\n            <span class=\"n\">InterfaceError</span><span class=\"p\">,</span>\n            <span class=\"n\">Error</span><span class=\"p\">,</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">db_exc_type</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">Database</span><span class=\"p\">,</span> <span class=\"n\">dj_exc_type</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">db_exc_type</span><span class=\"p\">):</span>\n                <span class=\"n\">dj_exc_value</span> <span class=\"o\">=</span> <span class=\"n\">dj_exc_type</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">exc_value</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Only set the &#39;errors_occurred&#39; flag for errors that may make</span>\n                <span class=\"c1\"># the connection unusable.</span>\n                <span class=\"k\">if</span> <span class=\"n\">dj_exc_type</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"n\">DataError</span><span class=\"p\">,</span> <span class=\"n\">IntegrityError</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">errors_occurred</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">raise</span> <span class=\"n\">dj_exc_value</span><span class=\"o\">.</span><span class=\"n\">with_traceback</span><span class=\"p\">(</span><span class=\"n\">traceback</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">exc_value</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Note that we are intentionally not using @wraps here for performance</span>\n        <span class=\"c1\"># reasons. Refs #21109.</span>\n        <span class=\"k\">def</span> <span class=\"nf\">inner</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">inner</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">load_backend</span><span class=\"p\">(</span><span class=\"n\">backend_name</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a database backend&#39;s &quot;base&quot; module given a fully qualified database</span>\n<span class=\"sd\">    backend name, or raise an error if it doesn&#39;t exist.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># This backend was renamed in Django 1.9.</span>\n    <span class=\"k\">if</span> <span class=\"n\">backend_name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;django.db.backends.postgresql_psycopg2&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">backend_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.db.backends.postgresql&quot;</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.base&quot;</span> <span class=\"o\">%</span> <span class=\"n\">backend_name</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">e_user</span><span class=\"p\">:</span>\n        <span class=\"c1\"># The database backend wasn&#39;t found. Display a helpful error message</span>\n        <span class=\"c1\"># listing all built-in database backends.</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">django.db.backends</span>\n\n        <span class=\"n\">builtin_backends</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">name</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">ispkg</span> <span class=\"ow\">in</span> <span class=\"n\">pkgutil</span><span class=\"o\">.</span><span class=\"n\">iter_modules</span><span class=\"p\">(</span><span class=\"n\">django</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">backends</span><span class=\"o\">.</span><span class=\"n\">__path__</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">ispkg</span> <span class=\"ow\">and</span> <span class=\"n\">name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">{</span><span class=\"s2\">&quot;base&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;dummy&quot;</span><span class=\"p\">}</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">backend_name</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;django.db.backends.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">b</span> <span class=\"k\">for</span> <span class=\"n\">b</span> <span class=\"ow\">in</span> <span class=\"n\">builtin_backends</span><span class=\"p\">]:</span>\n            <span class=\"n\">backend_reprs</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">,</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">builtin_backends</span><span class=\"p\">))</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> isn&#39;t an available database backend or couldn&#39;t be &quot;</span>\n                <span class=\"s2\">&quot;imported. Check the above exception. To use one of the &quot;</span>\n                <span class=\"s2\">&quot;built-in backends, use &#39;django.db.backends.XXX&#39;, where XXX &quot;</span>\n                <span class=\"s2\">&quot;is one of:</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span>\n                <span class=\"s2\">&quot;    </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">backend_name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">backend_reprs</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e_user</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If there&#39;s some other error, this must be an error in Django</span>\n            <span class=\"k\">raise</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConnectionHandler</span><span class=\"p\">(</span><span class=\"n\">BaseConnectionHandler</span><span class=\"p\">):</span>\n    <span class=\"n\">settings_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DATABASES&quot;</span>\n    <span class=\"c1\"># Connections needs to still be an actual thread local, as it&#39;s truly</span>\n    <span class=\"c1\"># thread-critical. Database backends should use @async_unsafe to protect</span>\n    <span class=\"c1\"># their code from async contexts, but this will give those contexts</span>\n    <span class=\"c1\"># separate connections in case it&#39;s needed as well. There&#39;s no cleanup</span>\n    <span class=\"c1\"># after async contexts, though, so we don&#39;t allow that if we can help it.</span>\n    <span class=\"n\">thread_critical</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">configure_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">databases</span><span class=\"p\">):</span>\n        <span class=\"n\">databases</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">configure_settings</span><span class=\"p\">(</span><span class=\"n\">databases</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">databases</span> <span class=\"o\">==</span> <span class=\"p\">{}:</span>\n            <span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.dummy&quot;</span><span class=\"p\">}</span>\n        <span class=\"k\">elif</span> <span class=\"n\">DEFAULT_DB_ALIAS</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">databases</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;You must define a &#39;</span><span class=\"si\">{</span><span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"si\">}</span><span class=\"s2\">&#39; database.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"p\">{}:</span>\n            <span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">][</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.db.backends.dummy&quot;</span>\n\n        <span class=\"c1\"># Configure default settings.</span>\n        <span class=\"k\">for</span> <span class=\"n\">conn</span> <span class=\"ow\">in</span> <span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">():</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;ATOMIC_REQUESTS&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;AUTOCOMMIT&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django.db.backends.dummy&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">conn</span><span class=\"p\">[</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;django.db.backends.&quot;</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">conn</span><span class=\"p\">[</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">conn</span><span class=\"p\">[</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;django.db.backends.dummy&quot;</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;CONN_MAX_AGE&quot;</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;CONN_HEALTH_CHECKS&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n            <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;TIME_ZONE&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">setting</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;USER&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;HOST&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;PORT&quot;</span><span class=\"p\">]:</span>\n                <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">setting</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n            <span class=\"n\">test_settings</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;TEST&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n            <span class=\"n\">default_test_settings</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"p\">(</span><span class=\"s2\">&quot;CHARSET&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s2\">&quot;COLLATION&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s2\">&quot;MIGRATE&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s2\">&quot;MIRROR&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n                <span class=\"p\">(</span><span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span>\n            <span class=\"p\">]</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">default_test_settings</span><span class=\"p\">:</span>\n                <span class=\"n\">test_settings</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">databases</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">databases</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Maintained for backward compatibility as some 3rd party packages have</span>\n        <span class=\"c1\"># made use of this private API in the past. It is no longer used within</span>\n        <span class=\"c1\"># Django itself.</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">settings</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_connection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">alias</span><span class=\"p\">):</span>\n        <span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"p\">[</span><span class=\"n\">alias</span><span class=\"p\">]</span>\n        <span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">load_backend</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">[</span><span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">DatabaseWrapper</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">alias</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConnectionRouter</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">routers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        If routers is not specified, default to settings.DATABASE_ROUTERS.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_routers</span> <span class=\"o\">=</span> <span class=\"n\">routers</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">routers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_routers</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_routers</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DATABASE_ROUTERS</span>\n        <span class=\"n\">routers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_routers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n                <span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">router</span> <span class=\"o\">=</span> <span class=\"n\">r</span>\n            <span class=\"n\">routers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">routers</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_router_func</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"nf\">_route_db</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">hints</span><span class=\"p\">):</span>\n            <span class=\"n\">chosen_db</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"k\">for</span> <span class=\"n\">router</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">routers</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">router</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># If the router doesn&#39;t have a method, skip to the next one.</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">chosen_db</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">hints</span><span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">chosen_db</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">chosen_db</span>\n            <span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">hints</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;instance&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">instance</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">db</span>\n            <span class=\"k\">return</span> <span class=\"n\">DEFAULT_DB_ALIAS</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">_route_db</span>\n\n    <span class=\"n\">db_for_read</span> <span class=\"o\">=</span> <span class=\"n\">_router_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;db_for_read&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">db_for_write</span> <span class=\"o\">=</span> <span class=\"n\">_router_func</span><span class=\"p\">(</span><span class=\"s2\">&quot;db_for_write&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">allow_relation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj1</span><span class=\"p\">,</span> <span class=\"n\">obj2</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">hints</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">router</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">routers</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">allow_relation</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If the router doesn&#39;t have a method, skip to the next one.</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">allow</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">obj1</span><span class=\"p\">,</span> <span class=\"n\">obj2</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">hints</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">allow</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">allow</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj1</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">db</span> <span class=\"o\">==</span> <span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">db</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">allow_migrate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">app_label</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">hints</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">router</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">routers</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">method</span> <span class=\"o\">=</span> <span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">allow_migrate</span>\n            <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># If the router doesn&#39;t have a method, skip to the next one.</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"n\">allow</span> <span class=\"o\">=</span> <span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">app_label</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">hints</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">allow</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">allow</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">allow_migrate_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allow_migrate</span><span class=\"p\">(</span>\n            <span class=\"n\">db</span><span class=\"p\">,</span>\n            <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">app_label</span><span class=\"p\">,</span>\n            <span class=\"n\">model_name</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">model_name</span><span class=\"p\">,</span>\n            <span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">model</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_migratable_models</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">app_config</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">include_auto_created</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return app models allowed to be migrated on provided db.&quot;&quot;&quot;</span>\n        <span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"n\">app_config</span><span class=\"o\">.</span><span class=\"n\">get_models</span><span class=\"p\">(</span><span class=\"n\">include_auto_created</span><span class=\"o\">=</span><span class=\"n\">include_auto_created</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">model</span> <span class=\"k\">for</span> <span class=\"n\">model</span> <span class=\"ow\">in</span> <span class=\"n\">models</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allow_migrate_model</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">)]</span>\n</pre></div>", "current_page_name": "_modules/django/db/utils", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
