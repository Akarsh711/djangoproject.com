{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.template.backends.django", "body": "<h1>Source code for django.template.backends.django</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pkgutil</span> <span class=\"kn\">import</span> <span class=\"n\">walk_packages</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateDoesNotExist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.context</span> <span class=\"kn\">import</span> <span class=\"n\">make_context</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.engine</span> <span class=\"kn\">import</span> <span class=\"n\">Engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.library</span> <span class=\"kn\">import</span> <span class=\"n\">InvalidTemplateLibrary</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseEngine</span>\n\n\n<div class=\"viewcode-block\" id=\"DjangoTemplates\"><a class=\"viewcode-back\" href=\"../../../../../topics/templates/#django.template.backends.django.DjangoTemplates\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">DjangoTemplates</span><span class=\"p\">(</span><span class=\"n\">BaseEngine</span><span class=\"p\">):</span>\n    <span class=\"n\">app_dirname</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;templates&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">):</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;autoescape&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;debug&quot;</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n        <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"s2\">&quot;file_charset&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;utf-8&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">libraries</span> <span class=\"o\">=</span> <span class=\"n\">options</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;libraries&quot;</span><span class=\"p\">,</span> <span class=\"p\">{})</span>\n        <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;libraries&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_templatetag_libraries</span><span class=\"p\">(</span><span class=\"n\">libraries</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">Engine</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dirs</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_dirs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">options</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">from_string</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_code</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">from_string</span><span class=\"p\">(</span><span class=\"n\">template_code</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">Template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"n\">reraise</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_templatetag_libraries</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">custom_libraries</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a collation of template tag libraries from installed</span>\n<span class=\"sd\">        applications and the supplied custom_libraries argument.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">libraries</span> <span class=\"o\">=</span> <span class=\"n\">get_installed_libraries</span><span class=\"p\">()</span>\n        <span class=\"n\">libraries</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">custom_libraries</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">libraries</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Template</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">template</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">backend</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">origin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">origin</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">make_context</span><span class=\"p\">(</span>\n            <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backend</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">autoescape</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"n\">reraise</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">backend</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">copy_exception</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Create a new TemplateDoesNotExist. Preserve its declared attributes and</span>\n<span class=\"sd\">    template debug data but discard __traceback__, __context__, and __cause__</span>\n<span class=\"sd\">    to make this object suitable for keeping around (in a cache, for example).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">backend</span> <span class=\"o\">=</span> <span class=\"n\">backend</span> <span class=\"ow\">or</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">backend</span>\n    <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">tried</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">tried</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"n\">backend</span><span class=\"p\">,</span> <span class=\"n\">chain</span><span class=\"o\">=</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">chain</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"s2\">&quot;template_debug&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">new</span><span class=\"o\">.</span><span class=\"n\">template_debug</span> <span class=\"o\">=</span> <span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">template_debug</span>\n    <span class=\"k\">return</span> <span class=\"n\">new</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">reraise</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Reraise TemplateDoesNotExist while maintaining template debug information.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">new</span> <span class=\"o\">=</span> <span class=\"n\">copy_exception</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"n\">new</span> <span class=\"kn\">from</span> <span class=\"nn\">exc</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_template_tag_modules</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Yield (module_name, module_path) pairs for all installed template tag</span>\n<span class=\"sd\">    libraries.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">candidates</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;django.templatetags&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">candidates</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">app_config</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">.templatetags&quot;</span> <span class=\"k\">for</span> <span class=\"n\">app_config</span> <span class=\"ow\">in</span> <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_app_configs</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">candidates</span><span class=\"p\">:</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">pkg</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No templatetags package defined. This is safe to ignore.</span>\n            <span class=\"k\">continue</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__path__&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">get_package_libraries</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">):</span>\n                <span class=\"k\">yield</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">),</span> <span class=\"n\">name</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_installed_libraries</span><span class=\"p\">():</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the built-in template tag libraries and those from installed</span>\n<span class=\"sd\">    applications. Libraries are stored in a dictionary where keys are the</span>\n<span class=\"sd\">    individual module names, not the full module paths. Example:</span>\n<span class=\"sd\">    django.templatetags.i18n is stored as i18n.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"n\">module_name</span><span class=\"p\">:</span> <span class=\"n\">full_name</span> <span class=\"k\">for</span> <span class=\"n\">module_name</span><span class=\"p\">,</span> <span class=\"n\">full_name</span> <span class=\"ow\">in</span> <span class=\"n\">get_template_tag_modules</span><span class=\"p\">()</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_package_libraries</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Recursively yield template tag libraries defined in submodules of a</span>\n<span class=\"sd\">    package.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">walk_packages</span><span class=\"p\">(</span><span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"n\">__path__</span><span class=\"p\">,</span> <span class=\"n\">pkg</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">InvalidTemplateLibrary</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Invalid template library specified. ImportError raised when &quot;</span>\n                <span class=\"s2\">&quot;trying to load &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;register&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">entry</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n</pre></div>", "current_page_name": "_modules/django/template/backends/django", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}