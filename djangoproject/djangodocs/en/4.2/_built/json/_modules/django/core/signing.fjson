{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.core.signing", "body": "<h1>Source code for django.core.signing</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Functions for creating and restoring url-safe signed JSON objects.</span>\n\n<span class=\"sd\">The format used looks like this:</span>\n\n<span class=\"sd\">&gt;&gt;&gt; signing.dumps(&quot;hello&quot;)</span>\n<span class=\"sd\">&#39;ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk&#39;</span>\n\n<span class=\"sd\">There are two components here, separated by a &#39;:&#39;. The first component is a</span>\n<span class=\"sd\">URLsafe base64 encoded JSON of the object passed to dumps(). The second</span>\n<span class=\"sd\">component is a base64 encoded hmac/SHA-256 hash of &quot;$first_component:$secret&quot;</span>\n\n<span class=\"sd\">signing.loads(s) checks the signature and returns the deserialized object.</span>\n<span class=\"sd\">If the signature fails, a BadSignature exception is raised.</span>\n\n<span class=\"sd\">&gt;&gt;&gt; signing.loads(&quot;ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv422nZA4sgmk&quot;)</span>\n<span class=\"sd\">&#39;hello&#39;</span>\n<span class=\"sd\">&gt;&gt;&gt; signing.loads(&quot;ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv42-modified&quot;)</span>\n<span class=\"sd\">...</span>\n<span class=\"sd\">BadSignature: Signature &quot;ImhlbGxvIg:1QaUZC:YIye-ze3TTx7gtSv42-modified&quot; does not match</span>\n\n<span class=\"sd\">You can optionally compress the JSON prior to base64 encoding it to save</span>\n<span class=\"sd\">space, using the compress=True argument. This checks if compression actually</span>\n<span class=\"sd\">helps and only applies compression if the result is a shorter string:</span>\n\n<span class=\"sd\">&gt;&gt;&gt; signing.dumps(list(range(1, 20)), compress=True)</span>\n<span class=\"sd\">&#39;.eJwFwcERACAIwLCF-rCiILN47r-GyZVJsNgkxaFxoDgxcOHGxMKD_T7vhAml:1QaUaL:BA0thEZrp4FQVXIXuOvYJtLJSrQ&#39;</span>\n\n<span class=\"sd\">The fact that the string is compressed is signalled by the prefixed &#39;.&#39; at the</span>\n<span class=\"sd\">start of the base64 JSON.</span>\n\n<span class=\"sd\">There are 65 url-safe characters: the 64 used by url-safe base64 and the &#39;:&#39;.</span>\n<span class=\"sd\">These functions make use of all of them.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zlib</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.crypto</span> <span class=\"kn\">import</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">,</span> <span class=\"n\">salted_hmac</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjango51Warning</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.encoding</span> <span class=\"kn\">import</span> <span class=\"n\">force_bytes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.module_loading</span> <span class=\"kn\">import</span> <span class=\"n\">import_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n\n<span class=\"n\">_SEP_UNSAFE</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^[A-z0-9-_=]*$&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">BASE62_ALPHABET</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BadSignature</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Signature does not match.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SignatureExpired</span><span class=\"p\">(</span><span class=\"n\">BadSignature</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Signature timestamp is older than required max_age.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">b62_encode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;0&quot;</span>\n    <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-&quot;</span> <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"nb\">abs</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n    <span class=\"n\">encoded</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n    <span class=\"k\">while</span> <span class=\"n\">s</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">remainder</span> <span class=\"o\">=</span> <span class=\"nb\">divmod</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">)</span>\n        <span class=\"n\">encoded</span> <span class=\"o\">=</span> <span class=\"n\">BASE62_ALPHABET</span><span class=\"p\">[</span><span class=\"n\">remainder</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">encoded</span>\n    <span class=\"k\">return</span> <span class=\"n\">sign</span> <span class=\"o\">+</span> <span class=\"n\">encoded</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">b62_decode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">s</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n    <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">if</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;-&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n    <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">for</span> <span class=\"n\">digit</span> <span class=\"ow\">in</span> <span class=\"n\">s</span><span class=\"p\">:</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"n\">decoded</span> <span class=\"o\">*</span> <span class=\"mi\">62</span> <span class=\"o\">+</span> <span class=\"n\">BASE62_ALPHABET</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">digit</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">sign</span> <span class=\"o\">*</span> <span class=\"n\">decoded</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">b64_encode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64encode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">b64_decode</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">):</span>\n    <span class=\"n\">pad</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;=&quot;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">urlsafe_b64decode</span><span class=\"p\">(</span><span class=\"n\">s</span> <span class=\"o\">+</span> <span class=\"n\">pad</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">base64_hmac</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s2\">&quot;sha1&quot;</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">b64_encode</span><span class=\"p\">(</span>\n        <span class=\"n\">salted_hmac</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"n\">algorithm</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_cookie_signer_key</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">):</span>\n    <span class=\"c1\"># SECRET_KEYS items may be str or bytes.</span>\n    <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;django.http.cookies&quot;</span> <span class=\"o\">+</span> <span class=\"n\">force_bytes</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_cookie_signer</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;django.core.signing.get_cookie_signer&quot;</span><span class=\"p\">):</span>\n    <span class=\"n\">Signer</span> <span class=\"o\">=</span> <span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SIGNING_BACKEND</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">Signer</span><span class=\"p\">(</span>\n        <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">_cookie_signer_key</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SECRET_KEY</span><span class=\"p\">),</span>\n        <span class=\"n\">fallback_keys</span><span class=\"o\">=</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">_cookie_signer_key</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SECRET_KEY_FALLBACKS</span><span class=\"p\">),</span>\n        <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">salt</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONSerializer</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Simple wrapper around json to be used in signing.dumps and</span>\n<span class=\"sd\">    signing.loads.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">dumps</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">separators</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;latin-1&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">loads</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;latin-1&quot;</span><span class=\"p\">))</span>\n\n\n<div class=\"viewcode-block\" id=\"dumps\"><a class=\"viewcode-back\" href=\"../../../../topics/signing/#django.core.signing.dumps\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">dumps</span><span class=\"p\">(</span>\n    <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;django.core.signing&quot;</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">JSONSerializer</span><span class=\"p\">,</span> <span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return URL-safe, hmac signed base64 compressed JSON string. If key is</span>\n<span class=\"sd\">    None, use settings.SECRET_KEY instead. The hmac algorithm is the default</span>\n<span class=\"sd\">    Signer algorithm.</span>\n\n<span class=\"sd\">    If compress is True (not the default), check if compressing using zlib can</span>\n<span class=\"sd\">    save some space. Prepend a &#39;.&#39; to signify compression. This is included</span>\n<span class=\"sd\">    in the signature, to protect against zip bombs.</span>\n\n<span class=\"sd\">    Salt can be used to namespace the hash, so that a signed string is</span>\n<span class=\"sd\">    only valid for a given namespace. Leaving this at the default</span>\n<span class=\"sd\">    value or re-using a salt value across different parts of your</span>\n<span class=\"sd\">    application without good cause is a security risk.</span>\n\n<span class=\"sd\">    The serializer is expected to return a bytestring.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">TimestampSigner</span><span class=\"p\">(</span><span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">salt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">sign_object</span><span class=\"p\">(</span>\n        <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">serializer</span><span class=\"p\">,</span> <span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"n\">compress</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"loads\"><a class=\"viewcode-back\" href=\"../../../../topics/signing/#django.core.signing.loads\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">loads</span><span class=\"p\">(</span>\n    <span class=\"n\">s</span><span class=\"p\">,</span>\n    <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;django.core.signing&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">JSONSerializer</span><span class=\"p\">,</span>\n    <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">fallback_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Reverse of dumps(), raise BadSignature if signature fails.</span>\n\n<span class=\"sd\">    The serializer is expected to accept a bytestring.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">TimestampSigner</span><span class=\"p\">(</span>\n        <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">fallback_keys</span><span class=\"o\">=</span><span class=\"n\">fallback_keys</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unsign_object</span><span class=\"p\">(</span>\n        <span class=\"n\">s</span><span class=\"p\">,</span>\n        <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">serializer</span><span class=\"p\">,</span>\n        <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"n\">max_age</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Signer\"><a class=\"viewcode-back\" href=\"../../../../topics/signing/#django.core.signing.Signer\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Signer</span><span class=\"p\">:</span>\n    <span class=\"c1\"># RemovedInDjango51Warning: When the deprecation ends, replace with:</span>\n    <span class=\"c1\"># def __init__(</span>\n    <span class=\"c1\">#   self, *, key=None, sep=&quot;:&quot;, salt=None, algorithm=None, fallback_keys=None</span>\n    <span class=\"c1\"># ):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s2\">&quot;:&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">fallback_keys</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span> <span class=\"ow\">or</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SECRET_KEY</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fallback_keys</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">fallback_keys</span>\n            <span class=\"k\">if</span> <span class=\"n\">fallback_keys</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"k\">else</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SECRET_KEY_FALLBACKS</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span> <span class=\"o\">=</span> <span class=\"n\">sep</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"n\">salt</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">algorithm</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;sha256&quot;</span>\n        <span class=\"c1\"># RemovedInDjango51Warning.</span>\n        <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;Passing positional arguments to </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\"> is &quot;</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;deprecated.&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">RemovedInDjango51Warning</span><span class=\"p\">,</span>\n                <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span>\n                <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;sep&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;fallback_keys&quot;</span><span class=\"p\">]</span>\n            <span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">arg</span> <span class=\"ow\">or</span> <span class=\"n\">attr</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;sep&quot;</span><span class=\"p\">:</span>\n                    <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">_SEP_UNSAFE</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Unsafe Signer separator: </span><span class=\"si\">%r</span><span class=\"s2\"> (cannot be empty or consist of &quot;</span>\n                <span class=\"s2\">&quot;only A-z0-9-_=)&quot;</span> <span class=\"o\">%</span> <span class=\"n\">sep</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">signature</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"n\">key</span> <span class=\"o\">=</span> <span class=\"n\">key</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span>\n        <span class=\"k\">return</span> <span class=\"n\">base64_hmac</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;signer&quot;</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">unsign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">signed_value</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">signed_value</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">BadSignature</span><span class=\"p\">(</span><span class=\"s1\">&#39;No &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; found in value&#39;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">signed_value</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">key</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fallback_keys</span><span class=\"p\">]:</span>\n            <span class=\"k\">if</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">)):</span>\n                <span class=\"k\">return</span> <span class=\"n\">value</span>\n        <span class=\"k\">raise</span> <span class=\"n\">BadSignature</span><span class=\"p\">(</span><span class=\"s1\">&#39;Signature &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; does not match&#39;</span> <span class=\"o\">%</span> <span class=\"n\">sig</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">sign_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">JSONSerializer</span><span class=\"p\">,</span> <span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return URL-safe, hmac signed base64 compressed JSON string.</span>\n\n<span class=\"sd\">        If compress is True (not the default), check if compressing using zlib</span>\n<span class=\"sd\">        can save some space. Prepend a &#39;.&#39; to signify compression. This is</span>\n<span class=\"sd\">        included in the signature, to protect against zip bombs.</span>\n\n<span class=\"sd\">        The serializer is expected to return a bytestring.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">serializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Flag for if it&#39;s been compressed or not.</span>\n        <span class=\"n\">is_compressed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">compress</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Avoid zlib dependency unless compress is being used.</span>\n            <span class=\"n\">compressed</span> <span class=\"o\">=</span> <span class=\"n\">zlib</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">compressed</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">compressed</span>\n                <span class=\"n\">is_compressed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">base64d</span> <span class=\"o\">=</span> <span class=\"n\">b64_encode</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">is_compressed</span><span class=\"p\">:</span>\n            <span class=\"n\">base64d</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">base64d</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">base64d</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">unsign_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">signed_obj</span><span class=\"p\">,</span> <span class=\"n\">serializer</span><span class=\"o\">=</span><span class=\"n\">JSONSerializer</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Signer.unsign() returns str but base64 and zlib compression operate</span>\n        <span class=\"c1\"># on bytes.</span>\n        <span class=\"n\">base64d</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">signed_obj</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n        <span class=\"n\">decompress</span> <span class=\"o\">=</span> <span class=\"n\">base64d</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">&quot;.&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">decompress</span><span class=\"p\">:</span>\n            <span class=\"c1\"># It&#39;s compressed; uncompress it first.</span>\n            <span class=\"n\">base64d</span> <span class=\"o\">=</span> <span class=\"n\">base64d</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">b64_decode</span><span class=\"p\">(</span><span class=\"n\">base64d</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">decompress</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">zlib</span><span class=\"o\">.</span><span class=\"n\">decompress</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">serializer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"TimestampSigner\"><a class=\"viewcode-back\" href=\"../../../../topics/signing/#django.core.signing.TimestampSigner\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">TimestampSigner</span><span class=\"p\">(</span><span class=\"n\">Signer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">timestamp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">b62_encode</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()))</span>\n\n<div class=\"viewcode-block\" id=\"TimestampSigner.sign\"><a class=\"viewcode-back\" href=\"../../../../topics/signing/#django.core.signing.TimestampSigner.sign\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">sign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"TimestampSigner.unsign\"><a class=\"viewcode-back\" href=\"../../../../topics/signing/#django.core.signing.TimestampSigner.unsign\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">unsign</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Retrieve original value and check it wasn&#39;t signed more</span>\n<span class=\"sd\">        than max_age seconds ago.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unsign</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">b62_decode</span><span class=\"p\">(</span><span class=\"n\">timestamp</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">max_age</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">max_age</span><span class=\"p\">,</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">):</span>\n                <span class=\"n\">max_age</span> <span class=\"o\">=</span> <span class=\"n\">max_age</span><span class=\"o\">.</span><span class=\"n\">total_seconds</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Check timestamp is not older than max_age</span>\n            <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timestamp</span>\n            <span class=\"k\">if</span> <span class=\"n\">age</span> <span class=\"o\">&gt;</span> <span class=\"n\">max_age</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">SignatureExpired</span><span class=\"p\">(</span><span class=\"s2\">&quot;Signature age </span><span class=\"si\">%s</span><span class=\"s2\"> &gt; </span><span class=\"si\">%s</span><span class=\"s2\"> seconds&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span></div></div>\n</pre></div>", "current_page_name": "_modules/django/core/signing", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}