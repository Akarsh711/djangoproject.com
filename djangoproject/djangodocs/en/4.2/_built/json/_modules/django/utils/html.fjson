{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.utils.html", "body": "<h1>Source code for django.utils.html</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;HTML utilities suitable for global use.&quot;&quot;&quot;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">html</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">html.parser</span> <span class=\"kn\">import</span> <span class=\"n\">HTMLParser</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">parse_qsl</span><span class=\"p\">,</span> <span class=\"n\">quote</span><span class=\"p\">,</span> <span class=\"n\">unquote</span><span class=\"p\">,</span> <span class=\"n\">urlencode</span><span class=\"p\">,</span> <span class=\"n\">urlsplit</span><span class=\"p\">,</span> <span class=\"n\">urlunsplit</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjango60Warning</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.encoding</span> <span class=\"kn\">import</span> <span class=\"n\">punycode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">Promise</span><span class=\"p\">,</span> <span class=\"n\">keep_lazy</span><span class=\"p\">,</span> <span class=\"n\">keep_lazy_text</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.http</span> <span class=\"kn\">import</span> <span class=\"n\">RFC3986_GENDELIMS</span><span class=\"p\">,</span> <span class=\"n\">RFC3986_SUBDELIMS</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.safestring</span> <span class=\"kn\">import</span> <span class=\"n\">SafeData</span><span class=\"p\">,</span> <span class=\"n\">SafeString</span><span class=\"p\">,</span> <span class=\"n\">mark_safe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.text</span> <span class=\"kn\">import</span> <span class=\"n\">normalize_newlines</span>\n\n\n<div class=\"viewcode-block\" id=\"escape\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.escape\">[docs]</a><span class=\"nd\">@keep_lazy</span><span class=\"p\">(</span><span class=\"n\">SafeString</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">escape</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the given text with ampersands, quotes and angle brackets encoded</span>\n<span class=\"sd\">    for use in HTML.</span>\n\n<span class=\"sd\">    Always escape input, even if it&#39;s already escaped and marked as such.</span>\n<span class=\"sd\">    This may result in double-escaping. If this is a concern, use</span>\n<span class=\"sd\">    conditional_escape() instead.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">SafeString</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)))</span></div>\n\n\n<span class=\"n\">_js_escapes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u005C&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u0027&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u0022&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u003E&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u003C&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&amp;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u0026&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;=&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u003D&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;-&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u002D&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u003B&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;`&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u0060&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\u2028</span><span class=\"s2\">&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u2028&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\u2029</span><span class=\"s2\">&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u2029&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># Escape every ASCII character with a value less than 32.</span>\n<span class=\"n\">_js_escapes</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">((</span><span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%c</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">z</span><span class=\"p\">),</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u</span><span class=\"si\">%04X</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">z</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">z</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">))</span>\n\n\n<span class=\"nd\">@keep_lazy</span><span class=\"p\">(</span><span class=\"n\">SafeString</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">escapejs</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Hex encode characters for use in JavaScript strings.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">_js_escapes</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">_json_script_escapes</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u003E&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u003C&quot;</span><span class=\"p\">,</span>\n    <span class=\"nb\">ord</span><span class=\"p\">(</span><span class=\"s2\">&quot;&amp;&quot;</span><span class=\"p\">):</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">u0026&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n\n\n<div class=\"viewcode-block\" id=\"json_script\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.json_script\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">json_script</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">element_id</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Escape all the HTML/XML special characters with their unicode escapes, so</span>\n<span class=\"sd\">    value is safe to be output anywhere except for inside a tag attribute. Wrap</span>\n<span class=\"sd\">    the escaped JSON in a script tag.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">django.core.serializers.json</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoJSONEncoder</span>\n\n    <span class=\"n\">json_str</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"n\">encoder</span> <span class=\"ow\">or</span> <span class=\"n\">DjangoJSONEncoder</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span>\n        <span class=\"n\">_json_script_escapes</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">element_id</span><span class=\"p\">:</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;script id=&quot;</span><span class=\"si\">{}</span><span class=\"s1\">&quot; type=&quot;application/json&quot;&gt;</span><span class=\"si\">{}</span><span class=\"s1\">&lt;/script&gt;&#39;</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">element_id</span><span class=\"p\">,</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">json_str</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;script type=&quot;application/json&quot;&gt;</span><span class=\"si\">{}</span><span class=\"s1\">&lt;/script&gt;&#39;</span>\n        <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">json_str</span><span class=\"p\">),)</span>\n    <span class=\"k\">return</span> <span class=\"n\">format_html</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"conditional_escape\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.conditional_escape\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">conditional_escape</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Similar to escape(), except that it doesn&#39;t operate on pre-escaped strings.</span>\n\n<span class=\"sd\">    This function relies on the __html__ convention used both by Django&#39;s</span>\n<span class=\"sd\">    SafeData class and by third-party libraries like markupsafe.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">Promise</span><span class=\"p\">):</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__html__&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">__html__</span><span class=\"p\">()</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"format_html\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.format_html\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">format_html</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Similar to str.format, but pass all arguments through conditional_escape(),</span>\n<span class=\"sd\">    and call mark_safe() on the result. This function should be used instead</span>\n<span class=\"sd\">    of str.format or % interpolation to build up small HTML fragments.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">args</span> <span class=\"ow\">or</span> <span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># RemovedInDjango60Warning: when the deprecation ends, replace with:</span>\n        <span class=\"c1\"># raise ValueError(&quot;args or kwargs must be provided.&quot;)</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Calling format_html() without passing args or kwargs is deprecated.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">RemovedInDjango60Warning</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">args_safe</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">conditional_escape</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"n\">kwargs_safe</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">conditional_escape</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n    <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args_safe</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs_safe</span><span class=\"p\">))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"format_html_join\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.format_html_join\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">format_html_join</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">,</span> <span class=\"n\">args_generator</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A wrapper of format_html, for the common case of a group of arguments that</span>\n<span class=\"sd\">    need to be formatted using the same format string, and then joined using</span>\n<span class=\"sd\">    &#39;sep&#39;. &#39;sep&#39; is also passed through conditional_escape.</span>\n\n<span class=\"sd\">    &#39;args_generator&#39; should be an iterator that returns the sequence of &#39;args&#39;</span>\n<span class=\"sd\">    that will be passed to format_html.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">      format_html_join(&#39;\\n&#39;, &quot;&lt;li&gt;{} {}&lt;/li&gt;&quot;, ((u.first_name, u.last_name)</span>\n<span class=\"sd\">                                                  for u in users))</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span>\n        <span class=\"n\">conditional_escape</span><span class=\"p\">(</span><span class=\"n\">sep</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"n\">format_html</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"n\">args_generator</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span></div>\n\n\n<span class=\"nd\">@keep_lazy_text</span>\n<span class=\"k\">def</span> <span class=\"nf\">linebreaks</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Convert newlines into &lt;p&gt; and &lt;br&gt;s.&quot;&quot;&quot;</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">normalize_newlines</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"n\">paras</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">{2,}&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"n\">autoescape</span><span class=\"p\">:</span>\n        <span class=\"n\">paras</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;&lt;p&gt;</span><span class=\"si\">%s</span><span class=\"s2\">&lt;/p&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt;br&gt;&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">paras</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">paras</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;&lt;p&gt;</span><span class=\"si\">%s</span><span class=\"s2\">&lt;/p&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&lt;br&gt;&quot;</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">paras</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\n\\n</span><span class=\"s2\">&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">paras</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MLStripper</span><span class=\"p\">(</span><span class=\"n\">HTMLParser</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">convert_charrefs</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fed</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_entityref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&amp;</span><span class=\"si\">%s</span><span class=\"s2\">;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_charref</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fed</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;&amp;#</span><span class=\"si\">%s</span><span class=\"s2\">;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fed</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_strip_once</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Internal tag stripping utility used by strip_tags.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">MLStripper</span><span class=\"p\">()</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">feed</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">()</span>\n\n\n<div class=\"viewcode-block\" id=\"strip_tags\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.strip_tags\">[docs]</a><span class=\"nd\">@keep_lazy_text</span>\n<span class=\"k\">def</span> <span class=\"nf\">strip_tags</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return the given HTML with all tags stripped.&quot;&quot;&quot;</span>\n    <span class=\"c1\"># Note: in typical case this loop executes _strip_once once. Loop condition</span>\n    <span class=\"c1\"># is redundant, but helps to reduce number of executions of _strip_once.</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"s2\">&quot;&lt;&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;&gt;&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">value</span><span class=\"p\">:</span>\n        <span class=\"n\">new_value</span> <span class=\"o\">=</span> <span class=\"n\">_strip_once</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">new_value</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;&quot;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># _strip_once wasn&#39;t able to detect more tags.</span>\n            <span class=\"k\">break</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">new_value</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span></div>\n\n\n<span class=\"nd\">@keep_lazy_text</span>\n<span class=\"k\">def</span> <span class=\"nf\">strip_spaces_between_tags</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return the given HTML with spaces between tags removed.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&gt;\\s+&lt;&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&gt;&lt;&quot;</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">smart_urlquote</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Quote a URL if it isn&#39;t already quoted.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">unquote_quote</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">):</span>\n        <span class=\"n\">segment</span> <span class=\"o\">=</span> <span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Tilde is part of RFC 3986 Section 2.3 Unreserved Characters,</span>\n        <span class=\"c1\"># see also https://bugs.python.org/issue16285</span>\n        <span class=\"k\">return</span> <span class=\"n\">quote</span><span class=\"p\">(</span><span class=\"n\">segment</span><span class=\"p\">,</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"n\">RFC3986_SUBDELIMS</span> <span class=\"o\">+</span> <span class=\"n\">RFC3986_GENDELIMS</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;~&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Handle IDN before quoting.</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">scheme</span><span class=\"p\">,</span> <span class=\"n\">netloc</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">fragment</span> <span class=\"o\">=</span> <span class=\"n\">urlsplit</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># invalid IPv6 URL (normally square brackets in hostname part).</span>\n        <span class=\"k\">return</span> <span class=\"n\">unquote_quote</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">netloc</span> <span class=\"o\">=</span> <span class=\"n\">punycode</span><span class=\"p\">(</span><span class=\"n\">netloc</span><span class=\"p\">)</span>  <span class=\"c1\"># IDN -&gt; ACE</span>\n    <span class=\"k\">except</span> <span class=\"ne\">UnicodeError</span><span class=\"p\">:</span>  <span class=\"c1\"># invalid domain part</span>\n        <span class=\"k\">return</span> <span class=\"n\">unquote_quote</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Separately unquoting key/value, so as to not mix querystring separators</span>\n        <span class=\"c1\"># included in query values. See #22267.</span>\n        <span class=\"n\">query_parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"p\">(</span><span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"n\">unquote</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n            <span class=\"k\">for</span> <span class=\"n\">q</span> <span class=\"ow\">in</span> <span class=\"n\">parse_qsl</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">keep_blank_values</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n        <span class=\"p\">]</span>\n        <span class=\"c1\"># urlencode will take care of quoting</span>\n        <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">urlencode</span><span class=\"p\">(</span><span class=\"n\">query_parts</span><span class=\"p\">)</span>\n\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">unquote_quote</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"n\">fragment</span> <span class=\"o\">=</span> <span class=\"n\">unquote_quote</span><span class=\"p\">(</span><span class=\"n\">fragment</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">urlunsplit</span><span class=\"p\">((</span><span class=\"n\">scheme</span><span class=\"p\">,</span> <span class=\"n\">netloc</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">fragment</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Urlizer</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert any URLs in text into clickable links.</span>\n\n<span class=\"sd\">    Work on http://, https://, www. links, and also on links ending in one of</span>\n<span class=\"sd\">    the original seven gTLDs (.com, .edu, .gov, .int, .mil, .net, and .org).</span>\n<span class=\"sd\">    Links can have trailing punctuation (periods, commas, close-parens) and</span>\n<span class=\"sd\">    leading punctuation (opening parens) and it&#39;ll still do the right thing.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">trailing_punctuation_chars</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;.,:;!&quot;</span>\n    <span class=\"n\">wrapping_punctuation</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">&quot;(&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;)&quot;</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s2\">&quot;[&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;]&quot;</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">simple_url_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^https?://\\[?\\w&quot;</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span>\n    <span class=\"n\">simple_url_2_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n        <span class=\"sa\">r</span><span class=\"s2\">&quot;^www\\.|^(?!http)\\w[^@]+\\.(com|edu|gov|int|mil|net|org)($|/.*)$&quot;</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">word_split_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;&quot;&quot;([\\s&lt;&gt;&quot;&#39;]+)&quot;&quot;&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"n\">mailto_template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mailto:</span><span class=\"si\">{local}</span><span class=\"s2\">@</span><span class=\"si\">{domain}</span><span class=\"s2\">&quot;</span>\n    <span class=\"n\">url_template</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&lt;a href=&quot;</span><span class=\"si\">{href}</span><span class=\"s1\">&quot;</span><span class=\"si\">{attrs}</span><span class=\"s1\">&gt;</span><span class=\"si\">{url}</span><span class=\"s1\">&lt;/a&gt;&#39;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">trim_url_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nofollow</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        If trim_url_limit is not None, truncate the URLs in the link text</span>\n<span class=\"sd\">        longer than this limit to trim_url_limit - 1 characters and append an</span>\n<span class=\"sd\">        ellipsis.</span>\n\n<span class=\"sd\">        If nofollow is True, give the links a rel=&quot;nofollow&quot; attribute.</span>\n\n<span class=\"sd\">        If autoescape is True, autoescape the link text and URLs.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">safe_input</span> <span class=\"o\">=</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">SafeData</span><span class=\"p\">)</span>\n\n        <span class=\"n\">words</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">word_split_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle_word</span><span class=\"p\">(</span>\n                    <span class=\"n\">word</span><span class=\"p\">,</span>\n                    <span class=\"n\">safe_input</span><span class=\"o\">=</span><span class=\"n\">safe_input</span><span class=\"p\">,</span>\n                    <span class=\"n\">trim_url_limit</span><span class=\"o\">=</span><span class=\"n\">trim_url_limit</span><span class=\"p\">,</span>\n                    <span class=\"n\">nofollow</span><span class=\"o\">=</span><span class=\"n\">nofollow</span><span class=\"p\">,</span>\n                    <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">autoescape</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"n\">words</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_word</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">word</span><span class=\"p\">,</span>\n        <span class=\"o\">*</span><span class=\"p\">,</span>\n        <span class=\"n\">safe_input</span><span class=\"p\">,</span>\n        <span class=\"n\">trim_url_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">nofollow</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">word</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;@&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">word</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">word</span><span class=\"p\">:</span>\n            <span class=\"c1\"># lead: Punctuation trimmed from the beginning of the word.</span>\n            <span class=\"c1\"># middle: State of the word.</span>\n            <span class=\"c1\"># trail: Punctuation trimmed from the end of the word.</span>\n            <span class=\"n\">lead</span><span class=\"p\">,</span> <span class=\"n\">middle</span><span class=\"p\">,</span> <span class=\"n\">trail</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">trim_punctuation</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Make URL we want to point to.</span>\n            <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n            <span class=\"n\">nofollow_attr</span> <span class=\"o\">=</span> <span class=\"s1\">&#39; rel=&quot;nofollow&quot;&#39;</span> <span class=\"k\">if</span> <span class=\"n\">nofollow</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">simple_url_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">):</span>\n                <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">smart_urlquote</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">unescape</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">simple_url_2_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">):</span>\n                <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">smart_urlquote</span><span class=\"p\">(</span><span class=\"s2\">&quot;http://</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">unescape</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">))</span>\n            <span class=\"k\">elif</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">middle</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_email_simple</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">):</span>\n                <span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">domain</span> <span class=\"o\">=</span> <span class=\"n\">punycode</span><span class=\"p\">(</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">UnicodeError</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">word</span>\n                <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mailto_template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">local</span><span class=\"o\">=</span><span class=\"n\">local</span><span class=\"p\">,</span> <span class=\"n\">domain</span><span class=\"o\">=</span><span class=\"n\">domain</span><span class=\"p\">)</span>\n                <span class=\"n\">nofollow_attr</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n            <span class=\"c1\"># Make link.</span>\n            <span class=\"k\">if</span> <span class=\"n\">url</span><span class=\"p\">:</span>\n                <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">trim_url</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"n\">trim_url_limit</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">autoescape</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">safe_input</span><span class=\"p\">:</span>\n                    <span class=\"n\">lead</span><span class=\"p\">,</span> <span class=\"n\">trail</span> <span class=\"o\">=</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">lead</span><span class=\"p\">),</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">trail</span><span class=\"p\">)</span>\n                    <span class=\"n\">trimmed</span> <span class=\"o\">=</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">trimmed</span><span class=\"p\">)</span>\n                <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url_template</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">),</span>\n                    <span class=\"n\">attrs</span><span class=\"o\">=</span><span class=\"n\">nofollow_attr</span><span class=\"p\">,</span>\n                    <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">trimmed</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">lead</span><span class=\"si\">}{</span><span class=\"n\">middle</span><span class=\"si\">}{</span><span class=\"n\">trail</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">safe_input</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n                <span class=\"k\">elif</span> <span class=\"n\">autoescape</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">safe_input</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"n\">autoescape</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">word</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">word</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">trim_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">limit</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">&lt;=</span> <span class=\"n\">limit</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">x</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">\u2026&quot;</span> <span class=\"o\">%</span> <span class=\"n\">x</span><span class=\"p\">[:</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">limit</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">trim_punctuation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Trim trailing and wrapping punctuation from `word`. Return the items of</span>\n<span class=\"sd\">        the new state.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">lead</span><span class=\"p\">,</span> <span class=\"n\">middle</span><span class=\"p\">,</span> <span class=\"n\">trail</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">word</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"c1\"># Continue trimming until middle remains unchanged.</span>\n        <span class=\"n\">trimmed_something</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">while</span> <span class=\"n\">trimmed_something</span><span class=\"p\">:</span>\n            <span class=\"n\">trimmed_something</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"c1\"># Trim wrapping punctuation.</span>\n            <span class=\"k\">for</span> <span class=\"n\">opening</span><span class=\"p\">,</span> <span class=\"n\">closing</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wrapping_punctuation</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">opening</span><span class=\"p\">):</span>\n                    <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"n\">opening</span><span class=\"p\">)</span>\n                    <span class=\"n\">lead</span> <span class=\"o\">+=</span> <span class=\"n\">opening</span>\n                    <span class=\"n\">trimmed_something</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"c1\"># Keep parentheses at the end only if they&#39;re balanced.</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">closing</span><span class=\"p\">)</span>\n                    <span class=\"ow\">and</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">closing</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"n\">opening</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"o\">.</span><span class=\"n\">removesuffix</span><span class=\"p\">(</span><span class=\"n\">closing</span><span class=\"p\">)</span>\n                    <span class=\"n\">trail</span> <span class=\"o\">=</span> <span class=\"n\">closing</span> <span class=\"o\">+</span> <span class=\"n\">trail</span>\n                    <span class=\"n\">trimmed_something</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"c1\"># Trim trailing punctuation (after trimming wrapping punctuation,</span>\n            <span class=\"c1\"># as encoded entities contain &#39;;&#39;). Unescape entities to avoid</span>\n            <span class=\"c1\"># breaking them by removing &#39;;&#39;.</span>\n            <span class=\"n\">middle_unescaped</span> <span class=\"o\">=</span> <span class=\"n\">html</span><span class=\"o\">.</span><span class=\"n\">unescape</span><span class=\"p\">(</span><span class=\"n\">middle</span><span class=\"p\">)</span>\n            <span class=\"n\">stripped</span> <span class=\"o\">=</span> <span class=\"n\">middle_unescaped</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">trailing_punctuation_chars</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">middle_unescaped</span> <span class=\"o\">!=</span> <span class=\"n\">stripped</span><span class=\"p\">:</span>\n                <span class=\"n\">punctuation_count</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">middle_unescaped</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stripped</span><span class=\"p\">)</span>\n                <span class=\"n\">trail</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"n\">punctuation_count</span><span class=\"p\">:]</span> <span class=\"o\">+</span> <span class=\"n\">trail</span>\n                <span class=\"n\">middle</span> <span class=\"o\">=</span> <span class=\"n\">middle</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"n\">punctuation_count</span><span class=\"p\">]</span>\n                <span class=\"n\">trimmed_something</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">return</span> <span class=\"n\">lead</span><span class=\"p\">,</span> <span class=\"n\">middle</span><span class=\"p\">,</span> <span class=\"n\">trail</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_email_simple</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return True if value looks like an email address.&quot;&quot;&quot;</span>\n        <span class=\"c1\"># An @ must be in the middle of the value.</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;@&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">value</span> <span class=\"ow\">or</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">p1</span><span class=\"p\">,</span> <span class=\"n\">p2</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;@&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># value contains more than one @.</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"c1\"># Dot must be in p2 (e.g. example.com)</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">p2</span> <span class=\"ow\">or</span> <span class=\"n\">p2</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"n\">urlizer</span> <span class=\"o\">=</span> <span class=\"n\">Urlizer</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@keep_lazy_text</span>\n<span class=\"k\">def</span> <span class=\"nf\">urlize</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">trim_url_limit</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">nofollow</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">urlizer</span><span class=\"p\">(</span>\n        <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">trim_url_limit</span><span class=\"o\">=</span><span class=\"n\">trim_url_limit</span><span class=\"p\">,</span> <span class=\"n\">nofollow</span><span class=\"o\">=</span><span class=\"n\">nofollow</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">autoescape</span>\n    <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">avoid_wrapping</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Avoid text wrapping in the middle of a phrase by adding non-breaking</span>\n<span class=\"sd\">    spaces where there previously were normal spaces.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"se\">\\xa0</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"html_safe\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.html.html_safe\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">html_safe</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A decorator that defines the __html__ method. This helps non-Django</span>\n<span class=\"sd\">    templates to detect classes whose __str__ methods return SafeString.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"s2\">&quot;__html__&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;can&#39;t apply @html_safe to </span><span class=\"si\">%s</span><span class=\"s2\"> because it defines &quot;</span>\n            <span class=\"s2\">&quot;__html__().&quot;</span> <span class=\"o\">%</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"s2\">&quot;__str__&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;can&#39;t apply @html_safe to </span><span class=\"si\">%s</span><span class=\"s2\"> because it doesn&#39;t &quot;</span>\n            <span class=\"s2\">&quot;define __str__().&quot;</span> <span class=\"o\">%</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">klass_str</span> <span class=\"o\">=</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"fm\">__str__</span>\n    <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"fm\">__str__</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">klass_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n    <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">__html__</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">klass</span></div>\n</pre></div>", "current_page_name": "_modules/django/utils/html", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
