{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.utils.module_loading", "body": "<h1>Source code for django.utils.module_loading</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib.util</span> <span class=\"kn\">import</span> <span class=\"n\">find_spec</span> <span class=\"k\">as</span> <span class=\"n\">importlib_find</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">cached_import</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check whether module is loaded and fully initialized.</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span>\n        <span class=\"p\">(</span><span class=\"n\">module</span> <span class=\"o\">:=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">modules</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">))</span>\n        <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"n\">spec</span> <span class=\"o\">:=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__spec__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n        <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">spec</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_initializing&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"import_string\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.module_loading.import_string\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">import_string</span><span class=\"p\">(</span><span class=\"n\">dotted_path</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Import a dotted module path and return the attribute/class designated by the</span>\n<span class=\"sd\">    last name in the path. Raise ImportError if the import failed.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">class_name</span> <span class=\"o\">=</span> <span class=\"n\">dotted_path</span><span class=\"o\">.</span><span class=\"n\">rsplit</span><span class=\"p\">(</span><span class=\"s2\">&quot;.&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> doesn&#39;t look like a module path&quot;</span> <span class=\"o\">%</span> <span class=\"n\">dotted_path</span><span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">err</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">cached_import</span><span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ImportError</span><span class=\"p\">(</span>\n            <span class=\"s1\">&#39;Module &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; does not define a &quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; attribute/class&#39;</span>\n            <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">module_path</span><span class=\"p\">,</span> <span class=\"n\">class_name</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">err</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">autodiscover_modules</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Auto-discover INSTALLED_APPS modules and fail silently when</span>\n<span class=\"sd\">    not present. This forces an import on them to register any admin bits they</span>\n<span class=\"sd\">    may want.</span>\n\n<span class=\"sd\">    You may provide a register_to keyword parameter as a way to access a</span>\n<span class=\"sd\">    registry. This register_to object must have a _registry instance variable</span>\n<span class=\"sd\">    to access it.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span>\n\n    <span class=\"n\">register_to</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;register_to&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">app_config</span> <span class=\"ow\">in</span> <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_app_configs</span><span class=\"p\">():</span>\n        <span class=\"k\">for</span> <span class=\"n\">module_to_search</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Attempt to import the app&#39;s module.</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">register_to</span><span class=\"p\">:</span>\n                    <span class=\"n\">before_import_registry</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">register_to</span><span class=\"o\">.</span><span class=\"n\">_registry</span><span class=\"p\">)</span>\n\n                <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">app_config</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">module_to_search</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span> <span class=\"ne\">Exception</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Reset the registry to the state before the last import</span>\n                <span class=\"c1\"># as this import will have to reoccur on the next request and</span>\n                <span class=\"c1\"># this could raise NotRegistered and AlreadyRegistered</span>\n                <span class=\"c1\"># exceptions (see #8245).</span>\n                <span class=\"k\">if</span> <span class=\"n\">register_to</span><span class=\"p\">:</span>\n                    <span class=\"n\">register_to</span><span class=\"o\">.</span><span class=\"n\">_registry</span> <span class=\"o\">=</span> <span class=\"n\">before_import_registry</span>\n\n                <span class=\"c1\"># Decide whether to bubble up this error. If the app just</span>\n                <span class=\"c1\"># doesn&#39;t have the module in question, we can ignore the error</span>\n                <span class=\"c1\"># attempting to import it, otherwise we want it to bubble up.</span>\n                <span class=\"k\">if</span> <span class=\"n\">module_has_submodule</span><span class=\"p\">(</span><span class=\"n\">app_config</span><span class=\"o\">.</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"n\">module_to_search</span><span class=\"p\">):</span>\n                    <span class=\"k\">raise</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">module_has_submodule</span><span class=\"p\">(</span><span class=\"n\">package</span><span class=\"p\">,</span> <span class=\"n\">module_name</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;See if &#39;module&#39; is in &#39;package&#39;.&quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">package_name</span> <span class=\"o\">=</span> <span class=\"n\">package</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"n\">package_path</span> <span class=\"o\">=</span> <span class=\"n\">package</span><span class=\"o\">.</span><span class=\"n\">__path__</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># package isn&#39;t a package.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">full_module_name</span> <span class=\"o\">=</span> <span class=\"n\">package_name</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">module_name</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">importlib_find</span><span class=\"p\">(</span><span class=\"n\">full_module_name</span><span class=\"p\">,</span> <span class=\"n\">package_path</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ModuleNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># When module_name is an invalid dotted path, Python raises</span>\n        <span class=\"c1\"># ModuleNotFoundError.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">module_dir</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Find the name of the directory that contains a module, if possible.</span>\n\n<span class=\"sd\">    Raise ValueError otherwise, e.g. for namespace packages that are split</span>\n<span class=\"sd\">    over several directories.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Convert to list because __path__ may not support indexing.</span>\n    <span class=\"n\">paths</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__path__&quot;</span><span class=\"p\">,</span> <span class=\"p\">[]))</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">paths</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">paths</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__file__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">filename</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Cannot determine directory containing </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">module</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/django/utils/module_loading", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}