{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "django"}, {"link": "../", "title": "django.core.files.storage"}], "title": "django.core.files.storage.memory", "body": "<h1>Source code for django.core.files.storage.memory</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Based on dj-inmemorystorage (BSD) by Cody Soyland, Se\u00e1n Hayes, Tore Birkeland,</span>\n<span class=\"sd\">and Nick Presta.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">errno</span>\n<span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pathlib</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">urljoin</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files.base</span> <span class=\"kn\">import</span> <span class=\"n\">ContentFile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.signals</span> <span class=\"kn\">import</span> <span class=\"n\">setting_changed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils._os</span> <span class=\"kn\">import</span> <span class=\"n\">safe_join</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deconstruct</span> <span class=\"kn\">import</span> <span class=\"n\">deconstructible</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.encoding</span> <span class=\"kn\">import</span> <span class=\"n\">filepath_to_uri</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.timezone</span> <span class=\"kn\">import</span> <span class=\"n\">now</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.base</span> <span class=\"kn\">import</span> <span class=\"n\">Storage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.mixins</span> <span class=\"kn\">import</span> <span class=\"n\">StorageSettingsMixin</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;InMemoryStorage&quot;</span><span class=\"p\">,)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TimingMixin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize_times</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">created_time</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">accessed_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">created_time</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modified_time</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">created_time</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_accessed_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">accessed_time</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_update_modified_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">modified_time</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InMemoryFileNode</span><span class=\"p\">(</span><span class=\"n\">ContentFile</span><span class=\"p\">,</span> <span class=\"n\">TimingMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Helper class representing an in-memory file node.</span>\n\n<span class=\"sd\">    Handle unicode/bytes conversion during I/O operations and record creation,</span>\n<span class=\"sd\">    modification, and access times.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type</span> <span class=\"o\">=</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_stream</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_times</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_convert_stream_content</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_accessed_time</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">write</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_modified_time</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_initialize_stream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Initialize underlying stream according to the content type.&quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type</span> <span class=\"o\">==</span> <span class=\"nb\">bytes</span> <span class=\"k\">else</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_convert_stream_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Convert actual file content according to the opening mode.&quot;&quot;&quot;</span>\n        <span class=\"n\">new_content_type</span> <span class=\"o\">=</span> <span class=\"nb\">bytes</span> <span class=\"k\">if</span> <span class=\"s2\">&quot;b&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">mode</span> <span class=\"k\">else</span> <span class=\"nb\">str</span>\n        <span class=\"c1\"># No conversion needed.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type</span> <span class=\"o\">==</span> <span class=\"n\">new_content_type</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>\n\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">()</span>\n        <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_content_type</span> <span class=\"o\">=</span> <span class=\"n\">new_content_type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_stream</span><span class=\"p\">()</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InMemoryDirNode</span><span class=\"p\">(</span><span class=\"n\">TimingMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Helper class representing an in-memory directory node.</span>\n\n<span class=\"sd\">    Handle path navigation of directory trees, creating missing nodes if</span>\n<span class=\"sd\">    needed.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_initialize_times</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">create_if_missing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">check_exists</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Navigate current directory tree, returning node matching path or</span>\n<span class=\"sd\">        creating a new one, if missing.</span>\n<span class=\"sd\">        - path: path of the node to search</span>\n<span class=\"sd\">        - create_if_missing: create nodes if not exist. Defaults to False.</span>\n<span class=\"sd\">        - leaf_cls: expected type of leaf node. Defaults to None.</span>\n<span class=\"sd\">        - check_exists: if True and the leaf node does not exist, raise a</span>\n<span class=\"sd\">          FileNotFoundError. Defaults to True.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">path_segments</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">parts</span><span class=\"p\">)</span>\n        <span class=\"n\">current_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">path_segments</span><span class=\"p\">:</span>\n            <span class=\"n\">path_segment</span> <span class=\"o\">=</span> <span class=\"n\">path_segments</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n            <span class=\"c1\"># If current node is a file node and there are unprocessed</span>\n            <span class=\"c1\"># segments, raise an error.</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">current_node</span><span class=\"p\">,</span> <span class=\"n\">InMemoryFileNode</span><span class=\"p\">):</span>\n                <span class=\"n\">path_segments</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n                <span class=\"n\">current_path</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n                    <span class=\"n\">path_segments</span><span class=\"p\">[:</span> <span class=\"n\">path_segments</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"n\">path_segment</span><span class=\"p\">)]</span>\n                <span class=\"p\">)</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">NotADirectoryError</span><span class=\"p\">(</span>\n                    <span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOTDIR</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOTDIR</span><span class=\"p\">),</span> <span class=\"n\">current_path</span>\n                <span class=\"p\">)</span>\n            <span class=\"n\">current_node</span> <span class=\"o\">=</span> <span class=\"n\">current_node</span><span class=\"o\">.</span><span class=\"n\">_resolve_child</span><span class=\"p\">(</span>\n                <span class=\"n\">path_segment</span><span class=\"p\">,</span>\n                <span class=\"n\">create_if_missing</span><span class=\"p\">,</span>\n                <span class=\"n\">leaf_cls</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">path_segments</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"n\">InMemoryDirNode</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">current_node</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">current_node</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">check_exists</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOENT</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOENT</span><span class=\"p\">),</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># If a leaf_cls is not None, check if leaf node is of right type.</span>\n        <span class=\"k\">if</span> <span class=\"n\">leaf_cls</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">current_node</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"p\">):</span>\n            <span class=\"n\">error_cls</span><span class=\"p\">,</span> <span class=\"n\">error_code</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"p\">(</span><span class=\"ne\">NotADirectoryError</span><span class=\"p\">,</span> <span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOTDIR</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">leaf_cls</span> <span class=\"ow\">is</span> <span class=\"n\">InMemoryDirNode</span>\n                <span class=\"k\">else</span> <span class=\"p\">(</span><span class=\"ne\">IsADirectoryError</span><span class=\"p\">,</span> <span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">EISDIR</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">error_cls</span><span class=\"p\">(</span><span class=\"n\">error_code</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">strerror</span><span class=\"p\">(</span><span class=\"n\">error_code</span><span class=\"p\">),</span> <span class=\"n\">path</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">current_node</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_resolve_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path_segment</span><span class=\"p\">,</span> <span class=\"n\">create_if_missing</span><span class=\"p\">,</span> <span class=\"n\">child_cls</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">create_if_missing</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_accessed_time</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_modified_time</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">path_segment</span><span class=\"p\">,</span> <span class=\"n\">child_cls</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">path_segment</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">directories</span><span class=\"p\">,</span> <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">entry</span><span class=\"p\">,</span> <span class=\"n\">InMemoryDirNode</span><span class=\"p\">):</span>\n                <span class=\"n\">directories</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">directories</span><span class=\"p\">,</span> <span class=\"n\">files</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">remove_child</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_accessed_time</span><span class=\"p\">()</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_update_modified_time</span><span class=\"p\">()</span>\n            <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_children</span><span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"InMemoryStorage\"><a class=\"viewcode-back\" href=\"../../../../../../ref/files/storage/#django.core.files.storage.InMemoryStorage\">[docs]</a><span class=\"nd\">@deconstructible</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">&quot;django.core.files.storage.InMemoryStorage&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">InMemoryStorage</span><span class=\"p\">(</span><span class=\"n\">Storage</span><span class=\"p\">,</span> <span class=\"n\">StorageSettingsMixin</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;A storage saving files in memory.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">location</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">base_url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">file_permissions_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">directory_permissions_mode</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_location</span> <span class=\"o\">=</span> <span class=\"n\">location</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_url</span> <span class=\"o\">=</span> <span class=\"n\">base_url</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_file_permissions_mode</span> <span class=\"o\">=</span> <span class=\"n\">file_permissions_mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_directory_permissions_mode</span> <span class=\"o\">=</span> <span class=\"n\">directory_permissions_mode</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span> <span class=\"o\">=</span> <span class=\"n\">InMemoryDirNode</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_location</span><span class=\"p\">,</span> <span class=\"n\">create_if_missing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"n\">InMemoryDirNode</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">setting_changed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_clear_cached_properties</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">base_location</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_or_setting</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_location</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_ROOT</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">location</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_location</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">base_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_url</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_url</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_url</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;/&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_or_setting</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_base_url</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_URL</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">file_permissions_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_or_setting</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_file_permissions_mode</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FILE_UPLOAD_PERMISSIONS</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">directory_permissions_mode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_value_or_setting</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_directory_permissions_mode</span><span class=\"p\">,</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">FILE_UPLOAD_DIRECTORY_PERMISSIONS</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_relative_path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">full_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">relpath</span><span class=\"p\">(</span><span class=\"n\">full_path</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">create_if_missing</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">check_exists</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">relative_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_relative_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_root</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span>\n                <span class=\"n\">relative_path</span><span class=\"p\">,</span>\n                <span class=\"n\">create_if_missing</span><span class=\"o\">=</span><span class=\"n\">create_if_missing</span><span class=\"p\">,</span>\n                <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"n\">leaf_cls</span><span class=\"p\">,</span>\n                <span class=\"n\">check_exists</span><span class=\"o\">=</span><span class=\"n\">check_exists</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">NotADirectoryError</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"n\">absolute_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">exc</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">FileExistsError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">absolute_path</span><span class=\"si\">}</span><span class=\"s2\"> exists and is not a directory.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">create_if_missing</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;w&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">mode</span>\n        <span class=\"n\">file_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">create_if_missing</span><span class=\"o\">=</span><span class=\"n\">create_if_missing</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"n\">InMemoryFileNode</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">file_node</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">):</span>\n        <span class=\"n\">file_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span>\n            <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">create_if_missing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"n\">InMemoryFileNode</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">chunks</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">fd</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;wb&quot;</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">,</span> <span class=\"nb\">bytes</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;wt&quot;</span>\n                <span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"n\">file_node</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n            <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"s2\">&quot;temporary_file_path&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">temporary_file_path</span><span class=\"p\">())</span>\n\n        <span class=\"n\">file_node</span><span class=\"o\">.</span><span class=\"n\">modified_time</span> <span class=\"o\">=</span> <span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_relative_path</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\\\</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">path</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">safe_join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"n\">dir_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">check_exists</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">dir_node</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n        <span class=\"n\">dir_node</span><span class=\"o\">.</span><span class=\"n\">remove_child</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">exists</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">check_exists</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">listdir</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">leaf_cls</span><span class=\"o\">=</span><span class=\"n\">InMemoryDirNode</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">size</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_open</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">getvalue</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_url</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;This file is not accessible via a URL.&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">filepath_to_uri</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">url</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">lstrip</span><span class=\"p\">(</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">urljoin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">base_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_accessed_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">file_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">file_node</span><span class=\"o\">.</span><span class=\"n\">accessed_time</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_created_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">file_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">file_node</span><span class=\"o\">.</span><span class=\"n\">created_time</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_modified_time</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">file_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">file_node</span><span class=\"o\">.</span><span class=\"n\">modified_time</span></div>\n</pre></div>", "current_page_name": "_modules/django/core/files/storage/memory", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
