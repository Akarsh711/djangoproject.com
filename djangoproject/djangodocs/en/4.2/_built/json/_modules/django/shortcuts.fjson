{"parents": [{"link": "../../", "title": "Module code"}, {"link": "../", "title": "django"}], "title": "django.shortcuts", "body": "<h1>Source code for django.shortcuts</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module collects helper functions and classes that &quot;span&quot; multiple levels</span>\n<span class=\"sd\">of MVC. In other words, these functions/classes introduce controlled coupling</span>\n<span class=\"sd\">for convenience&#39;s sake.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">Http404</span><span class=\"p\">,</span>\n    <span class=\"n\">HttpResponse</span><span class=\"p\">,</span>\n    <span class=\"n\">HttpResponsePermanentRedirect</span><span class=\"p\">,</span>\n    <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">,</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">Promise</span>\n\n\n<div class=\"viewcode-block\" id=\"render\"><a class=\"viewcode-back\" href=\"../../../topics/http/shortcuts/#django.shortcuts.render\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span>\n    <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return an HttpResponse whose content is filled with the result of calling</span>\n<span class=\"sd\">    django.template.loader.render_to_string() with the passed arguments.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">render_to_string</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"redirect\"><a class=\"viewcode-back\" href=\"../../../topics/http/shortcuts/#django.shortcuts.redirect\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">redirect</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">permanent</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return an HttpResponseRedirect to the appropriate URL for the arguments</span>\n<span class=\"sd\">    passed.</span>\n\n<span class=\"sd\">    The arguments could be:</span>\n\n<span class=\"sd\">        * A model: the model&#39;s `get_absolute_url()` function will be called.</span>\n\n<span class=\"sd\">        * A view name, possibly with arguments: `urls.reverse()` will be used</span>\n<span class=\"sd\">          to reverse-resolve the name.</span>\n\n<span class=\"sd\">        * A URL, which will be used as-is for the redirect location.</span>\n\n<span class=\"sd\">    Issues a temporary redirect by default; pass permanent=True to issue a</span>\n<span class=\"sd\">    permanent redirect.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">redirect_class</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">HttpResponsePermanentRedirect</span> <span class=\"k\">if</span> <span class=\"n\">permanent</span> <span class=\"k\">else</span> <span class=\"n\">HttpResponseRedirect</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">redirect_class</span><span class=\"p\">(</span><span class=\"n\">resolve_url</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_get_queryset</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a QuerySet or a Manager.</span>\n<span class=\"sd\">    Duck typing in action: any class with a `get()` method (for</span>\n<span class=\"sd\">    get_object_or_404) or a `filter()` method (for get_list_or_404) might do</span>\n<span class=\"sd\">    the job.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># If it is a model class or anything else with ._default_manager</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_default_manager&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"n\">_default_manager</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">klass</span>\n\n\n<div class=\"viewcode-block\" id=\"get_object_or_404\"><a class=\"viewcode-back\" href=\"../../../topics/http/shortcuts/#django.shortcuts.get_object_or_404\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Use get() to return an object, or raise an Http404 exception if the object</span>\n<span class=\"sd\">    does not exist.</span>\n\n<span class=\"sd\">    klass may be a Model, Manager, or QuerySet object. All other passed</span>\n<span class=\"sd\">    arguments and keyword arguments are used in the get() query.</span>\n\n<span class=\"sd\">    Like with QuerySet.get(), MultipleObjectsReturned is raised if more than</span>\n<span class=\"sd\">    one object is found.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">_get_queryset</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">klass__name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;First argument to get_object_or_404() must be a Model, Manager, &quot;</span>\n            <span class=\"s2\">&quot;or QuerySet, not &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">klass__name</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Http404</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;No </span><span class=\"si\">%s</span><span class=\"s2\"> matches the given query.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">object_name</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_list_or_404\"><a class=\"viewcode-back\" href=\"../../../topics/http/shortcuts/#django.shortcuts.get_list_or_404\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_list_or_404</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Use filter() to return a list of objects, or raise an Http404 exception if</span>\n<span class=\"sd\">    the list is empty.</span>\n\n<span class=\"sd\">    klass may be a Model, Manager, or QuerySet object. All other passed</span>\n<span class=\"sd\">    arguments and keyword arguments are used in the filter() query.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">_get_queryset</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"s2\">&quot;filter&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">klass__name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__name__</span> <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">klass</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">)</span> <span class=\"k\">else</span> <span class=\"n\">klass</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;First argument to get_list_or_404() must be a Model, Manager, or &quot;</span>\n            <span class=\"s2\">&quot;QuerySet, not &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">klass__name</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">obj_list</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">obj_list</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Http404</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;No </span><span class=\"si\">%s</span><span class=\"s2\"> matches the given query.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">object_name</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">obj_list</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">resolve_url</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a URL appropriate for the arguments passed.</span>\n\n<span class=\"sd\">    The arguments could be:</span>\n\n<span class=\"sd\">        * A model: the model&#39;s `get_absolute_url()` function will be called.</span>\n\n<span class=\"sd\">        * A view name, possibly with arguments: `urls.reverse()` will be used</span>\n<span class=\"sd\">          to reverse-resolve the name.</span>\n\n<span class=\"sd\">        * A URL, which will be returned as-is.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># If it&#39;s a model, use get_absolute_url()</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"s2\">&quot;get_absolute_url&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">Promise</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Expand the lazy instance, as it can cause issues when it is passed</span>\n        <span class=\"c1\"># further to some Python functions like urlparse.</span>\n        <span class=\"n\">to</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Handle relative URLs</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">to</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">((</span><span class=\"s2\">&quot;./&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;../&quot;</span><span class=\"p\">)):</span>\n        <span class=\"k\">return</span> <span class=\"n\">to</span>\n\n    <span class=\"c1\"># Next try a reverse URL resolution.</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">:</span>\n        <span class=\"c1\"># If this is a callable, re-raise.</span>\n        <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">to</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span>\n        <span class=\"c1\"># If this doesn&#39;t &quot;feel&quot; like a URL, re-raise.</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;/&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">to</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">to</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span>\n\n    <span class=\"c1\"># Finally, fall back and assume it&#39;s a URL</span>\n    <span class=\"k\">return</span> <span class=\"n\">to</span>\n</pre></div>", "current_page_name": "_modules/django/shortcuts", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
