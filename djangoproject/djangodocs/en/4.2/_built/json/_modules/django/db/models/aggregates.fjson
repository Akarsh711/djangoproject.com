{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.db.models.aggregates", "body": "<h1>Source code for django.db.models.aggregates</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">Classes to represent the definitions of aggregate functions.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">FieldError</span><span class=\"p\">,</span> <span class=\"n\">FullResultSet</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.expressions</span> <span class=\"kn\">import</span> <span class=\"n\">Case</span><span class=\"p\">,</span> <span class=\"n\">Func</span><span class=\"p\">,</span> <span class=\"n\">Star</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">When</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.fields</span> <span class=\"kn\">import</span> <span class=\"n\">IntegerField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions.comparison</span> <span class=\"kn\">import</span> <span class=\"n\">Coalesce</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions.mixins</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">FixDurationInputMixin</span><span class=\"p\">,</span>\n    <span class=\"n\">NumericOutputFieldMixin</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">__all__</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;Aggregate&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Avg&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Count&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Max&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Min&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;StdDev&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Sum&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;Variance&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"Aggregate\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/expressions/#django.db.models.Aggregate\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Aggregate</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(</span><span class=\"si\">%(distinct)s%(expressions)s</span><span class=\"s2\">)&quot;</span>\n    <span class=\"n\">contains_aggregate</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">filter_template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> FILTER (WHERE </span><span class=\"si\">%%</span><span class=\"s2\">(filter)s)&quot;</span>\n    <span class=\"n\">window_compatible</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">allow_distinct</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">empty_result_set_value</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">distinct</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span>\n    <span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">distinct</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">allow_distinct</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> does not allow distinct.&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">default</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">empty_result_set_value</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"si\">}</span><span class=\"s2\"> does not allow default.&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">distinct</span> <span class=\"o\">=</span> <span class=\"n\">distinct</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"o\">=</span> <span class=\"nb\">filter</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">default</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_source_fields</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Don&#39;t return the filter expression since it&#39;s not a source field.</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">_output_field_or_none</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_source_expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">source_expressions</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">source_expressions</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">source_expressions</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set_source_expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exprs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"ow\">and</span> <span class=\"n\">exprs</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_source_expressions</span><span class=\"p\">(</span><span class=\"n\">exprs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_expression</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">for_save</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># Aggregates are not allowed in UPDATE queries, so ignore for_save</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"ow\">and</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span>\n            <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"p\">,</span> <span class=\"n\">summarize</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">summarize</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Summarized aggregates cannot refer to summarized aggregates.</span>\n            <span class=\"k\">for</span> <span class=\"n\">ref</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_refs</span><span class=\"p\">():</span>\n                <span class=\"k\">if</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">[</span><span class=\"n\">ref</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">is_summary</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">FieldError</span><span class=\"p\">(</span>\n                        <span class=\"sa\">f</span><span class=\"s2\">&quot;Cannot compute </span><span class=\"si\">{</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s2\">(&#39;</span><span class=\"si\">{</span><span class=\"n\">ref</span><span class=\"si\">}</span><span class=\"s2\">&#39;): &#39;</span><span class=\"si\">{</span><span class=\"n\">ref</span><span class=\"si\">}</span><span class=\"s2\">&#39; is an aggregate&quot;</span>\n                    <span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_summary</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Call Aggregate.get_source_expressions() to avoid</span>\n            <span class=\"c1\"># returning self.filter and including that in this loop.</span>\n            <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Aggregate</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">index</span><span class=\"p\">,</span> <span class=\"n\">expr</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"n\">expr</span><span class=\"o\">.</span><span class=\"n\">contains_aggregate</span><span class=\"p\">:</span>\n                    <span class=\"n\">before_resolved</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n                    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"n\">before_resolved</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">before_resolved</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n                        <span class=\"k\">else</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">before_resolved</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">FieldError</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Cannot compute </span><span class=\"si\">%s</span><span class=\"s2\">(&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;): &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; is an aggregate&quot;</span>\n                        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">c</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">default</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">default</span><span class=\"o\">.</span><span class=\"n\">_output_field_or_none</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">default</span><span class=\"o\">.</span><span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_output_field_or_none</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_output_field_or_none</span><span class=\"p\">)</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># Reset the default argument before wrapping.</span>\n        <span class=\"n\">coalesce</span> <span class=\"o\">=</span> <span class=\"n\">Coalesce</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"p\">,</span> <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">_output_field_or_none</span><span class=\"p\">)</span>\n        <span class=\"n\">coalesce</span><span class=\"o\">.</span><span class=\"n\">is_summary</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_summary</span>\n        <span class=\"k\">return</span> <span class=\"n\">coalesce</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">default_alias</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span> <span class=\"ow\">and</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">__</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">())</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Complex expressions require an alias&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_group_by_cols</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">extra_context</span><span class=\"p\">[</span><span class=\"s2\">&quot;distinct&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;DISTINCT &quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">distinct</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">supports_aggregate_filter_clause</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">filter_sql</span><span class=\"p\">,</span> <span class=\"n\">filter_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"n\">FullResultSet</span><span class=\"p\">:</span>\n                    <span class=\"k\">pass</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter_template</span> <span class=\"o\">%</span> <span class=\"n\">extra_context</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;template&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n                        <span class=\"n\">compiler</span><span class=\"p\">,</span>\n                        <span class=\"n\">connection</span><span class=\"p\">,</span>\n                        <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"n\">template</span><span class=\"p\">,</span>\n                        <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"n\">filter_sql</span><span class=\"p\">,</span>\n                        <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">filter_params</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n                <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">filter</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"n\">source_expressions</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n                <span class=\"n\">condition</span> <span class=\"o\">=</span> <span class=\"n\">When</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">,</span> <span class=\"n\">then</span><span class=\"o\">=</span><span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n                <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">set_source_expressions</span><span class=\"p\">([</span><span class=\"n\">Case</span><span class=\"p\">(</span><span class=\"n\">condition</span><span class=\"p\">)]</span> <span class=\"o\">+</span> <span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n                <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">Aggregate</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n                    <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span>\n                <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_repr_options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">options</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_get_repr_options</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">:</span>\n            <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;distinct&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">distinct</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">:</span>\n            <span class=\"n\">options</span><span class=\"p\">[</span><span class=\"s2\">&quot;filter&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter</span>\n        <span class=\"k\">return</span> <span class=\"n\">options</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Avg\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.Avg\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Avg</span><span class=\"p\">(</span><span class=\"n\">FixDurationInputMixin</span><span class=\"p\">,</span> <span class=\"n\">NumericOutputFieldMixin</span><span class=\"p\">,</span> <span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;AVG&quot;</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Avg&quot;</span>\n    <span class=\"n\">allow_distinct</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Count\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.Count\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Count</span><span class=\"p\">(</span><span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;COUNT&quot;</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Count&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">allow_distinct</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">empty_result_set_value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">expression</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;*&quot;</span><span class=\"p\">:</span>\n            <span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"n\">Star</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">Star</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">filter</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Star cannot be used with filter. Please specify a field.&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"nb\">filter</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Max\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.Max\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Max</span><span class=\"p\">(</span><span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MAX&quot;</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Max&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Min\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.Min\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Min</span><span class=\"p\">(</span><span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MIN&quot;</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Min&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"StdDev\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.StdDev\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">StdDev</span><span class=\"p\">(</span><span class=\"n\">NumericOutputFieldMixin</span><span class=\"p\">,</span> <span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;StdDev&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;STDDEV_SAMP&quot;</span> <span class=\"k\">if</span> <span class=\"n\">sample</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;STDDEV_POP&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_repr_options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_get_repr_options</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;sample&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">function</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;STDDEV_SAMP&quot;</span><span class=\"p\">}</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Sum\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.Sum\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Sum</span><span class=\"p\">(</span><span class=\"n\">FixDurationInputMixin</span><span class=\"p\">,</span> <span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SUM&quot;</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Sum&quot;</span>\n    <span class=\"n\">allow_distinct</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Variance\"><a class=\"viewcode-back\" href=\"../../../../../ref/models/querysets/#django.db.models.Variance\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Variance</span><span class=\"p\">(</span><span class=\"n\">NumericOutputFieldMixin</span><span class=\"p\">,</span> <span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Variance&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;VAR_SAMP&quot;</span> <span class=\"k\">if</span> <span class=\"n\">sample</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;VAR_POP&quot;</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_get_repr_options</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">_get_repr_options</span><span class=\"p\">(),</span> <span class=\"s2\">&quot;sample&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">function</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;VAR_SAMP&quot;</span><span class=\"p\">}</span></div>\n</pre></div>", "current_page_name": "_modules/django/db/models/aggregates", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
