{"parents": [{"link": "../../../../../", "title": "Module code"}, {"link": "../../../../", "title": "django"}], "title": "django.db.models.functions.text", "body": "<h1>Source code for django.db.models.functions.text</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">NotSupportedError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.expressions</span> <span class=\"kn\">import</span> <span class=\"n\">Func</span><span class=\"p\">,</span> <span class=\"n\">Value</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.fields</span> <span class=\"kn\">import</span> <span class=\"n\">CharField</span><span class=\"p\">,</span> <span class=\"n\">IntegerField</span><span class=\"p\">,</span> <span class=\"n\">TextField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Cast</span><span class=\"p\">,</span> <span class=\"n\">Coalesce</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.lookups</span> <span class=\"kn\">import</span> <span class=\"n\">Transform</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MySQLSHA2Mixin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;SHA2(</span><span class=\"si\">%%</span><span class=\"s2\">(expressions)s, </span><span class=\"si\">%s</span><span class=\"s2\">)&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:],</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">OracleHashMixin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;LOWER(RAWTOHEX(STANDARD_HASH(UTL_I18N.STRING_TO_RAW(&quot;</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">, &#39;AL32UTF8&#39;), &#39;</span><span class=\"si\">%(function)s</span><span class=\"s2\">&#39;)))&quot;</span>\n            <span class=\"p\">),</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PostgreSQLSHAMixin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">as_postgresql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;ENCODE(DIGEST(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">, &#39;</span><span class=\"si\">%(function)s</span><span class=\"s2\">&#39;), &#39;hex&#39;)&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">function</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">(),</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"Chr\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Chr\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Chr</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CHR&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;chr&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;CHAR&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> USING utf16)&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> USING NCHAR_CS)&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;CHAR&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ConcatPair</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Concatenate two arguments together. This is used by `Concat` because not</span>\n<span class=\"sd\">    all backend databases support more than two arguments.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CONCAT&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">coalesced</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">coalesce</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ConcatPair</span><span class=\"p\">,</span> <span class=\"n\">coalesced</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">arg_joiner</span><span class=\"o\">=</span><span class=\"s2\">&quot; || &quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_postgresql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">set_source_expressions</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">Cast</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">TextField</span><span class=\"p\">())</span>\n                <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ConcatPair</span><span class=\"p\">,</span> <span class=\"n\">copy</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Use CONCAT_WS with an empty separator so that NULLs are ignored.</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;CONCAT_WS&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(&#39;&#39;, </span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">coalesce</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># null on either side results in null for expression, wrap with coalesce</span>\n        <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">set_source_expressions</span><span class=\"p\">(</span>\n            <span class=\"p\">[</span>\n                <span class=\"n\">Coalesce</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">c</span>\n\n\n<div class=\"viewcode-block\" id=\"Concat\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Concat\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Concat</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Concatenate text fields together. Backends that result in an entire</span>\n<span class=\"sd\">    null expression when any arguments are null will wrap each argument in</span>\n<span class=\"sd\">    coalesce functions to ensure a non-null result.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Concat must take at least two expressions&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">paired</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paired</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">paired</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_paired</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expressions</span><span class=\"p\">):</span>\n        <span class=\"c1\"># wrap pairs of expressions in successive concat functions</span>\n        <span class=\"c1\"># exp = [a, b, c, d]</span>\n        <span class=\"c1\"># -&gt; ConcatPair(a, ConcatPair(b, ConcatPair(c, d))))</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">ConcatPair</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">ConcatPair</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_paired</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]))</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Left\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Left\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Left</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LEFT&quot;</span>\n    <span class=\"n\">arity</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        expression: the name of a field, or an expression returning a string</span>\n<span class=\"sd\">        length: the number of characters to return from the start of the string</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;length&#39; must be greater than 0.&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_substr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Substr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_substr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_oracle</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_substr</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sqlite</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Length\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Length\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Length</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Return the number of characters in the expression.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LENGTH&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;length&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;CHAR_LENGTH&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Lower\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Lower\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Lower</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LOWER&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;lower&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"LPad\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.LPad\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">LPad</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LPAD&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">fill_text</span><span class=\"o\">=</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot; &quot;</span><span class=\"p\">),</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">length</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"ow\">and</span> <span class=\"n\">length</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;length&#39; must be greater or equal to 0.&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">fill_text</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"LTrim\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.LTrim\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">LTrim</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LTRIM&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ltrim&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"MD5\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.MD5\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">MD5</span><span class=\"p\">(</span><span class=\"n\">OracleHashMixin</span><span class=\"p\">,</span> <span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;MD5&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;md5&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Ord\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Ord\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Ord</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ASCII&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ord&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;ORD&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;UNICODE&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Repeat\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Repeat\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Repeat</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;REPEAT&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"n\">number</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span>\n            <span class=\"ow\">and</span> <span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;number&#39; must be greater or equal to 0.&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">number</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source_expressions</span>\n        <span class=\"n\">length</span> <span class=\"o\">=</span> <span class=\"kc\">None</span> <span class=\"k\">if</span> <span class=\"n\">number</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"k\">else</span> <span class=\"n\">Length</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">number</span>\n        <span class=\"n\">rpad</span> <span class=\"o\">=</span> <span class=\"n\">RPad</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">rpad</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Replace\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Replace\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Replace</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;REPLACE&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"o\">=</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">),</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">replacement</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Reverse\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Reverse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Reverse</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;REVERSE&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;reverse&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"c1\"># REVERSE in Oracle is undocumented and doesn&#39;t support multi-byte</span>\n        <span class=\"c1\"># strings. Use a special subquery instead.</span>\n        <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;(SELECT LISTAGG(s) WITHIN GROUP (ORDER BY n DESC) FROM &quot;</span>\n                <span class=\"s2\">&quot;(SELECT LEVEL n, SUBSTR(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">, LEVEL, 1) s &quot;</span>\n                <span class=\"s2\">&quot;FROM DUAL CONNECT BY LEVEL &lt;= LENGTH(</span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)) &quot;</span>\n                <span class=\"s2\">&quot;GROUP BY </span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)&quot;</span>\n            <span class=\"p\">),</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">*</span> <span class=\"mi\">3</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Right\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Right\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Right</span><span class=\"p\">(</span><span class=\"n\">Left</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RIGHT&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_substr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Substr</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source_expressions</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"RPad\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.RPad\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RPad</span><span class=\"p\">(</span><span class=\"n\">LPad</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RPAD&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"RTrim\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.RTrim\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">RTrim</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;RTRIM&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rtrim&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SHA1\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.SHA1\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SHA1</span><span class=\"p\">(</span><span class=\"n\">OracleHashMixin</span><span class=\"p\">,</span> <span class=\"n\">PostgreSQLSHAMixin</span><span class=\"p\">,</span> <span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SHA1&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sha1&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SHA224\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.SHA224\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SHA224</span><span class=\"p\">(</span><span class=\"n\">MySQLSHA2Mixin</span><span class=\"p\">,</span> <span class=\"n\">PostgreSQLSHAMixin</span><span class=\"p\">,</span> <span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SHA224&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sha224&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">NotSupportedError</span><span class=\"p\">(</span><span class=\"s2\">&quot;SHA224 is not supported on Oracle.&quot;</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SHA256\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.SHA256\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SHA256</span><span class=\"p\">(</span><span class=\"n\">MySQLSHA2Mixin</span><span class=\"p\">,</span> <span class=\"n\">OracleHashMixin</span><span class=\"p\">,</span> <span class=\"n\">PostgreSQLSHAMixin</span><span class=\"p\">,</span> <span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SHA256&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sha256&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SHA384\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.SHA384\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SHA384</span><span class=\"p\">(</span><span class=\"n\">MySQLSHA2Mixin</span><span class=\"p\">,</span> <span class=\"n\">OracleHashMixin</span><span class=\"p\">,</span> <span class=\"n\">PostgreSQLSHAMixin</span><span class=\"p\">,</span> <span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SHA384&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sha384&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"SHA512\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.SHA512\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SHA512</span><span class=\"p\">(</span><span class=\"n\">MySQLSHA2Mixin</span><span class=\"p\">,</span> <span class=\"n\">OracleHashMixin</span><span class=\"p\">,</span> <span class=\"n\">PostgreSQLSHAMixin</span><span class=\"p\">,</span> <span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SHA512&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sha512&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"StrIndex\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.StrIndex\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">StrIndex</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a positive integer corresponding to the 1-indexed position of the</span>\n<span class=\"sd\">    first occurrence of a substring inside another string, or 0 if the</span>\n<span class=\"sd\">    substring is not found.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;INSTR&quot;</span>\n    <span class=\"n\">arity</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_postgresql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;STRPOS&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Substr\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Substr\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Substr</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SUBSTRING&quot;</span>\n    <span class=\"n\">output_field</span> <span class=\"o\">=</span> <span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        expression: the name of a field, or an expression returning a string</span>\n<span class=\"sd\">        pos: an integer &gt; 0, or an expression returning an integer</span>\n<span class=\"sd\">        length: an optional number of characters to return</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">pos</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;&#39;pos&#39; must be greater than 0&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">length</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">expressions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_sqlite</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;SUBSTR&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;SUBSTR&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Trim\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Trim\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Trim</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;TRIM&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;trim&quot;</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Upper\"><a class=\"viewcode-back\" href=\"../../../../../../ref/models/database-functions/#django.db.models.functions.Upper\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Upper</span><span class=\"p\">(</span><span class=\"n\">Transform</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;UPPER&quot;</span>\n    <span class=\"n\">lookup_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;upper&quot;</span></div>\n</pre></div>", "current_page_name": "_modules/django/db/models/functions/text", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
