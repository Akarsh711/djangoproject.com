{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.urls.resolvers", "body": "<h1>Source code for django.urls.resolvers</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This module converts requested URLs to callback view functions.</span>\n\n<span class=\"sd\">URLResolver is the main class here. Its resolve() method takes a URL (as</span>\n<span class=\"sd\">a string) and returns a ResolverMatch object which provides access to all</span>\n<span class=\"sd\">attributes of the resolved URL match.</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">import</span> <span class=\"nn\">string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pickle</span> <span class=\"kn\">import</span> <span class=\"n\">PicklingError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">urllib.parse</span> <span class=\"kn\">import</span> <span class=\"n\">quote</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">asgiref.local</span> <span class=\"kn\">import</span> <span class=\"n\">Local</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.checks</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"ne\">Warning</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.checks.urls</span> <span class=\"kn\">import</span> <span class=\"n\">check_resolver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">,</span> <span class=\"n\">ViewDoesNotExist</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.datastructures</span> <span class=\"kn\">import</span> <span class=\"n\">MultiValueDict</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.functional</span> <span class=\"kn\">import</span> <span class=\"n\">cached_property</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.http</span> <span class=\"kn\">import</span> <span class=\"n\">RFC3986_SUBDELIMS</span><span class=\"p\">,</span> <span class=\"n\">escape_leading_slashes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">,</span> <span class=\"n\">normalize</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">get_language</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.converters</span> <span class=\"kn\">import</span> <span class=\"n\">get_converter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">,</span> <span class=\"n\">Resolver404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_callable</span>\n\n\n<div class=\"viewcode-block\" id=\"ResolverMatch\"><a class=\"viewcode-back\" href=\"../../../../ref/urlresolvers/#django.urls.ResolverMatch\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">ResolverMatch</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">func</span><span class=\"p\">,</span>\n        <span class=\"n\">args</span><span class=\"p\">,</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">url_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">app_names</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">namespaces</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">tried</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">captured_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">extra_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">args</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url_name</span> <span class=\"o\">=</span> <span class=\"n\">url_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">route</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tried</span> <span class=\"o\">=</span> <span class=\"n\">tried</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">captured_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">captured_kwargs</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">extra_kwargs</span>\n\n        <span class=\"c1\"># If a URLRegexResolver doesn&#39;t have a namespace or app_name, it passes</span>\n        <span class=\"c1\"># in an empty value.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">app_names</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">app_names</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_names</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespaces</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">x</span> <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"n\">namespaces</span> <span class=\"k\">if</span> <span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"n\">namespaces</span> <span class=\"k\">else</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespaces</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">&quot;view_class&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"n\">view_class</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__name__&quot;</span><span class=\"p\">):</span>\n            <span class=\"c1\"># A class-based view</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_func_path</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># A function-based view</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_func_path</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">func</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n\n        <span class=\"n\">view_path</span> <span class=\"o\">=</span> <span class=\"n\">url_name</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_func_path</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">view_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespaces</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">view_path</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__getitem__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)[</span><span class=\"n\">index</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">):</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_func_path</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;ResolverMatch(func=</span><span class=\"si\">%s</span><span class=\"s2\">, args=</span><span class=\"si\">%r</span><span class=\"s2\">, kwargs=</span><span class=\"si\">%r</span><span class=\"s2\">, url_name=</span><span class=\"si\">%r</span><span class=\"s2\">, &quot;</span>\n            <span class=\"s2\">&quot;app_names=</span><span class=\"si\">%r</span><span class=\"s2\">, namespaces=</span><span class=\"si\">%r</span><span class=\"s2\">, route=</span><span class=\"si\">%r%s%s</span><span class=\"s2\">)&quot;</span>\n            <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">func</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url_name</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_names</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespaces</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">,</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;, captured_kwargs=</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">captured_kwargs</span><span class=\"si\">!r}</span><span class=\"s2\">&quot;</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">captured_kwargs</span>\n                <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n                <span class=\"sa\">f</span><span class=\"s2\">&quot;, extra_kwargs=</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra_kwargs</span><span class=\"si\">!r}</span><span class=\"s2\">&quot;</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extra_kwargs</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__reduce_ex__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">protocol</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">PicklingError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Cannot pickle </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"si\">}</span><span class=\"s2\">.&quot;</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_resolver</span><span class=\"p\">(</span><span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">urlconf</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">urlconf</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">ROOT_URLCONF</span>\n    <span class=\"k\">return</span> <span class=\"n\">_get_cached_resolver</span><span class=\"p\">(</span><span class=\"n\">urlconf</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">_get_cached_resolver</span><span class=\"p\">(</span><span class=\"n\">urlconf</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">URLResolver</span><span class=\"p\">(</span><span class=\"n\">RegexPattern</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^/&quot;</span><span class=\"p\">),</span> <span class=\"n\">urlconf</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_ns_resolver</span><span class=\"p\">(</span><span class=\"n\">ns_pattern</span><span class=\"p\">,</span> <span class=\"n\">resolver</span><span class=\"p\">,</span> <span class=\"n\">converters</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Build a namespaced resolver for the given parent URLconf pattern.</span>\n    <span class=\"c1\"># This makes it possible to have captured parameters in the parent</span>\n    <span class=\"c1\"># URLconf pattern.</span>\n    <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">RegexPattern</span><span class=\"p\">(</span><span class=\"n\">ns_pattern</span><span class=\"p\">)</span>\n    <span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">converters</span><span class=\"p\">)</span>\n    <span class=\"n\">ns_resolver</span> <span class=\"o\">=</span> <span class=\"n\">URLResolver</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">resolver</span><span class=\"o\">.</span><span class=\"n\">url_patterns</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">URLResolver</span><span class=\"p\">(</span><span class=\"n\">RegexPattern</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^/&quot;</span><span class=\"p\">),</span> <span class=\"p\">[</span><span class=\"n\">ns_resolver</span><span class=\"p\">])</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LocaleRegexDescriptor</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attr</span> <span class=\"o\">=</span> <span class=\"n\">attr</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__get__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"bp\">cls</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a compiled regular expression based on the active language.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">instance</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span>\n        <span class=\"c1\"># As a performance optimization, if the given regex string is a regular</span>\n        <span class=\"c1\"># string (not a lazily-translated string proxy), compile it once and</span>\n        <span class=\"c1\"># avoid per-language compilation.</span>\n        <span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">instance</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">attr</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"s2\">&quot;regex&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_compile</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">[</span><span class=\"s2\">&quot;regex&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">language_code</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">language_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_regex_dict</span><span class=\"p\">:</span>\n            <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_regex_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_compile</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">_regex_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CheckURLMixin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Format the URL pattern for display in warning messages.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">description</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot; [name=&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;]&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">description</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_pattern_startswith_slash</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check that the pattern does not begin with a forward slash.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">regex_pattern</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">pattern</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">APPEND_SLASH</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Skip check as it can be useful to start a URL pattern with a slash</span>\n            <span class=\"c1\"># when APPEND_SLASH=False.</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"n\">regex_pattern</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">((</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;^/&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;^</span><span class=\"se\">\\\\</span><span class=\"s2\">/&quot;</span><span class=\"p\">))</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">regex_pattern</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;/&quot;</span>\n        <span class=\"p\">):</span>\n            <span class=\"n\">warning</span> <span class=\"o\">=</span> <span class=\"ne\">Warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Your URL pattern </span><span class=\"si\">{}</span><span class=\"s2\"> has a route beginning with a &#39;/&#39;. Remove this &quot;</span>\n                <span class=\"s2\">&quot;slash as it is unnecessary. If this pattern is targeted in an &quot;</span>\n                <span class=\"s2\">&quot;include(), ensure the include() pattern has a trailing &#39;/&#39;.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">()</span>\n                <span class=\"p\">),</span>\n                <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;urls.W002&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">warning</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RegexPattern</span><span class=\"p\">(</span><span class=\"n\">CheckURLMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">LocaleRegexDescriptor</span><span class=\"p\">(</span><span class=\"s2\">&quot;_regex&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">regex</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">is_endpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_regex</span> <span class=\"o\">=</span> <span class=\"n\">regex</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_regex_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">is_endpoint</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">fullmatch</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_endpoint</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If there are any named groups, use those as kwargs, ignoring</span>\n            <span class=\"c1\"># non-named groups. Otherwise, pass all non-named arguments as</span>\n            <span class=\"c1\"># positional arguments.</span>\n            <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">kwargs</span> <span class=\"k\">else</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>\n            <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"n\">v</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"p\">:],</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_pattern_startswith_slash</span><span class=\"p\">())</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_endpoint</span><span class=\"p\">:</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_include_trailing_dollar</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">warnings</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_include_trailing_dollar</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">regex_pattern</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">pattern</span>\n        <span class=\"k\">if</span> <span class=\"n\">regex_pattern</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">regex_pattern</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;\\$&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span>\n                <span class=\"ne\">Warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Your URL pattern </span><span class=\"si\">{}</span><span class=\"s2\"> uses include with a route ending with a &#39;$&#39;. &quot;</span>\n                    <span class=\"s2\">&quot;Remove the dollar from the route to avoid problems including &quot;</span>\n                    <span class=\"s2\">&quot;URLs.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">()),</span>\n                    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;urls.W001&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_compile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">regex</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Compile and return the given regular expression.&quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s1\">&#39;&quot;</span><span class=\"si\">%s</span><span class=\"s1\">&quot; is not a valid regular expression: </span><span class=\"si\">%s</span><span class=\"s1\">&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">regex</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_regex</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">_PATH_PARAMETER_COMPONENT_RE</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;&lt;(?:(?P&lt;converter&gt;[^&gt;:]+):)?(?P&lt;parameter&gt;[^&gt;]+)&gt;&quot;</span>\n<span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_route_to_regex</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"n\">is_endpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert a path pattern into a regular expression. Return the regular</span>\n<span class=\"sd\">    expression and a dictionary mapping the capture names to the converters.</span>\n<span class=\"sd\">    For example, &#39;foo/&lt;int:pk&gt;&#39; returns &#39;^foo\\\\/(?P&lt;pk&gt;[0-9]+)&#39;</span>\n<span class=\"sd\">    and {&#39;pk&#39;: &lt;django.urls.converters.IntConverter&gt;}.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">original_route</span> <span class=\"o\">=</span> <span class=\"n\">route</span>\n    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;^&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">_PATH_PARAMETER_COMPONENT_RE</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">))</span>\n            <span class=\"k\">break</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">group</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">isdisjoint</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"o\">.</span><span class=\"n\">whitespace</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;URL route &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; cannot contain whitespace in angle brackets &quot;</span>\n                <span class=\"s2\">&quot;&lt;\u2026&gt;.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">original_route</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">[:</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()]))</span>\n        <span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">route</span><span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"p\">:]</span>\n        <span class=\"n\">parameter</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;parameter&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">parameter</span><span class=\"o\">.</span><span class=\"n\">isidentifier</span><span class=\"p\">():</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;URL route &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; uses parameter name </span><span class=\"si\">%r</span><span class=\"s2\"> which isn&#39;t a valid &quot;</span>\n                <span class=\"s2\">&quot;Python identifier.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">original_route</span><span class=\"p\">,</span> <span class=\"n\">parameter</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">raw_converter</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;converter&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">raw_converter</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># If a converter isn&#39;t specified, the default is `str`.</span>\n            <span class=\"n\">raw_converter</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;str&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">converter</span> <span class=\"o\">=</span> <span class=\"n\">get_converter</span><span class=\"p\">(</span><span class=\"n\">raw_converter</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;URL route </span><span class=\"si\">%r</span><span class=\"s2\"> uses invalid converter </span><span class=\"si\">%r</span><span class=\"s2\">.&quot;</span>\n                <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">original_route</span><span class=\"p\">,</span> <span class=\"n\">raw_converter</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n        <span class=\"n\">converters</span><span class=\"p\">[</span><span class=\"n\">parameter</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">converter</span>\n        <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s2\">&quot;(?P&lt;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">parameter</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;&gt;&quot;</span> <span class=\"o\">+</span> <span class=\"n\">converter</span><span class=\"o\">.</span><span class=\"n\">regex</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">is_endpoint</span><span class=\"p\">:</span>\n        <span class=\"n\">parts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;\\Z&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parts</span><span class=\"p\">),</span> <span class=\"n\">converters</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RoutePattern</span><span class=\"p\">(</span><span class=\"n\">CheckURLMixin</span><span class=\"p\">):</span>\n    <span class=\"n\">regex</span> <span class=\"o\">=</span> <span class=\"n\">LocaleRegexDescriptor</span><span class=\"p\">(</span><span class=\"s2\">&quot;_route&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">is_endpoint</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_route</span> <span class=\"o\">=</span> <span class=\"n\">route</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_regex_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">is_endpoint</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"n\">_route_to_regex</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">),</span> <span class=\"n\">is_endpoint</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"c1\"># RoutePattern doesn&#39;t allow non-named groups so args are ignored.</span>\n            <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                <span class=\"n\">converter</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">converter</span><span class=\"o\">.</span><span class=\"n\">to_python</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"kc\">None</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">[</span><span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span> <span class=\"p\">:],</span> <span class=\"p\">(),</span> <span class=\"n\">kwargs</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_pattern_startswith_slash</span><span class=\"p\">()</span>\n        <span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_route</span>\n        <span class=\"k\">if</span> <span class=\"s2\">&quot;(?P&lt;&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">route</span> <span class=\"ow\">or</span> <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;^&quot;</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">route</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                <span class=\"ne\">Warning</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Your URL pattern </span><span class=\"si\">{}</span><span class=\"s2\"> has a route that contains &#39;(?P&lt;&#39;, begins &quot;</span>\n                    <span class=\"s2\">&quot;with a &#39;^&#39;, or ends with a &#39;$&#39;. This was likely an oversight &quot;</span>\n                    <span class=\"s2\">&quot;when migrating to django.urls.path().&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">()),</span>\n                    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;2_0.W001&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">warnings</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_compile</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">route</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">_route_to_regex</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_endpoint</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_route</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LocalePrefixPattern</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">prefix_default_language</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix_default_language</span> <span class=\"o\">=</span> <span class=\"n\">prefix_default_language</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">converters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">regex</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This is only used by reverse() and cached in _reverse_dict.</span>\n        <span class=\"k\">return</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">language_prefix</span><span class=\"p\">))</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">language_prefix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">language_code</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span> <span class=\"ow\">or</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE_CODE</span>\n        <span class=\"k\">if</span> <span class=\"n\">language_code</span> <span class=\"o\">==</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">LANGUAGE_CODE</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prefix_default_language</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">/&quot;</span> <span class=\"o\">%</span> <span class=\"n\">language_code</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">match</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">language_prefix</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">language_prefix</span>\n        <span class=\"k\">if</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">language_prefix</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"n\">language_prefix</span><span class=\"p\">),</span> <span class=\"p\">(),</span> <span class=\"p\">{}</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">describe</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39;&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">language_prefix</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">URLPattern</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">default_args</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">pattern</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">callback</span>  <span class=\"c1\"># the view</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_args</span> <span class=\"o\">=</span> <span class=\"n\">default_args</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_pattern_name</span><span class=\"p\">()</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">())</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_callback</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">warnings</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_pattern_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Check that the pattern name does not contain a colon.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;:&quot;</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"n\">warning</span> <span class=\"o\">=</span> <span class=\"ne\">Warning</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Your URL pattern </span><span class=\"si\">{}</span><span class=\"s2\"> has a name including a &#39;:&#39;. Remove the colon, to &quot;</span>\n                <span class=\"s2\">&quot;avoid ambiguous namespace references.&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">()),</span>\n                <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;urls.W003&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">warning</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callback</span>\n        <span class=\"k\">if</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">isclass</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"n\">View</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span>\n                <span class=\"n\">Error</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Your URL pattern </span><span class=\"si\">%s</span><span class=\"s2\"> has an invalid view, pass </span><span class=\"si\">%s</span><span class=\"s2\">.as_view() &quot;</span>\n                    <span class=\"s2\">&quot;instead of </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span>\n                    <span class=\"o\">%</span> <span class=\"p\">(</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(),</span>\n                        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n                    <span class=\"p\">),</span>\n                    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;urls.E009&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">new_path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">captured_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">match</span>\n            <span class=\"c1\"># Pass any default args as **kwargs.</span>\n            <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">captured_kwargs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_args</span><span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">ResolverMatch</span><span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">,</span>\n                <span class=\"n\">args</span><span class=\"p\">,</span>\n                <span class=\"n\">kwargs</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                <span class=\"n\">route</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">),</span>\n                <span class=\"n\">captured_kwargs</span><span class=\"o\">=</span><span class=\"n\">captured_kwargs</span><span class=\"p\">,</span>\n                <span class=\"n\">extra_kwargs</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_args</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">lookup_str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        A string that identifies the view (e.g. &#39;path.to.view_function&#39; or</span>\n<span class=\"sd\">        &#39;path.to.ClassBasedView&#39;).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callback</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"n\">functools</span><span class=\"o\">.</span><span class=\"n\">partial</span><span class=\"p\">):</span>\n            <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"n\">func</span>\n        <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"s2\">&quot;view_class&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"n\">view_class</span>\n        <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__name__&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">return</span> <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">callback</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">URLResolver</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">urlconf_name</span><span class=\"p\">,</span> <span class=\"n\">default_kwargs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">app_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span> <span class=\"o\">=</span> <span class=\"n\">pattern</span>\n        <span class=\"c1\"># urlconf_name is the dotted Python path to the module defining</span>\n        <span class=\"c1\"># urlpatterns. It may also be an object with an urlpatterns attribute</span>\n        <span class=\"c1\"># or urlpatterns itself.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span> <span class=\"o\">=</span> <span class=\"n\">urlconf_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_kwargs</span> <span class=\"o\">=</span> <span class=\"n\">default_kwargs</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespace</span> <span class=\"o\">=</span> <span class=\"n\">namespace</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_name</span> <span class=\"o\">=</span> <span class=\"n\">app_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reverse_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_namespace_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app_dict</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"c1\"># set of dotted paths to all functions and classes that are used in</span>\n        <span class=\"c1\"># urlpatterns</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_callback_strs</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populated</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local</span> <span class=\"o\">=</span> <span class=\"n\">Local</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Don&#39;t bother to output the whole list, it can be huge</span>\n            <span class=\"n\">urlconf_repr</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\"> list&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">urlconf_repr</span> <span class=\"o\">=</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%s</span><span class=\"s2\"> (</span><span class=\"si\">%s</span><span class=\"s2\">:</span><span class=\"si\">%s</span><span class=\"s2\">) </span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"n\">urlconf_repr</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url_patterns</span><span class=\"p\">:</span>\n            <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">check_resolver</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">))</span>\n        <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_custom_error_handlers</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"n\">messages</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_custom_error_handlers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">messages</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># All handlers take (request, exception) arguments except handler500</span>\n        <span class=\"c1\"># which takes (request).</span>\n        <span class=\"k\">for</span> <span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">num_parameters</span> <span class=\"ow\">in</span> <span class=\"p\">[(</span><span class=\"mi\">400</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">403</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">404</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)]:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolve_error_handler</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ImportError</span><span class=\"p\">,</span> <span class=\"n\">ViewDoesNotExist</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;handler</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">status_code</span><span class=\"p\">)</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The custom handler</span><span class=\"si\">{status_code}</span><span class=\"s2\"> view &#39;</span><span class=\"si\">{path}</span><span class=\"s2\">&#39; could not be &quot;</span>\n                    <span class=\"s2\">&quot;imported.&quot;</span>\n                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status_code</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"p\">)</span>\n                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">hint</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">),</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;urls.E008&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">continue</span>\n            <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"n\">num_parameters</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n                <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;The custom handler</span><span class=\"si\">{status_code}</span><span class=\"s2\"> view &#39;</span><span class=\"si\">{path}</span><span class=\"s2\">&#39; does not &quot;</span>\n                    <span class=\"s2\">&quot;take the correct number of arguments (</span><span class=\"si\">{args}</span><span class=\"s2\">).&quot;</span>\n                <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                    <span class=\"n\">status_code</span><span class=\"o\">=</span><span class=\"n\">status_code</span><span class=\"p\">,</span>\n                    <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"vm\">__module__</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"o\">+</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n                    <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"s2\">&quot;request, exception&quot;</span> <span class=\"k\">if</span> <span class=\"n\">num_parameters</span> <span class=\"o\">==</span> <span class=\"mi\">2</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;request&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n                <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;urls.E007&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">messages</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_populate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Short-circuit if called recursively in this thread to prevent</span>\n        <span class=\"c1\"># infinite recursion. Concurrent threads may call this at the same</span>\n        <span class=\"c1\"># time and will need to continue, so set &#39;populating&#39; on a</span>\n        <span class=\"c1\"># thread-local variable.</span>\n        <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"p\">,</span> <span class=\"s2\">&quot;populating&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">populating</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">lookups</span> <span class=\"o\">=</span> <span class=\"n\">MultiValueDict</span><span class=\"p\">()</span>\n            <span class=\"n\">namespaces</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"n\">apps</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n            <span class=\"n\">language_code</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span>\n            <span class=\"k\">for</span> <span class=\"n\">url_pattern</span> <span class=\"ow\">in</span> <span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url_patterns</span><span class=\"p\">):</span>\n                <span class=\"n\">p_pattern</span> <span class=\"o\">=</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">pattern</span>\n                <span class=\"n\">p_pattern</span> <span class=\"o\">=</span> <span class=\"n\">p_pattern</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">&quot;^&quot;</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"p\">,</span> <span class=\"n\">URLPattern</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_callback_strs</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">lookup_str</span><span class=\"p\">)</span>\n                    <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">regex</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n                    <span class=\"n\">lookups</span><span class=\"o\">.</span><span class=\"n\">appendlist</span><span class=\"p\">(</span>\n                        <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">callback</span><span class=\"p\">,</span>\n                        <span class=\"p\">(</span>\n                            <span class=\"n\">bits</span><span class=\"p\">,</span>\n                            <span class=\"n\">p_pattern</span><span class=\"p\">,</span>\n                            <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">default_args</span><span class=\"p\">,</span>\n                            <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"p\">,</span>\n                        <span class=\"p\">),</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"k\">if</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">lookups</span><span class=\"o\">.</span><span class=\"n\">appendlist</span><span class=\"p\">(</span>\n                            <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n                            <span class=\"p\">(</span>\n                                <span class=\"n\">bits</span><span class=\"p\">,</span>\n                                <span class=\"n\">p_pattern</span><span class=\"p\">,</span>\n                                <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">default_args</span><span class=\"p\">,</span>\n                                <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"p\">,</span>\n                            <span class=\"p\">),</span>\n                        <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>  <span class=\"c1\"># url_pattern is a URLResolver.</span>\n                    <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">_populate</span><span class=\"p\">()</span>\n                    <span class=\"k\">if</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">app_name</span><span class=\"p\">:</span>\n                        <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">app_name</span><span class=\"p\">,</span> <span class=\"p\">[])</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n                            <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">namespace</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"n\">namespaces</span><span class=\"p\">[</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p_pattern</span><span class=\"p\">,</span> <span class=\"n\">url_pattern</span><span class=\"p\">)</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">for</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">reverse_dict</span><span class=\"p\">:</span>\n                            <span class=\"k\">for</span> <span class=\"p\">(</span>\n                                <span class=\"n\">matches</span><span class=\"p\">,</span>\n                                <span class=\"n\">pat</span><span class=\"p\">,</span>\n                                <span class=\"n\">defaults</span><span class=\"p\">,</span>\n                                <span class=\"n\">converters</span><span class=\"p\">,</span>\n                            <span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">reverse_dict</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n                                <span class=\"n\">new_matches</span> <span class=\"o\">=</span> <span class=\"n\">normalize</span><span class=\"p\">(</span><span class=\"n\">p_pattern</span> <span class=\"o\">+</span> <span class=\"n\">pat</span><span class=\"p\">)</span>\n                                <span class=\"n\">lookups</span><span class=\"o\">.</span><span class=\"n\">appendlist</span><span class=\"p\">(</span>\n                                    <span class=\"n\">name</span><span class=\"p\">,</span>\n                                    <span class=\"p\">(</span>\n                                        <span class=\"n\">new_matches</span><span class=\"p\">,</span>\n                                        <span class=\"n\">p_pattern</span> <span class=\"o\">+</span> <span class=\"n\">pat</span><span class=\"p\">,</span>\n                                        <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">defaults</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">default_kwargs</span><span class=\"p\">},</span>\n                                        <span class=\"p\">{</span>\n                                            <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"p\">,</span>\n                                            <span class=\"o\">**</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"p\">,</span>\n                                            <span class=\"o\">**</span><span class=\"n\">converters</span><span class=\"p\">,</span>\n                                        <span class=\"p\">},</span>\n                                    <span class=\"p\">),</span>\n                                <span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">namespace</span><span class=\"p\">,</span> <span class=\"p\">(</span>\n                            <span class=\"n\">prefix</span><span class=\"p\">,</span>\n                            <span class=\"n\">sub_pattern</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">namespace_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                            <span class=\"n\">current_converters</span> <span class=\"o\">=</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span>\n                            <span class=\"n\">sub_pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">converters</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">current_converters</span><span class=\"p\">)</span>\n                            <span class=\"n\">namespaces</span><span class=\"p\">[</span><span class=\"n\">namespace</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">p_pattern</span> <span class=\"o\">+</span> <span class=\"n\">prefix</span><span class=\"p\">,</span> <span class=\"n\">sub_pattern</span><span class=\"p\">)</span>\n                        <span class=\"k\">for</span> <span class=\"n\">app_name</span><span class=\"p\">,</span> <span class=\"n\">namespace_list</span> <span class=\"ow\">in</span> <span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">app_dict</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                            <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">setdefault</span><span class=\"p\">(</span><span class=\"n\">app_name</span><span class=\"p\">,</span> <span class=\"p\">[])</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">namespace_list</span><span class=\"p\">)</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_callback_strs</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">url_pattern</span><span class=\"o\">.</span><span class=\"n\">_callback_strs</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_namespace_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">namespaces</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">apps</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reverse_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">lookups</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populated</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">populating</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">reverse_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">language_code</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">language_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reverse_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reverse_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">namespace_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">language_code</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">language_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_namespace_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_namespace_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">app_dict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">language_code</span> <span class=\"o\">=</span> <span class=\"n\">get_language</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">language_code</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app_dict</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_app_dict</span><span class=\"p\">[</span><span class=\"n\">language_code</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_extend_tried</span><span class=\"p\">(</span><span class=\"n\">tried</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">sub_tried</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">sub_tried</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">tried</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">pattern</span><span class=\"p\">])</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">tried</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">([</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">t</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">sub_tried</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@staticmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_join_route</span><span class=\"p\">(</span><span class=\"n\">route1</span><span class=\"p\">,</span> <span class=\"n\">route2</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Join two routes, without the starting ^ in the second route.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">route1</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">route2</span>\n        <span class=\"n\">route2</span> <span class=\"o\">=</span> <span class=\"n\">route2</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">&quot;^&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">route1</span> <span class=\"o\">+</span> <span class=\"n\">route2</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_is_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populated</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_callback_strs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>  <span class=\"c1\"># path may be a reverse_lazy object</span>\n        <span class=\"n\">tried</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n            <span class=\"n\">new_path</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"n\">match</span>\n            <span class=\"k\">for</span> <span class=\"n\">pattern</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">url_patterns</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">sub_match</span> <span class=\"o\">=</span> <span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">new_path</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"n\">Resolver404</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extend_tried</span><span class=\"p\">(</span><span class=\"n\">tried</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;tried&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sub_match</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># Merge captured arguments in match with submatch</span>\n                        <span class=\"n\">sub_match_dict</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_kwargs</span><span class=\"p\">}</span>\n                        <span class=\"c1\"># Update the sub_match_dict with the kwargs from the sub_match.</span>\n                        <span class=\"n\">sub_match_dict</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n                        <span class=\"c1\"># If there are *any* named groups, ignore all non-named groups.</span>\n                        <span class=\"c1\"># Otherwise, pass all non-named arguments as positional</span>\n                        <span class=\"c1\"># arguments.</span>\n                        <span class=\"n\">sub_match_args</span> <span class=\"o\">=</span> <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">args</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">sub_match_dict</span><span class=\"p\">:</span>\n                            <span class=\"n\">sub_match_args</span> <span class=\"o\">=</span> <span class=\"n\">args</span> <span class=\"o\">+</span> <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">args</span>\n                        <span class=\"n\">current_route</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                            <span class=\"s2\">&quot;&quot;</span>\n                            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">URLPattern</span><span class=\"p\">)</span>\n                            <span class=\"k\">else</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">.</span><span class=\"n\">pattern</span><span class=\"p\">)</span>\n                        <span class=\"p\">)</span>\n                        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_extend_tried</span><span class=\"p\">(</span><span class=\"n\">tried</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">tried</span><span class=\"p\">)</span>\n                        <span class=\"k\">return</span> <span class=\"n\">ResolverMatch</span><span class=\"p\">(</span>\n                            <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">,</span>\n                            <span class=\"n\">sub_match_args</span><span class=\"p\">,</span>\n                            <span class=\"n\">sub_match_dict</span><span class=\"p\">,</span>\n                            <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">url_name</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app_name</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">app_names</span><span class=\"p\">,</span>\n                            <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">namespace</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">namespaces</span><span class=\"p\">,</span>\n                            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_join_route</span><span class=\"p\">(</span><span class=\"n\">current_route</span><span class=\"p\">,</span> <span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">),</span>\n                            <span class=\"n\">tried</span><span class=\"p\">,</span>\n                            <span class=\"n\">captured_kwargs</span><span class=\"o\">=</span><span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">captured_kwargs</span><span class=\"p\">,</span>\n                            <span class=\"n\">extra_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                                <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">default_kwargs</span><span class=\"p\">,</span>\n                                <span class=\"o\">**</span><span class=\"n\">sub_match</span><span class=\"o\">.</span><span class=\"n\">extra_kwargs</span><span class=\"p\">,</span>\n                            <span class=\"p\">},</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"n\">tried</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"n\">pattern</span><span class=\"p\">])</span>\n            <span class=\"k\">raise</span> <span class=\"n\">Resolver404</span><span class=\"p\">({</span><span class=\"s2\">&quot;tried&quot;</span><span class=\"p\">:</span> <span class=\"n\">tried</span><span class=\"p\">,</span> <span class=\"s2\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"n\">new_path</span><span class=\"p\">})</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Resolver404</span><span class=\"p\">({</span><span class=\"s2\">&quot;path&quot;</span><span class=\"p\">:</span> <span class=\"n\">path</span><span class=\"p\">})</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">urlconf_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span>\n\n    <span class=\"nd\">@cached_property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">url_patterns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># urlconf_module might be a valid set of patterns, so we default to it</span>\n        <span class=\"n\">patterns</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;urlpatterns&quot;</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_module</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">patterns</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The included URLconf &#39;</span><span class=\"si\">{name}</span><span class=\"s2\">&#39; does not appear to have &quot;</span>\n                <span class=\"s2\">&quot;any patterns in it. If you see the &#39;urlpatterns&#39; variable &quot;</span>\n                <span class=\"s2\">&quot;with valid patterns in the file then the issue is probably &quot;</span>\n                <span class=\"s2\">&quot;caused by a circular import.&quot;</span>\n            <span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_name</span><span class=\"p\">))</span> <span class=\"kn\">from</span> <span class=\"nn\">e</span>\n        <span class=\"k\">return</span> <span class=\"n\">patterns</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_error_handler</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">view_type</span><span class=\"p\">):</span>\n        <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">urlconf_module</span><span class=\"p\">,</span> <span class=\"s2\">&quot;handler</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">view_type</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">callback</span><span class=\"p\">:</span>\n            <span class=\"c1\"># No handler specified in file; use lazy import, since</span>\n            <span class=\"c1\"># django.conf.urls imports this file.</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">urls</span>\n\n            <span class=\"n\">callback</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">urls</span><span class=\"p\">,</span> <span class=\"s2\">&quot;handler</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">view_type</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_callable</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reverse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lookup_view</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_reverse_with_prefix</span><span class=\"p\">(</span><span class=\"n\">lookup_view</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_reverse_with_prefix</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lookup_view</span><span class=\"p\">,</span> <span class=\"n\">_prefix</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">args</span> <span class=\"ow\">and</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Don&#39;t mix *args and **kwargs in call to reverse()!&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populated</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_populate</span><span class=\"p\">()</span>\n\n        <span class=\"n\">possibilities</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reverse_dict</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"n\">lookup_view</span><span class=\"p\">)</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">possibility</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">,</span> <span class=\"n\">converters</span> <span class=\"ow\">in</span> <span class=\"n\">possibilities</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"ow\">in</span> <span class=\"n\">possibility</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">):</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"n\">candidate_subs</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">kwargs</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">symmetric_difference</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">difference</span><span class=\"p\">(</span><span class=\"n\">defaults</span><span class=\"p\">):</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">defaults</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                        <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">params</span><span class=\"p\">:</span>\n                            <span class=\"k\">continue</span>\n                        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"o\">!=</span> <span class=\"n\">v</span><span class=\"p\">:</span>\n                            <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                            <span class=\"k\">break</span>\n                    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n                        <span class=\"k\">continue</span>\n                    <span class=\"n\">candidate_subs</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span>\n                <span class=\"c1\"># Convert the candidate subs to text using Converter.to_url().</span>\n                <span class=\"n\">text_candidate_subs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n                <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">candidate_subs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n                    <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"ow\">in</span> <span class=\"n\">converters</span><span class=\"p\">:</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">text_candidate_subs</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">converters</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">to_url</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n                        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                            <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                            <span class=\"k\">break</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">text_candidate_subs</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"c1\"># WSGI provides decoded URLs, without %xx escapes, and the URL</span>\n                <span class=\"c1\"># resolver operates on such URLs. First substitute arguments</span>\n                <span class=\"c1\"># without quoting to build a decoded URL and look for a match.</span>\n                <span class=\"c1\"># Then, if we have a match, redo the substitution with quoted</span>\n                <span class=\"c1\"># arguments in order to return a properly encoded URL.</span>\n                <span class=\"n\">candidate_pat</span> <span class=\"o\">=</span> <span class=\"n\">_prefix</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">%%</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">result</span>\n                <span class=\"k\">if</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;^</span><span class=\"si\">%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">_prefix</span><span class=\"p\">),</span> <span class=\"n\">pattern</span><span class=\"p\">),</span>\n                    <span class=\"n\">candidate_pat</span> <span class=\"o\">%</span> <span class=\"n\">text_candidate_subs</span><span class=\"p\">,</span>\n                <span class=\"p\">):</span>\n                    <span class=\"c1\"># safe characters from `pchar` definition of RFC 3986</span>\n                    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">quote</span><span class=\"p\">(</span>\n                        <span class=\"n\">candidate_pat</span> <span class=\"o\">%</span> <span class=\"n\">text_candidate_subs</span><span class=\"p\">,</span>\n                        <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"n\">RFC3986_SUBDELIMS</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;/~:@&quot;</span><span class=\"p\">,</span>\n                    <span class=\"p\">)</span>\n                    <span class=\"c1\"># Don&#39;t allow construction of scheme relative urls.</span>\n                    <span class=\"k\">return</span> <span class=\"n\">escape_leading_slashes</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n        <span class=\"c1\"># lookup_view can be URL name or callable, but callables are not</span>\n        <span class=\"c1\"># friendly in error messages.</span>\n        <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">lookup_view</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__module__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">lookup_view</span><span class=\"p\">,</span> <span class=\"s2\">&quot;__name__&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">m</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">n</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">lookup_view_s</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lookup_view_s</span> <span class=\"o\">=</span> <span class=\"n\">lookup_view</span>\n\n        <span class=\"n\">patterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">pattern</span> <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">pattern</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"ow\">in</span> <span class=\"n\">possibilities</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">patterns</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n                <span class=\"n\">arg_msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;arguments &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">,)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">kwargs</span><span class=\"p\">:</span>\n                <span class=\"n\">arg_msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;keyword arguments &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">kwargs</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">arg_msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;no arguments&quot;</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Reverse for &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; with </span><span class=\"si\">%s</span><span class=\"s2\"> not found. </span><span class=\"si\">%d</span><span class=\"s2\"> pattern(s) tried: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"n\">lookup_view_s</span><span class=\"p\">,</span>\n                <span class=\"n\">arg_msg</span><span class=\"p\">,</span>\n                <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">patterns</span><span class=\"p\">),</span>\n                <span class=\"n\">patterns</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Reverse for &#39;</span><span class=\"si\">%(view)s</span><span class=\"s2\">&#39; not found. &#39;</span><span class=\"si\">%(view)s</span><span class=\"s2\">&#39; is not &quot;</span>\n                <span class=\"s2\">&quot;a valid view function or pattern name.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span><span class=\"s2\">&quot;view&quot;</span><span class=\"p\">:</span> <span class=\"n\">lookup_view_s</span><span class=\"p\">}</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"n\">NoReverseMatch</span><span class=\"p\">(</span><span class=\"n\">msg</span><span class=\"p\">)</span>\n</pre></div>", "current_page_name": "_modules/django/urls/resolvers", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
