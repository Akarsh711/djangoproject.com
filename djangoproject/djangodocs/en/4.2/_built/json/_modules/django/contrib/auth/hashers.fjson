{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}, {"link": "../", "title": "django.contrib.auth"}], "title": "django.contrib.auth.hashers", "body": "<h1>Source code for django.contrib.auth.hashers</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">import</span> <span class=\"nn\">base64</span>\n<span class=\"kn\">import</span> <span class=\"nn\">binascii</span>\n<span class=\"kn\">import</span> <span class=\"nn\">functools</span>\n<span class=\"kn\">import</span> <span class=\"nn\">hashlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">importlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ImproperlyConfigured</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.signals</span> <span class=\"kn\">import</span> <span class=\"n\">setting_changed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.dispatch</span> <span class=\"kn\">import</span> <span class=\"n\">receiver</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.crypto</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">RANDOM_STRING_CHARS</span><span class=\"p\">,</span>\n    <span class=\"n\">constant_time_compare</span><span class=\"p\">,</span>\n    <span class=\"n\">get_random_string</span><span class=\"p\">,</span>\n    <span class=\"n\">pbkdf2</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjango51Warning</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.module_loading</span> <span class=\"kn\">import</span> <span class=\"n\">import_string</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext_noop</span> <span class=\"k\">as</span> <span class=\"n\">_</span>\n\n<span class=\"n\">UNUSABLE_PASSWORD_PREFIX</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;!&quot;</span>  <span class=\"c1\"># This will never be a valid encoded hash</span>\n<span class=\"n\">UNUSABLE_PASSWORD_SUFFIX_LENGTH</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"mi\">40</span>  <span class=\"c1\"># number of random chars to add after UNUSABLE_PASSWORD_PREFIX</span>\n<span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"is_password_usable\"><a class=\"viewcode-back\" href=\"../../../../../topics/auth/passwords/#django.contrib.auth.hashers.is_password_usable\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">is_password_usable</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return True if this password wasn&#39;t generated by</span>\n<span class=\"sd\">    User.set_unusable_password(), i.e. make_password(None).</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">encoded</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">UNUSABLE_PASSWORD_PREFIX</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">verify_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"o\">=</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return two booleans. The first is whether the raw password matches the</span>\n<span class=\"sd\">    three part encoded digest, and the second whether to regenerate the</span>\n<span class=\"sd\">    password.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">is_password_usable</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">preferred</span> <span class=\"o\">=</span> <span class=\"n\">get_hasher</span><span class=\"p\">(</span><span class=\"n\">preferred</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">identify_hasher</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># encoded is gibberish or uses a hasher that&#39;s no longer installed.</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"kc\">False</span>\n\n    <span class=\"n\">hasher_changed</span> <span class=\"o\">=</span> <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">algorithm</span> <span class=\"o\">!=</span> <span class=\"n\">preferred</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n    <span class=\"n\">must_update</span> <span class=\"o\">=</span> <span class=\"n\">hasher_changed</span> <span class=\"ow\">or</span> <span class=\"n\">preferred</span><span class=\"o\">.</span><span class=\"n\">must_update</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n    <span class=\"n\">is_correct</span> <span class=\"o\">=</span> <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># If the hasher didn&#39;t change (we don&#39;t protect against enumeration if it</span>\n    <span class=\"c1\"># does) and the password should get updated, try to close the timing gap</span>\n    <span class=\"c1\"># between the work factor of the current encoded password and the default</span>\n    <span class=\"c1\"># work factor.</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">is_correct</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">hasher_changed</span> <span class=\"ow\">and</span> <span class=\"n\">must_update</span><span class=\"p\">:</span>\n        <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">harden_runtime</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">is_correct</span><span class=\"p\">,</span> <span class=\"n\">must_update</span>\n\n\n<div class=\"viewcode-block\" id=\"check_password\"><a class=\"viewcode-back\" href=\"../../../../../topics/auth/passwords/#django.contrib.auth.hashers.check_password\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">check_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">setter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"o\">=</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return a boolean of whether the raw password matches the three part encoded</span>\n<span class=\"sd\">    digest.</span>\n\n<span class=\"sd\">    If setter is specified, it&#39;ll be called when you need to regenerate the</span>\n<span class=\"sd\">    password.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">is_correct</span><span class=\"p\">,</span> <span class=\"n\">must_update</span> <span class=\"o\">=</span> <span class=\"n\">verify_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"o\">=</span><span class=\"n\">preferred</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">setter</span> <span class=\"ow\">and</span> <span class=\"n\">is_correct</span> <span class=\"ow\">and</span> <span class=\"n\">must_update</span><span class=\"p\">:</span>\n        <span class=\"n\">setter</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">is_correct</span></div>\n\n\n<div class=\"viewcode-block\" id=\"acheck_password\"><a class=\"viewcode-back\" href=\"../../../../../topics/auth/passwords/#django.contrib.auth.hashers.acheck_password\">[docs]</a><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">acheck_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">setter</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"o\">=</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;See check_password().&quot;&quot;&quot;</span>\n    <span class=\"n\">is_correct</span><span class=\"p\">,</span> <span class=\"n\">must_update</span> <span class=\"o\">=</span> <span class=\"n\">verify_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">preferred</span><span class=\"o\">=</span><span class=\"n\">preferred</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">setter</span> <span class=\"ow\">and</span> <span class=\"n\">is_correct</span> <span class=\"ow\">and</span> <span class=\"n\">must_update</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">setter</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">is_correct</span></div>\n\n\n<div class=\"viewcode-block\" id=\"make_password\"><a class=\"viewcode-back\" href=\"../../../../../topics/auth/passwords/#django.contrib.auth.hashers.make_password\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">make_password</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">hasher</span><span class=\"o\">=</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Turn a plain-text password into a hash for database storage</span>\n\n<span class=\"sd\">    Same as encode() but generate a new random salt. If password is None then</span>\n<span class=\"sd\">    return a concatenation of UNUSABLE_PASSWORD_PREFIX and a random string,</span>\n<span class=\"sd\">    which disallows logins. Additional random string reduces chances of gaining</span>\n<span class=\"sd\">    access to staff or superuser accounts. See ticket #20079 for more info.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">UNUSABLE_PASSWORD_PREFIX</span> <span class=\"o\">+</span> <span class=\"n\">get_random_string</span><span class=\"p\">(</span>\n            <span class=\"n\">UNUSABLE_PASSWORD_SUFFIX_LENGTH</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Password must be a string or bytes, got </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">get_hasher</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">)</span>\n    <span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"n\">salt</span> <span class=\"ow\">or</span> <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">salt</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span></div>\n\n\n<span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">lru_cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_hashers</span><span class=\"p\">():</span>\n    <span class=\"n\">hashers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">hasher_path</span> <span class=\"ow\">in</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">PASSWORD_HASHERS</span><span class=\"p\">:</span>\n        <span class=\"n\">hasher_cls</span> <span class=\"o\">=</span> <span class=\"n\">import_string</span><span class=\"p\">(</span><span class=\"n\">hasher_path</span><span class=\"p\">)</span>\n        <span class=\"n\">hasher</span> <span class=\"o\">=</span> <span class=\"n\">hasher_cls</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">,</span> <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ImproperlyConfigured</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;hasher doesn&#39;t specify an algorithm name: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">hasher_path</span>\n            <span class=\"p\">)</span>\n        <span class=\"n\">hashers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">hasher</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">hashers</span>\n\n\n<span class=\"nd\">@functools</span><span class=\"o\">.</span><span class=\"n\">lru_cache</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_hashers_by_algorithm</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"n\">hasher</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">:</span> <span class=\"n\">hasher</span> <span class=\"k\">for</span> <span class=\"n\">hasher</span> <span class=\"ow\">in</span> <span class=\"n\">get_hashers</span><span class=\"p\">()}</span>\n\n\n<span class=\"nd\">@receiver</span><span class=\"p\">(</span><span class=\"n\">setting_changed</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">reset_hashers</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">setting</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">setting</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;PASSWORD_HASHERS&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">get_hashers</span><span class=\"o\">.</span><span class=\"n\">cache_clear</span><span class=\"p\">()</span>\n        <span class=\"n\">get_hashers_by_algorithm</span><span class=\"o\">.</span><span class=\"n\">cache_clear</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_hasher</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"o\">=</span><span class=\"s2\">&quot;default&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return an instance of a loaded password hasher.</span>\n\n<span class=\"sd\">    If algorithm is &#39;default&#39;, return the default hasher. Lazily import hashers</span>\n<span class=\"sd\">    specified in the project&#39;s settings file if needed.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">algorithm</span>\n\n    <span class=\"k\">elif</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_hashers</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">hashers</span> <span class=\"o\">=</span> <span class=\"n\">get_hashers_by_algorithm</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">hashers</span><span class=\"p\">[</span><span class=\"n\">algorithm</span><span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Unknown password hashing algorithm &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;. &quot;</span>\n                <span class=\"s2\">&quot;Did you specify it in the PASSWORD_HASHERS &quot;</span>\n                <span class=\"s2\">&quot;setting?&quot;</span> <span class=\"o\">%</span> <span class=\"n\">algorithm</span>\n            <span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">identify_hasher</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return an instance of a loaded password hasher.</span>\n\n<span class=\"sd\">    Identify hasher algorithm by examining encoded hash, and call</span>\n<span class=\"sd\">    get_hasher() to return hasher. Raise ValueError if</span>\n<span class=\"sd\">    algorithm cannot be identified, or if hasher is not loaded.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"c1\"># Ancient versions of Django created plain MD5 passwords and accepted</span>\n    <span class=\"c1\"># MD5 passwords with an empty salt.</span>\n    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">32</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"p\">(</span>\n        <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">37</span> <span class=\"ow\">and</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;md5$$&quot;</span><span class=\"p\">)</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unsalted_md5&quot;</span>\n    <span class=\"c1\"># Ancient versions of Django accepted SHA1 passwords with an empty salt.</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">46</span> <span class=\"ow\">and</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;sha1$$&quot;</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unsalted_sha1&quot;</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_hasher</span><span class=\"p\">(</span><span class=\"n\">algorithm</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">mask_hash</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">,</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"n\">char</span><span class=\"o\">=</span><span class=\"s2\">&quot;*&quot;</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Return the given hash, with only the first ``show`` number shown. The</span>\n<span class=\"sd\">    rest are masked with ``char`` for security reasons.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">masked</span> <span class=\"o\">=</span> <span class=\"nb\">hash</span><span class=\"p\">[:</span><span class=\"n\">show</span><span class=\"p\">]</span>\n    <span class=\"n\">masked</span> <span class=\"o\">+=</span> <span class=\"n\">char</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">[</span><span class=\"n\">show</span><span class=\"p\">:])</span>\n    <span class=\"k\">return</span> <span class=\"n\">masked</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">must_update_salt</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">expected_entropy</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Each character in the salt provides log_2(len(alphabet)) bits of entropy.</span>\n    <span class=\"k\">return</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">salt</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">RANDOM_STRING_CHARS</span><span class=\"p\">))</span> <span class=\"o\">&lt;</span> <span class=\"n\">expected_entropy</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BasePasswordHasher</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Abstract base class for password hashers</span>\n\n<span class=\"sd\">    When creating your own hasher, you need to override algorithm,</span>\n<span class=\"sd\">    verify(), encode() and safe_summary().</span>\n\n<span class=\"sd\">    PasswordHasher objects are immutable.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">salt_entropy</span> <span class=\"o\">=</span> <span class=\"mi\">128</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_load_library</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">library</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">library</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">tuple</span><span class=\"p\">,</span> <span class=\"nb\">list</span><span class=\"p\">)):</span>\n                <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">mod_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">library</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">mod_path</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">library</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">module</span> <span class=\"o\">=</span> <span class=\"n\">importlib</span><span class=\"o\">.</span><span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">mod_path</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ImportError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Couldn&#39;t load </span><span class=\"si\">%r</span><span class=\"s2\"> algorithm library: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span>\n                    <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">module</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;Hasher </span><span class=\"si\">%r</span><span class=\"s2\"> doesn&#39;t specify a library attribute&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">salt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Generate a cryptographically secure nonce salt in ASCII with an entropy</span>\n<span class=\"sd\">        of at least `salt_entropy` bits.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Each character in the salt provides</span>\n        <span class=\"c1\"># log_2(len(alphabet)) bits of entropy.</span>\n        <span class=\"n\">char_count</span> <span class=\"o\">=</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">ceil</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt_entropy</span> <span class=\"o\">/</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">log2</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">RANDOM_STRING_CHARS</span><span class=\"p\">)))</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_random_string</span><span class=\"p\">(</span><span class=\"n\">char_count</span><span class=\"p\">,</span> <span class=\"n\">allowed_chars</span><span class=\"o\">=</span><span class=\"n\">RANDOM_STRING_CHARS</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Check if the given password is correct.&quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of BasePasswordHasher must provide a verify() method&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_encode_args</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">password</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;password must be provided.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">salt</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;$&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">salt</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt must be provided and cannot contain $.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Create an encoded database value.</span>\n\n<span class=\"sd\">        The result is normally formatted as &quot;algorithm$salt$hash&quot; and</span>\n<span class=\"sd\">        must be fewer than 128 characters.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of BasePasswordHasher must provide an encode() method&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a decoded database value.</span>\n\n<span class=\"sd\">        The result is a dictionary and should contain `algorithm`, `hash`, and</span>\n<span class=\"sd\">        `salt`. Extra keys can be algorithm specific like `iterations` or</span>\n<span class=\"sd\">        `work_factor`.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of BasePasswordHasher must provide a decode() method.&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a summary of safe values.</span>\n\n<span class=\"sd\">        The result is a dictionary and will be used where the password field</span>\n<span class=\"sd\">        must be displayed to construct a safe representation of the password.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of BasePasswordHasher must provide a safe_summary() method&quot;</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Bridge the runtime gap between the work factor supplied in `encoded`</span>\n<span class=\"sd\">        and the work factor suggested by this hasher.</span>\n\n<span class=\"sd\">        Taking PBKDF2 as an example, if `encoded` contains 20000 iterations and</span>\n<span class=\"sd\">        `self.iterations` is 30000, this method should run password through</span>\n<span class=\"sd\">        another 10000 iterations of PBKDF2. Similar approaches should exist</span>\n<span class=\"sd\">        for any hasher that has a work factor. If not, this method should be</span>\n<span class=\"sd\">        defined as a no-op to silence the warning.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of BasePasswordHasher should provide a harden_runtime() method&quot;</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PBKDF2PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Secure password hashing using the PBKDF2 algorithm (recommended)</span>\n\n<span class=\"sd\">    Configured to use PBKDF2 + HMAC + SHA256.</span>\n<span class=\"sd\">    The result is a 64 byte binary string.  Iterations may be changed</span>\n<span class=\"sd\">    safely but you must rename the algorithm if you change SHA256.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pbkdf2_sha256&quot;</span>\n    <span class=\"n\">iterations</span> <span class=\"o\">=</span> <span class=\"mi\">720000</span>\n    <span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha256</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_encode_args</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n        <span class=\"n\">iterations</span> <span class=\"o\">=</span> <span class=\"n\">iterations</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iterations</span>\n        <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">pbkdf2</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"p\">,</span> <span class=\"n\">digest</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">)</span>\n        <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64encode</span><span class=\"p\">(</span><span class=\"nb\">hash</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%d</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"nb\">hash</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;iterations&quot;</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">iterations</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"n\">salt</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;iterations&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;iterations&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;iterations&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">]),</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">update_salt</span> <span class=\"o\">=</span> <span class=\"n\">must_update_salt</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt_entropy</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;iterations&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iterations</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">update_salt</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">extra_iterations</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">iterations</span> <span class=\"o\">-</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;iterations&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"n\">extra_iterations</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"n\">extra_iterations</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PBKDF2SHA1PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">PBKDF2PasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Alternate PBKDF2 hasher which uses SHA1, the default PRF</span>\n<span class=\"sd\">    recommended by PKCS #5. This is compatible with other</span>\n<span class=\"sd\">    implementations of PBKDF2, such as openssl&#39;s</span>\n<span class=\"sd\">    PKCS5_PBKDF2_HMAC_SHA1().</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;pbkdf2_sha1&quot;</span>\n    <span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha1</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Argon2PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Secure password hashing using the argon2 algorithm.</span>\n\n<span class=\"sd\">    This is the winner of the Password Hashing Competition 2013-2015</span>\n<span class=\"sd\">    (https://password-hashing.net). It requires the argon2-cffi library which</span>\n<span class=\"sd\">    depends on native C code and might cause portability issues.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;argon2&quot;</span>\n    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;argon2&quot;</span>\n\n    <span class=\"n\">time_cost</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">memory_cost</span> <span class=\"o\">=</span> <span class=\"mi\">102400</span>\n    <span class=\"n\">parallelism</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"n\">argon2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_library</span><span class=\"p\">()</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">()</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">hash_secret</span><span class=\"p\">(</span>\n            <span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(),</span>\n            <span class=\"n\">salt</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(),</span>\n            <span class=\"n\">time_cost</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">time_cost</span><span class=\"p\">,</span>\n            <span class=\"n\">memory_cost</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">memory_cost</span><span class=\"p\">,</span>\n            <span class=\"n\">parallelism</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">parallelism</span><span class=\"p\">,</span>\n            <span class=\"n\">hash_len</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">hash_len</span><span class=\"p\">,</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span> <span class=\"o\">+</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">argon2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_library</span><span class=\"p\">()</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">extract_parameters</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">rest</span><span class=\"p\">)</span>\n        <span class=\"n\">variety</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">b64salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">rest</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Add padding.</span>\n        <span class=\"n\">b64salt</span> <span class=\"o\">+=</span> <span class=\"s2\">&quot;=&quot;</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">b64salt</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64decode</span><span class=\"p\">(</span><span class=\"n\">b64salt</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;latin1&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"nb\">hash</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;memory_cost&quot;</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">memory_cost</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">parallelism</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"n\">salt</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;time_cost&quot;</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">time_cost</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;variety&quot;</span><span class=\"p\">:</span> <span class=\"n\">variety</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;version&quot;</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">version</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;params&quot;</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">argon2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_library</span><span class=\"p\">()</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">rest</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">PasswordHasher</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span> <span class=\"o\">+</span> <span class=\"n\">rest</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">exceptions</span><span class=\"o\">.</span><span class=\"n\">VerificationError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;variety&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;variety&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;version&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;version&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;memory cost&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;memory_cost&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;time cost&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;time_cost&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">]),</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">current_params</span> <span class=\"o\">=</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;params&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">new_params</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Set salt_len to the salt_len of the current parameters because salt</span>\n        <span class=\"c1\"># is explicitly passed to argon2.</span>\n        <span class=\"n\">new_params</span><span class=\"o\">.</span><span class=\"n\">salt_len</span> <span class=\"o\">=</span> <span class=\"n\">current_params</span><span class=\"o\">.</span><span class=\"n\">salt_len</span>\n        <span class=\"n\">update_salt</span> <span class=\"o\">=</span> <span class=\"n\">must_update_salt</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt_entropy</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">current_params</span> <span class=\"o\">!=</span> <span class=\"n\">new_params</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">update_salt</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The runtime for Argon2 is too complicated to implement a sensible</span>\n        <span class=\"c1\"># hardening algorithm.</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">params</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">argon2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_library</span><span class=\"p\">()</span>\n        <span class=\"c1\"># salt_len is a noop, because we provide our own salt.</span>\n        <span class=\"k\">return</span> <span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">Parameters</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">Type</span><span class=\"o\">.</span><span class=\"n\">ID</span><span class=\"p\">,</span>\n            <span class=\"n\">version</span><span class=\"o\">=</span><span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">low_level</span><span class=\"o\">.</span><span class=\"n\">ARGON2_VERSION</span><span class=\"p\">,</span>\n            <span class=\"n\">salt_len</span><span class=\"o\">=</span><span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_RANDOM_SALT_LENGTH</span><span class=\"p\">,</span>\n            <span class=\"n\">hash_len</span><span class=\"o\">=</span><span class=\"n\">argon2</span><span class=\"o\">.</span><span class=\"n\">DEFAULT_HASH_LENGTH</span><span class=\"p\">,</span>\n            <span class=\"n\">time_cost</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">time_cost</span><span class=\"p\">,</span>\n            <span class=\"n\">memory_cost</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">memory_cost</span><span class=\"p\">,</span>\n            <span class=\"n\">parallelism</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallelism</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BCryptSHA256PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Secure password hashing using the bcrypt algorithm (recommended)</span>\n\n<span class=\"sd\">    This is considered by many to be the most secure algorithm but you</span>\n<span class=\"sd\">    must first install the bcrypt library.  Please be warned that</span>\n<span class=\"sd\">    this library depends on native C code and might cause portability</span>\n<span class=\"sd\">    issues.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;bcrypt_sha256&quot;</span>\n    <span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha256</span>\n    <span class=\"n\">library</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;bcrypt&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;bcrypt&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">rounds</span> <span class=\"o\">=</span> <span class=\"mi\">12</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">salt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">bcrypt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_library</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">bcrypt</span><span class=\"o\">.</span><span class=\"n\">gensalt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rounds</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"n\">bcrypt</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_load_library</span><span class=\"p\">()</span>\n        <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Hash the password prior to using bcrypt to prevent password</span>\n        <span class=\"c1\"># truncation as described in #20138.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">digest</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Use binascii.hexlify() because a hex encoded bytestring is str.</span>\n            <span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"n\">binascii</span><span class=\"o\">.</span><span class=\"n\">hexlify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">digest</span><span class=\"p\">())</span>\n\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">bcrypt</span><span class=\"o\">.</span><span class=\"n\">hashpw</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">empty</span><span class=\"p\">,</span> <span class=\"n\">algostr</span><span class=\"p\">,</span> <span class=\"n\">work_factor</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;algostr&quot;</span><span class=\"p\">:</span> <span class=\"n\">algostr</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;checksum&quot;</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">22</span><span class=\"p\">:],</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"n\">data</span><span class=\"p\">[:</span><span class=\"mi\">22</span><span class=\"p\">],</span>\n            <span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">work_factor</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;work factor&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">]),</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;checksum&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;checksum&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rounds</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">salt</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"p\">[:</span><span class=\"mi\">29</span><span class=\"p\">]</span>  <span class=\"c1\"># Length of the salt in bcrypt.</span>\n        <span class=\"n\">rounds</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">)[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n        <span class=\"c1\"># work factor is logarithmic, adding one doubles the load.</span>\n        <span class=\"n\">diff</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">**</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rounds</span> <span class=\"o\">-</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">rounds</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"mi\">1</span>\n        <span class=\"k\">while</span> <span class=\"n\">diff</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">))</span>\n            <span class=\"n\">diff</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BCryptPasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BCryptSHA256PasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Secure password hashing using the bcrypt algorithm</span>\n\n<span class=\"sd\">    This is considered by many to be the most secure algorithm but you</span>\n<span class=\"sd\">    must first install the bcrypt library.  Please be warned that</span>\n<span class=\"sd\">    this library depends on native C code and might cause portability</span>\n<span class=\"sd\">    issues.</span>\n\n<span class=\"sd\">    This hasher does not first hash the password which means it is subject to</span>\n<span class=\"sd\">    bcrypt&#39;s 72 bytes password truncation. Most use cases should prefer the</span>\n<span class=\"sd\">    BCryptSHA256PasswordHasher.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;bcrypt&quot;</span>\n    <span class=\"n\">digest</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ScryptPasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Secure password hashing using the Scrypt algorithm.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;scrypt&quot;</span>\n    <span class=\"n\">block_size</span> <span class=\"o\">=</span> <span class=\"mi\">8</span>\n    <span class=\"n\">maxmem</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">parallelism</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">work_factor</span> <span class=\"o\">=</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">14</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_encode_args</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n        <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"n\">n</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">work_factor</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">r</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_size</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">p</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallelism</span>\n        <span class=\"n\">hash_</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">scrypt</span><span class=\"p\">(</span>\n            <span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(),</span>\n            <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"n\">salt</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(),</span>\n            <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span>\n            <span class=\"n\">r</span><span class=\"o\">=</span><span class=\"n\">r</span><span class=\"p\">,</span>\n            <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"n\">p</span><span class=\"p\">,</span>\n            <span class=\"n\">maxmem</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">maxmem</span><span class=\"p\">,</span>\n            <span class=\"n\">dklen</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">hash_</span> <span class=\"o\">=</span> <span class=\"n\">base64</span><span class=\"o\">.</span><span class=\"n\">b64encode</span><span class=\"p\">(</span><span class=\"n\">hash_</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s2\">&quot;ascii&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%d</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%d</span><span class=\"s2\">$</span><span class=\"si\">%d</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"p\">,</span> <span class=\"n\">hash_</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">work_factor</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"n\">block_size</span><span class=\"p\">,</span> <span class=\"n\">parallelism</span><span class=\"p\">,</span> <span class=\"n\">hash_</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">6</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">work_factor</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"n\">salt</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;block_size&quot;</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">block_size</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">parallelism</span><span class=\"p\">),</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"n\">hash_</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span>\n            <span class=\"n\">password</span><span class=\"p\">,</span>\n            <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;block_size&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">],</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;work factor&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;block size&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;block_size&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">]),</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;work_factor&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">work_factor</span>\n            <span class=\"ow\">or</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;block_size&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">block_size</span>\n            <span class=\"ow\">or</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;parallelism&quot;</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parallelism</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"c1\"># The runtime for Scrypt is too complicated to implement a sensible</span>\n        <span class=\"c1\"># hardening algorithm.</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># RemovedInDjango51Warning.</span>\n<span class=\"k\">class</span> <span class=\"nc\">SHA1PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The SHA1 password hashing algorithm (not recommended)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;sha1&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;django.contrib.auth.hashers.SHA1PasswordHasher is deprecated.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">RemovedInDjango51Warning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_encode_args</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n        <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha1</span><span class=\"p\">((</span><span class=\"n\">salt</span> <span class=\"o\">+</span> <span class=\"n\">password</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"nb\">hash</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"n\">salt</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">must_update_salt</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt_entropy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MD5PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    The Salted MD5 password hashing algorithm (not recommended)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;md5&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_encode_args</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">)</span>\n        <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">((</span><span class=\"n\">salt</span> <span class=\"o\">+</span> <span class=\"n\">password</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">$</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">algorithm</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">,</span> <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;$&quot;</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">algorithm</span> <span class=\"o\">==</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"nb\">hash</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"n\">salt</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">must_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">must_update_salt</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">salt_entropy</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># RemovedInDjango51Warning.</span>\n<span class=\"k\">class</span> <span class=\"nc\">UnsaltedSHA1PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Very insecure algorithm that you should *never* use; store SHA1 hashes</span>\n<span class=\"sd\">    with an empty salt.</span>\n\n<span class=\"sd\">    This class is implemented because Django used to accept such password</span>\n<span class=\"sd\">    hashes. Some older Django installs still have these values lingering</span>\n<span class=\"sd\">    around so we need to handle and upgrade them properly.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unsalted_sha1&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;django.contrib.auth.hashers.UnsaltedSHA1PasswordHasher is deprecated.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">RemovedInDjango51Warning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">salt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">salt</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt must be empty.&quot;</span><span class=\"p\">)</span>\n        <span class=\"nb\">hash</span> <span class=\"o\">=</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">sha1</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;sha1$$</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">hash</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">assert</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"s2\">&quot;sha1$$&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"n\">encoded</span><span class=\"p\">[</span><span class=\"mi\">6</span><span class=\"p\">:],</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">]),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n\n<span class=\"c1\"># RemovedInDjango51Warning.</span>\n<span class=\"k\">class</span> <span class=\"nc\">UnsaltedMD5PasswordHasher</span><span class=\"p\">(</span><span class=\"n\">BasePasswordHasher</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Incredibly insecure algorithm that you should *never* use; stores unsalted</span>\n<span class=\"sd\">    MD5 hashes without the algorithm prefix, also accepts MD5 hashes with an</span>\n<span class=\"sd\">    empty salt.</span>\n\n<span class=\"sd\">    This class is implemented because Django used to store passwords this way</span>\n<span class=\"sd\">    and to accept such password hashes. Some older Django installs still have</span>\n<span class=\"sd\">    these values lingering around so we need to handle and upgrade them</span>\n<span class=\"sd\">    properly.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"n\">algorithm</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;unsalted_md5&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;django.contrib.auth.hashers.UnsaltedMD5PasswordHasher is deprecated.&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">RemovedInDjango51Warning</span><span class=\"p\">,</span>\n            <span class=\"n\">stacklevel</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">salt</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">salt</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;salt must be empty.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">hashlib</span><span class=\"o\">.</span><span class=\"n\">md5</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">hexdigest</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">algorithm</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">:</span> <span class=\"n\">encoded</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;salt&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">verify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">37</span><span class=\"p\">:</span>\n            <span class=\"n\">encoded</span> <span class=\"o\">=</span> <span class=\"n\">encoded</span><span class=\"o\">.</span><span class=\"n\">removeprefix</span><span class=\"p\">(</span><span class=\"s2\">&quot;md5$$&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">encoded_2</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">constant_time_compare</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">,</span> <span class=\"n\">encoded_2</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">safe_summary</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"n\">decoded</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">encoded</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">):</span> <span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;algorithm&quot;</span><span class=\"p\">],</span>\n            <span class=\"n\">_</span><span class=\"p\">(</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">):</span> <span class=\"n\">mask_hash</span><span class=\"p\">(</span><span class=\"n\">decoded</span><span class=\"p\">[</span><span class=\"s2\">&quot;hash&quot;</span><span class=\"p\">],</span> <span class=\"n\">show</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">harden_runtime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">encoded</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>", "current_page_name": "_modules/django/contrib/auth/hashers", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
