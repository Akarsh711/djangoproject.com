{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.template.response", "body": "<h1>Source code for django.template.response</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.loader</span> <span class=\"kn\">import</span> <span class=\"n\">get_template</span><span class=\"p\">,</span> <span class=\"n\">select_template</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ContentNotRenderedError</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<div class=\"viewcode-block\" id=\"SimpleTemplateResponse\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.SimpleTemplateResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">SimpleTemplateResponse</span><span class=\"p\">(</span><span class=\"n\">HttpResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">rendering_attrs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;template_name&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;context_data&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_post_render_callbacks&quot;</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"SimpleTemplateResponse.__init__\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.SimpleTemplateResponse.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">template</span><span class=\"p\">,</span>\n        <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"c1\"># It would seem obvious to call these next two members &#39;template&#39; and</span>\n        <span class=\"c1\"># &#39;context&#39;, but those names are reserved as part of the test Client</span>\n        <span class=\"c1\"># API. To avoid the name collision, we use different names.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"n\">template</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_data</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">using</span> <span class=\"o\">=</span> <span class=\"n\">using</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post_render_callbacks</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"c1\"># _request stores the current request object in subclasses that know</span>\n        <span class=\"c1\"># about requests, like TemplateResponse. It&#39;s defined in the base class</span>\n        <span class=\"c1\"># to minimize code duplication.</span>\n        <span class=\"c1\"># It&#39;s called self._request because self.request gets overwritten by</span>\n        <span class=\"c1\"># django.test.client.Client. Unlike template_name and context_data,</span>\n        <span class=\"c1\"># _request should not be considered part of the public API.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_request</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"c1\"># content argument doesn&#39;t make sense here because it will be replaced</span>\n        <span class=\"c1\"># with rendered template so we always pass empty string in order to</span>\n        <span class=\"c1\"># prevent errors and provide shorter signature.</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"n\">charset</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># _is_rendered tracks whether the template and context has been baked</span>\n        <span class=\"c1\"># into a final response.</span>\n        <span class=\"c1\"># Super __init__ doesn&#39;t know any better than to set self.content to</span>\n        <span class=\"c1\"># the empty string we just gave it, which wrongly sets _is_rendered</span>\n        <span class=\"c1\"># True, so we initialize it to False after the call to super __init__.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__getstate__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Raise an exception if trying to pickle an unrendered response. Pickle</span>\n<span class=\"sd\">        only rendered data, not the data used to construct the response.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">obj_dict</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ContentNotRenderedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The response content must be rendered before it can be pickled.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rendering_attrs</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"n\">obj_dict</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">obj_dict</span><span class=\"p\">[</span><span class=\"n\">attr</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">obj_dict</span>\n\n<div class=\"viewcode-block\" id=\"SimpleTemplateResponse.resolve_template\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.SimpleTemplateResponse.resolve_template\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolve_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Accept a template object, path-to-template, or list of paths.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">select_template</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">)</span>\n        <span class=\"k\">elif</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">template</span></div>\n\n<div class=\"viewcode-block\" id=\"SimpleTemplateResponse.resolve_context\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.SimpleTemplateResponse.resolve_context\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">resolve_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">rendered_content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Return the freshly rendered content for the template and context</span>\n<span class=\"sd\">        described by the TemplateResponse.</span>\n\n<span class=\"sd\">        This *does not* set the final content of the response. To set the</span>\n<span class=\"sd\">        response content, you must either call render(), or set the</span>\n<span class=\"sd\">        content explicitly using the value of this property.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolve_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_name</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">resolve_context</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">context_data</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_request</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"SimpleTemplateResponse.add_post_render_callback\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.SimpleTemplateResponse.add_post_render_callback\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">add_post_render_callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Add a new post-rendering callback.</span>\n\n<span class=\"sd\">        If the response has already been rendered,</span>\n<span class=\"sd\">        invoke the callback immediately.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span><span class=\"p\">:</span>\n            <span class=\"n\">callback</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post_render_callbacks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"SimpleTemplateResponse.render\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.SimpleTemplateResponse.render\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Render (thereby finalizing) the content of the response.</span>\n\n<span class=\"sd\">        If the content has already been rendered, this is a no-op.</span>\n\n<span class=\"sd\">        Return the baked response instance.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">rendered_content</span>\n            <span class=\"k\">for</span> <span class=\"n\">post_callback</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_post_render_callbacks</span><span class=\"p\">:</span>\n                <span class=\"n\">newretval</span> <span class=\"o\">=</span> <span class=\"n\">post_callback</span><span class=\"p\">(</span><span class=\"n\">retval</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">newretval</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"n\">retval</span> <span class=\"o\">=</span> <span class=\"n\">newretval</span>\n        <span class=\"k\">return</span> <span class=\"n\">retval</span></div>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_rendered</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__iter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ContentNotRenderedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The response content must be rendered before it can be iterated over.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__iter__</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ContentNotRenderedError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;The response content must be rendered before it can be accessed.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">content</span>\n\n    <span class=\"nd\">@content</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n    <span class=\"k\">def</span> <span class=\"nf\">content</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Set the content for the response.&quot;&quot;&quot;</span>\n        <span class=\"n\">HttpResponse</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"o\">.</span><span class=\"n\">fset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_is_rendered</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></div>\n\n\n<div class=\"viewcode-block\" id=\"TemplateResponse\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.TemplateResponse\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">TemplateResponse</span><span class=\"p\">(</span><span class=\"n\">SimpleTemplateResponse</span><span class=\"p\">):</span>\n    <span class=\"n\">rendering_attrs</span> <span class=\"o\">=</span> <span class=\"n\">SimpleTemplateResponse</span><span class=\"o\">.</span><span class=\"n\">rendering_attrs</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"s2\">&quot;_request&quot;</span><span class=\"p\">]</span>\n\n<div class=\"viewcode-block\" id=\"TemplateResponse.__init__\"><a class=\"viewcode-back\" href=\"../../../../ref/template-response/#django.template.response.TemplateResponse.__init__\">[docs]</a>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span>\n        <span class=\"n\">request</span><span class=\"p\">,</span>\n        <span class=\"n\">template</span><span class=\"p\">,</span>\n        <span class=\"n\">context</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">charset</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"n\">template</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"p\">,</span> <span class=\"n\">charset</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"p\">,</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span>\n        <span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_request</span> <span class=\"o\">=</span> <span class=\"n\">request</span></div></div>\n</pre></div>", "current_page_name": "_modules/django/template/response", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}