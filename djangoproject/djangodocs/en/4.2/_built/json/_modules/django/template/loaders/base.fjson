{"parents": [{"link": "../../../../", "title": "Module code"}, {"link": "../../../", "title": "django"}], "title": "django.template.loaders.base", "body": "<h1>Source code for django.template.loaders.base</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Template</span><span class=\"p\">,</span> <span class=\"n\">TemplateDoesNotExist</span>\n\n\n<div class=\"viewcode-block\" id=\"Loader\"><a class=\"viewcode-back\" href=\"../../../../../ref/templates/api/#django.template.loaders.base.Loader\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Loader</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">engine</span>\n\n<div class=\"viewcode-block\" id=\"Loader.get_template\"><a class=\"viewcode-back\" href=\"../../../../../ref/templates/api/#django.template.loaders.base.Loader.get_template\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Call self.get_template_sources() and return a Template object for</span>\n<span class=\"sd\">        the first template matching template_name. If skip is provided, ignore</span>\n<span class=\"sd\">        template origins in skip. This is used to avoid recursion during</span>\n<span class=\"sd\">        template extending.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">tried</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">for</span> <span class=\"n\">origin</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_template_sources</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">skip</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"n\">origin</span> <span class=\"ow\">in</span> <span class=\"n\">skip</span><span class=\"p\">:</span>\n                <span class=\"n\">tried</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Skipped to avoid recursion&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">continue</span>\n\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_contents</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">:</span>\n                <span class=\"n\">tried</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Source does not exist&quot;</span><span class=\"p\">))</span>\n                <span class=\"k\">continue</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">Template</span><span class=\"p\">(</span>\n                    <span class=\"n\">contents</span><span class=\"p\">,</span>\n                    <span class=\"n\">origin</span><span class=\"p\">,</span>\n                    <span class=\"n\">origin</span><span class=\"o\">.</span><span class=\"n\">template_name</span><span class=\"p\">,</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n\n        <span class=\"k\">raise</span> <span class=\"n\">TemplateDoesNotExist</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">tried</span><span class=\"o\">=</span><span class=\"n\">tried</span><span class=\"p\">)</span></div>\n\n<div class=\"viewcode-block\" id=\"Loader.get_template_sources\"><a class=\"viewcode-back\" href=\"../../../../../ref/templates/api/#django.template.loaders.base.Loader.get_template_sources\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">get_template_sources</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        An iterator that yields possible matching template paths for a</span>\n<span class=\"sd\">        template name.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotImplementedError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;subclasses of Loader must provide a get_template_sources() method&quot;</span>\n        <span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Reset any state maintained by the loader instance (e.g. cached</span>\n<span class=\"sd\">        templates or cached loader modules).</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span></div>\n</pre></div>", "current_page_name": "_modules/django/template/loaders/base", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}