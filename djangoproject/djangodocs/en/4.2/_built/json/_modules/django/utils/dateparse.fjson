{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.utils.dateparse", "body": "<h1>Source code for django.utils.dateparse</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;Functions to parse datetime objects.&quot;&quot;&quot;</span>\n\n<span class=\"c1\"># We&#39;re using regular expressions rather than time.strptime because:</span>\n<span class=\"c1\"># - They provide both validation and parsing.</span>\n<span class=\"c1\"># - They&#39;re more flexible for datetimes.</span>\n<span class=\"c1\"># - The date/datetime/time constructors produce friendlier error messages.</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.timezone</span> <span class=\"kn\">import</span> <span class=\"n\">get_fixed_timezone</span>\n\n<span class=\"n\">date_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;year&gt;\\d</span><span class=\"si\">{4}</span><span class=\"s2\">)-(?P&lt;month&gt;\\d{1,2})-(?P&lt;day&gt;\\d{1,2})$&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">time_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;hour&gt;\\d{1,2}):(?P&lt;minute&gt;\\d{1,2})&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?::(?P&lt;second&gt;\\d{1,2})(?:[\\.,](?P&lt;microsecond&gt;\\d{1,6})\\d{0,6})?)?$&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">datetime_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;year&gt;\\d</span><span class=\"si\">{4}</span><span class=\"s2\">)-(?P&lt;month&gt;\\d{1,2})-(?P&lt;day&gt;\\d{1,2})&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;[T ](?P&lt;hour&gt;\\d{1,2}):(?P&lt;minute&gt;\\d{1,2})&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?::(?P&lt;second&gt;\\d{1,2})(?:[\\.,](?P&lt;microsecond&gt;\\d{1,6})\\d{0,6})?)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;\\s*(?P&lt;tzinfo&gt;Z|[+-]\\d</span><span class=\"si\">{2}</span><span class=\"s2\">(?::?\\d</span><span class=\"si\">{2}</span><span class=\"s2\">)?)?$&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">standard_duration_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;days&gt;-?\\d+) (days?, )?)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;sign&gt;-?)&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;((?:(?P&lt;hours&gt;\\d+):)(?=\\d+:\\d+))?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;minutes&gt;\\d+):)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;seconds&gt;\\d+)&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:[\\.,](?P&lt;microseconds&gt;\\d{1,6})\\d{0,6})?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;$&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Support the sections of ISO 8601 date representation that are accepted by</span>\n<span class=\"c1\"># timedelta</span>\n<span class=\"n\">iso8601_duration_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^(?P&lt;sign&gt;[-+]?)&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;P&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;days&gt;\\d+([\\.,]\\d+)?)D)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:T&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;hours&gt;\\d+([\\.,]\\d+)?)H)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;minutes&gt;\\d+([\\.,]\\d+)?)M)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;seconds&gt;\\d+([\\.,]\\d+)?)S)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;)?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;$&quot;</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Support PostgreSQL&#39;s day-time interval format, e.g. &quot;3 days 04:05:06&quot;. The</span>\n<span class=\"c1\"># year-month and mixed intervals cannot be converted to a timedelta and thus</span>\n<span class=\"c1\"># aren&#39;t accepted.</span>\n<span class=\"n\">postgres_interval_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;^&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;days&gt;-?\\d+) (days? ?))?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(?P&lt;sign&gt;[-+])?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;hours&gt;\\d+):&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;minutes&gt;\\d\\d):&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?P&lt;seconds&gt;\\d\\d)&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;(?:\\.(?P&lt;microseconds&gt;\\d{1,6}))?&quot;</span>\n    <span class=\"sa\">r</span><span class=\"s2\">&quot;)?$&quot;</span>\n<span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"parse_date\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.dateparse.parse_date\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_date</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Parse a string and return a datetime.date.</span>\n\n<span class=\"sd\">    Raise ValueError if the input is well formatted but not a valid date.</span>\n<span class=\"sd\">    Return None if the input isn&#39;t well formatted.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"o\">:=</span> <span class=\"n\">date_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()}</span>\n            <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_time\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.dateparse.parse_time\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_time</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Parse a string and return a datetime.time.</span>\n\n<span class=\"sd\">    This function doesn&#39;t support time zone offsets.</span>\n\n<span class=\"sd\">    Raise ValueError if the input is well formatted but not a valid time.</span>\n<span class=\"sd\">    Return None if the input isn&#39;t well formatted, in particular if it</span>\n<span class=\"sd\">    contains an offset.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># The fromisoformat() method takes time zone info into account and</span>\n        <span class=\"c1\"># returns a time with a tzinfo component, if possible. However, there</span>\n        <span class=\"c1\"># are no circumstances where aware datetime.time objects make sense, so</span>\n        <span class=\"c1\"># remove the time zone offset.</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"o\">:=</span> <span class=\"n\">time_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span>\n            <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microsecond&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microsecond&quot;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microsecond&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_datetime\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.dateparse.parse_datetime\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_datetime</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Parse a string and return a datetime.datetime.</span>\n\n<span class=\"sd\">    This function supports time zone offsets. When the input contains one,</span>\n<span class=\"sd\">    the output uses a timezone with a fixed offset from UTC.</span>\n\n<span class=\"sd\">    Raise ValueError if the input is well formatted but not a valid datetime.</span>\n<span class=\"sd\">    Return None if the input isn&#39;t well formatted.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">fromisoformat</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span> <span class=\"o\">:=</span> <span class=\"n\">datetime_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n            <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span>\n            <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microsecond&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microsecond&quot;</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microsecond&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">tzinfo</span> <span class=\"o\">=</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;tzinfo&quot;</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">tzinfo</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Z&quot;</span><span class=\"p\">:</span>\n                <span class=\"n\">tzinfo</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">utc</span>\n            <span class=\"k\">elif</span> <span class=\"n\">tzinfo</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"n\">offset_mins</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">tzinfo</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">:])</span> <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">tzinfo</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n                <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">tzinfo</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">])</span> <span class=\"o\">+</span> <span class=\"n\">offset_mins</span>\n                <span class=\"k\">if</span> <span class=\"n\">tzinfo</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;-&quot;</span><span class=\"p\">:</span>\n                    <span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">offset</span>\n                <span class=\"n\">tzinfo</span> <span class=\"o\">=</span> <span class=\"n\">get_fixed_timezone</span><span class=\"p\">(</span><span class=\"n\">offset</span><span class=\"p\">)</span>\n            <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n            <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">tzinfo</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"parse_duration\"><a class=\"viewcode-back\" href=\"../../../../ref/utils/#django.utils.dateparse.parse_duration\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">parse_duration</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Parse a duration string and return a datetime.timedelta.</span>\n\n<span class=\"sd\">    The preferred format for durations in Django is &#39;%d %H:%M:%S.%f&#39;.</span>\n\n<span class=\"sd\">    Also supports ISO 8601 representation and PostgreSQL&#39;s day-time interval</span>\n<span class=\"sd\">    format.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n        <span class=\"n\">standard_duration_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"ow\">or</span> <span class=\"n\">iso8601_duration_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"ow\">or</span> <span class=\"n\">postgres_interval_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">:</span>\n        <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groupdict</span><span class=\"p\">()</span>\n        <span class=\"n\">sign</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;sign&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;+&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;-&quot;</span> <span class=\"k\">else</span> <span class=\"mi\">1</span>\n        <span class=\"k\">if</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;microseconds&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microseconds&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">kw</span><span class=\"p\">[</span><span class=\"s2\">&quot;microseconds&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">ljust</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">kw</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">k</span><span class=\"p\">,</span> <span class=\"n\">v</span> <span class=\"ow\">in</span> <span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">v</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">}</span>\n        <span class=\"n\">days</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">kw</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;days&quot;</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"mf\">0.0</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">re</span> <span class=\"o\">==</span> <span class=\"n\">iso8601_duration_re</span><span class=\"p\">:</span>\n            <span class=\"n\">days</span> <span class=\"o\">*=</span> <span class=\"n\">sign</span>\n        <span class=\"k\">return</span> <span class=\"n\">days</span> <span class=\"o\">+</span> <span class=\"n\">sign</span> <span class=\"o\">*</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kw</span><span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/django/utils/dateparse", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
