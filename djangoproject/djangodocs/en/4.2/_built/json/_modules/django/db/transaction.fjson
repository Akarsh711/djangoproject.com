{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.db.transaction", "body": "<h1>Source code for django.db.transaction</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"kn\">from</span> <span class=\"nn\">contextlib</span> <span class=\"kn\">import</span> <span class=\"n\">ContextDecorator</span><span class=\"p\">,</span> <span class=\"n\">contextmanager</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">,</span>\n    <span class=\"n\">DatabaseError</span><span class=\"p\">,</span>\n    <span class=\"n\">Error</span><span class=\"p\">,</span>\n    <span class=\"n\">ProgrammingError</span><span class=\"p\">,</span>\n    <span class=\"n\">connections</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n\n<div class=\"viewcode-block\" id=\"TransactionManagementError\"><a class=\"viewcode-back\" href=\"../../../../ref/exceptions/#django.db.transaction.TransactionManagementError\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">TransactionManagementError</span><span class=\"p\">(</span><span class=\"n\">ProgrammingError</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Transaction management is used improperly.&quot;&quot;&quot;</span>\n\n    <span class=\"k\">pass</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Get a database connection by name, or the default database connection</span>\n<span class=\"sd\">    if no name is provided. This is a private API.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"n\">using</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">using</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_DB_ALIAS</span>\n    <span class=\"k\">return</span> <span class=\"n\">connections</span><span class=\"p\">[</span><span class=\"n\">using</span><span class=\"p\">]</span>\n\n\n<div class=\"viewcode-block\" id=\"get_autocommit\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.get_autocommit\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_autocommit</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Get the autocommit status of the connection.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_autocommit</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_autocommit\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.set_autocommit\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">set_autocommit</span><span class=\"p\">(</span><span class=\"n\">autocommit</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Set the autocommit status of the connection.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_autocommit</span><span class=\"p\">(</span><span class=\"n\">autocommit</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"commit\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.commit\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">commit</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Commit a transaction.&quot;&quot;&quot;</span>\n    <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"rollback\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.rollback\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">rollback</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Roll back a transaction.&quot;&quot;&quot;</span>\n    <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"savepoint\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.savepoint\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">savepoint</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Create a savepoint (if supported and required by the backend) inside the</span>\n<span class=\"sd\">    current transaction. Return an identifier for the savepoint that will be</span>\n<span class=\"sd\">    used for the subsequent rollback or commit.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">savepoint</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"savepoint_rollback\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.savepoint_rollback\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">savepoint_rollback</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Roll back the most recent savepoint (if one exists). Do nothing if</span>\n<span class=\"sd\">    savepoints are not supported.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">savepoint_rollback</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"savepoint_commit\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.savepoint_commit\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">savepoint_commit</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Commit the most recent savepoint (if one exists). Do nothing if</span>\n<span class=\"sd\">    savepoints are not supported.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">savepoint_commit</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"clean_savepoints\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.clean_savepoints\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">clean_savepoints</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Reset the counter used to generate unique savepoint ids in this thread.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">clean_savepoints</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"get_rollback\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.get_rollback\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">get_rollback</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Get the &quot;needs rollback&quot; flag -- for *advanced use* only.&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_rollback</span><span class=\"p\">()</span></div>\n\n\n<div class=\"viewcode-block\" id=\"set_rollback\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.set_rollback\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">set_rollback</span><span class=\"p\">(</span><span class=\"n\">rollback</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Set or unset the &quot;needs rollback&quot; flag -- for *advanced use* only.</span>\n\n<span class=\"sd\">    When `rollback` is `True`, trigger a rollback when exiting the innermost</span>\n<span class=\"sd\">    enclosing atomic block that has `savepoint=True` (that&#39;s the default). Use</span>\n<span class=\"sd\">    this to force a rollback without raising an exception.</span>\n\n<span class=\"sd\">    When `rollback` is `False`, prevent such a rollback. Use this only after</span>\n<span class=\"sd\">    rolling back to a known-good state! Otherwise, you break the atomic block</span>\n<span class=\"sd\">    and data corruption may occur.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_rollback</span><span class=\"p\">(</span><span class=\"n\">rollback</span><span class=\"p\">)</span></div>\n\n\n<span class=\"nd\">@contextmanager</span>\n<span class=\"k\">def</span> <span class=\"nf\">mark_for_rollback_on_error</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Internal low-level utility to mark a transaction as &quot;needs rollback&quot; when</span>\n<span class=\"sd\">    an exception is raised while not enforcing the enclosed block to be in a</span>\n<span class=\"sd\">    transaction. This is needed by Model.save() and friends to avoid starting a</span>\n<span class=\"sd\">    transaction when in autocommit mode and a single query is executed.</span>\n\n<span class=\"sd\">    It&#39;s equivalent to:</span>\n\n<span class=\"sd\">        connection = get_connection(using)</span>\n<span class=\"sd\">        if connection.get_autocommit():</span>\n<span class=\"sd\">            yield</span>\n<span class=\"sd\">        else:</span>\n<span class=\"sd\">            with transaction.atomic(using=using, savepoint=False):</span>\n<span class=\"sd\">                yield</span>\n\n<span class=\"sd\">    but it uses low-level utilities to avoid performance overhead.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">rollback_exc</span> <span class=\"o\">=</span> <span class=\"n\">exc</span>\n        <span class=\"k\">raise</span>\n\n\n<div class=\"viewcode-block\" id=\"on_commit\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.on_commit\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">on_commit</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">robust</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Register `func` to be called when the current transaction is committed.</span>\n<span class=\"sd\">    If the current transaction is rolled back, `func` will not be called.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">on_commit</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">robust</span><span class=\"p\">)</span></div>\n\n\n<span class=\"c1\">#################################</span>\n<span class=\"c1\"># Decorators / context managers #</span>\n<span class=\"c1\">#################################</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Atomic</span><span class=\"p\">(</span><span class=\"n\">ContextDecorator</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Guarantee the atomic execution of a given block.</span>\n\n<span class=\"sd\">    An instance can be used either as a decorator or as a context manager.</span>\n\n<span class=\"sd\">    When it&#39;s used as a decorator, __call__ wraps the execution of the</span>\n<span class=\"sd\">    decorated function in the instance itself, used as a context manager.</span>\n\n<span class=\"sd\">    When it&#39;s used as a context manager, __enter__ creates a transaction or a</span>\n<span class=\"sd\">    savepoint, depending on whether a transaction is already in progress, and</span>\n<span class=\"sd\">    __exit__ commits the transaction or releases the savepoint on normal exit,</span>\n<span class=\"sd\">    and rolls back the transaction or to the savepoint on exceptions.</span>\n\n<span class=\"sd\">    It&#39;s possible to disable the creation of savepoints if the goal is to</span>\n<span class=\"sd\">    ensure that some code runs within a transaction without creating overhead.</span>\n\n<span class=\"sd\">    A stack of savepoints identifiers is maintained as an attribute of the</span>\n<span class=\"sd\">    connection. None denotes the absence of a savepoint.</span>\n\n<span class=\"sd\">    This allows reentrancy even if the same AtomicWrapper is reused. For</span>\n<span class=\"sd\">    example, it&#39;s possible to define `oa = atomic(&#39;other&#39;)` and use `@oa` or</span>\n<span class=\"sd\">    `with oa:` multiple times.</span>\n\n<span class=\"sd\">    Since database connections are thread-local, this is thread-safe.</span>\n\n<span class=\"sd\">    An atomic block can be tagged as durable. In this case, raise a</span>\n<span class=\"sd\">    RuntimeError if it&#39;s nested within another atomic block. This guarantees</span>\n<span class=\"sd\">    that database changes in a durable block are committed to the database when</span>\n<span class=\"sd\">    the block exists without error.</span>\n\n<span class=\"sd\">    This is a private API.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"p\">,</span> <span class=\"n\">savepoint</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">using</span> <span class=\"o\">=</span> <span class=\"n\">using</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">savepoint</span> <span class=\"o\">=</span> <span class=\"n\">savepoint</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">durable</span> <span class=\"o\">=</span> <span class=\"n\">durable</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_from_testcase</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__enter__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">durable</span>\n            <span class=\"ow\">and</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">atomic_blocks</span>\n            <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">atomic_blocks</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">_from_testcase</span>\n        <span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;A durable atomic block cannot be nested within another &quot;</span>\n                <span class=\"s2\">&quot;atomic block.&quot;</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Reset state when entering an outermost atomic block.</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">commit_on_exit</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">get_autocommit</span><span class=\"p\">():</span>\n                <span class=\"c1\"># Pretend we&#39;re already in an atomic block to bypass the code</span>\n                <span class=\"c1\"># that disables autocommit to enter a transaction, and make a</span>\n                <span class=\"c1\"># note to deal with this case in __exit__.</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">commit_on_exit</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We&#39;re already in a transaction; create a savepoint, unless we</span>\n            <span class=\"c1\"># were told not to or we&#39;re already waiting for a rollback. The</span>\n            <span class=\"c1\"># second condition avoids creating useless savepoints and prevents</span>\n            <span class=\"c1\"># overwriting needs_rollback until the rollback is performed.</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">savepoint</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span><span class=\"p\">:</span>\n                <span class=\"n\">sid</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint</span><span class=\"p\">()</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_ids</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">set_autocommit</span><span class=\"p\">(</span>\n                <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">force_begin_transaction_with_broken_autocommit</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n            <span class=\"p\">)</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">atomic_blocks</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__exit__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exc_type</span><span class=\"p\">,</span> <span class=\"n\">exc_value</span><span class=\"p\">,</span> <span class=\"n\">traceback</span><span class=\"p\">):</span>\n        <span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">get_connection</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">atomic_blocks</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_ids</span><span class=\"p\">:</span>\n            <span class=\"n\">sid</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_ids</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Prematurely unset this flag to allow using commit or rollback.</span>\n            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">closed_in_transaction</span><span class=\"p\">:</span>\n                <span class=\"c1\"># The database will perform a rollback by itself.</span>\n                <span class=\"c1\"># Wait until we exit the outermost block.</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"k\">elif</span> <span class=\"n\">exc_type</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Release savepoint if there is one</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sid</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_commit</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span>\n                        <span class=\"k\">except</span> <span class=\"n\">DatabaseError</span><span class=\"p\">:</span>\n                            <span class=\"k\">try</span><span class=\"p\">:</span>\n                                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_rollback</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span>\n                                <span class=\"c1\"># The savepoint won&#39;t be reused. Release it to</span>\n                                <span class=\"c1\"># minimize overhead for the database server.</span>\n                                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_commit</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span>\n                            <span class=\"k\">except</span> <span class=\"n\">Error</span><span class=\"p\">:</span>\n                                <span class=\"c1\"># If rolling back to a savepoint fails, mark for</span>\n                                <span class=\"c1\"># rollback at a higher level and avoid shadowing</span>\n                                <span class=\"c1\"># the original exception.</span>\n                                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                            <span class=\"k\">raise</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Commit transaction</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n                    <span class=\"k\">except</span> <span class=\"n\">DatabaseError</span><span class=\"p\">:</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span>\n                        <span class=\"k\">except</span> <span class=\"n\">Error</span><span class=\"p\">:</span>\n                            <span class=\"c1\"># An error during rollback means that something</span>\n                            <span class=\"c1\"># went wrong with the connection. Drop it.</span>\n                            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n                        <span class=\"k\">raise</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># This flag will be set to True again if there isn&#39;t a savepoint</span>\n                <span class=\"c1\"># allowing to perform the rollback at this level.</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Roll back to savepoint if there is one, mark for rollback</span>\n                    <span class=\"c1\"># otherwise.</span>\n                    <span class=\"k\">if</span> <span class=\"n\">sid</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                        <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>\n                            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_rollback</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span>\n                            <span class=\"c1\"># The savepoint won&#39;t be reused. Release it to</span>\n                            <span class=\"c1\"># minimize overhead for the database server.</span>\n                            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_commit</span><span class=\"p\">(</span><span class=\"n\">sid</span><span class=\"p\">)</span>\n                        <span class=\"k\">except</span> <span class=\"n\">Error</span><span class=\"p\">:</span>\n                            <span class=\"c1\"># If rolling back to a savepoint fails, mark for</span>\n                            <span class=\"c1\"># rollback at a higher level and avoid shadowing</span>\n                            <span class=\"c1\"># the original exception.</span>\n                            <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">needs_rollback</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Roll back transaction</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">rollback</span><span class=\"p\">()</span>\n                    <span class=\"k\">except</span> <span class=\"n\">Error</span><span class=\"p\">:</span>\n                        <span class=\"c1\"># An error during rollback means that something</span>\n                        <span class=\"c1\"># went wrong with the connection. Drop it.</span>\n                        <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Outermost block exit when autocommit was enabled.</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">closed_in_transaction</span><span class=\"p\">:</span>\n                    <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">set_autocommit</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"c1\"># Outermost block exit when autocommit was disabled.</span>\n            <span class=\"k\">elif</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">savepoint_ids</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">commit_on_exit</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">closed_in_transaction</span><span class=\"p\">:</span>\n                    <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">in_atomic_block</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<div class=\"viewcode-block\" id=\"atomic\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.atomic\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">atomic</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">savepoint</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Bare decorator: @atomic -- although the first argument is called</span>\n    <span class=\"c1\"># `using`, it&#39;s actually the function being decorated.</span>\n    <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Atomic</span><span class=\"p\">(</span><span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">,</span> <span class=\"n\">savepoint</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"p\">)(</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Decorator: @atomic(...) or context manager: with atomic(...): ...</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">Atomic</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">,</span> <span class=\"n\">savepoint</span><span class=\"p\">,</span> <span class=\"n\">durable</span><span class=\"p\">)</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_non_atomic_requests</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">_non_atomic_requests</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">_non_atomic_requests</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">using</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">view</span>\n\n\n<div class=\"viewcode-block\" id=\"non_atomic_requests\"><a class=\"viewcode-back\" href=\"../../../../topics/db/transactions/#django.db.transaction.non_atomic_requests\">[docs]</a><span class=\"k\">def</span> <span class=\"nf\">non_atomic_requests</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">_non_atomic_requests</span><span class=\"p\">(</span><span class=\"n\">using</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_DB_ALIAS</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">using</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">using</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_DB_ALIAS</span>\n        <span class=\"k\">return</span> <span class=\"k\">lambda</span> <span class=\"n\">view</span><span class=\"p\">:</span> <span class=\"n\">_non_atomic_requests</span><span class=\"p\">(</span><span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"p\">)</span></div>\n</pre></div>", "current_page_name": "_modules/django/db/transaction", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
