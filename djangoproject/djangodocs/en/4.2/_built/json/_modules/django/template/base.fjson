{"parents": [{"link": "../../../", "title": "Module code"}, {"link": "../../", "title": "django"}], "title": "django.template.base", "body": "<h1>Source code for django.template.base</h1><div class=\"highlight\"><pre>\n<span></span><span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">This is the Django template system.</span>\n\n<span class=\"sd\">How it works:</span>\n\n<span class=\"sd\">The Lexer.tokenize() method converts a template string (i.e., a string</span>\n<span class=\"sd\">containing markup with custom template tags) to tokens, which can be either</span>\n<span class=\"sd\">plain text (TokenType.TEXT), variables (TokenType.VAR), or block statements</span>\n<span class=\"sd\">(TokenType.BLOCK).</span>\n\n<span class=\"sd\">The Parser() class takes a list of tokens in its constructor, and its parse()</span>\n<span class=\"sd\">method returns a compiled template -- which is, under the hood, a list of</span>\n<span class=\"sd\">Node objects.</span>\n\n<span class=\"sd\">Each Node is responsible for creating some sort of output -- e.g. simple text</span>\n<span class=\"sd\">(TextNode), variable values in a given context (VariableNode), results of basic</span>\n<span class=\"sd\">logic (IfNode), results of looping (ForNode), or anything else. The core Node</span>\n<span class=\"sd\">types are TextNode, VariableNode, IfNode and ForNode, but plugin modules can</span>\n<span class=\"sd\">define their own custom node types.</span>\n\n<span class=\"sd\">Each Node has a render() method, which takes a Context and returns a string of</span>\n<span class=\"sd\">the rendered node. For example, the render() method of a Variable Node returns</span>\n<span class=\"sd\">the variable&#39;s value as a string. The render() method of a ForNode returns the</span>\n<span class=\"sd\">rendered output of whatever was inside the loop, recursively.</span>\n\n<span class=\"sd\">The Template class is a convenient wrapper that takes care of template</span>\n<span class=\"sd\">compilation and rendering.</span>\n\n<span class=\"sd\">Usage:</span>\n\n<span class=\"sd\">The only thing you should ever use directly in this file is the Template class.</span>\n<span class=\"sd\">Create a compiled template object with a template_string, then call render()</span>\n<span class=\"sd\">with a context. In the compilation stage, the TemplateSyntaxError exception</span>\n<span class=\"sd\">will be raised if the template doesn&#39;t have proper syntax.</span>\n\n<span class=\"sd\">Sample code:</span>\n\n<span class=\"sd\">&gt;&gt;&gt; from django import template</span>\n<span class=\"sd\">&gt;&gt;&gt; s = &#39;&lt;html&gt;{% if test %}&lt;h1&gt;{{ varvalue }}&lt;/h1&gt;{% endif %}&lt;/html&gt;&#39;</span>\n<span class=\"sd\">&gt;&gt;&gt; t = template.Template(s)</span>\n\n<span class=\"sd\">(t is now a compiled template, and its render() method can be called multiple</span>\n<span class=\"sd\">times with multiple contexts)</span>\n\n<span class=\"sd\">&gt;&gt;&gt; c = template.Context({&#39;test&#39;:True, &#39;varvalue&#39;: &#39;Hello&#39;})</span>\n<span class=\"sd\">&gt;&gt;&gt; t.render(c)</span>\n<span class=\"sd\">&#39;&lt;html&gt;&lt;h1&gt;Hello&lt;/h1&gt;&lt;/html&gt;&#39;</span>\n<span class=\"sd\">&gt;&gt;&gt; c = template.Context({&#39;test&#39;:False, &#39;varvalue&#39;: &#39;Hello&#39;})</span>\n<span class=\"sd\">&gt;&gt;&gt; t.render(c)</span>\n<span class=\"sd\">&#39;&lt;html&gt;&lt;/html&gt;&#39;</span>\n<span class=\"sd\">&quot;&quot;&quot;</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">inspect</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">re</span>\n<span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.context</span> <span class=\"kn\">import</span> <span class=\"n\">BaseContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.formats</span> <span class=\"kn\">import</span> <span class=\"n\">localize</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.html</span> <span class=\"kn\">import</span> <span class=\"n\">conditional_escape</span><span class=\"p\">,</span> <span class=\"n\">escape</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.regex_helper</span> <span class=\"kn\">import</span> <span class=\"n\">_lazy_re_compile</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.safestring</span> <span class=\"kn\">import</span> <span class=\"n\">SafeData</span><span class=\"p\">,</span> <span class=\"n\">SafeString</span><span class=\"p\">,</span> <span class=\"n\">mark_safe</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.text</span> <span class=\"kn\">import</span> <span class=\"n\">get_text_list</span><span class=\"p\">,</span> <span class=\"n\">smart_split</span><span class=\"p\">,</span> <span class=\"n\">unescape_string_literal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.timezone</span> <span class=\"kn\">import</span> <span class=\"n\">template_localtime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">gettext_lazy</span><span class=\"p\">,</span> <span class=\"n\">pgettext_lazy</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateSyntaxError</span>\n\n<span class=\"c1\"># template syntax constants</span>\n<span class=\"n\">FILTER_SEPARATOR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;|&quot;</span>\n<span class=\"n\">FILTER_ARGUMENT_SEPARATOR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;:&quot;</span>\n<span class=\"n\">VARIABLE_ATTRIBUTE_SEPARATOR</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;.&quot;</span>\n<span class=\"n\">BLOCK_TAG_START</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;{%&quot;</span>\n<span class=\"n\">BLOCK_TAG_END</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;%}&quot;</span>\n<span class=\"n\">VARIABLE_TAG_START</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;{{&quot;</span>\n<span class=\"n\">VARIABLE_TAG_END</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;}}&quot;</span>\n<span class=\"n\">COMMENT_TAG_START</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;{#&quot;</span>\n<span class=\"n\">COMMENT_TAG_END</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;#}&quot;</span>\n<span class=\"n\">SINGLE_BRACE_START</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;{&quot;</span>\n<span class=\"n\">SINGLE_BRACE_END</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;}&quot;</span>\n\n<span class=\"c1\"># what to report as the origin for templates that come from non-loader sources</span>\n<span class=\"c1\"># (e.g. strings)</span>\n<span class=\"n\">UNKNOWN_SOURCE</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;unknown source&gt;&quot;</span>\n\n<span class=\"c1\"># Match BLOCK_TAG_*, VARIABLE_TAG_*, and COMMENT_TAG_* tags and capture the</span>\n<span class=\"c1\"># entire tag, including start/end delimiters. Using re.compile() is faster</span>\n<span class=\"c1\"># than instantiating SimpleLazyObject with _lazy_re_compile().</span>\n<span class=\"n\">tag_re</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;({%.*?%}|{{.*?}}|{#.*?#})&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s2\">&quot;django.template&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TokenType</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">TEXT</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">VAR</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">BLOCK</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">COMMENT</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VariableDoesNotExist</span><span class=\"p\">(</span><span class=\"ne\">Exception</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">()):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"n\">msg</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">params</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">msg</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">params</span>\n\n\n<div class=\"viewcode-block\" id=\"Origin\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Origin\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Origin</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">loader</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"n\">template_name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loader</span> <span class=\"o\">=</span> <span class=\"n\">loader</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\"> name=</span><span class=\"si\">%r</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">(</span>\n            <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">,</span> <span class=\"n\">Origin</span><span class=\"p\">)</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">name</span>\n            <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loader</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">loader</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">loader_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"vm\">__module__</span><span class=\"p\">,</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span></div>\n\n\n<div class=\"viewcode-block\" id=\"Template\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Template\">[docs]</a><span class=\"k\">class</span> <span class=\"nc\">Template</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_string</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">engine</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># If Template is instantiated directly rather than from an Engine and</span>\n        <span class=\"c1\"># exactly one Django template engine is configured, use that engine.</span>\n        <span class=\"c1\"># This is required to preserve backwards-compatibility for direct use</span>\n        <span class=\"c1\"># e.g. Template(&#39;...&#39;).render(Context({...}))</span>\n        <span class=\"k\">if</span> <span class=\"n\">engine</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"kn\">from</span> <span class=\"nn\">.engine</span> <span class=\"kn\">import</span> <span class=\"n\">Engine</span>\n\n            <span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">Engine</span><span class=\"o\">.</span><span class=\"n\">get_default</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">origin</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"n\">Origin</span><span class=\"p\">(</span><span class=\"n\">UNKNOWN_SOURCE</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"n\">origin</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">engine</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">template_string</span><span class=\"p\">)</span>  <span class=\"c1\"># May be lazy.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nodelist</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compile_nodelist</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&lt;</span><span class=\"si\">%s</span><span class=\"s1\"> template_string=&quot;</span><span class=\"si\">%s</span><span class=\"s1\">...&quot;&gt;&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">[:</span><span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nodelist</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n\n<div class=\"viewcode-block\" id=\"Template.render\"><a class=\"viewcode-back\" href=\"../../../../ref/templates/api/#django.template.Template.render\">[docs]</a>    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Display stage -- can be called many times&quot;</span>\n        <span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">render_context</span><span class=\"o\">.</span><span class=\"n\">push_state</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">with</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">bind_template</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n                    <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n                    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span></div>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compile_nodelist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Parse and compile the template source into a nodelist. If debug</span>\n<span class=\"sd\">        is True and an exception occurs during parsing, the exception is</span>\n<span class=\"sd\">        annotated with contextual line information where it occurred in the</span>\n<span class=\"sd\">        template source.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">:</span>\n            <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">DebugLexer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">lexer</span> <span class=\"o\">=</span> <span class=\"n\">Lexer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">)</span>\n\n        <span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"n\">lexer</span><span class=\"o\">.</span><span class=\"n\">tokenize</span><span class=\"p\">()</span>\n        <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">(</span>\n            <span class=\"n\">tokens</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">template_libraries</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">template_builtins</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">:</span>\n                <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">template_debug</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_exception_info</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_exception_info</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a dictionary containing contextual line information of where</span>\n<span class=\"sd\">        the exception occurred in the template. The following information is</span>\n<span class=\"sd\">        provided:</span>\n\n<span class=\"sd\">        message</span>\n<span class=\"sd\">            The message of the exception raised.</span>\n\n<span class=\"sd\">        source_lines</span>\n<span class=\"sd\">            The lines before, after, and including the line the exception</span>\n<span class=\"sd\">            occurred on.</span>\n\n<span class=\"sd\">        line</span>\n<span class=\"sd\">            The line number the exception occurred on.</span>\n\n<span class=\"sd\">        before, during, after</span>\n<span class=\"sd\">            The line the exception occurred on split into three parts:</span>\n<span class=\"sd\">            1. The content before the token that raised the error.</span>\n<span class=\"sd\">            2. The token that raised the error.</span>\n<span class=\"sd\">            3. The content after the token that raised the error.</span>\n\n<span class=\"sd\">        total</span>\n<span class=\"sd\">            The number of lines in source_lines.</span>\n\n<span class=\"sd\">        top</span>\n<span class=\"sd\">            The line number where source_lines starts.</span>\n\n<span class=\"sd\">        bottom</span>\n<span class=\"sd\">            The line number where source_lines ends.</span>\n\n<span class=\"sd\">        start</span>\n<span class=\"sd\">            The start position of the token in the template source.</span>\n\n<span class=\"sd\">        end</span>\n<span class=\"sd\">            The end position of the token in the template source.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">position</span>\n        <span class=\"n\">context_lines</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n        <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">upto</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">source_lines</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">during</span> <span class=\"o\">=</span> <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"nb\">next</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">linebreak_iter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">)):</span>\n            <span class=\"k\">if</span> <span class=\"n\">start</span> <span class=\"o\">&gt;=</span> <span class=\"n\">upto</span> <span class=\"ow\">and</span> <span class=\"n\">end</span> <span class=\"o\">&lt;=</span> <span class=\"nb\">next</span><span class=\"p\">:</span>\n                <span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">num</span>\n                <span class=\"n\">before</span> <span class=\"o\">=</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">[</span><span class=\"n\">upto</span><span class=\"p\">:</span><span class=\"n\">start</span><span class=\"p\">])</span>\n                <span class=\"n\">during</span> <span class=\"o\">=</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:</span><span class=\"n\">end</span><span class=\"p\">])</span>\n                <span class=\"n\">after</span> <span class=\"o\">=</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">[</span><span class=\"n\">end</span><span class=\"p\">:</span><span class=\"nb\">next</span><span class=\"p\">])</span>\n            <span class=\"n\">source_lines</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">num</span><span class=\"p\">,</span> <span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"p\">[</span><span class=\"n\">upto</span><span class=\"p\">:</span><span class=\"nb\">next</span><span class=\"p\">])))</span>\n            <span class=\"n\">upto</span> <span class=\"o\">=</span> <span class=\"nb\">next</span>\n        <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">source_lines</span><span class=\"p\">)</span>\n\n        <span class=\"n\">top</span> <span class=\"o\">=</span> <span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">-</span> <span class=\"n\">context_lines</span><span class=\"p\">)</span>\n        <span class=\"n\">bottom</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">+</span> <span class=\"mi\">1</span> <span class=\"o\">+</span> <span class=\"n\">context_lines</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># In some rare cases exc_value.args can be empty or an invalid</span>\n        <span class=\"c1\"># string.</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">IndexError</span><span class=\"p\">,</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">):</span>\n            <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;(Could not get exception message)&quot;</span>\n\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;message&quot;</span><span class=\"p\">:</span> <span class=\"n\">message</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;source_lines&quot;</span><span class=\"p\">:</span> <span class=\"n\">source_lines</span><span class=\"p\">[</span><span class=\"n\">top</span><span class=\"p\">:</span><span class=\"n\">bottom</span><span class=\"p\">],</span>\n            <span class=\"s2\">&quot;before&quot;</span><span class=\"p\">:</span> <span class=\"n\">before</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;during&quot;</span><span class=\"p\">:</span> <span class=\"n\">during</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;after&quot;</span><span class=\"p\">:</span> <span class=\"n\">after</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;top&quot;</span><span class=\"p\">:</span> <span class=\"n\">top</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;bottom&quot;</span><span class=\"p\">:</span> <span class=\"n\">bottom</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;total&quot;</span><span class=\"p\">:</span> <span class=\"n\">total</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;line&quot;</span><span class=\"p\">:</span> <span class=\"n\">line</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">origin</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;start&quot;</span><span class=\"p\">:</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;end&quot;</span><span class=\"p\">:</span> <span class=\"n\">end</span><span class=\"p\">,</span>\n        <span class=\"p\">}</span></div>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">linebreak_iter</span><span class=\"p\">(</span><span class=\"n\">template_source</span><span class=\"p\">):</span>\n    <span class=\"k\">yield</span> <span class=\"mi\">0</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">template_source</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"n\">p</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">yield</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">template_source</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"n\">p</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">yield</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">template_source</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Token</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token_type</span><span class=\"p\">,</span> <span class=\"n\">contents</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        A token representing a string from the template.</span>\n\n<span class=\"sd\">        token_type</span>\n<span class=\"sd\">            A TokenType, either .TEXT, .VAR, .BLOCK, or .COMMENT.</span>\n\n<span class=\"sd\">        contents</span>\n<span class=\"sd\">            The token source string.</span>\n\n<span class=\"sd\">        position</span>\n<span class=\"sd\">            An optional tuple containing the start and end index of the token</span>\n<span class=\"sd\">            in the template source. This is used for traceback information</span>\n<span class=\"sd\">            when debug is on.</span>\n\n<span class=\"sd\">        lineno</span>\n<span class=\"sd\">            The line number the token appears on in the template source.</span>\n<span class=\"sd\">            This is used for traceback information and gettext files.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token_type</span> <span class=\"o\">=</span> <span class=\"n\">token_type</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">contents</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lineno</span> <span class=\"o\">=</span> <span class=\"n\">lineno</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">position</span> <span class=\"o\">=</span> <span class=\"n\">position</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">token_name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token_type</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">capitalize</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&lt;</span><span class=\"si\">%s</span><span class=\"s1\"> token: &quot;</span><span class=\"si\">%s</span><span class=\"s1\">...&quot;&gt;&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">token_name</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"p\">[:</span><span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">split_contents</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">split</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">bits</span> <span class=\"o\">=</span> <span class=\"n\">smart_split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">bit</span> <span class=\"ow\">in</span> <span class=\"n\">bits</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle translation-marked template pieces</span>\n            <span class=\"k\">if</span> <span class=\"n\">bit</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">((</span><span class=\"s1\">&#39;_(&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_(&#39;&quot;</span><span class=\"p\">)):</span>\n                <span class=\"n\">sentinel</span> <span class=\"o\">=</span> <span class=\"n\">bit</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;)&quot;</span>\n                <span class=\"n\">trans_bit</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">bit</span><span class=\"p\">]</span>\n                <span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">bit</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"n\">sentinel</span><span class=\"p\">):</span>\n                    <span class=\"n\">bit</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span>\n                    <span class=\"n\">trans_bit</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bit</span><span class=\"p\">)</span>\n                <span class=\"n\">bit</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">trans_bit</span><span class=\"p\">)</span>\n            <span class=\"n\">split</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">bit</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">split</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Lexer</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">template_string</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_string</span> <span class=\"o\">=</span> <span class=\"n\">template_string</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">&#39;&lt;</span><span class=\"si\">%s</span><span class=\"s1\"> template_string=&quot;</span><span class=\"si\">%s</span><span class=\"s1\">...&quot;, verbatim=</span><span class=\"si\">%s</span><span class=\"s1\">&gt;&#39;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_string</span><span class=\"p\">[:</span><span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">),</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tokenize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a list of tokens from a given template_string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">in_tag</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">lineno</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">token_string</span> <span class=\"ow\">in</span> <span class=\"n\">tag_re</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_string</span><span class=\"p\">):</span>\n            <span class=\"k\">if</span> <span class=\"n\">token_string</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"n\">token_string</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">,</span> <span class=\"n\">in_tag</span><span class=\"p\">))</span>\n                <span class=\"n\">lineno</span> <span class=\"o\">+=</span> <span class=\"n\">token_string</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">in_tag</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">in_tag</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token_string</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">,</span> <span class=\"n\">in_tag</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Convert the given token string into a new Token object and return it.</span>\n<span class=\"sd\">        If in_tag is True, we are processing something that matched a tag,</span>\n<span class=\"sd\">        otherwise it should be treated as a literal string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">in_tag</span><span class=\"p\">:</span>\n            <span class=\"c1\"># The [0:2] and [2:-2] ranges below strip off *_TAG_START and</span>\n            <span class=\"c1\"># *_TAG_END. The 2&#39;s are hard-coded for performance. Using</span>\n            <span class=\"c1\"># len(BLOCK_TAG_START) would permit BLOCK_TAG_START to be</span>\n            <span class=\"c1\"># different, but it&#39;s not likely that the TAG_START values will</span>\n            <span class=\"c1\"># change anytime soon.</span>\n            <span class=\"n\">token_start</span> <span class=\"o\">=</span> <span class=\"n\">token_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n            <span class=\"k\">if</span> <span class=\"n\">token_start</span> <span class=\"o\">==</span> <span class=\"n\">BLOCK_TAG_START</span><span class=\"p\">:</span>\n                <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">token_string</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Then a verbatim block is being processed.</span>\n                    <span class=\"k\">if</span> <span class=\"n\">content</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span><span class=\"p\">:</span>\n                        <span class=\"k\">return</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">,</span> <span class=\"n\">token_string</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">)</span>\n                    <span class=\"c1\"># Otherwise, the current verbatim block is ending.</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n                <span class=\"k\">elif</span> <span class=\"n\">content</span><span class=\"p\">[:</span><span class=\"mi\">9</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s2\">&quot;verbatim&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;verbatim &quot;</span><span class=\"p\">):</span>\n                    <span class=\"c1\"># Then a verbatim block is starting.</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;end</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">content</span>\n                <span class=\"k\">return</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"n\">BLOCK</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">verbatim</span><span class=\"p\">:</span>\n                <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">token_string</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n                <span class=\"k\">if</span> <span class=\"n\">token_start</span> <span class=\"o\">==</span> <span class=\"n\">VARIABLE_TAG_START</span><span class=\"p\">:</span>\n                    <span class=\"k\">return</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"n\">VAR</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">)</span>\n                <span class=\"c1\"># BLOCK_TAG_START was handled above.</span>\n                <span class=\"k\">assert</span> <span class=\"n\">token_start</span> <span class=\"o\">==</span> <span class=\"n\">COMMENT_TAG_START</span>\n                <span class=\"k\">return</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"n\">COMMENT</span><span class=\"p\">,</span> <span class=\"n\">content</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Token</span><span class=\"p\">(</span><span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"n\">TEXT</span><span class=\"p\">,</span> <span class=\"n\">token_string</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DebugLexer</span><span class=\"p\">(</span><span class=\"n\">Lexer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_tag_re_split_positions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">tag_re</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_string</span><span class=\"p\">):</span>\n            <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">span</span><span class=\"p\">()</span>\n            <span class=\"k\">yield</span> <span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"n\">start</span>\n            <span class=\"k\">yield</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span>\n            <span class=\"n\">last</span> <span class=\"o\">=</span> <span class=\"n\">end</span>\n        <span class=\"k\">yield</span> <span class=\"n\">last</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_string</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># This parallels the use of tag_re.split() in Lexer.tokenize().</span>\n    <span class=\"k\">def</span> <span class=\"nf\">_tag_re_split</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">position</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tag_re_split_positions</span><span class=\"p\">():</span>\n            <span class=\"k\">yield</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_string</span><span class=\"p\">[</span><span class=\"nb\">slice</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">position</span><span class=\"p\">)],</span> <span class=\"n\">position</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">tokenize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Split a template string into tokens and annotates each token with its</span>\n<span class=\"sd\">        start and end position in the source. This is slower than the default</span>\n<span class=\"sd\">        lexer so only use it when debug is True.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># For maintainability, it is helpful if the implementation below can</span>\n        <span class=\"c1\"># continue to closely parallel Lexer.tokenize()&#39;s implementation.</span>\n        <span class=\"n\">in_tag</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">lineno</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">token_string</span><span class=\"p\">,</span> <span class=\"n\">position</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tag_re_split</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"n\">token_string</span><span class=\"p\">:</span>\n                <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">create_token</span><span class=\"p\">(</span><span class=\"n\">token_string</span><span class=\"p\">,</span> <span class=\"n\">position</span><span class=\"p\">,</span> <span class=\"n\">lineno</span><span class=\"p\">,</span> <span class=\"n\">in_tag</span><span class=\"p\">))</span>\n                <span class=\"n\">lineno</span> <span class=\"o\">+=</span> <span class=\"n\">token_string</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">in_tag</span> <span class=\"o\">=</span> <span class=\"ow\">not</span> <span class=\"n\">in_tag</span>\n        <span class=\"k\">return</span> <span class=\"n\">result</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Parser</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">tokens</span><span class=\"p\">,</span> <span class=\"n\">libraries</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">builtins</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Reverse the tokens so delete_first_token(), prepend_token(), and</span>\n        <span class=\"c1\"># next_token() can operate at the end of the list in constant time.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">reversed</span><span class=\"p\">(</span><span class=\"n\">tokens</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_stack</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">libraries</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">libraries</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"n\">builtins</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">builtins</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">libraries</span> <span class=\"o\">=</span> <span class=\"n\">libraries</span>\n        <span class=\"k\">for</span> <span class=\"n\">builtin</span> <span class=\"ow\">in</span> <span class=\"n\">builtins</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_library</span><span class=\"p\">(</span><span class=\"n\">builtin</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"n\">origin</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\"> tokens=</span><span class=\"si\">%r</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">parse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parse_until</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Iterate through the parser tokens and compiles each one into a node.</span>\n\n<span class=\"sd\">        If parse_until is provided, parsing will stop once one of the</span>\n<span class=\"sd\">        specified tokens has been reached. This is formatted as a list of</span>\n<span class=\"sd\">        tokens, e.g. [&#39;elif&#39;, &#39;else&#39;, &#39;endif&#39;]. If no matching token is</span>\n<span class=\"sd\">        reached, raise an exception with the unclosed block tag details.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"n\">parse_until</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">parse_until</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">nodelist</span> <span class=\"o\">=</span> <span class=\"n\">NodeList</span><span class=\"p\">()</span>\n        <span class=\"k\">while</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"p\">:</span>\n            <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">next_token</span><span class=\"p\">()</span>\n            <span class=\"c1\"># Use the raw values here for TokenType.* for a tiny performance boost.</span>\n            <span class=\"n\">token_type</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">token_type</span><span class=\"o\">.</span><span class=\"n\">value</span>\n            <span class=\"k\">if</span> <span class=\"n\">token_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>  <span class=\"c1\"># TokenType.TEXT</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extend_nodelist</span><span class=\"p\">(</span><span class=\"n\">nodelist</span><span class=\"p\">,</span> <span class=\"n\">TextNode</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"p\">),</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">token_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>  <span class=\"c1\"># TokenType.VAR</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                        <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Empty variable tag on line </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lineno</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">filter_expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">compile_filter</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"n\">TemplateSyntaxError</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"n\">var_node</span> <span class=\"o\">=</span> <span class=\"n\">VariableNode</span><span class=\"p\">(</span><span class=\"n\">filter_expression</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extend_nodelist</span><span class=\"p\">(</span><span class=\"n\">nodelist</span><span class=\"p\">,</span> <span class=\"n\">var_node</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n            <span class=\"k\">elif</span> <span class=\"n\">token_type</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>  <span class=\"c1\"># TokenType.BLOCK</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">IndexError</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Empty block tag on line </span><span class=\"si\">%d</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"n\">command</span> <span class=\"ow\">in</span> <span class=\"n\">parse_until</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># A matching token has been reached. Return control to</span>\n                    <span class=\"c1\"># the caller. Put the token back on the token list so the</span>\n                    <span class=\"c1\"># caller knows where it terminated.</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prepend_token</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n                    <span class=\"k\">return</span> <span class=\"n\">nodelist</span>\n                <span class=\"c1\"># Add the token to the command stack. This is used for error</span>\n                <span class=\"c1\"># messages if further parsing fails due to an unclosed block</span>\n                <span class=\"c1\"># tag.</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">))</span>\n                <span class=\"c1\"># Get the tag callback function from the ones registered with</span>\n                <span class=\"c1\"># the parser.</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">compile_func</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">[</span><span class=\"n\">command</span><span class=\"p\">]</span>\n                <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invalid_block_tag</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">parse_until</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Compile the callback into a node object and add it to</span>\n                <span class=\"c1\"># the node list.</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>\n                    <span class=\"n\">compiled_result</span> <span class=\"o\">=</span> <span class=\"n\">compile_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n                <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extend_nodelist</span><span class=\"p\">(</span><span class=\"n\">nodelist</span><span class=\"p\">,</span> <span class=\"n\">compiled_result</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n                <span class=\"c1\"># Compile success. Remove the token from the command stack.</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">parse_until</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclosed_block_tag</span><span class=\"p\">(</span><span class=\"n\">parse_until</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">nodelist</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">skip_past</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">endtag</span><span class=\"p\">):</span>\n        <span class=\"k\">while</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"p\">:</span>\n            <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">next_token</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">token_type</span> <span class=\"o\">==</span> <span class=\"n\">TokenType</span><span class=\"o\">.</span><span class=\"n\">BLOCK</span> <span class=\"ow\">and</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span> <span class=\"o\">==</span> <span class=\"n\">endtag</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">unclosed_block_tag</span><span class=\"p\">([</span><span class=\"n\">endtag</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">extend_nodelist</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodelist</span><span class=\"p\">,</span> <span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Check that non-text nodes don&#39;t appear before an extends tag.</span>\n        <span class=\"k\">if</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">must_be_first</span> <span class=\"ow\">and</span> <span class=\"n\">nodelist</span><span class=\"o\">.</span><span class=\"n\">contains_nontext</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">token</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> must be the first tag in the template.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">node</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">,</span> <span class=\"n\">TextNode</span><span class=\"p\">):</span>\n            <span class=\"n\">nodelist</span><span class=\"o\">.</span><span class=\"n\">contains_nontext</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"c1\"># Set origin and token here since we can&#39;t modify the node __init__()</span>\n        <span class=\"c1\"># method.</span>\n        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">token</span>\n        <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">origin</span>\n        <span class=\"n\">nodelist</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return an exception annotated with the originating token. Since the</span>\n<span class=\"sd\">        parser can be called recursively, check if a token is already set. This</span>\n<span class=\"sd\">        ensures the innermost token is highlighted if an exception occurs,</span>\n<span class=\"sd\">        e.g. a compile error within the body of an if statement.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n            <span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"s2\">&quot;token&quot;</span><span class=\"p\">):</span>\n            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">token</span>\n        <span class=\"k\">return</span> <span class=\"n\">e</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">invalid_block_tag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">parse_until</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">parse_until</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n                <span class=\"n\">token</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;Invalid block tag on line </span><span class=\"si\">%d</span><span class=\"s2\">: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;, expected </span><span class=\"si\">%s</span><span class=\"s2\">. Did you &quot;</span>\n                <span class=\"s2\">&quot;forget to register or load this tag?&quot;</span>\n                <span class=\"o\">%</span> <span class=\"p\">(</span>\n                    <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"p\">,</span>\n                    <span class=\"n\">command</span><span class=\"p\">,</span>\n                    <span class=\"n\">get_text_list</span><span class=\"p\">([</span><span class=\"s2\">&quot;&#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">p</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">parse_until</span><span class=\"p\">],</span> <span class=\"s2\">&quot;or&quot;</span><span class=\"p\">),</span>\n                <span class=\"p\">),</span>\n            <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;Invalid block tag on line </span><span class=\"si\">%d</span><span class=\"s2\">: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;. Did you forget to register &quot;</span>\n            <span class=\"s2\">&quot;or load this tag?&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">unclosed_block_tag</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parse_until</span><span class=\"p\">):</span>\n        <span class=\"n\">command</span><span class=\"p\">,</span> <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">command_stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Unclosed tag on line </span><span class=\"si\">%d</span><span class=\"s2\">: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;. Looking for one of: </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">lineno</span><span class=\"p\">,</span>\n            <span class=\"n\">command</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;, &quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">parse_until</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">next_token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">prepend_token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">delete_first_token</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">del</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tokens</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_library</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lib</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">tags</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">filters</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">compile_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Convenient wrapper for FilterExpression</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">FilterExpression</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">find_filter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filter_name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">filter_name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filters</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filters</span><span class=\"p\">[</span><span class=\"n\">filter_name</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Invalid filter: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">filter_name</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># This only matches constant *strings* (things in quotes or marked for</span>\n<span class=\"c1\"># translation). Numbers are treated as variables for implementation reasons</span>\n<span class=\"c1\"># (so that they retain their type when passed to filters).</span>\n<span class=\"n\">constant_string</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">(?:</span><span class=\"si\">%(i18n_open)s%(strdq)s%(i18n_close)s</span><span class=\"s2\">|</span>\n<span class=\"si\">%(i18n_open)s%(strsq)s%(i18n_close)s</span><span class=\"s2\">|</span>\n<span class=\"si\">%(strdq)s</span><span class=\"s2\">|</span>\n<span class=\"si\">%(strsq)s</span><span class=\"s2\">)</span>\n<span class=\"s2\">&quot;&quot;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;strdq&quot;</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s1\">&#39;&quot;[^&quot;</span><span class=\"se\">\\\\</span><span class=\"s1\">]*(?:</span><span class=\"se\">\\\\</span><span class=\"s1\">.[^&quot;</span><span class=\"se\">\\\\</span><span class=\"s1\">]*)*&quot;&#39;</span><span class=\"p\">,</span>  <span class=\"c1\"># double-quoted string</span>\n    <span class=\"s2\">&quot;strsq&quot;</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;&#39;[^&#39;</span><span class=\"se\">\\\\</span><span class=\"s2\">]*(?:</span><span class=\"se\">\\\\</span><span class=\"s2\">.[^&#39;</span><span class=\"se\">\\\\</span><span class=\"s2\">]*)*&#39;&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># single-quoted string</span>\n    <span class=\"s2\">&quot;i18n_open&quot;</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"s2\">&quot;_(&quot;</span><span class=\"p\">),</span>\n    <span class=\"s2\">&quot;i18n_close&quot;</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"s2\">&quot;)&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n<span class=\"n\">constant_string</span> <span class=\"o\">=</span> <span class=\"n\">constant_string</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"se\">\\n</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">filter_raw_string</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;&quot;&quot;</span>\n<span class=\"s2\">^(?P&lt;constant&gt;</span><span class=\"si\">%(constant)s</span><span class=\"s2\">)|</span>\n<span class=\"s2\">^(?P&lt;var&gt;[</span><span class=\"si\">%(var_chars)s</span><span class=\"s2\">]+|</span><span class=\"si\">%(num)s</span><span class=\"s2\">)|</span>\n<span class=\"s2\"> (?:\\s*</span><span class=\"si\">%(filter_sep)s</span><span class=\"s2\">\\s*</span>\n<span class=\"s2\">     (?P&lt;filter_name&gt;\\w+)</span>\n<span class=\"s2\">         (?:</span><span class=\"si\">%(arg_sep)s</span><span class=\"s2\"></span>\n<span class=\"s2\">             (?:</span>\n<span class=\"s2\">              (?P&lt;constant_arg&gt;</span><span class=\"si\">%(constant)s</span><span class=\"s2\">)|</span>\n<span class=\"s2\">              (?P&lt;var_arg&gt;[</span><span class=\"si\">%(var_chars)s</span><span class=\"s2\">]+|</span><span class=\"si\">%(num)s</span><span class=\"s2\">)</span>\n<span class=\"s2\">             )</span>\n<span class=\"s2\">         )?</span>\n<span class=\"s2\"> )&quot;&quot;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;constant&quot;</span><span class=\"p\">:</span> <span class=\"n\">constant_string</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;num&quot;</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;[-+\\.]?\\d[\\d\\.e]*&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;var_chars&quot;</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s2\">&quot;\\w\\.&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;filter_sep&quot;</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">FILTER_SEPARATOR</span><span class=\"p\">),</span>\n    <span class=\"s2\">&quot;arg_sep&quot;</span><span class=\"p\">:</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">(</span><span class=\"n\">FILTER_ARGUMENT_SEPARATOR</span><span class=\"p\">),</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">filter_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"n\">filter_raw_string</span><span class=\"p\">,</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">FilterExpression</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parse a variable token and its optional filters (all as a single string),</span>\n<span class=\"sd\">    and return a list of tuples of the filter name and arguments.</span>\n<span class=\"sd\">    Sample::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; token = &#39;variable|default:&quot;Default value&quot;|date:&quot;Y-m-d&quot;&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; p = Parser(&#39;&#39;)</span>\n<span class=\"sd\">        &gt;&gt;&gt; fe = FilterExpression(token, p)</span>\n<span class=\"sd\">        &gt;&gt;&gt; len(fe.filters)</span>\n<span class=\"sd\">        2</span>\n<span class=\"sd\">        &gt;&gt;&gt; fe.var</span>\n<span class=\"sd\">        &lt;Variable: &#39;variable&#39;&gt;</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;token&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;filters&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;var&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is_var&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">token</span>\n        <span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"n\">filter_re</span><span class=\"o\">.</span><span class=\"n\">finditer</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">)</span>\n        <span class=\"n\">var_obj</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">upto</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"k\">for</span> <span class=\"n\">match</span> <span class=\"ow\">in</span> <span class=\"n\">matches</span><span class=\"p\">:</span>\n            <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n            <span class=\"k\">if</span> <span class=\"n\">upto</span> <span class=\"o\">!=</span> <span class=\"n\">start</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;Could not parse some characters: &quot;</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">|</span><span class=\"si\">%s</span><span class=\"s2\">|</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">[:</span><span class=\"n\">upto</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"p\">[</span><span class=\"n\">upto</span><span class=\"p\">:</span><span class=\"n\">start</span><span class=\"p\">],</span> <span class=\"n\">token</span><span class=\"p\">[</span><span class=\"n\">start</span><span class=\"p\">:])</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">var_obj</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">constant</span> <span class=\"o\">:=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;constant&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>\n                        <span class=\"n\">var_obj</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">constant</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">({})</span>\n                    <span class=\"k\">except</span> <span class=\"n\">VariableDoesNotExist</span><span class=\"p\">:</span>\n                        <span class=\"n\">var_obj</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">elif</span> <span class=\"p\">(</span><span class=\"n\">var</span> <span class=\"o\">:=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;var&quot;</span><span class=\"p\">])</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Could not find variable at start of </span><span class=\"si\">%s</span><span class=\"s2\">.&quot;</span> <span class=\"o\">%</span> <span class=\"n\">token</span>\n                    <span class=\"p\">)</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">var_obj</span> <span class=\"o\">=</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">filter_name</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;filter_name&quot;</span><span class=\"p\">]</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n                <span class=\"k\">if</span> <span class=\"n\">constant_arg</span> <span class=\"o\">:=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;constant_arg&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">constant_arg</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">({})))</span>\n                <span class=\"k\">elif</span> <span class=\"n\">var_arg</span> <span class=\"o\">:=</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"s2\">&quot;var_arg&quot;</span><span class=\"p\">]:</span>\n                    <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">var_arg</span><span class=\"p\">)))</span>\n                <span class=\"n\">filter_func</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">find_filter</span><span class=\"p\">(</span><span class=\"n\">filter_name</span><span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">args_check</span><span class=\"p\">(</span><span class=\"n\">filter_name</span><span class=\"p\">,</span> <span class=\"n\">filter_func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n                <span class=\"n\">filters</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">filter_func</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">))</span>\n            <span class=\"n\">upto</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">end</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">upto</span> <span class=\"o\">!=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Could not parse the remainder: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; &quot;</span>\n                <span class=\"s2\">&quot;from &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">token</span><span class=\"p\">[</span><span class=\"n\">upto</span><span class=\"p\">:],</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filters</span> <span class=\"o\">=</span> <span class=\"n\">filters</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">var_obj</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_var</span> <span class=\"o\">=</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">var_obj</span><span class=\"p\">,</span> <span class=\"n\">Variable</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">ignore_failures</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_var</span><span class=\"p\">:</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"k\">except</span> <span class=\"n\">VariableDoesNotExist</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">ignore_failures</span><span class=\"p\">:</span>\n                    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">string_if_invalid</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span>\n                    <span class=\"k\">if</span> <span class=\"n\">string_if_invalid</span><span class=\"p\">:</span>\n                        <span class=\"k\">if</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">string_if_invalid</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"n\">string_if_invalid</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span>\n                        <span class=\"k\">else</span><span class=\"p\">:</span>\n                            <span class=\"k\">return</span> <span class=\"n\">string_if_invalid</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">string_if_invalid</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span>\n        <span class=\"k\">for</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">args</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filters</span><span class=\"p\">:</span>\n            <span class=\"n\">arg_vals</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">lookup</span><span class=\"p\">,</span> <span class=\"n\">arg</span> <span class=\"ow\">in</span> <span class=\"n\">args</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">lookup</span><span class=\"p\">:</span>\n                    <span class=\"n\">arg_vals</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">))</span>\n                <span class=\"k\">else</span><span class=\"p\">:</span>\n                    <span class=\"n\">arg_vals</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">&quot;expects_localtime&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">template_localtime</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">use_tz</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">&quot;needs_autoescape&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">new_obj</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">autoescape</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">arg_vals</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">new_obj</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">arg_vals</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"s2\">&quot;is_safe&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">SafeData</span><span class=\"p\">):</span>\n                <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">new_obj</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">new_obj</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">args_check</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">,</span> <span class=\"n\">provided</span><span class=\"p\">):</span>\n        <span class=\"n\">provided</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">provided</span><span class=\"p\">)</span>\n        <span class=\"c1\"># First argument, filter input, is implied.</span>\n        <span class=\"n\">plen</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">provided</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n        <span class=\"c1\"># Check to see if a decorator is providing the real function.</span>\n        <span class=\"n\">func</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">unwrap</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n\n        <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">getfullargspec</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">)</span>\n        <span class=\"n\">alen</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n        <span class=\"n\">dlen</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">defaults</span> <span class=\"ow\">or</span> <span class=\"p\">[])</span>\n        <span class=\"c1\"># Not enough OR Too many</span>\n        <span class=\"k\">if</span> <span class=\"n\">plen</span> <span class=\"o\">&lt;</span> <span class=\"p\">(</span><span class=\"n\">alen</span> <span class=\"o\">-</span> <span class=\"n\">dlen</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">plen</span> <span class=\"o\">&gt;</span> <span class=\"n\">alen</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\"> requires </span><span class=\"si\">%d</span><span class=\"s2\"> arguments, </span><span class=\"si\">%d</span><span class=\"s2\"> provided&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">alen</span> <span class=\"o\">-</span> <span class=\"n\">dlen</span><span class=\"p\">,</span> <span class=\"n\">plen</span><span class=\"p\">)</span>\n            <span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n    <span class=\"n\">args_check</span> <span class=\"o\">=</span> <span class=\"nb\">staticmethod</span><span class=\"p\">(</span><span class=\"n\">args_check</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\"> </span><span class=\"si\">%r</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__qualname__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Variable</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A template variable, resolvable against a given context. The variable may</span>\n<span class=\"sd\">    be a hard-coded string (if it begins and ends with single or double quote</span>\n<span class=\"sd\">    marks)::</span>\n\n<span class=\"sd\">        &gt;&gt;&gt; c = {&#39;article&#39;: {&#39;section&#39;:&#39;News&#39;}}</span>\n<span class=\"sd\">        &gt;&gt;&gt; Variable(&#39;article.section&#39;).resolve(c)</span>\n<span class=\"sd\">        &#39;News&#39;</span>\n<span class=\"sd\">        &gt;&gt;&gt; Variable(&#39;article&#39;).resolve(c)</span>\n<span class=\"sd\">        {&#39;section&#39;: &#39;News&#39;}</span>\n<span class=\"sd\">        &gt;&gt;&gt; class AClass: pass</span>\n<span class=\"sd\">        &gt;&gt;&gt; c = AClass()</span>\n<span class=\"sd\">        &gt;&gt;&gt; c.article = AClass()</span>\n<span class=\"sd\">        &gt;&gt;&gt; c.article.section = &#39;News&#39;</span>\n\n<span class=\"sd\">    (The example assumes VARIABLE_ATTRIBUTE_SEPARATOR is &#39;.&#39;)</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"vm\">__slots__</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;var&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;literal&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lookups&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;translate&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;message_context&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">var</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">var</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">literal</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookups</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_context</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;Variable must be a string or number, got </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">))</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># First try to treat this variable as a number.</span>\n            <span class=\"c1\">#</span>\n            <span class=\"c1\"># Note that this could cause an OverflowError here that we&#39;re not</span>\n            <span class=\"c1\"># catching. Since this should only happen at compile time, that&#39;s</span>\n            <span class=\"c1\"># probably OK.</span>\n\n            <span class=\"c1\"># Try to interpret values containing a period or an &#39;e&#39;/&#39;E&#39;</span>\n            <span class=\"c1\"># (possibly scientific notation) as a float;  otherwise, try int.</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;.&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">var</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;e&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">():</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">literal</span> <span class=\"o\">=</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n                <span class=\"c1\"># &quot;2.&quot; is invalid</span>\n                <span class=\"k\">if</span> <span class=\"n\">var</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;.&quot;</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">literal</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># A ValueError means that the variable isn&#39;t a number.</span>\n            <span class=\"k\">if</span> <span class=\"n\">var</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;_(&quot;</span> <span class=\"ow\">and</span> <span class=\"n\">var</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;)&quot;</span><span class=\"p\">:</span>\n                <span class=\"c1\"># The result of the lookup should be translated at rendering</span>\n                <span class=\"c1\"># time.</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">translate</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n                <span class=\"n\">var</span> <span class=\"o\">=</span> <span class=\"n\">var</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"c1\"># If it&#39;s wrapped with quotes (single or double), then</span>\n            <span class=\"c1\"># we&#39;re also dealing with a literal.</span>\n            <span class=\"k\">try</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">literal</span> <span class=\"o\">=</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">unescape_string_literal</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"p\">))</span>\n            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Otherwise we&#39;ll set self.lookups so that resolve() knows we&#39;re</span>\n                <span class=\"c1\"># dealing with a bonafide variable</span>\n                <span class=\"k\">if</span> <span class=\"n\">VARIABLE_ATTRIBUTE_SEPARATOR</span> <span class=\"o\">+</span> <span class=\"s2\">&quot;_&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">var</span> <span class=\"ow\">or</span> <span class=\"n\">var</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;_&quot;</span><span class=\"p\">:</span>\n                    <span class=\"k\">raise</span> <span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n                        <span class=\"s2\">&quot;Variables and attributes may &quot;</span>\n                        <span class=\"s2\">&quot;not begin with underscores: &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;&quot;</span> <span class=\"o\">%</span> <span class=\"n\">var</span>\n                    <span class=\"p\">)</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookups</span> <span class=\"o\">=</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">var</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">VARIABLE_ATTRIBUTE_SEPARATOR</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Resolve this variable against a given context.&quot;&quot;&quot;</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookups</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We&#39;re dealing with a variable that needs to be resolved</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_resolve_lookup</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We&#39;re dealing with a literal, so it&#39;s already been &quot;resolved&quot;</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">literal</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">:</span>\n            <span class=\"n\">is_safe</span> <span class=\"o\">=</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">SafeData</span><span class=\"p\">)</span>\n            <span class=\"n\">msgid</span> <span class=\"o\">=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;</span><span class=\"si\">%%</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n            <span class=\"n\">msgid</span> <span class=\"o\">=</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">msgid</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">is_safe</span> <span class=\"k\">else</span> <span class=\"n\">msgid</span>\n            <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_context</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">pgettext_lazy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_context</span><span class=\"p\">,</span> <span class=\"n\">msgid</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">gettext_lazy</span><span class=\"p\">(</span><span class=\"n\">msgid</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">value</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%r</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_resolve_lookup</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Perform resolution of a real variable (i.e. not a literal) against the</span>\n<span class=\"sd\">        given context.</span>\n\n<span class=\"sd\">        As indicated by the method&#39;s name, this method is an implementation</span>\n<span class=\"sd\">        detail and shouldn&#39;t be called by external code. Use Variable.resolve()</span>\n<span class=\"sd\">        instead.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">context</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># catch-all for silent variable failures</span>\n            <span class=\"k\">for</span> <span class=\"n\">bit</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookups</span><span class=\"p\">:</span>\n                <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># dictionary lookup</span>\n                    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">[</span><span class=\"n\">bit</span><span class=\"p\">]</span>\n                    <span class=\"c1\"># ValueError/IndexError are for numpy.array lookup on</span>\n                    <span class=\"c1\"># numpy &lt; 1.9 and 1.9+ respectively</span>\n                <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">,</span> <span class=\"ne\">KeyError</span><span class=\"p\">,</span> <span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"ne\">IndexError</span><span class=\"p\">):</span>\n                    <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># attribute lookup</span>\n                        <span class=\"c1\"># Don&#39;t return class attributes if the class is the context:</span>\n                        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"n\">BaseContext</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span>\n                            <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">),</span> <span class=\"n\">bit</span>\n                        <span class=\"p\">):</span>\n                            <span class=\"k\">raise</span> <span class=\"ne\">AttributeError</span>\n                        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"n\">bit</span><span class=\"p\">)</span>\n                    <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">TypeError</span><span class=\"p\">,</span> <span class=\"ne\">AttributeError</span><span class=\"p\">):</span>\n                        <span class=\"c1\"># Reraise if the exception was raised by a @property</span>\n                        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"n\">BaseContext</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"n\">bit</span> <span class=\"ow\">in</span> <span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">):</span>\n                            <span class=\"k\">raise</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># list-index lookup</span>\n                            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">bit</span><span class=\"p\">)]</span>\n                        <span class=\"k\">except</span> <span class=\"p\">(</span>\n                            <span class=\"ne\">IndexError</span><span class=\"p\">,</span>  <span class=\"c1\"># list index out of range</span>\n                            <span class=\"ne\">ValueError</span><span class=\"p\">,</span>  <span class=\"c1\"># invalid literal for int()</span>\n                            <span class=\"ne\">KeyError</span><span class=\"p\">,</span>  <span class=\"c1\"># current is a dict without `int(bit)` key</span>\n                            <span class=\"ne\">TypeError</span><span class=\"p\">,</span>\n                        <span class=\"p\">):</span>  <span class=\"c1\"># unsubscriptable object</span>\n                            <span class=\"k\">raise</span> <span class=\"n\">VariableDoesNotExist</span><span class=\"p\">(</span>\n                                <span class=\"s2\">&quot;Failed lookup for key [</span><span class=\"si\">%s</span><span class=\"s2\">] in </span><span class=\"si\">%r</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span>\n                                <span class=\"p\">(</span><span class=\"n\">bit</span><span class=\"p\">,</span> <span class=\"n\">current</span><span class=\"p\">),</span>\n                            <span class=\"p\">)</span>  <span class=\"c1\"># missing attribute</span>\n                <span class=\"k\">if</span> <span class=\"n\">callable</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">):</span>\n                    <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"s2\">&quot;do_not_call_in_templates&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                        <span class=\"k\">pass</span>\n                    <span class=\"k\">elif</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">,</span> <span class=\"s2\">&quot;alters_data&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                        <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span>\n                    <span class=\"k\">else</span><span class=\"p\">:</span>\n                        <span class=\"k\">try</span><span class=\"p\">:</span>  <span class=\"c1\"># method call (assuming no args required)</span>\n                            <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">current</span><span class=\"p\">()</span>\n                        <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n                            <span class=\"k\">try</span><span class=\"p\">:</span>\n                                <span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">inspect</span><span class=\"o\">.</span><span class=\"n\">signature</span><span class=\"p\">(</span><span class=\"n\">current</span><span class=\"p\">)</span>\n                            <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>  <span class=\"c1\"># No signature found.</span>\n                                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span>\n                            <span class=\"k\">else</span><span class=\"p\">:</span>\n                                <span class=\"k\">try</span><span class=\"p\">:</span>\n                                    <span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">()</span>\n                                <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>  <span class=\"c1\"># Arguments *were* required.</span>\n                                    <span class=\"c1\"># Invalid method call.</span>\n                                    <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span>\n                                <span class=\"k\">else</span><span class=\"p\">:</span>\n                                    <span class=\"k\">raise</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"s2\">&quot;template_name&quot;</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"s2\">&quot;unknown&quot;</span>\n            <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;Exception while resolving variable &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39; in template &#39;</span><span class=\"si\">%s</span><span class=\"s2\">&#39;.&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">bit</span><span class=\"p\">,</span>\n                <span class=\"n\">template_name</span><span class=\"p\">,</span>\n                <span class=\"n\">exc_info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"s2\">&quot;silent_variable_failure&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n                <span class=\"n\">current</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">string_if_invalid</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">raise</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">current</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Set this to True for nodes that must be first in the template (although</span>\n    <span class=\"c1\"># they can be preceded by text nodes.</span>\n    <span class=\"n\">must_be_first</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">child_nodelists</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">&quot;nodelist&quot;</span><span class=\"p\">,)</span>\n    <span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the node rendered as a string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_annotated</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Render the node. If debug is True and an exception occurs during</span>\n<span class=\"sd\">        rendering, the exception is annotated with contextual line information</span>\n<span class=\"sd\">        where it occurred in the template. For internal usage this method is</span>\n<span class=\"sd\">        preferred over using the render method directly.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">debug</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Store the actual node that caused the exception.</span>\n                <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"s2\">&quot;_culprit_node&quot;</span><span class=\"p\">):</span>\n                    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">_culprit_node</span> <span class=\"o\">=</span> <span class=\"bp\">self</span>\n                <span class=\"k\">if</span> <span class=\"p\">(</span>\n                    <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"s2\">&quot;template_debug&quot;</span><span class=\"p\">)</span>\n                    <span class=\"ow\">and</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">render_context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">origin</span> <span class=\"o\">==</span> <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">_culprit_node</span><span class=\"o\">.</span><span class=\"n\">origin</span>\n                <span class=\"p\">):</span>\n                    <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">template_debug</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n                        <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">render_context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">get_exception_info</span><span class=\"p\">(</span>\n                            <span class=\"n\">e</span><span class=\"p\">,</span>\n                            <span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">_culprit_node</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">,</span>\n                        <span class=\"p\">)</span>\n                    <span class=\"p\">)</span>\n            <span class=\"k\">raise</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_nodes_by_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodetype</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return a list of all nodes (within this node and its nodelist)</span>\n<span class=\"sd\">        of the given type</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodetype</span><span class=\"p\">):</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">attr</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">child_nodelists</span><span class=\"p\">:</span>\n            <span class=\"n\">nodelist</span> <span class=\"o\">=</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">nodelist</span><span class=\"p\">:</span>\n                <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">nodelist</span><span class=\"o\">.</span><span class=\"n\">get_nodes_by_type</span><span class=\"p\">(</span><span class=\"n\">nodetype</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">nodes</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NodeList</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Set to True the first time a non-TextNode is inserted by</span>\n    <span class=\"c1\"># extend_nodelist().</span>\n    <span class=\"n\">contains_nontext</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">SafeString</span><span class=\"p\">(</span><span class=\"s2\">&quot;&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">([</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">render_annotated</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">]))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_nodes_by_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodetype</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Return a list of all nodes of the given type&quot;</span>\n        <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"p\">:</span>\n            <span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">get_nodes_by_type</span><span class=\"p\">(</span><span class=\"n\">nodetype</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">nodes</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TextNode</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"n\">child_nodelists</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">s</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%r</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__class__</span><span class=\"o\">.</span><span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s</span><span class=\"p\">[:</span><span class=\"mi\">25</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_annotated</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Return the given value.</span>\n\n<span class=\"sd\">        The default implementation of this method handles exceptions raised</span>\n<span class=\"sd\">        during rendering, which is not necessary for text nodes.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">s</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">render_value_in_context</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Convert any value to a string to become part of a rendered template. This</span>\n<span class=\"sd\">    means escaping, if required, and conversion to a string. If value is a</span>\n<span class=\"sd\">    string, it&#39;s expected to already be translated.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">template_localtime</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">use_tz</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">use_tz</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">use_l10n</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">use_l10n</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">autoescape</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">conditional_escape</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">VariableNode</span><span class=\"p\">(</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"n\">child_nodelists</span> <span class=\"o\">=</span> <span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filter_expression</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter_expression</span> <span class=\"o\">=</span> <span class=\"n\">filter_expression</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&lt;Variable Node: </span><span class=\"si\">%s</span><span class=\"s2\">&gt;&quot;</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter_expression</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filter_expression</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">UnicodeDecodeError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Unicode conversion can fail sometimes for reasons out of our</span>\n            <span class=\"c1\"># control (e.g. exception rendering). In that case, we fail</span>\n            <span class=\"c1\"># quietly.</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">render_value_in_context</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Regex for token keyword arguments</span>\n<span class=\"n\">kwarg_re</span> <span class=\"o\">=</span> <span class=\"n\">_lazy_re_compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;(?:(\\w+)=)?(.+)&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">token_kwargs</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">support_legacy</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Parse token keyword arguments and return a dictionary of the arguments</span>\n<span class=\"sd\">    retrieved from the ``bits`` token list.</span>\n\n<span class=\"sd\">    `bits` is a list containing the remainder of the token (split by spaces)</span>\n<span class=\"sd\">    that is to be checked for arguments. Valid arguments are removed from this</span>\n<span class=\"sd\">    list.</span>\n\n<span class=\"sd\">    `support_legacy` - if True, the legacy format ``1 as foo`` is accepted.</span>\n<span class=\"sd\">    Otherwise, only the standard ``foo=1`` format is allowed.</span>\n\n<span class=\"sd\">    There is no requirement for all remaining token ``bits`` to be keyword</span>\n<span class=\"sd\">    arguments, so return the dictionary as soon as an invalid argument format</span>\n<span class=\"sd\">    is reached.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bits</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n    <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">kwarg_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n    <span class=\"n\">kwarg_format</span> <span class=\"o\">=</span> <span class=\"n\">match</span> <span class=\"ow\">and</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">kwarg_format</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">support_legacy</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"ow\">or</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;as&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">{}</span>\n\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n    <span class=\"k\">while</span> <span class=\"n\">bits</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwarg_format</span><span class=\"p\">:</span>\n            <span class=\"n\">match</span> <span class=\"o\">=</span> <span class=\"n\">kwarg_re</span><span class=\"o\">.</span><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">match</span> <span class=\"ow\">or</span> <span class=\"ow\">not</span> <span class=\"n\">match</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]:</span>\n                <span class=\"k\">return</span> <span class=\"n\">kwargs</span>\n            <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">match</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>\n            <span class=\"k\">del</span> <span class=\"n\">bits</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">bits</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">3</span> <span class=\"ow\">or</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;as&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">kwargs</span>\n            <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"k\">del</span> <span class=\"n\">bits</span><span class=\"p\">[:</span><span class=\"mi\">3</span><span class=\"p\">]</span>\n        <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">compile_filter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">bits</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">kwarg_format</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">bits</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;and&quot;</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"n\">kwargs</span>\n            <span class=\"k\">del</span> <span class=\"n\">bits</span><span class=\"p\">[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">kwargs</span>\n</pre></div>", "current_page_name": "_modules/django/template/base", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}