{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Handling HTTP requests"}], "prev": {"link": "../middleware/", "title": "Middleware"}, "next": {"link": "../../forms/", "title": "Working with forms"}, "title": "How to use sessions", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.contrib.sessions\">\n<span id=\"s-how-to-use-sessions\"></span><span id=\"module-django.contrib.sessions\"></span><span id=\"how-to-use-sessions\"></span><h1>How to use sessions<a class=\"headerlink\" href=\"#module-django.contrib.sessions\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django provides full support for anonymous sessions. The session framework\nlets you store and retrieve arbitrary data on a per-site-visitor basis. It\nstores data on the server side and abstracts the sending and receiving of\ncookies. Cookies contain a session ID \u2013 not the data itself (unless you\u2019re\nusing the <a class=\"reference internal\" href=\"#cookie-session-backend\"><span class=\"std std-ref\">cookie based backend</span></a>).</p>\n<div class=\"section\" id=\"s-enabling-sessions\">\n<span id=\"enabling-sessions\"></span><h2>Enabling sessions<a class=\"headerlink\" href=\"#enabling-sessions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Sessions are implemented via a piece of <a class=\"reference internal\" href=\"../../../ref/middleware/\"><span class=\"doc\">middleware</span></a>.</p>\n<p>To enable session functionality, do the following:</p>\n<ul class=\"simple\">\n<li>Edit the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a> setting and make sure it contains\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.sessions.middleware.SessionMiddleware'</span></code>. The default\n<code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code> created by <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span> <span class=\"pre\">startproject</span></code> has\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SessionMiddleware</span></code> activated.</li>\n</ul>\n<p>If you don\u2019t want to use sessions, you might as well remove the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SessionMiddleware</span></code> line from <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.sessions'</span></code> from your <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.\nIt\u2019ll save you a small bit of overhead.</p>\n</div>\n<div class=\"section\" id=\"s-configuring-the-session-engine\">\n<span id=\"s-configuring-sessions\"></span><span id=\"configuring-the-session-engine\"></span><span id=\"configuring-sessions\"></span><h2>Configuring the session engine<a class=\"headerlink\" href=\"#configuring-the-session-engine\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By default, Django stores sessions in your database (using the model\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions.models.Session</span></code>). Though this is convenient, in\nsome setups it\u2019s faster to store session data elsewhere, so Django can be\nconfigured to store session data on your filesystem or in your cache.</p>\n<div class=\"section\" id=\"s-using-database-backed-sessions\">\n<span id=\"using-database-backed-sessions\"></span><h3>Using database-backed sessions<a class=\"headerlink\" href=\"#using-database-backed-sessions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you want to use a database-backed session, you need to add\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.sessions'</span></code> to your <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting.</p>\n<p>Once you have configured your installation, run <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code>\nto install the single database table that stores session data.</p>\n</div>\n<div class=\"section\" id=\"s-using-cached-sessions\">\n<span id=\"s-cached-sessions-backend\"></span><span id=\"using-cached-sessions\"></span><span id=\"cached-sessions-backend\"></span><h3>Using cached sessions<a class=\"headerlink\" href=\"#using-cached-sessions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For better performance, you may want to use a cache-based session backend.</p>\n<p>To store session data using Django\u2019s cache system, you\u2019ll first need to make\nsure you\u2019ve configured your cache; see the <a class=\"reference internal\" href=\"../../cache/\"><span class=\"doc\">cache documentation</span></a> for details.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">You should only use cache-based sessions if you\u2019re using the Memcached or\nRedis cache backend. The local-memory cache backend doesn\u2019t retain data\nlong enough to be a good choice, and it\u2019ll be faster to use file or\ndatabase sessions directly instead of sending everything through the file\nor database cache backends. Additionally, the local-memory cache backend is\nNOT multi-process safe, therefore probably not a good choice for production\nenvironments.</p>\n</div>\n<p>If you have multiple caches defined in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a>, Django will use the\ndefault cache. To use another cache, set <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_CACHE_ALIAS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_CACHE_ALIAS</span></code></a> to the\nname of that cache.</p>\n<p>Once your cache is configured, you have to choose between a database-backed\ncache or a non-persistent cache.</p>\n<p>The cached database backend (<code class=\"docutils literal notranslate\"><span class=\"pre\">cached_db</span></code>) uses a write-through cache \u2013\nsession writes are applied to both the cache and the database. Session reads\nuse the cache, or the database if the data has been evicted from the cache. To\nuse this backend, set <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django.contrib.sessions.backends.cached_db&quot;</span></code>, and follow the configuration\ninstructions for the <a class=\"reference internal\" href=\"#using-database-backed-sessions\">using database-backed sessions</a>.</p>\n<p>The cache backend (<code class=\"docutils literal notranslate\"><span class=\"pre\">cache</span></code>) stores session data only in your cache. This is\nfaster because it avoids database persistence, but you will have to consider\nwhat happens when cache data is evicted. Eviction can occur if the cache fills\nup or the cache server is restarted, and it will mean session data is lost,\nincluding logging out users. To use this backend, set <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django.contrib.sessions.backends.cache&quot;</span></code>.</p>\n<p>The cache backend can be made persistent by using a persistent cache, such as\nRedis with appropriate configuration. But unless your cache is definitely\nconfigured for sufficient persistence, opt for the cached database backend.\nThis avoids edge cases caused by unreliable data storage in production.</p>\n</div>\n<div class=\"section\" id=\"s-using-file-based-sessions\">\n<span id=\"using-file-based-sessions\"></span><h3>Using file-based sessions<a class=\"headerlink\" href=\"#using-file-based-sessions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To use file-based sessions, set the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a> setting to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django.contrib.sessions.backends.file&quot;</span></code>.</p>\n<p>You might also want to set the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_FILE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_FILE_PATH</span></code></a> setting (which\ndefaults to output from <code class=\"docutils literal notranslate\"><span class=\"pre\">tempfile.gettempdir()</span></code>, most likely <code class=\"docutils literal notranslate\"><span class=\"pre\">/tmp</span></code>) to\ncontrol where Django stores session files. Be sure to check that your web\nserver has permissions to read and write to this location.</p>\n</div>\n<div class=\"section\" id=\"s-using-cookie-based-sessions\">\n<span id=\"s-cookie-session-backend\"></span><span id=\"using-cookie-based-sessions\"></span><span id=\"cookie-session-backend\"></span><h3>Using cookie-based sessions<a class=\"headerlink\" href=\"#using-cookie-based-sessions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To use cookies-based sessions, set the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a> setting to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django.contrib.sessions.backends.signed_cookies&quot;</span></code>. The session data will be\nstored using Django\u2019s tools for <a class=\"reference internal\" href=\"../../signing/\"><span class=\"doc\">cryptographic signing</span></a>\nand the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> setting.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">It\u2019s recommended to leave the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_HTTPONLY</span></code></a> setting\non <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to prevent access to the stored data from JavaScript.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p><strong>The session data is signed but not encrypted</strong></p>\n<p>When using the cookies backend the session data can be read by the client.</p>\n<p>A MAC (Message Authentication Code) is used to protect the data against\nchanges by the client, so that the session data will be invalidated when being\ntampered with. The same invalidation happens if the client storing the\ncookie (e.g. your user\u2019s browser) can\u2019t store all of the session cookie and\ndrops data. Even though Django compresses the data, it\u2019s still entirely\npossible to exceed the <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc2965.html#section-5.3\"><strong>common limit of 4096 bytes</strong></a>\nper cookie.</p>\n<p><strong>No freshness guarantee</strong></p>\n<p>Note also that while the MAC can guarantee the authenticity of the data\n(that it was generated by your site, and not someone else), and the\nintegrity of the data (that it is all there and correct), it cannot\nguarantee freshness i.e. that you are being sent back the last thing you\nsent to the client. This means that for some uses of session data, the\ncookie backend might open you up to <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Replay_attack\">replay attacks</a>. Unlike other session\nbackends which keep a server-side record of each session and invalidate it\nwhen a user logs out, cookie-based sessions are not invalidated when a user\nlogs out. Thus if an attacker steals a user\u2019s cookie, they can use that\ncookie to login as that user even if the user logs out. Cookies will only\nbe detected as \u2018stale\u2019 if they are older than your\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_AGE</span></code></a>.</p>\n<p><strong>Performance</strong></p>\n<p class=\"last\">Finally, the size of a cookie can have an impact on the speed of your site.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-sessions-in-views\">\n<span id=\"using-sessions-in-views\"></span><h2>Using sessions in views<a class=\"headerlink\" href=\"#using-sessions-in-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionMiddleware</span></code> is activated, each <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a>\nobject \u2013 the first argument to any Django view function \u2013 will have a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">session</span></code> attribute, which is a dictionary-like object.</p>\n<p>You can read it and write to <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code> at any point in your view.\nYou can edit it multiple times.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">backends.base.</span></code><code class=\"sig-name descname\"><span class=\"pre\">SessionBase</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is the base class for all session objects. It has the following\nstandard dictionary methods:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.__getitem__\">\n<code class=\"sig-name descname\"><span class=\"pre\">__getitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.__getitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">fav_color</span> <span class=\"pre\">=</span> <span class=\"pre\">request.session['fav_color']</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.__setitem__\">\n<code class=\"sig-name descname\"><span class=\"pre\">__setitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.__setitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session['fav_color']</span> <span class=\"pre\">=</span> <span class=\"pre\">'blue'</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.__delitem__\">\n<code class=\"sig-name descname\"><span class=\"pre\">__delitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.__delitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">del</span> <span class=\"pre\">request.session['fav_color']</span></code>. This raises <code class=\"docutils literal notranslate\"><span class=\"pre\">KeyError</span></code>\nif the given <code class=\"docutils literal notranslate\"><span class=\"pre\">key</span></code> isn\u2019t already in the session.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.__contains__\">\n<code class=\"sig-name descname\"><span class=\"pre\">__contains__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.__contains__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">'fav_color'</span> <span class=\"pre\">in</span> <span class=\"pre\">request.session</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.get\">\n<code class=\"sig-name descname\"><span class=\"pre\">get</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">fav_color</span> <span class=\"pre\">=</span> <span class=\"pre\">request.session.get('fav_color',</span> <span class=\"pre\">'red')</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.pop\">\n<code class=\"sig-name descname\"><span class=\"pre\">pop</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">__not_given</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.pop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">fav_color</span> <span class=\"pre\">=</span> <span class=\"pre\">request.session.pop('fav_color',</span> <span class=\"pre\">'blue')</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.keys\">\n<code class=\"sig-name descname\"><span class=\"pre\">keys</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.keys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.items\">\n<code class=\"sig-name descname\"><span class=\"pre\">items</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.items\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.setdefault\">\n<code class=\"sig-name descname\"><span class=\"pre\">setdefault</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.setdefault\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.clear\">\n<code class=\"sig-name descname\"><span class=\"pre\">clear</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>It also has these methods:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.flush\">\n<code class=\"sig-name descname\"><span class=\"pre\">flush</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.flush\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deletes the current session data from the session and deletes the session\ncookie. This is used if you want to ensure that the previous session data\ncan\u2019t be accessed again from the user\u2019s browser (for example, the\n<a class=\"reference internal\" href=\"../../auth/default/#django.contrib.auth.logout\" title=\"django.contrib.auth.logout\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.logout()</span></code></a> function calls it).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.set_test_cookie\">\n<code class=\"sig-name descname\"><span class=\"pre\">set_test_cookie</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.set_test_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets a test cookie to determine whether the user\u2019s browser supports\ncookies. Due to the way cookies work, you won\u2019t be able to test this\nuntil the user\u2019s next page request. See <a class=\"reference internal\" href=\"#setting-test-cookies\">Setting test cookies</a> below for\nmore information.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.test_cookie_worked\">\n<code class=\"sig-name descname\"><span class=\"pre\">test_cookie_worked</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.test_cookie_worked\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns either <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, depending on whether the user\u2019s\nbrowser accepted the test cookie. Due to the way cookies work, you\u2019ll\nhave to call <code class=\"docutils literal notranslate\"><span class=\"pre\">set_test_cookie()</span></code> on a previous, separate page request.\nSee <a class=\"reference internal\" href=\"#setting-test-cookies\">Setting test cookies</a> below for more information.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.delete_test_cookie\">\n<code class=\"sig-name descname\"><span class=\"pre\">delete_test_cookie</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.delete_test_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deletes the test cookie. Use this to clean up after yourself.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.get_session_cookie_age\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_session_cookie_age</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.get_session_cookie_age\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value of the setting <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_AGE</span></code></a>. This can\nbe overridden in a custom session backend.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.set_expiry\">\n<code class=\"sig-name descname\"><span class=\"pre\">set_expiry</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.set_expiry\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the expiration time for the session. You can pass a number of\ndifferent values:</p>\n<ul class=\"simple\">\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is an integer, the session will expire after that\nmany seconds of inactivity. For example, calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.session.set_expiry(300)</span></code> would make the session expire\nin 5 minutes.</li>\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">timedelta</span></code> object, the session\nwill expire at that specific date/time.</li>\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, the user\u2019s session cookie will expire\nwhen the user\u2019s web browser is closed.</li>\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the session reverts to using the global\nsession expiry policy.</li>\n</ul>\n<p>Reading a session is not considered activity for expiration\npurposes. Session expiration is computed from the last time the\nsession was <em>modified</em>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.get_expiry_age\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_expiry_age</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.get_expiry_age\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the number of seconds until this session expires. For sessions\nwith no custom expiration (or those set to expire at browser close), this\nwill equal <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_AGE</span></code></a>.</p>\n<p>This function accepts two optional keyword arguments:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">modification</span></code>: last modification of the session, as a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> object. Defaults to the current time.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">expiry</span></code>: expiry information for the session, as a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> object, an <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#int\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">int</span></code></a> (in seconds), or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. Defaults to the value stored in the session by\n<a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.set_expiry\" title=\"django.contrib.sessions.backends.base.SessionBase.set_expiry\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_expiry()</span></code></a>, if there is one, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>This method is used by session backends to determine the session expiry\nage in seconds when saving the session. It is not really intended for\nusage outside of that context.</p>\n<p>In particular, while it is <strong>possible</strong> to determine the remaining\nlifetime of a session <strong>just when</strong> you have the correct\n<code class=\"docutils literal notranslate\"><span class=\"pre\">modification</span></code> value <strong>and</strong> the <code class=\"docutils literal notranslate\"><span class=\"pre\">expiry</span></code> is set as a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code>\nobject, where you do have the <code class=\"docutils literal notranslate\"><span class=\"pre\">modification</span></code> value, it is more\nstraight-forward to calculate the expiry by-hand:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">expires_at</span> <span class=\"o\">=</span> <span class=\"n\">modification</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SESSION_COOKIE_AGE</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.get_expiry_date\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_expiry_date</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.get_expiry_date\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the date this session will expire. For sessions with no custom\nexpiration (or those set to expire at browser close), this will equal the\ndate <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_AGE</span></code></a> seconds from now.</p>\n<p>This function accepts the same keyword arguments as\n<a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.get_expiry_age\" title=\"django.contrib.sessions.backends.base.SessionBase.get_expiry_age\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_expiry_age()</span></code></a>, and similar notes on usage apply.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.get_expire_at_browser_close\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_expire_at_browser_close</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.get_expire_at_browser_close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns either <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, depending on whether the user\u2019s\nsession cookie will expire when the user\u2019s web browser is closed.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.clear_expired\">\n<code class=\"sig-name descname\"><span class=\"pre\">clear_expired</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.clear_expired\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Removes expired sessions from the session store. This class method is\ncalled by <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-clearsessions\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">clearsessions</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.base.SessionBase.cycle_key\">\n<code class=\"sig-name descname\"><span class=\"pre\">cycle_key</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.base.SessionBase.cycle_key\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a new session key while retaining the current session data.\n<a class=\"reference internal\" href=\"../../auth/default/#django.contrib.auth.login\" title=\"django.contrib.auth.login\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.login()</span></code></a> calls this method to mitigate against\nsession fixation.</p>\n</dd></dl>\n\n</dd></dl>\n\n<div class=\"section\" id=\"s-session-serialization\">\n<span id=\"s-id1\"></span><span id=\"session-serialization\"></span><span id=\"id1\"></span><h3>Session serialization<a class=\"headerlink\" href=\"#session-serialization\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, Django serializes session data using JSON. You can use the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_SERIALIZER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SERIALIZER</span></code></a> setting to customize the session serialization\nformat. Even with the caveats described in <a class=\"reference internal\" href=\"#custom-serializers\"><span class=\"std std-ref\">Write your own serializer</span></a>, we highly\nrecommend sticking with JSON serialization <em>especially if you are using the\ncookie backend</em>.</p>\n<p>For example, here\u2019s an attack scenario if you use <a class=\"reference external\" href=\"https://docs.python.org/3/library/pickle.html#module-pickle\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pickle</span></code></a> to serialize\nsession data. If you\u2019re using the <a class=\"reference internal\" href=\"#cookie-session-backend\"><span class=\"std std-ref\">signed cookie session backend</span></a> and <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> (or any key of\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SECRET_KEY_FALLBACKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code></a>) is known by an attacker (there isn\u2019t an\ninherent vulnerability in Django that would cause it to leak), the attacker\ncould insert a string into their session which, when unpickled, executes\narbitrary code on the server. The technique for doing so is simple and easily\navailable on the internet. Although the cookie session storage signs the\ncookie-stored data to prevent tampering, a <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a> leak\nimmediately escalates to a remote code execution vulnerability.</p>\n<div class=\"section\" id=\"s-bundled-serializers\">\n<span id=\"bundled-serializers\"></span><h4>Bundled serializers<a class=\"headerlink\" href=\"#bundled-serializers\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.serializers.JSONSerializer\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">serializers.</span></code><code class=\"sig-name descname\"><span class=\"pre\">JSONSerializer</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.serializers.JSONSerializer\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A wrapper around the JSON serializer from <a class=\"reference internal\" href=\"../../signing/#module-django.core.signing\" title=\"django.core.signing: Django's signing framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.core.signing</span></code></a>. Can\nonly serialize basic data types.</p>\n<p>In addition, as JSON supports only string keys, note that using non-string\nkeys in <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code> won\u2019t work as expected:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># initial assignment</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;bar&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># subsequent requests following serialization &amp; deserialization</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># of session data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># KeyError</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;0&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">&#39;bar&#39;</span>\n</pre></div>\n</div>\n<p>Similarly, data that can\u2019t be encoded in JSON, such as non-UTF8 bytes like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'\\xd9'</span></code> (which raises <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">UnicodeDecodeError</span></code></a>), can\u2019t be stored.</p>\n<p>See the <a class=\"reference internal\" href=\"#custom-serializers\"><span class=\"std std-ref\">Write your own serializer</span></a> section for more details on limitations\nof JSON serialization.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-write-your-own-serializer\">\n<span id=\"s-custom-serializers\"></span><span id=\"write-your-own-serializer\"></span><span id=\"custom-serializers\"></span><h4>Write your own serializer<a class=\"headerlink\" href=\"#write-your-own-serializer\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Note that the <a class=\"reference internal\" href=\"#django.contrib.sessions.serializers.JSONSerializer\" title=\"django.contrib.sessions.serializers.JSONSerializer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONSerializer</span></code></a>\ncannot handle arbitrary Python data types. As is often the case, there is a\ntrade-off between convenience and security. If you wish to store more advanced\ndata types including <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Decimal</span></code> in JSON backed sessions, you\nwill need to write a custom serializer (or convert such values to a JSON\nserializable object before storing them in <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code>). While\nserializing these values is often straightforward\n(<a class=\"reference internal\" href=\"../../serialization/#django.core.serializers.json.DjangoJSONEncoder\" title=\"django.core.serializers.json.DjangoJSONEncoder\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoJSONEncoder</span></code></a> may be helpful),\nwriting a decoder that can reliably get back the same thing that you put in is\nmore fragile. For example, you run the risk of returning a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> that\nwas actually a string that just happened to be in the same format chosen for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code>s).</p>\n<p>Your serializer class must implement two methods,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dumps(self,</span> <span class=\"pre\">obj)</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">loads(self,</span> <span class=\"pre\">data)</span></code>, to serialize and deserialize\nthe dictionary of session data, respectively.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-session-object-guidelines\">\n<span id=\"session-object-guidelines\"></span><h3>Session object guidelines<a class=\"headerlink\" href=\"#session-object-guidelines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Use normal Python strings as dictionary keys on <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code>. This\nis more of a convention than a hard-and-fast rule.</li>\n<li>Session dictionary keys that begin with an underscore are reserved for\ninternal use by Django.</li>\n<li>Don\u2019t override <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code> with a new object, and don\u2019t access or\nset its attributes. Use it like a Python dictionary.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-examples\">\n<span id=\"examples\"></span><h3>Examples<a class=\"headerlink\" href=\"#examples\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This simplistic view sets a <code class=\"docutils literal notranslate\"><span class=\"pre\">has_commented</span></code> variable to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> after a user\nposts a comment. It doesn\u2019t let a user post a comment more than once:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">post_comment</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">new_comment</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;has_commented&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;You&#39;ve already commented.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">Comment</span><span class=\"p\">(</span><span class=\"n\">comment</span><span class=\"o\">=</span><span class=\"n\">new_comment</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;has_commented&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Thanks for your comment!&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This simplistic view logs in a \u201cmember\u201d of the site:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">Member</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s2\">&quot;username&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">if</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">check_password</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s2\">&quot;password&quot;</span><span class=\"p\">]):</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;member_id&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">id</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;You&#39;re logged in.&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Your username and password didn&#39;t match.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026And this one logs a member out, according to <code class=\"docutils literal notranslate\"><span class=\"pre\">login()</span></code> above:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">logout</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">del</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;member_id&quot;</span><span class=\"p\">]</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;You&#39;re logged out.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The standard <a class=\"reference internal\" href=\"../../auth/default/#django.contrib.auth.logout\" title=\"django.contrib.auth.logout\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.logout()</span></code></a> function actually does a bit\nmore than this to prevent inadvertent data leakage. It calls the\n<a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.flush\" title=\"django.contrib.sessions.backends.base.SessionBase.flush\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">flush()</span></code></a> method of <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code>.\nWe are using this example as a demonstration of how to work with session\nobjects, not as a full <code class=\"docutils literal notranslate\"><span class=\"pre\">logout()</span></code> implementation.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-setting-test-cookies\">\n<span id=\"setting-test-cookies\"></span><h2>Setting test cookies<a class=\"headerlink\" href=\"#setting-test-cookies\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As a convenience, Django provides a way to test whether the user\u2019s browser\naccepts cookies. Call the <a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.set_test_cookie\" title=\"django.contrib.sessions.backends.base.SessionBase.set_test_cookie\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_test_cookie()</span></code></a>\nmethod of <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code> in a view, and call\n<a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.test_cookie_worked\" title=\"django.contrib.sessions.backends.base.SessionBase.test_cookie_worked\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">test_cookie_worked()</span></code></a> in a subsequent view \u2013\nnot in the same view call.</p>\n<p>This awkward split between <code class=\"docutils literal notranslate\"><span class=\"pre\">set_test_cookie()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">test_cookie_worked()</span></code>\nis necessary due to the way cookies work. When you set a cookie, you can\u2019t\nactually tell whether a browser accepted it until the browser\u2019s next request.</p>\n<p>It\u2019s good practice to use\n<a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.delete_test_cookie\" title=\"django.contrib.sessions.backends.base.SessionBase.delete_test_cookie\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete_test_cookie()</span></code></a> to clean up after\nyourself. Do this after you\u2019ve verified that the test cookie worked.</p>\n<p>Here\u2019s a typical usage example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">login</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">test_cookie_worked</span><span class=\"p\">():</span>\n            <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">delete_test_cookie</span><span class=\"p\">()</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;You&#39;re logged in.&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Please enable cookies and try again.&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">set_test_cookie</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;foo/login_form.html&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-sessions-out-of-views\">\n<span id=\"using-sessions-out-of-views\"></span><h2>Using sessions out of views<a class=\"headerlink\" href=\"#using-sessions-out-of-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The examples in this section import the <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> object directly\nfrom the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions.backends.db</span></code> backend. In your own code,\nyou should consider importing <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> from the session engine\ndesignated by <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a>, as below:</p>\n<div class=\"last highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">importlib</span> <span class=\"kn\">import</span> <span class=\"n\">import_module</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">SessionStore</span> <span class=\"o\">=</span> <span class=\"n\">import_module</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SESSION_ENGINE</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">SessionStore</span>\n</pre></div>\n</div>\n</div>\n<p>An API is available to manipulate session data outside of a view:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sessions.backends.db</span> <span class=\"kn\">import</span> <span class=\"n\">SessionStore</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">SessionStore</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># stored as seconds since epoch since datetimes are not serializable in JSON.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s2\">&quot;last_login&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1376587691</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">session_key</span>\n<span class=\"go\">&#39;2b1189a188b44ad18c35e113ac6ceead&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">SessionStore</span><span class=\"p\">(</span><span class=\"n\">session_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;2b1189a188b44ad18c35e113ac6ceead&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"p\">[</span><span class=\"s2\">&quot;last_login&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">1376587691</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore.create()</span></code> is designed to create a new session (i.e. one not\nloaded from the session store and with <code class=\"docutils literal notranslate\"><span class=\"pre\">session_key=None</span></code>). <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> is\ndesigned to save an existing session (i.e. one loaded from the session store).\nCalling <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> on a new session may also work but has a small chance of\ngenerating a <code class=\"docutils literal notranslate\"><span class=\"pre\">session_key</span></code> that collides with an existing one. <code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code>\ncalls <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> and loops until an unused <code class=\"docutils literal notranslate\"><span class=\"pre\">session_key</span></code> is generated.</p>\n<p>If you\u2019re using the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions.backends.db</span></code> backend, each\nsession is a normal Django model. The <code class=\"docutils literal notranslate\"><span class=\"pre\">Session</span></code> model is defined in\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/contrib/sessions/models.py\">django/contrib/sessions/models.py</a>. Because it\u2019s a normal model, you can\naccess sessions using the normal Django database API:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sessions.models</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"s2\">&quot;2b1189a188b44ad18c35e113ac6ceead&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">expire_date</span>\n<span class=\"go\">datetime.datetime(2005, 8, 20, 13, 35, 12)</span>\n</pre></div>\n</div>\n<p>Note that you\u2019ll need to call\n<a class=\"reference internal\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded\" title=\"django.contrib.sessions.base_session.AbstractBaseSession.get_decoded\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_decoded()</span></code></a> to get the session\ndictionary. This is necessary because the dictionary is stored in an encoded\nformat:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">session_data</span>\n<span class=\"go\">&#39;KGRwMQpTJ19hdXRoX3VzZXJfaWQnCnAyCkkxCnMuMTExY2ZjODI2Yj...&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get_decoded</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;user_id&#39;: 42}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-when-sessions-are-saved\">\n<span id=\"when-sessions-are-saved\"></span><h2>When sessions are saved<a class=\"headerlink\" href=\"#when-sessions-are-saved\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By default, Django only saves to the session database when the session has been\nmodified \u2013 that is if any of its dictionary values have been assigned or\ndeleted:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Session is modified.</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;bar&quot;</span>\n\n<span class=\"c1\"># Session is modified.</span>\n<span class=\"k\">del</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Session is modified.</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n\n<span class=\"c1\"># Gotcha: Session is NOT modified, because this alters</span>\n<span class=\"c1\"># request.session[&#39;foo&#39;] instead of request.session.</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">][</span><span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;baz&quot;</span>\n</pre></div>\n</div>\n<p>In the last case of the above example, we can tell the session object\nexplicitly that it has been modified by setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">modified</span></code> attribute on\nthe session object:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">modified</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>\n</div>\n<p>To change this default behavior, set the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_SAVE_EVERY_REQUEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SAVE_EVERY_REQUEST</span></code></a>\nsetting to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. When set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, Django will save the session to the\ndatabase on every single request.</p>\n<p>Note that the session cookie is only sent when a session has been created or\nmodified. If <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_SAVE_EVERY_REQUEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SAVE_EVERY_REQUEST</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the session\ncookie will be sent on every request.</p>\n<p>Similarly, the <code class=\"docutils literal notranslate\"><span class=\"pre\">expires</span></code> part of a session cookie is updated each time the\nsession cookie is sent.</p>\n<p>The session is not saved if the response\u2019s status code is 500.</p>\n</div>\n<div class=\"section\" id=\"s-browser-length-sessions-vs-persistent-sessions\">\n<span id=\"s-browser-length-vs-persistent-sessions\"></span><span id=\"browser-length-sessions-vs-persistent-sessions\"></span><span id=\"browser-length-vs-persistent-sessions\"></span><h2>Browser-length sessions vs. persistent sessions<a class=\"headerlink\" href=\"#browser-length-sessions-vs-persistent-sessions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can control whether the session framework uses browser-length sessions vs.\npersistent sessions with the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_EXPIRE_AT_BROWSER_CLOSE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_EXPIRE_AT_BROWSER_CLOSE</span></code></a>\nsetting.</p>\n<p>By default, <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_EXPIRE_AT_BROWSER_CLOSE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_EXPIRE_AT_BROWSER_CLOSE</span></code></a> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>,\nwhich means session cookies will be stored in users\u2019 browsers for as long as\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_AGE</span></code></a>. Use this if you don\u2019t want people to have to\nlog in every time they open a browser.</p>\n<p>If <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_EXPIRE_AT_BROWSER_CLOSE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_EXPIRE_AT_BROWSER_CLOSE</span></code></a> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, Django will\nuse browser-length cookies \u2013 cookies that expire as soon as the user closes\ntheir browser. Use this if you want people to have to log in every time they\nopen a browser.</p>\n<p>This setting is a global default and can be overwritten at a per-session level\nby explicitly calling the <a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.set_expiry\" title=\"django.contrib.sessions.backends.base.SessionBase.set_expiry\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_expiry()</span></code></a> method\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">request.session</span></code> as described above in <a class=\"reference internal\" href=\"#using-sessions-in-views\">using sessions in views</a>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Some browsers (Chrome, for example) provide settings that allow users to\ncontinue browsing sessions after closing and reopening the browser. In\nsome cases, this can interfere with the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_EXPIRE_AT_BROWSER_CLOSE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_EXPIRE_AT_BROWSER_CLOSE</span></code></a> setting and prevent sessions\nfrom expiring on browser close. Please be aware of this while testing\nDjango applications which have the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_EXPIRE_AT_BROWSER_CLOSE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_EXPIRE_AT_BROWSER_CLOSE</span></code></a> setting enabled.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-clearing-the-session-store\">\n<span id=\"s-id2\"></span><span id=\"clearing-the-session-store\"></span><span id=\"id2\"></span><h2>Clearing the session store<a class=\"headerlink\" href=\"#clearing-the-session-store\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As users create new sessions on your website, session data can accumulate in\nyour session store. If you\u2019re using the database backend, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django_session</span></code> database table will grow. If you\u2019re using the file backend,\nyour temporary directory will contain an increasing number of files.</p>\n<p>To understand this problem, consider what happens with the database backend.\nWhen a user logs in, Django adds a row to the <code class=\"docutils literal notranslate\"><span class=\"pre\">django_session</span></code> database\ntable. Django updates this row each time the session data changes. If the user\nlogs out manually, Django deletes the row. But if the user does <em>not</em> log out,\nthe row never gets deleted. A similar process happens with the file backend.</p>\n<p>Django does <em>not</em> provide automatic purging of expired sessions. Therefore,\nit\u2019s your job to purge expired sessions on a regular basis. Django provides a\nclean-up management command for this purpose: <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-clearsessions\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">clearsessions</span></code></a>. It\u2019s\nrecommended to call this command on a regular basis, for example as a daily\ncron job.</p>\n<p>Note that the cache backend isn\u2019t vulnerable to this problem, because caches\nautomatically delete stale data. Neither is the cookie backend, because the\nsession data is stored by the users\u2019 browsers.</p>\n</div>\n<div class=\"section\" id=\"s-settings\">\n<span id=\"settings\"></span><h2>Settings<a class=\"headerlink\" href=\"#settings\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A few <a class=\"reference internal\" href=\"../../../ref/settings/#settings-sessions\"><span class=\"std std-ref\">Django settings</span></a> give you control over session\nbehavior:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_CACHE_ALIAS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_CACHE_ALIAS</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_AGE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_DOMAIN\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_DOMAIN</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_HTTPONLY</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_NAME</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_PATH</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_SAMESITE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_SAMESITE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_SECURE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_SECURE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_EXPIRE_AT_BROWSER_CLOSE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_EXPIRE_AT_BROWSER_CLOSE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_FILE_PATH\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_FILE_PATH</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_SAVE_EVERY_REQUEST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SAVE_EVERY_REQUEST</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_SERIALIZER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_SERIALIZER</span></code></a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-session-security\">\n<span id=\"s-topics-session-security\"></span><span id=\"session-security\"></span><span id=\"topics-session-security\"></span><h2>Session security<a class=\"headerlink\" href=\"#session-security\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Subdomains within a site are able to set cookies on the client for the whole\ndomain. This makes session fixation possible if cookies are permitted from\nsubdomains not controlled by trusted users.</p>\n<p>For example, an attacker could log into <code class=\"docutils literal notranslate\"><span class=\"pre\">good.example.com</span></code> and get a valid\nsession for their account. If the attacker has control over <code class=\"docutils literal notranslate\"><span class=\"pre\">bad.example.com</span></code>,\nthey can use it to send their session key to you since a subdomain is permitted\nto set cookies on <code class=\"docutils literal notranslate\"><span class=\"pre\">*.example.com</span></code>. When you visit <code class=\"docutils literal notranslate\"><span class=\"pre\">good.example.com</span></code>,\nyou\u2019ll be logged in as the attacker and might inadvertently enter your\nsensitive personal data (e.g. credit card info) into the attacker\u2019s account.</p>\n<p>Another possible attack would be if <code class=\"docutils literal notranslate\"><span class=\"pre\">good.example.com</span></code> sets its\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_COOKIE_DOMAIN\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_DOMAIN</span></code></a>&nbsp;to <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;example.com&quot;</span></code> which would cause\nsession cookies from that site to be sent to <code class=\"docutils literal notranslate\"><span class=\"pre\">bad.example.com</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-technical-details\">\n<span id=\"technical-details\"></span><h2>Technical details<a class=\"headerlink\" href=\"#technical-details\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li>The session dictionary accepts any <a class=\"reference external\" href=\"https://docs.python.org/3/library/json.html#module-json\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">json</span></code></a> serializable value when using\n<a class=\"reference internal\" href=\"#django.contrib.sessions.serializers.JSONSerializer\" title=\"django.contrib.sessions.serializers.JSONSerializer\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONSerializer</span></code></a>.</li>\n<li>Session data is stored in a database table named <code class=\"docutils literal notranslate\"><span class=\"pre\">django_session</span></code> .</li>\n<li>Django only sends a cookie if it needs to. If you don\u2019t set any session\ndata, it won\u2019t send a session cookie.</li>\n</ul>\n<div class=\"section\" id=\"s-the-sessionstore-object\">\n<span id=\"the-sessionstore-object\"></span><h3>The <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> object<a class=\"headerlink\" href=\"#the-sessionstore-object\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When working with sessions internally, Django uses a session store object from\nthe corresponding session engine. By convention, the session store object class\nis named <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> and is located in the module designated by\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-SESSION_ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_ENGINE</span></code></a>.</p>\n<p>All <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> classes available in Django inherit from\n<a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase\" title=\"django.contrib.sessions.backends.base.SessionBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SessionBase</span></code></a> and implement data manipulation methods,\nnamely:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">exists()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">load()</span></code></li>\n<li><a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase.clear_expired\" title=\"django.contrib.sessions.backends.base.SessionBase.clear_expired\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">clear_expired()</span></code></a></li>\n</ul>\n<p>In order to build a custom session engine or to customize an existing one, you\nmay create a new class inheriting from <a class=\"reference internal\" href=\"#django.contrib.sessions.backends.base.SessionBase\" title=\"django.contrib.sessions.backends.base.SessionBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SessionBase</span></code></a> or\nany other existing <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> class.</p>\n<p>You can extend the session engines, but doing so with database-backed session\nengines generally requires some extra effort (see the next section for\ndetails).</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-extending-database-backed-session-engines\">\n<span id=\"s-id3\"></span><span id=\"extending-database-backed-session-engines\"></span><span id=\"id3\"></span><h2>Extending database-backed session engines<a class=\"headerlink\" href=\"#extending-database-backed-session-engines\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Creating a custom database-backed session engine built upon those included in\nDjango (namely <code class=\"docutils literal notranslate\"><span class=\"pre\">db</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">cached_db</span></code>) may be done by inheriting\n<a class=\"reference internal\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession\" title=\"django.contrib.sessions.base_session.AbstractBaseSession\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AbstractBaseSession</span></code></a> and either <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> class.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">AbstractBaseSession</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseSessionManager</span></code> are importable from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions.base_session</span></code> so that they can be imported without\nincluding <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code> in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.AbstractBaseSession\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">base_session.</span></code><code class=\"sig-name descname\"><span class=\"pre\">AbstractBaseSession</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The abstract base session model.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.AbstractBaseSession.session_key\">\n<code class=\"sig-name descname\"><span class=\"pre\">session_key</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession.session_key\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Primary key. The field itself may contain up to 40 characters. The\ncurrent implementation generates a 32-character string (a random\nsequence of digits and lowercase ASCII letters).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.AbstractBaseSession.session_data\">\n<code class=\"sig-name descname\"><span class=\"pre\">session_data</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession.session_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string containing an encoded and serialized session dictionary.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.AbstractBaseSession.expire_date\">\n<code class=\"sig-name descname\"><span class=\"pre\">expire_date</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession.expire_date\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A datetime designating when the session expires.</p>\n<p>Expired sessions are not available to a user, however, they may still\nbe stored in the database until the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-clearsessions\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">clearsessions</span></code></a> management\ncommand is run.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.AbstractBaseSession.get_session_store_class\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">get_session_store_class</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession.get_session_store_class\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a session store class to be used with this session model.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.AbstractBaseSession.get_decoded\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_decoded</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.AbstractBaseSession.get_decoded\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns decoded session data.</p>\n<p>Decoding is performed by the session store class.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>You can also customize the model manager by subclassing\n<a class=\"reference internal\" href=\"#django.contrib.sessions.base_session.BaseSessionManager\" title=\"django.contrib.sessions.base_session.BaseSessionManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseSessionManager</span></code></a>:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.BaseSessionManager\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">base_session.</span></code><code class=\"sig-name descname\"><span class=\"pre\">BaseSessionManager</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.BaseSessionManager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.BaseSessionManager.encode\">\n<code class=\"sig-name descname\"><span class=\"pre\">encode</span></code>(<em><span class=\"n\"><span class=\"pre\">session_dict</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.BaseSessionManager.encode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the given session dictionary serialized and encoded as a string.</p>\n<p>Encoding is performed by the session store class tied to a model class.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.base_session.BaseSessionManager.save\">\n<code class=\"sig-name descname\"><span class=\"pre\">save</span></code>(<em><span class=\"n\"><span class=\"pre\">session_key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">session_dict</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expire_date</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.base_session.BaseSessionManager.save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Saves session data for a provided session key, or deletes the session\nin case the data is empty.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>Customization of <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> classes is achieved by overriding methods\nand properties described below:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.db.SessionStore\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">backends.db.</span></code><code class=\"sig-name descname\"><span class=\"pre\">SessionStore</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.backends.db.SessionStore\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements database-backed session store.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.db.SessionStore.get_model_class\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">get_model_class</span></code>()<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.db.SessionStore.get_model_class\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Override this method to return a custom session model if you need one.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.db.SessionStore.create_model_instance\">\n<code class=\"sig-name descname\"><span class=\"pre\">create_model_instance</span></code>(<em><span class=\"n\"><span class=\"pre\">data</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sessions.backends.db.SessionStore.create_model_instance\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a new instance of the session model object, which represents\nthe current session state.</p>\n<p>Overriding this method provides the ability to modify session model\ndata before it\u2019s saved to database.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.cached_db.SessionStore\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">backends.cached_db.</span></code><code class=\"sig-name descname\"><span class=\"pre\">SessionStore</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.backends.cached_db.SessionStore\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Implements cached database-backed session store.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sessions.backends.cached_db.SessionStore.cache_key_prefix\">\n<code class=\"sig-name descname\"><span class=\"pre\">cache_key_prefix</span></code><a class=\"headerlink\" href=\"#django.contrib.sessions.backends.cached_db.SessionStore.cache_key_prefix\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A prefix added to a session key to build a cache key string.</p>\n</dd></dl>\n\n</dd></dl>\n\n<div class=\"section\" id=\"s-example\">\n<span id=\"example\"></span><h3>Example<a class=\"headerlink\" href=\"#example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The example below shows a custom database-backed session engine that includes\nan additional database column to store an account ID (thus providing an option\nto query the database for all active sessions for an account):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sessions.backends.db</span> <span class=\"kn\">import</span> <span class=\"n\">SessionStore</span> <span class=\"k\">as</span> <span class=\"n\">DBStore</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sessions.base_session</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractBaseSession</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomSession</span><span class=\"p\">(</span><span class=\"n\">AbstractBaseSession</span><span class=\"p\">):</span>\n    <span class=\"n\">account_id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">db_index</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_session_store_class</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">SessionStore</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SessionStore</span><span class=\"p\">(</span><span class=\"n\">DBStore</span><span class=\"p\">):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_model_class</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">CustomSession</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_model_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">create_model_instance</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">account_id</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;_auth_user_id&quot;</span><span class=\"p\">))</span>\n        <span class=\"k\">except</span> <span class=\"p\">(</span><span class=\"ne\">ValueError</span><span class=\"p\">,</span> <span class=\"ne\">TypeError</span><span class=\"p\">):</span>\n            <span class=\"n\">account_id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">account_id</span> <span class=\"o\">=</span> <span class=\"n\">account_id</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span>\n</pre></div>\n</div>\n<p>If you are migrating from the Django\u2019s built-in <code class=\"docutils literal notranslate\"><span class=\"pre\">cached_db</span></code> session store to\na custom one based on <code class=\"docutils literal notranslate\"><span class=\"pre\">cached_db</span></code>, you should override the cache key prefix\nin order to prevent a namespace clash:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">SessionStore</span><span class=\"p\">(</span><span class=\"n\">CachedDBStore</span><span class=\"p\">):</span>\n    <span class=\"n\">cache_key_prefix</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;mysessions.custom_cached_db_backend&quot;</span>\n\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-session-ids-in-urls\">\n<span id=\"session-ids-in-urls\"></span><h2>Session IDs in URLs<a class=\"headerlink\" href=\"#session-ids-in-urls\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The Django sessions framework is entirely, and solely, cookie-based. It does\nnot fall back to putting session IDs in URLs as a last resort, as PHP does.\nThis is an intentional design decision. Not only does that behavior make URLs\nugly, it makes your site vulnerable to session-ID theft via the \u201cReferer\u201d\nheader.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/forms/index", "Working with forms", "N", "next"], ["topics/http/middleware", "Middleware", "P", "previous"]], "sourcename": "topics/http/sessions.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to use sessions</a><ul>\n<li><a class=\"reference internal\" href=\"#enabling-sessions\">Enabling sessions</a></li>\n<li><a class=\"reference internal\" href=\"#configuring-the-session-engine\">Configuring the session engine</a><ul>\n<li><a class=\"reference internal\" href=\"#using-database-backed-sessions\">Using database-backed sessions</a></li>\n<li><a class=\"reference internal\" href=\"#using-cached-sessions\">Using cached sessions</a></li>\n<li><a class=\"reference internal\" href=\"#using-file-based-sessions\">Using file-based sessions</a></li>\n<li><a class=\"reference internal\" href=\"#using-cookie-based-sessions\">Using cookie-based sessions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#using-sessions-in-views\">Using sessions in views</a><ul>\n<li><a class=\"reference internal\" href=\"#session-serialization\">Session serialization</a><ul>\n<li><a class=\"reference internal\" href=\"#bundled-serializers\">Bundled serializers</a></li>\n<li><a class=\"reference internal\" href=\"#write-your-own-serializer\">Write your own serializer</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#session-object-guidelines\">Session object guidelines</a></li>\n<li><a class=\"reference internal\" href=\"#examples\">Examples</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#setting-test-cookies\">Setting test cookies</a></li>\n<li><a class=\"reference internal\" href=\"#using-sessions-out-of-views\">Using sessions out of views</a></li>\n<li><a class=\"reference internal\" href=\"#when-sessions-are-saved\">When sessions are saved</a></li>\n<li><a class=\"reference internal\" href=\"#browser-length-sessions-vs-persistent-sessions\">Browser-length sessions vs. persistent sessions</a></li>\n<li><a class=\"reference internal\" href=\"#clearing-the-session-store\">Clearing the session store</a></li>\n<li><a class=\"reference internal\" href=\"#settings\">Settings</a></li>\n<li><a class=\"reference internal\" href=\"#session-security\">Session security</a></li>\n<li><a class=\"reference internal\" href=\"#technical-details\">Technical details</a><ul>\n<li><a class=\"reference internal\" href=\"#the-sessionstore-object\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">SessionStore</span></code> object</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#extending-database-backed-session-engines\">Extending database-backed session engines</a><ul>\n<li><a class=\"reference internal\" href=\"#example\">Example</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#session-ids-in-urls\">Session IDs in URLs</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/http/sessions", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}