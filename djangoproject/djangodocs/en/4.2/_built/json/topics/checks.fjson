{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../signals/", "title": "Signals"}, "next": {"link": "../external-packages/", "title": "External packages"}, "title": "System check framework", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.core.checks\">\n<span id=\"s-system-check-framework\"></span><span id=\"module-django.core.checks\"></span><span id=\"system-check-framework\"></span><h1>System check framework<a class=\"headerlink\" href=\"#module-django.core.checks\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The system check framework is a set of static checks for validating Django\nprojects. It detects common problems and provides hints for how to fix them.\nThe framework is extensible so you can easily add your own checks.</p>\n<p>Checks can be triggered explicitly via the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-check\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">check</span></code></a> command. Checks are\ntriggered implicitly before most commands, including <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>. For performance reasons, checks are not run as part of the\nWSGI stack that is used in deployment. If you need to run system checks on your\ndeployment server, trigger them explicitly using <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-check\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">check</span></code></a>.</p>\n<p>Serious errors will prevent Django commands (such as <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a>) from\nrunning at all. Minor problems are reported to the console. If you have inspected\nthe cause of a warning and are happy to ignore it, you can hide specific warnings\nusing the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SILENCED_SYSTEM_CHECKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SILENCED_SYSTEM_CHECKS</span></code></a> setting in your project settings file.</p>\n<p>A full list of all checks that can be raised by Django can be found in the\n<a class=\"reference internal\" href=\"../../ref/checks/\"><span class=\"doc\">System check reference</span></a>.</p>\n<div class=\"section\" id=\"s-writing-your-own-checks\">\n<span id=\"writing-your-own-checks\"></span><h2>Writing your own checks<a class=\"headerlink\" href=\"#writing-your-own-checks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The framework is flexible and allows you to write functions that perform\nany other kind of check you may require. The following is an example stub\ncheck function:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.checks</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span><span class=\"p\">,</span> <span class=\"n\">register</span>\n\n\n<span class=\"nd\">@register</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">example_check</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"c1\"># ... your check logic here</span>\n    <span class=\"k\">if</span> <span class=\"n\">check_failed</span><span class=\"p\">:</span>\n        <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span>\n            <span class=\"n\">Error</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;an error&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">hint</span><span class=\"o\">=</span><span class=\"s2\">&quot;A hint.&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">checked_object</span><span class=\"p\">,</span>\n                <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;myapp.E001&quot;</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">errors</span>\n</pre></div>\n</div>\n<p>The check function <em>must</em> accept an <code class=\"docutils literal notranslate\"><span class=\"pre\">app_configs</span></code> argument; this argument is\nthe list of applications that should be inspected. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the check must\nbe run on <em>all</em> installed apps in the project.</p>\n<p>The check will receive a <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> keyword argument. This is a list of\ndatabase aliases whose connections may be used to inspect database level\nconfiguration. If <code class=\"docutils literal notranslate\"><span class=\"pre\">databases</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, the check must not use any\ndatabase connections.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> argument is required for future expansion.</p>\n<div class=\"section\" id=\"s-messages\">\n<span id=\"messages\"></span><h3>Messages<a class=\"headerlink\" href=\"#messages\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The function must return a list of messages. If no problems are found as a result\nof the check, the check function must return an empty list.</p>\n<p>The warnings and errors raised by the check method must be instances of\n<a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.CheckMessage\" title=\"django.core.checks.CheckMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CheckMessage</span></code></a>. An instance of\n<a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.CheckMessage\" title=\"django.core.checks.CheckMessage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CheckMessage</span></code></a> encapsulates a single reportable\nerror or warning. It also provides context and hints applicable to the\nmessage, and a unique identifier that is used for filtering purposes.</p>\n<p>The concept is very similar to messages from the <a class=\"reference internal\" href=\"../../ref/contrib/messages/\"><span class=\"doc\">message framework</span></a> or the <a class=\"reference internal\" href=\"../logging/\"><span class=\"doc\">logging framework</span></a>.\nMessages are tagged with a <code class=\"docutils literal notranslate\"><span class=\"pre\">level</span></code> indicating the severity of the message.</p>\n<p>There are also shortcuts to make creating messages with common levels easier.\nWhen using these classes you can omit the <code class=\"docutils literal notranslate\"><span class=\"pre\">level</span></code> argument because it is\nimplied by the class name.</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.Debug\" title=\"django.core.checks.Debug\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Debug</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.Info\" title=\"django.core.checks.Info\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Info</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.Warning\" title=\"django.core.checks.Warning\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Warning</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.Error\" title=\"django.core.checks.Error\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Error</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/checks/#django.core.checks.Critical\" title=\"django.core.checks.Critical\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Critical</span></code></a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-registering-and-labeling-checks\">\n<span id=\"s-registering-labeling-checks\"></span><span id=\"registering-and-labeling-checks\"></span><span id=\"registering-labeling-checks\"></span><h3>Registering and labeling checks<a class=\"headerlink\" href=\"#registering-and-labeling-checks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Lastly, your check function must be registered explicitly with system check\nregistry. Checks should be registered in a file that\u2019s loaded when your\napplication is loaded; for example, in the <a class=\"reference internal\" href=\"../../ref/applications/#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AppConfig.ready()</span></code></a> method.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.core.checks.register\">\n<code class=\"sig-name descname\"><span class=\"pre\">register</span></code>(<em><span class=\"n\"><span class=\"pre\">*tags)(function</span></span></em>)<a class=\"headerlink\" href=\"#django.core.checks.register\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>You can pass as many tags to <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code> as you want in order to label your\ncheck. Tagging checks is useful since it allows you to run only a certain\ngroup of checks. For example, to register a compatibility check, you would\nmake the following call:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.checks</span> <span class=\"kn\">import</span> <span class=\"n\">register</span><span class=\"p\">,</span> <span class=\"n\">Tags</span>\n\n\n<span class=\"nd\">@register</span><span class=\"p\">(</span><span class=\"n\">Tags</span><span class=\"o\">.</span><span class=\"n\">compatibility</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_check</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ... perform compatibility checks and collect errors</span>\n    <span class=\"k\">return</span> <span class=\"n\">errors</span>\n</pre></div>\n</div>\n<p>You can register \u201cdeployment checks\u201d that are only relevant to a production\nsettings file like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"p\">(</span><span class=\"n\">Tags</span><span class=\"o\">.</span><span class=\"n\">security</span><span class=\"p\">,</span> <span class=\"n\">deploy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_check</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>These checks will only be run if the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-check-deploy\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">check</span> <span class=\"pre\">--deploy</span></code></a> option is used.</p>\n<p>You can also use <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code> as a function rather than a decorator by\npassing a callable object (usually a function) as the first argument\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code>.</p>\n<p>The code below is equivalent to the code above:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_check</span><span class=\"p\">(</span><span class=\"n\">app_configs</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">my_check</span><span class=\"p\">,</span> <span class=\"n\">Tags</span><span class=\"o\">.</span><span class=\"n\">security</span><span class=\"p\">,</span> <span class=\"n\">deploy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-field-model-manager-and-database-checks\">\n<span id=\"s-field-checking\"></span><span id=\"field-model-manager-and-database-checks\"></span><span id=\"field-checking\"></span><h3>Field, model, manager, and database checks<a class=\"headerlink\" href=\"#field-model-manager-and-database-checks\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In some cases, you won\u2019t need to register your check function \u2013 you can\npiggyback on an existing registration.</p>\n<p>Fields, models, model managers, and database backends all implement a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">check()</span></code> method that is already registered with the check framework. If you\nwant to add extra checks, you can extend the implementation on the base class,\nperform any extra checks you need, and append any messages to those generated\nby the base class. It\u2019s recommended that you delegate each check to separate\nmethods.</p>\n<p>Consider an example where you are implementing a custom field named\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RangedIntegerField</span></code>. This field adds <code class=\"docutils literal notranslate\"><span class=\"pre\">min</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">max</span></code> arguments to the\nconstructor of <code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code>. You may want to add a check to ensure that users\nprovide a min value that is less than or equal to the max value. The following\ncode snippet shows how you can implement this check:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">checks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RangedIntegerField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"o\">=</span> <span class=\"nb\">min</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max</span> <span class=\"o\">=</span> <span class=\"nb\">max</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Call the superclass</span>\n        <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Do some custom checks and add messages to `errors`:</span>\n        <span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_check_min_max_values</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">))</span>\n\n        <span class=\"c1\"># Return all errors and warnings</span>\n        <span class=\"k\">return</span> <span class=\"n\">errors</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">_check_min_max_values</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">min</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[</span>\n                <span class=\"n\">checks</span><span class=\"o\">.</span><span class=\"n\">Error</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;min greater than max.&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">hint</span><span class=\"o\">=</span><span class=\"s2\">&quot;Decrease min or increase max.&quot;</span><span class=\"p\">,</span>\n                    <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">,</span>\n                    <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;myapp.E001&quot;</span><span class=\"p\">,</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">]</span>\n        <span class=\"c1\"># When no error, return an empty list</span>\n        <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</pre></div>\n</div>\n<p>If you wanted to add checks to a model manager, you would take the same\napproach on your subclass of <a class=\"reference internal\" href=\"../db/managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a>.</p>\n<p>If you want to add a check to a model class, the approach is <em>almost</em> the same:\nthe only difference is that the check is a classmethod, not an instance method:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># ... your own checks ...</span>\n        <span class=\"k\">return</span> <span class=\"n\">errors</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-tests\">\n<span id=\"writing-tests\"></span><h3>Writing tests<a class=\"headerlink\" href=\"#writing-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Messages are comparable. That allows you to easily write tests:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.checks</span> <span class=\"kn\">import</span> <span class=\"n\">Error</span>\n\n<span class=\"n\">errors</span> <span class=\"o\">=</span> <span class=\"n\">checked_object</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n<span class=\"n\">expected_errors</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Error</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;an error&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">hint</span><span class=\"o\">=</span><span class=\"s2\">&quot;A hint.&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">checked_object</span><span class=\"p\">,</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">&quot;myapp.E001&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">]</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">errors</span><span class=\"p\">,</span> <span class=\"n\">expected_errors</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/external-packages", "External packages", "N", "next"], ["topics/signals", "Signals", "P", "previous"]], "sourcename": "topics/checks.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">System check framework</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-your-own-checks\">Writing your own checks</a><ul>\n<li><a class=\"reference internal\" href=\"#messages\">Messages</a></li>\n<li><a class=\"reference internal\" href=\"#registering-and-labeling-checks\">Registering and labeling checks</a></li>\n<li><a class=\"reference internal\" href=\"#field-model-manager-and-database-checks\">Field, model, manager, and database checks</a></li>\n<li><a class=\"reference internal\" href=\"#writing-tests\">Writing tests</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/checks", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}