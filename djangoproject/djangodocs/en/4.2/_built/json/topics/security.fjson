{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../pagination/", "title": "Pagination"}, "next": {"link": "../performance/", "title": "Performance and optimization"}, "title": "Security in Django", "meta": {}, "body": "<div class=\"section\" id=\"s-security-in-django\">\n<span id=\"security-in-django\"></span><h1>Security in Django<a class=\"headerlink\" href=\"#security-in-django\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document is an overview of Django\u2019s security features. It includes advice\non securing a Django-powered site.</p>\n<div class=\"section\" id=\"s-cross-site-scripting-xss-protection\">\n<span id=\"s-cross-site-scripting\"></span><span id=\"cross-site-scripting-xss-protection\"></span><span id=\"cross-site-scripting\"></span><h2>Cross site scripting (XSS) protection<a class=\"headerlink\" href=\"#cross-site-scripting-xss-protection\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>XSS attacks allow a user to inject client side scripts into the browsers of\nother users. This is usually achieved by storing the malicious scripts in the\ndatabase where it will be retrieved and displayed to other users, or by getting\nusers to click a link which will cause the attacker\u2019s JavaScript to be executed\nby the user\u2019s browser. However, XSS attacks can originate from any untrusted\nsource of data, such as cookies or web services, whenever the data is not\nsufficiently sanitized before including in a page.</p>\n<p>Using Django templates protects you against the majority of XSS attacks.\nHowever, it is important to understand what protections it provides\nand its limitations.</p>\n<p>Django templates <a class=\"reference internal\" href=\"../../ref/templates/language/#automatic-html-escaping\"><span class=\"std std-ref\">escape specific characters</span></a>\nwhich are particularly dangerous to HTML. While this protects users from most\nmalicious input, it is not entirely foolproof. For example, it will not\nprotect the following:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>&lt;style class={{ var }}&gt;...&lt;/style&gt;\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">var</span></code> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">'class1</span> <span class=\"pre\">onmouseover=javascript:func()'</span></code>, this can result\nin unauthorized JavaScript execution, depending on how the browser renders\nimperfect HTML. (Quoting the attribute value would fix this case.)</p>\n<p>It is also important to be particularly careful when using <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> with\ncustom template tags, the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-safe\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">safe</span></code></a> template tag, <a class=\"reference internal\" href=\"../../ref/utils/#module-django.utils.safestring\" title=\"django.utils.safestring: Functions and classes for working with strings that can be displayed safely without further escaping in HTML.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">mark_safe</span></code></a>, and when autoescape is turned off.</p>\n<p>In addition, if you are using the template system to output something other\nthan HTML, there may be entirely separate characters and words which require\nescaping.</p>\n<p>You should also be very careful when storing HTML in the database, especially\nwhen that HTML is retrieved and displayed.</p>\n</div>\n<div class=\"section\" id=\"s-cross-site-request-forgery-csrf-protection\">\n<span id=\"cross-site-request-forgery-csrf-protection\"></span><h2>Cross site request forgery (CSRF) protection<a class=\"headerlink\" href=\"#cross-site-request-forgery-csrf-protection\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>CSRF attacks allow a malicious user to execute actions using the credentials\nof another user without that user\u2019s knowledge or consent.</p>\n<p>Django has built-in protection against most types of CSRF attacks, providing you\nhave <a class=\"reference internal\" href=\"../../howto/csrf/#using-csrf\"><span class=\"std std-ref\">enabled and used it</span></a> where appropriate. However, as with\nany mitigation technique, there are limitations. For example, it is possible to\ndisable the CSRF module globally or for particular views. You should only do\nthis if you know what you are doing. There are other <a class=\"reference internal\" href=\"../../ref/csrf/#csrf-limitations\"><span class=\"std std-ref\">limitations</span></a> if your site has subdomains that are outside of your\ncontrol.</p>\n<p><a class=\"reference internal\" href=\"../../ref/csrf/#how-csrf-works\"><span class=\"std std-ref\">CSRF protection works</span></a> by checking for a secret in each\nPOST request. This ensures that a malicious user cannot \u201creplay\u201d a form POST to\nyour website and have another logged in user unwittingly submit that form. The\nmalicious user would have to know the secret, which is user specific (using a\ncookie).</p>\n<p>When deployed with <a class=\"reference internal\" href=\"#security-recommendation-ssl\"><span class=\"std std-ref\">HTTPS</span></a>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> will check that the HTTP referer header is set to a\nURL on the same origin (including subdomain and port). Because HTTPS\nprovides additional security, it is imperative to ensure connections use HTTPS\nwhere it is available by forwarding insecure connection requests and using\nHSTS for supported browsers.</p>\n<p>Be very careful with marking views with the <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_exempt</span></code> decorator unless\nit is absolutely necessary.</p>\n</div>\n<div class=\"section\" id=\"s-sql-injection-protection\">\n<span id=\"s-id1\"></span><span id=\"sql-injection-protection\"></span><span id=\"id1\"></span><h2>SQL injection protection<a class=\"headerlink\" href=\"#sql-injection-protection\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>SQL injection is a type of attack where a malicious user is able to execute\narbitrary SQL code on a database. This can result in records\nbeing deleted or data leakage.</p>\n<p>Django\u2019s querysets are protected from SQL injection since their queries are\nconstructed using query parameterization. A query\u2019s SQL code is defined\nseparately from the query\u2019s parameters. Since parameters may be user-provided\nand therefore unsafe, they are escaped by the underlying database driver.</p>\n<p>Django also gives developers power to write <a class=\"reference internal\" href=\"../db/sql/#executing-raw-queries\"><span class=\"std std-ref\">raw queries</span></a> or execute <a class=\"reference internal\" href=\"../db/sql/#executing-custom-sql\"><span class=\"std std-ref\">custom sql</span></a>.\nThese capabilities should be used sparingly and you should always be careful to\nproperly escape any parameters that the user can control. In addition, you\nshould exercise caution when using <a class=\"reference internal\" href=\"../../ref/models/querysets/#django.db.models.query.QuerySet.extra\" title=\"django.db.models.query.QuerySet.extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">extra()</span></code></a>\nand <a class=\"reference internal\" href=\"../../ref/models/expressions/#django.db.models.expressions.RawSQL\" title=\"django.db.models.expressions.RawSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-clickjacking-protection\">\n<span id=\"clickjacking-protection\"></span><h2>Clickjacking protection<a class=\"headerlink\" href=\"#clickjacking-protection\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Clickjacking is a type of attack where a malicious site wraps another site\nin a frame. This attack can result in an unsuspecting user being tricked\ninto performing unintended actions on the target site.</p>\n<p>Django contains <a class=\"reference internal\" href=\"../../ref/clickjacking/#clickjacking-prevention\"><span class=\"std std-ref\">clickjacking protection</span></a> in\nthe form of the\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.clickjacking.XFrameOptionsMiddleware\" title=\"django.middleware.clickjacking.XFrameOptionsMiddleware\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">X-Frame-Options</span> <span class=\"pre\">middleware</span></code></a>\nwhich in a supporting browser can prevent a site from being rendered inside\na frame. It is possible to disable the protection on a per view basis\nor to configure the exact header value sent.</p>\n<p>The middleware is strongly recommended for any site that does not need to have\nits pages wrapped in a frame by third party sites, or only needs to allow that\nfor a small section of the site.</p>\n</div>\n<div class=\"section\" id=\"s-ssl-https\">\n<span id=\"s-security-recommendation-ssl\"></span><span id=\"ssl-https\"></span><span id=\"security-recommendation-ssl\"></span><h2>SSL/HTTPS<a class=\"headerlink\" href=\"#ssl-https\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It is always better for security to deploy your site behind HTTPS. Without\nthis, it is possible for malicious network users to sniff authentication\ncredentials or any other information transferred between client and server, and\nin some cases \u2013 <strong>active</strong> network attackers \u2013 to alter data that is sent in\neither direction.</p>\n<p>If you want the protection that HTTPS provides, and have enabled it on your\nserver, there are some additional steps you may need:</p>\n<ul>\n<li><p class=\"first\">If necessary, set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECURE_PROXY_SSL_HEADER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECURE_PROXY_SSL_HEADER</span></code></a>, ensuring that you have\nunderstood the warnings there thoroughly. Failure to do this can result\nin CSRF vulnerabilities, and failure to do it correctly can also be\ndangerous!</p>\n</li>\n<li><p class=\"first\">Set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECURE_SSL_REDIRECT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECURE_SSL_REDIRECT</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, so that requests over HTTP\nare redirected to HTTPS.</p>\n<p>Please note the caveats under <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECURE_PROXY_SSL_HEADER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECURE_PROXY_SSL_HEADER</span></code></a>. For the\ncase of a reverse proxy, it may be easier or more secure to configure the\nmain web server to do the redirect to HTTPS.</p>\n</li>\n<li><p class=\"first\">Use \u2018secure\u2019 cookies.</p>\n<p>If a browser connects initially via HTTP, which is the default for most\nbrowsers, it is possible for existing cookies to be leaked. For this reason,\nyou should set your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SESSION_COOKIE_SECURE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SESSION_COOKIE_SECURE</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_SECURE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_SECURE</span></code></a> settings to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. This instructs the browser\nto only send these cookies over HTTPS connections. Note that this will mean\nthat sessions will not work over HTTP, and the CSRF protection will prevent\nany POST data being accepted over HTTP (which will be fine if you are\nredirecting all HTTP traffic to HTTPS).</p>\n</li>\n<li><p class=\"first\">Use <a class=\"reference internal\" href=\"../../ref/middleware/#http-strict-transport-security\"><span class=\"std std-ref\">HTTP Strict Transport Security</span></a> (HSTS)</p>\n<p>HSTS is an HTTP header that informs a browser that all future connections\nto a particular site should always use HTTPS. Combined with redirecting\nrequests over HTTP to HTTPS, this will ensure that connections always enjoy\nthe added security of SSL provided one successful connection has occurred.\nHSTS may either be configured with <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECURE_HSTS_SECONDS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECURE_HSTS_SECONDS</span></code></a>,\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECURE_HSTS_INCLUDE_SUBDOMAINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECURE_HSTS_INCLUDE_SUBDOMAINS</span></code></a>, and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECURE_HSTS_PRELOAD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECURE_HSTS_PRELOAD</span></code></a>,\nor on the web server.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-host-header-validation\">\n<span id=\"s-host-headers-virtual-hosting\"></span><span id=\"host-header-validation\"></span><span id=\"host-headers-virtual-hosting\"></span><h2>Host header validation<a class=\"headerlink\" href=\"#host-header-validation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> header provided by the client to construct URLs in\ncertain cases. While these values are sanitized to prevent Cross Site Scripting\nattacks, a fake <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> value can be used for Cross-Site Request Forgery,\ncache poisoning attacks, and poisoning links in emails.</p>\n<p>Because even seemingly-secure web server configurations are susceptible to fake\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> headers, Django validates <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> headers against the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> setting in the\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.http.HttpRequest.get_host()</span></code></a> method.</p>\n<p>This validation only applies via <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_host()</span></code></a>;\nif your code accesses the <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> header directly from <code class=\"docutils literal notranslate\"><span class=\"pre\">request.META</span></code> you\nare bypassing this security protection.</p>\n<p>For more details see the full <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> documentation.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Previous versions of this document recommended configuring your web server to\nensure it validates incoming HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> headers. While this is still\nrecommended, in many common web servers a configuration that seems to\nvalidate the <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> header may not in fact do so. For instance, even if\nApache is configured such that your Django site is served from a non-default\nvirtual host with the <code class=\"docutils literal notranslate\"><span class=\"pre\">ServerName</span></code> set, it is still possible for an HTTP\nrequest to match this virtual host and supply a fake <code class=\"docutils literal notranslate\"><span class=\"pre\">Host</span></code> header. Thus,\nDjango now requires that you set <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> explicitly rather\nthan relying on web server configuration.</p>\n</div>\n<p>Additionally, Django requires you to explicitly enable support for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">X-Forwarded-Host</span></code> header (via the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USE_X_FORWARDED_HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_X_FORWARDED_HOST</span></code></a> setting)\nif your configuration requires it.</p>\n</div>\n<div class=\"section\" id=\"s-referrer-policy\">\n<span id=\"referrer-policy\"></span><h2>Referrer policy<a class=\"headerlink\" href=\"#referrer-policy\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Browsers use the <code class=\"docutils literal notranslate\"><span class=\"pre\">Referer</span></code> header as a way to send information to a site\nabout how users got there. By setting a <em>Referrer Policy</em> you can help to\nprotect the privacy of your users, restricting under which circumstances the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Referer</span></code> header is set. See <a class=\"reference internal\" href=\"../../ref/middleware/#referrer-policy\"><span class=\"std std-ref\">the referrer policy section of the\nsecurity middleware reference</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-cross-origin-opener-policy\">\n<span id=\"cross-origin-opener-policy\"></span><h2>Cross-origin opener policy<a class=\"headerlink\" href=\"#cross-origin-opener-policy\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The cross-origin opener policy (COOP) header allows browsers to isolate a\ntop-level window from other documents by putting them in a different context\ngroup so that they cannot directly interact with the top-level window. If a\ndocument protected by COOP opens a cross-origin popup window, the popup\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">window.opener</span></code> property will be <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code>. COOP protects against cross-origin\nattacks. See <a class=\"reference internal\" href=\"../../ref/middleware/#cross-origin-opener-policy\"><span class=\"std std-ref\">the cross-origin opener policy section of the security\nmiddleware reference</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-session-security\">\n<span id=\"session-security\"></span><h2>Session security<a class=\"headerlink\" href=\"#session-security\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Similar to the <a class=\"reference internal\" href=\"../../ref/csrf/#csrf-limitations\"><span class=\"std std-ref\">CSRF limitations</span></a> requiring a site to\nbe deployed such that untrusted users don\u2019t have access to any subdomains,\n<a class=\"reference internal\" href=\"../http/sessions/#module-django.contrib.sessions\" title=\"django.contrib.sessions: Provides session management for Django projects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.sessions</span></code></a> also has limitations. See <a class=\"reference internal\" href=\"../http/sessions/#topics-session-security\"><span class=\"std std-ref\">the session\ntopic guide section on security</span></a> for details.</p>\n</div>\n<div class=\"section\" id=\"s-user-uploaded-content\">\n<span id=\"s-user-uploaded-content-security\"></span><span id=\"user-uploaded-content\"></span><span id=\"user-uploaded-content-security\"></span><h2>User-uploaded content<a class=\"headerlink\" href=\"#user-uploaded-content\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Consider <a class=\"reference internal\" href=\"../../howto/static-files/deployment/#staticfiles-from-cdn\"><span class=\"std std-ref\">serving static files from a cloud service or CDN</span></a> to avoid some of these issues.</p>\n</div>\n<ul>\n<li><p class=\"first\">If your site accepts file uploads, it is strongly advised that you limit\nthese uploads in your web server configuration to a reasonable\nsize in order to prevent denial of service (DOS) attacks. In Apache, this\ncan be easily set using the <a class=\"reference external\" href=\"https://httpd.apache.org/docs/2.4/mod/core.html#limitrequestbody\">LimitRequestBody</a> directive.</p>\n</li>\n<li><p class=\"first\">If you are serving your own static files, be sure that handlers like Apache\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mod_php</span></code>, which would execute static files as code, are disabled. You don\u2019t\nwant users to be able to execute arbitrary code by uploading and requesting a\nspecially crafted file.</p>\n</li>\n<li><p class=\"first\">Django\u2019s media upload handling poses some vulnerabilities when that media is\nserved in ways that do not follow security best practices. Specifically, an\nHTML file can be uploaded as an image if that file contains a valid PNG\nheader followed by malicious HTML. This file will pass verification of the\nlibrary that Django uses for <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a> image\nprocessing (Pillow). When this file is subsequently displayed to a\nuser, it may be displayed as HTML depending on the type and configuration of\nyour web server.</p>\n<p>No bulletproof technical solution exists at the framework level to safely\nvalidate all user uploaded file content, however, there are some other steps\nyou can take to mitigate these attacks:</p>\n<ol class=\"arabic simple\">\n<li>One class of attacks can be prevented by always serving user uploaded\ncontent from a distinct top-level or second-level domain. This prevents\nany exploit blocked by <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Same-origin_policy\">same-origin policy</a> protections such as cross\nsite scripting. For example, if your site runs on <code class=\"docutils literal notranslate\"><span class=\"pre\">example.com</span></code>, you\nwould want to serve uploaded content (the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> setting)\nfrom something like <code class=\"docutils literal notranslate\"><span class=\"pre\">usercontent-example.com</span></code>. It\u2019s <em>not</em> sufficient to\nserve content from a subdomain like <code class=\"docutils literal notranslate\"><span class=\"pre\">usercontent.example.com</span></code>.</li>\n<li>Beyond this, applications may choose to define a list of allowable\nfile extensions for user uploaded files and configure the web server\nto only serve such files.</li>\n</ol>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-additional-security-topics\">\n<span id=\"s-id2\"></span><span id=\"additional-security-topics\"></span><span id=\"id2\"></span><h2>Additional security topics<a class=\"headerlink\" href=\"#additional-security-topics\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>While Django provides good security protection out of the box, it is still\nimportant to properly deploy your application and take advantage of the\nsecurity protection of the web server, operating system and other components.</p>\n<ul class=\"simple\">\n<li>Make sure that your Python code is outside of the web server\u2019s root. This\nwill ensure that your Python code is not accidentally served as plain text\n(or accidentally executed).</li>\n<li>Take care with any <a class=\"reference internal\" href=\"../../ref/models/fields/#file-upload-security\"><span class=\"std std-ref\">user uploaded files</span></a>.</li>\n<li>Django does not throttle requests to authenticate users. To protect against\nbrute-force attacks against the authentication system, you may consider\ndeploying a Django plugin or web server module to throttle these requests.</li>\n<li>Keep your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY</span></code></a>, and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SECRET_KEY_FALLBACKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SECRET_KEY_FALLBACKS</span></code></a> if in\nuse, secret.</li>\n<li>It is a good idea to limit the accessibility of your caching system and\ndatabase using a firewall.</li>\n<li>Take a look at the Open Web Application Security Project (OWASP) <a class=\"reference external\" href=\"https://owasp.org/Top10/\">Top 10\nlist</a> which identifies some common vulnerabilities in web applications. While\nDjango has tools to address some of the issues, other issues must be\naccounted for in the design of your project.</li>\n<li>Mozilla discusses various topics regarding <a class=\"reference external\" href=\"https://infosec.mozilla.org/guidelines/web_security.html\">web security</a>. Their\npages also include security principles that apply to any system.</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/performance", "Performance and optimization", "N", "next"], ["topics/pagination", "Pagination", "P", "previous"]], "sourcename": "topics/security.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Security in Django</a><ul>\n<li><a class=\"reference internal\" href=\"#cross-site-scripting-xss-protection\">Cross site scripting (XSS) protection</a></li>\n<li><a class=\"reference internal\" href=\"#cross-site-request-forgery-csrf-protection\">Cross site request forgery (CSRF) protection</a></li>\n<li><a class=\"reference internal\" href=\"#sql-injection-protection\">SQL injection protection</a></li>\n<li><a class=\"reference internal\" href=\"#clickjacking-protection\">Clickjacking protection</a></li>\n<li><a class=\"reference internal\" href=\"#ssl-https\">SSL/HTTPS</a></li>\n<li><a class=\"reference internal\" href=\"#host-header-validation\">Host header validation</a></li>\n<li><a class=\"reference internal\" href=\"#referrer-policy\">Referrer policy</a></li>\n<li><a class=\"reference internal\" href=\"#cross-origin-opener-policy\">Cross-origin opener policy</a></li>\n<li><a class=\"reference internal\" href=\"#session-security\">Session security</a></li>\n<li><a class=\"reference internal\" href=\"#user-uploaded-content\">User-uploaded content</a></li>\n<li><a class=\"reference internal\" href=\"#additional-security-topics\">Additional security topics</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/security", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
