{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../class-based-views/mixins/", "title": "Using mixins with class-based views"}, "next": {"link": "../files/", "title": "Managing files"}, "title": "Migrations", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.db.migrations\">\n<span id=\"s-migrations\"></span><span id=\"module-django.db.migrations\"></span><span id=\"migrations\"></span><h1>Migrations<a class=\"headerlink\" href=\"#module-django.db.migrations\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Migrations are Django\u2019s way of propagating changes you make to your models\n(adding a field, deleting a model, etc.) into your database schema. They\u2019re\ndesigned to be mostly automatic, but you\u2019ll need to know when to make\nmigrations, when to run them, and the common problems you might run into.</p>\n<div class=\"section\" id=\"s-the-commands\">\n<span id=\"the-commands\"></span><h2>The Commands<a class=\"headerlink\" href=\"#the-commands\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are several commands which you will use to interact with migrations\nand Django\u2019s handling of database schema:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>, which is responsible for applying and unapplying\nmigrations.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a>, which is responsible for creating new migrations\nbased on the changes you have made to your models.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-sqlmigrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">sqlmigrate</span></code></a>, which displays the SQL statements for a migration.</li>\n<li><a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-showmigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">showmigrations</span></code></a>, which lists a project\u2019s migrations and their\nstatus.</li>\n</ul>\n<p>You should think of migrations as a version control system for your database\nschema. <code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code> is responsible for packaging up your model changes\ninto individual migration files - analogous to commits - and <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> is\nresponsible for applying those to your database.</p>\n<p>The migration files for each app live in a \u201cmigrations\u201d directory inside\nof that app, and are designed to be committed to, and distributed as part\nof, its codebase. You should be making them once on your development machine\nand then running the same migrations on your colleagues\u2019 machines, your\nstaging machines, and eventually your production machines.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">It is possible to override the name of the package which contains the\nmigrations on a per-app basis by modifying the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MIGRATION_MODULES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIGRATION_MODULES</span></code></a>\nsetting.</p>\n</div>\n<p>Migrations will run the same way on the same dataset and produce consistent\nresults, meaning that what you see in development and staging is, under the\nsame circumstances, exactly what will happen in production.</p>\n<p>Django will make migrations for any change to your models or fields - even\noptions that don\u2019t affect the database - as the only way it can reconstruct\na field correctly is to have all the changes in the history, and you might\nneed those options in some data migrations later on (for example, if you\u2019ve\nset custom validators).</p>\n</div>\n<div class=\"section\" id=\"s-backend-support\">\n<span id=\"backend-support\"></span><h2>Backend Support<a class=\"headerlink\" href=\"#backend-support\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Migrations are supported on all backends that Django ships with, as well\nas any third-party backends if they have programmed in support for schema\nalteration (done via the <a class=\"reference internal\" href=\"../../ref/schema-editor/\"><span class=\"doc\">SchemaEditor</span></a> class).</p>\n<p>However, some databases are more capable than others when it comes to\nschema migrations; some of the caveats are covered below.</p>\n<div class=\"section\" id=\"s-postgresql\">\n<span id=\"postgresql\"></span><h3>PostgreSQL<a class=\"headerlink\" href=\"#postgresql\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>PostgreSQL is the most capable of all the databases here in terms of schema\nsupport.</p>\n</div>\n<div class=\"section\" id=\"s-mysql\">\n<span id=\"mysql\"></span><h3>MySQL<a class=\"headerlink\" href=\"#mysql\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>MySQL lacks support for transactions around schema alteration operations,\nmeaning that if a migration fails to apply you will have to manually unpick\nthe changes in order to try again (it\u2019s impossible to roll back to an\nearlier point).</p>\n<p>In addition, MySQL will fully rewrite tables for almost every schema operation\nand generally takes a time proportional to the number of rows in the table to\nadd or remove columns. On slower hardware this can be worse than a minute per\nmillion rows - adding a few columns to a table with just a few million rows\ncould lock your site up for over ten minutes.</p>\n<p>Finally, MySQL has relatively small limits on name lengths for columns, tables\nand indexes, as well as a limit on the combined size of all columns an index\ncovers. This means that indexes that are possible on other backends will\nfail to be created under MySQL.</p>\n</div>\n<div class=\"section\" id=\"s-sqlite\">\n<span id=\"sqlite\"></span><h3>SQLite<a class=\"headerlink\" href=\"#sqlite\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>SQLite has very little built-in schema alteration support, and so Django\nattempts to emulate it by:</p>\n<ul class=\"simple\">\n<li>Creating a new table with the new schema</li>\n<li>Copying the data across</li>\n<li>Dropping the old table</li>\n<li>Renaming the new table to match the original name</li>\n</ul>\n<p>This process generally works well, but it can be slow and occasionally\nbuggy. It is not recommended that you run and migrate SQLite in a\nproduction environment unless you are very aware of the risks and\nits limitations; the support Django ships with is designed to allow\ndevelopers to use SQLite on their local machines to develop less complex\nDjango projects without the need for a full database.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-workflow\">\n<span id=\"workflow\"></span><h2>Workflow<a class=\"headerlink\" href=\"#workflow\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django can create migrations for you. Make changes to your models - say, add a\nfield and remove a model - and then run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a>:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py makemigrations\nMigrations <span class=\"k\">for</span> <span class=\"s1\">&#39;books&#39;</span>:\n  books/migrations/0003_auto.py:\n    - Alter field author on book\n</pre></div>\n</div>\n<p>Your models will be scanned and compared to the versions currently\ncontained in your migration files, and then a new set of migrations\nwill be written out. Make sure to read the output to see what\n<code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code> thinks you have changed - it\u2019s not perfect, and for\ncomplex changes it might not be detecting what you expect.</p>\n<p>Once you have your new migration files, you should apply them to your\ndatabase to make sure they work as expected:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py migrate\nOperations to perform:\n  Apply all migrations: books\nRunning migrations:\n  Rendering model states... DONE\n  Applying books.0003_auto... OK\n</pre></div>\n</div>\n<p>Once the migration is applied, commit the migration and the models change\nto your version control system as a single commit - that way, when other\ndevelopers (or your production servers) check out the code, they\u2019ll\nget both the changes to your models and the accompanying migration at the\nsame time.</p>\n<p>If you want to give the migration(s) a meaningful name instead of a generated\none, you can use the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-makemigrations-name\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">makemigrations</span> <span class=\"pre\">--name</span></code></a> option:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py makemigrations --name changed_my_model your_app_label\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-version-control\">\n<span id=\"version-control\"></span><h3>Version control<a class=\"headerlink\" href=\"#version-control\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Because migrations are stored in version control, you\u2019ll occasionally\ncome across situations where you and another developer have both committed\na migration to the same app at the same time, resulting in two migrations\nwith the same number.</p>\n<p>Don\u2019t worry - the numbers are just there for developers\u2019 reference, Django\njust cares that each migration has a different name. Migrations specify which\nother migrations they depend on - including earlier migrations in the same\napp - in the file, so it\u2019s possible to detect when there\u2019s two new migrations\nfor the same app that aren\u2019t ordered.</p>\n<p>When this happens, Django will prompt you and give you some options. If it\nthinks it\u2019s safe enough, it will offer to automatically linearize the two\nmigrations for you. If not, you\u2019ll have to go in and modify the migrations\nyourself - don\u2019t worry, this isn\u2019t difficult, and is explained more in\n<a class=\"reference internal\" href=\"#migration-files\"><span class=\"std std-ref\">Migration files</span></a> below.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-transactions\">\n<span id=\"transactions\"></span><h2>Transactions<a class=\"headerlink\" href=\"#transactions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>On databases that support DDL transactions (SQLite and PostgreSQL), all\nmigration operations will run inside a single transaction by default. In\ncontrast, if a database doesn\u2019t support DDL transactions (e.g. MySQL, Oracle)\nthen all operations will run without a transaction.</p>\n<p>You can prevent a migration from running in a transaction by setting the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">atomic</span></code> attribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">atomic</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n</pre></div>\n</div>\n<p>It\u2019s also possible to execute parts of the migration inside a transaction using\n<a class=\"reference internal\" href=\"../db/transactions/#django.db.transaction.atomic\" title=\"django.db.transaction.atomic\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">atomic()</span></code></a> or by passing <code class=\"docutils literal notranslate\"><span class=\"pre\">atomic=True</span></code> to\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a>. See\n<a class=\"reference internal\" href=\"../../howto/writing-migrations/#non-atomic-migrations\"><span class=\"std std-ref\">Non-atomic migrations</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-dependencies\">\n<span id=\"dependencies\"></span><h2>Dependencies<a class=\"headerlink\" href=\"#dependencies\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>While migrations are per-app, the tables and relationships implied by\nyour models are too complex to be created for one app at a time. When you make\na migration that requires something else to run - for example, you add a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> in your <code class=\"docutils literal notranslate\"><span class=\"pre\">books</span></code> app to your <code class=\"docutils literal notranslate\"><span class=\"pre\">authors</span></code> app - the resulting\nmigration will contain a dependency on a migration in <code class=\"docutils literal notranslate\"><span class=\"pre\">authors</span></code>.</p>\n<p>This means that when you run the migrations, the <code class=\"docutils literal notranslate\"><span class=\"pre\">authors</span></code> migration runs\nfirst and creates the table the <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> references, and then the migration\nthat makes the <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> column runs afterward and creates the constraint.\nIf this didn\u2019t happen, the migration would try to create the <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code>\ncolumn without the table it\u2019s referencing existing and your database would\nthrow an error.</p>\n<p>This dependency behavior affects most migration operations where you\nrestrict to a single app. Restricting to a single app (either in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code>) is a best-efforts promise, and not\na guarantee; any other apps that need to be used to get dependencies correct\nwill be.</p>\n<p>Apps without migrations must not have relations (<code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code>, etc.) to apps with migrations. Sometimes it may work, but\nit\u2019s not supported.</p>\n<div class=\"section\" id=\"s-swappable-dependencies\">\n<span id=\"swappable-dependencies\"></span><h3>Swappable dependencies<a class=\"headerlink\" href=\"#swappable-dependencies\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.db.migrations.django.db.migrations.swappable_dependency\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.migrations.</span></code><code class=\"sig-name descname\"><span class=\"pre\">swappable_dependency</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"headerlink\" href=\"#django.db.migrations.django.db.migrations.swappable_dependency\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">swappable_dependency()</span></code> function is used in migrations to declare\n\u201cswappable\u201d dependencies on migrations in the app of the swapped-in model,\ncurrently, on the first migration of this app. As a consequence, the swapped-in\nmodel should be created in the initial migration. The argument <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is a\nstring <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;&lt;app</span> <span class=\"pre\">label&gt;.&lt;model&gt;&quot;</span></code> describing an app label and a model name, e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;myapp.MyModel&quot;</span></code>.</p>\n<p>By using <code class=\"docutils literal notranslate\"><span class=\"pre\">swappable_dependency()</span></code>, you inform the migration framework that\nthe migration relies on another migration which sets up a swappable model,\nallowing for the possibility of substituting the model with a different\nimplementation in the future. This is typically used for referencing models\nthat are subject to customization or replacement, such as the custom user\nmodel (<code class=\"docutils literal notranslate\"><span class=\"pre\">settings.AUTH_USER_MODEL</span></code>, which defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;auth.User&quot;</span></code>) in\nDjango\u2019s authentication system.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-migration-files\">\n<span id=\"s-id1\"></span><span id=\"migration-files\"></span><span id=\"id1\"></span><h2>Migration files<a class=\"headerlink\" href=\"#migration-files\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Migrations are stored as an on-disk format, referred to here as\n\u201cmigration files\u201d. These files are actually normal Python files with an\nagreed-upon object layout, written in a declarative style.</p>\n<p>A basic migration file looks like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span><span class=\"p\">,</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"s2\">&quot;migrations&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0001_initial&quot;</span><span class=\"p\">)]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">DeleteModel</span><span class=\"p\">(</span><span class=\"s2\">&quot;Tribble&quot;</span><span class=\"p\">),</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">AddField</span><span class=\"p\">(</span><span class=\"s2\">&quot;Author&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>What Django looks for when it loads a migration file (as a Python module) is\na subclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.migrations.Migration</span></code> called <code class=\"docutils literal notranslate\"><span class=\"pre\">Migration</span></code>. It then\ninspects this object for four attributes, only two of which are used\nmost of the time:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">dependencies</span></code>, a list of migrations this one depends on.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">operations</span></code>, a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">Operation</span></code> classes that define what this\nmigration does.</li>\n</ul>\n<p>The operations are the key; they are a set of declarative instructions which\ntell Django what schema changes need to be made. Django scans them and\nbuilds an in-memory representation of all of the schema changes to all apps,\nand uses this to generate the SQL which makes the schema changes.</p>\n<p>That in-memory structure is also used to work out what the differences are\nbetween your models and the current state of your migrations; Django runs\nthrough all the changes, in order, on an in-memory set of models to come\nup with the state of your models last time you ran <code class=\"docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code>. It\nthen uses these models to compare against the ones in your <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> files\nto work out what you have changed.</p>\n<p>You should rarely, if ever, need to edit migration files by hand, but\nit\u2019s entirely possible to write them manually if you need to. Some of the\nmore complex operations are not autodetectable and are only available via\na hand-written migration, so don\u2019t be scared about editing them if you have to.</p>\n<div class=\"section\" id=\"s-custom-fields\">\n<span id=\"custom-fields\"></span><h3>Custom fields<a class=\"headerlink\" href=\"#custom-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can\u2019t modify the number of positional arguments in an already migrated\ncustom field without raising a <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code>. The old migration will call the\nmodified <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method with the old signature. So if you need a new\nargument, please create a keyword argument and add something like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">assert</span> <span class=\"pre\">'argument_name'</span> <span class=\"pre\">in</span> <span class=\"pre\">kwargs</span></code> in the constructor.</p>\n</div>\n<div class=\"section\" id=\"s-model-managers\">\n<span id=\"s-using-managers-in-migrations\"></span><span id=\"model-managers\"></span><span id=\"using-managers-in-migrations\"></span><h3>Model managers<a class=\"headerlink\" href=\"#model-managers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can optionally serialize managers into migrations and have them available\nin <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> operations. This is done\nby defining a <code class=\"docutils literal notranslate\"><span class=\"pre\">use_in_migrations</span></code> attribute on the manager class:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"n\">use_in_migrations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">MyManager</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you are using the <a class=\"reference internal\" href=\"../db/managers/#django.db.models.from_queryset\" title=\"django.db.models.from_queryset\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">from_queryset()</span></code></a> function to\ndynamically generate a manager class, you need to inherit from the generated\nclass to make it importable:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyManager</span><span class=\"p\">(</span><span class=\"n\">MyBaseManager</span><span class=\"o\">.</span><span class=\"n\">from_queryset</span><span class=\"p\">(</span><span class=\"n\">CustomQuerySet</span><span class=\"p\">)):</span>\n    <span class=\"n\">use_in_migrations</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">MyManager</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Please refer to the notes about <a class=\"reference internal\" href=\"#historical-models\"><span class=\"std std-ref\">Historical models</span></a> in migrations to see\nthe implications that come along.</p>\n</div>\n<div class=\"section\" id=\"s-initial-migrations\">\n<span id=\"initial-migrations\"></span><h3>Initial migrations<a class=\"headerlink\" href=\"#initial-migrations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.migrations.Migration.initial\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Migration.</span></code><code class=\"sig-name descname\"><span class=\"pre\">initial</span></code><a class=\"headerlink\" href=\"#django.db.migrations.Migration.initial\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The \u201cinitial migrations\u201d for an app are the migrations that create the first\nversion of that app\u2019s tables. Usually an app will have one initial migration,\nbut in some cases of complex model interdependencies it may have two or more.</p>\n<p>Initial migrations are marked with an <code class=\"docutils literal notranslate\"><span class=\"pre\">initial</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> class attribute on the\nmigration class. If an <code class=\"docutils literal notranslate\"><span class=\"pre\">initial</span></code> class attribute isn\u2019t found, a migration\nwill be considered \u201cinitial\u201d if it is the first migration in the app (i.e. if\nit has no dependencies on any other migration in the same app).</p>\n<p>When the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-migrate-fake-initial\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">migrate</span> <span class=\"pre\">--fake-initial</span></code></a> option is used, these initial\nmigrations are treated specially. For an initial migration that creates one or\nmore tables (<code class=\"docutils literal notranslate\"><span class=\"pre\">CreateModel</span></code> operation), Django checks that all of those tables\nalready exist in the database and fake-applies the migration if so. Similarly,\nfor an initial migration that adds one or more fields (<code class=\"docutils literal notranslate\"><span class=\"pre\">AddField</span></code> operation),\nDjango checks that all of the respective columns already exist in the database\nand fake-applies the migration if so. Without <code class=\"docutils literal notranslate\"><span class=\"pre\">--fake-initial</span></code>, initial\nmigrations are treated no differently from any other migration.</p>\n</div>\n<div class=\"section\" id=\"s-history-consistency\">\n<span id=\"s-migration-history-consistency\"></span><span id=\"history-consistency\"></span><span id=\"migration-history-consistency\"></span><h3>History consistency<a class=\"headerlink\" href=\"#history-consistency\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As previously discussed, you may need to linearize migrations manually when two\ndevelopment branches are joined. While editing migration dependencies, you can\ninadvertently create an inconsistent history state where a migration has been\napplied but some of its dependencies haven\u2019t. This is a strong indication that\nthe dependencies are incorrect, so Django will refuse to run migrations or make\nnew migrations until it\u2019s fixed. When using multiple databases, you can use the\n<a class=\"reference internal\" href=\"../db/multi-db/#allow_migrate\" title=\"allow_migrate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">allow_migrate()</span></code></a> method of <a class=\"reference internal\" href=\"../db/multi-db/#topics-db-multi-db-routing\"><span class=\"std std-ref\">database routers</span></a> to control which databases\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> checks for consistent history.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-adding-migrations-to-apps\">\n<span id=\"adding-migrations-to-apps\"></span><h2>Adding migrations to apps<a class=\"headerlink\" href=\"#adding-migrations-to-apps\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>New apps come preconfigured to accept migrations, and so you can add migrations\nby running <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> once you\u2019ve made some changes.</p>\n<p>If your app already has models and database tables, and doesn\u2019t have migrations\nyet (for example, you created it against a previous Django version), you\u2019ll\nneed to convert it to use migrations by running:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py makemigrations your_app_label\n</pre></div>\n</div>\n<p>This will make a new initial migration for your app. Now, run <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span>\n<span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span> <span class=\"pre\">--fake-initial</span></code>, and Django will detect that you have an\ninitial migration <em>and</em> that the tables it wants to create already exist, and\nwill mark the migration as already applied. (Without the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-migrate-fake-initial\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">migrate</span>\n<span class=\"pre\">--fake-initial</span></code></a> flag, the command would error out because the tables it wants\nto create already exist.)</p>\n<p>Note that this only works given two things:</p>\n<ul class=\"simple\">\n<li>You have not changed your models since you made their tables. For migrations\nto work, you must make the initial migration <em>first</em> and then make changes,\nas Django compares changes against migration files, not the database.</li>\n<li>You have not manually edited your database - Django won\u2019t be able to detect\nthat your database doesn\u2019t match your models, you\u2019ll just get errors when\nmigrations try to modify those tables.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-reversing-migrations\">\n<span id=\"s-id2\"></span><span id=\"reversing-migrations\"></span><span id=\"id2\"></span><h2>Reversing migrations<a class=\"headerlink\" href=\"#reversing-migrations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Migrations can be reversed with <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> by passing the number of the\nprevious migration. For example, to reverse migration <code class=\"docutils literal notranslate\"><span class=\"pre\">books.0003</span></code>:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py migrate books <span class=\"m\">0002</span>\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Target specific migration: 0002_auto, from books</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Unapplying books.0003_auto... OK</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py migrate books 0002\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Target specific migration: 0002_auto, from books</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Unapplying books.0003_auto... OK</span>\n</pre></div>\n</section>\n</div>\n<p>If you want to reverse all migrations applied for an app, use the name\n<code class=\"docutils literal notranslate\"><span class=\"pre\">zero</span></code>:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py migrate books zero\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Unapply all migrations: books</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Unapplying books.0002_auto... OK</span>\n<span class=\"go\">  Unapplying books.0001_initial... OK</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py migrate books zero\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Unapply all migrations: books</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Unapplying books.0002_auto... OK</span>\n<span class=\"go\">  Unapplying books.0001_initial... OK</span>\n</pre></div>\n</section>\n</div>\n<p>A migration is irreversible if it contains any irreversible operations.\nAttempting to reverse such migrations will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">IrreversibleError</span></code>:</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py migrate books <span class=\"m\">0002</span>\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Target specific migration: 0002_auto, from books</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Unapplying books.0003_auto...Traceback (most recent call last):</span>\n<span class=\"go\">django.db.migrations.exceptions.IrreversibleError: Operation &lt;RunSQL  sql=&#39;DROP TABLE demo_books&#39;&gt; in books.0003_auto is not reversible</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py migrate books 0002\n<span class=\"go\">Operations to perform:</span>\n<span class=\"go\">  Target specific migration: 0002_auto, from books</span>\n<span class=\"go\">Running migrations:</span>\n<span class=\"go\">  Rendering model states... DONE</span>\n<span class=\"go\">  Unapplying books.0003_auto...Traceback (most recent call last):</span>\n<span class=\"gp\">django.db.migrations.exceptions.IrreversibleError: Operation &lt;RunSQL  sql=&#39;DROP TABLE demo_books&#39;&gt;</span> in books.0003_auto is not reversible\n</pre></div>\n</section>\n</div>\n</div>\n<div class=\"section\" id=\"s-historical-models\">\n<span id=\"s-id3\"></span><span id=\"historical-models\"></span><span id=\"id3\"></span><h2>Historical models<a class=\"headerlink\" href=\"#historical-models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you run migrations, Django is working from historical versions of your\nmodels stored in the migration files. If you write Python code using the\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> operation, or if you have\n<code class=\"docutils literal notranslate\"><span class=\"pre\">allow_migrate</span></code> methods on your database routers, you <strong>need to use</strong> these\nhistorical model versions rather than importing them directly.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>If you import models directly rather than using the historical models,\nyour migrations <em>may work initially</em> but will fail in the future when you\ntry to rerun old migrations (commonly, when you set up a new installation\nand run through all the migrations to set up the database).</p>\n<p class=\"last\">This means that historical model problems may not be immediately obvious.\nIf you run into this kind of failure, it\u2019s OK to edit the migration to use\nthe historical models rather than direct imports and commit those changes.</p>\n</div>\n<p>Because it\u2019s impossible to serialize arbitrary Python code, these historical\nmodels will not have any custom methods that you have defined. They will,\nhowever, have the same fields, relationships, managers (limited to those with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">use_in_migrations</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code>) and <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> options (also versioned, so they may\nbe different from your current ones).</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">This means that you will NOT have custom <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> methods called on objects\nwhen you access them in migrations, and you will NOT have any custom\nconstructors or instance methods. Plan appropriately!</p>\n</div>\n<p>References to functions in field options such as <code class=\"docutils literal notranslate\"><span class=\"pre\">upload_to</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">limit_choices_to</span></code> and model manager declarations with managers having\n<code class=\"docutils literal notranslate\"><span class=\"pre\">use_in_migrations</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code> are serialized in migrations, so the functions and\nclasses will need to be kept around for as long as there is a migration\nreferencing them. Any <a class=\"reference internal\" href=\"../../howto/custom-model-fields/\"><span class=\"doc\">custom model fields</span></a>\nwill also need to be kept, since these are imported directly by migrations.</p>\n<p>In addition, the concrete base classes of the model are stored as pointers, so\nyou must always keep base classes around for as long as there is a migration\nthat contains a reference to them. On the plus side, methods and managers from\nthese base classes inherit normally, so if you absolutely need access to these\nyou can opt to move them into a superclass.</p>\n<p>To remove old references, you can <a class=\"reference internal\" href=\"#migration-squashing\"><span class=\"std std-ref\">squash migrations</span></a>\nor, if there aren\u2019t many references, copy them into the migration files.</p>\n</div>\n<div class=\"section\" id=\"s-considerations-when-removing-model-fields\">\n<span id=\"s-migrations-removing-model-fields\"></span><span id=\"considerations-when-removing-model-fields\"></span><span id=\"migrations-removing-model-fields\"></span><h2>Considerations when removing model fields<a class=\"headerlink\" href=\"#considerations-when-removing-model-fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Similar to the \u201creferences to historical functions\u201d considerations described in\nthe previous section, removing custom model fields from your project or\nthird-party app will cause a problem if they are referenced in old migrations.</p>\n<p>To help with this situation, Django provides some model field attributes to\nassist with model field deprecation using the <a class=\"reference internal\" href=\"../checks/\"><span class=\"doc\">system checks framework</span></a>.</p>\n<p>Add the <code class=\"docutils literal notranslate\"><span class=\"pre\">system_check_deprecated_details</span></code> attribute to your model field\nsimilar to the following:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">IPAddressField</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"n\">system_check_deprecated_details</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;msg&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;IPAddressField has been deprecated. Support for it (except &quot;</span>\n            <span class=\"s2\">&quot;in historical migrations) will be removed in Django 1.9.&quot;</span>\n        <span class=\"p\">),</span>\n        <span class=\"s2\">&quot;hint&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Use GenericIPAddressField instead.&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># optional</span>\n        <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fields.W900&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># pick a unique ID for your field.</span>\n    <span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>After a deprecation period of your choosing (two or three feature releases for\nfields in Django itself), change the <code class=\"docutils literal notranslate\"><span class=\"pre\">system_check_deprecated_details</span></code>\nattribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">system_check_removed_details</span></code> and update the dictionary similar\nto:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">IPAddressField</span><span class=\"p\">(</span><span class=\"n\">Field</span><span class=\"p\">):</span>\n    <span class=\"n\">system_check_removed_details</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;msg&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n            <span class=\"s2\">&quot;IPAddressField has been removed except for support in &quot;</span>\n            <span class=\"s2\">&quot;historical migrations.&quot;</span>\n        <span class=\"p\">),</span>\n        <span class=\"s2\">&quot;hint&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Use GenericIPAddressField instead.&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;id&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;fields.E900&quot;</span><span class=\"p\">,</span>  <span class=\"c1\"># pick a unique ID for your field.</span>\n    <span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>You should keep the field\u2019s methods that are required for it to operate in\ndatabase migrations such as <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_internal_type()</span></code>. Keep this stub field for as long as any migrations\nwhich reference the field exist. For example, after squashing migrations and\nremoving the old ones, you should be able to remove the field completely.</p>\n</div>\n<div class=\"section\" id=\"s-data-migrations\">\n<span id=\"s-id4\"></span><span id=\"data-migrations\"></span><span id=\"id4\"></span><h2>Data Migrations<a class=\"headerlink\" href=\"#data-migrations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As well as changing the database schema, you can also use migrations to change\nthe data in the database itself, in conjunction with the schema if you want.</p>\n<p>Migrations that alter data are usually called \u201cdata migrations\u201d; they\u2019re best\nwritten as separate migrations, sitting alongside your schema migrations.</p>\n<p>Django can\u2019t automatically generate data migrations for you, as it does with\nschema migrations, but it\u2019s not very hard to write them. Migration files in\nDjango are made up of <a class=\"reference internal\" href=\"../../ref/migration-operations/\"><span class=\"doc\">Operations</span></a>, and\nthe main operation you use for data migrations is\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a>.</p>\n<p>To start, make an empty migration file you can work from (Django will put\nthe file in the right place, suggest a name, and add dependencies for you):</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>python manage.py makemigrations --empty yourappname\n</pre></div>\n</div>\n<p>Then, open up the file; it should look something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Generated by Django A.B on YYYY-MM-DD HH:MM</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;yourappname&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0001_initial&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre></div>\n</div>\n<p>Now, all you need to do is create a new function and have\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> use it.\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> expects a callable as its argument\nwhich takes two arguments - the first is an <a class=\"reference internal\" href=\"../../ref/applications/\"><span class=\"doc\">app registry</span></a> that has the historical versions of all your models\nloaded into it to match where in your history the migration sits, and the\nsecond is a <a class=\"reference internal\" href=\"../../ref/schema-editor/\"><span class=\"doc\">SchemaEditor</span></a>, which you can use to\nmanually effect database schema changes (but beware, doing this can confuse\nthe migration autodetector!)</p>\n<p>Let\u2019s write a migration that populates our new <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> field with the combined\nvalues of <code class=\"docutils literal notranslate\"><span class=\"pre\">first_name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">last_name</span></code> (we\u2019ve come to our senses and\nrealized that not everyone has first and last names). All we need to do is use\nthe historical model and iterate over the rows:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">migrations</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">combine_names</span><span class=\"p\">(</span><span class=\"n\">apps</span><span class=\"p\">,</span> <span class=\"n\">schema_editor</span><span class=\"p\">):</span>\n    <span class=\"c1\"># We can&#39;t import the Person model directly as it may be a newer</span>\n    <span class=\"c1\"># version than this migration expects. We use the historical version.</span>\n    <span class=\"n\">Person</span> <span class=\"o\">=</span> <span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s2\">&quot;yourappname&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Person&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">person</span> <span class=\"ow\">in</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">():</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n        <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;yourappname&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0001_initial&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">RunPython</span><span class=\"p\">(</span><span class=\"n\">combine_names</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Once that\u2019s done, we can run <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code> as normal and the\ndata migration will run in place alongside other migrations.</p>\n<p>You can pass a second callable to\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> to run whatever logic you\nwant executed when migrating backwards. If this callable is omitted, migrating\nbackwards will raise an exception.</p>\n<div class=\"section\" id=\"s-accessing-models-from-other-apps\">\n<span id=\"accessing-models-from-other-apps\"></span><h3>Accessing models from other apps<a class=\"headerlink\" href=\"#accessing-models-from-other-apps\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When writing a <code class=\"docutils literal notranslate\"><span class=\"pre\">RunPython</span></code> function that uses models from apps other than the\none in which the migration is located, the migration\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">dependencies</span></code>\nattribute should include the latest migration of each app that is involved,\notherwise you may get an error similar to: <code class=\"docutils literal notranslate\"><span class=\"pre\">LookupError:</span> <span class=\"pre\">No</span> <span class=\"pre\">installed</span> <span class=\"pre\">app</span>\n<span class=\"pre\">with</span> <span class=\"pre\">label</span> <span class=\"pre\">'myappname'</span></code> when you try to retrieve the model in the <code class=\"docutils literal notranslate\"><span class=\"pre\">RunPython</span></code>\nfunction using <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.get_model()</span></code>.</p>\n<p>In the following example, we have a migration in <code class=\"docutils literal notranslate\"><span class=\"pre\">app1</span></code> which needs to use\nmodels in <code class=\"docutils literal notranslate\"><span class=\"pre\">app2</span></code>. We aren\u2019t concerned with the details of <code class=\"docutils literal notranslate\"><span class=\"pre\">move_m1</span></code> other\nthan the fact it will need to access models from both apps. Therefore we\u2019ve\nadded a dependency that specifies the last migration of <code class=\"docutils literal notranslate\"><span class=\"pre\">app2</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Migration</span><span class=\"p\">(</span><span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">Migration</span><span class=\"p\">):</span>\n    <span class=\"n\">dependencies</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;app1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0001_initial&quot;</span><span class=\"p\">),</span>\n        <span class=\"c1\"># added dependency to enable using models from app2 in move_m1</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;app2&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;0004_foobar&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"n\">operations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"n\">migrations</span><span class=\"o\">.</span><span class=\"n\">RunPython</span><span class=\"p\">(</span><span class=\"n\">move_m1</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-more-advanced-migrations\">\n<span id=\"more-advanced-migrations\"></span><h3>More advanced migrations<a class=\"headerlink\" href=\"#more-advanced-migrations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re interested in the more advanced migration operations, or want\nto be able to write your own, see the <a class=\"reference internal\" href=\"../../ref/migration-operations/\"><span class=\"doc\">migration operations reference</span></a> and the \u201chow-to\u201d on <a class=\"reference internal\" href=\"../../howto/writing-migrations/\"><span class=\"doc\">writing migrations</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-squashing-migrations\">\n<span id=\"s-migration-squashing\"></span><span id=\"squashing-migrations\"></span><span id=\"migration-squashing\"></span><h2>Squashing migrations<a class=\"headerlink\" href=\"#squashing-migrations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You are encouraged to make migrations freely and not worry about how many you\nhave; the migration code is optimized to deal with hundreds at a time without\nmuch slowdown. However, eventually you will want to move back from having\nseveral hundred migrations to just a few, and that\u2019s where squashing comes in.</p>\n<p>Squashing is the act of reducing an existing set of many migrations down to\none (or sometimes a few) migrations which still represent the same changes.</p>\n<p>Django does this by taking all of your existing migrations, extracting their\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Operation</span></code>s and putting them all in sequence, and then running an optimizer\nover them to try and reduce the length of the list - for example, it knows\nthat <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.CreateModel\" title=\"django.db.migrations.operations.CreateModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CreateModel</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.DeleteModel\" title=\"django.db.migrations.operations.DeleteModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeleteModel</span></code></a> cancel each other out,\nand it knows that <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.AddField\" title=\"django.db.migrations.operations.AddField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AddField</span></code></a> can be\nrolled into <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.CreateModel\" title=\"django.db.migrations.operations.CreateModel\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CreateModel</span></code></a>.</p>\n<p>Once the operation sequence has been reduced as much as possible - the amount\npossible depends on how closely intertwined your models are and if you have\nany <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a>\nor <a class=\"reference internal\" href=\"../../ref/migration-operations/#django.db.migrations.operations.RunPython\" title=\"django.db.migrations.operations.RunPython\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunPython</span></code></a> operations (which can\u2019t\nbe optimized through unless they are marked as <code class=\"docutils literal notranslate\"><span class=\"pre\">elidable</span></code>) - Django will then\nwrite it back out into a new set of migration files.</p>\n<p>These files are marked to say they replace the previously-squashed migrations,\nso they can coexist with the old migration files, and Django will intelligently\nswitch between them depending where you are in the history. If you\u2019re still\npart-way through the set of migrations that you squashed, it will keep using\nthem until it hits the end and then switch to the squashed history, while new\ninstalls will use the new squashed migration and skip all the old ones.</p>\n<p>This enables you to squash and not mess up systems currently in production\nthat aren\u2019t fully up-to-date yet. The recommended process is to squash, keeping\nthe old files, commit and release, wait until all systems are upgraded with\nthe new release (or if you\u2019re a third-party project, ensure your users upgrade\nreleases in order without skipping any), and then remove the old files, commit\nand do a second release.</p>\n<p>The command that backs all this is <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-squashmigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">squashmigrations</span></code></a> - pass it the\napp label and migration name you want to squash up to, and it\u2019ll get to work:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ ./manage.py squashmigrations myapp <span class=\"m\">0004</span>\nWill squash the following migrations:\n - 0001_initial\n - 0002_some_change\n - 0003_another_change\n - 0004_undo_something\nDo you wish to proceed? <span class=\"o\">[</span>yN<span class=\"o\">]</span> y\nOptimizing...\n  Optimized from <span class=\"m\">12</span> operations to <span class=\"m\">7</span> operations.\nCreated new squashed migration /home/andrew/Programs/DjangoTest/test/migrations/0001_squashed_0004_undo_something.py\n  You should commit this migration but leave the old ones <span class=\"k\">in</span> place<span class=\"p\">;</span>\n  the new migration will be used <span class=\"k\">for</span> new installs. Once you are sure\n  all instances of the codebase have applied the migrations you squashed,\n  you can delete them.\n</pre></div>\n</div>\n<p>Use the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-squashmigrations-squashed-name\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">squashmigrations</span> <span class=\"pre\">--squashed-name</span></code></a> option if you want to set\nthe name of the squashed migration rather than use an autogenerated one.</p>\n<p>Note that model interdependencies in Django can get very complex, and squashing\nmay result in migrations that do not run; either mis-optimized (in which case\nyou can try again with <code class=\"docutils literal notranslate\"><span class=\"pre\">--no-optimize</span></code>, though you should also report an issue),\nor with a <code class=\"docutils literal notranslate\"><span class=\"pre\">CircularDependencyError</span></code>, in which case you can manually resolve it.</p>\n<p>To manually resolve a <code class=\"docutils literal notranslate\"><span class=\"pre\">CircularDependencyError</span></code>, break out one of\nthe ForeignKeys in the circular dependency loop into a separate\nmigration, and move the dependency on the other app with it. If you\u2019re unsure,\nsee how <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> deals with the problem when asked to create\nbrand new migrations from your models. In a future release of Django,\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-squashmigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">squashmigrations</span></code></a> will be updated to attempt to resolve these errors\nitself.</p>\n<p>Once you\u2019ve squashed your migration, you should then commit it alongside the\nmigrations it replaces and distribute this change to all running instances\nof your application, making sure that they run <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code> to store the change\nin their database.</p>\n<p>You must then transition the squashed migration to a normal migration by:</p>\n<ul class=\"simple\">\n<li>Deleting all the migration files it replaces.</li>\n<li>Updating all migrations that depend on the deleted migrations to depend on\nthe squashed migration instead.</li>\n<li>Removing the <code class=\"docutils literal notranslate\"><span class=\"pre\">replaces</span></code> attribute in the <code class=\"docutils literal notranslate\"><span class=\"pre\">Migration</span></code> class of the\nsquashed migration (this is how Django tells that it is a squashed migration).</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Once you\u2019ve squashed a migration, you should not then re-squash that squashed\nmigration until you have fully transitioned it to a normal migration.</p>\n</div>\n<div class=\"admonition-pruning-references-to-deleted-migrations admonition\">\n<p class=\"first admonition-title\">Pruning references to deleted migrations</p>\n<p class=\"last\">If it is likely that you may reuse the name of a deleted migration in the\nfuture, you should remove references to it from Django\u2019s migrations table\nwith the <a class=\"reference internal\" href=\"../../ref/django-admin/#cmdoption-migrate-prune\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">migrate</span> <span class=\"pre\">--prune</span></code></a> option.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-serializing-values\">\n<span id=\"s-migration-serializing\"></span><span id=\"serializing-values\"></span><span id=\"migration-serializing\"></span><h2>Serializing values<a class=\"headerlink\" href=\"#serializing-values\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Migrations are Python files containing the old definitions of your models\n- thus, to write them, Django must take the current state of your models and\nserialize them out into a file.</p>\n<p>While Django can serialize most things, there are some things that we just\ncan\u2019t serialize out into a valid Python representation - there\u2019s no Python\nstandard for how a value can be turned back into code (<code class=\"docutils literal notranslate\"><span class=\"pre\">repr()</span></code> only works\nfor basic values, and doesn\u2019t specify import paths).</p>\n<p>Django can serialize the following:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">NoneType</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">set</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">tuple</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">range</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.date</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.time</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime</span></code> instances\n(include those that are timezone-aware)</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">decimal.Decimal</span></code> instances</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">enum.Enum</span></code>  and <code class=\"docutils literal notranslate\"><span class=\"pre\">enum.Flag</span></code> instances</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">uuid.UUID</span></code> instances</li>\n<li><a class=\"reference external\" href=\"https://docs.python.org/3/library/functools.html#functools.partial\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">functools.partial()</span></code></a> and <a class=\"reference external\" href=\"https://docs.python.org/3/library/functools.html#functools.partialmethod\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">functools.partialmethod</span></code></a> instances\nwhich have serializable <code class=\"docutils literal notranslate\"><span class=\"pre\">func</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">keywords</span></code> values.</li>\n<li>Pure and concrete path objects from <a class=\"reference external\" href=\"https://docs.python.org/3/library/pathlib.html#module-pathlib\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">pathlib</span></code></a>. Concrete paths are\nconverted to their pure path equivalent, e.g. <a class=\"reference external\" href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PosixPath\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pathlib.PosixPath</span></code></a> to\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/pathlib.html#pathlib.PurePosixPath\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pathlib.PurePosixPath</span></code></a>.</li>\n<li><a class=\"reference external\" href=\"https://docs.python.org/3/library/os.html#os.PathLike\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">os.PathLike</span></code></a> instances, e.g. <a class=\"reference external\" href=\"https://docs.python.org/3/library/os.html#os.DirEntry\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">os.DirEntry</span></code></a>, which are\nconverted to <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">bytes</span></code> using <a class=\"reference external\" href=\"https://docs.python.org/3/library/os.html#os.fspath\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">os.fspath()</span></code></a>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">LazyObject</span></code> instances which wrap a serializable value.</li>\n<li>Enumeration types (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">TextChoices</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerChoices</span></code>) instances.</li>\n<li>Any Django field</li>\n<li>Any function or method reference (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime.today</span></code>) (must be in module\u2019s top-level scope)</li>\n<li>Unbound methods used from within the class body</li>\n<li>Any class reference (must be in module\u2019s top-level scope)</li>\n<li>Anything with a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method (<a class=\"reference internal\" href=\"#custom-deconstruct-method\"><span class=\"std std-ref\">see below</span></a>)</li>\n</ul>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Serialization support for <code class=\"docutils literal notranslate\"><span class=\"pre\">enum.Flag</span></code> was added.</p>\n</div>\n<p>Django cannot serialize:</p>\n<ul class=\"simple\">\n<li>Nested classes</li>\n<li>Arbitrary class instances (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">MyClass(4.3,</span> <span class=\"pre\">5.7)</span></code>)</li>\n<li>Lambdas</li>\n</ul>\n<div class=\"section\" id=\"s-custom-serializers\">\n<span id=\"s-custom-migration-serializers\"></span><span id=\"custom-serializers\"></span><span id=\"custom-migration-serializers\"></span><h3>Custom serializers<a class=\"headerlink\" href=\"#custom-serializers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can serialize other types by writing a custom serializer. For example, if\nDjango didn\u2019t serialize <a class=\"reference external\" href=\"https://docs.python.org/3/library/decimal.html#decimal.Decimal\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Decimal</span></code></a> by default, you could do\nthis:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">decimal</span> <span class=\"kn\">import</span> <span class=\"n\">Decimal</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.migrations.serializer</span> <span class=\"kn\">import</span> <span class=\"n\">BaseSerializer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.migrations.writer</span> <span class=\"kn\">import</span> <span class=\"n\">MigrationWriter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DecimalSerializer</span><span class=\"p\">(</span><span class=\"n\">BaseSerializer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">serialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">),</span> <span class=\"p\">{</span><span class=\"s2\">&quot;from decimal import Decimal&quot;</span><span class=\"p\">}</span>\n\n\n<span class=\"n\">MigrationWriter</span><span class=\"o\">.</span><span class=\"n\">register_serializer</span><span class=\"p\">(</span><span class=\"n\">Decimal</span><span class=\"p\">,</span> <span class=\"n\">DecimalSerializer</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The first argument of <code class=\"docutils literal notranslate\"><span class=\"pre\">MigrationWriter.register_serializer()</span></code> is a type or\niterable of types that should use the serializer.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">serialize()</span></code> method of your serializer must return a string of how the\nvalue should appear in migrations and a set of any imports that are needed in\nthe migration.</p>\n</div>\n<div class=\"section\" id=\"s-adding-a-deconstruct-method\">\n<span id=\"s-custom-deconstruct-method\"></span><span id=\"adding-a-deconstruct-method\"></span><span id=\"custom-deconstruct-method\"></span><h3>Adding a <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method<a class=\"headerlink\" href=\"#adding-a-deconstruct-method\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can let Django serialize your own custom class instances by giving the class\na <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method. It takes no arguments, and should return a tuple\nof three things <code class=\"docutils literal notranslate\"><span class=\"pre\">(path,</span> <span class=\"pre\">args,</span> <span class=\"pre\">kwargs)</span></code>:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> should be the Python path to the class, with the class name included\nas the last part (for example, <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp.custom_things.MyClass</span></code>). If your\nclass is not available at the top level of a module it is not serializable.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code> should be a list of positional arguments to pass to your class\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method. Everything in this list should itself be serializable.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code> should be a dict of keyword arguments to pass to your class\u2019\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method. Every value should itself be serializable.</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This return value is different from the <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method\n<a class=\"reference internal\" href=\"../../howto/custom-model-fields/#custom-field-deconstruct-method\"><span class=\"std std-ref\">for custom fields</span></a> which returns a\ntuple of four items.</p>\n</div>\n<p>Django will write out the value as an instantiation of your class with the\ngiven arguments, similar to the way it writes out references to Django fields.</p>\n<p>To prevent a new migration from being created each time\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> is run, you should also add a <code class=\"docutils literal notranslate\"><span class=\"pre\">__eq__()</span></code> method to\nthe decorated class. This function will be called by Django\u2019s migration\nframework to detect changes between states.</p>\n<p>As long as all of the arguments to your class\u2019 constructor are themselves\nserializable, you can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;deconstructible</span></code> class decorator from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.deconstruct</span></code> to add the <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.deconstruct</span> <span class=\"kn\">import</span> <span class=\"n\">deconstructible</span>\n\n\n<span class=\"nd\">@deconstructible</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyCustomClass</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">foo</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">foo</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__eq__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">other</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">foo</span> <span class=\"o\">==</span> <span class=\"n\">other</span><span class=\"o\">.</span><span class=\"n\">foo</span>\n</pre></div>\n</div>\n<p>The decorator adds logic to capture and preserve the arguments on their\nway into your constructor, and then returns those arguments exactly when\ndeconstruct() is called.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-supporting-multiple-django-versions\">\n<span id=\"supporting-multiple-django-versions\"></span><h2>Supporting multiple Django versions<a class=\"headerlink\" href=\"#supporting-multiple-django-versions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you are the maintainer of a third-party app with models, you may need to\nship migrations that support multiple Django versions. In this case, you should\nalways run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">makemigrations</span></code></a> <strong>with the lowest Django version you wish\nto support</strong>.</p>\n<p>The migrations system will maintain backwards-compatibility according to the\nsame policy as the rest of Django, so migration files generated on Django X.Y\nshould run unchanged on Django X.Y+1. The migrations system does not promise\nforwards-compatibility, however. New features may be added, and migration files\ngenerated with newer versions of Django may not work on older versions.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"../../ref/migration-operations/\"><span class=\"doc\">The Migrations Operations Reference</span></a></dt><dd>Covers the schema operations API, special operations, and writing your\nown operations.</dd>\n<dt><a class=\"reference internal\" href=\"../../howto/writing-migrations/\"><span class=\"doc\">The Writing Migrations \u201chow-to\u201d</span></a></dt><dd>Explains how to structure and write database migrations for different\nscenarios you might encounter.</dd>\n</dl>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/files", "Managing files", "N", "next"], ["topics/class-based-views/mixins", "Using mixins with class-based views", "P", "previous"]], "sourcename": "topics/migrations.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Migrations</a><ul>\n<li><a class=\"reference internal\" href=\"#the-commands\">The Commands</a></li>\n<li><a class=\"reference internal\" href=\"#backend-support\">Backend Support</a><ul>\n<li><a class=\"reference internal\" href=\"#postgresql\">PostgreSQL</a></li>\n<li><a class=\"reference internal\" href=\"#mysql\">MySQL</a></li>\n<li><a class=\"reference internal\" href=\"#sqlite\">SQLite</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#workflow\">Workflow</a><ul>\n<li><a class=\"reference internal\" href=\"#version-control\">Version control</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#transactions\">Transactions</a></li>\n<li><a class=\"reference internal\" href=\"#dependencies\">Dependencies</a><ul>\n<li><a class=\"reference internal\" href=\"#swappable-dependencies\">Swappable dependencies</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#migration-files\">Migration files</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-fields\">Custom fields</a></li>\n<li><a class=\"reference internal\" href=\"#model-managers\">Model managers</a></li>\n<li><a class=\"reference internal\" href=\"#initial-migrations\">Initial migrations</a></li>\n<li><a class=\"reference internal\" href=\"#history-consistency\">History consistency</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#adding-migrations-to-apps\">Adding migrations to apps</a></li>\n<li><a class=\"reference internal\" href=\"#reversing-migrations\">Reversing migrations</a></li>\n<li><a class=\"reference internal\" href=\"#historical-models\">Historical models</a></li>\n<li><a class=\"reference internal\" href=\"#considerations-when-removing-model-fields\">Considerations when removing model fields</a></li>\n<li><a class=\"reference internal\" href=\"#data-migrations\">Data Migrations</a><ul>\n<li><a class=\"reference internal\" href=\"#accessing-models-from-other-apps\">Accessing models from other apps</a></li>\n<li><a class=\"reference internal\" href=\"#more-advanced-migrations\">More advanced migrations</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#squashing-migrations\">Squashing migrations</a></li>\n<li><a class=\"reference internal\" href=\"#serializing-values\">Serializing values</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-serializers\">Custom serializers</a></li>\n<li><a class=\"reference internal\" href=\"#adding-a-deconstruct-method\">Adding a <code class=\"docutils literal notranslate\"><span class=\"pre\">deconstruct()</span></code> method</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#supporting-multiple-django-versions\">Supporting multiple Django versions</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/migrations", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}