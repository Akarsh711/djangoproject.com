{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Class-based views"}], "prev": {"link": "../generic-editing/", "title": "Form handling with class-based views"}, "next": {"link": "../../migrations/", "title": "Migrations"}, "title": "Using mixins with class-based views", "meta": {}, "body": "<div class=\"section\" id=\"s-using-mixins-with-class-based-views\">\n<span id=\"using-mixins-with-class-based-views\"></span><h1>Using mixins with class-based views<a class=\"headerlink\" href=\"#using-mixins-with-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition caution\">\n<p class=\"first admonition-title\">Caution</p>\n<p class=\"last\">This is an advanced topic. A working knowledge of <a class=\"reference internal\" href=\"../\"><span class=\"doc\">Django\u2019s\nclass-based views</span></a> is advised before exploring these\ntechniques.</p>\n</div>\n<p>Django\u2019s built-in class-based views provide a lot of functionality,\nbut some of it you may want to use separately. For instance, you may\nwant to write a view that renders a template to make the HTTP\nresponse, but you can\u2019t use\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a>; perhaps you need to\nrender a template only on <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>, with <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> doing something else\nentirely. While you could use\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> directly, this\nwill likely result in duplicate code.</p>\n<p>For this reason, Django also provides a number of mixins that provide\nmore discrete functionality. Template rendering, for instance, is\nencapsulated in the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin\" title=\"django.views.generic.base.TemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code></a>. The Django\nreference documentation contains <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins/\"><span class=\"doc\">full documentation of all the\nmixins</span></a>.</p>\n<div class=\"section\" id=\"s-context-and-template-responses\">\n<span id=\"context-and-template-responses\"></span><h2>Context and template responses<a class=\"headerlink\" href=\"#context-and-template-responses\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Two central mixins are provided that help in providing a consistent\ninterface to working with templates in class-based views.</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin\" title=\"django.views.generic.base.TemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code></a></dt><dd><p>Every built in view which returns a\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> will call the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response\" title=\"django.views.generic.base.TemplateResponseMixin.render_to_response\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code></a>\nmethod that <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code> provides. Most of the time this\nwill be called for you (for instance, it is called by the <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> method\nimplemented by both <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>); similarly, it\u2019s unlikely\nthat you\u2019ll need to override it, although if you want your response to\nreturn something not rendered via a Django template then you\u2019ll want to do\nit. For an example of this, see the <a class=\"reference internal\" href=\"#jsonresponsemixin-example\"><span class=\"std std-ref\">JSONResponseMixin example</span></a>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code> itself calls\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.get_template_names\" title=\"django.views.generic.base.TemplateResponseMixin.get_template_names\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_template_names()</span></code></a>,\nwhich by default will look up\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.template_name\" title=\"django.views.generic.base.TemplateResponseMixin.template_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template_name</span></code></a> on\nthe class-based view; two other mixins\n(<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectTemplateResponseMixin\" title=\"django.views.generic.detail.SingleObjectTemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectTemplateResponseMixin</span></code></a>\nand\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectTemplateResponseMixin\" title=\"django.views.generic.list.MultipleObjectTemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectTemplateResponseMixin</span></code></a>)\noverride this to provide more flexible defaults when dealing with actual\nobjects.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin\" title=\"django.views.generic.base.ContextMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ContextMixin</span></code></a></dt><dd>Every built in view which needs context data, such as for rendering a\ntemplate (including <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code> above), should call\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin.get_context_data\" title=\"django.views.generic.base.ContextMixin.get_context_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code></a> passing\nany data they want to ensure is in there as keyword arguments.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code> returns a dictionary; in <code class=\"docutils literal notranslate\"><span class=\"pre\">ContextMixin</span></code> it\nreturns its keyword arguments, but it is common to override this to add\nmore members to the dictionary. You can also use the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin.extra_context\" title=\"django.views.generic.base.ContextMixin.extra_context\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">extra_context</span></code></a> attribute.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-building-up-django-s-generic-class-based-views\">\n<span id=\"building-up-django-s-generic-class-based-views\"></span><h2>Building up Django\u2019s generic class-based views<a class=\"headerlink\" href=\"#building-up-django-s-generic-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Let\u2019s look at how two of Django\u2019s generic class-based views are built\nout of mixins providing discrete functionality. We\u2019ll consider\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>, which renders a\n\u201cdetail\u201d view of an object, and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a>, which will render a list\nof objects, typically from a queryset, and optionally paginate\nthem. This will introduce us to four mixins which between them provide\nuseful functionality when working with either a single Django object,\nor multiple objects.</p>\n<p>There are also mixins involved in the generic edit views\n(<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-editing/#django.views.generic.edit.FormView\" title=\"django.views.generic.edit.FormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormView</span></code></a>, and the model-specific\nviews <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView\" title=\"django.views.generic.edit.CreateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CreateView</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-editing/#django.views.generic.edit.UpdateView\" title=\"django.views.generic.edit.UpdateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UpdateView</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-editing/#django.views.generic.edit.DeleteView\" title=\"django.views.generic.edit.DeleteView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DeleteView</span></code></a>), and in the\ndate-based generic views. These are\ncovered in the <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins/\"><span class=\"doc\">mixin reference\ndocumentation</span></a>.</p>\n<div class=\"section\" id=\"s-detailview-working-with-a-single-django-object\">\n<span id=\"detailview-working-with-a-single-django-object\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code>: working with a single Django object<a class=\"headerlink\" href=\"#detailview-working-with-a-single-django-object\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To show the detail of an object, we basically need to do two things:\nwe need to look up the object and then we need to make a\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> with a suitable template,\nand that object as context.</p>\n<p>To get the object, <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>\nrelies on <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a>,\nwhich provides a\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.get_object\" title=\"django.views.generic.detail.SingleObjectMixin.get_object\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_object()</span></code></a>\nmethod that figures out the object based on the URL of the request (it\nlooks for <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">slug</span></code> keyword arguments as declared in the\nURLConf, and looks the object up either from the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.model\" title=\"django.views.generic.detail.SingleObjectMixin.model\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">model</span></code></a> attribute\non the view, or the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.queryset\" title=\"django.views.generic.detail.SingleObjectMixin.queryset\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">queryset</span></code></a>\nattribute if that\u2019s provided). <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> also overrides\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin.get_context_data\" title=\"django.views.generic.base.ContextMixin.get_context_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code></a>,\nwhich is used across all Django\u2019s built in class-based views to supply\ncontext data for template renders.</p>\n<p>To then make a <a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> uses\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectTemplateResponseMixin\" title=\"django.views.generic.detail.SingleObjectTemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectTemplateResponseMixin</span></code></a>,\nwhich extends <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin\" title=\"django.views.generic.base.TemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code></a>,\noverriding\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.get_template_names\" title=\"django.views.generic.base.TemplateResponseMixin.get_template_names\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_template_names()</span></code></a>\nas discussed above. It actually provides a fairly sophisticated set of options,\nbut the main one that most people are going to use is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;app_label&gt;/&lt;model_name&gt;_detail.html</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">_detail</span></code> part can be changed\nby setting\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix\" title=\"django.views.generic.detail.SingleObjectTemplateResponseMixin.template_name_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template_name_suffix</span></code></a>\non a subclass to something else. (For instance, the <a class=\"reference internal\" href=\"../generic-editing/\"><span class=\"doc\">generic edit\nviews</span></a> use <code class=\"docutils literal notranslate\"><span class=\"pre\">_form</span></code> for create and update views, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">_confirm_delete</span></code> for delete views.)</p>\n</div>\n<div class=\"section\" id=\"s-listview-working-with-many-django-objects\">\n<span id=\"listview-working-with-many-django-objects\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code>: working with many Django objects<a class=\"headerlink\" href=\"#listview-working-with-many-django-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Lists of objects follow roughly the same pattern: we need a (possibly\npaginated) list of objects, typically a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, and then we need to make a\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> with a suitable template\nusing that list of objects.</p>\n<p>To get the objects, <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> uses\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin\" title=\"django.views.generic.list.MultipleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectMixin</span></code></a>, which\nprovides both\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset\" title=\"django.views.generic.list.MultipleObjectMixin.get_queryset\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code></a>\nand\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.paginate_queryset\" title=\"django.views.generic.list.MultipleObjectMixin.paginate_queryset\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">paginate_queryset()</span></code></a>. Unlike\nwith <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a>, there\u2019s no need\nto key off parts of the URL to figure out the queryset to work with, so the\ndefault uses the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.queryset\" title=\"django.views.generic.list.MultipleObjectMixin.queryset\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">queryset</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.model\" title=\"django.views.generic.list.MultipleObjectMixin.model\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">model</span></code></a> attribute\non the view class. A common reason to override\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset\" title=\"django.views.generic.list.MultipleObjectMixin.get_queryset\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code></a>\nhere would be to dynamically vary the objects, such as depending on\nthe current user or to exclude posts in the future for a blog.</p>\n<p><a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin\" title=\"django.views.generic.list.MultipleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectMixin</span></code></a> also overrides\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.ContextMixin.get_context_data\" title=\"django.views.generic.base.ContextMixin.get_context_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code></a> to\ninclude appropriate context variables for pagination (providing\ndummies if pagination is disabled). It relies on <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code> being\npassed in as a keyword argument, which <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> arranges for\nit.</p>\n<p>To make a <a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> then uses\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectTemplateResponseMixin\" title=\"django.views.generic.list.MultipleObjectTemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectTemplateResponseMixin</span></code></a>;\nas with <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectTemplateResponseMixin\" title=\"django.views.generic.detail.SingleObjectTemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectTemplateResponseMixin</span></code></a>\nabove, this overrides <code class=\"docutils literal notranslate\"><span class=\"pre\">get_template_names()</span></code> to provide <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectTemplateResponseMixin\" title=\"django.views.generic.list.MultipleObjectTemplateResponseMixin\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">a</span> <span class=\"pre\">range</span> <span class=\"pre\">of</span>\n<span class=\"pre\">options</span></code></a>,\nwith the most commonly-used being\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;app_label&gt;/&lt;model_name&gt;_list.html</span></code>, with the <code class=\"docutils literal notranslate\"><span class=\"pre\">_list</span></code> part again\nbeing taken from the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix\" title=\"django.views.generic.list.MultipleObjectTemplateResponseMixin.template_name_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template_name_suffix</span></code></a>\nattribute. (The date based generic views use suffixes such as <code class=\"docutils literal notranslate\"><span class=\"pre\">_archive</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">_archive_year</span></code> and so on to use different templates for the various\nspecialized date-based list views.)</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-django-s-class-based-view-mixins\">\n<span id=\"using-django-s-class-based-view-mixins\"></span><h2>Using Django\u2019s class-based view mixins<a class=\"headerlink\" href=\"#using-django-s-class-based-view-mixins\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now we\u2019ve seen how Django\u2019s generic class-based views use the provided mixins,\nlet\u2019s look at other ways we can combine them. We\u2019re still going to be combining\nthem with either built-in class-based views, or other generic class-based\nviews, but there are a range of rarer problems you can solve than are provided\nfor by Django out of the box.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Not all mixins can be used together, and not all generic class\nbased views can be used with all other mixins. Here we present a\nfew examples that do work; if you want to bring together other\nfunctionality then you\u2019ll have to consider interactions between\nattributes and methods that overlap between the different classes\nyou\u2019re using, and how <a class=\"reference external\" href=\"https://www.python.org/download/releases/2.3/mro/\">method resolution order</a> will affect which\nversions of the methods will be called in what order.</p>\n<p>The reference documentation for Django\u2019s <a class=\"reference internal\" href=\"../../../ref/class-based-views/\"><span class=\"doc\">class-based\nviews</span></a> and <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins/\"><span class=\"doc\">class-based view\nmixins</span></a> will help you in\nunderstanding which attributes and methods are likely to cause\nconflict between different classes and mixins.</p>\n<p class=\"last\">If in doubt, it\u2019s often better to back off and base your work on\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#View\" title=\"View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> or <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#TemplateView\" title=\"TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a>, perhaps with\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin\" title=\"django.views.generic.list.MultipleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectMixin</span></code></a>. Although you\nwill probably end up writing more code, it is more likely to be clearly\nunderstandable to someone else coming to it later, and with fewer\ninteractions to worry about you will save yourself some thinking. (Of\ncourse, you can always dip into Django\u2019s implementation of the generic\nclass-based views for inspiration on how to tackle problems.)</p>\n</div>\n<div class=\"section\" id=\"s-using-singleobjectmixin-with-view\">\n<span id=\"using-singleobjectmixin-with-view\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> with View<a class=\"headerlink\" href=\"#using-singleobjectmixin-with-view\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If we want to write a class-based view that responds only to <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>, we\u2019ll\nsubclass <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View\" title=\"django.views.generic.base.View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> and write a <code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> method\nin the subclass. However if we want our processing to work on a particular\nobject, identified from the URL, we\u2019ll want the functionality provided by\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a>.</p>\n<p>We\u2019ll demonstrate this with the <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> model we used in the\n<a class=\"reference internal\" href=\"../generic-display/\"><span class=\"doc\">generic class-based views introduction</span></a>.</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id1\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">views.py</span></code></span><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseForbidden</span><span class=\"p\">,</span> <span class=\"n\">HttpResponseRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">SingleObjectMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RecordInterestView</span><span class=\"p\">(</span><span class=\"n\">SingleObjectMixin</span><span class=\"p\">,</span> <span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Records the current user&#39;s interest in an author.&quot;&quot;&quot;</span>\n\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseForbidden</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Look up the author we&#39;re interested in.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Actually record interest somehow here!</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span>\n            <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;author-detail&quot;</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">})</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>In practice you\u2019d probably want to record the interest in a key-value\nstore rather than in a relational database, so we\u2019ve left that bit\nout. The only bit of the view that needs to worry about using\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a> is where we want to\nlook up the author we\u2019re interested in, which it does with a call to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.get_object()</span></code>. Everything else is taken care of for us by the mixin.</p>\n<p>We can hook this into our URLs easily enough:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">urls.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.views</span> <span class=\"kn\">import</span> <span class=\"n\">RecordInterestView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;author/&lt;int:pk&gt;/interest/&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">RecordInterestView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;author-interest&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<p>Note the <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> named group, which\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.get_object\" title=\"django.views.generic.detail.SingleObjectMixin.get_object\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_object()</span></code></a> uses\nto look up the <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> instance. You could also use a slug, or\nany of the other features of\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-using-singleobjectmixin-with-listview\">\n<span id=\"using-singleobjectmixin-with-listview\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code><a class=\"headerlink\" href=\"#using-singleobjectmixin-with-listview\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> provides built-in\npagination, but you might want to paginate a list of objects that are\nall linked (by a foreign key) to another object. In our publishing\nexample, you might want to paginate through all the books by a\nparticular publisher.</p>\n<p>One way to do this is to combine <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> with\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a>, so that the queryset\nfor the paginated list of books can hang off the publisher found as the single\nobject. In order to do this, we need to have two different querysets:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">Book</span></code> queryset for use by <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a></dt><dd>Since we have access to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code> whose books we want to list, we\noverride <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code> and use the <code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code>\u2019s <a class=\"reference internal\" href=\"../../db/queries/#backwards-related-objects\"><span class=\"std std-ref\">reverse\nforeign key manager</span></a>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code> queryset for use in <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.get_object\" title=\"django.views.generic.detail.SingleObjectMixin.get_object\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_object()</span></code></a></dt><dd>We\u2019ll rely on the default implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code> to fetch the\ncorrect <code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code> object.\nHowever, we need to explicitly pass a <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> argument because\notherwise the default implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code> would call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code> which we have overridden to return <code class=\"docutils literal notranslate\"><span class=\"pre\">Book</span></code> objects\ninstead of <code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code> ones.</dd>\n</dl>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">We have to think carefully about <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code>.\nSince both <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> will\nput things in the context data under the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context_object_name</span></code> if it\u2019s set, we\u2019ll instead explicitly\nensure the <code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code> is in the context data. <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a>\nwill add in the suitable <code class=\"docutils literal notranslate\"><span class=\"pre\">page_obj</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">paginator</span></code> for us\nproviding we remember to call <code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code>.</p>\n</div>\n<p>Now we can write a new <code class=\"docutils literal notranslate\"><span class=\"pre\">PublisherDetailView</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">SingleObjectMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherDetailView</span><span class=\"p\">(</span><span class=\"n\">SingleObjectMixin</span><span class=\"p\">,</span> <span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">paginate_by</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;books/publisher_detail.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Publisher</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;publisher&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">book_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Notice how we set <code class=\"docutils literal notranslate\"><span class=\"pre\">self.object</span></code> within <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> so we\ncan use it again later in <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code>.\nIf you don\u2019t set <code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code>, the template will default to the normal\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> choice, which in this case would be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;books/book_list.html&quot;</span></code> because it\u2019s a list of books;\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#ListView\" title=\"ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> knows nothing about\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a>, so it doesn\u2019t have\nany clue this view is anything to do with a <code class=\"docutils literal notranslate\"><span class=\"pre\">Publisher</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">paginate_by</span></code> is deliberately small in the example so you don\u2019t\nhave to create lots of books to see the pagination working! Here\u2019s the\ntemplate you\u2019d want to use:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base.html&quot;</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>Publisher <span class=\"cp\">{{</span> <span class=\"nv\">publisher.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n      <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">book</span> <span class=\"k\">in</span> <span class=\"nv\">page_obj</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">book.title</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n      <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;pagination&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;step-links&quot;</span><span class=\"p\">&gt;</span>\n            <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">page_obj.has_previous</span> <span class=\"cp\">%}</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;?page=</span><span class=\"cp\">{{</span> <span class=\"nv\">page_obj.previous_page_number</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>previous<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n\n            <span class=\"p\">&lt;</span><span class=\"nt\">span</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;current&quot;</span><span class=\"p\">&gt;</span>\n                Page <span class=\"cp\">{{</span> <span class=\"nv\">page_obj.number</span> <span class=\"cp\">}}</span> of <span class=\"cp\">{{</span> <span class=\"nv\">paginator.num_pages</span> <span class=\"cp\">}}</span>.\n            <span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n\n            <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">page_obj.has_next</span> <span class=\"cp\">%}</span>\n                <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;?page=</span><span class=\"cp\">{{</span> <span class=\"nv\">page_obj.next_page_number</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>next<span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>\n            <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;/</span><span class=\"nt\">span</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-avoid-anything-more-complex\">\n<span id=\"avoid-anything-more-complex\"></span><h2>Avoid anything more complex<a class=\"headerlink\" href=\"#avoid-anything-more-complex\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Generally you can use\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin\" title=\"django.views.generic.base.TemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a> when you need\ntheir functionality. As shown above, with a bit of care you can even\ncombine <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> with\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a>. However things get\nincreasingly complex as you try to do so, and a good rule of thumb is:</p>\n<div class=\"admonition hint\">\n<p class=\"first admonition-title\">Hint</p>\n<p class=\"last\">Each of your views should use only mixins or views from one of the\ngroups of generic class-based views: <a class=\"reference internal\" href=\"../generic-display/\"><span class=\"doc\">detail,\nlist</span></a>, <a class=\"reference internal\" href=\"../generic-editing/\"><span class=\"doc\">editing</span></a> and\ndate. For example it\u2019s fine to combine\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#TemplateView\" title=\"TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> (built in view) with\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin\" title=\"django.views.generic.list.MultipleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">MultipleObjectMixin</span></code></a> (generic list), but\nyou\u2019re likely to have problems combining <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> (generic\ndetail) with <code class=\"docutils literal notranslate\"><span class=\"pre\">MultipleObjectMixin</span></code> (generic list).</p>\n</div>\n<p>To show what happens when you try to get more sophisticated, we show\nan example that sacrifices readability and maintainability when there\nis a simpler solution. First, let\u2019s look at a naive attempt to combine\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> with\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin\" title=\"django.views.generic.edit.FormMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code></a> to enable us to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> a Django <a class=\"reference internal\" href=\"../../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> to the same URL as we\u2019re\ndisplaying an object using <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>.</p>\n<div class=\"section\" id=\"s-using-formmixin-with-detailview\">\n<span id=\"using-formmixin-with-detailview\"></span><h3>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code><a class=\"headerlink\" href=\"#using-formmixin-with-detailview\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Think back to our earlier example of using <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#View\" title=\"View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a> together. We were\nrecording a user\u2019s interest in a particular author; say now that we want to\nlet them leave a message saying why they like them. Again, let\u2019s assume we\u2019re\nnot going to store this in a relational database but instead in\nsomething more esoteric that we won\u2019t worry about here.</p>\n<p>At this point it\u2019s natural to reach for a <a class=\"reference internal\" href=\"../../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> to\nencapsulate the information sent from the user\u2019s browser to Django. Say also\nthat we\u2019re heavily invested in <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Representational_state_transfer\">REST</a>, so we want to use the same URL for\ndisplaying the author as for capturing the message from the\nuser. Let\u2019s rewrite our <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorDetailView</span></code> to do that.</p>\n<p>We\u2019ll keep the <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> handling from <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>, although\nwe\u2019ll have to add a <a class=\"reference internal\" href=\"../../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> into the context data so we can\nrender it in the template. We\u2019ll also want to pull in form processing\nfrom <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin\" title=\"django.views.generic.edit.FormMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code></a>, and write a bit of\ncode so that on <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> the form gets called appropriately.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">We use <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin\" title=\"django.views.generic.edit.FormMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code></a> and implement\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> ourselves rather than try to mix <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> with\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#FormView\" title=\"FormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormView</span></code></a> (which provides a suitable <code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> already) because\nboth of the views implement <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code>, and things would get much more\nconfusing.</p>\n</div>\n<p>Our new <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorDetailView</span></code> looks like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># CAUTION: you almost certainly do not want to do this.</span>\n<span class=\"c1\"># It is provided as part of a discussion of problems you can</span>\n<span class=\"c1\"># run into when combining different generic class-based view</span>\n<span class=\"c1\"># functionality that is not designed to be used together.</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseForbidden</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.edit</span> <span class=\"kn\">import</span> <span class=\"n\">FormMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorInterestForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorDetailView</span><span class=\"p\">(</span><span class=\"n\">FormMixin</span><span class=\"p\">,</span> <span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">AuthorInterestForm</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_success_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;author-detail&quot;</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseForbidden</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_form</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_invalid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">form_valid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">form</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Here, we would record the user&#39;s interest using the message</span>\n        <span class=\"c1\"># passed in form.cleaned_data[&#39;message&#39;]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">form_valid</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">get_success_url()</span></code> provides somewhere to redirect to, which gets used\nin the default implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">form_valid()</span></code>. We have to provide our\nown <code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> as noted earlier.</p>\n</div>\n<div class=\"section\" id=\"s-a-better-solution\">\n<span id=\"a-better-solution\"></span><h3>A better solution<a class=\"headerlink\" href=\"#a-better-solution\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The number of subtle interactions between\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-editing/#django.views.generic.edit.FormMixin\" title=\"django.views.generic.edit.FormMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code></a> and <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> is\nalready testing our ability to manage things. It\u2019s unlikely you\u2019d want to\nwrite this kind of class yourself.</p>\n<p>In this case, you could write the <code class=\"docutils literal notranslate\"><span class=\"pre\">post()</span></code> method yourself, keeping\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> as the only generic functionality, although writing\n<a class=\"reference internal\" href=\"../../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> handling code involves a lot of duplication.</p>\n<p>Alternatively, it would still be less work than the above approach to\nhave a separate view for processing the form, which could use\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-editing/#django.views.generic.edit.FormView\" title=\"django.views.generic.edit.FormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormView</span></code></a> distinct from\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> without concerns.</p>\n</div>\n<div class=\"section\" id=\"s-an-alternative-better-solution\">\n<span id=\"an-alternative-better-solution\"></span><h3>An alternative better solution<a class=\"headerlink\" href=\"#an-alternative-better-solution\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>What we\u2019re really trying to do here is to use two different class\nbased views from the same URL. So why not do just that? We have a very\nclear division here: <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> requests should get the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#DetailView\" title=\"DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> (with the <a class=\"reference internal\" href=\"../../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> added to the context\ndata), and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> requests should get the <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#FormView\" title=\"FormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormView</span></code></a>. Let\u2019s\nset up those views first.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorDetailView</span></code> view is almost the same as <a class=\"reference internal\" href=\"../generic-display/#generic-views-extra-work\"><span class=\"std std-ref\">when we\nfirst introduced AuthorDetailView</span></a>; we have to\nwrite our own <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code> to make the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorInterestForm</span></code> available to the template. We\u2019ll skip the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code> override from before for clarity:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorInterestForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;form&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">AuthorInterestForm</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre></div>\n</div>\n<p>Then the <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorInterestFormView</span></code> is a <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#FormView\" title=\"FormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FormView</span></code></a>, but we have to\nbring in <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin\" title=\"django.views.generic.detail.SingleObjectMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code></a> so we can find\nthe author we\u2019re talking about, and we have to remember to set\n<code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code> to ensure that form errors will render the same template as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorDetailView</span></code> is using on <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseForbidden</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">FormView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">SingleObjectMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorInterestFormView</span><span class=\"p\">(</span><span class=\"n\">SingleObjectMixin</span><span class=\"p\">,</span> <span class=\"n\">FormView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;books/author_detail.html&quot;</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">AuthorInterestForm</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Author</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseForbidden</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_success_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;author-detail&quot;</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>Finally we bring this together in a new <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorView</span></code> view. We\nalready know that calling <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> on\na class-based view gives us something that behaves exactly like a function\nbased view, so we can do that at the point we choose between the two subviews.</p>\n<p>You can pass through keyword arguments to\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> in the same way you\nwould in your URLconf, such as if you wanted the <code class=\"docutils literal notranslate\"><span class=\"pre\">AuthorInterestFormView</span></code>\nbehavior to also appear at another URL but using a different template:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">AuthorDetailView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">AuthorInterestFormView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This approach can also be used with any other generic class-based\nviews or your own class-based views inheriting directly from\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#View\" title=\"View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> or <a class=\"reference internal\" href=\"../../../ref/class-based-views/flattened-index/#TemplateView\" title=\"TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a>, as it keeps the different\nviews as separate as possible.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-more-than-just-html\">\n<span id=\"s-jsonresponsemixin-example\"></span><span id=\"more-than-just-html\"></span><span id=\"jsonresponsemixin-example\"></span><h2>More than just HTML<a class=\"headerlink\" href=\"#more-than-just-html\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Where class-based views shine is when you want to do the same thing many times.\nSuppose you\u2019re writing an API, and every view should return JSON instead of\nrendered HTML.</p>\n<p>We can create a mixin class to use in all of our views, handling the\nconversion to JSON once.</p>\n<p>For example, a JSON mixin might look something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONResponseMixin</span><span class=\"p\">:</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    A mixin that can be used to render a JSON response.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_json_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">response_kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns a JSON response, transforming &#39;context&#39; to make the payload.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_data</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">),</span> <span class=\"o\">**</span><span class=\"n\">response_kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns an object that will be serialized as JSON by json.dumps().</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"c1\"># Note: This is *EXTREMELY* naive; in reality, you&#39;ll need</span>\n        <span class=\"c1\"># to do much more complex handling to ensure that arbitrary</span>\n        <span class=\"c1\"># objects -- such as Django model instances or querysets</span>\n        <span class=\"c1\"># -- can be serialized as JSON.</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Check out the <a class=\"reference internal\" href=\"../../serialization/\"><span class=\"doc\">Serializing Django objects</span></a> documentation for more\ninformation on how to correctly transform Django models and querysets into\nJSON.</p>\n</div>\n<p>This mixin provides a <code class=\"docutils literal notranslate\"><span class=\"pre\">render_to_json_response()</span></code> method with the same signature\nas <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response\" title=\"django.views.generic.base.TemplateResponseMixin.render_to_response\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code></a>.\nTo use it, we need to mix it into a <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code> for example, and override\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code> to call <code class=\"docutils literal notranslate\"><span class=\"pre\">render_to_json_response()</span></code> instead:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONView</span><span class=\"p\">(</span><span class=\"n\">JSONResponseMixin</span><span class=\"p\">,</span> <span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">response_kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_json_response</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">response_kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Equally we could use our mixin with one of the generic views. We can make our\nown version of <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> by mixing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">JSONResponseMixin</span></code> with the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.BaseDetailView\" title=\"django.views.generic.detail.BaseDetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BaseDetailView</span></code></a> \u2013 (the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> before template\nrendering behavior has been mixed in):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">BaseDetailView</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JSONDetailView</span><span class=\"p\">(</span><span class=\"n\">JSONResponseMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseDetailView</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">response_kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_json_response</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">response_kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This view can then be deployed in the same way as any other\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>, with exactly the\nsame behavior \u2013 except for the format of the response.</p>\n<p>If you want to be really adventurous, you could even mix a\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a> subclass that is able\nto return <em>both</em> HTML and JSON content, depending on some property of\nthe HTTP request, such as a query argument or an HTTP header. Mix in both the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">JSONResponseMixin</span></code> and a\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectTemplateResponseMixin\" title=\"django.views.generic.detail.SingleObjectTemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SingleObjectTemplateResponseMixin</span></code></a>,\nand override the implementation of\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response\" title=\"django.views.generic.base.TemplateResponseMixin.render_to_response\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code></a>\nto defer to the appropriate rendering method depending on the type of response\nthat the user requested:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic.detail</span> <span class=\"kn\">import</span> <span class=\"n\">SingleObjectTemplateResponseMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">HybridDetailView</span><span class=\"p\">(</span>\n    <span class=\"n\">JSONResponseMixin</span><span class=\"p\">,</span> <span class=\"n\">SingleObjectTemplateResponseMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseDetailView</span>\n<span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">render_to_response</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Look for a &#39;format=json&#39; GET argument</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">GET</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;format&quot;</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;json&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">render_to_json_response</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">render_to_response</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Because of the way that Python resolves method overloading, the call to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">super().render_to_response(context)</span></code> ends up calling the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response\" title=\"django.views.generic.base.TemplateResponseMixin.render_to_response\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code></a>\nimplementation of <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin\" title=\"django.views.generic.base.TemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code></a>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/migrations", "Migrations", "N", "next"], ["topics/class-based-views/generic-editing", "Form handling with class-based views", "P", "previous"]], "sourcename": "topics/class-based-views/mixins.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Using mixins with class-based views</a><ul>\n<li><a class=\"reference internal\" href=\"#context-and-template-responses\">Context and template responses</a></li>\n<li><a class=\"reference internal\" href=\"#building-up-django-s-generic-class-based-views\">Building up Django\u2019s generic class-based views</a><ul>\n<li><a class=\"reference internal\" href=\"#detailview-working-with-a-single-django-object\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code>: working with a single Django object</a></li>\n<li><a class=\"reference internal\" href=\"#listview-working-with-many-django-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code>: working with many Django objects</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#using-django-s-class-based-view-mixins\">Using Django\u2019s class-based view mixins</a><ul>\n<li><a class=\"reference internal\" href=\"#using-singleobjectmixin-with-view\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> with View</a></li>\n<li><a class=\"reference internal\" href=\"#using-singleobjectmixin-with-listview\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">SingleObjectMixin</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#avoid-anything-more-complex\">Avoid anything more complex</a><ul>\n<li><a class=\"reference internal\" href=\"#using-formmixin-with-detailview\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">FormMixin</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#a-better-solution\">A better solution</a></li>\n<li><a class=\"reference internal\" href=\"#an-alternative-better-solution\">An alternative better solution</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#more-than-just-html\">More than just HTML</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/class-based-views/mixins", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
