{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Class-based views"}], "prev": {"link": "../intro/", "title": "Introduction to class-based views"}, "next": {"link": "../generic-editing/", "title": "Form handling with class-based views"}, "title": "Built-in class-based generic views", "meta": {}, "body": "<div class=\"section\" id=\"s-built-in-class-based-generic-views\">\n<span id=\"built-in-class-based-generic-views\"></span><h1>Built-in class-based generic views<a class=\"headerlink\" href=\"#built-in-class-based-generic-views\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Writing web applications can be monotonous, because we repeat certain patterns\nagain and again. Django tries to take away some of that monotony at the model\nand template layers, but web developers also experience this boredom at the view\nlevel.</p>\n<p>Django\u2019s <em>generic views</em> were developed to ease that pain. They take certain\ncommon idioms and patterns found in view development and abstract them so that\nyou can quickly write common views of data without having to write too much\ncode.</p>\n<p>We can recognize certain common tasks, like displaying a list of objects, and\nwrite code that displays a list of <em>any</em> object. Then the model in question can\nbe passed as an extra argument to the URLconf.</p>\n<p>Django ships with generic views to do the following:</p>\n<ul class=\"simple\">\n<li>Display list and detail pages for a single object. If we were creating an\napplication to manage conferences then a <code class=\"docutils literal notranslate\"><span class=\"pre\">TalkListView</span></code> and a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RegisteredUserListView</span></code> would be examples of list views. A single\ntalk page is an example of what we call a \u201cdetail\u201d view.</li>\n<li>Present date-based objects in year/month/day archive pages,\nassociated detail, and \u201clatest\u201d pages.</li>\n<li>Allow users to create, update, and delete objects \u2013 with or\nwithout authorization.</li>\n</ul>\n<p>Taken together, these views provide interfaces to perform the most common tasks\ndevelopers encounter.</p>\n<div class=\"section\" id=\"s-extending-generic-views\">\n<span id=\"extending-generic-views\"></span><h2>Extending generic views<a class=\"headerlink\" href=\"#extending-generic-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There\u2019s no question that using generic views can speed up development\nsubstantially. In most projects, however, there comes a moment when the\ngeneric views no longer suffice. Indeed, the most common question asked by new\nDjango developers is how to make generic views handle a wider array of\nsituations.</p>\n<p>This is one of the reasons generic views were redesigned for the 1.3 release -\npreviously, they were view functions with a bewildering array of options; now,\nrather than passing in a large amount of configuration in the URLconf, the\nrecommended way to extend generic views is to subclass them, and override their\nattributes or methods.</p>\n<p>That said, generic views will have a limit. If you find you\u2019re struggling to\nimplement your view as a subclass of a generic view, then you may find it more\neffective to write just the code you need, using your own class-based or\nfunctional views.</p>\n<p>More examples of generic views are available in some third party applications,\nor you could write your own as needed.</p>\n</div>\n<div class=\"section\" id=\"s-generic-views-of-objects\">\n<span id=\"generic-views-of-objects\"></span><h2>Generic views of objects<a class=\"headerlink\" href=\"#generic-views-of-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> certainly is useful, but\nDjango\u2019s generic views really shine when it comes to presenting views of your\ndatabase content. Because it\u2019s such a common task, Django comes with a handful\nof built-in generic views to help generate list and detail views of objects.</p>\n<p>Let\u2019s start by looking at some examples of showing a list of objects or an\nindividual object.</p>\n<p>We\u2019ll be using these models:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Publisher</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">state_province</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">website</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">URLField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;-name&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">salutation</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n    <span class=\"n\">headshot</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s2\">&quot;author_headshots&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">authors</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"s2\">&quot;Author&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Publisher</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">publication_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Now we need to define a view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span>\n</pre></div>\n</div>\n<p>Finally hook that view into your urls:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># urls.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.views</span> <span class=\"kn\">import</span> <span class=\"n\">PublisherListView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;publishers/&quot;</span><span class=\"p\">,</span> <span class=\"n\">PublisherListView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>That\u2019s all the Python code we need to write. We still need to write a template,\nhowever. We could explicitly tell the view which template to use by adding a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code> attribute to the view, but in the absence of an explicit\ntemplate Django will infer one from the object\u2019s name. In this case, the\ninferred template will be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;books/publisher_list.html&quot;</span></code> \u2013 the \u201cbooks\u201d part\ncomes from the name of the app that defines the model, while the \u201cpublisher\u201d\nbit is the lowercased version of the model\u2019s name.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Thus, when (for example) the <code class=\"docutils literal notranslate\"><span class=\"pre\">APP_DIRS</span></code> option of a <code class=\"docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code>\nbackend is set to True in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a>, a template location could\nbe: /path/to/project/books/templates/books/publisher_list.html</p>\n</div>\n<p>This template will be rendered against a context containing a variable called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code> that contains all the publisher objects. A template might look\nlike this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;base.html&quot;</span> <span class=\"cp\">%}</span>\n\n<span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">content</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>Publishers<span class=\"p\">&lt;/</span><span class=\"nt\">h2</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">publisher</span> <span class=\"k\">in</span> <span class=\"nv\">object_list</span> <span class=\"cp\">%}</span>\n            <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">publisher.name</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>That\u2019s really all there is to it. All the cool features of generic views come\nfrom changing the attributes set on the generic view. The\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/\"><span class=\"doc\">generic views reference</span></a> documents all the\ngeneric views and their options in detail; the rest of this document will\nconsider some of the common ways you might customize and extend generic views.</p>\n<div class=\"section\" id=\"s-making-friendly-template-contexts\">\n<span id=\"making-friendly-template-contexts\"></span><h3>Making \u201cfriendly\u201d template contexts<a class=\"headerlink\" href=\"#making-friendly-template-contexts\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You might have noticed that our sample publisher list template stores all the\npublishers in a variable named <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code>. While this works just fine, it\nisn\u2019t all that \u201cfriendly\u201d to template authors: they have to \u201cjust know\u201d that\nthey\u2019re dealing with publishers here.</p>\n<p>Well, if you\u2019re dealing with a model object, this is already done for you. When\nyou are dealing with an object or queryset, Django is able to populate the\ncontext using the lowercased version of the model class\u2019 name. This is provided\nin addition to the default <code class=\"docutils literal notranslate\"><span class=\"pre\">object_list</span></code> entry, but contains exactly the same\ndata, i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">publisher_list</span></code>.</p>\n<p>If this still isn\u2019t a good match, you can manually set the name of the\ncontext variable. The <code class=\"docutils literal notranslate\"><span class=\"pre\">context_object_name</span></code> attribute on a generic view\nspecifies the context variable to use:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;my_favorite_publishers&quot;</span>\n</pre></div>\n</div>\n<p>Providing a useful <code class=\"docutils literal notranslate\"><span class=\"pre\">context_object_name</span></code> is always a good idea. Your\ncoworkers who design templates will thank you.</p>\n</div>\n<div class=\"section\" id=\"s-adding-extra-context\">\n<span id=\"s-id1\"></span><span id=\"adding-extra-context\"></span><span id=\"id1\"></span><h3>Adding extra context<a class=\"headerlink\" href=\"#adding-extra-context\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Often you need to present some extra information beyond that provided by the\ngeneric view. For example, think of showing a list of all the books on each\npublisher detail page. The <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>\ngeneric view provides the publisher to the context, but how do we get\nadditional information in that template?</p>\n<p>The answer is to subclass <a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.detail.DetailView\" title=\"django.views.generic.detail.DetailView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DetailView</span></code></a>\nand provide your own implementation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data</span></code> method.\nThe default implementation adds the object being displayed to the template, but\nyou can override it to send more:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Publisher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Call the base implementation first to get a context</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Add in a QuerySet of all the books</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;book_list&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Generally, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data</span></code> will merge the context data of all parent\nclasses with those of the current class. To preserve this behavior in your\nown classes where you want to alter the context, you should be sure to call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data</span></code> on the super class. When no two classes try to define the\nsame key, this will give the expected results. However if any class\nattempts to override a key after parent classes have set it (after the call\nto super), any children of that class will also need to explicitly set it\nafter super if they want to be sure to override all parents. If you\u2019re\nhaving trouble, review the method resolution order of your view.</p>\n<p class=\"last\">Another consideration is that the context data from class-based generic\nviews will override data provided by context processors; see\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.get_context_data\" title=\"django.views.generic.detail.SingleObjectMixin.get_context_data\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code></a> for\nan example.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-viewing-subsets-of-objects\">\n<span id=\"s-generic-views-list-subsets\"></span><span id=\"viewing-subsets-of-objects\"></span><span id=\"generic-views-list-subsets\"></span><h3>Viewing subsets of objects<a class=\"headerlink\" href=\"#viewing-subsets-of-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Now let\u2019s take a closer look at the <code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> argument we\u2019ve been\nusing all along. The <code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> argument, which specifies the database\nmodel that the view will operate upon, is available on all the\ngeneric views that operate on a single object or a collection of\nobjects. However, the <code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code> argument is not the only way to\nspecify the objects that the view will operate upon \u2013 you can also\nspecify the list of objects using the <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> argument:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Publisher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;publisher&quot;</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Publisher</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">model</span> <span class=\"pre\">=</span> <span class=\"pre\">Publisher</span></code> is shorthand for saying <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span> <span class=\"pre\">=</span>\n<span class=\"pre\">Publisher.objects.all()</span></code>. However, by using <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> to define a filtered\nlist of objects you can be more specific about the objects that will be visible\nin the view (see <a class=\"reference internal\" href=\"../../db/queries/\"><span class=\"doc\">Making queries</span></a> for more information about\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> objects, and see the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/\"><span class=\"doc\">class-based views reference</span></a> for the\ncomplete details).</p>\n<p>To pick an example, we might want to order a list of books by publication date,\nwith the most recent first:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-publication_date&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;book_list&quot;</span>\n</pre></div>\n</div>\n<p>That\u2019s a pretty minimal example, but it illustrates the idea nicely. You\u2019ll\nusually want to do more than just reorder objects. If you want to present a\nlist of books by a particular publisher, you can use the same technique:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AcmeBookListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">context_object_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;book_list&quot;</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">publisher__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;ACME Publishing&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;books/acme_list.html&quot;</span>\n</pre></div>\n</div>\n<p>Notice that along with a filtered <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code>, we\u2019re also using a custom\ntemplate name. If we didn\u2019t, the generic view would use the same template as the\n\u201cvanilla\u201d object list, which might not be what we want.</p>\n<p>Also notice that this isn\u2019t a very elegant way of doing publisher-specific\nbooks. If we want to add another publisher page, we\u2019d need another handful of\nlines in the URLconf, and more than a few publishers would get unreasonable.\nWe\u2019ll deal with this problem in the next section.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If you get a 404 when requesting <code class=\"docutils literal notranslate\"><span class=\"pre\">/books/acme/</span></code>, check to ensure you\nactually have a Publisher with the name \u2018ACME Publishing\u2019.  Generic\nviews have an <code class=\"docutils literal notranslate\"><span class=\"pre\">allow_empty</span></code> parameter for this case.  See the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/\"><span class=\"doc\">class-based-views reference</span></a> for more\ndetails.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-dynamic-filtering\">\n<span id=\"dynamic-filtering\"></span><h3>Dynamic filtering<a class=\"headerlink\" href=\"#dynamic-filtering\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Another common need is to filter down the objects given in a list page by some\nkey in the URL. Earlier we hard-coded the publisher\u2019s name in the URLconf, but\nwhat if we wanted to write a view that displayed all the books by some arbitrary\npublisher?</p>\n<p>Handily, the <code class=\"docutils literal notranslate\"><span class=\"pre\">ListView</span></code> has a\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset\" title=\"django.views.generic.list.MultipleObjectMixin.get_queryset\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code></a> method we\ncan override. By default, it returns the value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">queryset</span></code> attribute,\nbut we can use it to add more logic.</p>\n<p>The key part to making this work is that when class-based views are called,\nvarious useful things are stored on <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code>; as well as the request\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">self.request</span></code>) this includes the positional (<code class=\"docutils literal notranslate\"><span class=\"pre\">self.args</span></code>) and name-based\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">self.kwargs</span></code>) arguments captured according to the URLconf.</p>\n<p>Here, we have a URLconf with a single captured group:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># urls.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.views</span> <span class=\"kn\">import</span> <span class=\"n\">PublisherBookListView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;books/&lt;publisher&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">PublisherBookListView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Next, we\u2019ll write the <code class=\"docutils literal notranslate\"><span class=\"pre\">PublisherBookListView</span></code> view itself:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_object_or_404</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Publisher</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">PublisherBookListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;books/books_by_publisher.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publisher</span> <span class=\"o\">=</span> <span class=\"n\">get_object_or_404</span><span class=\"p\">(</span><span class=\"n\">Publisher</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;publisher&quot;</span><span class=\"p\">])</span>\n        <span class=\"k\">return</span> <span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">publisher</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publisher</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset</span></code> to add logic to the queryset selection is as convenient\nas it is powerful. For instance, if we wanted, we could use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.request.user</span></code> to filter using the current user, or other more complex\nlogic.</p>\n<p>We can also add the publisher into the context at the same time, so we can\nuse it in the template:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># ...</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Call the base implementation first to get a context</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Add in the publisher</span>\n    <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;publisher&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">publisher</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-performing-extra-work\">\n<span id=\"s-generic-views-extra-work\"></span><span id=\"performing-extra-work\"></span><span id=\"generic-views-extra-work\"></span><h3>Performing extra work<a class=\"headerlink\" href=\"#performing-extra-work\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The last common pattern we\u2019ll look at involves doing some extra work before\nor after calling the generic view.</p>\n<p>Imagine we had a <code class=\"docutils literal notranslate\"><span class=\"pre\">last_accessed</span></code> field on our <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> model that we were\nusing to keep track of the last time anybody looked at that author:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># models.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">salutation</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n    <span class=\"n\">headshot</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s2\">&quot;author_headshots&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">last_accessed</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>The generic <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code> class wouldn\u2019t know anything about this field, but\nonce again we could write a custom view to keep that field updated.</p>\n<p>First, we\u2019d need to add an author detail bit in the URLconf to point to a\ncustom view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.views</span> <span class=\"kn\">import</span> <span class=\"n\">AuthorDetailView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;authors/&lt;int:pk&gt;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">AuthorDetailView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;author-detail&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Then we\u2019d write our new view \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object</span></code> is the method that retrieves the\nobject \u2013 so we override it and wrap the call:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">DetailView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AuthorDetailView</span><span class=\"p\">(</span><span class=\"n\">DetailView</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_object</span><span class=\"p\">()</span>\n        <span class=\"c1\"># Record the last accessed date</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">last_accessed</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n        <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The URLconf here uses the named group <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> - this name is the default\nname that <code class=\"docutils literal notranslate\"><span class=\"pre\">DetailView</span></code> uses to find the value of the primary key used to\nfilter the queryset.</p>\n<p class=\"last\">If you want to call the group something else, you can set\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-single-object/#django.views.generic.detail.SingleObjectMixin.pk_url_kwarg\" title=\"django.views.generic.detail.SingleObjectMixin.pk_url_kwarg\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">pk_url_kwarg</span></code></a>\non the view.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/class-based-views/generic-editing", "Form handling with class-based views", "N", "next"], ["topics/class-based-views/intro", "Introduction to class-based views", "P", "previous"]], "sourcename": "topics/class-based-views/generic-display.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Built-in class-based generic views</a><ul>\n<li><a class=\"reference internal\" href=\"#extending-generic-views\">Extending generic views</a></li>\n<li><a class=\"reference internal\" href=\"#generic-views-of-objects\">Generic views of objects</a><ul>\n<li><a class=\"reference internal\" href=\"#making-friendly-template-contexts\">Making \u201cfriendly\u201d template contexts</a></li>\n<li><a class=\"reference internal\" href=\"#adding-extra-context\">Adding extra context</a></li>\n<li><a class=\"reference internal\" href=\"#viewing-subsets-of-objects\">Viewing subsets of objects</a></li>\n<li><a class=\"reference internal\" href=\"#dynamic-filtering\">Dynamic filtering</a></li>\n<li><a class=\"reference internal\" href=\"#performing-extra-work\">Performing extra work</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/class-based-views/generic-display", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}