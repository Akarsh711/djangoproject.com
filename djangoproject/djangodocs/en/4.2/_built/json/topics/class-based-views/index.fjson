{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../templates/", "title": "Templates"}, "next": {"link": "intro/", "title": "Introduction to class-based views"}, "title": "Class-based views", "meta": {}, "body": "<div class=\"section\" id=\"s-class-based-views\">\n<span id=\"class-based-views\"></span><h1>Class-based views<a class=\"headerlink\" href=\"#class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A view is a callable which takes a request and returns a\nresponse. This can be more than just a function, and Django provides\nan example of some classes which can be used as views. These allow you\nto structure your views and reuse code by harnessing inheritance and\nmixins. There are also some generic views for tasks which we\u2019ll get to later,\nbut you may want to design your own structure of reusable views which suits\nyour use case. For full details, see the <a class=\"reference internal\" href=\"../../ref/class-based-views/\"><span class=\"doc\">class-based views reference\ndocumentation</span></a>.</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"intro/\">Introduction to class-based views</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"generic-display/\">Built-in class-based generic views</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"generic-editing/\">Form handling with class-based views</a></li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"mixins/\">Using mixins with class-based views</a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-basic-examples\">\n<span id=\"basic-examples\"></span><h2>Basic examples<a class=\"headerlink\" href=\"#basic-examples\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django provides base view classes which will suit a wide range of applications.\nAll views inherit from the <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.View\" title=\"django.views.generic.base.View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> class, which\nhandles linking the view into the URLs, HTTP method dispatching and other\ncommon features. <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView\" title=\"django.views.generic.base.RedirectView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RedirectView</span></code></a> provides a\nHTTP redirect, and <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> extends the\nbase class to make it also render a template.</p>\n</div>\n<div class=\"section\" id=\"s-usage-in-your-urlconf\">\n<span id=\"usage-in-your-urlconf\"></span><h2>Usage in your URLconf<a class=\"headerlink\" href=\"#usage-in-your-urlconf\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The most direct way to use generic views is to create them directly in your\nURLconf. If you\u2019re only changing a few attributes on a class-based view, you\ncan pass them into the <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> method\ncall itself:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;about/&quot;</span><span class=\"p\">,</span> <span class=\"n\">TemplateView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;about.html&quot;</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Any arguments passed to <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> will\noverride attributes set on the class. In this example, we set <code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code>\non the <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code>. A similar overriding pattern can be used for the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code> attribute on <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.RedirectView\" title=\"django.views.generic.base.RedirectView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RedirectView</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-subclassing-generic-views\">\n<span id=\"subclassing-generic-views\"></span><h2>Subclassing generic views<a class=\"headerlink\" href=\"#subclassing-generic-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The second, more powerful way to use generic views is to inherit from an\nexisting view and override attributes (such as the <code class=\"docutils literal notranslate\"><span class=\"pre\">template_name</span></code>) or\nmethods (such as <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data</span></code>) in your subclass to provide new values\nor methods. Consider, for example, a view that just displays one template,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">about.html</span></code>. Django has a generic view to do this -\n<a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> - so we can subclass it, and\noverride the template name:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># some_app/views.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AboutView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;about.html&quot;</span>\n</pre></div>\n</div>\n<p>Then we need to add this new view into our URLconf.\n<a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a> is a class, not a function, so\nwe point the URL to the <a class=\"reference internal\" href=\"../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> class\nmethod instead, which provides a function-like entry to class-based views:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># urls.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">some_app.views</span> <span class=\"kn\">import</span> <span class=\"n\">AboutView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;about/&quot;</span><span class=\"p\">,</span> <span class=\"n\">AboutView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>For more information on how to use the built in generic views, consult the next\ntopic on <a class=\"reference internal\" href=\"generic-display/\"><span class=\"doc\">generic class-based views</span></a>.</p>\n<div class=\"section\" id=\"s-supporting-other-http-methods\">\n<span id=\"s-id1\"></span><span id=\"supporting-other-http-methods\"></span><span id=\"id1\"></span><h3>Supporting other HTTP methods<a class=\"headerlink\" href=\"#supporting-other-http-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Suppose somebody wants to access our book library over HTTP using the views\nas an API. The API client would connect every now and then and download book\ndata for the books published since last visit. But if no new books appeared\nsince then, it is a waste of CPU time and bandwidth to fetch the books from the\ndatabase, render a full response and send it to the client. It might be\npreferable to ask the API when the most recent book was published.</p>\n<p>We map the URL to book list view in the URLconf:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.views</span> <span class=\"kn\">import</span> <span class=\"n\">BookListView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;books/&quot;</span><span class=\"p\">,</span> <span class=\"n\">BookListView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>And the view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">ListView</span>\n<span class=\"kn\">from</span> <span class=\"nn\">books.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookListView</span><span class=\"p\">(</span><span class=\"n\">ListView</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Book</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">head</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">last_book</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_queryset</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">latest</span><span class=\"p\">(</span><span class=\"s2\">&quot;publication_date&quot;</span><span class=\"p\">)</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span>\n            <span class=\"c1\"># RFC 1123 date format.</span>\n            <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n                <span class=\"s2\">&quot;Last-Modified&quot;</span><span class=\"p\">:</span> <span class=\"n\">last_book</span><span class=\"o\">.</span><span class=\"n\">publication_date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span>\n                    <span class=\"s2\">&quot;</span><span class=\"si\">%a</span><span class=\"s2\">, </span><span class=\"si\">%d</span><span class=\"s2\"> %b %Y %H:%M:%S GMT&quot;</span>\n                <span class=\"p\">)</span>\n            <span class=\"p\">},</span>\n        <span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre></div>\n</div>\n<p>If the view is accessed from a <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> request, an object list is returned in\nthe response (using the <code class=\"docutils literal notranslate\"><span class=\"pre\">book_list.html</span></code> template). But if the client issues\na <code class=\"docutils literal notranslate\"><span class=\"pre\">HEAD</span></code> request, the response has an empty body and the <code class=\"docutils literal notranslate\"><span class=\"pre\">Last-Modified</span></code>\nheader indicates when the most recent book was published.  Based on this\ninformation, the client may or may not download the full object list.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-asynchronous-class-based-views\">\n<span id=\"s-async-class-based-views\"></span><span id=\"asynchronous-class-based-views\"></span><span id=\"async-class-based-views\"></span><h2>Asynchronous class-based views<a class=\"headerlink\" href=\"#asynchronous-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As well as the synchronous (<code class=\"docutils literal notranslate\"><span class=\"pre\">def</span></code>) method handlers already shown, <code class=\"docutils literal notranslate\"><span class=\"pre\">View</span></code>\nsubclasses may define asynchronous (<code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code>) method handlers to leverage\nasynchronous code using <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AsyncView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Perform io-blocking view logic using await, sleep for example.</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello async world!&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Within a single view-class, all user-defined method handlers must be either\nsynchronous, using <code class=\"docutils literal notranslate\"><span class=\"pre\">def</span></code>, or all asynchronous, using <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code>. An\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code> exception will be raised in <code class=\"docutils literal notranslate\"><span class=\"pre\">as_view()</span></code> if <code class=\"docutils literal notranslate\"><span class=\"pre\">def</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">def</span></code> declarations are mixed.</p>\n<p>Django will automatically detect asynchronous views and run them in an\nasynchronous context. You can read more about Django\u2019s asynchronous support,\nand how to best use async views, in <a class=\"reference internal\" href=\"../async/\"><span class=\"doc\">Asynchronous support</span></a>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/class-based-views/intro", "Introduction to class-based views", "N", "next"], ["topics/templates", "Templates", "P", "previous"]], "sourcename": "topics/class-based-views/index.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Class-based views</a><ul>\n<li><a class=\"reference internal\" href=\"#basic-examples\">Basic examples</a></li>\n<li><a class=\"reference internal\" href=\"#usage-in-your-urlconf\">Usage in your URLconf</a></li>\n<li><a class=\"reference internal\" href=\"#subclassing-generic-views\">Subclassing generic views</a><ul>\n<li><a class=\"reference internal\" href=\"#supporting-other-http-methods\">Supporting other HTTP methods</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#asynchronous-class-based-views\">Asynchronous class-based views</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/class-based-views/index", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}