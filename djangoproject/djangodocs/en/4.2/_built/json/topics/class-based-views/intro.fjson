{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Class-based views"}], "prev": {"link": "../", "title": "Class-based views"}, "next": {"link": "../generic-display/", "title": "Built-in class-based generic views"}, "title": "Introduction to class-based views", "meta": {}, "body": "<div class=\"section\" id=\"s-introduction-to-class-based-views\">\n<span id=\"introduction-to-class-based-views\"></span><h1>Introduction to class-based views<a class=\"headerlink\" href=\"#introduction-to-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Class-based views provide an alternative way to implement views as Python\nobjects instead of functions. They do not replace function-based views, but\nhave certain differences and advantages when compared to function-based views:</p>\n<ul class=\"simple\">\n<li>Organization of code related to specific HTTP methods (<code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>,\netc.) can be addressed by separate methods instead of conditional branching.</li>\n<li>Object oriented techniques such as mixins (multiple inheritance) can be\nused to factor code into reusable components.</li>\n</ul>\n<div class=\"section\" id=\"s-the-relationship-and-history-of-generic-views-class-based-views-and-class-based-generic-views\">\n<span id=\"the-relationship-and-history-of-generic-views-class-based-views-and-class-based-generic-views\"></span><h2>The relationship and history of generic views, class-based views, and class-based generic views<a class=\"headerlink\" href=\"#the-relationship-and-history-of-generic-views-class-based-views-and-class-based-generic-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In the beginning there was only the view function contract, Django passed your\nfunction an <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> and expected back an\n<a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>. This was the extent of what Django provided.</p>\n<p>Early on it was recognized that there were common idioms and patterns found in\nview development. Function-based generic views were introduced to abstract\nthese patterns and ease view development for the common cases.</p>\n<p>The problem with function-based generic views is that while they covered the\nsimple cases well, there was no way to extend or customize them beyond some\nconfiguration options, limiting their usefulness in many real-world\napplications.</p>\n<p>Class-based generic views were created with the same objective as\nfunction-based generic views, to make view development easier. However, the way\nthe solution is implemented, through the use of mixins, provides a toolkit that\nresults in class-based generic views being more extensible and flexible than\ntheir function-based counterparts.</p>\n<p>If you have tried function based generic views in the past and found them\nlacking, you should not think of class-based generic views as a class-based\nequivalent, but rather as a fresh approach to solving the original problems\nthat generic views were meant to solve.</p>\n<p>The toolkit of base classes and mixins that Django uses to build class-based\ngeneric views are built for maximum flexibility, and as such have many hooks in\nthe form of default method implementations and attributes that you are unlikely\nto be concerned with in the simplest use cases. For example, instead of\nlimiting you to a class-based attribute for <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code>, the implementation\nuses a <code class=\"docutils literal notranslate\"><span class=\"pre\">get_form</span></code> method, which calls a <code class=\"docutils literal notranslate\"><span class=\"pre\">get_form_class</span></code> method, which in\nits default implementation returns the <code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code> attribute of the class.\nThis gives you several options for specifying what form to use, from an\nattribute, to a fully dynamic, callable hook. These options seem to add hollow\ncomplexity for simple situations, but without them, more advanced designs would\nbe limited.</p>\n</div>\n<div class=\"section\" id=\"s-using-class-based-views\">\n<span id=\"using-class-based-views\"></span><h2>Using class-based views<a class=\"headerlink\" href=\"#using-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>At its core, a class-based view allows you to respond to different HTTP request\nmethods with different class instance methods, instead of with conditionally\nbranching code inside a single view function.</p>\n<p>So where the code to handle HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> in a view function would look\nsomething like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># &lt;view logic&gt;</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;result&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In a class-based view, this would become:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"c1\"># &lt;view logic&gt;</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;result&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Because Django\u2019s URL resolver expects to send the request and associated\narguments to a callable function, not a class, class-based views have an\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> class method which returns a\nfunction that can be called when a request arrives for a URL matching the\nassociated pattern. The function creates an instance of the class, calls\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.setup\" title=\"django.views.generic.base.View.setup\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setup()</span></code></a> to initialize its attributes, and\nthen calls its <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.dispatch\" title=\"django.views.generic.base.View.dispatch\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dispatch()</span></code></a> method.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dispatch</span></code> looks at the request to determine whether it is a <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>, etc, and relays the request to a matching method if one is defined,\nor raises <a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponseNotAllowed\" title=\"django.http.HttpResponseNotAllowed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseNotAllowed</span></code></a> if not:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># urls.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.views</span> <span class=\"kn\">import</span> <span class=\"n\">MyView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;about/&quot;</span><span class=\"p\">,</span> <span class=\"n\">MyView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">()),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>It is worth noting that what your method returns is identical to what you\nreturn from a function-based view, namely some form of\n<a class=\"reference internal\" href=\"../../../ref/request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>. This means that\n<a class=\"reference internal\" href=\"../../http/shortcuts/\"><span class=\"doc\">http shortcuts</span></a> or\n<a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a> objects are valid to use\ninside a class-based view.</p>\n<p>While a minimal class-based view does not require any class attributes to\nperform its job, class attributes are useful in many class-based designs,\nand there are two ways to configure or set class attributes.</p>\n<p>The first is the standard Python way of subclassing and overriding attributes\nand methods in the subclass. So that if your parent class had an attribute\n<code class=\"docutils literal notranslate\"><span class=\"pre\">greeting</span></code> like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">GreetingView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Good Day&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">greeting</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can override that in a subclass:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MorningGreetingView</span><span class=\"p\">(</span><span class=\"n\">GreetingView</span><span class=\"p\">):</span>\n    <span class=\"n\">greeting</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Morning to ya&quot;</span>\n</pre></div>\n</div>\n<p>Another option is to configure class attributes as keyword arguments to the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> call in the URLconf:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;about/&quot;</span><span class=\"p\">,</span> <span class=\"n\">GreetingView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">greeting</span><span class=\"o\">=</span><span class=\"s2\">&quot;G&#39;day&quot;</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">While your class is instantiated for each request dispatched to it, class\nattributes set through the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> entry point are\nconfigured only once at the time your URLs are imported.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-mixins\">\n<span id=\"using-mixins\"></span><h2>Using mixins<a class=\"headerlink\" href=\"#using-mixins\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Mixins are a form of multiple inheritance where behaviors and attributes of\nmultiple parent classes can be combined.</p>\n<p>For example, in the generic class-based views there is a mixin called\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin\" title=\"django.views.generic.base.TemplateResponseMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code></a> whose primary purpose\nis to define the method\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response\" title=\"django.views.generic.base.TemplateResponseMixin.render_to_response\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code></a>.\nWhen combined with the behavior of the <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View\" title=\"django.views.generic.base.View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a>\nbase class, the result is a <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.TemplateView\" title=\"django.views.generic.base.TemplateView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateView</span></code></a>\nclass that will dispatch requests to the appropriate matching methods (a\nbehavior defined in the <code class=\"docutils literal notranslate\"><span class=\"pre\">View</span></code> base class), and that has a\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.render_to_response\" title=\"django.views.generic.base.TemplateResponseMixin.render_to_response\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">render_to_response()</span></code></a>\nmethod that uses a\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-simple/#django.views.generic.base.TemplateResponseMixin.template_name\" title=\"django.views.generic.base.TemplateResponseMixin.template_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template_name</span></code></a>\nattribute to return a <a class=\"reference internal\" href=\"../../../ref/template-response/#django.template.response.TemplateResponse\" title=\"django.template.response.TemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TemplateResponse</span></code></a>\nobject (a behavior defined in the <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateResponseMixin</span></code>).</p>\n<p>Mixins are an excellent way of reusing code across multiple classes, but they\ncome with some cost. The more your code is scattered among mixins, the harder\nit will be to read a child class and know what exactly it is doing, and the\nharder it will be to know which methods from which mixins to override if you\nare subclassing something that has a deep inheritance tree.</p>\n<p>Note also that you can only inherit from one generic view - that is, only one\nparent class may inherit from <a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View\" title=\"django.views.generic.base.View\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">View</span></code></a> and\nthe rest (if any) should be mixins. Trying to inherit from more than one class\nthat inherits from <code class=\"docutils literal notranslate\"><span class=\"pre\">View</span></code> - for example, trying to use a form at the top of a\nlist and combining <a class=\"reference internal\" href=\"../../../ref/class-based-views/mixins-editing/#django.views.generic.edit.ProcessFormView\" title=\"django.views.generic.edit.ProcessFormView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ProcessFormView</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/generic-display/#django.views.generic.list.ListView\" title=\"django.views.generic.list.ListView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ListView</span></code></a> - won\u2019t work as expected.</p>\n</div>\n<div class=\"section\" id=\"s-handling-forms-with-class-based-views\">\n<span id=\"handling-forms-with-class-based-views\"></span><h2>Handling forms with class-based views<a class=\"headerlink\" href=\"#handling-forms-with-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A basic function-based view that handles forms may look something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.forms</span> <span class=\"kn\">import</span> <span class=\"n\">MyForm</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">myview</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">:</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"c1\"># &lt;process form cleaned data&gt;</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s2\">&quot;/success/&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"p\">(</span><span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">})</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;form_template.html&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;form&quot;</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>A similar class-based view might look like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views</span> <span class=\"kn\">import</span> <span class=\"n\">View</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.forms</span> <span class=\"kn\">import</span> <span class=\"n\">MyForm</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFormView</span><span class=\"p\">(</span><span class=\"n\">View</span><span class=\"p\">):</span>\n    <span class=\"n\">form_class</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span>\n    <span class=\"n\">initial</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;key&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;value&quot;</span><span class=\"p\">}</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;form_template.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_class</span><span class=\"p\">(</span><span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">initial</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;form&quot;</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">form_class</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"c1\"># &lt;process form cleaned data&gt;</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s2\">&quot;/success/&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;form&quot;</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>This is a minimal case, but you can see that you would then have the option\nof customizing this view by overriding any of the class attributes, e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">form_class</span></code>, via URLconf configuration, or subclassing and overriding one or\nmore of the methods (or both!).</p>\n</div>\n<div class=\"section\" id=\"s-decorating-class-based-views\">\n<span id=\"decorating-class-based-views\"></span><h2>Decorating class-based views<a class=\"headerlink\" href=\"#decorating-class-based-views\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The extension of class-based views isn\u2019t limited to using mixins. You can also\nuse decorators. Since class-based views aren\u2019t functions, decorating them works\ndifferently depending on if you\u2019re using <code class=\"docutils literal notranslate\"><span class=\"pre\">as_view()</span></code> or creating a subclass.</p>\n<div class=\"section\" id=\"s-decorating-in-urlconf\">\n<span id=\"decorating-in-urlconf\"></span><h3>Decorating in URLconf<a class=\"headerlink\" href=\"#decorating-in-urlconf\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can adjust class-based views by decorating the result of the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.as_view\" title=\"django.views.generic.base.View.as_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_view()</span></code></a> method. The easiest place to do\nthis is in the URLconf where you deploy your view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span><span class=\"p\">,</span> <span class=\"n\">permission_required</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.views</span> <span class=\"kn\">import</span> <span class=\"n\">VoteView</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;about/&quot;</span><span class=\"p\">,</span> <span class=\"n\">login_required</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;secret.html&quot;</span><span class=\"p\">))),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;vote/&quot;</span><span class=\"p\">,</span> <span class=\"n\">permission_required</span><span class=\"p\">(</span><span class=\"s2\">&quot;polls.can_vote&quot;</span><span class=\"p\">)(</span><span class=\"n\">VoteView</span><span class=\"o\">.</span><span class=\"n\">as_view</span><span class=\"p\">())),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This approach applies the decorator on a per-instance basis. If you\nwant every instance of a view to be decorated, you need to take a\ndifferent approach.</p>\n</div>\n<div class=\"section\" id=\"s-decorating-the-class\">\n<span id=\"s-id1\"></span><span id=\"decorating-the-class\"></span><span id=\"id1\"></span><h3>Decorating the class<a class=\"headerlink\" href=\"#decorating-the-class\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To decorate every instance of a class-based view, you need to decorate\nthe class definition itself. To do this you apply the decorator to the\n<a class=\"reference internal\" href=\"../../../ref/class-based-views/base/#django.views.generic.base.View.dispatch\" title=\"django.views.generic.base.View.dispatch\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dispatch()</span></code></a> method of the class.</p>\n<p>A method on a class isn\u2019t quite the same as a standalone function, so you can\u2019t\njust apply a function decorator to the method \u2013 you need to transform it into\na method decorator first. The <code class=\"docutils literal notranslate\"><span class=\"pre\">method_decorator</span></code> decorator transforms a\nfunction decorator into a method decorator so that it can be used on an\ninstance method. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">login_required</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">method_decorator</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.generic</span> <span class=\"kn\">import</span> <span class=\"n\">TemplateView</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProtectedView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;secret.html&quot;</span>\n\n    <span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Or, more succinctly, you can decorate the class instead and pass the name\nof the method to be decorated as the keyword argument <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dispatch&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ProtectedView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;secret.html&quot;</span>\n</pre></div>\n</div>\n<p>If you have a set of common decorators used in several places, you can define\na list or tuple of decorators and use this instead of invoking\n<code class=\"docutils literal notranslate\"><span class=\"pre\">method_decorator()</span></code> multiple times. These two classes are equivalent:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">decorators</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">never_cache</span><span class=\"p\">,</span> <span class=\"n\">login_required</span><span class=\"p\">]</span>\n\n\n<span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">decorators</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dispatch&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ProtectedView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;secret.html&quot;</span>\n\n\n<span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">never_cache</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dispatch&quot;</span><span class=\"p\">)</span>\n<span class=\"nd\">@method_decorator</span><span class=\"p\">(</span><span class=\"n\">login_required</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;dispatch&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">ProtectedView</span><span class=\"p\">(</span><span class=\"n\">TemplateView</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;secret.html&quot;</span>\n</pre></div>\n</div>\n<p>The decorators will process a request in the order they are passed to the\ndecorator. In the example, <code class=\"docutils literal notranslate\"><span class=\"pre\">never_cache()</span></code> will process the request before\n<code class=\"docutils literal notranslate\"><span class=\"pre\">login_required()</span></code>.</p>\n<p>In this example, every instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">ProtectedView</span></code> will have login\nprotection. These examples use <code class=\"docutils literal notranslate\"><span class=\"pre\">login_required</span></code>, however, the same behavior\ncan be obtained by using\n<a class=\"reference internal\" href=\"../../auth/default/#django.contrib.auth.mixins.LoginRequiredMixin\" title=\"django.contrib.auth.mixins.LoginRequiredMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LoginRequiredMixin</span></code></a>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">method_decorator</span></code> passes <code class=\"docutils literal notranslate\"><span class=\"pre\">*args</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code>\nas parameters to the decorated method on the class. If your method\ndoes not accept a compatible set of parameters it will raise a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code> exception.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/class-based-views/generic-display", "Built-in class-based generic views", "N", "next"], ["topics/class-based-views/index", "Class-based views", "P", "previous"]], "sourcename": "topics/class-based-views/intro.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Introduction to class-based views</a><ul>\n<li><a class=\"reference internal\" href=\"#the-relationship-and-history-of-generic-views-class-based-views-and-class-based-generic-views\">The relationship and history of generic views, class-based views, and class-based generic views</a></li>\n<li><a class=\"reference internal\" href=\"#using-class-based-views\">Using class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#using-mixins\">Using mixins</a></li>\n<li><a class=\"reference internal\" href=\"#handling-forms-with-class-based-views\">Handling forms with class-based views</a></li>\n<li><a class=\"reference internal\" href=\"#decorating-class-based-views\">Decorating class-based views</a><ul>\n<li><a class=\"reference internal\" href=\"#decorating-in-urlconf\">Decorating in URLconf</a></li>\n<li><a class=\"reference internal\" href=\"#decorating-the-class\">Decorating the class</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/class-based-views/intro", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}