{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../models/", "title": "Models"}, "next": {"link": "../aggregation/", "title": "Aggregation"}, "title": "Making queries", "meta": {}, "body": "<div class=\"section\" id=\"s-making-queries\">\n<span id=\"making-queries\"></span><h1>Making queries<a class=\"headerlink\" href=\"#making-queries\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Once you\u2019ve created your <a class=\"reference internal\" href=\"../models/\"><span class=\"doc\">data models</span></a>, Django\nautomatically gives you a database-abstraction API that lets you create,\nretrieve, update and delete objects. This document explains how to use this\nAPI. Refer to the <a class=\"reference internal\" href=\"../../../ref/models/\"><span class=\"doc\">data model reference</span></a> for full\ndetails of all the various model lookup options.</p>\n<p>Throughout this guide (and in the reference), we\u2019ll refer to the following\nmodels, which comprise a blog application:</p>\n<div class=\"highlight-python notranslate\" id=\"queryset-model-example\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">tagline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Author</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">email</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Blog</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">body_text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">mod_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">)</span>\n    <span class=\"n\">authors</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Author</span><span class=\"p\">)</span>\n    <span class=\"n\">number_of_comments</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">number_of_pingbacks</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">rating</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">headline</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-creating-objects\">\n<span id=\"creating-objects\"></span><h2>Creating objects<a class=\"headerlink\" href=\"#creating-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To represent database-table data in Python objects, Django uses an intuitive\nsystem: A model class represents a database table, and an instance of that\nclass represents a particular record in the database table.</p>\n<p>To create an object, instantiate it using keyword arguments to the model class,\nthen call <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> to save it to the database.</p>\n<p>Assuming models live in a file <code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/blog/models.py</span></code>, here\u2019s an example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">blog.models</span> <span class=\"kn\">import</span> <span class=\"n\">Blog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Beatles Blog&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;All the latest Beatles news.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This performs an <code class=\"docutils literal notranslate\"><span class=\"pre\">INSERT</span></code> SQL statement behind the scenes. Django doesn\u2019t hit\nthe database until you explicitly call <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>.</p>\n<p>The <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method has no return value.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p><a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> takes a number of advanced options not\ndescribed here. See the documentation for\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> for complete details.</p>\n<p class=\"last\">To create and save an object in a single step, use the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.create\" title=\"django.db.models.query.QuerySet.create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create()</span></code></a> method.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-saving-changes-to-objects\">\n<span id=\"saving-changes-to-objects\"></span><h2>Saving changes to objects<a class=\"headerlink\" href=\"#saving-changes-to-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To save changes to an object that\u2019s already in the database, use\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>.</p>\n<p>Given a <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> instance <code class=\"docutils literal notranslate\"><span class=\"pre\">b5</span></code> that has already been saved to the database,\nthis example changes its name and updates its record in the database:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b5</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;New name&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b5</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This performs an <code class=\"docutils literal notranslate\"><span class=\"pre\">UPDATE</span></code> SQL statement behind the scenes. Django doesn\u2019t hit\nthe database until you explicitly call <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>.</p>\n<div class=\"section\" id=\"s-saving-foreignkey-and-manytomanyfield-fields\">\n<span id=\"saving-foreignkey-and-manytomanyfield-fields\"></span><h3>Saving <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> fields<a class=\"headerlink\" href=\"#saving-foreignkey-and-manytomanyfield-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Updating a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> field works exactly the same\nway as saving a normal field \u2013 assign an object of the right type to the field\nin question. This example updates the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> attribute of an <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>\ninstance <code class=\"docutils literal notranslate\"><span class=\"pre\">entry</span></code>, assuming appropriate instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code>\nare already saved to the database (so we can retrieve them below):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">blog.models</span> <span class=\"kn\">import</span> <span class=\"n\">Blog</span><span class=\"p\">,</span> <span class=\"n\">Entry</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cheese_blog</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cheddar Talk&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">cheese_blog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Updating a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> works a little\ndifferently \u2013 use the\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a> method on the field\nto add a record to the relation. This example adds the <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> instance\n<code class=\"docutils literal notranslate\"><span class=\"pre\">joe</span></code> to the <code class=\"docutils literal notranslate\"><span class=\"pre\">entry</span></code> object:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">blog.models</span> <span class=\"kn\">import</span> <span class=\"n\">Author</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">joe</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Joe&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">joe</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To add multiple records to a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> in one\ngo, include multiple arguments in the call to\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a>, like this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">john</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paul</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Paul&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">george</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;George&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringo</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Ringo&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">john</span><span class=\"p\">,</span> <span class=\"n\">paul</span><span class=\"p\">,</span> <span class=\"n\">george</span><span class=\"p\">,</span> <span class=\"n\">ringo</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Django will complain if you try to assign or add an object of the wrong type.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-retrieving-objects\">\n<span id=\"s-id1\"></span><span id=\"retrieving-objects\"></span><span id=\"id1\"></span><h2>Retrieving objects<a class=\"headerlink\" href=\"#retrieving-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To retrieve objects from your database, construct a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> via a\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> on your model class.</p>\n<p>A <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> represents a collection of objects\nfrom your database. It can have zero, one or many <em>filters</em>. Filters narrow\ndown the query results based on the given parameters. In SQL terms, a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> equates to a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> statement,\nand a filter is a limiting clause such as <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">LIMIT</span></code>.</p>\n<p>You get a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> by using your model\u2019s\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a>. Each model has at least one\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a>, and it\u2019s called\n<a class=\"reference internal\" href=\"../../../ref/models/class/#django.db.models.Model.objects\" title=\"django.db.models.Model.objects\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">objects</span></code></a> by default. Access it directly via the\nmodel class, like so:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span>\n<span class=\"go\">&lt;django.db.models.manager.Manager object at ...&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Foo&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bar&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">objects</span>\n<span class=\"go\">Traceback:</span>\n<span class=\"go\">    ...</span>\n<span class=\"go\">AttributeError: &quot;Manager isn&#39;t accessible via Blog instances.&quot;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Managers</span></code> are accessible only via model classes, rather than from model\ninstances, to enforce a separation between \u201ctable-level\u201d operations and\n\u201crecord-level\u201d operations.</p>\n</div>\n<p>The <a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> is the main source of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> for\na model. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog.objects.all()</span></code> returns a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> that contains all <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> objects in\nthe database.</p>\n<div class=\"section\" id=\"s-retrieving-all-objects\">\n<span id=\"retrieving-all-objects\"></span><h3>Retrieving all objects<a class=\"headerlink\" href=\"#retrieving-all-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The simplest way to retrieve objects from a table is to get all of them. To do\nthis, use the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.all\" title=\"django.db.models.query.QuerySet.all\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">all()</span></code></a> method on a\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">all_entries</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.all\" title=\"django.db.models.query.QuerySet.all\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">all()</span></code></a> method returns a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> of all the objects in the database.</p>\n</div>\n<div class=\"section\" id=\"s-retrieving-specific-objects-with-filters\">\n<span id=\"retrieving-specific-objects-with-filters\"></span><h3>Retrieving specific objects with filters<a class=\"headerlink\" href=\"#retrieving-specific-objects-with-filters\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> returned by\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.all\" title=\"django.db.models.query.QuerySet.all\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">all()</span></code></a> describes all objects in the\ndatabase table. Usually, though, you\u2019ll need to select only a subset of the\ncomplete set of objects.</p>\n<p>To create such a subset, you refine the initial\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, adding filter conditions. The two\nmost common ways to refine a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> are:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">filter(**kwargs)</span></code></dt><dd>Returns a new <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> containing objects\nthat match the given lookup parameters.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">exclude(**kwargs)</span></code></dt><dd>Returns a new <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> containing objects\nthat do <em>not</em> match the given lookup parameters.</dd>\n</dl>\n<p>The lookup parameters (<code class=\"docutils literal notranslate\"><span class=\"pre\">**kwargs</span></code> in the above function definitions) should\nbe in the format described in <a class=\"reference internal\" href=\"#field-lookups\">Field lookups</a> below.</p>\n<p>For example, to get a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> of blog entries\nfrom the year 2006, use <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> like\nso:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2006</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>With the default manager class, it is the same as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2006</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-chaining-filters\">\n<span id=\"s-id2\"></span><span id=\"chaining-filters\"></span><span id=\"id2\"></span><h4>Chaining filters<a class=\"headerlink\" href=\"#chaining-filters\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The result of refining a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> is itself a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, so it\u2019s possible to chain\nrefinements together. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date__gte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__gte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>This takes the initial <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> of all entries\nin the database, adds a filter, then an exclusion, then another filter. The\nfinal result is a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> containing all\nentries with a headline that starts with \u201cWhat\u201d, that were published between\nJanuary 30, 2005, and the current day.</p>\n</div>\n<div class=\"section\" id=\"s-filtered-querysets-are-unique\">\n<span id=\"s-id3\"></span><span id=\"filtered-querysets-are-unique\"></span><span id=\"id3\"></span><h4>Filtered <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are unique<a class=\"headerlink\" href=\"#filtered-querysets-are-unique\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Each time you refine a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, you get a\nbrand-new <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> that is in no way bound to\nthe previous <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>. Each refinement creates\na separate and distinct <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> that can be\nstored, used and reused.</p>\n<p>Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q1</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q2</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">pub_date__gte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q3</span> <span class=\"o\">=</span> <span class=\"n\">q1</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__gte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>These three <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> are separate. The first is a base\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> containing all entries that contain a\nheadline starting with \u201cWhat\u201d. The second is a subset of the first, with an\nadditional criteria that excludes records whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is today or in the\nfuture. The third is a subset of the first, with an additional criteria that\nselects only the records whose <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> is today or in the future. The\ninitial <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">q1</span></code>) is unaffected by the\nrefinement process.</p>\n</div>\n<div class=\"section\" id=\"s-querysets-are-lazy\">\n<span id=\"s-id4\"></span><span id=\"querysets-are-lazy\"></span><span id=\"id4\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are lazy<a class=\"headerlink\" href=\"#querysets-are-lazy\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> are lazy \u2013 the act of creating a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> doesn\u2019t involve any database\nactivity. You can stack filters together all day long, and Django won\u2019t\nactually run the query until the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> is\n<em>evaluated</em>. Take a look at this example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__lte</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">body_text__icontains</span><span class=\"o\">=</span><span class=\"s2\">&quot;food&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Though this looks like three database hits, in fact it hits the database only\nonce, at the last line (<code class=\"docutils literal notranslate\"><span class=\"pre\">print(q)</span></code>). In general, the results of a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> aren\u2019t fetched from the database\nuntil you \u201cask\u201d for them. When you do, the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> is <em>evaluated</em> by accessing the\ndatabase. For more details on exactly when evaluation takes place, see\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#when-querysets-are-evaluated\"><span class=\"std std-ref\">When QuerySets are evaluated</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-retrieving-a-single-object-with-get\">\n<span id=\"s-retrieving-single-object-with-get\"></span><span id=\"retrieving-a-single-object-with-get\"></span><span id=\"retrieving-single-object-with-get\"></span><h3>Retrieving a single object with <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code><a class=\"headerlink\" href=\"#retrieving-a-single-object-with-get\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> will always give you a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, even if only a single object matches\nthe query - in this case, it will be a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> containing a single element.</p>\n<p>If you know there is only one object that matches your query, you can use the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> method on a\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> which returns the object directly:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">one_entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can use any query expression with\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>, just like with\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> - again, see <a class=\"reference internal\" href=\"#field-lookups\">Field lookups</a>\nbelow.</p>\n<p>Note that there is a difference between using\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>, and using\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> with a slice of <code class=\"docutils literal notranslate\"><span class=\"pre\">[0]</span></code>. If\nthere are no results that match the query,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code>\nexception. This exception is an attribute of the model class that the query is\nbeing performed on - so in the code above, if there is no <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> object with\na primary key of 1, Django will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry.DoesNotExist</span></code>.</p>\n<p>Similarly, Django will complain if more than one item matches the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> query. In this case, it will raise\n<a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.MultipleObjectsReturned\" title=\"django.core.exceptions.MultipleObjectsReturned\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">MultipleObjectsReturned</span></code></a>, which again is an\nattribute of the model class itself.</p>\n</div>\n<div class=\"section\" id=\"s-other-queryset-methods\">\n<span id=\"other-queryset-methods\"></span><h3>Other <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods<a class=\"headerlink\" href=\"#other-queryset-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Most of the time you\u2019ll use <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.all\" title=\"django.db.models.query.QuerySet.all\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">all()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a> when you need to look up\nobjects from the database. However, that\u2019s far from all there is; see the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#queryset-api\"><span class=\"std std-ref\">QuerySet API Reference</span></a> for a complete list of all the\nvarious <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> methods.</p>\n</div>\n<div class=\"section\" id=\"s-limiting-querysets\">\n<span id=\"s-id5\"></span><span id=\"limiting-querysets\"></span><span id=\"id5\"></span><h3>Limiting <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#limiting-querysets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Use a subset of Python\u2019s array-slicing syntax to limit your\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> to a certain number of results. This\nis the equivalent of SQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">LIMIT</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">OFFSET</span></code> clauses.</p>\n<p>For example, this returns the first 5 objects (<code class=\"docutils literal notranslate\"><span class=\"pre\">LIMIT</span> <span class=\"pre\">5</span></code>):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This returns the sixth through tenth objects (<code class=\"docutils literal notranslate\"><span class=\"pre\">OFFSET</span> <span class=\"pre\">5</span> <span class=\"pre\">LIMIT</span> <span class=\"pre\">5</span></code>):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Negative indexing (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry.objects.all()[-1]</span></code>) is not supported.</p>\n<p>Generally, slicing a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> returns a new\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> \u2013 it doesn\u2019t evaluate the query. An\nexception is if you use the \u201cstep\u201d parameter of Python slice syntax. For\nexample, this would actually execute the query in order to return a list of\nevery <em>second</em> object of the first 10:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[:</span><span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Further filtering or ordering of a sliced queryset is prohibited due to the\nambiguous nature of how that might work.</p>\n<p>To retrieve a <em>single</em> object rather than a list\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">foo</span> <span class=\"pre\">FROM</span> <span class=\"pre\">bar</span> <span class=\"pre\">LIMIT</span> <span class=\"pre\">1</span></code>), use an index instead of a slice. For\nexample, this returns the first <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> in the database, after ordering\nentries alphabetically by headline:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This is roughly equivalent to:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;headline&quot;</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Note, however, that the first of these will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">IndexError</span></code> while the\nsecond will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code> if no objects match the given criteria. See\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-field-lookups\">\n<span id=\"s-field-lookups-intro\"></span><span id=\"field-lookups\"></span><span id=\"field-lookups-intro\"></span><h3>Field lookups<a class=\"headerlink\" href=\"#field-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Field lookups are how you specify the meat of an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause. They\u2019re\nspecified as keyword arguments to the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>\nmethods <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>.</p>\n<p>Basic lookups keyword arguments take the form <code class=\"docutils literal notranslate\"><span class=\"pre\">field__lookuptype=value</span></code>.\n(That\u2019s a double-underscore). For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__lte</span><span class=\"o\">=</span><span class=\"s2\">&quot;2006-01-01&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>translates (roughly) into the following SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"n\">blog_entry</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">&lt;=</span><span class=\"w\"> </span><span class=\"s1\">&#39;2006-01-01&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition-how-this-is-possible admonition\">\n<p class=\"first admonition-title\">How this is possible</p>\n<p class=\"last\">Python has the ability to define functions that accept arbitrary name-value\narguments whose names and values are evaluated at runtime. For more\ninformation, see <a class=\"reference external\" href=\"https://docs.python.org/3/tutorial/controlflow.html#tut-keywordargs\" title=\"(in Python v3.11)\"><span>Keyword Arguments</span></a> in the official Python tutorial.</p>\n</div>\n<p>The field specified in a lookup has to be the name of a model field. There\u2019s\none exception though, in case of a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> you\ncan specify the field name suffixed with <code class=\"docutils literal notranslate\"><span class=\"pre\">_id</span></code>. In this case, the value\nparameter is expected to contain the raw value of the foreign model\u2019s primary\nkey. For example:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog_id</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you pass an invalid keyword argument, a lookup function will raise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code>.</p>\n<p>The database API supports about two dozen lookup types; a complete reference\ncan be found in the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#field-lookups\"><span class=\"std std-ref\">field lookup reference</span></a>. To give you\na taste of what\u2019s available, here\u2019s some of the more common lookups you\u2019ll\nprobably use:</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-exact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">exact</span></code></a></dt><dd><p>An \u201cexact\u201d match. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">headline__exact</span><span class=\"o\">=</span><span class=\"s2\">&quot;Cat bites dog&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Would generate SQL along these lines:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;Cat bites dog&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>If you don\u2019t provide a lookup type \u2013 that is, if your keyword argument\ndoesn\u2019t contain a double underscore \u2013 the lookup type is assumed to be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code>.</p>\n<p>For example, the following two statements are equivalent:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">id__exact</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>  <span class=\"c1\"># Explicit form</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>  <span class=\"c1\"># __exact is implied</span>\n</pre></div>\n</div>\n<p>This is for convenience, because <code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code> lookups are the common case.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-iexact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a></dt><dd><p>A case-insensitive match. So, the query:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name__iexact</span><span class=\"o\">=</span><span class=\"s2\">&quot;beatles blog&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Would match a <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> titled <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Beatles</span> <span class=\"pre\">Blog&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;beatles</span> <span class=\"pre\">blog&quot;</span></code>, or\neven <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;BeAtlES</span> <span class=\"pre\">blOG&quot;</span></code>.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a></dt><dd><p>Case-sensitive containment test. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Roughly translates to this SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%Lennon%&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Note this will match the headline <code class=\"docutils literal notranslate\"><span class=\"pre\">'Today</span> <span class=\"pre\">Lennon</span> <span class=\"pre\">honored'</span></code> but not\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'today</span> <span class=\"pre\">lennon</span> <span class=\"pre\">honored'</span></code>.</p>\n<p>There\u2019s also a case-insensitive version, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-icontains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">icontains</span></code></a>.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-startswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">startswith</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-endswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">endswith</span></code></a></dt><dd>Starts-with and ends-with search, respectively. There are also\ncase-insensitive versions called <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-istartswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">istartswith</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-iendswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iendswith</span></code></a>.</dd>\n</dl>\n<p>Again, this only scratches the surface. A complete reference can be found in the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#field-lookups\"><span class=\"std std-ref\">field lookup reference</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-lookups-that-span-relationships\">\n<span id=\"s-id6\"></span><span id=\"lookups-that-span-relationships\"></span><span id=\"id6\"></span><h3>Lookups that span relationships<a class=\"headerlink\" href=\"#lookups-that-span-relationships\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django offers a powerful and intuitive way to \u201cfollow\u201d relationships in\nlookups, taking care of the SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">JOIN</span></code>s for you automatically, behind the\nscenes. To span a relationship, use the field name of related fields\nacross models, separated by double underscores, until you get to the field you\nwant.</p>\n<p>This example retrieves all <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> objects with a <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> whose <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>\nis <code class=\"docutils literal notranslate\"><span class=\"pre\">'Beatles</span> <span class=\"pre\">Blog'</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Beatles Blog&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This spanning can be as deep as you\u2019d like.</p>\n<p>It works backwards, too. While it <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_query_name\" title=\"django.db.models.ForeignKey.related_query_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">can</span> <span class=\"pre\">be</span> <span class=\"pre\">customized</span></code></a>, by default you refer to a \u201creverse\u201d\nrelationship in a lookup using the lowercase name of the model.</p>\n<p>This example retrieves all <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> objects which have at least one <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>\nwhose <code class=\"docutils literal notranslate\"><span class=\"pre\">headline</span></code> contains <code class=\"docutils literal notranslate\"><span class=\"pre\">'Lennon'</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entry__headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you are filtering across multiple relationships and one of the intermediate\nmodels doesn\u2019t have a value that meets the filter condition, Django will treat\nit as if there is an empty (all values are <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>), but valid, object there.\nAll this means is that no error will be raised. For example, in this filter:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entry__authors__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>(if there was a related <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> model), if there was no <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code>\nassociated with an entry, it would be treated as if there was also no <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>\nattached, rather than raising an error because of the missing <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code>.\nUsually this is exactly what you want to have happen. The only case where it\nmight be confusing is if you are using <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-isnull\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">isnull</span></code></a>. Thus:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entry__authors__name__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>will return <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> objects that have an empty <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> on the <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code> and\nalso those which have an empty <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code> on the <code class=\"docutils literal notranslate\"><span class=\"pre\">entry</span></code>. If you don\u2019t want\nthose latter objects, you could write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entry__authors__isnull</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">entry__authors__name__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-spanning-multi-valued-relationships\">\n<span id=\"s-id7\"></span><span id=\"spanning-multi-valued-relationships\"></span><span id=\"id7\"></span><h4>Spanning multi-valued relationships<a class=\"headerlink\" href=\"#spanning-multi-valued-relationships\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>When spanning a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> or a reverse\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> (such as from <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>),\nfiltering on multiple attributes raises the question of whether to require each\nattribute to coincide in the same related object. We might seek blogs that have\nan entry from 2008 with <em>\u201cLennon\u201d</em> in its headline, or we might seek blogs that\nmerely have any entry from 2008 as well as some newer or older entry with\n<em>\u201cLennon\u201d</em> in its headline.</p>\n<p>To select all blogs containing at least one entry from 2008 having <em>\u201cLennon\u201d</em>\nin its headline (the same entry satisfying both conditions), we would write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entry__headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">,</span> <span class=\"n\">entry__pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2008</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Otherwise, to perform a more permissive query selecting any blogs with merely\n<em>some</em> entry with <em>\u201cLennon\u201d</em> in its headline and <em>some</em> entry from 2008, we\nwould write:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">entry__headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n    <span class=\"n\">entry__pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2008</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Suppose there is only one blog that has both entries containing <em>\u201cLennon\u201d</em> and\nentries from 2008, but that none of the entries from 2008 contained <em>\u201cLennon\u201d</em>.\nThe first query would not return any blogs, but the second query would return\nthat one blog. (This is because the entries selected by the second filter may\nor may not be the same as the entries in the first filter. We are filtering the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> items with each filter statement, not the <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> items.) In short,\nif each condition needs to match the same related object, then each should be\ncontained in a single <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> call.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>As the second (more permissive) query chains multiple filters, it performs\nmultiple joins to the primary model, potentially yielding duplicates.</p>\n<div class=\"doctest last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Beatles Blog&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">pop</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">&#39;Pop Music Blog&#39;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s1\">&#39;New Lennon Biography&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2008</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Entry: New Lennon Biography&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s1\">&#39;New Lennon Biography in Paperback&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2009</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Entry: New Lennon Biography in Paperback&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">pop</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s1\">&#39;Best Albums of 2008&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2008</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Entry: Best Albums of 2008&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">pop</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s1\">&#39;Lennon Would Have Loved Hip Hop&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2020</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Entry: Lennon Would Have Loved Hip Hop&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">entry__headline__contains</span><span class=\"o\">=</span><span class=\"s1\">&#39;Lennon&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">entry__pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2008</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Blog: Beatles Blog&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">entry__headline__contains</span><span class=\"o\">=</span><span class=\"s1\">&#39;Lennon&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">entry__pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2008</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Blog: Beatles Blog&gt;, &lt;Blog: Beatles Blog&gt;, &lt;Blog: Pop Music Blog]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The behavior of <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> for queries\nthat span multi-value relationships, as described above, is not implemented\nequivalently for <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a>. Instead,\nthe conditions in a single <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a>\ncall will not necessarily refer to the same item.</p>\n<p>For example, the following query would exclude blogs that contain <em>both</em>\nentries with <em>\u201cLennon\u201d</em> in the headline <em>and</em> entries published in 2008:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span>\n    <span class=\"n\">entry__headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">entry__pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2008</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>However, unlike the behavior when using\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>, this will not limit blogs\nbased on entries that satisfy both conditions. In order to do that, i.e.\nto select all blogs that do not contain entries published with <em>\u201cLennon\u201d</em>\nthat were published in 2008, you need to make two queries:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span>\n    <span class=\"n\">entry__in</span><span class=\"o\">=</span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n        <span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2008</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-filters-can-reference-fields-on-the-model\">\n<span id=\"s-using-f-expressions-in-filters\"></span><span id=\"filters-can-reference-fields-on-the-model\"></span><span id=\"using-f-expressions-in-filters\"></span><h3>Filters can reference fields on the model<a class=\"headerlink\" href=\"#filters-can-reference-fields-on-the-model\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In the examples given so far, we have constructed filters that compare\nthe value of a model field with a constant. But what if you want to compare\nthe value of a model field with another field on the same model?</p>\n<p>Django provides <a class=\"reference internal\" href=\"../../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> to allow such\ncomparisons. Instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> act as a reference to a model field within a\nquery. These references can then be used in query filters to compare the values\nof two different fields on the same model instance.</p>\n<p>For example, to find a list of all blog entries that have had more comments\nthan pingbacks, we construct an <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object to reference the pingback count,\nand use that <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object in the query:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">number_of_comments__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_of_pingbacks&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>Django supports the use of addition, subtraction, multiplication,\ndivision, modulo, and power arithmetic with <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects, both with constants\nand with other <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects. To find all the blog entries with more than\n<em>twice</em> as many comments as pingbacks, we modify the query:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">number_of_comments__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_of_pingbacks&quot;</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To find all the entries where the rating of the entry is less than the\nsum of the pingback count and comment count, we would issue the\nquery:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">rating__lt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_of_comments&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_of_pingbacks&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>You can also use the double underscore notation to span relationships in\nan <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object. An <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object with a double underscore will introduce\nany joins needed to access the related object. For example, to retrieve all\nthe entries where the author\u2019s name is the same as the blog name, we could\nissue the query:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">authors__name</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__name&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>For date and date/time fields, you can add or subtract a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">timedelta</span></code></a> object. The following would return all entries\nthat were modified more than 3 days after they were published:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">mod_date__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects support bitwise operations by <code class=\"docutils literal notranslate\"><span class=\"pre\">.bitand()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.bitor()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">.bitxor()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">.bitrightshift()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">.bitleftshift()</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;somefield&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">bitand</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition-oracle admonition\">\n<p class=\"first admonition-title\">Oracle</p>\n<p class=\"last\">Oracle doesn\u2019t support bitwise XOR operation.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-expressions-can-reference-transforms\">\n<span id=\"s-using-transforms-in-expressions\"></span><span id=\"expressions-can-reference-transforms\"></span><span id=\"using-transforms-in-expressions\"></span><h3>Expressions can reference transforms<a class=\"headerlink\" href=\"#expressions-can-reference-transforms\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django supports using transforms in expressions.</p>\n<p>For example, to find all <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> objects published in the same year as they\nwere last modified:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;mod_date__year&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>To find the earliest year an entry was published, we can issue the query:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Min</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">(</span><span class=\"n\">first_published_year</span><span class=\"o\">=</span><span class=\"n\">Min</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date__year&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>This example finds the value of the highest rated entry and the total number\nof comments on all entries for each year:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">OuterRef</span><span class=\"p\">,</span> <span class=\"n\">Subquery</span><span class=\"p\">,</span> <span class=\"n\">Sum</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date__year&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">top_rating</span><span class=\"o\">=</span><span class=\"n\">Subquery</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>            <span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"n\">OuterRef</span><span class=\"p\">(</span><span class=\"s2\">&quot;pub_date__year&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-rating&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>        <span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">total_comments</span><span class=\"o\">=</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_of_comments&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-pk-lookup-shortcut\">\n<span id=\"the-pk-lookup-shortcut\"></span><h3>The <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> lookup shortcut<a class=\"headerlink\" href=\"#the-pk-lookup-shortcut\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For convenience, Django provides a <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> lookup shortcut, which stands for\n\u201cprimary key\u201d.</p>\n<p>In the example <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> model, the primary key is the <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> field, so these\nthree statements are equivalent:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">id__exact</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>  <span class=\"c1\"># Explicit form</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>  <span class=\"c1\"># __exact is implied</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>  <span class=\"c1\"># pk implies id__exact</span>\n</pre></div>\n</div>\n<p>The use of <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> isn\u2019t limited to <code class=\"docutils literal notranslate\"><span class=\"pre\">__exact</span></code> queries \u2013 any query term\ncan be combined with <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> to perform a query on the primary key of a model:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># Get blogs entries with id 1, 4 and 7</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pk__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">])</span>\n\n<span class=\"go\"># Get all blog entries with id &gt; 14</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pk__gt</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> lookups also work across joins. For example, these three statements are\nequivalent:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__id__exact</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Explicit form</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># __exact is implied</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog__pk</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># __pk implies __id__exact</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-escaping-percent-signs-and-underscores-in-like-statements\">\n<span id=\"escaping-percent-signs-and-underscores-in-like-statements\"></span><h3>Escaping percent signs and underscores in <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> statements<a class=\"headerlink\" href=\"#escaping-percent-signs-and-underscores-in-like-statements\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The field lookups that equate to <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> SQL statements (<code class=\"docutils literal notranslate\"><span class=\"pre\">iexact</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">icontains</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">istartswith</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">endswith</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">iendswith</span></code>) will automatically escape the two special characters used in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> statements \u2013 the percent sign and the underscore. (In a <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code>\nstatement, the percent sign signifies a multiple-character wildcard and the\nunderscore signifies a single-character wildcard.)</p>\n<p>This means things should work intuitively, so the abstraction doesn\u2019t leak.\nFor example, to retrieve all the entries that contain a percent sign, use the\npercent sign as any other character:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;%&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Django takes care of the quoting for you; the resulting SQL will look something\nlike this:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">...</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">headline</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;%\\%%&#39;</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Same goes for underscores. Both percentage signs and underscores are handled\nfor you transparently.</p>\n</div>\n<div class=\"section\" id=\"s-caching-and-querysets\">\n<span id=\"s-id8\"></span><span id=\"caching-and-querysets\"></span><span id=\"id8\"></span><h3>Caching and <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s<a class=\"headerlink\" href=\"#caching-and-querysets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Each <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> contains a cache to minimize\ndatabase access. Understanding how it works will allow you to write the most\nefficient code.</p>\n<p>In a newly created <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>, the cache is\nempty. The first time a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> is evaluated\n\u2013 and, hence, a database query happens \u2013 Django saves the query results in\nthe <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>\u2019s cache and returns the results\nthat have been explicitly requested (e.g., the next element, if the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> is being iterated over). Subsequent\nevaluations of the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> reuse the cached\nresults.</p>\n<p>Keep this caching behavior in mind, because it may bite you if you don\u2019t use\nyour <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>s correctly. For example, the\nfollowing will create two <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>s, evaluate\nthem, and throw them away:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"k\">for</span> <span class=\"n\">e</span> <span class=\"ow\">in</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()])</span>\n</pre></div>\n</div>\n<p>That means the same database query will be executed twice, effectively doubling\nyour database load. Also, there\u2019s a possibility the two lists may not include\nthe same database records, because an <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> may have been added or deleted\nin the split second between the two requests.</p>\n<p>To avoid this problem, save the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> and\nreuse it:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">headline</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">queryset</span><span class=\"p\">])</span>  <span class=\"c1\"># Evaluate the query set.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">([</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">pub_date</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">queryset</span><span class=\"p\">])</span>  <span class=\"c1\"># Reuse the cache from the evaluation.</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-when-querysets-are-not-cached\">\n<span id=\"when-querysets-are-not-cached\"></span><h4>When <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are not cached<a class=\"headerlink\" href=\"#when-querysets-are-not-cached\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Querysets do not always cache their results.  When evaluating only <em>part</em> of\nthe queryset, the cache is checked, but if it is not populated then the items\nreturned by the subsequent query are not cached. Specifically, this means that\n<a class=\"reference internal\" href=\"#limiting-querysets\"><span class=\"std std-ref\">limiting the queryset</span></a> using an array slice or an\nindex will not populate the cache.</p>\n<p>For example, repeatedly getting a certain index in a queryset object will query\nthe database each time:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># Queries the database</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># Queries the database again</span>\n</pre></div>\n</div>\n<p>However, if the entire queryset has already been evaluated, the cache will be\nchecked instead:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">entry</span> <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">queryset</span><span class=\"p\">]</span>  <span class=\"c1\"># Queries the database</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># Uses cache</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">])</span>  <span class=\"c1\"># Uses cache</span>\n</pre></div>\n</div>\n<p>Here are some examples of other actions that will result in the entire queryset\nbeing evaluated and therefore populate the cache:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"p\">[</span><span class=\"n\">entry</span> <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">queryset</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">queryset</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Simply printing the queryset will not populate the cache. This is because\nthe call to <code class=\"docutils literal notranslate\"><span class=\"pre\">__repr__()</span></code> only returns a slice of the entire queryset.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-asynchronous-queries\">\n<span id=\"s-async-queries\"></span><span id=\"asynchronous-queries\"></span><span id=\"async-queries\"></span><h2>Asynchronous queries<a class=\"headerlink\" href=\"#asynchronous-queries\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you are writing asynchronous views or code, you cannot use the ORM for\nqueries in quite the way we have described above, as you cannot call <em>blocking</em>\nsynchronous code from asynchronous code - it will block up the event loop\n(or, more likely, Django will notice and raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">SynchronousOnlyOperation</span></code>\nto stop that from happening).</p>\n<p>Fortunately, you can do many queries using Django\u2019s asynchronous query APIs.\nEvery method that might block - such as <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> - has an\nasynchronous variant (<code class=\"docutils literal notranslate\"><span class=\"pre\">aget()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">adelete()</span></code>), and when you iterate over\nresults, you can use asynchronous iteration (<code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code>) instead.</p>\n<div class=\"section\" id=\"s-query-iteration\">\n<span id=\"query-iteration\"></span><h3>Query iteration<a class=\"headerlink\" href=\"#query-iteration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The default way of iterating over a query - with <code class=\"docutils literal notranslate\"><span class=\"pre\">for</span></code> - will result in a\nblocking database query behind the scenes as Django loads the results at\niteration time. To fix this, you can swap to <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">entry</span> <span class=\"ow\">in</span> <span class=\"n\">Authors</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;A&quot;</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Be aware that you also can\u2019t do other things that might iterate over the\nqueryset, such as wrapping <code class=\"docutils literal notranslate\"><span class=\"pre\">list()</span></code> around it to force its evaluation (you\ncan use <code class=\"docutils literal notranslate\"><span class=\"pre\">async</span> <span class=\"pre\">for</span></code> in a comprehension, if you want it).</p>\n<p>Because <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods like <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">exclude()</span></code> do not\nactually run the query - they set up the queryset to run when it\u2019s iterated\nover - you can use those freely in asynchronous code. For a guide to which\nmethods can keep being used like this, and which have asynchronous versions,\nread the next section.</p>\n</div>\n<div class=\"section\" id=\"s-queryset-and-manager-methods\">\n<span id=\"queryset-and-manager-methods\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and manager methods<a class=\"headerlink\" href=\"#queryset-and-manager-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some methods on managers and querysets - like <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">first()</span></code> - force\nexecution of the queryset and are blocking. Some, like <code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">exclude()</span></code>, don\u2019t force execution and so are safe to run from asynchronous\ncode. But how are you supposed to tell the difference?</p>\n<p>While you could poke around and see if there is an <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code>-prefixed version of\nthe method (for example, we have <code class=\"docutils literal notranslate\"><span class=\"pre\">aget()</span></code> but not <code class=\"docutils literal notranslate\"><span class=\"pre\">afilter()</span></code>), there is a\nmore logical way - look up what kind of method it is in the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/\"><span class=\"doc\">QuerySet reference</span></a>.</p>\n<p>In there, you\u2019ll find the methods on QuerySets grouped into two sections:</p>\n<ul class=\"simple\">\n<li><em>Methods that return new querysets</em>: These are the non-blocking ones,\nand don\u2019t have asynchronous versions. You\u2019re free to use these in any\nsituation, though read the notes on <code class=\"docutils literal notranslate\"><span class=\"pre\">defer()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">only()</span></code> before you use\nthem.</li>\n<li><em>Methods that do not return querysets</em>: These are the blocking ones, and\nhave asynchronous versions - the asynchronous name for each is noted in its\ndocumentation, though our standard pattern is to add an <code class=\"docutils literal notranslate\"><span class=\"pre\">a</span></code> prefix.</li>\n</ul>\n<p>Using this distinction, you can work out when you need to use asynchronous\nversions, and when you don\u2019t. For example, here\u2019s a valid asynchronous query:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">my_input</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">afirst</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">filter()</span></code> returns a queryset, and so it\u2019s fine to keep chaining it inside an\nasynchronous environment, whereas <code class=\"docutils literal notranslate\"><span class=\"pre\">first()</span></code> evaluates and returns a model\ninstance - thus, we change to <code class=\"docutils literal notranslate\"><span class=\"pre\">afirst()</span></code>, and use <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> at the front of\nthe whole expression in order to call it in an asynchronous-friendly way.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If you forget to put the <code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> part in, you may see errors like\n<em>\u201ccoroutine object has no attribute x\u201d</em> or <em>\u201c&lt;coroutine \u2026&gt;\u201d</em> strings in\nplace of your model instances. If you ever see these, you are missing an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">await</span></code> somewhere to turn that coroutine into a real value.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-transactions\">\n<span id=\"transactions\"></span><h3>Transactions<a class=\"headerlink\" href=\"#transactions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Transactions are <strong>not</strong> currently supported with asynchronous queries and\nupdates. You will find that trying to use one raises\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SynchronousOnlyOperation</span></code>.</p>\n<p>If you wish to use a transaction, we suggest you write your ORM code inside a\nseparate, synchronous function and then call that using <code class=\"docutils literal notranslate\"><span class=\"pre\">sync_to_async</span></code> - see\n<a class=\"reference internal\" href=\"../../async/\"><span class=\"doc\">Asynchronous support</span></a> for more.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-querying-jsonfield\">\n<span id=\"s-id9\"></span><span id=\"querying-jsonfield\"></span><span id=\"id9\"></span><h2>Querying <code class=\"docutils literal notranslate\"><span class=\"pre\">JSONField</span></code><a class=\"headerlink\" href=\"#querying-jsonfield\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Lookups implementation is different in <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.JSONField\" title=\"django.db.models.JSONField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a>,\nmainly due to the existence of key transformations. To demonstrate, we will use\nthe following example model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">JSONField</span><span class=\"p\">(</span><span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-storing-and-querying-for-none\">\n<span id=\"storing-and-querying-for-none\"></span><h3>Storing and querying for <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code><a class=\"headerlink\" href=\"#storing-and-querying-for-none\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>As with other fields, storing <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as the field\u2019s value will store it as\nSQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>. While not recommended, it is possible to store JSON scalar\n<code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> instead of SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> by using <a class=\"reference internal\" href=\"../../../ref/models/expressions/#django.db.models.Value\" title=\"django.db.models.Value\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Value(None,</span> <span class=\"pre\">JSONField())</span></code></a>.</p>\n<p>Whichever of the values is stored, when retrieved from the database, the Python\nrepresentation of the JSON scalar <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> is the same as SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>, i.e.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. Therefore, it can be hard to distinguish between them.</p>\n<p>This only applies to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as the top-level value of the field. If <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>\nis inside a <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#list\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">list</span></code></a> or <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a>, it will always be interpreted\nas JSON <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code>.</p>\n<p>When querying, <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> value will always be interpreted as JSON <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code>. To\nquery for SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>, use <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-isnull\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">isnull</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Max&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>  <span class=\"c1\"># SQL NULL.</span>\n<span class=\"go\">&lt;Dog: Max&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Archie&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">JSONField</span><span class=\"p\">()))</span>  <span class=\"c1\"># JSON null.</span>\n<span class=\"go\">&lt;Dog: Archie&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Archie&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">JSONField</span><span class=\"p\">()))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Archie&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Max&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__isnull</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Archie&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>Unless you are sure you wish to work with SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> values, consider setting\n<code class=\"docutils literal notranslate\"><span class=\"pre\">null=False</span></code> and providing a suitable default for empty values, such as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">default=dict</span></code>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Storing JSON scalar <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> does not violate <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.null\" title=\"django.db.models.Field.null\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">null=False</span></code></a>.</p>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for expressing JSON <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> using <code class=\"docutils literal notranslate\"><span class=\"pre\">Value(None,</span> <span class=\"pre\">JSONField())</span></code> was\nadded.</p>\n</div>\n<div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span>Passing <code class=\"docutils literal notranslate\"><span class=\"pre\">Value(&quot;null&quot;)</span></code> to express JSON <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> is deprecated.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-key-index-and-path-transforms\">\n<span id=\"s-std-fieldlookup-jsonfield.key\"></span><span id=\"s-std:fieldlookup-jsonfield.key\"></span><span id=\"key-index-and-path-transforms\"></span><span id=\"std-fieldlookup-jsonfield.key\"></span><span id=\"std:fieldlookup-jsonfield.key\"></span><h3>Key, index, and path transforms<a class=\"headerlink\" href=\"#key-index-and-path-transforms\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To query based on a given dictionary key, use that key as the lookup name:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>            <span class=\"s2\">&quot;other_pets&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>                <span class=\"p\">{</span>\n<span class=\"gp\">... </span>                    <span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Fishy&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>                <span class=\"p\">}</span>\n<span class=\"gp\">... </span>            <span class=\"p\">],</span>\n<span class=\"gp\">... </span>        <span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Dog: Rufus&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Meg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__breed</span><span class=\"o\">=</span><span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>Multiple keys can be chained together to form a path lookup:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__owner__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>If the key is an integer, it will be interpreted as an index transform in an\narray:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__owner__other_pets__0__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fishy&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>If the key you wish to query by clashes with the name of another lookup, use\nthe <a class=\"reference internal\" href=\"#std-fieldlookup-jsonfield.contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup instead.</p>\n<p>To query for missing keys, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">isnull</span></code> lookup:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Shep&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Shep&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__owner__isnull</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Shep&gt;]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The lookup examples given above implicitly use the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-exact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">exact</span></code></a> lookup.\nKey, index, and path transforms can also be chained with:\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-icontains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">icontains</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-endswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">endswith</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-iendswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iendswith</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-iexact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-regex\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">regex</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-iregex\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iregex</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-startswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">startswith</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-istartswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">istartswith</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-lt\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">lt</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-lte\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">lte</span></code></a>, <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-gt\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">gt</span></code></a>, and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-gte\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">gte</span></code></a>, as well as with <a class=\"reference internal\" href=\"#containment-and-key-lookups\"><span class=\"std std-ref\">Containment and key lookups</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-kt-expressions\">\n<span id=\"kt-expressions\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">KT()</span></code> expressions<a class=\"headerlink\" href=\"#kt-expressions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<span class=\"target\" id=\"module-django.db.models.fields.json\"></span><dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.json.KT\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">KT</span></code>(<em><span class=\"n\"><span class=\"pre\">lookup</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.json.KT\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Represents the text value of a key, index, or path transform of\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.JSONField\" title=\"django.db.models.JSONField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a>. You can use the double underscore\nnotation in <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup</span></code> to chain dictionary key and index transforms.</p>\n<p>For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.fields.json</span> <span class=\"kn\">import</span> <span class=\"n\">KT</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Shep&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;lhasa apso&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;Dog: Shep&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dogs</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">first_breed</span><span class=\"o\">=</span><span class=\"n\">KT</span><span class=\"p\">(</span><span class=\"s2\">&quot;data__breed__1&quot;</span><span class=\"p\">),</span> <span class=\"n\">owner_name</span><span class=\"o\">=</span><span class=\"n\">KT</span><span class=\"p\">(</span><span class=\"s2\">&quot;data__owner__name&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">first_breed__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;lhasa&quot;</span><span class=\"p\">,</span> <span class=\"n\">owner_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Shep&gt;]&gt;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Due to the way in which key-path queries work,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a> are not guaranteed to\nproduce exhaustive sets. If you want to include objects that do not have\nthe path, add the <code class=\"docutils literal notranslate\"><span class=\"pre\">isnull</span></code> lookup.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Since any string could be a key in a JSON object, any lookup other than\nthose listed below will be interpreted as a key lookup. No errors are\nraised. Be extra careful for typing mistakes, and always check your queries\nwork as you intend.</p>\n</div>\n<div class=\"admonition-mariadb-and-oracle-users admonition\">\n<p class=\"first admonition-title\">MariaDB and Oracle users</p>\n<p class=\"last\">Using <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.order_by\" title=\"django.db.models.query.QuerySet.order_by\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">order_by()</span></code></a> on key, index, or\npath transforms will sort the objects using the string representation of\nthe values. This is because MariaDB and Oracle Database do not provide a\nfunction that converts JSON values into their equivalent SQL values.</p>\n</div>\n<div class=\"admonition-oracle-users admonition\">\n<p class=\"first admonition-title\">Oracle users</p>\n<p class=\"last\">On Oracle Database, using <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> as the lookup value in an\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a> query will return objects\nthat do not have <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> as the value at the given path, including objects\nthat do not have the path. On other database backends, the query will\nreturn objects that have the path and the value is not <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code>.</p>\n</div>\n<div class=\"admonition-postgresql-users admonition\">\n<p class=\"first admonition-title\">PostgreSQL users</p>\n<p class=\"last\">On PostgreSQL, if only one key or index is used, the SQL operator <code class=\"docutils literal notranslate\"><span class=\"pre\">-&gt;</span></code> is\nused. If multiple operators are used then the <code class=\"docutils literal notranslate\"><span class=\"pre\">#&gt;</span></code> operator is used.</p>\n</div>\n<div class=\"admonition-sqlite-users admonition\">\n<p class=\"first admonition-title\">SQLite users</p>\n<p class=\"last\">On SQLite, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;true&quot;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;false&quot;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;null&quot;</span></code> string values will\nalways be interpreted as <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, and JSON <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code>\nrespectively.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-containment-and-key-lookups\">\n<span id=\"s-id10\"></span><span id=\"containment-and-key-lookups\"></span><span id=\"id10\"></span><h3>Containment and key lookups<a class=\"headerlink\" href=\"#containment-and-key-lookups\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-contains\">\n<span id=\"s-std-fieldlookup-jsonfield.contains\"></span><span id=\"s-std:fieldlookup-jsonfield.contains\"></span><span id=\"contains\"></span><span id=\"std-fieldlookup-jsonfield.contains\"></span><span id=\"std:fieldlookup-jsonfield.contains\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code><a class=\"headerlink\" href=\"#contains\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <a class=\"reference internal\" href=\"../../../ref/models/querysets/#std-fieldlookup-contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup is overridden on <code class=\"docutils literal notranslate\"><span class=\"pre\">JSONField</span></code>. The returned\nobjects are those where the given <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> of key-value pairs are all\ncontained in the top-level of the field. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Rufus&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Meg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n<span class=\"go\">&lt;Dog: Fred&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contains</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contains</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition-oracle-and-sqlite admonition\">\n<p class=\"first admonition-title\">Oracle and SQLite</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code> is not supported on Oracle and SQLite.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-contained-by\">\n<span id=\"s-std-fieldlookup-jsonfield.contained_by\"></span><span id=\"s-std:fieldlookup-jsonfield.contained_by\"></span><span id=\"contained-by\"></span><span id=\"std-fieldlookup-jsonfield.contained_by\"></span><span id=\"std:fieldlookup-jsonfield.contained_by\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code><a class=\"headerlink\" href=\"#contained-by\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>This is the inverse of the <a class=\"reference internal\" href=\"#std-fieldlookup-jsonfield.contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup - the\nobjects returned will be those where the key-value pairs on the object are a\nsubset of those in the value passed. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Rufus&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Meg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n<span class=\"go\">&lt;Dog: Fred&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contained_by</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;, &lt;Dog: Fred&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contained_by</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Fred&gt;]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition-oracle-and-sqlite admonition\">\n<p class=\"first admonition-title\">Oracle and SQLite</p>\n<p class=\"last\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code> is not supported on Oracle and SQLite.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-has-key\">\n<span id=\"s-std-fieldlookup-jsonfield.has_key\"></span><span id=\"s-std:fieldlookup-jsonfield.has_key\"></span><span id=\"has-key\"></span><span id=\"std-fieldlookup-jsonfield.has_key\"></span><span id=\"std:fieldlookup-jsonfield.has_key\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">has_key</span></code><a class=\"headerlink\" href=\"#has-key\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where the given key is in the top-level of the data. For\nexample:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Rufus&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Meg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__has_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-has-keys\">\n<span id=\"s-std-fieldlookup-jsonfield.has_any_keys\"></span><span id=\"s-std:fieldlookup-jsonfield.has_any_keys\"></span><span id=\"has-keys\"></span><span id=\"std-fieldlookup-jsonfield.has_any_keys\"></span><span id=\"std:fieldlookup-jsonfield.has_any_keys\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">has_keys</span></code><a class=\"headerlink\" href=\"#has-keys\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where all of the given keys are in the top-level of the data.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Rufus&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Meg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__has_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-has-any-keys\">\n<span id=\"s-std-fieldlookup-jsonfield.has_keys\"></span><span id=\"s-std:fieldlookup-jsonfield.has_keys\"></span><span id=\"has-any-keys\"></span><span id=\"std-fieldlookup-jsonfield.has_keys\"></span><span id=\"std:fieldlookup-jsonfield.has_keys\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">has_any_keys</span></code><a class=\"headerlink\" href=\"#has-any-keys\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where any of the given keys are in the top-level of the data.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Rufus&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;Dog: Meg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__has_any_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-complex-lookups-with-q-objects\">\n<span id=\"s-complex-lookups-with-q\"></span><span id=\"complex-lookups-with-q-objects\"></span><span id=\"complex-lookups-with-q\"></span><h2>Complex lookups with <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects<a class=\"headerlink\" href=\"#complex-lookups-with-q-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Keyword argument queries \u2013 in <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>,\netc. \u2013 are \u201cAND\u201ded together. If you need to execute more complex queries (for\nexample, queries with <code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code> statements), you can use <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">objects</span></code></a>.</p>\n<p>A <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">object</span></code></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.Q</span></code>) is an object\nused to encapsulate a collection of keyword arguments. These keyword arguments\nare specified as in \u201cField lookups\u201d above.</p>\n<p>For example, this <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> object encapsulates a single <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> query:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Q</span>\n\n<span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects can be combined using the <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">^</span></code> operators. When\nan operator is used on two <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects, it yields a new <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> object.</p>\n<p>For example, this statement yields a single <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> object that represents the\n\u201cOR\u201d of two <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;question__startswith&quot;</span></code> queries:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Who&quot;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This is equivalent to the following SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">question</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;Who%&#39;</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"n\">question</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;What%&#39;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>You can compose statements of arbitrary complexity by combining <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">|</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">^</span></code> operators and use parenthetical grouping.\nAlso, <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects can be negated using the <code class=\"docutils literal notranslate\"><span class=\"pre\">~</span></code> operator, allowing for\ncombined lookups that combine both a normal query and a negated (<code class=\"docutils literal notranslate\"><span class=\"pre\">NOT</span></code>)\nquery:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Who&quot;</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"o\">~</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Each lookup function that takes keyword-arguments\n(e.g. <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.exclude\" title=\"django.db.models.query.QuerySet.exclude\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">exclude()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a>) can also be passed one or more\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects as positional (not-named) arguments. If you provide multiple\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> object arguments to a lookup function, the arguments will be \u201cAND\u201ded\ntogether. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n    <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Who&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026 roughly translates into the SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"o\">*</span><span class=\"w\"> </span><span class=\"k\">from</span><span class=\"w\"> </span><span class=\"n\">polls</span><span class=\"w\"> </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">question</span><span class=\"w\"> </span><span class=\"k\">LIKE</span><span class=\"w\"> </span><span class=\"s1\">&#39;Who%&#39;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-05-02&#39;</span><span class=\"w\"> </span><span class=\"k\">OR</span><span class=\"w\"> </span><span class=\"n\">pub_date</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s1\">&#39;2005-05-06&#39;</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Lookup functions can mix the use of <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects and keyword arguments. All\narguments provided to a lookup function (be they keyword arguments or <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code>\nobjects) are \u201cAND\u201ded together. However, if a <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> object is provided, it must\nprecede the definition of any keyword arguments. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n    <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)),</span>\n    <span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Who&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026 would be a valid query, equivalent to the previous example; but:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># INVALID QUERY</span>\n<span class=\"n\">Poll</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span>\n    <span class=\"n\">question__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Who&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">)),</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026 would not be valid.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">The <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/tests/or_lookups/tests.py\">OR lookups examples</a> in Django\u2019s\nunit tests show some possible uses of <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-comparing-objects\">\n<span id=\"comparing-objects\"></span><h2>Comparing objects<a class=\"headerlink\" href=\"#comparing-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To compare two model instances, use the standard Python comparison operator,\nthe double equals sign: <code class=\"docutils literal notranslate\"><span class=\"pre\">==</span></code>. Behind the scenes, that compares the primary\nkey values of two models.</p>\n<p>Using the <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> example above, the following two statements are equivalent:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">some_entry</span> <span class=\"o\">==</span> <span class=\"n\">other_entry</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">some_entry</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">==</span> <span class=\"n\">other_entry</span><span class=\"o\">.</span><span class=\"n\">id</span>\n</pre></div>\n</div>\n<p>If a model\u2019s primary key isn\u2019t called <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code>, no problem. Comparisons will\nalways use the primary key, whatever it\u2019s called. For example, if a model\u2019s\nprimary key field is called <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, these two statements are equivalent:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">some_obj</span> <span class=\"o\">==</span> <span class=\"n\">other_obj</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">some_obj</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">other_obj</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-deleting-objects\">\n<span id=\"s-topics-db-queries-delete\"></span><span id=\"deleting-objects\"></span><span id=\"topics-db-queries-delete\"></span><h2>Deleting objects<a class=\"headerlink\" href=\"#deleting-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The delete method, conveniently, is named\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a>. This method immediately deletes the\nobject and returns the number of objects deleted and a dictionary with\nthe number of deletions per object type. Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"go\">(1, {&#39;blog.Entry&#39;: 1})</span>\n</pre></div>\n</div>\n<p>You can also delete objects in bulk. Every\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> has a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method, which deletes all\nmembers of that <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>.</p>\n<p>For example, this deletes all <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> objects with a <code class=\"docutils literal notranslate\"><span class=\"pre\">pub_date</span></code> year of\n2005:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2005</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n<span class=\"go\">(5, {&#39;webapp.Entry&#39;: 5})</span>\n</pre></div>\n</div>\n<p>Keep in mind that this will, whenever possible, be executed purely in SQL, and\nso the <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> methods of individual object instances will not necessarily\nbe called during the process. If you\u2019ve provided a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> method\non a model class and want to ensure that it is called, you will need to\n\u201cmanually\u201d delete instances of that model (e.g., by iterating over a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> and calling <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> on each\nobject individually) rather than using the bulk\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method of a\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>.</p>\n<p>When Django deletes an object, by default it emulates the behavior of the SQL\nconstraint <code class=\"docutils literal notranslate\"><span class=\"pre\">ON</span> <span class=\"pre\">DELETE</span> <span class=\"pre\">CASCADE</span></code> \u2013 in other words, any objects which had\nforeign keys pointing at the object to be deleted will be deleted along with\nit. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># This will delete the Blog and all of its Entry objects.</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This cascade behavior is customizable via the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.on_delete\" title=\"django.db.models.ForeignKey.on_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">on_delete</span></code></a> argument to the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>.</p>\n<p>Note that <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> is the only\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> method that is not exposed on a\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> itself. This is a safety mechanism to\nprevent you from accidentally requesting <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry.objects.delete()</span></code>, and\ndeleting <em>all</em> the entries. If you <em>do</em> want to delete all the objects, then\nyou have to explicitly request a complete query set:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-copying-model-instances\">\n<span id=\"s-topics-db-queries-copy\"></span><span id=\"copying-model-instances\"></span><span id=\"topics-db-queries-copy\"></span><h2>Copying model instances<a class=\"headerlink\" href=\"#copying-model-instances\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Although there is no built-in method for copying model instances, it is\npossible to easily create new instance with all fields\u2019 values copied. In the\nsimplest case, you can set <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> and\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model._state\" title=\"django.db.models.Model._state\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">_state.adding</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. Using our\nblog example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;My blog&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Blogging is easy&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># blog.pk == 1</span>\n\n<span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">blog</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># blog.pk == 2</span>\n</pre></div>\n</div>\n<p>Things get more complicated if you use inheritance. Consider a subclass of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ThemeBlog</span><span class=\"p\">(</span><span class=\"n\">Blog</span><span class=\"p\">):</span>\n    <span class=\"n\">theme</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">django_blog</span> <span class=\"o\">=</span> <span class=\"n\">ThemeBlog</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django&quot;</span><span class=\"p\">,</span> <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django is easy&quot;</span><span class=\"p\">,</span> <span class=\"n\">theme</span><span class=\"o\">=</span><span class=\"s2\">&quot;python&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">django_blog</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># django_blog.pk == 3</span>\n</pre></div>\n</div>\n<p>Due to how inheritance works, you have to set both <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">_state.adding</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">django_blog</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">django_blog</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">django_blog</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">django_blog</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># django_blog.pk == 4</span>\n</pre></div>\n</div>\n<p>This process doesn\u2019t copy relations that aren\u2019t part of the model\u2019s database\ntable. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> has a <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code>. After\nduplicating an entry, you must set the many-to-many relations for the new\nentry:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># some previous entry</span>\n<span class=\"n\">old_authors</span> <span class=\"o\">=</span> <span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"n\">entry</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">old_authors</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>For a <code class=\"docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code>, you must duplicate the related object and assign it\nto the new object\u2019s field to avoid violating the one-to-one unique constraint.\nFor example, assuming <code class=\"docutils literal notranslate\"><span class=\"pre\">entry</span></code> is already duplicated as above:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">detail</span> <span class=\"o\">=</span> <span class=\"n\">EntryDetail</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">detail</span><span class=\"o\">.</span><span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">detail</span><span class=\"o\">.</span><span class=\"n\">_state</span><span class=\"o\">.</span><span class=\"n\">adding</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">detail</span><span class=\"o\">.</span><span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">entry</span>\n<span class=\"n\">detail</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-updating-multiple-objects-at-once\">\n<span id=\"s-topics-db-queries-update\"></span><span id=\"updating-multiple-objects-at-once\"></span><span id=\"topics-db-queries-update\"></span><h2>Updating multiple objects at once<a class=\"headerlink\" href=\"#updating-multiple-objects-at-once\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Sometimes you want to set a field to a particular value for all the objects in\na <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>. You can do this with the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.update\" title=\"django.db.models.query.QuerySet.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">update()</span></code></a> method. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Update all the headlines with pub_date in 2007.</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">pub_date__year</span><span class=\"o\">=</span><span class=\"mi\">2007</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Everything is the same&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can only set non-relation fields and <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>\nfields using this method. To update a non-relation field, provide the new value\nas a constant. To update <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> fields, set the\nnew value to be the new model instance you want to point to. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Change every Entry so that it belongs to this Blog.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> method is applied instantly and returns the number of rows\nmatched by the query (which may not be equal to the number of rows updated if\nsome rows already have the new value). The only restriction on the\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> being updated is that it can only\naccess one database table: the model\u2019s main table. You can filter based on\nrelated fields, but you can only update columns in the model\u2019s main\ntable. Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"go\"># Update all the headlines belonging to this Blog.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Everything is the same&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Be aware that the <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> method is converted directly to an SQL\nstatement. It is a bulk operation for direct updates. It doesn\u2019t run any\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> methods on your models, or emit the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">post_save</span></code> signals (which are a consequence of calling\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>), or honor the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.DateField.auto_now\" title=\"django.db.models.DateField.auto_now\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">auto_now</span></code></a> field option.\nIf you want to save every item in a <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a>\nand make sure that the <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method is called on\neach instance, you don\u2019t need any special function to handle that. Loop over\nthem and call <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">my_queryset</span><span class=\"p\">:</span>\n    <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Calls to update can also use <a class=\"reference internal\" href=\"../../../ref/models/expressions/#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span> <span class=\"pre\">expressions</span></code></a> to\nupdate one field based on the value of another field in the model. This is\nespecially useful for incrementing counters based upon their current value. For\nexample, to increment the pingback count for every entry in the blog:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">number_of_pingbacks</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;number_of_pingbacks&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>However, unlike <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects in filter and exclude clauses, you can\u2019t\nintroduce joins when you use <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects in an update \u2013 you can only\nreference fields local to the model being updated. If you attempt to introduce\na join with an <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object, a <code class=\"docutils literal notranslate\"><span class=\"pre\">FieldError</span></code> will be raised:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># This will raise a FieldError</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;blog__name&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-related-objects\">\n<span id=\"s-topics-db-queries-related\"></span><span id=\"related-objects\"></span><span id=\"topics-db-queries-related\"></span><h2>Related objects<a class=\"headerlink\" href=\"#related-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you define a relationship in a model (i.e., a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a>, or\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>), instances of that model will have\na convenient API to access the related object(s).</p>\n<p>Using the models at the top of this page, for example, an <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> object <code class=\"docutils literal notranslate\"><span class=\"pre\">e</span></code>\ncan get its associated <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> object by accessing the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> attribute:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">e.blog</span></code>.</p>\n<p>(Behind the scenes, this functionality is implemented by Python\n<a class=\"reference external\" href=\"https://docs.python.org/3/howto/descriptor.html\" title=\"(in Python v3.11)\"><span class=\"xref std std-doc\">descriptors</span></a>. This shouldn\u2019t really matter to\nyou, but we point it out here for the curious.)</p>\n<p>Django also creates API accessors for the \u201cother\u201d side of the relationship \u2013\nthe link from the related model to the model that defines the relationship.\nFor example, a <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code> object <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> has access to a list of all related\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> objects via the <code class=\"docutils literal notranslate\"><span class=\"pre\">entry_set</span></code> attribute: <code class=\"docutils literal notranslate\"><span class=\"pre\">b.entry_set.all()</span></code>.</p>\n<p>All examples in this section use the sample <code class=\"docutils literal notranslate\"><span class=\"pre\">Blog</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>\nmodels defined at the top of this page.</p>\n<div class=\"section\" id=\"s-one-to-many-relationships\">\n<span id=\"one-to-many-relationships\"></span><h3>One-to-many relationships<a class=\"headerlink\" href=\"#one-to-many-relationships\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-forward\">\n<span id=\"forward\"></span><h4>Forward<a class=\"headerlink\" href=\"#forward\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If a model has a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>, instances of that model\nwill have access to the related (foreign) object via an attribute of the model.</p>\n<p>Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span>  <span class=\"c1\"># Returns the related Blog object.</span>\n</pre></div>\n</div>\n<p>You can get and set via a foreign-key attribute. As you may expect, changes to\nthe foreign key aren\u2019t saved to the database until you call\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>. Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">some_blog</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> field has <code class=\"docutils literal notranslate\"><span class=\"pre\">null=True</span></code> set (i.e.,\nit allows <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> values), you can assign <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to remove the relation.\nExample:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>  <span class=\"c1\"># &quot;UPDATE blog_entry SET blog_id = NULL ...;&quot;</span>\n</pre></div>\n</div>\n<p>Forward access to one-to-many relationships is cached the first time the\nrelated object is accessed. Subsequent accesses to the foreign key on the same\nobject instance are cached. Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span><span class=\"p\">)</span>  <span class=\"c1\"># Hits the database to retrieve the associated Blog.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span><span class=\"p\">)</span>  <span class=\"c1\"># Doesn&#39;t hit the database; uses cached version.</span>\n</pre></div>\n</div>\n<p>Note that the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.select_related\" title=\"django.db.models.query.QuerySet.select_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">select_related()</span></code></a>\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> method recursively prepopulates the\ncache of all one-to-many relationships ahead of time. Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">select_related</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span><span class=\"p\">)</span>  <span class=\"c1\"># Doesn&#39;t hit the database; uses cached version.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">blog</span><span class=\"p\">)</span>  <span class=\"c1\"># Doesn&#39;t hit the database; uses cached version.</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-following-relationships-backward\">\n<span id=\"s-backwards-related-objects\"></span><span id=\"following-relationships-backward\"></span><span id=\"backwards-related-objects\"></span><h4>Following relationships \u201cbackward\u201d<a class=\"headerlink\" href=\"#following-relationships-backward\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If a model has a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>, instances of the\nforeign-key model will have access to a <a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> that\nreturns all instances of the first model. By default, this\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> is named <code class=\"docutils literal notranslate\"><span class=\"pre\">FOO_set</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">FOO</span></code> is the\nsource model name, lowercased. This <a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code>, which can be filtered and manipulated as described in the\n\u201cRetrieving objects\u201d section above.</p>\n<p>Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns all Entry objects related to Blog.</span>\n\n<span class=\"go\"># b.entry_set is a Manager that returns QuerySets.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>You can override the <code class=\"docutils literal notranslate\"><span class=\"pre\">FOO_set</span></code> name by setting the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> parameter in the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> definition. For example, if the <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>\nmodel was altered to <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span> <span class=\"pre\">=</span> <span class=\"pre\">ForeignKey(Blog,</span> <span class=\"pre\">on_delete=models.CASCADE,</span>\n<span class=\"pre\">related_name='entries')</span></code>, the above example code would look like this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entries</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns all Entry objects related to Blog.</span>\n\n<span class=\"go\"># b.entries is a Manager that returns QuerySets.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entries</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">headline__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entries</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-a-custom-reverse-manager\">\n<span id=\"s-using-custom-reverse-manager\"></span><span id=\"using-a-custom-reverse-manager\"></span><span id=\"using-custom-reverse-manager\"></span><h4>Using a custom reverse manager<a class=\"headerlink\" href=\"#using-a-custom-reverse-manager\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>By default the <a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager\" title=\"django.db.models.fields.related.RelatedManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RelatedManager</span></code></a> used\nfor reverse relations is a subclass of the <a class=\"reference internal\" href=\"../managers/#manager-names\"><span class=\"std std-ref\">default manager</span></a>\nfor that model. If you would like to specify a different manager for a given\nquery you can use the following syntax:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>  <span class=\"c1\"># Default Manager</span>\n    <span class=\"n\">entries</span> <span class=\"o\">=</span> <span class=\"n\">EntryManager</span><span class=\"p\">()</span>  <span class=\"c1\"># Custom Manager</span>\n\n\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">EntryManager</span></code> performed default filtering in its <code class=\"docutils literal notranslate\"><span class=\"pre\">get_queryset()</span></code>\nmethod, that filtering would apply to the <code class=\"docutils literal notranslate\"><span class=\"pre\">all()</span></code> call.</p>\n<p>Specifying a custom reverse manager also enables you to call its custom\nmethods:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"p\">(</span><span class=\"n\">manager</span><span class=\"o\">=</span><span class=\"s2\">&quot;entries&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">is_published</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"admonition-interaction-with-prefetching admonition\">\n<p class=\"first admonition-title\">Interaction with prefetching</p>\n<p>When calling <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a> with\na reverse relation, the default manager will be used. If you want to\nprefetch related objects using a custom reverse manager, use\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.Prefetch\" title=\"django.db.models.Prefetch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Prefetch()</span></code></a>. For example:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Prefetch</span>\n\n<span class=\"n\">prefetch_manager</span> <span class=\"o\">=</span> <span class=\"n\">Prefetch</span><span class=\"p\">(</span><span class=\"s2\">&quot;entry_set&quot;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"o\">=</span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">entries</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">())</span>\n<span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">prefetch_related</span><span class=\"p\">(</span><span class=\"n\">prefetch_manager</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-additional-methods-to-handle-related-objects\">\n<span id=\"additional-methods-to-handle-related-objects\"></span><h4>Additional methods to handle related objects<a class=\"headerlink\" href=\"#additional-methods-to-handle-related-objects\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In addition to the <a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> methods defined in\n\u201cRetrieving objects\u201d above, the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> has additional methods used to handle the\nset of related objects. A synopsis of each is below, and complete details can\nbe found in the <a class=\"reference internal\" href=\"../../../ref/models/relations/\"><span class=\"doc\">related objects reference</span></a>.</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">add(obj1,</span> <span class=\"pre\">obj2,</span> <span class=\"pre\">...)</span></code></dt><dd>Adds the specified model objects to the related object set.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">create(**kwargs)</span></code></dt><dd>Creates a new object, saves it and puts it in the related object set.\nReturns the newly created object.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">remove(obj1,</span> <span class=\"pre\">obj2,</span> <span class=\"pre\">...)</span></code></dt><dd>Removes the specified model objects from the related object set.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code></dt><dd>Removes all objects from the related object set.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">set(objs)</span></code></dt><dd>Replace the set of related objects.</dd>\n</dl>\n<p>To assign the members of a related set, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> method with an\niterable of object instances. For example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">e1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">e2</span></code> are <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code>\ninstances:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">([</span><span class=\"n\">e1</span><span class=\"p\">,</span> <span class=\"n\">e2</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> method is available, any preexisting objects will be\nremoved from the <code class=\"docutils literal notranslate\"><span class=\"pre\">entry_set</span></code> before all objects in the iterable (in this\ncase, a list) are added to the set. If the <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> method is <em>not</em>\navailable, all objects in the iterable will be added without removing any\nexisting elements.</p>\n<p>Each \u201creverse\u201d operation described in this section has an immediate effect on\nthe database. Every addition, creation and deletion is immediately and\nautomatically saved to the database.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-many-to-many-relationships\">\n<span id=\"s-m2m-reverse-relationships\"></span><span id=\"many-to-many-relationships\"></span><span id=\"m2m-reverse-relationships\"></span><h3>Many-to-many relationships<a class=\"headerlink\" href=\"#many-to-many-relationships\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Both ends of a many-to-many relationship get automatic API access to the other\nend. The API works similar to a \u201cbackward\u201d one-to-many relationship, above.</p>\n<p>One difference is in the attribute naming: The model that defines the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> uses the attribute name of that\nfield itself, whereas the \u201creverse\u201d model uses the lowercased model name of the\noriginal model, plus <code class=\"docutils literal notranslate\"><span class=\"pre\">'_set'</span></code> (just like reverse one-to-many relationships).</p>\n<p>An example makes this easier to understand:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns all Author objects for this Entry.</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">authors</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># Returns all Entry objects for this Author.</span>\n</pre></div>\n</div>\n<p>Like <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> can specify\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField.related_name\" title=\"django.db.models.ManyToManyField.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a>. In the above example,\nif the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> in <code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> had specified\n<code class=\"docutils literal notranslate\"><span class=\"pre\">related_name='entries'</span></code>, then each <code class=\"docutils literal notranslate\"><span class=\"pre\">Author</span></code> instance would have an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">entries</span></code> attribute instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">entry_set</span></code>.</p>\n<p>Another difference from one-to-many relationships is that in addition to model\ninstances,  the <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> methods on many-to-many\nrelationships accept primary key values. For example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">e1</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">e2</span></code> are\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> instances, then these <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> calls work identically:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Author</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">([</span><span class=\"n\">e1</span><span class=\"p\">,</span> <span class=\"n\">e2</span><span class=\"p\">])</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">([</span><span class=\"n\">e1</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">,</span> <span class=\"n\">e2</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-one-to-one-relationships\">\n<span id=\"one-to-one-relationships\"></span><h3>One-to-one relationships<a class=\"headerlink\" href=\"#one-to-one-relationships\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>One-to-one relationships are very similar to many-to-one relationships. If you\ndefine a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> on your model, instances of\nthat model will have access to the related object via an attribute of the\nmodel.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">EntryDetail</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">entry</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"n\">Entry</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">details</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">ed</span> <span class=\"o\">=</span> <span class=\"n\">EntryDetail</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">ed</span><span class=\"o\">.</span><span class=\"n\">entry</span>  <span class=\"c1\"># Returns the related Entry object.</span>\n</pre></div>\n</div>\n<p>The difference comes in \u201creverse\u201d queries. The related model in a one-to-one\nrelationship also has access to a <a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> object, but\nthat <a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> represents a single object, rather than\na collection of objects:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">entrydetail</span>  <span class=\"c1\"># returns the related EntryDetail object</span>\n</pre></div>\n</div>\n<p>If no object has been assigned to this relationship, Django will raise\na <code class=\"docutils literal notranslate\"><span class=\"pre\">DoesNotExist</span></code> exception.</p>\n<p>Instances can be assigned to the reverse relationship in the same way as\nyou would assign the forward relationship:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">entrydetail</span> <span class=\"o\">=</span> <span class=\"n\">ed</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-how-are-the-backward-relationships-possible\">\n<span id=\"how-are-the-backward-relationships-possible\"></span><h3>How are the backward relationships possible?<a class=\"headerlink\" href=\"#how-are-the-backward-relationships-possible\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Other object-relational mappers require you to define relationships on both\nsides. The Django developers believe this is a violation of the DRY (Don\u2019t\nRepeat Yourself) principle, so Django only requires you to define the\nrelationship on one end.</p>\n<p>But how is this possible, given that a model class doesn\u2019t know which other\nmodel classes are related to it until those other model classes are loaded?</p>\n<p>The answer lies in the <a class=\"reference internal\" href=\"../../../ref/applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">app</span> <span class=\"pre\">registry</span></code></a>. When Django\nstarts, it imports each application listed in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, and\nthen the <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> module inside each application. Whenever a new model class\nis created, Django adds backward-relationships to any related models. If the\nrelated models haven\u2019t been imported yet, Django keeps tracks of the\nrelationships and adds them when the related models eventually are imported.</p>\n<p>For this reason, it\u2019s particularly important that all the models you\u2019re using\nbe defined in applications listed in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>. Otherwise,\nbackwards relations may not work properly.</p>\n</div>\n<div class=\"section\" id=\"s-queries-over-related-objects\">\n<span id=\"queries-over-related-objects\"></span><h3>Queries over related objects<a class=\"headerlink\" href=\"#queries-over-related-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Queries involving related objects follow the same rules as queries involving\nnormal value fields. When specifying the value for a query to match, you may\nuse either an object instance itself, or the primary key value for the object.</p>\n<p>For example, if you have a Blog object <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">id=5</span></code>, the following\nthree queries would be identical:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">)</span>  <span class=\"c1\"># Query using object instance</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>  <span class=\"c1\"># Query using id from instance</span>\n<span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Query using id directly</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-falling-back-to-raw-sql\">\n<span id=\"falling-back-to-raw-sql\"></span><h2>Falling back to raw SQL<a class=\"headerlink\" href=\"#falling-back-to-raw-sql\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you find yourself needing to write an SQL query that is too complex for\nDjango\u2019s database-mapper to handle, you can fall back on writing SQL by hand.\nDjango has a couple of options for writing raw SQL queries; see\n<a class=\"reference internal\" href=\"../sql/\"><span class=\"doc\">Performing raw SQL queries</span></a>.</p>\n<p>Finally, it\u2019s important to note that the Django database layer is merely an\ninterface to your database. You can access your database via other tools,\nprogramming languages or database frameworks; there\u2019s nothing Django-specific\nabout your database.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/aggregation", "Aggregation", "N", "next"], ["topics/db/models", "Models", "P", "previous"]], "sourcename": "topics/db/queries.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Making queries</a><ul>\n<li><a class=\"reference internal\" href=\"#creating-objects\">Creating objects</a></li>\n<li><a class=\"reference internal\" href=\"#saving-changes-to-objects\">Saving changes to objects</a><ul>\n<li><a class=\"reference internal\" href=\"#saving-foreignkey-and-manytomanyfield-fields\">Saving <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code> fields</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#retrieving-objects\">Retrieving objects</a><ul>\n<li><a class=\"reference internal\" href=\"#retrieving-all-objects\">Retrieving all objects</a></li>\n<li><a class=\"reference internal\" href=\"#retrieving-specific-objects-with-filters\">Retrieving specific objects with filters</a><ul>\n<li><a class=\"reference internal\" href=\"#chaining-filters\">Chaining filters</a></li>\n<li><a class=\"reference internal\" href=\"#filtered-querysets-are-unique\">Filtered <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are unique</a></li>\n<li><a class=\"reference internal\" href=\"#querysets-are-lazy\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are lazy</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#retrieving-a-single-object-with-get\">Retrieving a single object with <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#other-queryset-methods\">Other <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> methods</a></li>\n<li><a class=\"reference internal\" href=\"#limiting-querysets\">Limiting <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a></li>\n<li><a class=\"reference internal\" href=\"#field-lookups\">Field lookups</a></li>\n<li><a class=\"reference internal\" href=\"#lookups-that-span-relationships\">Lookups that span relationships</a><ul>\n<li><a class=\"reference internal\" href=\"#spanning-multi-valued-relationships\">Spanning multi-valued relationships</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#filters-can-reference-fields-on-the-model\">Filters can reference fields on the model</a></li>\n<li><a class=\"reference internal\" href=\"#expressions-can-reference-transforms\">Expressions can reference transforms</a></li>\n<li><a class=\"reference internal\" href=\"#the-pk-lookup-shortcut\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">pk</span></code> lookup shortcut</a></li>\n<li><a class=\"reference internal\" href=\"#escaping-percent-signs-and-underscores-in-like-statements\">Escaping percent signs and underscores in <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> statements</a></li>\n<li><a class=\"reference internal\" href=\"#caching-and-querysets\">Caching and <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s</a><ul>\n<li><a class=\"reference internal\" href=\"#when-querysets-are-not-cached\">When <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s are not cached</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#asynchronous-queries\">Asynchronous queries</a><ul>\n<li><a class=\"reference internal\" href=\"#query-iteration\">Query iteration</a></li>\n<li><a class=\"reference internal\" href=\"#queryset-and-manager-methods\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> and manager methods</a></li>\n<li><a class=\"reference internal\" href=\"#transactions\">Transactions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#querying-jsonfield\">Querying <code class=\"docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#storing-and-querying-for-none\">Storing and querying for <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#key-index-and-path-transforms\">Key, index, and path transforms</a><ul>\n<li><a class=\"reference internal\" href=\"#kt-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">KT()</span></code> expressions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#containment-and-key-lookups\">Containment and key lookups</a><ul>\n<li><a class=\"reference internal\" href=\"#contains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#contained-by\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#has-key\"><code class=\"docutils literal notranslate\"><span class=\"pre\">has_key</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#has-keys\"><code class=\"docutils literal notranslate\"><span class=\"pre\">has_keys</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#has-any-keys\"><code class=\"docutils literal notranslate\"><span class=\"pre\">has_any_keys</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#complex-lookups-with-q-objects\">Complex lookups with <code class=\"docutils literal notranslate\"><span class=\"pre\">Q</span></code> objects</a></li>\n<li><a class=\"reference internal\" href=\"#comparing-objects\">Comparing objects</a></li>\n<li><a class=\"reference internal\" href=\"#deleting-objects\">Deleting objects</a></li>\n<li><a class=\"reference internal\" href=\"#copying-model-instances\">Copying model instances</a></li>\n<li><a class=\"reference internal\" href=\"#updating-multiple-objects-at-once\">Updating multiple objects at once</a></li>\n<li><a class=\"reference internal\" href=\"#related-objects\">Related objects</a><ul>\n<li><a class=\"reference internal\" href=\"#one-to-many-relationships\">One-to-many relationships</a><ul>\n<li><a class=\"reference internal\" href=\"#forward\">Forward</a></li>\n<li><a class=\"reference internal\" href=\"#following-relationships-backward\">Following relationships \u201cbackward\u201d</a></li>\n<li><a class=\"reference internal\" href=\"#using-a-custom-reverse-manager\">Using a custom reverse manager</a></li>\n<li><a class=\"reference internal\" href=\"#additional-methods-to-handle-related-objects\">Additional methods to handle related objects</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#many-to-many-relationships\">Many-to-many relationships</a></li>\n<li><a class=\"reference internal\" href=\"#one-to-one-relationships\">One-to-one relationships</a></li>\n<li><a class=\"reference internal\" href=\"#how-are-the-backward-relationships-possible\">How are the backward relationships possible?</a></li>\n<li><a class=\"reference internal\" href=\"#queries-over-related-objects\">Queries over related objects</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#falling-back-to-raw-sql\">Falling back to raw SQL</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/queries", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}