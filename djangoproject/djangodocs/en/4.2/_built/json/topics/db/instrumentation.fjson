{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../optimization/", "title": "Database access optimization"}, "next": {"link": "../fixtures/", "title": "Fixtures"}, "title": "Database instrumentation", "meta": {}, "body": "<div class=\"section\" id=\"s-database-instrumentation\">\n<span id=\"database-instrumentation\"></span><h1>Database instrumentation<a class=\"headerlink\" href=\"#database-instrumentation\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>To help you understand and control the queries issued by your code, Django\nprovides a hook for installing wrapper functions around the execution of\ndatabase queries. For example, wrappers can count queries, measure query\nduration, log queries, or even prevent query execution (e.g. to make sure that\nno queries are issued while rendering a template with prefetched data).</p>\n<p>The wrappers are modeled after <a class=\"reference internal\" href=\"../../http/middleware/\"><span class=\"doc\">middleware</span></a> \u2013\nthey are callables which take another callable as one of their arguments. They\ncall that callable to invoke the (possibly wrapped) database query, and they\ncan do what they want around that call. They are, however, created and\ninstalled by user code, and so don\u2019t need a separate factory like middleware do.</p>\n<p>Installing a wrapper is done in a context manager \u2013 so the wrappers are\ntemporary and specific to some flow in your code.</p>\n<p>As mentioned above, an example of a wrapper is a query execution blocker. It\ncould look like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">blocker</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;No database access allowed here.&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>And it would be used in a view to block queries from the template like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"o\">...</span><span class=\"p\">}</span>  <span class=\"c1\"># Code to generate context with all data.</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n    <span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute_wrapper</span><span class=\"p\">(</span><span class=\"n\">blocker</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">template_name</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The parameters sent to the wrappers are:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">execute</span></code> \u2013 a callable, which should be invoked with the rest of the\nparameters in order to execute the query.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">sql</span></code> \u2013 a <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>, the SQL query to be sent to the database.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> \u2013 a list/tuple of parameter values for the SQL command, or a\nlist/tuple of lists/tuples if the wrapped call is <code class=\"docutils literal notranslate\"><span class=\"pre\">executemany()</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">many</span></code> \u2013 a <code class=\"docutils literal notranslate\"><span class=\"pre\">bool</span></code> indicating whether the ultimately invoked call is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">execute()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">executemany()</span></code> (and whether <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> is expected to be\na sequence of values, or a sequence of sequences of values).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> \u2013 a dictionary with further data about the context of\ninvocation. This includes the connection and cursor.</li>\n</ul>\n<p>Using the parameters, a slightly more complex version of the blocker could\ninclude the connection name in the error message:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">blocker</span><span class=\"p\">(</span><span class=\"n\">execute</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">alias</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;connection&quot;</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">alias</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"s2\">&quot;Access to database &#39;</span><span class=\"si\">{}</span><span class=\"s2\">&#39; blocked here&quot;</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">alias</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>For a more complete example, a query logger could look like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">QueryLogger</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">queries</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">execute</span><span class=\"p\">,</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"n\">current_query</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;sql&quot;</span><span class=\"p\">:</span> <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"s2\">&quot;params&quot;</span><span class=\"p\">:</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"s2\">&quot;many&quot;</span><span class=\"p\">:</span> <span class=\"n\">many</span><span class=\"p\">}</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">monotonic</span><span class=\"p\">()</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"p\">,</span> <span class=\"n\">many</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"n\">current_query</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;error&quot;</span>\n            <span class=\"n\">current_query</span><span class=\"p\">[</span><span class=\"s2\">&quot;exception&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">e</span>\n            <span class=\"k\">raise</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">current_query</span><span class=\"p\">[</span><span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;ok&quot;</span>\n            <span class=\"k\">return</span> <span class=\"n\">result</span>\n        <span class=\"k\">finally</span><span class=\"p\">:</span>\n            <span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">monotonic</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n            <span class=\"n\">current_query</span><span class=\"p\">[</span><span class=\"s2\">&quot;duration&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">duration</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">queries</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">current_query</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>To use this, you would create a logger object and install it as a wrapper:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">connection</span>\n\n<span class=\"n\">ql</span> <span class=\"o\">=</span> <span class=\"n\">QueryLogger</span><span class=\"p\">()</span>\n<span class=\"k\">with</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">execute_wrapper</span><span class=\"p\">(</span><span class=\"n\">ql</span><span class=\"p\">):</span>\n    <span class=\"n\">do_queries</span><span class=\"p\">()</span>\n<span class=\"c1\"># Now we can print the log.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">ql</span><span class=\"o\">.</span><span class=\"n\">queries</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-connection-execute-wrapper\">\n<span id=\"connection-execute-wrapper\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">connection.execute_wrapper()</span></code><a class=\"headerlink\" href=\"#connection-execute-wrapper\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.backends.base.DatabaseWrapper.execute_wrapper\">\n<code class=\"sig-name descname\"><span class=\"pre\">execute_wrapper</span></code>(<em><span class=\"n\"><span class=\"pre\">wrapper</span></span></em>)<a class=\"headerlink\" href=\"#django.db.backends.base.DatabaseWrapper.execute_wrapper\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a context manager which, when entered, installs a wrapper around\ndatabase query executions, and when exited, removes the wrapper. The wrapper is\ninstalled on the thread-local connection object.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">wrapper</span></code> is a callable taking five arguments.  It is called for every query\nexecution in the scope of the context manager, with arguments <code class=\"docutils literal notranslate\"><span class=\"pre\">execute</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sql</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">many</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> as described above. It\u2019s\nexpected to call <code class=\"docutils literal notranslate\"><span class=\"pre\">execute(sql,</span> <span class=\"pre\">params,</span> <span class=\"pre\">many,</span> <span class=\"pre\">context)</span></code> and return the return\nvalue of that call.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/fixtures", "Fixtures", "N", "next"], ["topics/db/optimization", "Database access optimization", "P", "previous"]], "sourcename": "topics/db/instrumentation.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Database instrumentation</a><ul>\n<li><a class=\"reference internal\" href=\"#connection-execute-wrapper\"><code class=\"docutils literal notranslate\"><span class=\"pre\">connection.execute_wrapper()</span></code></a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/instrumentation", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
