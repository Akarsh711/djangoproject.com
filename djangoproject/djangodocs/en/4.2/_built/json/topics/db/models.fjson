{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../", "title": "Models and databases"}, "next": {"link": "../queries/", "title": "Making queries"}, "title": "Models", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.db.models\">\n<span id=\"s-models\"></span><span id=\"module-django.db.models\"></span><span id=\"models\"></span><h1>Models<a class=\"headerlink\" href=\"#module-django.db.models\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A model is the single, definitive source of information about your data. It\ncontains the essential fields and behaviors of the data you\u2019re storing.\nGenerally, each model maps to a single database table.</p>\n<p>The basics:</p>\n<ul class=\"simple\">\n<li>Each model is a Python class that subclasses\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model\" title=\"django.db.models.Model\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Model</span></code></a>.</li>\n<li>Each attribute of the model represents a database field.</li>\n<li>With all of this, Django gives you an automatically-generated\ndatabase-access API; see <a class=\"reference internal\" href=\"../queries/\"><span class=\"doc\">Making queries</span></a>.</li>\n</ul>\n<div class=\"section\" id=\"s-quick-example\">\n<span id=\"quick-example\"></span><h2>Quick example<a class=\"headerlink\" href=\"#quick-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This example model defines a <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code>, which has a <code class=\"docutils literal notranslate\"><span class=\"pre\">first_name</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">last_name</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">first_name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">last_name</span></code> are <a class=\"reference internal\" href=\"#fields\">fields</a> of the model. Each field is\nspecified as a class attribute, and each attribute maps to a database column.</p>\n<p>The above <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> model would create a database table like this:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"n\">myapp_person</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;id&quot;</span><span class=\"w\"> </span><span class=\"nb\">bigint</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"> </span><span class=\"k\">PRIMARY</span><span class=\"w\"> </span><span class=\"k\">KEY</span><span class=\"w\"> </span><span class=\"k\">GENERATED</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"k\">DEFAULT</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"k\">IDENTITY</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;first_name&quot;</span><span class=\"w\"> </span><span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"ss\">&quot;last_name&quot;</span><span class=\"w\"> </span><span class=\"nb\">varchar</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">NOT</span><span class=\"w\"> </span><span class=\"k\">NULL</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Some technical notes:</p>\n<ul class=\"simple\">\n<li>The name of the table, <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp_person</span></code>, is automatically derived from\nsome model metadata but can be overridden. See <a class=\"reference internal\" href=\"../../../ref/models/options/#table-names\"><span class=\"std std-ref\">Table names</span></a> for more\ndetails.</li>\n<li>An <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> field is added automatically, but this behavior can be\noverridden. See <a class=\"reference internal\" href=\"#automatic-primary-key-fields\"><span class=\"std std-ref\">Automatic primary key fields</span></a>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">TABLE</span></code> SQL in this example is formatted using PostgreSQL\nsyntax, but it\u2019s worth noting Django uses SQL tailored to the database\nbackend specified in your <a class=\"reference internal\" href=\"../../settings/\"><span class=\"doc\">settings file</span></a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-using-models\">\n<span id=\"using-models\"></span><h2>Using models<a class=\"headerlink\" href=\"#using-models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Once you have defined your models, you need to tell Django you\u2019re going to <em>use</em>\nthose models. Do this by editing your settings file and changing the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting to add the name of the module that contains\nyour <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code>.</p>\n<p>For example, if the models for your application live in the module\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myapp.models</span></code> (the package structure that is created for an\napplication by the <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-startapp\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">startapp</span></code></a> script),\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> should read, in part:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s2\">&quot;myapp&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>When you add new apps to <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, be sure to run\n<a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code></a>, optionally making migrations\nfor them first with <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-makemigrations\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">makemigrations</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-fields\">\n<span id=\"fields\"></span><h2>Fields<a class=\"headerlink\" href=\"#fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The most important part of a model \u2013 and the only required part of a model \u2013\nis the list of database fields it defines. Fields are specified by class\nattributes. Be careful not to choose field names that conflict with the\n<a class=\"reference internal\" href=\"../../../ref/models/instances/\"><span class=\"doc\">models API</span></a> like <code class=\"docutils literal notranslate\"><span class=\"pre\">clean</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">save</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">delete</span></code>.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Musician</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">instrument</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Album</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Musician</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">release_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">num_stars</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-field-types\">\n<span id=\"field-types\"></span><h3>Field types<a class=\"headerlink\" href=\"#field-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Each field in your model should be an instance of the appropriate\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> class. Django uses the field class types to\ndetermine a few things:</p>\n<ul class=\"simple\">\n<li>The column type, which tells the database what kind of data to store (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">INTEGER</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">TEXT</span></code>).</li>\n<li>The default HTML <a class=\"reference internal\" href=\"../../../ref/forms/widgets/\"><span class=\"doc\">widget</span></a> to use when rendering a form\nfield (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span> <span class=\"pre\">type=&quot;text&quot;&gt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;select&gt;</span></code>).</li>\n<li>The minimal validation requirements, used in Django\u2019s admin and in\nautomatically-generated forms.</li>\n</ul>\n<p>Django ships with dozens of built-in field types; you can find the complete list\nin the <a class=\"reference internal\" href=\"../../../ref/models/fields/#model-field-types\"><span class=\"std std-ref\">model field reference</span></a>. You can easily write\nyour own fields if Django\u2019s built-in ones don\u2019t do the trick; see\n<a class=\"reference internal\" href=\"../../../howto/custom-model-fields/\"><span class=\"doc\">How to create custom model fields</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-field-options\">\n<span id=\"field-options\"></span><h3>Field options<a class=\"headerlink\" href=\"#field-options\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Each field takes a certain set of field-specific arguments (documented in the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#model-field-types\"><span class=\"std std-ref\">model field reference</span></a>). For example,\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> (and its subclasses) require a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.CharField.max_length\" title=\"django.db.models.CharField.max_length\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">max_length</span></code></a> argument which specifies the size\nof the <code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code> database field used to store the data.</p>\n<p>There\u2019s also a set of common arguments available to all field types. All are\noptional. They\u2019re fully explained in the <a class=\"reference internal\" href=\"../../../ref/models/fields/#common-model-field-options\"><span class=\"std std-ref\">reference</span></a>, but here\u2019s a quick summary of the most often-used\nones:</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.null\" title=\"django.db.models.Field.null\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">null</span></code></a></dt><dd>If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, Django will store empty values as <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> in the database.\nDefault is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.blank\" title=\"django.db.models.Field.blank\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">blank</span></code></a></dt><dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the field is allowed to be blank. Default is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<p>Note that this is different than <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.null\" title=\"django.db.models.Field.null\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">null</span></code></a>.\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.null\" title=\"django.db.models.Field.null\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">null</span></code></a> is purely database-related, whereas\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.blank\" title=\"django.db.models.Field.blank\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">blank</span></code></a> is validation-related. If a field has\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.blank\" title=\"django.db.models.Field.blank\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">blank=True</span></code></a>, form validation will\nallow entry of an empty value. If a field has <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.blank\" title=\"django.db.models.Field.blank\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">blank=False</span></code></a>, the field will be required.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.choices\" title=\"django.db.models.Field.choices\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">choices</span></code></a></dt><dd><p>A <a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-sequence\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">sequence</span></a> of 2-tuples to use as choices for this field. If this\nis given, the default form widget will be a select box instead of the\nstandard text field and will limit choices to the choices given.</p>\n<p>A choices list looks like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">YEAR_IN_SCHOOL_CHOICES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;FR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Freshman&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;SO&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Sophomore&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;JR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Junior&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;SR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Senior&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;GR&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Graduate&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">A new migration is created each time the order of <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> changes.</p>\n</div>\n<p>The first element in each tuple is the value that will be stored in the\ndatabase. The second element is displayed by the field\u2019s form widget.</p>\n<p>Given a model instance, the display value for a field with <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> can\nbe accessed using the <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.get_FOO_display\" title=\"django.db.models.Model.get_FOO_display\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_FOO_display()</span></code></a>\nmethod. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">SHIRT_SIZES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;S&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Small&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;M&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Medium&quot;</span><span class=\"p\">),</span>\n        <span class=\"p\">(</span><span class=\"s2\">&quot;L&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Large&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">]</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">shirt_size</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">SHIRT_SIZES</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred Flintstone&quot;</span><span class=\"p\">,</span> <span class=\"n\">shirt_size</span><span class=\"o\">=</span><span class=\"s2\">&quot;L&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">shirt_size</span>\n<span class=\"go\">&#39;L&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_shirt_size_display</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;Large&#39;</span>\n</pre></div>\n</div>\n<p>You can also use enumeration classes to define <code class=\"docutils literal notranslate\"><span class=\"pre\">choices</span></code> in a concise\nway:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Runner</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">MedalType</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextChoices</span><span class=\"p\">(</span><span class=\"s2\">&quot;MedalType&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;GOLD SILVER BRONZE&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"n\">medal</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">MedalType</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Further examples are available in the <a class=\"reference internal\" href=\"../../../ref/models/fields/#field-choices\"><span class=\"std std-ref\">model field reference</span></a>.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a></dt><dd>The default value for the field. This can be a value or a callable\nobject. If callable it will be called every time a new object is\ncreated.</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.help_text\" title=\"django.db.models.Field.help_text\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">help_text</span></code></a></dt><dd>Extra \u201chelp\u201d text to be displayed with the form widget. It\u2019s useful for\ndocumentation even if your field isn\u2019t used on a form.</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key</span></code></a></dt><dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this field is the primary key for the model.</p>\n<p>If you don\u2019t specify <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key=True</span></code></a> for\nany fields in your model, Django will automatically add an\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.IntegerField\" title=\"django.db.models.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a> to hold the primary key, so you don\u2019t need to set\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key=True</span></code></a> on any of your fields\nunless you want to override the default primary-key behavior. For more,\nsee <a class=\"reference internal\" href=\"#automatic-primary-key-fields\"><span class=\"std std-ref\">Automatic primary key fields</span></a>.</p>\n<p>The primary key field is read-only. If you change the value of the primary\nkey on an existing object and then save it, a new object will be created\nalongside the old one. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Fruit</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fruit</span> <span class=\"o\">=</span> <span class=\"n\">Fruit</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Apple&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Pear&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">fruit</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Fruit</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&#39;Apple&#39;, &#39;Pear&#39;]&gt;</span>\n</pre></div>\n</div>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.unique\" title=\"django.db.models.Field.unique\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">unique</span></code></a></dt><dd>If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this field must be unique throughout the table.</dd>\n</dl>\n<p>Again, these are just short descriptions of the most common field options. Full\ndetails can be found in the <a class=\"reference internal\" href=\"../../../ref/models/fields/#common-model-field-options\"><span class=\"std std-ref\">common model field option reference</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-automatic-primary-key-fields\">\n<span id=\"s-id1\"></span><span id=\"automatic-primary-key-fields\"></span><span id=\"id1\"></span><h3>Automatic primary key fields<a class=\"headerlink\" href=\"#automatic-primary-key-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, Django gives each model an auto-incrementing primary key with the\ntype specified per app in <a class=\"reference internal\" href=\"../../../ref/applications/#django.apps.AppConfig.default_auto_field\" title=\"django.apps.AppConfig.default_auto_field\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AppConfig.default_auto_field</span></code></a> or globally in the\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DEFAULT_AUTO_FIELD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_AUTO_FIELD</span></code></a> setting. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BigAutoField</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you\u2019d like to specify a custom primary key, specify\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key=True</span></code></a> on one of your fields. If Django\nsees you\u2019ve explicitly set <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.primary_key</span></code></a>, it won\u2019t add the automatic\n<code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> column.</p>\n<p>Each model requires exactly one field to have <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key=True</span></code></a> (either explicitly declared or automatically added).</p>\n</div>\n<div class=\"section\" id=\"s-verbose-field-names\">\n<span id=\"s-id2\"></span><span id=\"verbose-field-names\"></span><span id=\"id2\"></span><h3>Verbose field names<a class=\"headerlink\" href=\"#verbose-field-names\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Each field type, except for <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a>, takes an optional first positional\nargument \u2013 a verbose name. If the verbose name isn\u2019t given, Django will\nautomatically create it using the field\u2019s attribute name, converting underscores\nto spaces.</p>\n<p>In this example, the verbose name is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;person's</span> <span class=\"pre\">first</span> <span class=\"pre\">name&quot;</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"s2\">&quot;person&#39;s first name&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In this example, the verbose name is <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;first</span> <span class=\"pre\">name&quot;</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> require the first argument to be a\nmodel class, so use the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.verbose_name\" title=\"django.db.models.Field.verbose_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name</span></code></a> keyword argument:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">poll</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n    <span class=\"n\">Poll</span><span class=\"p\">,</span>\n    <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;the related poll&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Site</span><span class=\"p\">,</span> <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;list of sites&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">place</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n    <span class=\"n\">Place</span><span class=\"p\">,</span>\n    <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;related place&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The convention is not to capitalize the first letter of the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.verbose_name\" title=\"django.db.models.Field.verbose_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name</span></code></a>. Django will automatically capitalize the first\nletter where it needs to.</p>\n</div>\n<div class=\"section\" id=\"s-relationships\">\n<span id=\"relationships\"></span><h3>Relationships<a class=\"headerlink\" href=\"#relationships\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Clearly, the power of relational databases lies in relating tables to each\nother. Django offers ways to define the three most common types of database\nrelationships: many-to-one, many-to-many and one-to-one.</p>\n<div class=\"section\" id=\"s-many-to-one-relationships\">\n<span id=\"many-to-one-relationships\"></span><h4>Many-to-one relationships<a class=\"headerlink\" href=\"#many-to-one-relationships\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To define a many-to-one relationship, use <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.ForeignKey</span></code></a>.\nYou use it just like any other <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> type: by\nincluding it as a class attribute of your model.</p>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> requires a positional argument: the class\nto which the model is related.</p>\n<p>For example, if a <code class=\"docutils literal notranslate\"><span class=\"pre\">Car</span></code> model has a <code class=\"docutils literal notranslate\"><span class=\"pre\">Manufacturer</span></code> \u2013 that is, a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Manufacturer</span></code> makes multiple cars but each <code class=\"docutils literal notranslate\"><span class=\"pre\">Car</span></code> only has one\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Manufacturer</span></code> \u2013 use the following definitions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Manufacturer</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">manufacturer</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Manufacturer</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>You can also create <a class=\"reference internal\" href=\"../../../ref/models/fields/#recursive-relationships\"><span class=\"std std-ref\">recursive relationships</span></a> (an\nobject with a many-to-one relationship to itself) and <a class=\"reference internal\" href=\"../../../ref/models/fields/#lazy-relationships\"><span class=\"std std-ref\">relationships to\nmodels not yet defined</span></a>; see <a class=\"reference internal\" href=\"../../../ref/models/fields/#ref-foreignkey\"><span class=\"std std-ref\">the model field\nreference</span></a> for details.</p>\n<p>It\u2019s suggested, but not required, that the name of a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> field (<code class=\"docutils literal notranslate\"><span class=\"pre\">manufacturer</span></code> in the example\nabove) be the name of the model, lowercase. You can call the field whatever you\nwant. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">company_that_makes_it</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">Manufacturer</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> fields accept a number of extra\narguments which are explained in <a class=\"reference internal\" href=\"../../../ref/models/fields/#foreign-key-arguments\"><span class=\"std std-ref\">the model field reference</span></a>. These options help define how the relationship\nshould work; all are optional.</p>\n<p>For details on accessing backwards-related objects, see the\n<a class=\"reference internal\" href=\"../queries/#backwards-related-objects\"><span class=\"std std-ref\">Following relationships backward example</span></a>.</p>\n<p class=\"last\">For sample code, see the <a class=\"reference internal\" href=\"../examples/many_to_one/\"><span class=\"doc\">Many-to-one relationship model example</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-many-to-many-relationships\">\n<span id=\"many-to-many-relationships\"></span><h4>Many-to-many relationships<a class=\"headerlink\" href=\"#many-to-many-relationships\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To define a many-to-many relationship, use\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>. You use it just like any other\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> type: by including it as a class attribute of\nyour model.</p>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> requires a positional argument: the\nclass to which the model is related.</p>\n<p>For example, if a <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> has multiple <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> objects \u2013 that is, a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> can be on multiple pizzas and each <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> has multiple toppings\n\u2013 here\u2019s how you\u2019d represent that:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Topping</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Pizza</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">toppings</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Topping</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As with <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>, you can also create\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#recursive-relationships\"><span class=\"std std-ref\">recursive relationships</span></a> (an object with a\nmany-to-many relationship to itself) and <a class=\"reference internal\" href=\"../../../ref/models/fields/#lazy-relationships\"><span class=\"std std-ref\">relationships to models not yet\ndefined</span></a>.</p>\n<p>It\u2019s suggested, but not required, that the name of a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> (<code class=\"docutils literal notranslate\"><span class=\"pre\">toppings</span></code> in the example above)\nbe a plural describing the set of related model objects.</p>\n<p>It doesn\u2019t matter which model has the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>, but you should only put it in one\nof the models \u2013 not both.</p>\n<p>Generally, <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> instances should go in\nthe object that\u2019s going to be edited on a form. In the above example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">toppings</span></code> is in <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> (rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> having a <code class=\"docutils literal notranslate\"><span class=\"pre\">pizzas</span></code>\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> ) because it\u2019s more natural to think\nabout a pizza having toppings than a topping being on multiple pizzas. The way\nit\u2019s set up above, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> form would let users select the toppings.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">See the <a class=\"reference internal\" href=\"../examples/many_to_many/\"><span class=\"doc\">Many-to-many relationship model example</span></a> for a full example.</p>\n</div>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> fields also accept a number of\nextra arguments which are explained in <a class=\"reference internal\" href=\"../../../ref/models/fields/#manytomany-arguments\"><span class=\"std std-ref\">the model field reference</span></a>. These options help define how the relationship\nshould work; all are optional.</p>\n</div>\n<div class=\"section\" id=\"s-extra-fields-on-many-to-many-relationships\">\n<span id=\"s-intermediary-manytomany\"></span><span id=\"extra-fields-on-many-to-many-relationships\"></span><span id=\"intermediary-manytomany\"></span><h4>Extra fields on many-to-many relationships<a class=\"headerlink\" href=\"#extra-fields-on-many-to-many-relationships\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>When you\u2019re only dealing with many-to-many relationships such as mixing and\nmatching pizzas and toppings, a standard\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> is all you need. However, sometimes\nyou may need to associate data with the relationship between two models.</p>\n<p>For example, consider the case of an application tracking the musical groups\nwhich musicians belong to. There is a many-to-many relationship between a person\nand the groups of which they are a member, so you could use a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> to represent this relationship.\nHowever, there is a lot of detail about the membership that you might want to\ncollect, such as the date at which the person joined the group.</p>\n<p>For these situations, Django allows you to specify the model that will be used\nto govern the many-to-many relationship. You can then put extra fields on the\nintermediate model. The intermediate model is associated with the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> using the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField.through\" title=\"django.db.models.ManyToManyField.through\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">through</span></code></a> argument to point to the model\nthat will act as an intermediary. For our musician example, the code would look\nsomething like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Group</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n    <span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">through</span><span class=\"o\">=</span><span class=\"s2\">&quot;Membership&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Membership</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Group</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">date_joined</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">invite_reason</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">64</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>When you set up the intermediary model, you explicitly specify foreign\nkeys to the models that are involved in the many-to-many relationship. This\nexplicit declaration defines how the two models are related.</p>\n<p>There are a few restrictions on the intermediate model:</p>\n<ul class=\"simple\">\n<li>Your intermediate model must contain one - and <em>only</em> one - foreign key\nto the source model (this would be <code class=\"docutils literal notranslate\"><span class=\"pre\">Group</span></code> in our example), or you must\nexplicitly specify the foreign keys Django should use for the relationship\nusing <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField.through_fields\" title=\"django.db.models.ManyToManyField.through_fields\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ManyToManyField.through_fields</span></code></a>.\nIf you have more than one foreign key and <code class=\"docutils literal notranslate\"><span class=\"pre\">through_fields</span></code> is not\nspecified, a validation error will be raised. A similar restriction applies\nto the foreign key to the target model (this would be <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> in our\nexample).</li>\n<li>For a model which has a many-to-many relationship to itself through an\nintermediary model, two foreign keys to the same model are permitted, but\nthey will be treated as the two (different) sides of the many-to-many\nrelationship. If there are <em>more</em> than two foreign keys though, you\nmust also specify <code class=\"docutils literal notranslate\"><span class=\"pre\">through_fields</span></code> as above, or a validation error\nwill be raised.</li>\n</ul>\n<p>Now that you have set up your <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> to use\nyour intermediary model (<code class=\"docutils literal notranslate\"><span class=\"pre\">Membership</span></code>, in this case), you\u2019re ready to start\ncreating some many-to-many relationships. You do this by creating instances of\nthe intermediate model:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringo</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Ringo Starr&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">paul</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Paul McCartney&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span> <span class=\"o\">=</span> <span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;The Beatles&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m1</span> <span class=\"o\">=</span> <span class=\"n\">Membership</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">ringo</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">date_joined</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1962</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">invite_reason</span><span class=\"o\">=</span><span class=\"s2\">&quot;Needed a new drummer.&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m1</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Person: Ringo Starr&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringo</span><span class=\"o\">.</span><span class=\"n\">group_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Group: The Beatles&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">m2</span> <span class=\"o\">=</span> <span class=\"n\">Membership</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">paul</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">date_joined</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">invite_reason</span><span class=\"o\">=</span><span class=\"s2\">&quot;Wanted to form a band.&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>You can also use <a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.create\" title=\"django.db.models.fields.related.RelatedManager.create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">create()</span></code></a>, or\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.set\" title=\"django.db.models.fields.related.RelatedManager.set\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set()</span></code></a> to create\nrelationships, as long as you specify <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code> for any required\nfields:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">john</span><span class=\"p\">,</span> <span class=\"n\">through_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;date_joined&quot;</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;George Harrison&quot;</span><span class=\"p\">,</span> <span class=\"n\">through_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;date_joined&quot;</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">[</span><span class=\"n\">john</span><span class=\"p\">,</span> <span class=\"n\">paul</span><span class=\"p\">,</span> <span class=\"n\">ringo</span><span class=\"p\">,</span> <span class=\"n\">george</span><span class=\"p\">],</span> <span class=\"n\">through_defaults</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;date_joined&quot;</span><span class=\"p\">:</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1960</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)}</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You may prefer to create instances of the intermediate model directly.</p>\n<p>If the custom through table defined by the intermediate model does not enforce\nuniqueness on the <code class=\"docutils literal notranslate\"><span class=\"pre\">(model1,</span> <span class=\"pre\">model2)</span></code> pair, allowing multiple values, the\n<a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.remove\" title=\"django.db.models.fields.related.RelatedManager.remove\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">remove()</span></code></a> call will\nremove all intermediate model instances:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Membership</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">ringo</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">date_joined</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1968</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">invite_reason</span><span class=\"o\">=</span><span class=\"s2\">&quot;You&#39;ve been gone for a month and we miss you.&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;, &lt;Person: Ringo Starr&gt;]&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># This deletes both of the intermediate model instances for Ringo Starr</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">ringo</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet [&lt;Person: Paul McCartney&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../../ref/models/relations/#django.db.models.fields.related.RelatedManager.clear\" title=\"django.db.models.fields.related.RelatedManager.clear\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">clear()</span></code></a>\nmethod can be used to remove all many-to-many relationships for an instance:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Beatles have broken up</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">beatles</span><span class=\"o\">.</span><span class=\"n\">members</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Note that this deletes the intermediate model instances</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Membership</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n</pre></div>\n</div>\n<p>Once you have established the many-to-many relationships, you can issue\nqueries. Just as with normal many-to-many relationships, you can query using\nthe attributes of the many-to-many-related model:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># Find all the groups with a member whose name starts with &#39;Paul&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Group</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">members__name__startswith</span><span class=\"o\">=</span><span class=\"s2\">&quot;Paul&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Group: The Beatles&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>As you are using an intermediate model, you can also query on its attributes:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\"># Find all the members of the Beatles that joined after 1 Jan 1961</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">group__name</span><span class=\"o\">=</span><span class=\"s2\">&quot;The Beatles&quot;</span><span class=\"p\">,</span> <span class=\"n\">membership__date_joined__gt</span><span class=\"o\">=</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1961</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Person: Ringo Starr]&gt;</span>\n</pre></div>\n</div>\n<p>If you need to access a membership\u2019s information you may do so by directly\nquerying the <code class=\"docutils literal notranslate\"><span class=\"pre\">Membership</span></code> model:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringos_membership</span> <span class=\"o\">=</span> <span class=\"n\">Membership</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"o\">=</span><span class=\"n\">ringo</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringos_membership</span><span class=\"o\">.</span><span class=\"n\">date_joined</span>\n<span class=\"go\">datetime.date(1962, 8, 16)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringos_membership</span><span class=\"o\">.</span><span class=\"n\">invite_reason</span>\n<span class=\"go\">&#39;Needed a new drummer.&#39;</span>\n</pre></div>\n</div>\n<p>Another way to access the same information is by querying the\n<a class=\"reference internal\" href=\"../queries/#m2m-reverse-relationships\"><span class=\"std std-ref\">many-to-many reverse relationship</span></a> from a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> object:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringos_membership</span> <span class=\"o\">=</span> <span class=\"n\">ringo</span><span class=\"o\">.</span><span class=\"n\">membership_set</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">group</span><span class=\"o\">=</span><span class=\"n\">beatles</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringos_membership</span><span class=\"o\">.</span><span class=\"n\">date_joined</span>\n<span class=\"go\">datetime.date(1962, 8, 16)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">ringos_membership</span><span class=\"o\">.</span><span class=\"n\">invite_reason</span>\n<span class=\"go\">&#39;Needed a new drummer.&#39;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-one-to-one-relationships\">\n<span id=\"one-to-one-relationships\"></span><h4>One-to-one relationships<a class=\"headerlink\" href=\"#one-to-one-relationships\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To define a one-to-one relationship, use\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a>. You use it just like any other\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Field</span></code> type: by including it as a class attribute of your model.</p>\n<p>This is most useful on the primary key of an object when that object \u201cextends\u201d\nanother object in some way.</p>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> requires a positional argument: the\nclass to which the model is related.</p>\n<p>For example, if you were building a database of \u201cplaces\u201d, you would\nbuild pretty standard stuff such as address, phone number, etc. in the\ndatabase. Then, if you wanted to build a database of restaurants on\ntop of the places, instead of repeating yourself and replicating those\nfields in the <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code> model, you could make <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code> have\na <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> (because a\nrestaurant \u201cis a\u201d place; in fact, to handle this you\u2019d typically use\n<a class=\"reference internal\" href=\"#model-inheritance\"><span class=\"std std-ref\">inheritance</span></a>, which involves an implicit\none-to-one relation).</p>\n<p>As with <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>, a <a class=\"reference internal\" href=\"../../../ref/models/fields/#recursive-relationships\"><span class=\"std std-ref\">recursive relationship</span></a> can be defined and <a class=\"reference internal\" href=\"../../../ref/models/fields/#lazy-relationships\"><span class=\"std std-ref\">references to as-yet\nundefined models</span></a> can be made.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">See the <a class=\"reference internal\" href=\"../examples/one_to_one/\"><span class=\"doc\">One-to-one relationship model example</span></a> for a full example.</p>\n</div>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> fields also accept an optional\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField.parent_link\" title=\"django.db.models.OneToOneField.parent_link\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">parent_link</span></code></a> argument.</p>\n<p><a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> classes used to automatically become\nthe primary key on a model. This is no longer true (although you can manually\npass in the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.primary_key\" title=\"django.db.models.Field.primary_key\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">primary_key</span></code></a> argument if you like).\nThus, it\u2019s now possible to have multiple fields of type\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> on a single model.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-models-across-files\">\n<span id=\"models-across-files\"></span><h3>Models across files<a class=\"headerlink\" href=\"#models-across-files\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s perfectly OK to relate a model to one from another app. To do this, import\nthe related model at the top of the file where your model is defined. Then,\nrefer to the other model class wherever needed. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">geography.models</span> <span class=\"kn\">import</span> <span class=\"n\">ZipCode</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Restaurant</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">zip_code</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span>\n        <span class=\"n\">ZipCode</span><span class=\"p\">,</span>\n        <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">SET_NULL</span><span class=\"p\">,</span>\n        <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-field-name-restrictions\">\n<span id=\"field-name-restrictions\"></span><h3>Field name restrictions<a class=\"headerlink\" href=\"#field-name-restrictions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django places some restrictions on model field names:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">A field name cannot be a Python reserved word, because that would result\nin a Python syntax error. For example:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>class Example(models.Model):\n    pass = models.IntegerField() # &#39;pass&#39; is a reserved word!\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">A field name cannot contain more than one underscore in a row, due to\nthe way Django\u2019s query lookup syntax works. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">foo__bar</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>  <span class=\"c1\"># &#39;foo__bar&#39; has two underscores!</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">A field name cannot end with an underscore, for similar reasons.</p>\n</li>\n</ol>\n<p>These limitations can be worked around, though, because your field name doesn\u2019t\nnecessarily have to match your database column name. See the\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field.db_column\" title=\"django.db.models.Field.db_column\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_column</span></code></a> option.</p>\n<p>SQL reserved words, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">join</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">where</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">select</span></code>, <em>are</em> allowed as\nmodel field names, because Django escapes all database table names and column\nnames in every underlying SQL query. It uses the quoting syntax of your\nparticular database engine.</p>\n</div>\n<div class=\"section\" id=\"s-custom-field-types\">\n<span id=\"custom-field-types\"></span><h3>Custom field types<a class=\"headerlink\" href=\"#custom-field-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If one of the existing model fields cannot be used to fit your purposes, or if\nyou wish to take advantage of some less common database column types, you can\ncreate your own field class. Full coverage of creating your own fields is\nprovided in <a class=\"reference internal\" href=\"../../../howto/custom-model-fields/\"><span class=\"doc\">How to create custom model fields</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-meta-options\">\n<span id=\"s-id3\"></span><span id=\"meta-options\"></span><span id=\"id3\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> options<a class=\"headerlink\" href=\"#meta-options\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Give your model metadata by using an inner <code class=\"docutils literal notranslate\"><span class=\"pre\">class</span> <span class=\"pre\">Meta</span></code>, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Ox</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">horn_length</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;horn_length&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">verbose_name_plural</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;oxen&quot;</span>\n</pre></div>\n</div>\n<p>Model metadata is \u201canything that\u2019s not a field\u201d, such as ordering options\n(<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ordering</span></code></a>), database table name (<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.db_table\" title=\"django.db.models.Options.db_table\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">db_table</span></code></a>), or\nhuman-readable singular and plural names (<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.verbose_name\" title=\"django.db.models.Options.verbose_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.verbose_name_plural\" title=\"django.db.models.Options.verbose_name_plural\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name_plural</span></code></a>). None are required, and adding <code class=\"docutils literal notranslate\"><span class=\"pre\">class</span>\n<span class=\"pre\">Meta</span></code> to a model is completely optional.</p>\n<p>A complete list of all possible <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> options can be found in the <a class=\"reference internal\" href=\"../../../ref/models/options/\"><span class=\"doc\">model\noption reference</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-model-attributes\">\n<span id=\"s-id4\"></span><span id=\"model-attributes\"></span><span id=\"id4\"></span><h2>Model attributes<a class=\"headerlink\" href=\"#model-attributes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">objects</span></code></dt><dd>The most important attribute of a model is the\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a>. It\u2019s the interface through which\ndatabase query operations are provided to Django models and is used to\n<a class=\"reference internal\" href=\"../queries/#retrieving-objects\"><span class=\"std std-ref\">retrieve the instances</span></a> from the database. If no\ncustom <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code> is defined, the default name is\n<a class=\"reference internal\" href=\"../../../ref/models/class/#django.db.models.Model.objects\" title=\"django.db.models.Model.objects\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">objects</span></code></a>. Managers are only accessible via\nmodel classes, not the model instances.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-model-methods\">\n<span id=\"s-id5\"></span><span id=\"model-methods\"></span><span id=\"id5\"></span><h2>Model methods<a class=\"headerlink\" href=\"#model-methods\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Define custom methods on a model to add custom \u201crow-level\u201d functionality to your\nobjects. Whereas <a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> methods are intended to do\n\u201ctable-wide\u201d things, model methods should act on a particular model instance.</p>\n<p>This is a valuable technique for keeping business logic in one place \u2013 the\nmodel.</p>\n<p>For example, this model has a few custom methods:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">birth_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">baby_boomer_status</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Returns the person&#39;s baby-boomer status.&quot;</span>\n        <span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birth_date</span> <span class=\"o\">&lt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1945</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Pre-boomer&quot;</span>\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">birth_date</span> <span class=\"o\">&lt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">1965</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Baby boomer&quot;</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;Post-boomer&quot;</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"s2\">&quot;Returns the person&#39;s full name.&quot;</span>\n        <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">&quot;</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"si\">}</span><span class=\"s2\"> </span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span>\n</pre></div>\n</div>\n<p>The last method in this example is a <a class=\"reference internal\" href=\"../../../glossary/#term-property\"><span class=\"xref std std-term\">property</span></a>.</p>\n<p>The <a class=\"reference internal\" href=\"../../../ref/models/instances/\"><span class=\"doc\">model instance reference</span></a> has a complete list\nof <a class=\"reference internal\" href=\"../../../ref/models/instances/#model-instance-methods\"><span class=\"std std-ref\">methods automatically given to each model</span></a>.\nYou can override most of these \u2013 see <a class=\"reference internal\" href=\"#overriding-predefined-model-methods\">overriding predefined model methods</a>,\nbelow \u2013 but there are a couple that you\u2019ll almost always want to define:</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.__str__\" title=\"django.db.models.Model.__str__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__str__()</span></code></a></dt><dd><p>A Python \u201cmagic method\u201d that returns a string representation of any\nobject. This is what Python and Django will use whenever a model\ninstance needs to be coerced and displayed as a plain string. Most\nnotably, this happens when you display an object in an interactive\nconsole or in the admin.</p>\n<p>You\u2019ll always want to define this method; the default isn\u2019t very helpful\nat all.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.get_absolute_url\" title=\"django.db.models.Model.get_absolute_url\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code></a></dt><dd><p>This tells Django how to calculate the URL for an object. Django uses\nthis in its admin interface, and any time it needs to figure out a URL\nfor an object.</p>\n<p>Any object that has a URL that uniquely identifies it should define this\nmethod.</p>\n</dd>\n</dl>\n<div class=\"section\" id=\"s-overriding-predefined-model-methods\">\n<span id=\"s-overriding-model-methods\"></span><span id=\"overriding-predefined-model-methods\"></span><span id=\"overriding-model-methods\"></span><h3>Overriding predefined model methods<a class=\"headerlink\" href=\"#overriding-predefined-model-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There\u2019s another set of <a class=\"reference internal\" href=\"../../../ref/models/instances/#model-instance-methods\"><span class=\"std std-ref\">model methods</span></a> that\nencapsulate a bunch of database behavior that you\u2019ll want to customize. In\nparticular you\u2019ll often want to change the way <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> work.</p>\n<p>You\u2019re free to override these methods (and any other model method) to alter\nbehavior.</p>\n<p>A classic use-case for overriding the built-in methods is if you want something\nto happen whenever you save an object. For example (see\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> for documentation of the parameters it accepts):</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">tagline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">do_something</span><span class=\"p\">()</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># Call the &quot;real&quot; save() method.</span>\n        <span class=\"n\">do_something_else</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>You can also prevent saving:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">tagline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;Yoko Ono&#39;s blog&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span>  <span class=\"c1\"># Yoko shall never have her own blog!</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>  <span class=\"c1\"># Call the &quot;real&quot; save() method.</span>\n</pre></div>\n</div>\n<p>It\u2019s important to remember to call the superclass method \u2013 that\u2019s\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">super().save(*args,</span> <span class=\"pre\">**kwargs)</span></code> business \u2013 to ensure\nthat the object still gets saved into the database. If you forget to\ncall the superclass method, the default behavior won\u2019t happen and the\ndatabase won\u2019t get touched.</p>\n<p>It\u2019s also important that you pass through the arguments that can be\npassed to the model method \u2013 that\u2019s what the <code class=\"docutils literal notranslate\"><span class=\"pre\">*args,</span> <span class=\"pre\">**kwargs</span></code> bit\ndoes. Django will, from time to time, extend the capabilities of\nbuilt-in model methods, adding new arguments. If you use <code class=\"docutils literal notranslate\"><span class=\"pre\">*args,</span>\n<span class=\"pre\">**kwargs</span></code> in your method definitions, you are guaranteed that your\ncode will automatically support those arguments when they are added.</p>\n<p>If you wish to update a field value in the <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method, you may\nalso want to have this field added to the <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> keyword argument.\nThis will ensure the field is saved when <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> is specified. For\nexample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.text</span> <span class=\"kn\">import</span> <span class=\"n\">slugify</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span>\n        <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">force_insert</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">force_update</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n    <span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">slug</span> <span class=\"o\">=</span> <span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">update_fields</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span> <span class=\"ow\">and</span> <span class=\"s2\">&quot;name&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">update_fields</span><span class=\"p\">:</span>\n            <span class=\"n\">update_fields</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;slug&quot;</span><span class=\"p\">}</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">update_fields</span><span class=\"p\">)</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span>\n            <span class=\"n\">force_insert</span><span class=\"o\">=</span><span class=\"n\">force_insert</span><span class=\"p\">,</span>\n            <span class=\"n\">force_update</span><span class=\"o\">=</span><span class=\"n\">force_update</span><span class=\"p\">,</span>\n            <span class=\"n\">using</span><span class=\"o\">=</span><span class=\"n\">using</span><span class=\"p\">,</span>\n            <span class=\"n\">update_fields</span><span class=\"o\">=</span><span class=\"n\">update_fields</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../../ref/models/instances/#ref-models-update-fields\"><span class=\"std std-ref\">Specifying which fields to save</span></a> for more details.</p>\n<div class=\"admonition-overridden-model-methods-are-not-called-on-bulk-operations admonition\">\n<p class=\"first admonition-title\">Overridden model methods are not called on bulk operations</p>\n<p>Note that the <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method for an object is not\nnecessarily called when <a class=\"reference internal\" href=\"../queries/#topics-db-queries-delete\"><span class=\"std std-ref\">deleting objects in bulk using a\nQuerySet</span></a> or as a result of a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.on_delete\" title=\"django.db.models.ForeignKey.on_delete\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">cascading</span>\n<span class=\"pre\">delete</span></code></a>. To ensure customized\ndelete logic gets executed, you can use\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.pre_delete\" title=\"django.db.models.signals.pre_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_delete</span></code></a> and/or\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_delete\" title=\"django.db.models.signals.post_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_delete</span></code></a> signals.</p>\n<p class=\"last\">Unfortunately, there isn\u2019t a workaround when\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">creating</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/models/querysets/#django.db.models.query.QuerySet.update\" title=\"django.db.models.query.QuerySet.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">updating</span></code></a> objects in bulk,\nsince none of <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>,\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a>, and\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a> are called.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-executing-custom-sql\">\n<span id=\"executing-custom-sql\"></span><h3>Executing custom SQL<a class=\"headerlink\" href=\"#executing-custom-sql\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Another common pattern is writing custom SQL statements in model methods and\nmodule-level methods. For more details on using raw SQL, see the documentation\non <a class=\"reference internal\" href=\"../sql/\"><span class=\"doc\">using raw SQL</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-model-inheritance\">\n<span id=\"s-id6\"></span><span id=\"model-inheritance\"></span><span id=\"id6\"></span><h2>Model inheritance<a class=\"headerlink\" href=\"#model-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Model inheritance in Django works almost identically to the way normal\nclass inheritance works in Python, but the basics at the beginning of the page\nshould still be followed. That means the base class should subclass\n<a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model\" title=\"django.db.models.Model\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.db.models.Model</span></code></a>.</p>\n<p>The only decision you have to make is whether you want the parent models to be\nmodels in their own right (with their own database tables), or if the parents\nare just holders of common information that will only be visible through the\nchild models.</p>\n<p>There are three styles of inheritance that are possible in Django.</p>\n<ol class=\"arabic simple\">\n<li>Often, you will just want to use the parent class to hold information that\nyou don\u2019t want to have to type out for each child model. This class isn\u2019t\ngoing to ever be used in isolation, so <a class=\"reference internal\" href=\"#abstract-base-classes\"><span class=\"std std-ref\">Abstract base classes</span></a> are\nwhat you\u2019re after.</li>\n<li>If you\u2019re subclassing an existing model (perhaps something from another\napplication entirely) and want each model to have its own database table,\n<a class=\"reference internal\" href=\"#multi-table-inheritance\"><span class=\"std std-ref\">Multi-table inheritance</span></a> is the way to go.</li>\n<li>Finally, if you only want to modify the Python-level behavior of a model,\nwithout changing the models fields in any way, you can use\n<a class=\"reference internal\" href=\"#proxy-models\"><span class=\"std std-ref\">Proxy models</span></a>.</li>\n</ol>\n<div class=\"section\" id=\"s-abstract-base-classes\">\n<span id=\"s-id7\"></span><span id=\"abstract-base-classes\"></span><span id=\"id7\"></span><h3>Abstract base classes<a class=\"headerlink\" href=\"#abstract-base-classes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Abstract base classes are useful when you want to put some common\ninformation into a number of other models. You write your base class\nand put <code class=\"docutils literal notranslate\"><span class=\"pre\">abstract=True</span></code> in the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>\nclass. This model will then not be used to create any database\ntable. Instead, when it is used as a base class for other models, its\nfields will be added to those of the child class.</p>\n<p>An example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommonInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PositiveIntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"n\">CommonInfo</span><span class=\"p\">):</span>\n    <span class=\"n\">home_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Student</span></code> model will have three fields: <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">age</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">home_group</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">CommonInfo</span></code> model cannot be used as a normal Django\nmodel, since it is an abstract base class. It does not generate a database\ntable or have a manager, and cannot be instantiated or saved directly.</p>\n<p>Fields inherited from abstract base classes can be overridden with another\nfield or value, or be removed with <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<p>For many uses, this type of model inheritance will be exactly what you want.\nIt provides a way to factor out common information at the Python level, while\nstill only creating one database table per child model at the database level.</p>\n<div class=\"section\" id=\"s-meta-inheritance\">\n<span id=\"meta-inheritance\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> inheritance<a class=\"headerlink\" href=\"#meta-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>When an abstract base class is created, Django makes any <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>\ninner class you declared in the base class available as an\nattribute. If a child class does not declare its own <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>\nclass, it will inherit the parent\u2019s <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>. If the child wants to\nextend the parent\u2019s <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> class, it can subclass it. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommonInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"n\">CommonInfo</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">CommonInfo</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;student_info&quot;</span>\n</pre></div>\n</div>\n<p>Django does make one adjustment to the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> class of an\nabstract base class: before installing the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>\nattribute, it sets <code class=\"docutils literal notranslate\"><span class=\"pre\">abstract=False</span></code>. This means that children of abstract\nbase classes don\u2019t automatically become abstract classes themselves. To make\nan abstract base class that inherits from another abstract base class, you need\nto explicitly set <code class=\"docutils literal notranslate\"><span class=\"pre\">abstract=True</span></code> on the child.</p>\n<p>Some attributes won\u2019t make sense to include in the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> class of an\nabstract base class. For example, including <code class=\"docutils literal notranslate\"><span class=\"pre\">db_table</span></code> would mean that all\nthe child classes (the ones that don\u2019t specify their own <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>) would use\nthe same database table, which is almost certainly not what you want.</p>\n<p>Due to the way Python inheritance works, if a child class inherits from\nmultiple abstract base classes, only the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> options\nfrom the first listed class will be inherited by default. To inherit <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> options from multiple abstract base classes, you must\nexplicitly declare the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> inheritance. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommonInfo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">PositiveIntegerField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Unmanaged</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n        <span class=\"n\">managed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Student</span><span class=\"p\">(</span><span class=\"n\">CommonInfo</span><span class=\"p\">,</span> <span class=\"n\">Unmanaged</span><span class=\"p\">):</span>\n    <span class=\"n\">home_group</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">(</span><span class=\"n\">CommonInfo</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">,</span> <span class=\"n\">Unmanaged</span><span class=\"o\">.</span><span class=\"n\">Meta</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-be-careful-with-related-name-and-related-query-name\">\n<span id=\"s-abstract-related-name\"></span><span id=\"be-careful-with-related-name-and-related-query-name\"></span><span id=\"abstract-related-name\"></span><h4>Be careful with <code class=\"docutils literal notranslate\"><span class=\"pre\">related_name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code><a class=\"headerlink\" href=\"#be-careful-with-related-name-and-related-query-name\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you are using <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_query_name\" title=\"django.db.models.ForeignKey.related_query_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code></a> on a <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code>, you must always specify a <em>unique</em> reverse name and query\nname for the field. This would normally cause a problem in abstract base\nclasses, since the fields on this class are included into each of the child\nclasses, with exactly the same values for the attributes (including\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_query_name\" title=\"django.db.models.ForeignKey.related_query_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code></a>) each time.</p>\n<p>To work around this problem, when you are using\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_query_name\" title=\"django.db.models.ForeignKey.related_query_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code></a> in an abstract base\nclass (only), part of the value should contain <code class=\"docutils literal notranslate\"><span class=\"pre\">'%(app_label)s'</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(class)s'</span></code>.</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'%(class)s'</span></code> is replaced by the lowercased name of the child class that\nthe field is used in.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'%(app_label)s'</span></code> is replaced by the lowercased name of the app the child\nclass is contained within. Each installed application name must be unique and\nthe model class names within each app must also be unique, therefore the\nresulting name will end up being different.</li>\n</ul>\n<p>For example, given an app <code class=\"docutils literal notranslate\"><span class=\"pre\">common/models.py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Base</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">m2m</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span>\n        <span class=\"n\">OtherModel</span><span class=\"p\">,</span>\n        <span class=\"n\">related_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(app_label)s</span><span class=\"s2\">_</span><span class=\"si\">%(class)s</span><span class=\"s2\">_related&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">related_query_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(app_label)s</span><span class=\"s2\">_</span><span class=\"si\">%(class)s</span><span class=\"s2\">s&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildA</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildB</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>Along with another app <code class=\"docutils literal notranslate\"><span class=\"pre\">rare/models.py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">common.models</span> <span class=\"kn\">import</span> <span class=\"n\">Base</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ChildB</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>The reverse name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">common.ChildA.m2m</span></code> field will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">common_childa_related</span></code> and the reverse query name will be <code class=\"docutils literal notranslate\"><span class=\"pre\">common_childas</span></code>.\nThe reverse name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">common.ChildB.m2m</span></code> field will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">common_childb_related</span></code> and the reverse query name will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">common_childbs</span></code>. Finally, the reverse name of the <code class=\"docutils literal notranslate\"><span class=\"pre\">rare.ChildB.m2m</span></code> field\nwill be <code class=\"docutils literal notranslate\"><span class=\"pre\">rare_childb_related</span></code> and the reverse query name will be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">rare_childbs</span></code>. It\u2019s up to you how you use the <code class=\"docutils literal notranslate\"><span class=\"pre\">'%(class)s'</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(app_label)s'</span></code> portion to construct your related name or related query name\nbut if you forget to use it, Django will raise errors when you perform system\nchecks (or run <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>).</p>\n<p>If you don\u2019t specify a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a>\nattribute for a field in an abstract base class, the default reverse name will\nbe the name of the child class followed by <code class=\"docutils literal notranslate\"><span class=\"pre\">'_set'</span></code>, just as it normally\nwould be if you\u2019d declared the field directly on the child class. For example,\nin the above code, if the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a>\nattribute was omitted, the reverse name for the <code class=\"docutils literal notranslate\"><span class=\"pre\">m2m</span></code> field would be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">childa_set</span></code> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChildA</span></code> case and <code class=\"docutils literal notranslate\"><span class=\"pre\">childb_set</span></code> for the <code class=\"docutils literal notranslate\"><span class=\"pre\">ChildB</span></code>\nfield.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-multi-table-inheritance\">\n<span id=\"s-id8\"></span><span id=\"multi-table-inheritance\"></span><span id=\"id8\"></span><h3>Multi-table inheritance<a class=\"headerlink\" href=\"#multi-table-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The second type of model inheritance supported by Django is when each model in\nthe hierarchy is a model all by itself. Each model corresponds to its own\ndatabase table and can be queried and created individually. The inheritance\nrelationship introduces links between the child model and each of its parents\n(via an automatically-created <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a>).\nFor example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Place</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n    <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Restaurant</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"p\">):</span>\n    <span class=\"n\">serves_hot_dogs</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">serves_pizza</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>All of the fields of <code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> will also be available in <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code>,\nalthough the data will reside in a different database table. So these are both\npossible:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Place</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bob&#39;s Cafe&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Restaurant</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Bob&#39;s Cafe&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you have a <code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> that is also a <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code>, you can get from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> object to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code> object by using the lowercase version of\nthe model name:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Place</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"go\"># If p is a Restaurant object, this will give the child class:</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">restaurant</span>\n<span class=\"go\">&lt;Restaurant: ...&gt;</span>\n</pre></div>\n</div>\n<p>However, if <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> in the above example was <em>not</em> a <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code> (it had been\ncreated directly as a <code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> object or was the parent of some other class),\nreferring to <code class=\"docutils literal notranslate\"><span class=\"pre\">p.restaurant</span></code> would raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant.DoesNotExist</span></code>\nexception.</p>\n<p>The automatically-created <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code> that links it to <code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> looks like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">place_ptr</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n    <span class=\"n\">Place</span><span class=\"p\">,</span>\n    <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span>\n    <span class=\"n\">parent_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You can override that field by declaring your own\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> with <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField.parent_link\" title=\"django.db.models.OneToOneField.parent_link\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">parent_link=True</span></code></a> on <code class=\"docutils literal notranslate\"><span class=\"pre\">Restaurant</span></code>.</p>\n<div class=\"section\" id=\"s-meta-and-multi-table-inheritance\">\n<span id=\"s-id9\"></span><span id=\"meta-and-multi-table-inheritance\"></span><span id=\"id9\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> and multi-table inheritance<a class=\"headerlink\" href=\"#meta-and-multi-table-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In the multi-table inheritance situation, it doesn\u2019t make sense for a child\nclass to inherit from its parent\u2019s <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> class. All the <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> options\nhave already been applied to the parent class and applying them again would\nnormally only lead to contradictory behavior (this is in contrast with the\nabstract base class case, where the base class doesn\u2019t exist in its own\nright).</p>\n<p>So a child model does not have access to its parent\u2019s <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> class. However, there are a few limited cases where the child\ninherits behavior from the parent: if the child does not specify an\n<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ordering</span></code></a> attribute or a\n<a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.get_latest_by\" title=\"django.db.models.Options.get_latest_by\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">get_latest_by</span></code></a> attribute, it will inherit\nthese from its parent.</p>\n<p>If the parent has an ordering and you don\u2019t want the child to have any natural\nordering, you can explicitly disable it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ChildModel</span><span class=\"p\">(</span><span class=\"n\">ParentModel</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Remove parent&#39;s ordering effect</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-inheritance-and-reverse-relations\">\n<span id=\"inheritance-and-reverse-relations\"></span><h4>Inheritance and reverse relations<a class=\"headerlink\" href=\"#inheritance-and-reverse-relations\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Because multi-table inheritance uses an implicit\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> to link the child and\nthe parent, it\u2019s possible to move from the parent down to the child,\nas in the above example. However, this uses up the name that is the\ndefault <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a> value for\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> and\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> relations.  If you\nare putting those types of relations on a subclass of the parent model, you\n<strong>must</strong> specify the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey.related_name\" title=\"django.db.models.ForeignKey.related_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">related_name</span></code></a>\nattribute on each such field. If you forget, Django will raise a validation\nerror.</p>\n<p>For example, using the above <code class=\"docutils literal notranslate\"><span class=\"pre\">Place</span></code> class again, let\u2019s create another\nsubclass with a <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Supplier</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"p\">):</span>\n    <span class=\"n\">customers</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Place</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This results in the error:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">Reverse query name for &#39;Supplier.customers&#39; clashes with reverse query</span>\n<span class=\"x\">name for &#39;Supplier.place_ptr&#39;.</span>\n\n<span class=\"x\">HINT: Add or change a related_name argument to the definition for</span>\n<span class=\"x\">&#39;Supplier.customers&#39; or &#39;Supplier.place_ptr&#39;.</span>\n</pre></div>\n</div>\n<p>Adding <code class=\"docutils literal notranslate\"><span class=\"pre\">related_name</span></code> to the <code class=\"docutils literal notranslate\"><span class=\"pre\">customers</span></code> field as follows would resolve the\nerror: <code class=\"docutils literal notranslate\"><span class=\"pre\">models.ManyToManyField(Place,</span> <span class=\"pre\">related_name='provider')</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-specifying-the-parent-link-field\">\n<span id=\"specifying-the-parent-link-field\"></span><h4>Specifying the parent link field<a class=\"headerlink\" href=\"#specifying-the-parent-link-field\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>As mentioned, Django will automatically create a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> linking your child\nclass back to any non-abstract parent models. If you want to control the\nname of the attribute linking back to the parent, you can create your\nown <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> and set\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField.parent_link\" title=\"django.db.models.OneToOneField.parent_link\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">parent_link=True</span></code></a>\nto indicate that your field is the link back to the parent class.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-proxy-models\">\n<span id=\"s-id10\"></span><span id=\"proxy-models\"></span><span id=\"id10\"></span><h3>Proxy models<a class=\"headerlink\" href=\"#proxy-models\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When using <a class=\"reference internal\" href=\"#multi-table-inheritance\"><span class=\"std std-ref\">multi-table inheritance</span></a>, a new\ndatabase table is created for each subclass of a model. This is usually the\ndesired behavior, since the subclass needs a place to store any additional\ndata fields that are not present on the base class. Sometimes, however, you\nonly want to change the Python behavior of a model \u2013 perhaps to change the\ndefault manager, or add a new method.</p>\n<p>This is what proxy model inheritance is for: creating a <em>proxy</em> for the\noriginal model. You can create, delete and update instances of the proxy model\nand all the data will be saved as if you were using the original (non-proxied)\nmodel. The difference is that you can change things like the default model\nordering or the default manager in the proxy, without having to alter the\noriginal.</p>\n<p>Proxy models are declared like normal models. You tell Django that it\u2019s a\nproxy model by setting the <a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.proxy\" title=\"django.db.models.Options.proxy\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">proxy</span></code></a> attribute of\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> class to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>For example, suppose you want to add a method to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> model. You can do it like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n    <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPerson</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">MyPerson</span></code> class operates on the same database table as its parent\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> class. In particular, any new instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> will also be\naccessible through <code class=\"docutils literal notranslate\"><span class=\"pre\">MyPerson</span></code>, and vice-versa:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;foobar&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">MyPerson</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;foobar&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;MyPerson: foobar&gt;</span>\n</pre></div>\n</div>\n<p>You could also use a proxy model to define a different default ordering on\na model. You might not always want to order the <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> model, but regularly\norder by the <code class=\"docutils literal notranslate\"><span class=\"pre\">last_name</span></code> attribute when you use the proxy:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">OrderedPerson</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;last_name&quot;</span><span class=\"p\">]</span>\n        <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>\n</div>\n<p>Now normal <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> queries will be unordered\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">OrderedPerson</span></code> queries will be ordered by <code class=\"docutils literal notranslate\"><span class=\"pre\">last_name</span></code>.</p>\n<p>Proxy models inherit <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> attributes <a class=\"reference internal\" href=\"#meta-and-multi-table-inheritance\"><span class=\"std std-ref\">in the same way as regular\nmodels</span></a>.</p>\n<div class=\"section\" id=\"s-querysets-still-return-the-model-that-was-requested\">\n<span id=\"querysets-still-return-the-model-that-was-requested\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s still return the model that was requested<a class=\"headerlink\" href=\"#querysets-still-return-the-model-that-was-requested\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>There is no way to have Django return, say, a <code class=\"docutils literal notranslate\"><span class=\"pre\">MyPerson</span></code> object whenever you\nquery for <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> objects. A queryset for <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> objects will return\nthose types of objects. The whole point of proxy objects is that code relying\non the original <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> will use those and your own code can use the\nextensions you included (that no other code is relying on anyway). It is not\na way to replace the <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> (or any other) model everywhere with something\nof your own creation.</p>\n</div>\n<div class=\"section\" id=\"s-base-class-restrictions\">\n<span id=\"base-class-restrictions\"></span><h4>Base class restrictions<a class=\"headerlink\" href=\"#base-class-restrictions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>A proxy model must inherit from exactly one non-abstract model class. You\ncan\u2019t inherit from multiple non-abstract models as the proxy model doesn\u2019t\nprovide any connection between the rows in the different database tables. A\nproxy model can inherit from any number of abstract model classes, providing\nthey do <em>not</em> define any model fields. A proxy model may also inherit from any\nnumber of proxy models that share a common non-abstract parent class.</p>\n</div>\n<div class=\"section\" id=\"s-proxy-model-managers\">\n<span id=\"proxy-model-managers\"></span><h4>Proxy model managers<a class=\"headerlink\" href=\"#proxy-model-managers\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you don\u2019t specify any model managers on a proxy model, it inherits the\nmanagers from its model parents. If you define a manager on the proxy model,\nit will become the default, although any managers defined on the parent\nclasses will still be available.</p>\n<p>Continuing our example from above, you could change the default manager used\nwhen you query the <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> model like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NewManager</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPerson</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">NewManager</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>\n</div>\n<p>If you wanted to add a new manager to the Proxy, without replacing the\nexisting default, you can use the techniques described in the <a class=\"reference internal\" href=\"../managers/#custom-managers-and-inheritance\"><span class=\"std std-ref\">custom\nmanager</span></a> documentation: create a base class\ncontaining the new managers and inherit that after the primary base class:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Create an abstract class for the new manager.</span>\n<span class=\"k\">class</span> <span class=\"nc\">ExtraManagers</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">secondary</span> <span class=\"o\">=</span> <span class=\"n\">NewManager</span><span class=\"p\">()</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">abstract</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyPerson</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">ExtraManagers</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre></div>\n</div>\n<p>You probably won\u2019t need to do this very often, but, when you do, it\u2019s\npossible.</p>\n</div>\n<div class=\"section\" id=\"s-differences-between-proxy-inheritance-and-unmanaged-models\">\n<span id=\"s-proxy-vs-unmanaged-models\"></span><span id=\"differences-between-proxy-inheritance-and-unmanaged-models\"></span><span id=\"proxy-vs-unmanaged-models\"></span><h4>Differences between proxy inheritance and unmanaged models<a class=\"headerlink\" href=\"#differences-between-proxy-inheritance-and-unmanaged-models\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Proxy model inheritance might look fairly similar to creating an unmanaged\nmodel, using the <a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.managed\" title=\"django.db.models.Options.managed\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">managed</span></code></a> attribute on a\nmodel\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> class.</p>\n<p>With careful setting of <a class=\"reference internal\" href=\"../../../ref/models/options/#django.db.models.Options.db_table\" title=\"django.db.models.Options.db_table\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Meta.db_table</span></code></a> you could create an unmanaged model that\nshadows an existing model and adds Python methods to it. However, that would be\nvery repetitive and fragile as you need to keep both copies synchronized if you\nmake any changes.</p>\n<p>On the other hand, proxy models are intended to behave exactly like the model\nthey are proxying for. They are always in sync with the parent model since they\ndirectly inherit its fields and managers.</p>\n<p>The general rules are:</p>\n<ol class=\"arabic simple\">\n<li>If you are mirroring an existing model or database table and don\u2019t want\nall the original database table columns, use <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.managed=False</span></code>.\nThat option is normally useful for modeling database views and tables\nnot under the control of Django.</li>\n<li>If you are wanting to change the Python-only behavior of a model, but\nkeep all the same fields as in the original, use <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta.proxy=True</span></code>.\nThis sets things up so that the proxy model is an exact copy of the\nstorage structure of the original model when data is saved.</li>\n</ol>\n</div>\n</div>\n<div class=\"section\" id=\"s-multiple-inheritance\">\n<span id=\"s-model-multiple-inheritance-topic\"></span><span id=\"multiple-inheritance\"></span><span id=\"model-multiple-inheritance-topic\"></span><h3>Multiple inheritance<a class=\"headerlink\" href=\"#multiple-inheritance\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Just as with Python\u2019s subclassing, it\u2019s possible for a Django model to inherit\nfrom multiple parent models. Keep in mind that normal Python name resolution\nrules apply. The first base class that a particular name (e.g. <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a>) appears in will be the one that is used; for example, this\nmeans that if multiple parents contain a <a class=\"reference internal\" href=\"#meta-options\"><span class=\"std std-ref\">Meta</span></a> class,\nonly the first one is going to be used, and all others will be ignored.</p>\n<p>Generally, you won\u2019t need to inherit from multiple parents. The main use-case\nwhere this is useful is for \u201cmix-in\u201d classes: adding a particular extra\nfield or method to every class that inherits the mix-in. Try to keep your\ninheritance hierarchies as simple and straightforward as possible so that you\nwon\u2019t have to struggle to work out where a particular piece of information is\ncoming from.</p>\n<p>Note that inheriting from multiple models that have a common <code class=\"docutils literal notranslate\"><span class=\"pre\">id</span></code> primary\nkey field will raise an error. To properly use multiple inheritance, you can\nuse an explicit <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> in the base models:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">article_id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">AutoField</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">book_id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">AutoField</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookReview</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>Or use a common ancestor to hold the <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a>. This\nrequires using an explicit <a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> from each\nparent model to the common ancestor to avoid a clash between the fields that\nare automatically generated and inherited by the child:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Piece</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">Piece</span><span class=\"p\">):</span>\n    <span class=\"n\">article_piece</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span>\n        <span class=\"n\">Piece</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">parent_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Book</span><span class=\"p\">(</span><span class=\"n\">Piece</span><span class=\"p\">):</span>\n    <span class=\"n\">book_piece</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">OneToOneField</span><span class=\"p\">(</span><span class=\"n\">Piece</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">parent_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookReview</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">Article</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-field-name-hiding-is-not-permitted\">\n<span id=\"field-name-hiding-is-not-permitted\"></span><h3>Field name \u201chiding\u201d is not permitted<a class=\"headerlink\" href=\"#field-name-hiding-is-not-permitted\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In normal Python class inheritance, it is permissible for a child class to\noverride any attribute from the parent class. In Django, this isn\u2019t usually\npermitted for model fields. If a non-abstract model base class has a field\ncalled <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code>, you can\u2019t create another model field or define\nan attribute called <code class=\"docutils literal notranslate\"><span class=\"pre\">author</span></code> in any class that inherits from that base class.</p>\n<p>This restriction doesn\u2019t apply to model fields inherited from an abstract\nmodel. Such fields may be overridden with another field or value, or be removed\nby setting <code class=\"docutils literal notranslate\"><span class=\"pre\">field_name</span> <span class=\"pre\">=</span> <span class=\"pre\">None</span></code>.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Model managers are inherited from abstract base classes. Overriding an\ninherited field which is referenced by an inherited\n<a class=\"reference internal\" href=\"../managers/#django.db.models.Manager\" title=\"django.db.models.Manager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Manager</span></code></a> may cause subtle bugs. See <a class=\"reference internal\" href=\"../managers/#custom-managers-and-inheritance\"><span class=\"std std-ref\">custom\nmanagers and model inheritance</span></a>.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Some fields define extra attributes on the model, e.g. a\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> defines an extra attribute with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">_id</span></code> appended to the field name, as well as <code class=\"docutils literal notranslate\"><span class=\"pre\">related_name</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code> on the foreign model.</p>\n<p class=\"last\">These extra attributes cannot be overridden unless the field that defines\nit is changed or removed so that it no longer defines the extra attribute.</p>\n</div>\n<p>Overriding fields in a parent model leads to difficulties in areas such as\ninitializing new instances (specifying which field is being initialized in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Model.__init__</span></code>) and serialization. These are features which normal Python\nclass inheritance doesn\u2019t have to deal with in quite the same way, so the\ndifference between Django model inheritance and Python class inheritance isn\u2019t\narbitrary.</p>\n<p>This restriction only applies to attributes which are\n<a class=\"reference internal\" href=\"../../../ref/models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> instances. Normal Python attributes\ncan be overridden if you wish. It also only applies to the name of the\nattribute as Python sees it: if you are manually specifying the database\ncolumn name, you can have the same column name appearing in both a child and\nan ancestor model for multi-table inheritance (they are columns in two\ndifferent database tables).</p>\n<p>Django will raise a <a class=\"reference internal\" href=\"../../../ref/exceptions/#django.core.exceptions.FieldError\" title=\"django.core.exceptions.FieldError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">FieldError</span></code></a> if you override\nany model field in any ancestor model.</p>\n<p>Note that because of the way fields are resolved during class definition, model\nfields inherited from multiple abstract parent models are resolved in a strict\ndepth-first order. This contrasts with standard Python MRO, which is resolved\nbreadth-first in cases of diamond shaped inheritance. This difference only\naffects complex model hierarchies, which (as per the advice above) you should\ntry to avoid.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-organizing-models-in-a-package\">\n<span id=\"organizing-models-in-a-package\"></span><h2>Organizing models in a package<a class=\"headerlink\" href=\"#organizing-models-in-a-package\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-startapp\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">startapp</span></code></a> command creates an application\nstructure that includes a <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> file. If you have many models,\norganizing them in separate files may be useful.</p>\n<p>To do so, create a <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> package. Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> and create a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/models/</span></code> directory with an <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code> file and the files to\nstore your models. You must import the models in the <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code> file.</p>\n<p>For example, if you had <code class=\"docutils literal notranslate\"><span class=\"pre\">organic.py</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">synthetic.py</span></code> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code>\ndirectory:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id11\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">myapp/models/__init__.py</span></code></span><a class=\"headerlink\" href=\"#id11\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">.organic</span> <span class=\"kn\">import</span> <span class=\"n\">Person</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.synthetic</span> <span class=\"kn\">import</span> <span class=\"n\">Robot</span>\n</pre></div>\n</div>\n</div>\n<p>Explicitly importing each model rather than using <code class=\"docutils literal notranslate\"><span class=\"pre\">from</span> <span class=\"pre\">.models</span> <span class=\"pre\">import</span> <span class=\"pre\">*</span></code>\nhas the advantages of not cluttering the namespace, making code more readable,\nand keeping code analysis tools useful.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"../../../ref/models/\"><span class=\"doc\">The Models Reference</span></a></dt><dd>Covers all the model related APIs including model fields, related\nobjects, and <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</dd>\n</dl>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/queries", "Making queries", "N", "next"], ["topics/db/index", "Models and databases", "P", "previous"]], "sourcename": "topics/db/models.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Models</a><ul>\n<li><a class=\"reference internal\" href=\"#quick-example\">Quick example</a></li>\n<li><a class=\"reference internal\" href=\"#using-models\">Using models</a></li>\n<li><a class=\"reference internal\" href=\"#fields\">Fields</a><ul>\n<li><a class=\"reference internal\" href=\"#field-types\">Field types</a></li>\n<li><a class=\"reference internal\" href=\"#field-options\">Field options</a></li>\n<li><a class=\"reference internal\" href=\"#automatic-primary-key-fields\">Automatic primary key fields</a></li>\n<li><a class=\"reference internal\" href=\"#verbose-field-names\">Verbose field names</a></li>\n<li><a class=\"reference internal\" href=\"#relationships\">Relationships</a><ul>\n<li><a class=\"reference internal\" href=\"#many-to-one-relationships\">Many-to-one relationships</a></li>\n<li><a class=\"reference internal\" href=\"#many-to-many-relationships\">Many-to-many relationships</a></li>\n<li><a class=\"reference internal\" href=\"#extra-fields-on-many-to-many-relationships\">Extra fields on many-to-many relationships</a></li>\n<li><a class=\"reference internal\" href=\"#one-to-one-relationships\">One-to-one relationships</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#models-across-files\">Models across files</a></li>\n<li><a class=\"reference internal\" href=\"#field-name-restrictions\">Field name restrictions</a></li>\n<li><a class=\"reference internal\" href=\"#custom-field-types\">Custom field types</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#meta-options\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> options</a></li>\n<li><a class=\"reference internal\" href=\"#model-attributes\">Model attributes</a></li>\n<li><a class=\"reference internal\" href=\"#model-methods\">Model methods</a><ul>\n<li><a class=\"reference internal\" href=\"#overriding-predefined-model-methods\">Overriding predefined model methods</a></li>\n<li><a class=\"reference internal\" href=\"#executing-custom-sql\">Executing custom SQL</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#model-inheritance\">Model inheritance</a><ul>\n<li><a class=\"reference internal\" href=\"#abstract-base-classes\">Abstract base classes</a><ul>\n<li><a class=\"reference internal\" href=\"#meta-inheritance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> inheritance</a></li>\n<li><a class=\"reference internal\" href=\"#be-careful-with-related-name-and-related-query-name\">Be careful with <code class=\"docutils literal notranslate\"><span class=\"pre\">related_name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">related_query_name</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multi-table-inheritance\">Multi-table inheritance</a><ul>\n<li><a class=\"reference internal\" href=\"#meta-and-multi-table-inheritance\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> and multi-table inheritance</a></li>\n<li><a class=\"reference internal\" href=\"#inheritance-and-reverse-relations\">Inheritance and reverse relations</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-the-parent-link-field\">Specifying the parent link field</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#proxy-models\">Proxy models</a><ul>\n<li><a class=\"reference internal\" href=\"#querysets-still-return-the-model-that-was-requested\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>s still return the model that was requested</a></li>\n<li><a class=\"reference internal\" href=\"#base-class-restrictions\">Base class restrictions</a></li>\n<li><a class=\"reference internal\" href=\"#proxy-model-managers\">Proxy model managers</a></li>\n<li><a class=\"reference internal\" href=\"#differences-between-proxy-inheritance-and-unmanaged-models\">Differences between proxy inheritance and unmanaged models</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#multiple-inheritance\">Multiple inheritance</a></li>\n<li><a class=\"reference internal\" href=\"#field-name-hiding-is-not-permitted\">Field name \u201chiding\u201d is not permitted</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#organizing-models-in-a-package\">Organizing models in a package</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/models", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}