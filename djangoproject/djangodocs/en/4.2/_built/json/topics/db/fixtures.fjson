{"parents": [{"link": "../../", "title": "Using Django"}, {"link": "../", "title": "Models and databases"}], "prev": {"link": "../instrumentation/", "title": "Database instrumentation"}, "next": {"link": "../examples/", "title": "Examples of model relationship API usage"}, "title": "Fixtures", "meta": {}, "body": "<div class=\"section\" id=\"s-fixtures\">\n<span id=\"s-fixtures-explanation\"></span><span id=\"fixtures\"></span><span id=\"fixtures-explanation\"></span><h1>Fixtures<a class=\"headerlink\" href=\"#fixtures\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<ul class=\"last simple\">\n<li><a class=\"reference internal\" href=\"../../../howto/initial-data/\"><span class=\"doc\">How to provide initial data for models</span></a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-what-is-a-fixture\">\n<span id=\"what-is-a-fixture\"></span><h2>What is a fixture?<a class=\"headerlink\" href=\"#what-is-a-fixture\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A <em>fixture</em> is a collection of files that contain the serialized contents of\nthe database. Each fixture has a unique name, and the files that comprise the\nfixture can be distributed over multiple directories, in multiple applications.</p>\n</div>\n<div class=\"section\" id=\"s-how-to-produce-a-fixture\">\n<span id=\"how-to-produce-a-fixture\"></span><h2>How to produce a fixture?<a class=\"headerlink\" href=\"#how-to-produce-a-fixture\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Fixtures can be generated by <a class=\"reference internal\" href=\"../../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">dumpdata</span></code></a>. It\u2019s\nalso possible to generate custom fixtures by directly using\n<a class=\"reference internal\" href=\"../../serialization/\"><span class=\"doc\">serialization documentation</span></a> tools or even by\nhandwriting them.</p>\n</div>\n<div class=\"section\" id=\"s-what-to-use-a-fixture-for\">\n<span id=\"what-to-use-a-fixture-for\"></span><h2>What to use a fixture for?<a class=\"headerlink\" href=\"#what-to-use-a-fixture-for\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Fixtures can be used to pre-populate database with data for\n<a class=\"reference internal\" href=\"../../testing/tools/#topics-testing-fixtures\"><span class=\"std std-ref\">tests</span></a> or to provide some <a class=\"reference internal\" href=\"../../../howto/initial-data/#initial-data-via-fixtures\"><span class=\"std std-ref\">initial data</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-were-django-looks-for-fixtures\">\n<span id=\"were-django-looks-for-fixtures\"></span><h2>Were Django looks for fixtures?<a class=\"headerlink\" href=\"#were-django-looks-for-fixtures\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django will search in three locations for fixtures:</p>\n<ol class=\"arabic simple\">\n<li>In the <code class=\"docutils literal notranslate\"><span class=\"pre\">fixtures</span></code> directory of every installed application</li>\n<li>In any directory named in the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-FIXTURE_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FIXTURE_DIRS</span></code></a> setting</li>\n<li>In the literal path named by the fixture</li>\n</ol>\n<p>Django will load any and all fixtures it finds in these locations that match\nthe provided fixture names.</p>\n<p>If the named fixture has a file extension, only fixtures of that type\nwill be loaded. For example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>django-admin loaddata mydata.json\n</pre></div>\n</div>\n<p>would only load JSON fixtures called <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata</span></code>. The fixture extension\nmust correspond to the registered name of a\n<a class=\"reference internal\" href=\"../../serialization/#serialization-formats\"><span class=\"std std-ref\">serializer</span></a> (e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">json</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">xml</span></code>).</p>\n<p>If you omit the extensions, Django will search all available fixture types\nfor a matching fixture. For example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>django-admin loaddata mydata\n</pre></div>\n</div>\n<p>would look for any fixture of any fixture type called <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata</span></code>. If a fixture\ndirectory contained <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json</span></code>, that fixture would be loaded\nas a JSON fixture.</p>\n<p>The fixtures that are named can include directory components. These\ndirectories will be included in the search path. For example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>django-admin loaddata foo/bar/mydata.json\n</pre></div>\n</div>\n<p>would search <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;app_label&gt;/fixtures/foo/bar/mydata.json</span></code> for each installed\napplication,  <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;dirname&gt;/foo/bar/mydata.json</span></code> for each directory in\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-FIXTURE_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FIXTURE_DIRS</span></code></a>, and the literal path <code class=\"docutils literal notranslate\"><span class=\"pre\">foo/bar/mydata.json</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-how-fixtures-are-saved-to-the-database\">\n<span id=\"how-fixtures-are-saved-to-the-database\"></span><h2>How fixtures are saved to the database?<a class=\"headerlink\" href=\"#how-fixtures-are-saved-to-the-database\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When fixture files are processed, the data is saved to the database as is.\nModel defined <a class=\"reference internal\" href=\"../../../ref/models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> methods are not called, and\nany <a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a> or\n<a class=\"reference internal\" href=\"../../../ref/signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a> signals will be called with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">raw=True</span></code> since the instance only contains attributes that are local to the\nmodel. You may, for example, want to disable handlers that access\nrelated fields that aren\u2019t present during fixture loading and would otherwise\nraise an exception:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_save</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyModel</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># disable the handler during fixture loading</span>\n    <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;raw&quot;</span><span class=\"p\">]:</span>\n        <span class=\"k\">return</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"n\">post_save</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">my_handler</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">MyModel</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>You could also write a decorator to encapsulate this logic:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">wraps</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">disable_for_loaddata</span><span class=\"p\">(</span><span class=\"n\">signal_handler</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Decorator that turns off signal handlers when loading fixture data.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n\n    <span class=\"nd\">@wraps</span><span class=\"p\">(</span><span class=\"n\">signal_handler</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;raw&quot;</span><span class=\"p\">]:</span>\n            <span class=\"k\">return</span>\n        <span class=\"n\">signal_handler</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">wrapper</span>\n\n\n<span class=\"nd\">@disable_for_loaddata</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_handler</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Just be aware that this logic will disable the signals whenever fixtures are\ndeserialized, not just during <code class=\"docutils literal notranslate\"><span class=\"pre\">loaddata</span></code>.</p>\n<p>Note that the order in which fixture files are processed is undefined. However,\nall fixture data is installed as a single transaction, so data in\none fixture can reference data in another fixture. If the database backend\nsupports row-level constraints, these constraints will be checked at the\nend of the transaction.</p>\n</div>\n<div class=\"section\" id=\"s-compressed-fixtures\">\n<span id=\"compressed-fixtures\"></span><h2>Compressed fixtures<a class=\"headerlink\" href=\"#compressed-fixtures\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Fixtures may be compressed in <code class=\"docutils literal notranslate\"><span class=\"pre\">zip</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">gz</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">bz2</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">lzma</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">xz</span></code>\nformat. For example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>django-admin loaddata mydata.json\n</pre></div>\n</div>\n<p>would look for any of <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json.zip</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json.gz</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json.bz2</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json.lzma</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json.xz</span></code>. The first\nfile contained within a compressed archive is used.</p>\n<p>Note that if two fixtures with the same name but different\nfixture type are discovered (for example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.json</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.xml.gz</span></code> were found in the same fixture directory), fixture\ninstallation will be aborted, and any data installed in the call to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">loaddata</span></code> will be removed from the database.</p>\n<div class=\"admonition-mysql-with-myisam-and-fixtures admonition\">\n<p class=\"first admonition-title\">MySQL with MyISAM and fixtures</p>\n<p class=\"last\">The MyISAM storage engine of MySQL doesn\u2019t support transactions or\nconstraints, so if you use MyISAM, you won\u2019t get validation of fixture\ndata, or a rollback if multiple transaction files are found.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-database-specific-fixtures\">\n<span id=\"database-specific-fixtures\"></span><h2>Database-specific fixtures<a class=\"headerlink\" href=\"#database-specific-fixtures\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you\u2019re in a multi-database setup, you might have fixture data that\nyou want to load onto one database, but not onto another. In this\nsituation, you can add a database identifier into the names of your fixtures.</p>\n<p>For example, if your <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> setting has a <code class=\"docutils literal notranslate\"><span class=\"pre\">users</span></code> database\ndefined, name the fixture <code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.users.json</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mydata.users.json.gz</span></code> and the fixture will only be loaded when you\nspecify you want to load data into the <code class=\"docutils literal notranslate\"><span class=\"pre\">users</span></code> database.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/db/examples/index", "Examples of model relationship API usage", "N", "next"], ["topics/db/instrumentation", "Database instrumentation", "P", "previous"]], "sourcename": "topics/db/fixtures.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Fixtures</a><ul>\n<li><a class=\"reference internal\" href=\"#what-is-a-fixture\">What is a fixture?</a></li>\n<li><a class=\"reference internal\" href=\"#how-to-produce-a-fixture\">How to produce a fixture?</a></li>\n<li><a class=\"reference internal\" href=\"#what-to-use-a-fixture-for\">What to use a fixture for?</a></li>\n<li><a class=\"reference internal\" href=\"#were-django-looks-for-fixtures\">Were Django looks for fixtures?</a></li>\n<li><a class=\"reference internal\" href=\"#how-fixtures-are-saved-to-the-database\">How fixtures are saved to the database?</a></li>\n<li><a class=\"reference internal\" href=\"#compressed-fixtures\">Compressed fixtures</a></li>\n<li><a class=\"reference internal\" href=\"#database-specific-fixtures\">Database-specific fixtures</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/db/fixtures", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
