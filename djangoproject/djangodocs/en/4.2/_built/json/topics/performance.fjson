{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../security/", "title": "Security in Django"}, "next": {"link": "../serialization/", "title": "Serializing Django objects"}, "title": "Performance and optimization", "meta": {}, "body": "<div class=\"section\" id=\"s-performance-and-optimization\">\n<span id=\"performance-and-optimization\"></span><h1>Performance and optimization<a class=\"headerlink\" href=\"#performance-and-optimization\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document provides an overview of techniques and tools that can help get\nyour Django code running more efficiently - faster, and using fewer system\nresources.</p>\n<div class=\"section\" id=\"s-introduction\">\n<span id=\"introduction\"></span><h2>Introduction<a class=\"headerlink\" href=\"#introduction\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Generally one\u2019s first concern is to write code that <em>works</em>, whose logic\nfunctions as required to produce the expected output. Sometimes, however, this\nwill not be enough to make the code work as <em>efficiently</em> as one would like.</p>\n<p>In this case, what\u2019s needed is something - and in practice, often a collection\nof things - to improve the code\u2019s performance without, or only minimally,\naffecting its behavior.</p>\n</div>\n<div class=\"section\" id=\"s-general-approaches\">\n<span id=\"general-approaches\"></span><h2>General approaches<a class=\"headerlink\" href=\"#general-approaches\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-what-are-you-optimizing-for\">\n<span id=\"what-are-you-optimizing-for\"></span><h3>What are you optimizing <em>for</em>?<a class=\"headerlink\" href=\"#what-are-you-optimizing-for\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s important to have a clear idea what you mean by \u2018performance\u2019. There is\nnot just one metric of it.</p>\n<p>Improved speed might be the most obvious aim for a program, but sometimes other\nperformance improvements might be sought, such as lower memory consumption or\nfewer demands on the database or network.</p>\n<p>Improvements in one area will often bring about improved performance in\nanother, but not always; sometimes one can even be at the expense of another.\nFor example, an improvement in a program\u2019s speed might cause it to use more\nmemory. Even worse, it can be self-defeating - if the speed improvement is so\nmemory-hungry that the system starts to run out of memory, you\u2019ll have done\nmore harm than good.</p>\n<p>There are other trade-offs to bear in mind. Your own time is a valuable\nresource, more precious than CPU time. Some improvements might be too difficult\nto be worth implementing, or might affect the portability or maintainability of\nthe code. Not all performance improvements are worth the effort.</p>\n<p>So, you need to know what performance improvements you are aiming for, and you\nalso need to know that you have a good reason for aiming in that direction -\nand for that you need:</p>\n</div>\n<div class=\"section\" id=\"s-performance-benchmarking\">\n<span id=\"performance-benchmarking\"></span><h3>Performance benchmarking<a class=\"headerlink\" href=\"#performance-benchmarking\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s no good just guessing or assuming where the inefficiencies lie in your\ncode.</p>\n<div class=\"section\" id=\"s-django-tools\">\n<span id=\"django-tools\"></span><h4>Django tools<a class=\"headerlink\" href=\"#django-tools\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference external\" href=\"https://github.com/jazzband/django-debug-toolbar/\">django-debug-toolbar</a> is a very handy tool that\nprovides insights into what your code is doing and how much time it spends\ndoing it. In particular it can show you all the SQL queries your page is\ngenerating, and how long each one has taken.</p>\n<p>Third-party panels are also available for the toolbar, that can (for example)\nreport on cache performance and template rendering times.</p>\n</div>\n<div class=\"section\" id=\"s-third-party-services\">\n<span id=\"third-party-services\"></span><h4>Third-party services<a class=\"headerlink\" href=\"#third-party-services\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>There are a number of free services that will analyze and report on the\nperformance of your site\u2019s pages from the perspective of a remote HTTP client,\nin effect simulating the experience of an actual user.</p>\n<p>These can\u2019t report on the internals of your code, but can provide a useful\ninsight into your site\u2019s overall performance, including aspects that can\u2019t be\nadequately measured from within Django environment. Examples include:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"http://yslow.org/\">Yahoo\u2019s Yslow</a></li>\n<li><a class=\"reference external\" href=\"https://developers.google.com/speed/\">Google PageSpeed</a></li>\n</ul>\n<p>There are also several paid-for services that perform a similar analysis,\nincluding some that are Django-aware and can integrate with your codebase to\nprofile its performance far more comprehensively.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-get-things-right-from-the-start\">\n<span id=\"get-things-right-from-the-start\"></span><h3>Get things right from the start<a class=\"headerlink\" href=\"#get-things-right-from-the-start\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some work in optimization involves tackling performance shortcomings, but some\nof the work can be built-in to what you\u2019d do anyway, as part of the good\npractices you should adopt even before you start thinking about improving\nperformance.</p>\n<p>In this respect Python is an excellent language to work with, because solutions\nthat look elegant and feel right usually are the best performing ones. As with\nmost skills, learning what \u201clooks right\u201d takes practice, but one of the most\nuseful guidelines is:</p>\n<div class=\"section\" id=\"s-work-at-the-appropriate-level\">\n<span id=\"work-at-the-appropriate-level\"></span><h4>Work at the appropriate level<a class=\"headerlink\" href=\"#work-at-the-appropriate-level\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Django offers many different ways of approaching things, but just because it\u2019s\npossible to do something in a certain way doesn\u2019t mean that it\u2019s the most\nappropriate way to do it. For example, you might find that you could calculate\nthe same thing - the number of items in a collection, perhaps - in a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>, in Python, or in a template.</p>\n<p>However, it will almost always be faster to do this work at lower rather than\nhigher levels. At higher levels the system has to deal with objects through\nmultiple levels of abstraction and layers of machinery.</p>\n<p>That is, the database can typically do things faster than Python can, which can\ndo them faster than the template language can:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># QuerySet operation on the database</span>\n<span class=\"c1\"># fast, because that&#39;s what databases are good at</span>\n<span class=\"n\">my_bicycles</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># counting Python objects</span>\n<span class=\"c1\"># slower, because it requires a database query anyway, and processing</span>\n<span class=\"c1\"># of the Python objects</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">my_bicycles</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cm\">&lt;!--</span>\n<span class=\"cm\">Django template filter</span>\n<span class=\"cm\">slower still, because it will have to count them in Python anyway,</span>\n<span class=\"cm\">and because of template language overheads</span>\n<span class=\"cm\">--&gt;</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">my_bicycles</span><span class=\"o\">|</span><span class=\"nf\">length</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Generally speaking, the most appropriate level for the job is the lowest-level\none that it is comfortable to code for.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The example above is merely illustrative.</p>\n<p>Firstly, in a real-life case you need to consider what is happening before\nand after your count to work out what\u2019s an optimal way of doing it <em>in that\nparticular context</em>. The database optimization documents describes <a class=\"reference internal\" href=\"../db/optimization/#overuse-of-count-and-exists\"><span class=\"std std-ref\">a\ncase where counting in the template would be better</span></a>.</p>\n<p class=\"last\">Secondly, there are other options to consider: in a real-life case, <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span>\n<span class=\"pre\">my_bicycles.count</span> <span class=\"pre\">}}</span></code>, which invokes the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">count()</span></code> method\ndirectly from the template, might be the most appropriate choice.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-caching\">\n<span id=\"caching\"></span><h2>Caching<a class=\"headerlink\" href=\"#caching\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Often it is expensive (that is, resource-hungry and slow) to compute a value,\nso there can be huge benefit in saving the value to a quickly accessible cache,\nready for the next time it\u2019s required.</p>\n<p>It\u2019s a sufficiently significant and powerful technique that Django includes a\ncomprehensive caching framework, as well as other smaller pieces of caching\nfunctionality.</p>\n<div class=\"section\" id=\"s-the-caching-framework\">\n<span id=\"the-caching-framework\"></span><h3><a class=\"reference internal\" href=\"../cache/\"><span class=\"doc\">The caching framework</span></a><a class=\"headerlink\" href=\"#the-caching-framework\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s <a class=\"reference internal\" href=\"../cache/\"><span class=\"doc\">caching framework</span></a> offers very significant\nopportunities for performance gains, by saving dynamic content so that it\ndoesn\u2019t need to be calculated for each request.</p>\n<p>For convenience, Django offers different levels of cache granularity: you can\ncache the output of specific views, or only the pieces that are difficult to\nproduce, or even an entire site.</p>\n<p>Implementing caching should not be regarded as an alternative to improving code\nthat\u2019s performing poorly because it has been written badly. It\u2019s one of the\nfinal steps toward producing well-performing code, not a shortcut.</p>\n</div>\n<div class=\"section\" id=\"s-cached-property\">\n<span id=\"cached-property\"></span><h3><a class=\"reference internal\" href=\"../../ref/utils/#django.utils.functional.cached_property\" title=\"django.utils.functional.cached_property\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cached_property</span></code></a><a class=\"headerlink\" href=\"#cached-property\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s common to have to call a class instance\u2019s method more than once. If\nthat function is expensive, then doing so can be wasteful.</p>\n<p>Using the <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.functional.cached_property\" title=\"django.utils.functional.cached_property\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cached_property</span></code></a> decorator saves the\nvalue returned by a property; the next time the function is called on that\ninstance, it will return the saved value rather than re-computing it. Note that\nthis only works on methods that take <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code> as their only argument and that\nit changes the method to a property.</p>\n<p>Certain Django components also have their own caching functionality; these are\ndiscussed below in the sections related to those components.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-understanding-laziness\">\n<span id=\"understanding-laziness\"></span><h2>Understanding laziness<a class=\"headerlink\" href=\"#understanding-laziness\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><em>Laziness</em> is a strategy complementary to caching. Caching avoids\nrecomputation by saving results; laziness delays computation until it\u2019s\nactually required.</p>\n<p>Laziness allows us to refer to things before they are instantiated, or even\nbefore it\u2019s possible to instantiate them. This has numerous uses.</p>\n<p>For example, <a class=\"reference internal\" href=\"../i18n/translation/#lazy-translations\"><span class=\"std std-ref\">lazy translation</span></a> can be used before the\ntarget language is even known, because it doesn\u2019t take place until the\ntranslated string is actually required, such as in a rendered template.</p>\n<p>Laziness is also a way to save effort by trying to avoid work in the first\nplace. That is, one aspect of laziness is not doing anything until it has to be\ndone, because it may not turn out to be necessary after all. Laziness can\ntherefore have performance implications, and the more expensive the work\nconcerned, the more there is to gain through laziness.</p>\n<p>Python provides a number of tools for lazy evaluation, particularly through the\n<a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-generator\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">generator</span></a> and <a class=\"reference external\" href=\"https://docs.python.org/3/glossary.html#term-generator-expression\" title=\"(in Python v3.11)\"><span class=\"xref std std-term\">generator expression</span></a> constructs. It\u2019s worth\nreading up on laziness in Python to discover opportunities for making use of\nlazy patterns in your code.</p>\n<div class=\"section\" id=\"s-laziness-in-django\">\n<span id=\"laziness-in-django\"></span><h3>Laziness in Django<a class=\"headerlink\" href=\"#laziness-in-django\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django is itself quite lazy. A good example of this can be found in the\nevaluation of <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code>. <a class=\"reference internal\" href=\"../db/queries/#querysets-are-lazy\"><span class=\"std std-ref\">QuerySets are lazy</span></a>.\nThus a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> can be created, passed around and combined with other\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code>, without actually incurring any trips to the database to fetch\nthe items it describes. What gets passed around is the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> object, not\nthe collection of items that - eventually - will be required from the database.</p>\n<p>On the other hand, <a class=\"reference internal\" href=\"../../ref/models/querysets/#when-querysets-are-evaluated\"><span class=\"std std-ref\">certain operations will force the evaluation of a\nQuerySet</span></a>. Avoiding the premature evaluation of\na <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> can save making an expensive and unnecessary trip to the\ndatabase.</p>\n<p>Django also offers a <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.functional.keep_lazy\" title=\"django.utils.functional.keep_lazy\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">keep_lazy()</span></code></a> decorator.\nThis allows a function that has been called with a lazy argument to behave\nlazily itself, only being evaluated when it needs to be. Thus the lazy argument\n- which could be an expensive one - will not be called upon for evaluation\nuntil it\u2019s strictly required.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-databases\">\n<span id=\"databases\"></span><h2>Databases<a class=\"headerlink\" href=\"#databases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-database-optimization\">\n<span id=\"database-optimization\"></span><h3>Database optimization<a class=\"headerlink\" href=\"#database-optimization\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s database layer provides various ways to help developers get the best\nperformance from their databases. The <a class=\"reference internal\" href=\"../db/optimization/\"><span class=\"doc\">database optimization documentation</span></a> gathers together links to the relevant\ndocumentation and adds various tips that outline the steps to take when\nattempting to optimize your database usage.</p>\n</div>\n<div class=\"section\" id=\"s-other-database-related-tips\">\n<span id=\"other-database-related-tips\"></span><h3>Other database-related tips<a class=\"headerlink\" href=\"#other-database-related-tips\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Enabling <a class=\"reference internal\" href=\"../../ref/databases/#persistent-database-connections\"><span class=\"std std-ref\">Persistent connections</span></a> can speed up connections to the\ndatabase accounts for a significant part of the request processing time.</p>\n<p>This helps a lot on virtualized hosts with limited network performance, for example.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-http-performance\">\n<span id=\"http-performance\"></span><h2>HTTP performance<a class=\"headerlink\" href=\"#http-performance\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-middleware\">\n<span id=\"middleware\"></span><h3>Middleware<a class=\"headerlink\" href=\"#middleware\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django comes with a few helpful pieces of <a class=\"reference internal\" href=\"../../ref/middleware/\"><span class=\"doc\">middleware</span></a>\nthat can help optimize your site\u2019s performance. They include:</p>\n<div class=\"section\" id=\"s-conditionalgetmiddleware\">\n<span id=\"conditionalgetmiddleware\"></span><h4><a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.http.ConditionalGetMiddleware\" title=\"django.middleware.http.ConditionalGetMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConditionalGetMiddleware</span></code></a><a class=\"headerlink\" href=\"#conditionalgetmiddleware\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Adds support for modern browsers to conditionally GET responses based on the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ETag</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Last-Modified</span></code> headers. It also calculates and sets an ETag if\nneeded.</p>\n</div>\n<div class=\"section\" id=\"s-gzipmiddleware\">\n<span id=\"gzipmiddleware\"></span><h4><a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.gzip.GZipMiddleware\" title=\"django.middleware.gzip.GZipMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GZipMiddleware</span></code></a><a class=\"headerlink\" href=\"#gzipmiddleware\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Compresses responses for all modern browsers, saving bandwidth and transfer\ntime. Note that GZipMiddleware is currently considered a security risk, and is\nvulnerable to attacks that nullify the protection provided by TLS/SSL. See the\nwarning in <a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.gzip.GZipMiddleware\" title=\"django.middleware.gzip.GZipMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GZipMiddleware</span></code></a> for more information.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-sessions\">\n<span id=\"sessions\"></span><h3>Sessions<a class=\"headerlink\" href=\"#sessions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-using-cached-sessions\">\n<span id=\"using-cached-sessions\"></span><h4>Using cached sessions<a class=\"headerlink\" href=\"#using-cached-sessions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference internal\" href=\"../http/sessions/#cached-sessions-backend\"><span class=\"std std-ref\">Using cached sessions</span></a> may be a way to increase\nperformance by eliminating the need to load session data from a slower storage\nsource like the database and instead storing frequently used session data in\nmemory.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-static-files\">\n<span id=\"static-files\"></span><h3>Static files<a class=\"headerlink\" href=\"#static-files\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Static files, which by definition are not dynamic, make an excellent target for\noptimization gains.</p>\n<div class=\"section\" id=\"s-manifeststaticfilesstorage\">\n<span id=\"manifeststaticfilesstorage\"></span><h4><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.storage.ManifestStaticFilesStorage\" title=\"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManifestStaticFilesStorage</span></code></a><a class=\"headerlink\" href=\"#manifeststaticfilesstorage\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>By taking advantage of web browsers\u2019 caching abilities, you can\neliminate network hits entirely for a given file after the initial download.</p>\n<p><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.storage.ManifestStaticFilesStorage\" title=\"django.contrib.staticfiles.storage.ManifestStaticFilesStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManifestStaticFilesStorage</span></code></a> appends a\ncontent-dependent tag to the filenames of <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/\"><span class=\"doc\">static files</span></a> to make it safe for browsers to cache them\nlong-term without missing future changes - when a file changes, so will the\ntag, so browsers will reload the asset automatically.</p>\n</div>\n<div class=\"section\" id=\"s-minification\">\n<span id=\"minification\"></span><h4>\u201cMinification\u201d<a class=\"headerlink\" href=\"#minification\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Several third-party Django tools and packages provide the ability to \u201cminify\u201d\nHTML, CSS, and JavaScript. They remove unnecessary whitespace, newlines, and\ncomments, and shorten variable names, and thus reduce the size of the documents\nthat your site publishes.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-template-performance\">\n<span id=\"template-performance\"></span><h2>Template performance<a class=\"headerlink\" href=\"#template-performance\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Note that:</p>\n<ul class=\"simple\">\n<li>using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">block</span> <span class=\"pre\">%}</span></code> is faster than using <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">include</span> <span class=\"pre\">%}</span></code></li>\n<li>heavily-fragmented templates, assembled from many small pieces, can affect\nperformance</li>\n</ul>\n<div class=\"section\" id=\"s-the-cached-template-loader\">\n<span id=\"the-cached-template-loader\"></span><h3>The cached template loader<a class=\"headerlink\" href=\"#the-cached-template-loader\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Enabling the <a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.loaders.cached.Loader\" title=\"django.template.loaders.cached.Loader\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cached</span> <span class=\"pre\">template</span> <span class=\"pre\">loader</span></code></a> often improves performance\ndrastically, as it avoids compiling each template every time it needs to be\nrendered.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-different-versions-of-available-software\">\n<span id=\"using-different-versions-of-available-software\"></span><h2>Using different versions of available software<a class=\"headerlink\" href=\"#using-different-versions-of-available-software\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>It can sometimes be worth checking whether different and better-performing\nversions of the software that you\u2019re using are available.</p>\n<p>These techniques are targeted at more advanced users who want to push the\nboundaries of performance of an already well-optimized Django site.</p>\n<p>However, they are not magic solutions to performance problems, and they\u2019re\nunlikely to bring better than marginal gains to sites that don\u2019t already do the\nmore basic things the right way.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">It\u2019s worth repeating: <strong>reaching for alternatives to software you\u2019re\nalready using is never the first answer to performance problems</strong>. When\nyou reach this level of optimization, you need a formal benchmarking\nsolution.</p>\n</div>\n<div class=\"section\" id=\"s-newer-is-often-but-not-always-better\">\n<span id=\"newer-is-often-but-not-always-better\"></span><h3>Newer is often - but not always - better<a class=\"headerlink\" href=\"#newer-is-often-but-not-always-better\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It\u2019s fairly rare for a new release of well-maintained software to be less\nefficient, but the maintainers can\u2019t anticipate every possible use-case - so\nwhile being aware that newer versions are likely to perform better, don\u2019t\nassume that they always will.</p>\n<p>This is true of Django itself. Successive releases have offered a number of\nimprovements across the system, but you should still check the real-world\nperformance of your application, because in some cases you may find that\nchanges mean it performs worse rather than better.</p>\n<p>Newer versions of Python, and also of Python packages, will often perform\nbetter too - but measure, rather than assume.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Unless you\u2019ve encountered an unusual performance problem in a particular\nversion, you\u2019ll generally find better features, reliability, and security\nin a new release and that these benefits are far more significant than any\nperformance you might win or lose.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-alternatives-to-django-s-template-language\">\n<span id=\"alternatives-to-django-s-template-language\"></span><h3>Alternatives to Django\u2019s template language<a class=\"headerlink\" href=\"#alternatives-to-django-s-template-language\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For nearly all cases, Django\u2019s built-in template language is perfectly\nadequate. However, if the bottlenecks in your Django project seem to lie in the\ntemplate system and you have exhausted other opportunities to remedy this, a\nthird-party alternative may be the answer.</p>\n<p><a class=\"reference external\" href=\"https://jinja.palletsprojects.com/\">Jinja2</a> can offer performance improvements, particularly when it comes to\nspeed.</p>\n<p>Alternative template systems vary in the extent to which they share Django\u2019s\ntemplating language.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><em>If</em> you experience performance issues in templates, the first thing to do\nis to understand exactly why. Using an alternative template system may\nprove faster, but the same gains may also be available without going to\nthat trouble - for example, expensive processing and logic in your\ntemplates could be done more efficiently in your views.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-alternative-software-implementations\">\n<span id=\"alternative-software-implementations\"></span><h3>Alternative software implementations<a class=\"headerlink\" href=\"#alternative-software-implementations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>It may be worth checking whether Python software you\u2019re using has been\nprovided in a different implementation that can execute the same code faster.</p>\n<p>However: most performance problems in well-written Django sites aren\u2019t at the\nPython execution level, but rather in inefficient database querying, caching,\nand templates. If you\u2019re relying on poorly-written Python code, your\nperformance problems are unlikely to be solved by having it execute faster.</p>\n<p>Using an alternative implementation may introduce compatibility, deployment,\nportability, or maintenance issues. It goes without saying that before adopting\na non-standard implementation you should ensure it provides sufficient\nperformance gains for your application to outweigh the potential risks.</p>\n<p>With these caveats in mind, you should be aware of:</p>\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h4><a class=\"reference external\" href=\"https://www.pypy.org/\">PyPy</a><a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><a class=\"reference external\" href=\"https://www.pypy.org/\">PyPy</a> is an implementation of Python in Python itself\n(the \u2018standard\u2019 Python implementation is in C). PyPy can offer substantial\nperformance gains, typically for heavyweight applications.</p>\n<p>A key aim of the PyPy project is <a class=\"reference external\" href=\"https://www.pypy.org/compat.html\">compatibility</a> with existing Python APIs and libraries.\nDjango is compatible, but you will need to check the compatibility of other\nlibraries you rely on.</p>\n</div>\n<div class=\"section\" id=\"s-c-implementations-of-python-libraries\">\n<span id=\"c-implementations-of-python-libraries\"></span><h4>C implementations of Python libraries<a class=\"headerlink\" href=\"#c-implementations-of-python-libraries\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Some Python libraries are also implemented in C, and can be much faster. They\naim to offer the same APIs. Note that compatibility issues and behavior\ndifferences are not unknown (and not always immediately evident).</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/serialization", "Serializing Django objects", "N", "next"], ["topics/security", "Security in Django", "P", "previous"]], "sourcename": "topics/performance.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Performance and optimization</a><ul>\n<li><a class=\"reference internal\" href=\"#introduction\">Introduction</a></li>\n<li><a class=\"reference internal\" href=\"#general-approaches\">General approaches</a><ul>\n<li><a class=\"reference internal\" href=\"#what-are-you-optimizing-for\">What are you optimizing <em>for</em>?</a></li>\n<li><a class=\"reference internal\" href=\"#performance-benchmarking\">Performance benchmarking</a><ul>\n<li><a class=\"reference internal\" href=\"#django-tools\">Django tools</a></li>\n<li><a class=\"reference internal\" href=\"#third-party-services\">Third-party services</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#get-things-right-from-the-start\">Get things right from the start</a><ul>\n<li><a class=\"reference internal\" href=\"#work-at-the-appropriate-level\">Work at the appropriate level</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#caching\">Caching</a><ul>\n<li><a class=\"reference internal\" href=\"#the-caching-framework\"><span class=\"xref std std-doc\">The caching framework</span></a></li>\n<li><a class=\"reference internal\" href=\"#cached-property\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">cached_property</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#understanding-laziness\">Understanding laziness</a><ul>\n<li><a class=\"reference internal\" href=\"#laziness-in-django\">Laziness in Django</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#databases\">Databases</a><ul>\n<li><a class=\"reference internal\" href=\"#database-optimization\">Database optimization</a></li>\n<li><a class=\"reference internal\" href=\"#other-database-related-tips\">Other database-related tips</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#http-performance\">HTTP performance</a><ul>\n<li><a class=\"reference internal\" href=\"#middleware\">Middleware</a><ul>\n<li><a class=\"reference internal\" href=\"#conditionalgetmiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ConditionalGetMiddleware</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#gzipmiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GZipMiddleware</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sessions\">Sessions</a><ul>\n<li><a class=\"reference internal\" href=\"#using-cached-sessions\">Using cached sessions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#static-files\">Static files</a><ul>\n<li><a class=\"reference internal\" href=\"#manifeststaticfilesstorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManifestStaticFilesStorage</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#minification\">\u201cMinification\u201d</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#template-performance\">Template performance</a><ul>\n<li><a class=\"reference internal\" href=\"#the-cached-template-loader\">The cached template loader</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#using-different-versions-of-available-software\">Using different versions of available software</a><ul>\n<li><a class=\"reference internal\" href=\"#newer-is-often-but-not-always-better\">Newer is often - but not always - better</a></li>\n<li><a class=\"reference internal\" href=\"#alternatives-to-django-s-template-language\">Alternatives to Django\u2019s template language</a></li>\n<li><a class=\"reference internal\" href=\"#alternative-software-implementations\">Alternative software implementations</a><ul>\n<li><a class=\"reference internal\" href=\"#id1\">PyPy</a></li>\n<li><a class=\"reference internal\" href=\"#c-implementations-of-python-libraries\">C implementations of Python libraries</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/performance", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
