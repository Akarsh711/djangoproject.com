{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../http/sessions/", "title": "How to use sessions"}, "next": {"link": "formsets/", "title": "Formsets"}, "title": "Working with forms", "meta": {}, "body": "<div class=\"section\" id=\"s-working-with-forms\">\n<span id=\"working-with-forms\"></span><h1>Working with forms<a class=\"headerlink\" href=\"#working-with-forms\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition-about-this-document admonition\">\n<p class=\"first admonition-title\">About this document</p>\n<p class=\"last\">This document provides an introduction to the basics of web forms and how\nthey are handled in Django. For a more detailed look at specific areas of\nthe forms API, see <a class=\"reference internal\" href=\"../../ref/forms/api/\"><span class=\"doc\">The Forms API</span></a>, <a class=\"reference internal\" href=\"../../ref/forms/fields/\"><span class=\"doc\">Form fields</span></a>, and\n<a class=\"reference internal\" href=\"../../ref/forms/validation/\"><span class=\"doc\">Form and field validation</span></a>.</p>\n</div>\n<p>Unless you\u2019re planning to build websites and applications that do nothing but\npublish content, and don\u2019t accept input from your visitors, you\u2019re going to\nneed to understand and use forms.</p>\n<p>Django provides a range of tools and libraries to help you build forms to\naccept input from site visitors, and then process and respond to the input.</p>\n<div class=\"section\" id=\"s-html-forms\">\n<span id=\"html-forms\"></span><h2>HTML forms<a class=\"headerlink\" href=\"#html-forms\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In HTML, a form is a collection of elements inside <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;...&lt;/form&gt;</span></code> that\nallow a visitor to do things like enter text, select options, manipulate\nobjects or controls, and so on, and then send that information back to the\nserver.</p>\n<p>Some of these form interface elements - text input or checkboxes - are built\ninto HTML itself. Others are much more complex; an interface that pops up a\ndate picker or allows you to move a slider or manipulate controls will\ntypically use JavaScript and CSS as well as HTML form <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> elements to\nachieve these effects.</p>\n<p>As well as its <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> elements, a form must specify two things:</p>\n<ul class=\"simple\">\n<li><em>where</em>: the URL to which the data corresponding to the user\u2019s input should\nbe returned</li>\n<li><em>how</em>: the HTTP method the data should be returned by</li>\n</ul>\n<p>As an example, the login form for the Django admin contains several\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> elements: one of <code class=\"docutils literal notranslate\"><span class=\"pre\">type=&quot;text&quot;</span></code> for the username, one of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">type=&quot;password&quot;</span></code> for the password, and one of <code class=\"docutils literal notranslate\"><span class=\"pre\">type=&quot;submit&quot;</span></code> for the\n\u201cLog in\u201d button. It also contains some hidden text fields that the user\ndoesn\u2019t see, which Django uses to determine what to do next.</p>\n<p>It also tells the browser that the form data should be sent to the URL\nspecified in the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code> attribute - <code class=\"docutils literal notranslate\"><span class=\"pre\">/admin/</span></code> - and that it\nshould be sent using the HTTP mechanism specified by the <code class=\"docutils literal notranslate\"><span class=\"pre\">method</span></code> attribute -\n<code class=\"docutils literal notranslate\"><span class=\"pre\">post</span></code>.</p>\n<p>When the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span> <span class=\"pre\">type=&quot;submit&quot;</span> <span class=\"pre\">value=&quot;Log</span> <span class=\"pre\">in&quot;&gt;</span></code> element is triggered, the\ndata is returned to <code class=\"docutils literal notranslate\"><span class=\"pre\">/admin/</span></code>.</p>\n<div class=\"section\" id=\"s-get-and-post\">\n<span id=\"get-and-post\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code><a class=\"headerlink\" href=\"#get-and-post\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> are the only HTTP methods to use when dealing with forms.</p>\n<p>Django\u2019s login form is returned using the <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> method, in which the browser\nbundles up the form data, encodes it for transmission, sends it to the server,\nand then receives back its response.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>, by contrast, bundles the submitted data into a string, and uses this\nto compose a URL. The URL contains the address where the data must be sent, as\nwell as the data keys and values. You can see this in action if you do a search\nin the Django documentation, which will produce a URL of the form\n<code class=\"docutils literal notranslate\"><span class=\"pre\">https://docs.djangoproject.com/search/?q=forms&amp;release=1</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> are typically used for different purposes.</p>\n<p>Any request that could be used to change the state of the system - for example,\na request that makes changes in the database - should use <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>\nshould be used only for requests that do not affect the state of the system.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> would also be unsuitable for a password form, because the password\nwould appear in the URL, and thus, also in browser history and server logs,\nall in plain text. Neither would it be suitable for large quantities of data,\nor for binary data, such as an image. A web application that uses <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code>\nrequests for admin forms is a security risk: it can be easy for an attacker to\nmimic a form\u2019s request to gain access to sensitive parts of the system.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>, coupled with other protections like Django\u2019s <a class=\"reference internal\" href=\"../../ref/csrf/\"><span class=\"doc\">CSRF protection</span></a> offers more control over access.</p>\n<p>On the other hand, <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> is suitable for things like a web search form,\nbecause the URLs that represent a <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> request can easily be bookmarked,\nshared, or resubmitted.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-django-s-role-in-forms\">\n<span id=\"django-s-role-in-forms\"></span><h2>Django\u2019s role in forms<a class=\"headerlink\" href=\"#django-s-role-in-forms\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Handling forms is a complex business. Consider Django\u2019s admin, where numerous\nitems of data of several different types may need to be prepared for display in\na form, rendered as HTML, edited using a convenient interface, returned to the\nserver, validated and cleaned up, and then saved or passed on for further\nprocessing.</p>\n<p>Django\u2019s form functionality can simplify and automate vast portions of this\nwork, and can also do it more securely than most programmers would be able to\ndo in code they wrote themselves.</p>\n<p>Django handles three distinct parts of the work involved in forms:</p>\n<ul class=\"simple\">\n<li>preparing and restructuring data to make it ready for rendering</li>\n<li>creating HTML forms for the data</li>\n<li>receiving and processing submitted forms and data from the client</li>\n</ul>\n<p>It is <em>possible</em> to write code that does all of this manually, but Django can\ntake care of it all for you.</p>\n</div>\n<div class=\"section\" id=\"s-forms-in-django\">\n<span id=\"forms-in-django\"></span><h2>Forms in Django<a class=\"headerlink\" href=\"#forms-in-django\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>We\u2019ve described HTML forms briefly, but an HTML <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code> is just one part of\nthe machinery required.</p>\n<p>In the context of a web application, \u2018form\u2019 might refer to that HTML\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code>, or to the Django <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> that produces it, or to the\nstructured data returned when it is submitted, or to the end-to-end working\ncollection of these parts.</p>\n<div class=\"section\" id=\"s-the-django-form-class\">\n<span id=\"the-django-form-class\"></span><h3>The Django <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> class<a class=\"headerlink\" href=\"#the-django-form-class\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>At the heart of this system of components is Django\u2019s <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> class. In\nmuch the same way that a Django model describes the logical structure of an\nobject, its behavior, and the way its parts are represented to us, a\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> class describes a form and determines how it works and appears.</p>\n<p>In a similar way that a model class\u2019s fields map to database fields, a form\nclass\u2019s fields map to HTML form <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> elements. (A <a class=\"reference internal\" href=\"modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a>\nmaps a model class\u2019s fields to HTML form <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> elements via a\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a>; this is what the Django admin is based upon.)</p>\n<p>A form\u2019s fields are themselves classes; they manage form data and perform\nvalidation when a form is submitted. A <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.DateField\" title=\"django.forms.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a> and a\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.FileField\" title=\"django.forms.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> handle very different kinds of data and have to do\ndifferent things with it.</p>\n<p>A form field is represented to a user in the browser as an HTML \u201cwidget\u201d - a\npiece of user interface machinery. Each field type has an appropriate default\n<a class=\"reference internal\" href=\"../../ref/forms/widgets/\"><span class=\"doc\">Widget class</span></a>, but these can be overridden as\nrequired.</p>\n</div>\n<div class=\"section\" id=\"s-instantiating-processing-and-rendering-forms\">\n<span id=\"instantiating-processing-and-rendering-forms\"></span><h3>Instantiating, processing, and rendering forms<a class=\"headerlink\" href=\"#instantiating-processing-and-rendering-forms\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When rendering an object in Django, we generally:</p>\n<ol class=\"arabic simple\">\n<li>get hold of it in the view (fetch it from the database, for example)</li>\n<li>pass it to the template context</li>\n<li>expand it to HTML markup using template variables</li>\n</ol>\n<p>Rendering a form in a template involves nearly the same work as rendering any\nother kind of object, but there are some key differences.</p>\n<p>In the case of a model instance that contained no data, it would rarely if ever\nbe useful to do anything with it in a template. On the other hand, it makes\nperfect sense to render an unpopulated form - that\u2019s what we do when we want\nthe user to populate it.</p>\n<p>So when we handle a model instance in a view, we typically retrieve it from the\ndatabase. When we\u2019re dealing with a form we typically instantiate it in the\nview.</p>\n<p>When we instantiate a form, we can opt to leave it empty or prepopulate it, for\nexample with:</p>\n<ul class=\"simple\">\n<li>data from a saved model instance (as in the case of admin forms for editing)</li>\n<li>data that we have collated from other sources</li>\n<li>data received from a previous HTML form submission</li>\n</ul>\n<p>The last of these cases is the most interesting, because it\u2019s what makes it\npossible for users not just to read a website, but to send information back\nto it too.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-building-a-form\">\n<span id=\"building-a-form\"></span><h2>Building a form<a class=\"headerlink\" href=\"#building-a-form\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-the-work-that-needs-to-be-done\">\n<span id=\"the-work-that-needs-to-be-done\"></span><h3>The work that needs to be done<a class=\"headerlink\" href=\"#the-work-that-needs-to-be-done\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Suppose you want to create a simple form on your website, in order to obtain\nthe user\u2019s name. You\u2019d need something like this in your template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&quot;/your-name/&quot;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&quot;post&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;your_name&quot;</span><span class=\"p\">&gt;</span>Your name: <span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;your_name&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;your_name&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">current_name</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;OK&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>This tells the browser to return the form data to the URL <code class=\"docutils literal notranslate\"><span class=\"pre\">/your-name/</span></code>, using\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> method. It will display a text field, labeled \u201cYour name:\u201d, and a\nbutton marked \u201cOK\u201d. If the template context contains a <code class=\"docutils literal notranslate\"><span class=\"pre\">current_name</span></code>\nvariable, that will be used to pre-fill the <code class=\"docutils literal notranslate\"><span class=\"pre\">your_name</span></code> field.</p>\n<p>You\u2019ll need a view that renders the template containing the HTML form, and\nthat can supply the <code class=\"docutils literal notranslate\"><span class=\"pre\">current_name</span></code> field as appropriate.</p>\n<p>When the form is submitted, the <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> request which is sent to the server\nwill contain the form data.</p>\n<p>Now you\u2019ll also need a view corresponding to that <code class=\"docutils literal notranslate\"><span class=\"pre\">/your-name/</span></code> URL which will\nfind the appropriate key/value pairs in the request, and then process them.</p>\n<p>This is a very simple form. In practice, a form might contain dozens or\nhundreds of fields, many of which might need to be prepopulated, and we might\nexpect the user to work through the edit-submit cycle several times before\nconcluding the operation.</p>\n<p>We might require some validation to occur in the browser, even before the form\nis submitted; we might want to use much more complex fields, that allow the\nuser to do things like pick dates from a calendar and so on.</p>\n<p>At this point it\u2019s much easier to get Django to do most of this work for us.</p>\n</div>\n<div class=\"section\" id=\"s-building-a-form-in-django\">\n<span id=\"building-a-form-in-django\"></span><h3>Building a form in Django<a class=\"headerlink\" href=\"#building-a-form-in-django\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-the-form-class\">\n<span id=\"the-form-class\"></span><h4>The <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> class<a class=\"headerlink\" href=\"#the-form-class\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>We already know what we want our HTML form to look like. Our starting point for\nit in Django is this:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id3\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">forms.py</span></code></span><a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NameForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">your_name</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">&quot;Your name&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>This defines a <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> class with a single field (<code class=\"docutils literal notranslate\"><span class=\"pre\">your_name</span></code>). We\u2019ve\napplied a human-friendly label to the field, which will appear in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> when it\u2019s rendered (although in this case, the <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field.label\" title=\"django.forms.Field.label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label</span></code></a>\nwe specified is actually the same one that would be generated automatically if\nwe had omitted it).</p>\n<p>The field\u2019s maximum allowable length is defined by\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField.max_length\" title=\"django.forms.CharField.max_length\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">max_length</span></code></a>. This does two things. It puts a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">maxlength=&quot;100&quot;</span></code> on the HTML <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> (so the browser should prevent the\nuser from entering more than that number of characters in the first place). It\nalso means that when Django receives the form back from the browser, it will\nvalidate the length of the data.</p>\n<p>A <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> instance has an <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.is_valid\" title=\"django.forms.Form.is_valid\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code></a> method, which runs\nvalidation routines for all its fields. When this method is called, if all\nfields contain valid data, it will:</p>\n<ul class=\"simple\">\n<li>return <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code></li>\n<li>place the form\u2019s data in its <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.cleaned_data\" title=\"django.forms.Form.cleaned_data\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">cleaned_data</span></code></a> attribute.</li>\n</ul>\n<p>The whole form, when rendered for the first time, will look like:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;your_name&quot;</span><span class=\"p\">&gt;</span>Your name: <span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;your_name&quot;</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;text&quot;</span> <span class=\"na\">name</span><span class=\"o\">=</span><span class=\"s\">&quot;your_name&quot;</span> <span class=\"na\">maxlength</span><span class=\"o\">=</span><span class=\"s\">&quot;100&quot;</span> <span class=\"na\">required</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Note that it <strong>does not</strong> include the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code> tags, or a submit button.\nWe\u2019ll have to provide those ourselves in the template.</p>\n</div>\n<div class=\"section\" id=\"s-the-view\">\n<span id=\"s-using-a-form-in-a-view\"></span><span id=\"the-view\"></span><span id=\"using-a-form-in-a-view\"></span><h4>The view<a class=\"headerlink\" href=\"#the-view\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Form data sent back to a Django website is processed by a view, generally the\nsame view which published the form. This allows us to reuse some of the same\nlogic.</p>\n<p>To handle the form we need to instantiate it in the view for the URL where we\nwant it to be published:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id4\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">views.py</span></code></span><a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">render</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.forms</span> <span class=\"kn\">import</span> <span class=\"n\">NameForm</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_name</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># if this is a POST request we need to process the form data</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># create a form instance and populate it with data from the request:</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">NameForm</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">)</span>\n        <span class=\"c1\"># check whether it&#39;s valid:</span>\n        <span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n            <span class=\"c1\"># process the data in form.cleaned_data as required</span>\n            <span class=\"c1\"># ...</span>\n            <span class=\"c1\"># redirect to a new URL:</span>\n            <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s2\">&quot;/thanks/&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># if a GET (or any other method) we&#39;ll create a blank form</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">NameForm</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;name.html&quot;</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;form&quot;</span><span class=\"p\">:</span> <span class=\"n\">form</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n</div>\n<p>If we arrive at this view with a <code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> request, it will create an empty form\ninstance and place it in the template context to be rendered. This is what we\ncan expect to happen the first time we visit the URL.</p>\n<p>If the form is submitted using a <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> request, the view will once again\ncreate a form instance and populate it with data from the request: <code class=\"docutils literal notranslate\"><span class=\"pre\">form</span> <span class=\"pre\">=</span>\n<span class=\"pre\">NameForm(request.POST)</span></code> This is called \u201cbinding data to the form\u201d (it is now\na <em>bound</em> form).</p>\n<p>We call the form\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code> method; if it\u2019s not <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, we go back to\nthe template with the form. This time the form is no longer empty (<em>unbound</em>)\nso the HTML form will be populated with the data previously submitted, where it\ncan be edited and corrected as required.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, we\u2019ll now be able to find all the validated form\ndata in its <code class=\"docutils literal notranslate\"><span class=\"pre\">cleaned_data</span></code> attribute. We can use this data to update the\ndatabase or do other processing before sending an HTTP redirect to the browser\ntelling it where to go next.</p>\n</div>\n<div class=\"section\" id=\"s-the-template\">\n<span id=\"s-topics-forms-index-basic-form-template\"></span><span id=\"the-template\"></span><span id=\"topics-forms-index-basic-form-template\"></span><h4>The template<a class=\"headerlink\" href=\"#the-template\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>We don\u2019t need to do much in our <code class=\"docutils literal notranslate\"><span class=\"pre\">name.html</span></code> template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">action</span><span class=\"o\">=</span><span class=\"s\">&quot;/your-name/&quot;</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&quot;post&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">csrf_token</span> <span class=\"cp\">%}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">input</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;submit&quot;</span> <span class=\"na\">value</span><span class=\"o\">=</span><span class=\"s\">&quot;Submit&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">form</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>All the form\u2019s fields and their attributes will be unpacked into HTML markup\nfrom that <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form</span> <span class=\"pre\">}}</span></code> by Django\u2019s template language.</p>\n<div class=\"admonition-forms-and-cross-site-request-forgery-protection admonition\">\n<p class=\"first admonition-title\">Forms and Cross Site Request Forgery protection</p>\n<p class=\"last\">Django ships with an easy-to-use <a class=\"reference internal\" href=\"../../ref/csrf/\"><span class=\"doc\">protection against Cross Site Request\nForgeries</span></a>. When submitting a form via <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> with\nCSRF protection enabled you must use the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> template tag\nas in the preceding example. However, since CSRF protection is not\ndirectly tied to forms in templates, this tag is omitted from the\nfollowing examples in this document.</p>\n</div>\n<div class=\"admonition-html5-input-types-and-browser-validation admonition\">\n<p class=\"first admonition-title\">HTML5 input types and browser validation</p>\n<p class=\"last\">If your form includes a <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.URLField\" title=\"django.forms.URLField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">URLField</span></code></a>, an\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.EmailField\" title=\"django.forms.EmailField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailField</span></code></a> or any integer field type, Django will\nuse the <code class=\"docutils literal notranslate\"><span class=\"pre\">url</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">email</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> HTML5 input types. By default,\nbrowsers may apply their own validation on these fields, which may be\nstricter than Django\u2019s validation. If you would like to disable this\nbehavior, set the <code class=\"docutils literal notranslate\"><span class=\"pre\">novalidate</span></code> attribute on the <code class=\"docutils literal notranslate\"><span class=\"pre\">form</span></code> tag, or specify\na different widget on the field, like <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.TextInput\" title=\"django.forms.TextInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextInput</span></code></a>.</p>\n</div>\n<p>We now have a working web form, described by a Django <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a>, processed\nby a view, and rendered as an HTML <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code>.</p>\n<p>That\u2019s all you need to get started, but the forms framework puts a lot more at\nyour fingertips. Once you understand the basics of the process described above,\nyou should be prepared to understand other features of the forms system and\nready to learn a bit more about the underlying machinery.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-more-about-django-form-classes\">\n<span id=\"more-about-django-form-classes\"></span><h2>More about Django <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code></a> classes<a class=\"headerlink\" href=\"#more-about-django-form-classes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>All form classes are created as subclasses of either <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form\" title=\"django.forms.Form\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.forms.Form</span></code></a>\nor <a class=\"reference internal\" href=\"modelforms/#django.forms.ModelForm\" title=\"django.forms.ModelForm\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.forms.ModelForm</span></code></a>. You can think of <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> as a\nsubclass of <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">Form</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code> actually inherit common\nfunctionality from a (private) <code class=\"docutils literal notranslate\"><span class=\"pre\">BaseForm</span></code> class, but this implementation\ndetail is rarely important.</p>\n<div class=\"admonition-models-and-forms admonition\">\n<p class=\"first admonition-title\">Models and Forms</p>\n<p class=\"last\">In fact if your form is going to be used to directly add or edit a Django\nmodel, a <a class=\"reference internal\" href=\"modelforms/\"><span class=\"doc\">ModelForm</span></a> can save you a great\ndeal of time, effort, and code, because it will build a form, along with the\nappropriate fields and their attributes, from a <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> class.</p>\n</div>\n<div class=\"section\" id=\"s-bound-and-unbound-form-instances\">\n<span id=\"bound-and-unbound-form-instances\"></span><h3>Bound and unbound form instances<a class=\"headerlink\" href=\"#bound-and-unbound-form-instances\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The distinction between <a class=\"reference internal\" href=\"../../ref/forms/api/#ref-forms-api-bound-unbound\"><span class=\"std std-ref\">Bound and unbound forms</span></a> is important:</p>\n<ul class=\"simple\">\n<li>An unbound form has no data associated with it. When rendered to the user,\nit will be empty or will contain default values.</li>\n<li>A bound form has submitted data, and hence can be used to tell if that data\nis valid. If an invalid bound form is rendered, it can include inline error\nmessages telling the user what data to correct.</li>\n</ul>\n<p>The form\u2019s <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.is_bound\" title=\"django.forms.Form.is_bound\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_bound</span></code></a> attribute will tell you whether a form has\ndata bound to it or not.</p>\n</div>\n<div class=\"section\" id=\"s-more-on-fields\">\n<span id=\"more-on-fields\"></span><h3>More on fields<a class=\"headerlink\" href=\"#more-on-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Consider a more useful form than our minimal example above, which we could use\nto implement \u201ccontact me\u201d functionality on a personal website:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">forms.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">forms</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ContactForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">widget</span><span class=\"o\">=</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Textarea</span><span class=\"p\">)</span>\n    <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">EmailField</span><span class=\"p\">()</span>\n    <span class=\"n\">cc_myself</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">BooleanField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>Our earlier form used a single field, <code class=\"docutils literal notranslate\"><span class=\"pre\">your_name</span></code>, a <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField\" title=\"django.forms.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>. In\nthis case, our form has four fields: <code class=\"docutils literal notranslate\"><span class=\"pre\">subject</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">cc_myself</span></code>. <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField\" title=\"django.forms.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>, <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.EmailField\" title=\"django.forms.EmailField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailField</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.BooleanField\" title=\"django.forms.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a> are just three of the available field types; a full list\ncan be found in <a class=\"reference internal\" href=\"../../ref/forms/fields/\"><span class=\"doc\">Form fields</span></a>.</p>\n<div class=\"section\" id=\"s-widgets\">\n<span id=\"widgets\"></span><h4>Widgets<a class=\"headerlink\" href=\"#widgets\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Each form field has a corresponding <a class=\"reference internal\" href=\"../../ref/forms/widgets/\"><span class=\"doc\">Widget class</span></a>,\nwhich in turn corresponds to an HTML form widget such as <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span>\n<span class=\"pre\">type=&quot;text&quot;&gt;</span></code>.</p>\n<p>In most cases, the field will have a sensible default widget. For example, by\ndefault, a <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.CharField\" title=\"django.forms.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> will have a <a class=\"reference internal\" href=\"../../ref/forms/widgets/#django.forms.TextInput\" title=\"django.forms.TextInput\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextInput</span></code></a> widget, that\nproduces an <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span> <span class=\"pre\">type=&quot;text&quot;&gt;</span></code> in the HTML. If you needed <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;textarea&gt;</span></code>\ninstead, you\u2019d specify the appropriate widget when defining your form field,\nas we have done for the <code class=\"docutils literal notranslate\"><span class=\"pre\">message</span></code> field.</p>\n</div>\n<div class=\"section\" id=\"s-field-data\">\n<span id=\"field-data\"></span><h4>Field data<a class=\"headerlink\" href=\"#field-data\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Whatever the data submitted with a form, once it has been successfully\nvalidated by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code> (and <code class=\"docutils literal notranslate\"><span class=\"pre\">is_valid()</span></code> has returned <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>),\nthe validated form data will be in the <code class=\"docutils literal notranslate\"><span class=\"pre\">form.cleaned_data</span></code> dictionary. This\ndata will have been nicely converted into Python types for you.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">You can still access the unvalidated data directly from <code class=\"docutils literal notranslate\"><span class=\"pre\">request.POST</span></code> at\nthis point, but the validated data is better.</p>\n</div>\n<p>In the contact form example above, <code class=\"docutils literal notranslate\"><span class=\"pre\">cc_myself</span></code> will be a boolean value.\nLikewise, fields such as <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.IntegerField\" title=\"django.forms.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a> and <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.FloatField\" title=\"django.forms.FloatField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FloatField</span></code></a> convert\nvalues to a Python <code class=\"docutils literal notranslate\"><span class=\"pre\">int</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code> respectively.</p>\n<p>Here\u2019s how the form data could be processed in the view that handles this form:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id6\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">views.py</span></code></span><a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">send_mail</span>\n\n<span class=\"k\">if</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;subject&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;message&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">sender</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;sender&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">cc_myself</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s2\">&quot;cc_myself&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"n\">recipients</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;info@example.com&quot;</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"n\">cc_myself</span><span class=\"p\">:</span>\n        <span class=\"n\">recipients</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">)</span>\n\n    <span class=\"n\">send_mail</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"n\">recipients</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span><span class=\"s2\">&quot;/thanks/&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition tip\">\n<p class=\"first admonition-title\">Tip</p>\n<p class=\"last\">For more on sending email from Django, see <a class=\"reference internal\" href=\"../email/\"><span class=\"doc\">Sending email</span></a>.</p>\n</div>\n<p>Some field types need some extra handling. For example, files that are uploaded\nusing a form need to be handled differently (they can be retrieved from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.FILES</span></code>, rather than <code class=\"docutils literal notranslate\"><span class=\"pre\">request.POST</span></code>). For details of how to handle\nfile uploads with your form, see <a class=\"reference internal\" href=\"../../ref/forms/api/#binding-uploaded-files\"><span class=\"std std-ref\">Binding uploaded files to a form</span></a>.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-working-with-form-templates\">\n<span id=\"working-with-form-templates\"></span><h2>Working with form templates<a class=\"headerlink\" href=\"#working-with-form-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>All you need to do to get your form into a template is to place the form\ninstance into the template context. So if your form is called <code class=\"docutils literal notranslate\"><span class=\"pre\">form</span></code> in the\ncontext, <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form</span> <span class=\"pre\">}}</span></code> will render its <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input&gt;</span></code> elements\nappropriately.</p>\n<div class=\"admonition-additional-form-template-furniture admonition\">\n<p class=\"first admonition-title\">Additional form template furniture</p>\n<p class=\"last\">Don\u2019t forget that a form\u2019s output does <em>not</em> include the surrounding\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code> tags, or the form\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">submit</span></code> control. You will have to provide\nthese yourself.</p>\n</div>\n<div class=\"section\" id=\"s-reusable-form-templates\">\n<span id=\"s-id1\"></span><span id=\"reusable-form-templates\"></span><span id=\"id1\"></span><h3>Reusable form templates<a class=\"headerlink\" href=\"#reusable-form-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The HTML output when rendering a form is itself generated via a template. You\ncan control this by creating an appropriate template file and setting a custom\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FORM_RENDERER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FORM_RENDERER</span></code></a> to use that\n<a class=\"reference internal\" href=\"../../ref/forms/renderers/#django.forms.renderers.BaseRenderer.form_template_name\" title=\"django.forms.renderers.BaseRenderer.form_template_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">form_template_name</span></code></a> site-wide. You\ncan also customize per-form by overriding the form\u2019s\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.template_name\" title=\"django.forms.Form.template_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template_name</span></code></a> attribute to render the form using the\ncustom template, or by passing the template name directly to\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.render\" title=\"django.forms.Form.render\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.render()</span></code></a>.</p>\n<p>The example below will result in <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form</span> <span class=\"pre\">}}</span></code> being rendered as the output of\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">form_snippet.html</span></code> template.</p>\n<p>In your templates:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span># In your template:\n<span class=\"cp\">{{</span> <span class=\"nv\">form</span> <span class=\"cp\">}}</span>\n\n# In form_snippet.html:\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">field</span> <span class=\"k\">in</span> <span class=\"nv\">form</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">field.errors</span> <span class=\"cp\">}}</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">field.label_tag</span> <span class=\"cp\">}}</span> <span class=\"cp\">{{</span> <span class=\"nv\">field</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Then you can configure the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FORM_RENDERER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FORM_RENDERER</span></code></a> setting:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id7\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code></span><a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.forms.renderers</span> <span class=\"kn\">import</span> <span class=\"n\">TemplatesSetting</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomFormRenderer</span><span class=\"p\">(</span><span class=\"n\">TemplatesSetting</span><span class=\"p\">):</span>\n    <span class=\"n\">form_template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;form_snippet.html&quot;</span>\n\n\n<span class=\"n\">FORM_RENDERER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;project.settings.CustomFormRenderer&quot;</span>\n</pre></div>\n</div>\n</div>\n<p>\u2026 or for a single form:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;form_snippet.html&quot;</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>\u2026 or for a single render of a form instance, passing in the template name to\nthe <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.render\" title=\"django.forms.Form.render\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Form.render()</span></code></a>. Here\u2019s an example of this being used in a view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">MyForm</span><span class=\"p\">()</span>\n    <span class=\"n\">rendered_form</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s2\">&quot;form_snippet.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;form&quot;</span><span class=\"p\">:</span> <span class=\"n\">rendered_form</span><span class=\"p\">}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../ref/forms/api/#ref-forms-api-outputting-html\"><span class=\"std std-ref\">Outputting forms as HTML</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-reusable-field-group-templates\">\n<span id=\"s-id2\"></span><span id=\"reusable-field-group-templates\"></span><span id=\"id2\"></span><h3>Reusable field group templates<a class=\"headerlink\" href=\"#reusable-field-group-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django Development version.</span> </div>\n<p>Each field is available as an attribute of the form, using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{form.name_of_field</span> <span class=\"pre\">}}</span></code> in a template. A field has a\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField.as_field_group\" title=\"django.forms.BoundField.as_field_group\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">as_field_group()</span></code></a> method which renders the\nrelated elements of the field as a group, its label, widget, errors, and help\ntext.</p>\n<p>This allows generic templates to be written that arrange fields elements in the\nrequired layout. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">form.non_field_errors</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{{</span> <span class=\"nv\">form.subject.as_field_group</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{{</span> <span class=\"nv\">form.message.as_field_group</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{{</span> <span class=\"nv\">form.sender.as_field_group</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{{</span> <span class=\"nv\">form.cc_myself.as_field_group</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>By default Django uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django/forms/field.html&quot;</span></code> template which is\ndesigned for use with the default <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;django/forms/div.html&quot;</span></code> form style.</p>\n<p>The default template can be customized by by setting\n<a class=\"reference internal\" href=\"../../ref/forms/renderers/#django.forms.renderers.BaseRenderer.field_template_name\" title=\"django.forms.renderers.BaseRenderer.field_template_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">field_template_name</span></code></a> in your\nproject-level <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FORM_RENDERER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FORM_RENDERER</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.forms.renderers</span> <span class=\"kn\">import</span> <span class=\"n\">TemplatesSetting</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomFormRenderer</span><span class=\"p\">(</span><span class=\"n\">TemplatesSetting</span><span class=\"p\">):</span>\n    <span class=\"n\">field_template_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;field_snippet.html&quot;</span>\n</pre></div>\n</div>\n<p>\u2026 or on a single field:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyForm</span><span class=\"p\">(</span><span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">forms</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">template_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;my_custom_template.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>\u2026 or on a per-request basis by calling\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField.render\" title=\"django.forms.BoundField.render\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">BoundField.render()</span></code></a> and supplying a template name:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">index</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">ContactForm</span><span class=\"p\">()</span>\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"p\">[</span><span class=\"s2\">&quot;subject&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;subject&quot;</span><span class=\"p\">:</span> <span class=\"n\">subject</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_custom_template.html&quot;</span><span class=\"p\">)}</span>\n    <span class=\"k\">return</span> <span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"s2\">&quot;index.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-rendering-fields-manually\">\n<span id=\"rendering-fields-manually\"></span><h3>Rendering fields manually<a class=\"headerlink\" href=\"#rendering-fields-manually\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>More fine grained control over field rendering is also possible. Likely this\nwill be in a custom field template, to allow the template to be written once\nand reused for each field. However, it can also be directly accessed from the\nfield attribute on the form. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">form.non_field_errors</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.subject.errors</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">form.subject.id_for_label</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>Email subject:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.subject</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.message.errors</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">form.message.id_for_label</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>Your message:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.message</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.sender.errors</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">form.sender.id_for_label</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>Your email address:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.sender</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.cc_myself.errors</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">form.cc_myself.id_for_label</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>CC yourself?<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.cc_myself</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Complete <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> elements can also be generated using the\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField.label_tag\" title=\"django.forms.BoundField.label_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">label_tag()</span></code></a>. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.subject.errors</span> <span class=\"cp\">}}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.subject.label_tag</span> <span class=\"cp\">}}</span>\n    <span class=\"cp\">{{</span> <span class=\"nv\">form.subject</span> <span class=\"cp\">}}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-rendering-form-error-messages\">\n<span id=\"rendering-form-error-messages\"></span><h4>Rendering form error messages<a class=\"headerlink\" href=\"#rendering-form-error-messages\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The price of this flexibility is a bit more work. Until now we haven\u2019t had to\nworry about how to display form errors, because that\u2019s taken care of for us. In\nthis example we have had to make sure we take care of any errors for each field\nand any errors for the form as a whole. Note <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form.non_field_errors</span> <span class=\"pre\">}}</span></code> at\nthe top of the form and the template lookup for errors on each field.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form.name_of_field.errors</span> <span class=\"pre\">}}</span></code> displays a list of form errors,\nrendered as an unordered list. This might look like:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;errorlist&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Sender is required.<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The list has a CSS class of <code class=\"docutils literal notranslate\"><span class=\"pre\">errorlist</span></code> to allow you to style its appearance.\nIf you wish to further customize the display of errors you can do so by looping\nover them:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">form.subject.errors</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">error</span> <span class=\"k\">in</span> <span class=\"nv\">form.subject.errors</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;&lt;</span><span class=\"nt\">strong</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">error</span><span class=\"o\">|</span><span class=\"nf\">escape</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">strong</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n    <span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">ol</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Non-field errors (and/or hidden field errors that are rendered at the top of\nthe form when using helpers like <code class=\"docutils literal notranslate\"><span class=\"pre\">form.as_p()</span></code>) will be rendered with an\nadditional class of <code class=\"docutils literal notranslate\"><span class=\"pre\">nonfield</span></code> to help distinguish them from field-specific\nerrors. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">form.non_field_errors</span> <span class=\"pre\">}}</span></code> would look like:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;errorlist nonfield&quot;</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Generic validation error<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../ref/forms/api/\"><span class=\"doc\">The Forms API</span></a> for more on errors, styling, and working with form\nattributes in templates.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-looping-over-the-form-s-fields\">\n<span id=\"looping-over-the-form-s-fields\"></span><h3>Looping over the form\u2019s fields<a class=\"headerlink\" href=\"#looping-over-the-form-s-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re using the same HTML for each of your form fields, you can reduce\nduplicate code by looping through each field in turn using a <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">%}</span></code>\nloop:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">field</span> <span class=\"k\">in</span> <span class=\"nv\">form</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">field.errors</span> <span class=\"cp\">}}</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">field.label_tag</span> <span class=\"cp\">}}</span> <span class=\"cp\">{{</span> <span class=\"nv\">field</span> <span class=\"cp\">}}</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">field.help_text</span> <span class=\"cp\">%}</span>\n        <span class=\"p\">&lt;</span><span class=\"nt\">p</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;help&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">field.help_text</span><span class=\"o\">|</span><span class=\"nf\">safe</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Useful attributes on <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field</span> <span class=\"pre\">}}</span></code> include:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.errors</span> <span class=\"pre\">}}</span></code></dt><dd>Outputs a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;ul</span> <span class=\"pre\">class=&quot;errorlist&quot;&gt;</span></code> containing any validation errors\ncorresponding to this field. You can customize the presentation of\nthe errors with a <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">error</span> <span class=\"pre\">in</span> <span class=\"pre\">field.errors</span> <span class=\"pre\">%}</span></code> loop. In this\ncase, each object in the loop is a string containing the error message.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.field</span> <span class=\"pre\">}}</span></code></dt><dd>The <a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field\" title=\"django.forms.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> instance from the form class that\nthis <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField\" title=\"django.forms.BoundField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BoundField</span></code></a> wraps. You can use it to access\n<a class=\"reference internal\" href=\"../../ref/forms/fields/#django.forms.Field\" title=\"django.forms.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> attributes, e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">char_field.field.max_length</span> <span class=\"pre\">}}</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.help_text</span> <span class=\"pre\">}}</span></code></dt><dd>Any help text that has been associated with the field.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.html_name</span> <span class=\"pre\">}}</span></code></dt><dd>The name of the field that will be used in the input element\u2019s name\nfield. This takes the form prefix into account, if it has been set.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.id_for_label</span> <span class=\"pre\">}}</span></code></dt><dd>The ID that will be used for this field (<code class=\"docutils literal notranslate\"><span class=\"pre\">id_email</span></code> in the example\nabove). If you are constructing the label manually, you may want to use\nthis in lieu of <code class=\"docutils literal notranslate\"><span class=\"pre\">label_tag</span></code>. It\u2019s also useful, for example, if you have\nsome inline JavaScript and want to avoid hardcoding the field\u2019s ID.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.is_hidden</span> <span class=\"pre\">}}</span></code></dt><dd>This attribute is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the form field is a hidden field and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise. It\u2019s not particularly useful as a template\nvariable, but could be useful in conditional tests such as:</dd>\n</dl>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">field.is_hidden</span> <span class=\"cp\">%}</span>\n   <span class=\"c\">{# Do something special #}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.label</span> <span class=\"pre\">}}</span></code></dt><dd>The label of the field, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">Email</span> <span class=\"pre\">address</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.label_tag</span> <span class=\"pre\">}}</span></code></dt><dd><p>The field\u2019s label wrapped in the appropriate HTML <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code> tag. This\nincludes the form\u2019s <a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.Form.label_suffix\" title=\"django.forms.Form.label_suffix\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code></a>. For example,\nthe default <code class=\"docutils literal notranslate\"><span class=\"pre\">label_suffix</span></code> is a colon:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">label</span> <span class=\"na\">for</span><span class=\"o\">=</span><span class=\"s\">&quot;id_email&quot;</span><span class=\"p\">&gt;</span>Email address:<span class=\"p\">&lt;/</span><span class=\"nt\">label</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</dd>\n</dl>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.legend_tag</span> <span class=\"pre\">}}</span></code></p>\n<blockquote>\n<div>Similar to <code class=\"docutils literal notranslate\"><span class=\"pre\">field.label_tag</span></code> but uses a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;legend&gt;</span></code> tag in place of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;label&gt;</span></code>, for widgets with multiple inputs wrapped in a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;fieldset&gt;</span></code>.</div></blockquote>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.use_fieldset</span> <span class=\"pre\">}}</span></code></p>\n<blockquote>\n<div>This attribute is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the form field\u2019s widget contains multiple\ninputs that should be semantically grouped in a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;fieldset&gt;</span></code> with a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;legend&gt;</span></code> to improve accessibility. An example use in a template:</div></blockquote>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">field.use_fieldset</span> <span class=\"cp\">%}</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">fieldset</span><span class=\"p\">&gt;</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">field.label</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">field.legend_tag</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">else</span> <span class=\"cp\">%}</span>\n  <span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">field.label</span> <span class=\"cp\">%}{{</span> <span class=\"nv\">field.label_tag</span> <span class=\"cp\">}}{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">field</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">if</span> <span class=\"nv\">field.use_fieldset</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;/</span><span class=\"nt\">fieldset</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">endif</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">field.value</span> <span class=\"pre\">}}</span></code></dt><dd>The value of the field. e.g <code class=\"docutils literal notranslate\"><span class=\"pre\">someone&#64;example.com</span></code>.</dd>\n</dl>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">For a complete list of attributes and methods, see\n<a class=\"reference internal\" href=\"../../ref/forms/api/#django.forms.BoundField\" title=\"django.forms.BoundField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BoundField</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-looping-over-hidden-and-visible-fields\">\n<span id=\"looping-over-hidden-and-visible-fields\"></span><h4>Looping over hidden and visible fields<a class=\"headerlink\" href=\"#looping-over-hidden-and-visible-fields\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you\u2019re manually laying out a form in a template, as opposed to relying on\nDjango\u2019s default form layout, you might want to treat <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span> <span class=\"pre\">type=&quot;hidden&quot;&gt;</span></code>\nfields differently from non-hidden fields. For example, because hidden fields\ndon\u2019t display anything, putting error messages \u201cnext to\u201d the field could cause\nconfusion for your users \u2013 so errors for those fields should be handled\ndifferently.</p>\n<p>Django provides two methods on a form that allow you to loop over the hidden\nand visible fields independently: <code class=\"docutils literal notranslate\"><span class=\"pre\">hidden_fields()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">visible_fields()</span></code>. Here\u2019s a modification of an earlier example that uses\nthese two methods:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c\">{# Include the hidden fields #}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">hidden</span> <span class=\"k\">in</span> <span class=\"nv\">form.hidden_fields</span> <span class=\"cp\">%}</span>\n<span class=\"cp\">{{</span> <span class=\"nv\">hidden</span> <span class=\"cp\">}}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"c\">{# Include the visible fields #}</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">field</span> <span class=\"k\">in</span> <span class=\"nv\">form.visible_fields</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">div</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;fieldWrapper&quot;</span><span class=\"p\">&gt;</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">field.errors</span> <span class=\"cp\">}}</span>\n        <span class=\"cp\">{{</span> <span class=\"nv\">field.label_tag</span> <span class=\"cp\">}}</span> <span class=\"cp\">{{</span> <span class=\"nv\">field</span> <span class=\"cp\">}}</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">div</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This example does not handle any errors in the hidden fields. Usually, an\nerror in a hidden field is a sign of form tampering, since normal form\ninteraction won\u2019t alter them. However, you could easily insert some error\ndisplays for those form errors, as well.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-further-topics\">\n<span id=\"further-topics\"></span><h2>Further topics<a class=\"headerlink\" href=\"#further-topics\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This covers the basics, but forms can do a whole lot more:</p>\n<div class=\"toctree-wrapper compound\">\n<ul>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"formsets/\">Formsets</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#using-initial-data-with-a-formset\">Using initial data with a formset</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#limiting-the-maximum-number-of-forms\">Limiting the maximum number of forms</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#limiting-the-maximum-number-of-instantiated-forms\">Limiting the maximum number of instantiated forms</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#formset-validation\">Formset validation</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#validating-the-number-of-forms-in-a-formset\">Validating the number of forms in a formset</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#dealing-with-ordering-and-deletion-of-forms\">Dealing with ordering and deletion of forms</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#adding-additional-fields-to-a-formset\">Adding additional fields to a formset</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#passing-custom-parameters-to-formset-forms\">Passing custom parameters to formset forms</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#customizing-a-formset-s-prefix\">Customizing a formset\u2019s prefix</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"formsets/#using-a-formset-in-views-and-templates\">Using a formset in views and templates</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"modelforms/\">Creating forms from models</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"modelforms/#modelform\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ModelForm</span></code></a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"modelforms/#model-formsets\">Model formsets</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"modelforms/#inline-formsets\">Inline formsets</a></li>\n</ul>\n</li>\n<li class=\"toctree-l1\"><a class=\"reference internal\" href=\"media/\">Form Assets (the <code class=\"docutils literal notranslate\"><span class=\"pre\">Media</span></code> class)</a><ul>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"media/#assets-as-a-static-definition\">Assets as a static definition</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"media/#media-as-a-dynamic-property\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Media</span></code> as a dynamic property</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"media/#paths-in-asset-definitions\">Paths in asset definitions</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"media/#media-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Media</span></code> objects</a></li>\n<li class=\"toctree-l2\"><a class=\"reference internal\" href=\"media/#media-on-forms\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Media</span></code> on Forms</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<dl class=\"last docutils\">\n<dt><a class=\"reference internal\" href=\"../../ref/forms/\"><span class=\"doc\">The Forms Reference</span></a></dt><dd>Covers the full API reference, including form fields, form widgets,\nand form and field validation.</dd>\n</dl>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/forms/formsets", "Formsets", "N", "next"], ["topics/http/sessions", "How to use sessions", "P", "previous"]], "sourcename": "topics/forms/index.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Working with forms</a><ul>\n<li><a class=\"reference internal\" href=\"#html-forms\">HTML forms</a><ul>\n<li><a class=\"reference internal\" href=\"#get-and-post\"><code class=\"docutils literal notranslate\"><span class=\"pre\">GET</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#django-s-role-in-forms\">Django\u2019s role in forms</a></li>\n<li><a class=\"reference internal\" href=\"#forms-in-django\">Forms in Django</a><ul>\n<li><a class=\"reference internal\" href=\"#the-django-form-class\">The Django <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code> class</a></li>\n<li><a class=\"reference internal\" href=\"#instantiating-processing-and-rendering-forms\">Instantiating, processing, and rendering forms</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#building-a-form\">Building a form</a><ul>\n<li><a class=\"reference internal\" href=\"#the-work-that-needs-to-be-done\">The work that needs to be done</a></li>\n<li><a class=\"reference internal\" href=\"#building-a-form-in-django\">Building a form in Django</a><ul>\n<li><a class=\"reference internal\" href=\"#the-form-class\">The <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code> class</a></li>\n<li><a class=\"reference internal\" href=\"#the-view\">The view</a></li>\n<li><a class=\"reference internal\" href=\"#the-template\">The template</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#more-about-django-form-classes\">More about Django <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Form</span></code> classes</a><ul>\n<li><a class=\"reference internal\" href=\"#bound-and-unbound-form-instances\">Bound and unbound form instances</a></li>\n<li><a class=\"reference internal\" href=\"#more-on-fields\">More on fields</a><ul>\n<li><a class=\"reference internal\" href=\"#widgets\">Widgets</a></li>\n<li><a class=\"reference internal\" href=\"#field-data\">Field data</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#working-with-form-templates\">Working with form templates</a><ul>\n<li><a class=\"reference internal\" href=\"#reusable-form-templates\">Reusable form templates</a></li>\n<li><a class=\"reference internal\" href=\"#reusable-field-group-templates\">Reusable field group templates</a></li>\n<li><a class=\"reference internal\" href=\"#rendering-fields-manually\">Rendering fields manually</a><ul>\n<li><a class=\"reference internal\" href=\"#rendering-form-error-messages\">Rendering form error messages</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#looping-over-the-form-s-fields\">Looping over the form\u2019s fields</a><ul>\n<li><a class=\"reference internal\" href=\"#looping-over-hidden-and-visible-fields\">Looping over hidden and visible fields</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#further-topics\">Further topics</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/forms/index", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
