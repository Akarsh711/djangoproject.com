{"parents": [{"link": "../", "title": "Using Django"}], "prev": {"link": "../migrations/", "title": "Migrations"}, "next": {"link": "../testing/", "title": "Testing in Django"}, "title": "Managing files", "meta": {}, "body": "<div class=\"section\" id=\"s-managing-files\">\n<span id=\"managing-files\"></span><h1>Managing files<a class=\"headerlink\" href=\"#managing-files\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document describes Django\u2019s file access APIs for files such as those\nuploaded by a user. The lower level APIs are general enough that you could use\nthem for other purposes. If you want to handle \u201cstatic files\u201d (JS, CSS, etc.),\nsee <a class=\"reference internal\" href=\"../../howto/static-files/\"><span class=\"doc\">How to manage static files (e.g. images, JavaScript, CSS)</span></a>.</p>\n<p>By default, Django stores files locally, using the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_ROOT</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> settings. The examples below assume that you\u2019re using these\ndefaults.</p>\n<p>However, Django provides ways to write custom <a class=\"reference internal\" href=\"#file-storage\">file storage systems</a> that\nallow you to completely customize where and how Django stores files. The\nsecond half of this document describes how these storage systems work.</p>\n<div class=\"section\" id=\"s-using-files-in-models\">\n<span id=\"using-files-in-models\"></span><h2>Using files in models<a class=\"headerlink\" href=\"#using-files-in-models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When you use a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a>, Django provides a set of APIs you can use\nto deal with that file.</p>\n<p>Consider the following model, using an <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a> to\nstore a photo:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">price</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DecimalField</span><span class=\"p\">(</span><span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">decimal_places</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s2\">&quot;cars&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">specs</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s2\">&quot;specs&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Any <code class=\"docutils literal notranslate\"><span class=\"pre\">Car</span></code> instance will have a <code class=\"docutils literal notranslate\"><span class=\"pre\">photo</span></code> attribute that you can use to get at\nthe details of the attached photo:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"n\">Car</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;57 Chevy&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span>\n<span class=\"go\">&lt;ImageFieldFile: cars/chevy.jpg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">&#39;cars/chevy.jpg&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">path</span>\n<span class=\"go\">&#39;/media/cars/chevy.jpg&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"go\">&#39;http://media.example.com/cars/chevy.jpg&#39;</span>\n</pre></div>\n</div>\n<p>This object \u2013 <code class=\"docutils literal notranslate\"><span class=\"pre\">car.photo</span></code> in the example \u2013 is a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> object, which means\nit has all the methods and attributes described below.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The file is saved as part of saving the model in the database, so the actual\nfile name used on disk cannot be relied on until after the model has been\nsaved.</p>\n</div>\n<p>For example, you can change the file name by setting the file\u2019s\n<a class=\"reference internal\" href=\"../../ref/files/file/#django.core.files.File.name\" title=\"django.core.files.File.name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">name</span></code></a> to a path relative to the file storage\u2019s\nlocation (<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_ROOT</span></code></a> if you are using the default\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.FileSystemStorage\" title=\"django.core.files.storage.FileSystemStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileSystemStorage</span></code></a>):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">initial_path</span> <span class=\"o\">=</span> <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">path</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;cars/chevy_ii.jpg&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_path</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_ROOT</span> <span class=\"o\">+</span> <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># Move the file on the filesystem</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">initial_path</span><span class=\"p\">,</span> <span class=\"n\">new_path</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">path</span>\n<span class=\"go\">&#39;/media/cars/chevy_ii.jpg&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">path</span> <span class=\"o\">==</span> <span class=\"n\">new_path</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>To save an existing file on disk to a <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">&quot;/some/external/specs.pdf&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"n\">Car</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;57 Chevy&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">specs</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n<span class=\"gp\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>While <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a> non-image data attributes, such\nas <code class=\"docutils literal notranslate\"><span class=\"pre\">height</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">width</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">size</span></code> are available on the instance, the\nunderlying image data cannot be used without reopening the image. For\nexample:</p>\n<div class=\"last highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">PIL</span> <span class=\"kn\">import</span> <span class=\"n\">Image</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span> <span class=\"o\">=</span> <span class=\"n\">Car</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;57 Chevy&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">width</span>\n<span class=\"go\">191</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">height</span>\n<span class=\"go\">287</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"p\">)</span>\n<span class=\"go\"># Raises ValueError: seek of closed file.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"go\">&lt;ImageFieldFile: cars/chevy.jpg&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">car</span><span class=\"o\">.</span><span class=\"n\">photo</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">image</span>\n<span class=\"go\">&lt;PIL.JpegImagePlugin.JpegImageFile image mode=RGB size=191x287 at 0x7F99A94E9048&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-file-object\">\n<span id=\"the-file-object\"></span><h2>The <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> object<a class=\"headerlink\" href=\"#the-file-object\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Internally, Django uses a <a class=\"reference internal\" href=\"../../ref/files/file/#django.core.files.File\" title=\"django.core.files.File\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.core.files.File</span></code></a> instance any time it\nneeds to represent a file.</p>\n<p>Most of the time you\u2019ll use a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> that Django\u2019s given you (i.e. a file\nattached to a model as above, or perhaps an uploaded file).</p>\n<p>If you need to construct a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> yourself, the easiest way is to create one\nusing a Python built-in <code class=\"docutils literal notranslate\"><span class=\"pre\">file</span></code> object:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n\n<span class=\"go\"># Create a Python file object using open()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/hello.world&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">myfile</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Now you can use any of the documented attributes and methods\nof the <a class=\"reference internal\" href=\"../../ref/files/file/#django.core.files.File\" title=\"django.core.files.File\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">File</span></code></a> class.</p>\n<p>Be aware that files created in this way are not automatically closed.\nThe following approach may be used to close files automatically:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n\n<span class=\"go\"># Create a Python file object using open() and the with statement</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;/path/to/hello.world&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;w&quot;</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"n\">myfile</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"n\">myfile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;Hello World&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">myfile</span><span class=\"o\">.</span><span class=\"n\">closed</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">closed</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Closing files is especially important when accessing file fields in a loop\nover a large number of objects. If files are not manually closed after\naccessing them, the risk of running out of file descriptors may arise. This\nmay lead to the following error:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">OSError: [Errno 24] Too many open files</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-file-storage\">\n<span id=\"file-storage\"></span><h2>File storage<a class=\"headerlink\" href=\"#file-storage\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Behind the scenes, Django delegates decisions about how and where to store files\nto a file storage system. This is the object that actually understands things\nlike file systems, opening and reading files, etc.</p>\n<p>Django\u2019s default file storage is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.FileSystemStorage\" title=\"django.core.files.storage.FileSystemStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.core.files.storage.FileSystemStorage</span></code></a><code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code>. If you don\u2019t\nexplicitly provide a storage system in the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> key of the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> setting, this is the one that will be used.</p>\n<p>See below for details of the built-in default file storage system, and see\n<a class=\"reference internal\" href=\"../../howto/custom-file-storage/\"><span class=\"doc\">How to write a custom storage class</span></a> for information on writing your own file\nstorage system.</p>\n<div class=\"section\" id=\"s-storage-objects\">\n<span id=\"storage-objects\"></span><h3>Storage objects<a class=\"headerlink\" href=\"#storage-objects\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Though most of the time you\u2019ll want to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> object (which delegates to\nthe proper storage for that file), you can use file storage systems directly.\nYou can create an instance of some custom file storage class, or \u2013 often more\nuseful \u2013 you can use the global default storage system:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files.base</span> <span class=\"kn\">import</span> <span class=\"n\">ContentFile</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files.storage</span> <span class=\"kn\">import</span> <span class=\"n\">default_storage</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">default_storage</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">&quot;path/to/file&quot;</span><span class=\"p\">,</span> <span class=\"n\">ContentFile</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;new content&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">path</span>\n<span class=\"go\">&#39;path/to/file&#39;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">default_storage</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"go\">11</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">default_storage</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"go\">b&#39;new content&#39;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">default_storage</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">default_storage</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../ref/files/storage/\"><span class=\"doc\">File storage API</span></a> for the file storage API.</p>\n</div>\n<div class=\"section\" id=\"s-the-built-in-filesystem-storage-class\">\n<span id=\"s-builtin-fs-storage\"></span><span id=\"the-built-in-filesystem-storage-class\"></span><span id=\"builtin-fs-storage\"></span><h3>The built-in filesystem storage class<a class=\"headerlink\" href=\"#the-built-in-filesystem-storage-class\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django ships with a <a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.FileSystemStorage\" title=\"django.core.files.storage.FileSystemStorage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.core.files.storage.FileSystemStorage</span></code></a> class\nwhich implements basic local filesystem file storage.</p>\n<p>For example, the following code will store uploaded files under\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/media/photos</span></code> regardless of what your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_ROOT</span></code></a> setting is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files.storage</span> <span class=\"kn\">import</span> <span class=\"n\">FileSystemStorage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">FileSystemStorage</span><span class=\"p\">(</span><span class=\"n\">location</span><span class=\"o\">=</span><span class=\"s2\">&quot;/media/photos&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Car</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">fs</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><a class=\"reference internal\" href=\"../../howto/custom-file-storage/\"><span class=\"doc\">Custom storage systems</span></a> work the same way:\nyou can pass them in as the <code class=\"docutils literal notranslate\"><span class=\"pre\">storage</span></code> argument to a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-using-a-callable\">\n<span id=\"using-a-callable\"></span><h3>Using a callable<a class=\"headerlink\" href=\"#using-a-callable\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can use a callable as the <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField.storage\" title=\"django.db.models.FileField.storage\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">storage</span></code></a>\nparameter for <a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a>. This allows you to modify the used\nstorage at runtime, selecting different storages for different environments,\nfor example.</p>\n<p>Your callable will be evaluated when your models classes are loaded, and must\nreturn an instance of <a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage\" title=\"django.core.files.storage.Storage\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Storage</span></code></a>.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.storages</span> <span class=\"kn\">import</span> <span class=\"n\">MyLocalStorage</span><span class=\"p\">,</span> <span class=\"n\">MyRemoteStorage</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">select_storage</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">MyLocalStorage</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span> <span class=\"k\">else</span> <span class=\"n\">MyRemoteStorage</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">my_file</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">select_storage</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In order to set a storage defined in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> setting you can\nuse <a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.storages\" title=\"django.core.files.storage.storages\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">storages</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files.storage</span> <span class=\"kn\">import</span> <span class=\"n\">storages</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">select_storage</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">storages</span><span class=\"p\">[</span><span class=\"s2\">&quot;mystorage&quot;</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">upload</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">select_storage</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for <code class=\"docutils literal notranslate\"><span class=\"pre\">storages</span></code> was added.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["topics/testing/index", "Testing in Django", "N", "next"], ["topics/migrations", "Migrations", "P", "previous"]], "sourcename": "topics/files.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Managing files</a><ul>\n<li><a class=\"reference internal\" href=\"#using-files-in-models\">Using files in models</a></li>\n<li><a class=\"reference internal\" href=\"#the-file-object\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> object</a></li>\n<li><a class=\"reference internal\" href=\"#file-storage\">File storage</a><ul>\n<li><a class=\"reference internal\" href=\"#storage-objects\">Storage objects</a></li>\n<li><a class=\"reference internal\" href=\"#the-built-in-filesystem-storage-class\">The built-in filesystem storage class</a></li>\n<li><a class=\"reference internal\" href=\"#using-a-callable\">Using a callable</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "topics/files", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
