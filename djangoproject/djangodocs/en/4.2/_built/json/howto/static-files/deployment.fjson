{"parents": [{"link": "../../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../", "title": "How to manage static files (e.g. images, JavaScript, CSS)"}, "next": {"link": "../../windows/", "title": "How to install Django on Windows"}, "title": "How to deploy static files", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-deploy-static-files\">\n<span id=\"how-to-deploy-static-files\"></span><h1>How to deploy static files<a class=\"headerlink\" href=\"#how-to-deploy-static-files\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">For an introduction to the use of <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a>, see\n<a class=\"reference internal\" href=\"../\"><span class=\"doc\">How to manage static files (e.g. images, JavaScript, CSS)</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-serving-static-files-in-production\">\n<span id=\"s-staticfiles-production\"></span><span id=\"serving-static-files-in-production\"></span><span id=\"staticfiles-production\"></span><h2>Serving static files in production<a class=\"headerlink\" href=\"#serving-static-files-in-production\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The basic outline of putting static files into production consists of two\nsteps: run the <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> command when static files change, then\narrange for the collected static files directory (<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a>) to be\nmoved to the static file server and served. Depending the <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code>\n<a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> alias, files may need to be moved to a new location\nmanually or the <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django.contrib.staticfiles.storage.StaticFilesStorage.post_process\" title=\"django.contrib.staticfiles.storage.StaticFilesStorage.post_process\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">post_process</span></code></a> method of\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage</span></code> class might take care of that.</p>\n<p>As with all deployment tasks, the devil\u2019s in the details. Every production\nsetup will be a bit different, so you\u2019ll need to adapt the basic outline to fit\nyour needs. Below are a few common patterns that might help.</p>\n<div class=\"section\" id=\"s-serving-the-site-and-your-static-files-from-the-same-server\">\n<span id=\"serving-the-site-and-your-static-files-from-the-same-server\"></span><h3>Serving the site and your static files from the same server<a class=\"headerlink\" href=\"#serving-the-site-and-your-static-files-from-the-same-server\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you want to serve your static files from the same server that\u2019s already\nserving your site, the process may look something like:</p>\n<ul class=\"simple\">\n<li>Push your code up to the deployment server.</li>\n<li>On the server, run <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> to copy all the static files\ninto <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a>.</li>\n<li>Configure your web server to serve the files in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a>\nunder the URL <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a>. For example, here\u2019s\n<a class=\"reference internal\" href=\"../../deployment/wsgi/modwsgi/#serving-files\"><span class=\"std std-ref\">how to do this with Apache and mod_wsgi</span></a>.</li>\n</ul>\n<p>You\u2019ll probably want to automate this process, especially if you\u2019ve got\nmultiple web servers.</p>\n</div>\n<div class=\"section\" id=\"s-serving-static-files-from-a-dedicated-server\">\n<span id=\"serving-static-files-from-a-dedicated-server\"></span><h3>Serving static files from a dedicated server<a class=\"headerlink\" href=\"#serving-static-files-from-a-dedicated-server\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Most larger Django sites use a separate web server \u2013 i.e., one that\u2019s not also\nrunning Django \u2013 for serving static files. This server often runs a different\ntype of web server \u2013 faster but less full-featured. Some common choices are:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://nginx.org/en/\">Nginx</a></li>\n<li>A stripped-down version of <a class=\"reference external\" href=\"https://httpd.apache.org/\">Apache</a></li>\n</ul>\n<p>Configuring these servers is out of scope of this document; check each\nserver\u2019s respective documentation for instructions.</p>\n<p>Since your static file server won\u2019t be running Django, you\u2019ll need to modify\nthe deployment strategy to look something like:</p>\n<ul class=\"simple\">\n<li>When your static files change, run <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> locally.</li>\n<li>Push your local <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a> up to the static file server into the\ndirectory that\u2019s being served. <a class=\"reference external\" href=\"https://rsync.samba.org/\">rsync</a> is a\ncommon choice for this step since it only needs to transfer the bits of\nstatic files that have changed.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-serving-static-files-from-a-cloud-service-or-cdn\">\n<span id=\"s-staticfiles-from-cdn\"></span><span id=\"serving-static-files-from-a-cloud-service-or-cdn\"></span><span id=\"staticfiles-from-cdn\"></span><h3>Serving static files from a cloud service or CDN<a class=\"headerlink\" href=\"#serving-static-files-from-a-cloud-service-or-cdn\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Another common tactic is to serve static files from a cloud storage provider\nlike Amazon\u2019s S3 and/or a CDN (content delivery network). This lets you\nignore the problems of serving static files and can often make for\nfaster-loading web pages (especially when using a CDN).</p>\n<p>When using these services, the basic workflow would look a bit like the above,\nexcept that instead of using <code class=\"docutils literal notranslate\"><span class=\"pre\">rsync</span></code> to transfer your static files to the\nserver you\u2019d need to transfer the static files to the storage provider or CDN.</p>\n<p>There\u2019s any number of ways you might do this, but if the provider has an API,\nyou can use a <a class=\"reference internal\" href=\"../../custom-file-storage/\"><span class=\"doc\">custom file storage backend</span></a>\nto integrate the CDN with your Django project. If you\u2019ve written or are using a\n3rd party custom storage backend, you can tell <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> to use\nit by setting <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> in <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a>.</p>\n<p>For example, if you\u2019ve written an S3 storage backend in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">myproject.storage.S3Storage</span></code> you could use it with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">STORAGES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s2\">&quot;staticfiles&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;myproject.storage.S3Storage&quot;</span><span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Once that\u2019s done, all you have to do is run <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> and your\nstatic files would be pushed through your storage package up to S3. If you\nlater needed to switch to a different storage provider, you may only have to\nchange <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> in the <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> setting.</p>\n<p>For details on how you\u2019d write one of these backends, see\n<a class=\"reference internal\" href=\"../../custom-file-storage/\"><span class=\"doc\">How to write a custom storage class</span></a>. There are 3rd party apps available that\nprovide storage backends for many common file storage APIs. A good starting\npoint is the <a class=\"reference external\" href=\"https://djangopackages.org/grids/g/storage-backends/\">overview at djangopackages.org</a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <a class=\"reference internal\" href=\"../../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> setting was added.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-learn-more\">\n<span id=\"learn-more\"></span><h2>Learn more<a class=\"headerlink\" href=\"#learn-more\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For complete details on all the settings, commands, template tags, and other\npieces included in <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a>, see <a class=\"reference internal\" href=\"../../../ref/contrib/staticfiles/\"><span class=\"doc\">the\nstaticfiles reference</span></a>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/windows", "How to install Django on Windows", "N", "next"], ["howto/static-files/index", "How to manage static files (e.g. images, JavaScript, CSS)", "P", "previous"]], "sourcename": "howto/static-files/deployment.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to deploy static files</a><ul>\n<li><a class=\"reference internal\" href=\"#serving-static-files-in-production\">Serving static files in production</a><ul>\n<li><a class=\"reference internal\" href=\"#serving-the-site-and-your-static-files-from-the-same-server\">Serving the site and your static files from the same server</a></li>\n<li><a class=\"reference internal\" href=\"#serving-static-files-from-a-dedicated-server\">Serving static files from a dedicated server</a></li>\n<li><a class=\"reference internal\" href=\"#serving-static-files-from-a-cloud-service-or-cdn\">Serving static files from a cloud service or CDN</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#learn-more\">Learn more</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/static-files/deployment", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
