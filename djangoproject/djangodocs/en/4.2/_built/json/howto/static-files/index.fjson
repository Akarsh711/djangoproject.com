{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../overriding-templates/", "title": "How to override templates"}, "next": {"link": "deployment/", "title": "How to deploy static files"}, "title": "How to manage static files (e.g. images, JavaScript, CSS)", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-manage-static-files-e-g-images-javascript-css\">\n<span id=\"how-to-manage-static-files-e-g-images-javascript-css\"></span><h1>How to manage static files (e.g. images, JavaScript, CSS)<a class=\"headerlink\" href=\"#how-to-manage-static-files-e-g-images-javascript-css\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Websites generally need to serve additional files such as images, JavaScript,\nor CSS. In Django, we refer to these files as \u201cstatic files\u201d.  Django provides\n<a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a> to help you manage them.</p>\n<p>This page describes how you can serve these static files.</p>\n<div class=\"section\" id=\"s-configuring-static-files\">\n<span id=\"configuring-static-files\"></span><h2>Configuring static files<a class=\"headerlink\" href=\"#configuring-static-files\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ol class=\"arabic\">\n<li><p class=\"first\">Make sure that <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code> is included in your\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n</li>\n<li><p class=\"first\">In your settings file, define <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a>, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">STATIC_URL</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;static/&quot;</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">In your templates, use the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-static\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">static</span></code></a> template tag to build the URL for\nthe given relative path using the configured <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code>\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> alias.</p>\n<div class=\"highlight-html+django notranslate\" id=\"staticfiles-in-templates\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">static</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">static</span> <span class=\"s1\">&#39;my_app/example.jpg&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;My image&quot;</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Store your static files in a folder called <code class=\"docutils literal notranslate\"><span class=\"pre\">static</span></code> in your app. For\nexample <code class=\"docutils literal notranslate\"><span class=\"pre\">my_app/static/my_app/example.jpg</span></code>.</p>\n</li>\n</ol>\n<div class=\"admonition-serving-the-files admonition\">\n<p class=\"first admonition-title\">Serving the files</p>\n<p>In addition to these configuration steps, you\u2019ll also need to actually\nserve the static files.</p>\n<p>During development, if you use <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a>, this will\nbe done automatically by <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a> when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is set\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> (see <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.views.serve\" title=\"django.contrib.staticfiles.views.serve\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles.views.serve()</span></code></a>).</p>\n<p>This method is <strong>grossly inefficient</strong> and probably <strong>insecure</strong>,\nso it is <strong>unsuitable for production</strong>.</p>\n<p class=\"last\">See <a class=\"reference internal\" href=\"deployment/\"><span class=\"doc\">How to deploy static files</span></a> for proper strategies to serve\nstatic files in production environments.</p>\n</div>\n<p>Your project will probably also have static assets that aren\u2019t tied to a\nparticular app. In addition to using a <code class=\"docutils literal notranslate\"><span class=\"pre\">static/</span></code> directory inside your apps,\nyou can define a list of directories (<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATICFILES_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATICFILES_DIRS</span></code></a>) in your\nsettings file where Django will also look for static files. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">STATICFILES_DIRS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;static&quot;</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;/var/www/static/&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>See the documentation for the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATICFILES_FINDERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATICFILES_FINDERS</span></code></a> setting for\ndetails on how <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> finds your files.</p>\n<div class=\"admonition-static-file-namespacing admonition\">\n<p class=\"first admonition-title\">Static file namespacing</p>\n<p>Now we <em>might</em> be able to get away with putting our static files directly\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">my_app/static/</span></code> (rather than creating another <code class=\"docutils literal notranslate\"><span class=\"pre\">my_app</span></code>\nsubdirectory), but it would actually be a bad idea. Django will use the\nfirst static file it finds whose name matches, and if you had a static file\nwith the same name in a <em>different</em> application, Django would be unable to\ndistinguish between them. We need to be able to point Django at the right\none, and the best way to ensure this is by <em>namespacing</em> them. That is,\nby putting those static files inside <em>another</em> directory named for the\napplication itself.</p>\n<p class=\"last\">You can namespace static assets in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATICFILES_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATICFILES_DIRS</span></code></a> by\nspecifying <a class=\"reference internal\" href=\"../../ref/settings/#staticfiles-dirs-prefixes\"><span class=\"std std-ref\">prefixes</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-serving-static-files-during-development\">\n<span id=\"s-serving-static-files-in-development\"></span><span id=\"serving-static-files-during-development\"></span><span id=\"serving-static-files-in-development\"></span><h2>Serving static files during development<a class=\"headerlink\" href=\"#serving-static-files-during-development\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you use <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a> as explained above,\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a> will do this automatically when <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is set\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. If you don\u2019t have <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code> in\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, you can still manually serve static files using the\n<a class=\"reference internal\" href=\"../../ref/views/#django.views.static.serve\" title=\"django.views.static.serve\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.views.static.serve()</span></code></a> view.</p>\n<p>This is not suitable for production use! For some common deployment\nstrategies, see <a class=\"reference internal\" href=\"deployment/\"><span class=\"doc\">How to deploy static files</span></a>.</p>\n<p>For example, if your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_URL</span></code></a> is defined as <code class=\"docutils literal notranslate\"><span class=\"pre\">static/</span></code>, you can\ndo this by adding the following snippet to your <code class=\"docutils literal notranslate\"><span class=\"pre\">urls.py</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.static</span> <span class=\"kn\">import</span> <span class=\"n\">static</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ... the rest of your URLconf goes here ...</span>\n<span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">STATIC_URL</span><span class=\"p\">,</span> <span class=\"n\">document_root</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">STATIC_ROOT</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>This helper function works only in debug mode and only if\nthe given prefix is local (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">static/</span></code>) and not a URL (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">http://static.example.com/</span></code>).</p>\n<p>Also this helper function only serves the actual <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a>\nfolder; it doesn\u2019t perform static files discovery like\n<a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a>.</p>\n<p class=\"last\">Finally, static files are served via a wrapper at the WSGI application\nlayer. As a consequence, static files requests do not pass through the\nnormal <a class=\"reference internal\" href=\"../../topics/http/middleware/\"><span class=\"doc\">middleware chain</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-serving-files-uploaded-by-a-user-during-development\">\n<span id=\"s-serving-uploaded-files-in-development\"></span><span id=\"serving-files-uploaded-by-a-user-during-development\"></span><span id=\"serving-uploaded-files-in-development\"></span><h2>Serving files uploaded by a user during development<a class=\"headerlink\" href=\"#serving-files-uploaded-by-a-user-during-development\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>During development, you can serve user-uploaded media files from\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_ROOT</span></code></a> using the <a class=\"reference internal\" href=\"../../ref/views/#django.views.static.serve\" title=\"django.views.static.serve\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.views.static.serve()</span></code></a> view.</p>\n<p>This is not suitable for production use! For some common deployment\nstrategies, see <a class=\"reference internal\" href=\"deployment/\"><span class=\"doc\">How to deploy static files</span></a>.</p>\n<p>For example, if your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MEDIA_URL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MEDIA_URL</span></code></a> is defined as <code class=\"docutils literal notranslate\"><span class=\"pre\">media/</span></code>, you can do\nthis by adding the following snippet to your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ROOT_URLCONF\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ROOT_URLCONF</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls.static</span> <span class=\"kn\">import</span> <span class=\"n\">static</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ... the rest of your URLconf goes here ...</span>\n<span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">static</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_URL</span><span class=\"p\">,</span> <span class=\"n\">document_root</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">MEDIA_ROOT</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This helper function works only in debug mode and only if\nthe given prefix is local (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">media/</span></code>) and not a URL (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">http://media.example.com/</span></code>).</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-testing\">\n<span id=\"s-staticfiles-testing-support\"></span><span id=\"testing\"></span><span id=\"staticfiles-testing-support\"></span><h2>Testing<a class=\"headerlink\" href=\"#testing\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When running tests that use actual HTTP requests instead of the built-in\ntesting client (i.e. when using the built-in <a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.LiveServerTestCase\" title=\"django.test.LiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code></a>) the static assets need to be served along\nthe rest of the content so the test environment reproduces the real one as\nfaithfully as possible, but <code class=\"docutils literal notranslate\"><span class=\"pre\">LiveServerTestCase</span></code> has only very basic static\nfile-serving functionality: It doesn\u2019t know about the finders feature of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> application and assumes the static content has already been\ncollected under <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a>.</p>\n<p>Because of this, <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> ships its own\n<a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django.contrib.staticfiles.testing.StaticLiveServerTestCase\" title=\"django.contrib.staticfiles.testing.StaticLiveServerTestCase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles.testing.StaticLiveServerTestCase</span></code></a>, a subclass\nof the built-in one that has the ability to transparently serve all the assets\nduring execution of these tests in a way very similar to what we get at\ndevelopment time with <code class=\"docutils literal notranslate\"><span class=\"pre\">DEBUG</span> <span class=\"pre\">=</span> <span class=\"pre\">True</span></code>, i.e. without having to collect them\nusing <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> first.</p>\n</div>\n<div class=\"section\" id=\"s-deployment\">\n<span id=\"deployment\"></span><h2>Deployment<a class=\"headerlink\" href=\"#deployment\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a> provides a convenience management command\nfor gathering static files in a single directory so you can serve them easily.</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Set the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a> setting to the directory from which you\u2019d\nlike to serve these files, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">STATIC_ROOT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/var/www/example.com/static/&quot;</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Run the <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#django-admin-collectstatic\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">collectstatic</span></code></a> management command:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py collectstatic\n</pre></div>\n</div>\n<p>This will copy all files from your static folders into the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STATIC_ROOT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STATIC_ROOT</span></code></a> directory.</p>\n</li>\n<li><p class=\"first\">Use a web server of your choice to serve the\nfiles. <a class=\"reference internal\" href=\"deployment/\"><span class=\"doc\">How to deploy static files</span></a> covers some common deployment\nstrategies for static files.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-learn-more\">\n<span id=\"learn-more\"></span><h2>Learn more<a class=\"headerlink\" href=\"#learn-more\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>This document has covered the basics and some common usage patterns. For\ncomplete details on all the settings, commands, template tags, and other pieces\nincluded in <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/#module-django.contrib.staticfiles\" title=\"django.contrib.staticfiles: An app for handling static files.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.staticfiles</span></code></a>, see <a class=\"reference internal\" href=\"../../ref/contrib/staticfiles/\"><span class=\"doc\">the staticfiles\nreference</span></a>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/static-files/deployment", "How to deploy static files", "N", "next"], ["howto/overriding-templates", "How to override templates", "P", "previous"]], "sourcename": "howto/static-files/index.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to manage static files (e.g. images, JavaScript, CSS)</a><ul>\n<li><a class=\"reference internal\" href=\"#configuring-static-files\">Configuring static files</a></li>\n<li><a class=\"reference internal\" href=\"#serving-static-files-during-development\">Serving static files during development</a></li>\n<li><a class=\"reference internal\" href=\"#serving-files-uploaded-by-a-user-during-development\">Serving files uploaded by a user during development</a></li>\n<li><a class=\"reference internal\" href=\"#testing\">Testing</a></li>\n<li><a class=\"reference internal\" href=\"#deployment\">Deployment</a></li>\n<li><a class=\"reference internal\" href=\"#learn-more\">Learn more</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/static-files/index", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
