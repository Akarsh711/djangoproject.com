{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../upgrade-version/", "title": "How to upgrade Django to a newer version"}, "next": {"link": "../initial-data/", "title": "How to provide initial data for models"}, "title": "How to manage error reporting", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-manage-error-reporting\">\n<span id=\"how-to-manage-error-reporting\"></span><h1>How to manage error reporting<a class=\"headerlink\" href=\"#how-to-manage-error-reporting\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>When you\u2019re running a public site you should always turn off the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> setting. That will make your server run much faster, and will\nalso prevent malicious users from seeing details of your application that can be\nrevealed by the error pages.</p>\n<p>However, running with <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> means you\u2019ll never see\nerrors generated by your site \u2013 everyone will instead see your public error\npages. You need to keep track of errors that occur in deployed sites, so Django\ncan be configured to create reports with details about those errors.</p>\n<div class=\"section\" id=\"s-email-reports\">\n<span id=\"email-reports\"></span><h2>Email reports<a class=\"headerlink\" href=\"#email-reports\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-server-errors\">\n<span id=\"server-errors\"></span><h3>Server errors<a class=\"headerlink\" href=\"#server-errors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, Django will email the users listed in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ADMINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ADMINS</span></code></a> setting whenever your code raises an unhandled exception and\nresults in an internal server error (strictly speaking, for any response with\nan HTTP status code of 500 or greater). This gives the administrators immediate\nnotification of any errors. The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ADMINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ADMINS</span></code></a> will get a description of the\nerror, a complete Python traceback, and details about the HTTP request that\ncaused the error.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">In order to send email, Django requires a few settings telling it\nhow to connect to your mail server. At the very least, you\u2019ll need\nto specify <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST</span></code></a> and possibly\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_USER</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-EMAIL_HOST_PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">EMAIL_HOST_PASSWORD</span></code></a>,\nthough other settings may be also required depending on your mail\nserver\u2019s configuration. Consult <a class=\"reference internal\" href=\"../../ref/settings/\"><span class=\"doc\">the Django settings\ndocumentation</span></a> for a full list of email-related\nsettings.</p>\n</div>\n<p>By default, Django will send email from <a class=\"reference external\" href=\"mailto:root&#37;&#52;&#48;localhost\">root<span>&#64;</span>localhost</a>. However, some mail\nproviders reject all email from this address. To use a different sender\naddress, modify the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-SERVER_EMAIL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SERVER_EMAIL</span></code></a> setting.</p>\n<p>To activate this behavior, put the email addresses of the recipients in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-ADMINS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ADMINS</span></code></a> setting.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Server error emails are sent using the logging framework, so you can\ncustomize this behavior by <a class=\"reference internal\" href=\"../../topics/logging/\"><span class=\"doc\">customizing your logging configuration</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-errors\">\n<span id=\"errors\"></span><h3>404 errors<a class=\"headerlink\" href=\"#errors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django can also be configured to email errors about broken links (404 \u201cpage\nnot found\u201d errors). Django sends emails about 404 errors when:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>;</li>\n<li>Your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a> setting includes\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.BrokenLinkEmailsMiddleware\" title=\"django.middleware.common.BrokenLinkEmailsMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.middleware.common.BrokenLinkEmailsMiddleware</span></code></a>.</li>\n</ul>\n<p>If those conditions are met, Django will email the users listed in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MANAGERS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MANAGERS</span></code></a> setting whenever your code raises a 404 and the request has\na referer. It doesn\u2019t bother to email for 404s that don\u2019t have a referer \u2013\nthose are usually people typing in broken URLs or broken web bots. It also\nignores 404s when the referer is equal to the requested URL, since this\nbehavior is from broken web bots too.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.BrokenLinkEmailsMiddleware\" title=\"django.middleware.common.BrokenLinkEmailsMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BrokenLinkEmailsMiddleware</span></code></a> must appear\nbefore other middleware that intercepts 404 errors, such as\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.locale.LocaleMiddleware\" title=\"django.middleware.locale.LocaleMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">LocaleMiddleware</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/contrib/flatpages/#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware\" title=\"django.contrib.flatpages.middleware.FlatpageFallbackMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FlatpageFallbackMiddleware</span></code></a>.\nPut it toward the top of your <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a> setting.</p>\n</div>\n<p>You can tell Django to stop reporting particular 404s by tweaking the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-IGNORABLE_404_URLS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">IGNORABLE_404_URLS</span></code></a> setting. It should be a list of compiled\nregular expression objects. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">IGNORABLE_404_URLS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;\\.(php|cgi)$&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^/phpmyadmin/&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>In this example, a 404 to any URL ending with <code class=\"docutils literal notranslate\"><span class=\"pre\">.php</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">.cgi</span></code> will <em>not</em> be\nreported. Neither will any URL starting with <code class=\"docutils literal notranslate\"><span class=\"pre\">/phpmyadmin/</span></code>.</p>\n<p>The following example shows how to exclude some conventional URLs that browsers and\ncrawlers often request:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">IGNORABLE_404_URLS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^/apple-touch-icon.*\\.png$&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^/favicon\\.ico$&quot;</span><span class=\"p\">),</span>\n    <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;^/robots\\.txt$&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>(Note that these are regular expressions, so we put a backslash in front of\nperiods to escape them.)</p>\n<p>If you\u2019d like to customize the behavior of\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.common.BrokenLinkEmailsMiddleware\" title=\"django.middleware.common.BrokenLinkEmailsMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.middleware.common.BrokenLinkEmailsMiddleware</span></code></a> further (for\nexample to ignore requests coming from web crawlers), you should subclass it\nand override its methods.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">404 errors are logged using the logging framework. By default, these log\nrecords are ignored, but you can use them for error reporting by writing a\nhandler and <a class=\"reference internal\" href=\"../../topics/logging/\"><span class=\"doc\">configuring logging</span></a> appropriately.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-filtering-error-reports\">\n<span id=\"s-id1\"></span><span id=\"filtering-error-reports\"></span><span id=\"id1\"></span><h2>Filtering error reports<a class=\"headerlink\" href=\"#filtering-error-reports\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Filtering sensitive data is a hard problem, and it\u2019s nearly impossible to\nguarantee that sensitive data won\u2019t leak into an error report. Therefore,\nerror reports should only be available to trusted team members and you\nshould avoid transmitting error reports unencrypted over the internet\n(such as through email).</p>\n</div>\n<div class=\"section\" id=\"s-filtering-sensitive-information\">\n<span id=\"filtering-sensitive-information\"></span><h3>Filtering sensitive information<a class=\"headerlink\" href=\"#filtering-sensitive-information\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Error reports are really helpful for debugging errors, so it is generally\nuseful to record as much relevant information about those errors as possible.\nFor example, by default Django records the <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Stack_trace\">full traceback</a> for the\nexception raised, each <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/Stack_frame\">traceback frame</a>\u2019s local variables, and the\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a>\u2019s <a class=\"reference internal\" href=\"../../ref/request-response/#httprequest-attributes\"><span class=\"std std-ref\">attributes</span></a>.</p>\n<p>However, sometimes certain types of information may be too sensitive and thus\nmay not be appropriate to be kept track of, for example a user\u2019s password or\ncredit card number. So in addition to filtering out settings that appear to be\nsensitive as described in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> documentation, Django offers a\nset of function decorators to help you control which information should be\nfiltered out of error reports in a production environment (that is, where\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>): <a class=\"reference internal\" href=\"#django.views.decorators.debug.sensitive_variables\" title=\"django.views.decorators.debug.sensitive_variables\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sensitive_variables()</span></code></a> and\n<a class=\"reference internal\" href=\"#django.views.decorators.debug.sensitive_post_parameters\" title=\"django.views.decorators.debug.sensitive_post_parameters\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sensitive_post_parameters()</span></code></a>.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.debug.sensitive_variables\">\n<code class=\"sig-name descname\"><span class=\"pre\">sensitive_variables</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">variables</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/views/decorators/debug/#sensitive_variables\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.debug.sensitive_variables\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If a function (either a view or any regular callback) in your code uses\nlocal variables susceptible to contain sensitive information, you may\nprevent the values of those variables from being included in error reports\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">sensitive_variables</span></code> decorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.debug</span> <span class=\"kn\">import</span> <span class=\"n\">sensitive_variables</span>\n\n\n<span class=\"nd\">@sensitive_variables</span><span class=\"p\">(</span><span class=\"s2\">&quot;user&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pw&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cc&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_info</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">pass_word</span>\n    <span class=\"n\">cc</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">credit_card_number</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>In the above example, the values for the <code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">pw</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">cc</span></code>\nvariables will be hidden and replaced with stars (<code class=\"docutils literal notranslate\"><span class=\"pre\">**********</span></code>)\nin the error reports, whereas the value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> variable will be\ndisclosed.</p>\n<p>To systematically hide all local variables of a function from error logs,\ndo not provide any argument to the <code class=\"docutils literal notranslate\"><span class=\"pre\">sensitive_variables</span></code> decorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@sensitive_variables</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_function</span><span class=\"p\">():</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition-when-using-multiple-decorators admonition\">\n<p class=\"first admonition-title\">When using multiple decorators</p>\n<p>If the variable you want to hide is also a function argument (e.g.\n\u2018<code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code>\u2019 in the following example), and if the decorated function has\nmultiple decorators, then make sure to place <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;sensitive_variables</span></code>\nat the top of the decorator chain. This way it will also hide the\nfunction argument as it gets passed through the other decorators:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@sensitive_variables</span><span class=\"p\">(</span><span class=\"s2\">&quot;user&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;pw&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;cc&quot;</span><span class=\"p\">)</span>\n<span class=\"nd\">@some_decorator</span>\n<span class=\"nd\">@another_decorator</span>\n<span class=\"k\">def</span> <span class=\"nf\">process_info</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Due to the machinery needed to cross the sync/async boundary,\n<a class=\"reference internal\" href=\"../../topics/async/#asgiref.sync.sync_to_async\" title=\"asgiref.sync.sync_to_async\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sync_to_async()</span></code></a> and\n<a class=\"reference internal\" href=\"../../topics/async/#asgiref.sync.async_to_sync\" title=\"asgiref.sync.async_to_sync\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">async_to_sync()</span></code></a> are <strong>not</strong> compatible with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sensitive_variables()</span></code>.</p>\n<p class=\"last\">If using these adapters with sensitive variables, ensure to audit\nexception reporting, and consider implementing a <a class=\"reference internal\" href=\"#custom-error-reports\"><span class=\"std std-ref\">custom filter</span></a> if necessary.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.views.decorators.debug.sensitive_post_parameters\">\n<code class=\"sig-name descname\"><span class=\"pre\">sensitive_post_parameters</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">parameters</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/views/decorators/debug/#sensitive_post_parameters\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.decorators.debug.sensitive_post_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If one of your views receives an <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object\nwith <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.HttpRequest.POST\" title=\"django.http.HttpRequest.POST\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">POST</span> <span class=\"pre\">parameters</span></code></a> susceptible to\ncontain sensitive information, you may prevent the values of those\nparameters from being included in the error reports using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sensitive_post_parameters</span></code> decorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.debug</span> <span class=\"kn\">import</span> <span class=\"n\">sensitive_post_parameters</span>\n\n\n<span class=\"nd\">@sensitive_post_parameters</span><span class=\"p\">(</span><span class=\"s2\">&quot;pass_word&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;credit_card_number&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">record_user_profile</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">UserProfile</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n        <span class=\"n\">user</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">,</span>\n        <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s2\">&quot;pass_word&quot;</span><span class=\"p\">],</span>\n        <span class=\"n\">credit_card</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s2\">&quot;credit_card_number&quot;</span><span class=\"p\">],</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">POST</span><span class=\"p\">[</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>In the above example, the values for the <code class=\"docutils literal notranslate\"><span class=\"pre\">pass_word</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">credit_card_number</span></code> POST parameters will be hidden and replaced with\nstars (<code class=\"docutils literal notranslate\"><span class=\"pre\">**********</span></code>) in the request\u2019s representation inside the\nerror reports, whereas the value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> parameter will be\ndisclosed.</p>\n<p>To systematically hide all POST parameters of a request in error reports,\ndo not provide any argument to the <code class=\"docutils literal notranslate\"><span class=\"pre\">sensitive_post_parameters</span></code> decorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@sensitive_post_parameters</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>All POST parameters are systematically filtered out of error reports for\ncertain <a class=\"reference internal\" href=\"../../topics/auth/default/#module-django.contrib.auth.views\" title=\"django.contrib.auth.views\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views</span></code></a> views (<code class=\"docutils literal notranslate\"><span class=\"pre\">login</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">password_reset_confirm</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">password_change</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">add_view</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">user_change_password</span></code> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">auth</span></code> admin) to prevent the leaking of\nsensitive information such as user passwords.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-custom-error-reports\">\n<span id=\"s-id2\"></span><span id=\"custom-error-reports\"></span><span id=\"id2\"></span><h3>Custom error reports<a class=\"headerlink\" href=\"#custom-error-reports\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All <a class=\"reference internal\" href=\"#django.views.decorators.debug.sensitive_variables\" title=\"django.views.decorators.debug.sensitive_variables\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sensitive_variables()</span></code></a> and <a class=\"reference internal\" href=\"#django.views.decorators.debug.sensitive_post_parameters\" title=\"django.views.decorators.debug.sensitive_post_parameters\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">sensitive_post_parameters()</span></code></a> do is,\nrespectively, annotate the decorated function with the names of sensitive\nvariables and annotate the <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> object with the names of sensitive\nPOST parameters, so that this sensitive information can later be filtered out\nof reports when an error occurs. The actual filtering is done by Django\u2019s\ndefault error reporter filter:\n<a class=\"reference internal\" href=\"#django.views.debug.SafeExceptionReporterFilter\" title=\"django.views.debug.SafeExceptionReporterFilter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.views.debug.SafeExceptionReporterFilter</span></code></a>. This filter uses the\ndecorators\u2019 annotations to replace the corresponding values with stars\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">**********</span></code>) when the error reports are produced. If you wish to\noverride or customize this default behavior for your entire site, you need to\ndefine your own filter class and tell Django to use it via the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEFAULT_EXCEPTION_REPORTER_FILTER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_EXCEPTION_REPORTER_FILTER</span></code></a> setting:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DEFAULT_EXCEPTION_REPORTER_FILTER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;path.to.your.CustomExceptionReporterFilter&quot;</span>\n</pre></div>\n</div>\n<p>You may also control in a more granular way which filter to use within any\ngiven view by setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code>\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">exception_reporter_filter</span></code>\nattribute:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">exception_reporter_filter</span> <span class=\"o\">=</span> <span class=\"n\">CustomExceptionReporterFilter</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Your custom filter class needs to inherit from\n<a class=\"reference internal\" href=\"#django.views.debug.SafeExceptionReporterFilter\" title=\"django.views.debug.SafeExceptionReporterFilter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.views.debug.SafeExceptionReporterFilter</span></code></a> and may override the\nfollowing attributes and methods:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.SafeExceptionReporterFilter\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">SafeExceptionReporterFilter</span></code><a class=\"reference internal\" href=\"../../_modules/django/views/debug/#SafeExceptionReporterFilter\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.SafeExceptionReporterFilter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.SafeExceptionReporterFilter.cleansed_substitute\">\n<code class=\"sig-name descname\"><span class=\"pre\">cleansed_substitute</span></code><a class=\"headerlink\" href=\"#django.views.debug.SafeExceptionReporterFilter.cleansed_substitute\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The string value to replace sensitive value with. By default it\nreplaces the values of sensitive variables with stars\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">**********</span></code>).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.SafeExceptionReporterFilter.hidden_settings\">\n<code class=\"sig-name descname\"><span class=\"pre\">hidden_settings</span></code><a class=\"headerlink\" href=\"#django.views.debug.SafeExceptionReporterFilter.hidden_settings\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A compiled regular expression object used to match settings and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.META</span></code> values considered as sensitive. By default equivalent\nto:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n<span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;API|TOKEN|KEY|SECRET|PASS|SIGNATURE|HTTP_COOKIE&quot;</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">IGNORECASE</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_COOKIE</span></code> was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.SafeExceptionReporterFilter.is_active\">\n<code class=\"sig-name descname\"><span class=\"pre\">is_active</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/views/debug/#SafeExceptionReporterFilter.is_active\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.SafeExceptionReporterFilter.is_active\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to activate the filtering in\n<a class=\"reference internal\" href=\"#django.views.debug.SafeExceptionReporterFilter.get_post_parameters\" title=\"django.views.debug.SafeExceptionReporterFilter.get_post_parameters\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_post_parameters()</span></code></a> and <a class=\"reference internal\" href=\"#django.views.debug.SafeExceptionReporterFilter.get_traceback_frame_variables\" title=\"django.views.debug.SafeExceptionReporterFilter.get_traceback_frame_variables\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_traceback_frame_variables()</span></code></a>.\nBy default the filter is active if <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. Note\nthat sensitive <code class=\"docutils literal notranslate\"><span class=\"pre\">request.META</span></code> values are always filtered along with\nsensitive setting values, as described in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a>\ndocumentation.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.SafeExceptionReporterFilter.get_post_parameters\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_post_parameters</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/views/debug/#SafeExceptionReporterFilter.get_post_parameters\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.SafeExceptionReporterFilter.get_post_parameters\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the filtered dictionary of POST parameters. Sensitive values\nare replaced with <a class=\"reference internal\" href=\"#django.views.debug.SafeExceptionReporterFilter.cleansed_substitute\" title=\"django.views.debug.SafeExceptionReporterFilter.cleansed_substitute\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">cleansed_substitute</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.SafeExceptionReporterFilter.get_traceback_frame_variables\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_traceback_frame_variables</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>, <em><span class=\"n\"><span class=\"pre\">tb_frame</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/views/debug/#SafeExceptionReporterFilter.get_traceback_frame_variables\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.SafeExceptionReporterFilter.get_traceback_frame_variables\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the filtered dictionary of local variables for the given\ntraceback frame. Sensitive values are replaced with\n<a class=\"reference internal\" href=\"#django.views.debug.SafeExceptionReporterFilter.cleansed_substitute\" title=\"django.views.debug.SafeExceptionReporterFilter.cleansed_substitute\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">cleansed_substitute</span></code></a>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>If you need to customize error reports beyond filtering you may specify a\ncustom error reporter class by defining the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEFAULT_EXCEPTION_REPORTER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_EXCEPTION_REPORTER</span></code></a> setting:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DEFAULT_EXCEPTION_REPORTER</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;path.to.your.CustomExceptionReporter&quot;</span>\n</pre></div>\n</div>\n<p>The exception reporter is responsible for compiling the exception report data,\nand formatting it as text or HTML appropriately. (The exception reporter uses\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEFAULT_EXCEPTION_REPORTER_FILTER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_EXCEPTION_REPORTER_FILTER</span></code></a> when preparing the exception\nreport data.)</p>\n<p>Your custom reporter class needs to inherit from\n<a class=\"reference internal\" href=\"#django.views.debug.ExceptionReporter\" title=\"django.views.debug.ExceptionReporter\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.views.debug.ExceptionReporter</span></code></a>.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.ExceptionReporter\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">ExceptionReporter</span></code><a class=\"reference internal\" href=\"../../_modules/django/views/debug/#ExceptionReporter\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.ExceptionReporter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.ExceptionReporter.html_template_path\">\n<code class=\"sig-name descname\"><span class=\"pre\">html_template_path</span></code><a class=\"headerlink\" href=\"#django.views.debug.ExceptionReporter.html_template_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Property that returns a <a class=\"reference external\" href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pathlib.Path</span></code></a> representing the absolute\nfilesystem path to a template for rendering the HTML representation of\nthe exception. Defaults to the Django provided template.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.ExceptionReporter.text_template_path\">\n<code class=\"sig-name descname\"><span class=\"pre\">text_template_path</span></code><a class=\"headerlink\" href=\"#django.views.debug.ExceptionReporter.text_template_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Property that returns a <a class=\"reference external\" href=\"https://docs.python.org/3/library/pathlib.html#pathlib.Path\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">pathlib.Path</span></code></a> representing the absolute\nfilesystem path to a template for rendering the plain-text\nrepresentation of the exception. Defaults to the Django provided\ntemplate.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.ExceptionReporter.get_traceback_data\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_traceback_data</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/views/debug/#ExceptionReporter.get_traceback_data\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.ExceptionReporter.get_traceback_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return a dictionary containing traceback information.</p>\n<p>This is the main extension point for customizing exception reports, for\nexample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.debug</span> <span class=\"kn\">import</span> <span class=\"n\">ExceptionReporter</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomExceptionReporter</span><span class=\"p\">(</span><span class=\"n\">ExceptionReporter</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_traceback_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_traceback_data</span><span class=\"p\">()</span>\n        <span class=\"c1\"># ... remove/add something here ...</span>\n        <span class=\"k\">return</span> <span class=\"n\">data</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.ExceptionReporter.get_traceback_html\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_traceback_html</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/views/debug/#ExceptionReporter.get_traceback_html\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.ExceptionReporter.get_traceback_html\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return HTML version of exception report.</p>\n<p>Used for HTML version of debug 500 HTTP error page.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.views.debug.ExceptionReporter.get_traceback_text\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_traceback_text</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/views/debug/#ExceptionReporter.get_traceback_text\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.views.debug.ExceptionReporter.get_traceback_text\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Return plain text version of exception report.</p>\n<p>Used for plain text version of debug 500 HTTP error page and email\nreports.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>As with the filter class, you may control which exception reporter class to use\nwithin any given view by setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code>\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">exception_reporter_class</span></code> attribute:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">exception_reporter_class</span> <span class=\"o\">=</span> <span class=\"n\">CustomExceptionReporter</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">You can also set up custom error reporting by writing a custom piece of\n<a class=\"reference internal\" href=\"../../topics/http/middleware/#exception-middleware\"><span class=\"std std-ref\">exception middleware</span></a>. If you do write custom\nerror handling, it\u2019s a good idea to emulate Django\u2019s built-in error handling\nand only report/log errors if <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DEBUG\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEBUG</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/initial-data", "How to provide initial data for models", "N", "next"], ["howto/upgrade-version", "How to upgrade Django to a newer version", "P", "previous"]], "sourcename": "howto/error-reporting.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to manage error reporting</a><ul>\n<li><a class=\"reference internal\" href=\"#email-reports\">Email reports</a><ul>\n<li><a class=\"reference internal\" href=\"#server-errors\">Server errors</a></li>\n<li><a class=\"reference internal\" href=\"#errors\">404 errors</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#filtering-error-reports\">Filtering error reports</a><ul>\n<li><a class=\"reference internal\" href=\"#filtering-sensitive-information\">Filtering sensitive information</a></li>\n<li><a class=\"reference internal\" href=\"#custom-error-reports\">Custom error reports</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/error-reporting", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
