{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../outputting-pdf/", "title": "How to create PDF files"}, "next": {"link": "../static-files/", "title": "How to manage static files (e.g. images, JavaScript, CSS)"}, "title": "How to override templates", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-override-templates\">\n<span id=\"how-to-override-templates\"></span><h1>How to override templates<a class=\"headerlink\" href=\"#how-to-override-templates\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>In your project, you might want to override a template in another Django\napplication, whether it be a third-party application or a contrib application\nsuch as <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code>. You can either put template overrides in your\nproject\u2019s templates directory or in an application\u2019s templates directory.</p>\n<p>If you have app and project templates directories that both contain overrides,\nthe default Django template loader will try to load the template from the\nproject-level directory first. In other words, <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a>\nis searched before <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-APP_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APP_DIRS</span></code></a>.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Read <a class=\"reference internal\" href=\"../../ref/forms/renderers/#overriding-built-in-widget-templates\"><span class=\"std std-ref\">Overriding built-in widget templates</span></a> if you\u2019re looking to\ndo that.</p>\n</div>\n<div class=\"section\" id=\"s-overriding-from-the-project-s-templates-directory\">\n<span id=\"overriding-from-the-project-s-templates-directory\"></span><h2>Overriding from the project\u2019s templates directory<a class=\"headerlink\" href=\"#overriding-from-the-project-s-templates-directory\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>First, we\u2019ll explore overriding templates by creating replacement templates in\nyour project\u2019s templates directory.</p>\n<p>Let\u2019s say you\u2019re trying to override the templates for a third-party application\ncalled <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code>, which provides the templates <code class=\"docutils literal notranslate\"><span class=\"pre\">blog/post.html</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">blog/list.html</span></code>. The relevant settings for your project would look like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n<span class=\"n\">BASE_DIR</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"vm\">__file__</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parent</span><span class=\"o\">.</span><span class=\"n\">parent</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;blog&quot;</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n\n<span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;BACKEND&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.template.backends.django.DjangoTemplates&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;DIRS&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">BASE_DIR</span> <span class=\"o\">/</span> <span class=\"s2\">&quot;templates&quot;</span><span class=\"p\">],</span>\n        <span class=\"s2\">&quot;APP_DIRS&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEMPLATES</span></code></a> setting and <code class=\"docutils literal notranslate\"><span class=\"pre\">BASE_DIR</span></code> will already exist if you\ncreated your project using the default project template. The setting that needs\nto be modified is <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a>.</p>\n<p>These settings assume you have a <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> directory in the root of your\nproject. To override the templates for the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> app, create a folder\nin the <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> directory, and add the template files to that folder:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>templates/\n    blog/\n        list.html\n        post.html\n</pre></div>\n</div>\n<p>The template loader first looks for templates in the <code class=\"docutils literal notranslate\"><span class=\"pre\">DIRS</span></code> directory. When\nthe views in the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> app ask for the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog/post.html</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">blog/list.html</span></code> templates, the loader will return the files you just created.</p>\n</div>\n<div class=\"section\" id=\"s-overriding-from-an-app-s-template-directory\">\n<span id=\"overriding-from-an-app-s-template-directory\"></span><h2>Overriding from an app\u2019s template directory<a class=\"headerlink\" href=\"#overriding-from-an-app-s-template-directory\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Since you\u2019re overriding templates located outside of one of your project\u2019s\napps, it\u2019s more common to use the first method and put template overrides in a\nproject\u2019s templates folder. If you prefer, however, it\u2019s also possible to put\nthe overrides in an app\u2019s template directory.</p>\n<p>First, make sure your template settings are checking inside app directories:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">TEMPLATES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"s2\">&quot;APP_DIRS&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>If you want to put the template overrides in an app called <code class=\"docutils literal notranslate\"><span class=\"pre\">myapp</span></code> and the\ntemplates to override are named <code class=\"docutils literal notranslate\"><span class=\"pre\">blog/list.html</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">blog/post.html</span></code>,\nthen your directory structure will look like:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>myapp/\n    templates/\n        blog/\n            list.html\n            post.html\n</pre></div>\n</div>\n<p>With <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-TEMPLATES-APP_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">APP_DIRS</span></code></a> set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the template\nloader will look in the app\u2019s templates directory and find the templates.</p>\n</div>\n<div class=\"section\" id=\"s-extending-an-overridden-template\">\n<span id=\"s-id1\"></span><span id=\"extending-an-overridden-template\"></span><span id=\"id1\"></span><h2>Extending an overridden template<a class=\"headerlink\" href=\"#extending-an-overridden-template\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>With your template loaders configured, you can extend a template using the\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-extends\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">extends</span> <span class=\"pre\">%}</span></code></a> template tag whilst at the same time overriding\nit. This can allow you to make small customizations without needing to\nreimplement the entire template.</p>\n<p>For example, you can use this technique to add a custom logo to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code> template:</p>\n<blockquote>\n<div><div class=\"literal-block-wrapper docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">templates/admin/base_site.html</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span> <span class=\"cp\">{%</span> <span class=\"k\">extends</span> <span class=\"s2\">&quot;admin/base_site.html&quot;</span> <span class=\"cp\">%}</span>\n\n <span class=\"cp\">{%</span> <span class=\"k\">block</span> <span class=\"nv\">branding</span> <span class=\"cp\">%}</span>\n     <span class=\"p\">&lt;</span><span class=\"nt\">img</span> <span class=\"na\">src</span><span class=\"o\">=</span><span class=\"s\">&quot;link/to/logo.png&quot;</span> <span class=\"na\">alt</span><span class=\"o\">=</span><span class=\"s\">&quot;logo&quot;</span><span class=\"p\">&gt;</span>\n     <span class=\"cp\">{{</span> <span class=\"nb\">block</span><span class=\"nv\">.super</span> <span class=\"cp\">}}</span>\n <span class=\"cp\">{%</span> <span class=\"k\">endblock</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n</div></blockquote>\n<p>Key points to note:</p>\n<ul class=\"simple\">\n<li>The example creates a file at <code class=\"docutils literal notranslate\"><span class=\"pre\">templates/admin/base_site.html</span></code> that uses\nthe configured project-level <code class=\"docutils literal notranslate\"><span class=\"pre\">templates</span></code> directory to override\n<code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code>.</li>\n<li>The new template extends <code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code>, which is the same template\nas is being overridden.</li>\n<li>The template replaces just the <code class=\"docutils literal notranslate\"><span class=\"pre\">branding</span></code> block, adding a custom logo, and\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">block.super</span></code> to retain the prior content.</li>\n<li>The rest of the template is inherited unchanged from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">admin/base_site.html</span></code>.</li>\n</ul>\n<p>This technique works because the template loader does not consider the already\nloaded override template (at <code class=\"docutils literal notranslate\"><span class=\"pre\">templates/admin/base_site.html</span></code>) when\nresolving the <code class=\"docutils literal notranslate\"><span class=\"pre\">extends</span></code> tag. Combined with <code class=\"docutils literal notranslate\"><span class=\"pre\">block.super</span></code> it is a powerful\ntechnique to make small customizations.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/static-files/index", "How to manage static files (e.g. images, JavaScript, CSS)", "N", "next"], ["howto/outputting-pdf", "How to create PDF files", "P", "previous"]], "sourcename": "howto/overriding-templates.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to override templates</a><ul>\n<li><a class=\"reference internal\" href=\"#overriding-from-the-project-s-templates-directory\">Overriding from the project\u2019s templates directory</a></li>\n<li><a class=\"reference internal\" href=\"#overriding-from-an-app-s-template-directory\">Overriding from an app\u2019s template directory</a></li>\n<li><a class=\"reference internal\" href=\"#extending-an-overridden-template\">Extending an overridden template</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/overriding-templates", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}