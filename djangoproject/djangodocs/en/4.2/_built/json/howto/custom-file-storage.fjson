{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../custom-template-tags/", "title": "How to create custom template tags and filters"}, "next": {"link": "../deployment/", "title": "How to deploy Django"}, "title": "How to write a custom storage class", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-write-a-custom-storage-class\">\n<span id=\"how-to-write-a-custom-storage-class\"></span><h1>How to write a custom storage class<a class=\"headerlink\" href=\"#how-to-write-a-custom-storage-class\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>If you need to provide custom file storage \u2013 a common example is storing files\non some remote system \u2013 you can do so by defining a custom storage class.\nYou\u2019ll need to follow these steps:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Your custom storage system must be a subclass of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.files.storage.Storage</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files.storage</span> <span class=\"kn\">import</span> <span class=\"n\">Storage</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyStorage</span><span class=\"p\">(</span><span class=\"n\">Storage</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Django must be able to instantiate your storage system without any arguments.\nThis means that any settings should be taken from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.conf.settings</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.files.storage</span> <span class=\"kn\">import</span> <span class=\"n\">Storage</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyStorage</span><span class=\"p\">(</span><span class=\"n\">Storage</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">option</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">option</span><span class=\"p\">:</span>\n            <span class=\"n\">option</span> <span class=\"o\">=</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">CUSTOM_STORAGE_OPTIONS</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Your storage class must implement the <a class=\"reference internal\" href=\"#django.core.files.storage._open\" title=\"django.core.files.storage._open\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">_open()</span></code></a> and <a class=\"reference internal\" href=\"#django.core.files.storage._save\" title=\"django.core.files.storage._save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">_save()</span></code></a>\nmethods, along with any other methods appropriate to your storage class. See\nbelow for more on these methods.</p>\n<p>In addition, if your class provides local file storage, it must override\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">path()</span></code> method.</p>\n</li>\n<li><p class=\"first\">Your storage class must be <a class=\"reference internal\" href=\"../../topics/migrations/#custom-deconstruct-method\"><span class=\"std std-ref\">deconstructible</span></a>\nso it can be serialized when it\u2019s used on a field in a migration. As long\nas your field has arguments that are themselves\n<a class=\"reference internal\" href=\"../../topics/migrations/#migration-serializing\"><span class=\"std std-ref\">serializable</span></a>, you can use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.deconstruct.deconstructible</span></code> class decorator for this\n(that\u2019s what Django uses on FileSystemStorage).</p>\n</li>\n</ol>\n<p>By default, the following methods raise <code class=\"docutils literal notranslate\"><span class=\"pre\">NotImplementedError</span></code> and will\ntypically have to be overridden:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.delete\" title=\"django.core.files.storage.Storage.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.delete()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.exists\" title=\"django.core.files.storage.Storage.exists\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.exists()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.listdir\" title=\"django.core.files.storage.Storage.listdir\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.listdir()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.size\" title=\"django.core.files.storage.Storage.size\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.size()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.Storage.url\" title=\"django.core.files.storage.Storage.url\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Storage.url()</span></code></a></li>\n</ul>\n<p>Note however that not all these methods are required and may be deliberately\nomitted. As it happens, it is possible to leave each method unimplemented and\nstill have a working Storage.</p>\n<p>By way of example, if listing the contents of certain storage backends turns\nout to be expensive, you might decide not to implement <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage.listdir()</span></code>.</p>\n<p>Another example would be a backend that only handles writing to files. In this\ncase, you would not need to implement any of the above methods.</p>\n<p>Ultimately, which of these methods are implemented is up to you. Leaving some\nmethods unimplemented will result in a partial (possibly broken) interface.</p>\n<p>You\u2019ll also usually want to use hooks specifically designed for custom storage\nobjects. These are:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.storage._open\">\n<code class=\"sig-name descname\"><span class=\"pre\">_open</span></code>(<em><span class=\"n\"><span class=\"pre\">name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">mode</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'rb'</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.storage._open\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><strong>Required</strong>.</p>\n<p>Called by <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage.open()</span></code>, this is the actual mechanism the storage class\nuses to open the file. This must return a <code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> object, though in most cases,\nyou\u2019ll want to return some subclass here that implements logic specific to the\nbackend storage system.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.storage._save\">\n<code class=\"sig-name descname\"><span class=\"pre\">_save</span></code>(<em><span class=\"n\"><span class=\"pre\">name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.storage._save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Called by <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage.save()</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> will already have gone through\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_valid_name()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">get_available_name()</span></code>, and the <code class=\"docutils literal notranslate\"><span class=\"pre\">content</span></code> will be a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">File</span></code> object itself.</p>\n<p>Should return the actual name of name of the file saved (usually the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>\npassed in, but if the storage needs to change the file name return the new name\ninstead).</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.storage.get_valid_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_valid_name</span></code>(<em><span class=\"n\"><span class=\"pre\">name</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.storage.get_valid_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a filename suitable for use with the underlying storage system. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> argument passed to this method is either the original filename sent to\nthe server or, if <code class=\"docutils literal notranslate\"><span class=\"pre\">upload_to</span></code> is a callable, the filename returned by that\nmethod after any path information is removed. Override this to customize how\nnon-standard characters are converted to safe filenames.</p>\n<p>The code provided on <code class=\"docutils literal notranslate\"><span class=\"pre\">Storage</span></code> retains only alpha-numeric characters, periods\nand underscores from the original filename, removing everything else.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.storage.get_alternative_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_alternative_name</span></code>(<em><span class=\"n\"><span class=\"pre\">file_root</span></span></em>, <em><span class=\"n\"><span class=\"pre\">file_ext</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.storage.get_alternative_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns an alternative filename based on the <code class=\"docutils literal notranslate\"><span class=\"pre\">file_root</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">file_ext</span></code>\nparameters. By default, an underscore plus a random 7 character alphanumeric\nstring is appended to the filename before the extension.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.core.files.storage.get_available_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_available_name</span></code>(<em><span class=\"n\"><span class=\"pre\">name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_length</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.core.files.storage.get_available_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Returns a filename that is available in the storage mechanism, possibly taking\nthe provided filename into account. The <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> argument passed to this method\nwill have already cleaned to a filename valid for the storage system, according\nto the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_valid_name()</span></code> method described above.</p>\n<p>The length of the filename will not exceed <code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code>, if provided. If a\nfree unique filename cannot be found, a <a class=\"reference internal\" href=\"../../ref/exceptions/#django.core.exceptions.SuspiciousOperation\" title=\"django.core.exceptions.SuspiciousOperation\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">SuspiciousFileOperation</span></code></a> exception is raised.</p>\n<p>If a file with <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> already exists, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_alternative_name()</span></code> is called to\nobtain an alternative name.</p>\n<div class=\"section\" id=\"s-use-your-custom-storage-engine\">\n<span id=\"s-using-custom-storage-engine\"></span><span id=\"use-your-custom-storage-engine\"></span><span id=\"using-custom-storage-engine\"></span><h2>Use your custom storage engine<a class=\"headerlink\" href=\"#use-your-custom-storage-engine\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>The first step to using your custom storage with Django is to tell Django about\nthe file storage backend you\u2019ll be using. This is done using the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> setting. This setting maps storage aliases, which are a way\nto refer to a specific storage throughout Django, to a dictionary of settings\nfor that specific storage backend. The settings in the inner dictionaries are\ndescribed fully in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-STORAGES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">STORAGES</span></code></a> documentation.</p>\n<p>Storages are then accessed by alias from from the\n<a class=\"reference internal\" href=\"../../ref/files/storage/#django.core.files.storage.storages\" title=\"django.core.files.storage.storages\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">django.core.files.storage.storages</span></code></a> dictionary:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.files.storage</span> <span class=\"kn\">import</span> <span class=\"n\">storages</span>\n\n<span class=\"n\">example_storage</span> <span class=\"o\">=</span> <span class=\"n\">storages</span><span class=\"p\">[</span><span class=\"s2\">&quot;example&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/deployment/index", "How to deploy Django", "N", "next"], ["howto/custom-template-tags", "How to create custom template tags and filters", "P", "previous"]], "sourcename": "howto/custom-file-storage.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to write a custom storage class</a><ul>\n<li><a class=\"reference internal\" href=\"#use-your-custom-storage-engine\">Use your custom storage engine</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/custom-file-storage", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
