{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../outputting-csv/", "title": "How to create CSV output"}, "next": {"link": "../overriding-templates/", "title": "How to override templates"}, "title": "How to create PDF files", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-create-pdf-files\">\n<span id=\"how-to-create-pdf-files\"></span><h1>How to create PDF files<a class=\"headerlink\" href=\"#how-to-create-pdf-files\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document explains how to output PDF files dynamically using Django views.\nThis is made possible by the excellent, open-source <a class=\"reference external\" href=\"https://docs.reportlab.com/\">ReportLab</a> Python PDF\nlibrary.</p>\n<p>The advantage of generating PDF files dynamically is that you can create\ncustomized PDFs for different purposes \u2013 say, for different users or different\npieces of content.</p>\n<p>For example, Django was used at <a class=\"reference external\" href=\"http://www2.kusports.com/\">kusports.com</a> to generate customized,\nprinter-friendly NCAA tournament brackets, as PDF files, for people\nparticipating in a March Madness contest.</p>\n<div class=\"section\" id=\"s-install-reportlab\">\n<span id=\"install-reportlab\"></span><h2>Install ReportLab<a class=\"headerlink\" href=\"#install-reportlab\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The ReportLab library is <a class=\"reference external\" href=\"https://pypi.org/project/reportlab/\">available on PyPI</a>. A <a class=\"reference external\" href=\"https://www.reportlab.com/docs/reportlab-userguide.pdf\">user guide</a>\n(not coincidentally, a PDF file) is also available for download.\nYou can install ReportLab with <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code>:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install reportlab\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install reportlab\n</pre></div>\n</section>\n</div>\n<p>Test your installation by importing it in the Python interactive interpreter:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">reportlab</span>\n</pre></div>\n</div>\n<p>If that command doesn\u2019t raise any errors, the installation worked.</p>\n</div>\n<div class=\"section\" id=\"s-write-your-view\">\n<span id=\"write-your-view\"></span><h2>Write your view<a class=\"headerlink\" href=\"#write-your-view\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The key to generating PDFs dynamically with Django is that the ReportLab API\nacts on file-like objects, and Django\u2019s <a class=\"reference internal\" href=\"../../ref/request-response/#django.http.FileResponse\" title=\"django.http.FileResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code></a>\nobjects accept file-like objects.</p>\n<p>Here\u2019s a \u201cHello World\u201d example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">FileResponse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">reportlab.pdfgen</span> <span class=\"kn\">import</span> <span class=\"n\">canvas</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">some_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Create a file-like buffer to receive PDF data.</span>\n    <span class=\"n\">buffer</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">BytesIO</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Create the PDF object, using the buffer as its &quot;file.&quot;</span>\n    <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">canvas</span><span class=\"o\">.</span><span class=\"n\">Canvas</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Draw things on the PDF. Here&#39;s where the PDF generation happens.</span>\n    <span class=\"c1\"># See the ReportLab documentation for the full list of functionality.</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">drawString</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Hello world.&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Close the PDF object cleanly, and we&#39;re done.</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">showPage</span><span class=\"p\">()</span>\n    <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># FileResponse sets the Content-Disposition header so that browsers</span>\n    <span class=\"c1\"># present the option to save the file.</span>\n    <span class=\"n\">buffer</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">FileResponse</span><span class=\"p\">(</span><span class=\"n\">buffer</span><span class=\"p\">,</span> <span class=\"n\">as_attachment</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">&quot;hello.pdf&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The code and comments should be self-explanatory, but a few things deserve a\nmention:</p>\n<ul class=\"simple\">\n<li>The response will automatically set the MIME type <em class=\"mimetype\">application/pdf</em>\nbased on the filename extension. This tells browsers that the document is a\nPDF file, rather than an HTML file or a generic\n<em class=\"mimetype\">application/octet-stream</em> binary content.</li>\n<li>When <code class=\"docutils literal notranslate\"><span class=\"pre\">as_attachment=True</span></code> is passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code>, it sets the\nappropriate <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code> header and that tells web browsers to\npop-up a dialog box prompting/confirming how to handle the document even if a\ndefault is set on the machine. If the <code class=\"docutils literal notranslate\"><span class=\"pre\">as_attachment</span></code> parameter is omitted,\nbrowsers will handle the PDF using whatever program/plugin they\u2019ve been\nconfigured to use for PDFs.</li>\n<li>You can provide an arbitrary <code class=\"docutils literal notranslate\"><span class=\"pre\">filename</span></code> parameter. It\u2019ll be used by browsers\nin the \u201cSave as\u2026\u201d dialog.</li>\n<li>You can hook into the ReportLab API: The same buffer passed as the first\nargument to <code class=\"docutils literal notranslate\"><span class=\"pre\">canvas.Canvas</span></code> can be fed to the\n<a class=\"reference internal\" href=\"../../ref/request-response/#django.http.FileResponse\" title=\"django.http.FileResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code></a> class.</li>\n<li>Note that all subsequent PDF-generation methods are called on the PDF\nobject (in this case, <code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code>) \u2013 not on <code class=\"docutils literal notranslate\"><span class=\"pre\">buffer</span></code>.</li>\n<li>Finally, it\u2019s important to call <code class=\"docutils literal notranslate\"><span class=\"pre\">showPage()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> on the PDF\nfile.</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">ReportLab is not thread-safe. Some of our users have reported odd issues\nwith building PDF-generating Django views that are accessed by many people\nat the same time.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-other-formats\">\n<span id=\"other-formats\"></span><h2>Other formats<a class=\"headerlink\" href=\"#other-formats\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Notice that there isn\u2019t a lot in these examples that\u2019s PDF-specific \u2013 just the\nbits using <code class=\"docutils literal notranslate\"><span class=\"pre\">reportlab</span></code>. You can use a similar technique to generate any\narbitrary format that you can find a Python library for. Also see\n<a class=\"reference internal\" href=\"../outputting-csv/\"><span class=\"doc\">How to create CSV output</span></a> for another example and some techniques you can use\nwhen generated text-based formats.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Django Packages provides a <a class=\"reference external\" href=\"https://djangopackages.org/grids/g/pdf/\">comparison of packages</a> that help generate PDF files\nfrom Django.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/overriding-templates", "How to override templates", "N", "next"], ["howto/outputting-csv", "How to create CSV output", "P", "previous"]], "sourcename": "howto/outputting-pdf.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to create PDF files</a><ul>\n<li><a class=\"reference internal\" href=\"#install-reportlab\">Install ReportLab</a></li>\n<li><a class=\"reference internal\" href=\"#write-your-view\">Write your view</a></li>\n<li><a class=\"reference internal\" href=\"#other-formats\">Other formats</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/outputting-pdf", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
