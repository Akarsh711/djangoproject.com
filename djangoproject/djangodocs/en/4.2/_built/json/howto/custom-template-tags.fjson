{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../custom-template-backend/", "title": "How to implement a custom template backend"}, "next": {"link": "../custom-file-storage/", "title": "How to write a custom storage class"}, "title": "How to create custom template tags and filters", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-create-custom-template-tags-and-filters\">\n<span id=\"how-to-create-custom-template-tags-and-filters\"></span><h1>How to create custom template tags and filters<a class=\"headerlink\" href=\"#how-to-create-custom-template-tags-and-filters\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django\u2019s template language comes with a wide variety of <a class=\"reference internal\" href=\"../../ref/templates/builtins/\"><span class=\"doc\">built-in\ntags and filters</span></a> designed to address the\npresentation logic needs of your application. Nevertheless, you may\nfind yourself needing functionality that is not covered by the core\nset of template primitives. You can extend the template engine by\ndefining custom tags and filters using Python, and then make them\navailable to your templates using the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag.</p>\n<div class=\"section\" id=\"s-code-layout\">\n<span id=\"code-layout\"></span><h2>Code layout<a class=\"headerlink\" href=\"#code-layout\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The most common place to specify custom template tags and filters is inside\na Django app. If they relate to an existing app, it makes sense to bundle them\nthere; otherwise, they can be added to a new app. When a Django app is added\nto <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, any tags it defines in the conventional location\ndescribed below are automatically made available to load within templates.</p>\n<p>The app should contain a <code class=\"docutils literal notranslate\"><span class=\"pre\">templatetags</span></code> directory, at the same level as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">views.py</span></code>, etc. If this doesn\u2019t already exist, create it -\ndon\u2019t forget the <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code> file to ensure the directory is treated as a\nPython package.</p>\n<div class=\"admonition-development-server-won-t-automatically-restart admonition\">\n<p class=\"first admonition-title\">Development server won\u2019t automatically restart</p>\n<p class=\"last\">After adding the <code class=\"docutils literal notranslate\"><span class=\"pre\">templatetags</span></code>  module, you will need to restart your\nserver before you can use the tags or filters in templates.</p>\n</div>\n<p>Your custom tags and filters will live in a module inside the <code class=\"docutils literal notranslate\"><span class=\"pre\">templatetags</span></code>\ndirectory. The name of the module file is the name you\u2019ll use to load the tags\nlater, so be careful to pick a name that won\u2019t clash with custom tags and\nfilters in another app.</p>\n<p>For example, if your custom tags/filters are in a file called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">poll_extras.py</span></code>, your app layout might look like this:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>polls/\n    __init__.py\n    models.py\n    templatetags/\n        __init__.py\n        poll_extras.py\n    views.py\n</pre></div>\n</div>\n<p>And in your template you would use the following:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">load</span> <span class=\"nv\">poll_extras</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>The app that contains the custom tags must be in <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> in\norder for the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> tag to work. This is a security feature:\nIt allows you to host Python code for many template libraries on a single host\nmachine without enabling access to all of them for every Django installation.</p>\n<p>There\u2019s no limit on how many modules you put in the <code class=\"docutils literal notranslate\"><span class=\"pre\">templatetags</span></code> package.\nJust keep in mind that a <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">load</span> <span class=\"pre\">%}</span></code></a> statement will load\ntags/filters for the given Python module name, not the name of the app.</p>\n<p>To be a valid tag library, the module must contain a module-level variable\nnamed <code class=\"docutils literal notranslate\"><span class=\"pre\">register</span></code> that is a <code class=\"docutils literal notranslate\"><span class=\"pre\">template.Library</span></code> instance, in which all the\ntags and filters are registered. So, near the top of your module, put the\nfollowing:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Alternatively, template tag modules can be registered through the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'libraries'</span></code> argument to\n<a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.django.DjangoTemplates\" title=\"django.template.backends.django.DjangoTemplates\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DjangoTemplates</span></code></a>. This is useful if\nyou want to use a different label from the template tag module name when\nloading template tags. It also enables you to register tags without installing\nan application.</p>\n<div class=\"admonition-behind-the-scenes admonition\">\n<p class=\"first admonition-title\">Behind the scenes</p>\n<p>For a ton of examples, read the source code for Django\u2019s default filters\nand tags. They\u2019re in <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/template/defaultfilters.py\">django/template/defaultfilters.py</a> and\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/template/defaulttags.py\">django/template/defaulttags.py</a>, respectively.</p>\n<p class=\"last\">For more information on the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-load\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">load</span></code></a> tag, read its documentation.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-custom-template-filters\">\n<span id=\"s-howto-writing-custom-template-filters\"></span><span id=\"writing-custom-template-filters\"></span><span id=\"howto-writing-custom-template-filters\"></span><h2>Writing custom template filters<a class=\"headerlink\" href=\"#writing-custom-template-filters\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Custom filters are Python functions that take one or two arguments:</p>\n<ul class=\"simple\">\n<li>The value of the variable (input) \u2013 not necessarily a string.</li>\n<li>The value of the argument \u2013 this can have a default value, or be left\nout altogether.</li>\n</ul>\n<p>For example, in the filter <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">var|foo:&quot;bar&quot;</span> <span class=\"pre\">}}</span></code>, the filter <code class=\"docutils literal notranslate\"><span class=\"pre\">foo</span></code> would be\npassed the variable <code class=\"docutils literal notranslate\"><span class=\"pre\">var</span></code> and the argument <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;bar&quot;</span></code>.</p>\n<p>Since the template language doesn\u2019t provide exception handling, any exception\nraised from a template filter will be exposed as a server error. Thus, filter\nfunctions should avoid raising exceptions if there is a reasonable fallback\nvalue to return. In case of input that represents a clear bug in a template,\nraising an exception may still be better than silent failure which hides the\nbug.</p>\n<p>Here\u2019s an example filter definition:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">cut</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;Removes all values of arg from the given string&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>And here\u2019s an example of how that filter would be used:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">somevariable</span><span class=\"o\">|</span><span class=\"nf\">cut</span><span class=\"s2\">:&quot;0&quot;</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>Most filters don\u2019t take arguments. In this case, leave the argument out of your\nfunction:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>  <span class=\"c1\"># Only one argument.</span>\n    <span class=\"sd\">&quot;&quot;&quot;Converts a string into all lowercase&quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-registering-custom-filters\">\n<span id=\"registering-custom-filters\"></span><h3>Registering custom filters<a class=\"headerlink\" href=\"#registering-custom-filters\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Library.filter\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.template.Library.</span></code><code class=\"sig-name descname\"><span class=\"pre\">filter</span></code>()<a class=\"headerlink\" href=\"#django.template.Library.filter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Once you\u2019ve written your filter definition, you need to register it with\nyour <code class=\"docutils literal notranslate\"><span class=\"pre\">Library</span></code> instance, to make it available to Django\u2019s template language:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"s2\">&quot;cut&quot;</span><span class=\"p\">,</span> <span class=\"n\">cut</span><span class=\"p\">)</span>\n<span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"s2\">&quot;lower&quot;</span><span class=\"p\">,</span> <span class=\"n\">lower</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Library.filter()</span></code> method takes two arguments:</p>\n<ol class=\"arabic simple\">\n<li>The name of the filter \u2013 a string.</li>\n<li>The compilation function \u2013 a Python function (not the name of the\nfunction as a string).</li>\n</ol>\n<p>You can use <code class=\"docutils literal notranslate\"><span class=\"pre\">register.filter()</span></code> as a decorator instead:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;cut&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">cut</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span>\n<span class=\"k\">def</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>If you leave off the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> argument, as in the second example above, Django\nwill use the function\u2019s name as the filter name.</p>\n<p>Finally, <code class=\"docutils literal notranslate\"><span class=\"pre\">register.filter()</span></code> also accepts three keyword arguments,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">needs_autoescape</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">expects_localtime</span></code>. These arguments\nare described in <a class=\"reference internal\" href=\"#filters-auto-escaping\"><span class=\"std std-ref\">filters and auto-escaping</span></a> and\n<a class=\"reference internal\" href=\"#filters-timezones\"><span class=\"std std-ref\">filters and time zones</span></a> below.</p>\n</div>\n<div class=\"section\" id=\"s-template-filters-that-expect-strings\">\n<span id=\"template-filters-that-expect-strings\"></span><h3>Template filters that expect strings<a class=\"headerlink\" href=\"#template-filters-that-expect-strings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.defaultfilters.stringfilter\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.template.defaultfilters.</span></code><code class=\"sig-name descname\"><span class=\"pre\">stringfilter</span></code>()<a class=\"headerlink\" href=\"#django.template.defaultfilters.stringfilter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If you\u2019re writing a template filter that only expects a string as the first\nargument, you should use the decorator <code class=\"docutils literal notranslate\"><span class=\"pre\">stringfilter</span></code>. This will\nconvert an object to its string value before being passed to your function:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template.defaultfilters</span> <span class=\"kn\">import</span> <span class=\"n\">stringfilter</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span>\n<span class=\"nd\">@stringfilter</span>\n<span class=\"k\">def</span> <span class=\"nf\">lower</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>This way, you\u2019ll be able to pass, say, an integer to this filter, and it\nwon\u2019t cause an <code class=\"docutils literal notranslate\"><span class=\"pre\">AttributeError</span></code> (because integers don\u2019t have <code class=\"docutils literal notranslate\"><span class=\"pre\">lower()</span></code>\nmethods).</p>\n</div>\n<div class=\"section\" id=\"s-filters-and-auto-escaping\">\n<span id=\"s-filters-auto-escaping\"></span><span id=\"filters-and-auto-escaping\"></span><span id=\"filters-auto-escaping\"></span><h3>Filters and auto-escaping<a class=\"headerlink\" href=\"#filters-and-auto-escaping\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When writing a custom filter, give some thought to how the filter will interact\nwith Django\u2019s auto-escaping behavior. Note that two types of strings can be\npassed around inside the template code:</p>\n<ul>\n<li><p class=\"first\"><strong>Raw strings</strong> are the native Python strings. On output, they\u2019re escaped if\nauto-escaping is in effect and presented unchanged, otherwise.</p>\n</li>\n<li><p class=\"first\"><strong>Safe strings</strong> are strings that have been marked safe from further\nescaping at output time. Any necessary escaping has already been done.\nThey\u2019re commonly used for output that contains raw HTML that is intended\nto be interpreted as-is on the client side.</p>\n<p>Internally, these strings are of type\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.SafeString\" title=\"django.utils.safestring.SafeString\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SafeString</span></code></a>. You can test for them\nusing code like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.safestring</span> <span class=\"kn\">import</span> <span class=\"n\">SafeString</span>\n\n<span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">SafeString</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do something with the &quot;safe&quot; string.</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>Template filter code falls into one of two situations:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Your filter does not introduce any HTML-unsafe characters (<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;</span></code>) into the result that were not already present. In\nthis case, you can let Django take care of all the auto-escaping\nhandling for you. All you need to do is set the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> flag to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>\nwhen you register your filter function, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_safe</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">myfilter</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span>\n</pre></div>\n</div>\n<p>This flag tells Django that if a \u201csafe\u201d string is passed into your\nfilter, the result will still be \u201csafe\u201d and if a non-safe string is\npassed in, Django will automatically escape it, if necessary.</p>\n<p>You can think of this as meaning \u201cthis filter is safe \u2013 it doesn\u2019t\nintroduce any possibility of unsafe HTML.\u201d</p>\n<p>The reason <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> is necessary is because there are plenty of\nnormal string operations that will turn a <code class=\"docutils literal notranslate\"><span class=\"pre\">SafeData</span></code> object back into\na normal <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code> object and, rather than try to catch them all, which would\nbe very difficult, Django repairs the damage after the filter has completed.</p>\n<p>For example, suppose you have a filter that adds the string <code class=\"docutils literal notranslate\"><span class=\"pre\">xx</span></code> to\nthe end of any input. Since this introduces no dangerous HTML characters\nto the result (aside from any that were already present), you should\nmark your filter with <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_safe</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">add_xx</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">xx&quot;</span> <span class=\"o\">%</span> <span class=\"n\">value</span>\n</pre></div>\n</div>\n<p>When this filter is used in a template where auto-escaping is enabled,\nDjango will escape the output whenever the input is not already marked\nas \u201csafe\u201d.</p>\n<p>By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, and you can omit it from any filters\nwhere it isn\u2019t required.</p>\n<p>Be careful when deciding if your filter really does leave safe strings\nas safe. If you\u2019re <em>removing</em> characters, you might inadvertently leave\nunbalanced HTML tags or entities in the result. For example, removing a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&gt;</span></code> from the input might turn <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;a&gt;</span></code> into <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;a</span></code>, which would need to\nbe escaped on output to avoid causing problems. Similarly, removing a\nsemicolon (<code class=\"docutils literal notranslate\"><span class=\"pre\">;</span></code>) can turn <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;amp;</span></code> into <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;amp</span></code>, which is no longer a\nvalid entity and thus needs further escaping. Most cases won\u2019t be nearly\nthis tricky, but keep an eye out for any problems like that when\nreviewing your code.</p>\n<p>Marking a filter <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> will coerce the filter\u2019s return value to\na string.  If your filter should return a boolean or other non-string\nvalue, marking it <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> will probably have unintended\nconsequences (such as converting a boolean False to the string\n\u2018False\u2019).</p>\n</li>\n<li><p class=\"first\">Alternatively, your filter code can manually take care of any necessary\nescaping. This is necessary when you\u2019re introducing new HTML markup into\nthe result. You want to mark the output as safe from further\nescaping so that your HTML markup isn\u2019t escaped further, so you\u2019ll need\nto handle the input yourself.</p>\n<p>To mark the output as a safe string, use\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.mark_safe\" title=\"django.utils.safestring.mark_safe\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.safestring.mark_safe()</span></code></a>.</p>\n<p>Be careful, though. You need to do more than just mark the output as\nsafe. You need to ensure it really <em>is</em> safe, and what you do depends on\nwhether auto-escaping is in effect. The idea is to write filters that\ncan operate in templates where auto-escaping is either on or off in\norder to make things easier for your template authors.</p>\n<p>In order for your filter to know the current auto-escaping state, set the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">needs_autoescape</span></code> flag to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> when you register your filter function.\n(If you don\u2019t specify this flag, it defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>). This flag tells\nDjango that your filter function wants to be passed an extra keyword\nargument, called <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code>, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if auto-escaping is in\neffect and <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> otherwise. It is recommended to set the default of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, so that if you call the function\nfrom Python code it will have escaping enabled by default.</p>\n<p>For example, let\u2019s write a filter that emphasizes the first character of\na string:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.html</span> <span class=\"kn\">import</span> <span class=\"n\">conditional_escape</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.safestring</span> <span class=\"kn\">import</span> <span class=\"n\">mark_safe</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">needs_autoescape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">initial_letter_filter</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">text</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n    <span class=\"k\">if</span> <span class=\"n\">autoescape</span><span class=\"p\">:</span>\n        <span class=\"n\">esc</span> <span class=\"o\">=</span> <span class=\"n\">conditional_escape</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">esc</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;strong&gt;</span><span class=\"si\">%s</span><span class=\"s2\">&lt;/strong&gt;</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">first</span><span class=\"p\">),</span> <span class=\"n\">esc</span><span class=\"p\">(</span><span class=\"n\">other</span><span class=\"p\">))</span>\n    <span class=\"k\">return</span> <span class=\"n\">mark_safe</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">needs_autoescape</span></code> flag and the <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> keyword argument mean\nthat our function will know whether automatic escaping is in effect when the\nfilter is called. We use <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> to decide whether the input data\nneeds to be passed through <code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.html.conditional_escape</span></code> or not.\n(In the latter case, we use the identity function as the \u201cescape\u201d function.)\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">conditional_escape()</span></code> function is like <code class=\"docutils literal notranslate\"><span class=\"pre\">escape()</span></code> except it only\nescapes input that is <strong>not</strong> a <code class=\"docutils literal notranslate\"><span class=\"pre\">SafeData</span></code> instance. If a <code class=\"docutils literal notranslate\"><span class=\"pre\">SafeData</span></code>\ninstance is passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">conditional_escape()</span></code>, the data is returned\nunchanged.</p>\n<p>Finally, in the above example, we remember to mark the result as safe\nso that our HTML is inserted directly into the template without further\nescaping.</p>\n<p>There\u2019s no need to worry about the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> flag in this case\n(although including it wouldn\u2019t hurt anything). Whenever you manually\nhandle the auto-escaping issues and return a safe string, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">is_safe</span></code> flag won\u2019t change anything either way.</p>\n</li>\n</ol>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Avoiding XSS vulnerabilities when reusing built-in filters</p>\n<p>Django\u2019s built-in filters have <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape=True</span></code> by default in order to\nget the proper autoescaping behavior and avoid a cross-site script\nvulnerability.</p>\n<p>In older versions of Django, be careful when reusing Django\u2019s built-in\nfilters as <code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. You\u2019ll need to pass\n<code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape=True</span></code> to get autoescaping.</p>\n<p>For example, if you wanted to write a custom filter called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">urlize_and_linebreaks</span></code> that combined the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-urlize\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">urlize</span></code></a> and\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatefilter-linebreaksbr\"><code class=\"xref std std-tfilter docutils literal notranslate\"><span class=\"pre\">linebreaksbr</span></code></a> filters, the filter would look like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template.defaultfilters</span> <span class=\"kn\">import</span> <span class=\"n\">linebreaksbr</span><span class=\"p\">,</span> <span class=\"n\">urlize</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">needs_autoescape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">urlize_and_linebreaks</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">linebreaksbr</span><span class=\"p\">(</span><span class=\"n\">urlize</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"p\">,</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">autoescape</span><span class=\"p\">),</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">autoescape</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Then:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">comment</span><span class=\"o\">|</span><span class=\"nf\">urlize_and_linebreaks</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>would be equivalent to:</p>\n<div class=\"last highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">comment</span><span class=\"o\">|</span><span class=\"nf\">urlize</span><span class=\"o\">|</span><span class=\"nf\">linebreaksbr</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-filters-and-time-zones\">\n<span id=\"s-filters-timezones\"></span><span id=\"filters-and-time-zones\"></span><span id=\"filters-timezones\"></span><h3>Filters and time zones<a class=\"headerlink\" href=\"#filters-and-time-zones\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you write a custom filter that operates on <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a>\nobjects, you\u2019ll usually register it with the <code class=\"docutils literal notranslate\"><span class=\"pre\">expects_localtime</span></code> flag set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">expects_localtime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">businesshours</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">9</span> <span class=\"o\">&lt;=</span> <span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">hour</span> <span class=\"o\">&lt;</span> <span class=\"mi\">17</span>\n    <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n</pre></div>\n</div>\n<p>When this flag is set, if the first argument to your filter is a time zone\naware datetime, Django will convert it to the current time zone before passing\nit to your filter when appropriate, according to <a class=\"reference internal\" href=\"../../topics/i18n/timezones/#time-zones-in-templates\"><span class=\"std std-ref\">rules for time zones\nconversions in templates</span></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-writing-custom-template-tags\">\n<span id=\"s-howto-writing-custom-template-tags\"></span><span id=\"writing-custom-template-tags\"></span><span id=\"howto-writing-custom-template-tags\"></span><h2>Writing custom template tags<a class=\"headerlink\" href=\"#writing-custom-template-tags\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Tags are more complex than filters, because tags can do anything. Django\nprovides a number of shortcuts that make writing most types of tags easier.\nFirst we\u2019ll explore those shortcuts, then explain how to write a tag from\nscratch for those cases when the shortcuts aren\u2019t powerful enough.</p>\n<div class=\"section\" id=\"s-simple-tags\">\n<span id=\"s-howto-custom-template-tags-simple-tags\"></span><span id=\"simple-tags\"></span><span id=\"howto-custom-template-tags-simple-tags\"></span><h3>Simple tags<a class=\"headerlink\" href=\"#simple-tags\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Library.simple_tag\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.template.Library.</span></code><code class=\"sig-name descname\"><span class=\"pre\">simple_tag</span></code>()<a class=\"headerlink\" href=\"#django.template.Library.simple_tag\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Many template tags take a number of arguments \u2013 strings or template variables\n\u2013 and return a result after doing some processing based solely on\nthe input arguments and some external information. For example, a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">current_time</span></code> tag might accept a format string and return the time as a\nstring formatted accordingly.</p>\n<p>To ease the creation of these types of tags, Django provides a helper function,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code>. This function, which is a method of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Library</span></code>, takes a function that accepts any number of\narguments, wraps it in a <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> function and the other necessary bits\nmentioned above and registers it with the template system.</p>\n<p>Our <code class=\"docutils literal notranslate\"><span class=\"pre\">current_time</span></code> function could thus be written like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n<span class=\"n\">register</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Library</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">simple_tag</span>\n<span class=\"k\">def</span> <span class=\"nf\">current_time</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>A few things to note about the <code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> helper function:</p>\n<ul class=\"simple\">\n<li>Checking for the required number of arguments, etc., has already been\ndone by the time our function is called, so we don\u2019t need to do that.</li>\n<li>The quotes around the argument (if any) have already been stripped away,\nso we receive a plain string.</li>\n<li>If the argument was a template variable, our function is passed the\ncurrent value of the variable, not the variable itself.</li>\n</ul>\n<p>Unlike other tag utilities, <code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> passes its output through\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.conditional_escape\" title=\"django.utils.html.conditional_escape\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">conditional_escape()</span></code></a> if the template context is in\nautoescape mode, to ensure correct HTML and protect you from XSS\nvulnerabilities.</p>\n<p>If additional escaping is not desired, you will need to use\n<a class=\"reference internal\" href=\"../../ref/utils/#django.utils.safestring.mark_safe\" title=\"django.utils.safestring.mark_safe\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">mark_safe()</span></code></a> if you are absolutely sure that your\ncode does not contain XSS vulnerabilities. For building small HTML snippets,\nuse of <a class=\"reference internal\" href=\"../../ref/utils/#django.utils.html.format_html\" title=\"django.utils.html.format_html\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">format_html()</span></code></a> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">mark_safe()</span></code> is\nstrongly recommended.</p>\n<p>If your template tag needs to access the current context, you can use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context</span></code> argument when registering your tag:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">simple_tag</span><span class=\"p\">(</span><span class=\"n\">takes_context</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">current_time</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">):</span>\n    <span class=\"n\">timezone</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;timezone&quot;</span><span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">your_get_current_time_method</span><span class=\"p\">(</span><span class=\"n\">timezone</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note that the first argument <em>must</em> be called <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code>.</p>\n<p>For more information on how the <code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context</span></code> option works, see the section\non <a class=\"reference internal\" href=\"#howto-custom-template-tags-inclusion-tags\"><span class=\"std std-ref\">inclusion tags</span></a>.</p>\n<p>If you need to rename your tag, you can provide a custom name for it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">simple_tag</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;minusone&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">simple_tag</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;minustwo&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_function</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">value</span> <span class=\"o\">-</span> <span class=\"mi\">2</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">simple_tag</span></code> functions may accept any number of positional or keyword\narguments. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">simple_tag</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_tag</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">warning</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;warning&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;profile&quot;</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Then in the template any number of arguments, separated by spaces, may be\npassed to the template tag. Like in Python, the values for keyword arguments\nare set using the equal sign (\u201d<code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code>\u201d) and must be provided after the\npositional arguments. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">my_tag</span> <span class=\"m\">123</span> <span class=\"s2\">&quot;abcd&quot;</span> <span class=\"nv\">book.title</span> <span class=\"nv\">warning</span><span class=\"o\">=</span><span class=\"nv\">message</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"nv\">profile</span><span class=\"o\">=</span><span class=\"nv\">user.profile</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>It\u2019s possible to store the tag results in a template variable rather than\ndirectly outputting it. This is done by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">as</span></code> argument followed by\nthe variable name. Doing so enables you to output the content yourself where\nyou see fit:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">current_time</span> <span class=\"s2\">&quot;%Y-%m-%d %I:%M %p&quot;</span> <span class=\"k\">as</span> <span class=\"nv\">the_time</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The time is <span class=\"cp\">{{</span> <span class=\"nv\">the_time</span> <span class=\"cp\">}}</span>.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-inclusion-tags\">\n<span id=\"s-howto-custom-template-tags-inclusion-tags\"></span><span id=\"inclusion-tags\"></span><span id=\"howto-custom-template-tags-inclusion-tags\"></span><h3>Inclusion tags<a class=\"headerlink\" href=\"#inclusion-tags\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.template.Library.inclusion_tag\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.template.Library.</span></code><code class=\"sig-name descname\"><span class=\"pre\">inclusion_tag</span></code>()<a class=\"headerlink\" href=\"#django.template.Library.inclusion_tag\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Another common type of template tag is the type that displays some data by\nrendering <em>another</em> template. For example, Django\u2019s admin interface uses custom\ntemplate tags to display the buttons along the bottom of the \u201cadd/change\u201d form\npages. Those buttons always look the same, but the link targets change\ndepending on the object being edited \u2013 so they\u2019re a perfect case for using a\nsmall template that is filled with details from the current object. (In the\nadmin\u2019s case, this is the <code class=\"docutils literal notranslate\"><span class=\"pre\">submit_row</span></code> tag.)</p>\n<p>These sorts of tags are called \u201cinclusion tags\u201d.</p>\n<p>Writing inclusion tags is probably best demonstrated by example. Let\u2019s write a\ntag that outputs a list of choices for a given <code class=\"docutils literal notranslate\"><span class=\"pre\">Poll</span></code> object, such as was\ncreated in the <a class=\"reference internal\" href=\"../../intro/tutorial02/#creating-models\"><span class=\"std std-ref\">tutorials</span></a>. We\u2019ll use the tag like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">show_results</span> <span class=\"nv\">poll</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>\u2026and the output will be something like this:</p>\n<div class=\"highlight-html notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>First choice<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Second choice<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n  <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>Third choice<span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>First, define the function that takes the argument and produces a dictionary of\ndata for the result. The important point here is we only need to return a\ndictionary, not anything more complex. This will be used as a template context\nfor the template fragment. Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">show_results</span><span class=\"p\">(</span><span class=\"n\">poll</span><span class=\"p\">):</span>\n    <span class=\"n\">choices</span> <span class=\"o\">=</span> <span class=\"n\">poll</span><span class=\"o\">.</span><span class=\"n\">choice_set</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">&quot;choices&quot;</span><span class=\"p\">:</span> <span class=\"n\">choices</span><span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Next, create the template used to render the tag\u2019s output. This template is a\nfixed feature of the tag: the tag writer specifies it, not the template\ndesigner. Following our example, the template is very short:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">choice</span> <span class=\"k\">in</span> <span class=\"nv\">choices</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span> <span class=\"cp\">{{</span> <span class=\"nv\">choice</span> <span class=\"cp\">}}</span> <span class=\"p\">&lt;/</span><span class=\"nt\">li</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">ul</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Now, create and register the inclusion tag by calling the <code class=\"docutils literal notranslate\"><span class=\"pre\">inclusion_tag()</span></code>\nmethod on a <code class=\"docutils literal notranslate\"><span class=\"pre\">Library</span></code> object. Following our example, if the above template is\nin a file called <code class=\"docutils literal notranslate\"><span class=\"pre\">results.html</span></code> in a directory that\u2019s searched by the\ntemplate loader, we\u2019d register the tag like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Here, register is a django.template.Library instance, as before</span>\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">inclusion_tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;results.html&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">show_results</span><span class=\"p\">(</span><span class=\"n\">poll</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Alternatively it is possible to register the inclusion tag using a\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.template.Template</span></code></a> instance:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template.loader</span> <span class=\"kn\">import</span> <span class=\"n\">get_template</span>\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s2\">&quot;results.html&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">inclusion_tag</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)(</span><span class=\"n\">show_results</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>\u2026when first creating the function.</p>\n<p>Sometimes, your inclusion tags might require a large number of arguments,\nmaking it a pain for template authors to pass in all the arguments and remember\ntheir order. To solve this, Django provides a <code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context</span></code> option for\ninclusion tags. If you specify <code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context</span></code> in creating a template tag,\nthe tag will have no required arguments, and the underlying Python function\nwill have one argument \u2013 the template context as of when the tag was called.</p>\n<p>For example, say you\u2019re writing an inclusion tag that will always be used in a\ncontext that contains <code class=\"docutils literal notranslate\"><span class=\"pre\">home_link</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">home_title</span></code> variables that point\nback to the main page. Here\u2019s what the Python function would look like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">inclusion_tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;link.html&quot;</span><span class=\"p\">,</span> <span class=\"n\">takes_context</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">jump_link</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;link&quot;</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;home_link&quot;</span><span class=\"p\">],</span>\n        <span class=\"s2\">&quot;title&quot;</span><span class=\"p\">:</span> <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;home_title&quot;</span><span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Note that the first parameter to the function <em>must</em> be called <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code>.</p>\n<p>In that <code class=\"docutils literal notranslate\"><span class=\"pre\">register.inclusion_tag()</span></code> line, we specified <code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context=True</span></code>\nand the name of the template. Here\u2019s what the template <code class=\"docutils literal notranslate\"><span class=\"pre\">link.html</span></code> might look\nlike:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Jump directly to <span class=\"p\">&lt;</span><span class=\"nt\">a</span> <span class=\"na\">href</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{{</span> <span class=\"nv\">link</span> <span class=\"cp\">}}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">title</span> <span class=\"cp\">}}</span><span class=\"p\">&lt;/</span><span class=\"nt\">a</span><span class=\"p\">&gt;</span>.\n</pre></div>\n</div>\n<p>Then, any time you want to use that custom tag, load its library and call it\nwithout any arguments, like so:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">jump_link</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>Note that when you\u2019re using <code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context=True</span></code>, there\u2019s no need to pass\narguments to the template tag. It automatically gets access to the context.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">takes_context</span></code> parameter defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. When it\u2019s set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, the tag is passed the context object, as in this example. That\u2019s the\nonly difference between this case and the previous <code class=\"docutils literal notranslate\"><span class=\"pre\">inclusion_tag</span></code> example.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">inclusion_tag</span></code> functions may accept any number of positional or keyword\narguments. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">inclusion_tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;my_template.html&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_tag</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">warning</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;warning&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">profile</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s2\">&quot;profile&quot;</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n    <span class=\"k\">return</span> <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Then in the template any number of arguments, separated by spaces, may be\npassed to the template tag. Like in Python, the values for keyword arguments\nare set using the equal sign (\u201d<code class=\"docutils literal notranslate\"><span class=\"pre\">=</span></code>\u201d) and must be provided after the\npositional arguments. For example:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">my_tag</span> <span class=\"m\">123</span> <span class=\"s2\">&quot;abcd&quot;</span> <span class=\"nv\">book.title</span> <span class=\"nv\">warning</span><span class=\"o\">=</span><span class=\"nv\">message</span><span class=\"o\">|</span><span class=\"nf\">lower</span> <span class=\"nv\">profile</span><span class=\"o\">=</span><span class=\"nv\">user.profile</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-advanced-custom-template-tags\">\n<span id=\"advanced-custom-template-tags\"></span><h3>Advanced custom template tags<a class=\"headerlink\" href=\"#advanced-custom-template-tags\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Sometimes the basic features for custom template tag creation aren\u2019t enough.\nDon\u2019t worry, Django gives you complete access to the internals required to build\na template tag from the ground up.</p>\n</div>\n<div class=\"section\" id=\"s-a-quick-overview\">\n<span id=\"a-quick-overview\"></span><h3>A quick overview<a class=\"headerlink\" href=\"#a-quick-overview\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The template system works in a two-step process: compiling and rendering. To\ndefine a custom template tag, you specify how the compilation works and how\nthe rendering works.</p>\n<p>When Django compiles a template, it splits the raw template text into\n\u2018\u2019nodes\u2019\u2019. Each node is an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.Node</span></code> and has\na <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method. A compiled template is a list of <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> objects. When\nyou call <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> on a compiled template object, the template calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> on each <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> in its node list, with the given context.  The\nresults are all concatenated together to form the output of the template.</p>\n<p>Thus, to define a custom template tag, you specify how the raw template tag is\nconverted into a <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> (the compilation function), and what the node\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method does.</p>\n</div>\n<div class=\"section\" id=\"s-writing-the-compilation-function\">\n<span id=\"writing-the-compilation-function\"></span><h3>Writing the compilation function<a class=\"headerlink\" href=\"#writing-the-compilation-function\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For each template tag the template parser encounters, it calls a Python\nfunction with the tag contents and the parser object itself. This function is\nresponsible for returning a <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> instance based on the contents of the tag.</p>\n<p>For example, let\u2019s write a full implementation of our template tag,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">current_time</span> <span class=\"pre\">%}</span></code>, that displays the current date/time, formatted according\nto a parameter given in the tag, in <a class=\"reference external\" href=\"https://docs.python.org/3/library/time.html#time.strftime\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">strftime()</span></code></a> syntax. It\u2019s a good\nidea to decide the tag syntax before anything else. In our case, let\u2019s say the\ntag should be used like this:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The time is <span class=\"cp\">{%</span> <span class=\"k\">current_time</span> <span class=\"s2\">&quot;%Y-%m-%d %I:%M %p&quot;</span> <span class=\"cp\">%}</span>.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>The parser for this function should grab the parameter and create a <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code>\nobject:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">do_current_time</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># split_contents() knows not to split quoted strings.</span>\n        <span class=\"n\">tag_name</span><span class=\"p\">,</span> <span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">split_contents</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag requires a single argument&quot;</span> <span class=\"o\">%</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag&#39;s argument should be in quotes&quot;</span> <span class=\"o\">%</span> <span class=\"n\">tag_name</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">CurrentTimeNode</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>Notes:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">parser</span></code> is the template parser object. We don\u2019t need it in this\nexample.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">token.contents</span></code> is a string of the raw contents of the tag. In our\nexample, it\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">'current_time</span> <span class=\"pre\">&quot;%Y-%m-%d</span> <span class=\"pre\">%I:%M</span> <span class=\"pre\">%p&quot;'</span></code>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">token.split_contents()</span></code> method separates the arguments on spaces\nwhile keeping quoted strings together. The more straightforward\n<code class=\"docutils literal notranslate\"><span class=\"pre\">token.contents.split()</span></code> wouldn\u2019t be as robust, as it would naively\nsplit on <em>all</em> spaces, including those within quoted strings. It\u2019s a good\nidea to always use <code class=\"docutils literal notranslate\"><span class=\"pre\">token.split_contents()</span></code>.</li>\n<li>This function is responsible for raising\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.TemplateSyntaxError</span></code>, with helpful messages, for\nany syntax error.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">TemplateSyntaxError</span></code> exceptions use the <code class=\"docutils literal notranslate\"><span class=\"pre\">tag_name</span></code> variable.\nDon\u2019t hard-code the tag\u2019s name in your error messages, because that\ncouples the tag\u2019s name to your function. <code class=\"docutils literal notranslate\"><span class=\"pre\">token.contents.split()[0]</span></code>\nwill \u2018\u2019always\u2019\u2019 be the name of your tag \u2013 even when the tag has no\narguments.</li>\n<li>The function returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentTimeNode</span></code> with everything the node needs\nto know about this tag. In this case, it passes the argument \u2013\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;%Y-%m-%d</span> <span class=\"pre\">%I:%M</span> <span class=\"pre\">%p&quot;</span></code>. The leading and trailing quotes from the\ntemplate tag are removed in <code class=\"docutils literal notranslate\"><span class=\"pre\">format_string[1:-1]</span></code>.</li>\n<li>The parsing is very low-level. The Django developers have experimented\nwith writing small frameworks on top of this parsing system, using\ntechniques such as EBNF grammars, but those experiments made the template\nengine too slow. It\u2019s low-level because that\u2019s fastest.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-writing-the-renderer\">\n<span id=\"writing-the-renderer\"></span><h3>Writing the renderer<a class=\"headerlink\" href=\"#writing-the-renderer\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The second step in writing custom tags is to define a <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> subclass that\nhas a <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method.</p>\n<p>Continuing the above example, we need to define <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentTimeNode</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CurrentTimeNode</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"n\">format_string</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Notes:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> gets the <code class=\"docutils literal notranslate\"><span class=\"pre\">format_string</span></code> from <code class=\"docutils literal notranslate\"><span class=\"pre\">do_current_time()</span></code>.\nAlways pass any options/parameters/arguments to a <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> via its\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>.</li>\n<li>The <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method is where the work actually happens.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> should generally fail silently, particularly in a production\nenvironment. In some cases however, particularly if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">context.template.engine.debug</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, this method may raise an\nexception to make debugging easier. For example, several core tags raise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.TemplateSyntaxError</span></code> if they receive the wrong number or\ntype of arguments.</li>\n</ul>\n<p>Ultimately, this decoupling of compilation and rendering results in an\nefficient template system, because a template can render multiple contexts\nwithout having to be parsed multiple times.</p>\n</div>\n<div class=\"section\" id=\"s-auto-escaping-considerations\">\n<span id=\"s-tags-auto-escaping\"></span><span id=\"auto-escaping-considerations\"></span><span id=\"tags-auto-escaping\"></span><h3>Auto-escaping considerations<a class=\"headerlink\" href=\"#auto-escaping-considerations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The output from template tags is <strong>not</strong> automatically run through the\nauto-escaping filters (with the exception of\n<a class=\"reference internal\" href=\"#django.template.Library.simple_tag\" title=\"django.template.Library.simple_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">simple_tag()</span></code></a> as described above). However, there\nare still a couple of things you should keep in mind when writing a template\ntag.</p>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method of your template tag stores the result in a context\nvariable (rather than returning the result in a string), it should take care\nto call <code class=\"docutils literal notranslate\"><span class=\"pre\">mark_safe()</span></code> if appropriate. When the variable is ultimately\nrendered, it will be affected by the auto-escape setting in effect at the\ntime, so content that should be safe from further escaping needs to be marked\nas such.</p>\n<p>Also, if your template tag creates a new context for performing some\nsub-rendering, set the auto-escape attribute to the current context\u2019s value.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> method for the <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> class takes a parameter called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">autoescape</span></code> that you can use for this purpose. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">Context</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">new_context</span> <span class=\"o\">=</span> <span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;var&quot;</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"p\">},</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">autoescape</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ... Do something with new_context ...</span>\n</pre></div>\n</div>\n<p>This is not a very common situation, but it\u2019s useful if you\u2019re rendering a\ntemplate yourself. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">engine</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s2\">&quot;small_fragment.html&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">Context</span><span class=\"p\">({</span><span class=\"s2\">&quot;var&quot;</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"p\">},</span> <span class=\"n\">autoescape</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">autoescape</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>If we had neglected to pass in the current <code class=\"docutils literal notranslate\"><span class=\"pre\">context.autoescape</span></code> value to our\nnew <code class=\"docutils literal notranslate\"><span class=\"pre\">Context</span></code> in this example, the results would have <em>always</em> been\nautomatically escaped, which may not be the desired behavior if the template\ntag is used inside a <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-autoescape\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">autoescape</span> <span class=\"pre\">off</span> <span class=\"pre\">%}</span></code></a> block.</p>\n</div>\n<div class=\"section\" id=\"s-thread-safety-considerations\">\n<span id=\"s-template-tag-thread-safety\"></span><span id=\"thread-safety-considerations\"></span><span id=\"template-tag-thread-safety\"></span><h3>Thread-safety considerations<a class=\"headerlink\" href=\"#thread-safety-considerations\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Once a node is parsed, its <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> method may be called any number of times.\nSince Django is sometimes run in multi-threaded environments, a single node may\nbe simultaneously rendering with different contexts in response to two separate\nrequests. Therefore, it\u2019s important to make sure your template tags are thread\nsafe.</p>\n<p>To make sure your template tags are thread safe, you should never store state\ninformation on the node itself. For example, Django provides a builtin\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-cycle\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">cycle</span></code></a> template tag that cycles among a list of given strings each time\nit\u2019s rendered:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">for</span> <span class=\"nv\">o</span> <span class=\"k\">in</span> <span class=\"nv\">some_list</span> <span class=\"cp\">%}</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tr</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">&quot;</span><span class=\"cp\">{%</span> <span class=\"k\">cycle</span> <span class=\"s1\">&#39;row1&#39;</span> <span class=\"s1\">&#39;row2&#39;</span> <span class=\"cp\">%}</span><span class=\"s\">&quot;</span><span class=\"p\">&gt;</span>\n        ...\n    <span class=\"p\">&lt;/</span><span class=\"nt\">tr</span><span class=\"p\">&gt;</span>\n<span class=\"cp\">{%</span> <span class=\"k\">endfor</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>A naive implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode</span></code> might look something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CycleNode</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cyclevars</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cycle_iter</span> <span class=\"o\">=</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">cycle</span><span class=\"p\">(</span><span class=\"n\">cyclevars</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cycle_iter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>But, suppose we have two templates rendering the template snippet from above at\nthe same time:</p>\n<ol class=\"arabic simple\">\n<li>Thread 1 performs its first loop iteration, <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode.render()</span></code>\nreturns \u2018row1\u2019</li>\n<li>Thread 2 performs its first loop iteration, <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode.render()</span></code>\nreturns \u2018row2\u2019</li>\n<li>Thread 1 performs its second loop iteration, <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode.render()</span></code>\nreturns \u2018row1\u2019</li>\n<li>Thread 2 performs its second loop iteration, <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode.render()</span></code>\nreturns \u2018row2\u2019</li>\n</ol>\n<p>The CycleNode is iterating, but it\u2019s iterating globally. As far as Thread 1\nand Thread 2 are concerned, it\u2019s always returning the same value. This is\nnot what we want!</p>\n<p>To address this problem, Django provides a <code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code> that\u2019s associated\nwith the <code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code> of the template that is currently being rendered. The\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code> behaves like a Python dictionary, and should be used to\nstore <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> state between invocations of the <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> method.</p>\n<p>Let\u2019s refactor our <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode</span></code> implementation to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">CycleNode</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">cyclevars</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cyclevars</span> <span class=\"o\">=</span> <span class=\"n\">cyclevars</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"ow\">not</span> <span class=\"ow\">in</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">render_context</span><span class=\"p\">:</span>\n            <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">render_context</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">cycle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cyclevars</span><span class=\"p\">)</span>\n        <span class=\"n\">cycle_iter</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">render_context</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">cycle_iter</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note that it\u2019s perfectly safe to store global information that will not change\nthroughout the life of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> as an attribute. In the case of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">cyclevars</span></code> argument doesn\u2019t change after the <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> is\ninstantiated, so we don\u2019t need to put it in the <code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code>. But state\ninformation that is specific to the template that is currently being rendered,\nlike the current iteration of the <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode</span></code>, should be stored in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Notice how we used <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code> to scope the <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNode</span></code> specific information\nwithin the <code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code>. There may be multiple <code class=\"docutils literal notranslate\"><span class=\"pre\">CycleNodes</span></code> in a\ngiven template, so we need to be careful not to clobber another node\u2019s\nstate information. The easiest way to do this is to always use <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code> as\nthe key into <code class=\"docutils literal notranslate\"><span class=\"pre\">render_context</span></code>. If you\u2019re keeping track of several state\nvariables, make <code class=\"docutils literal notranslate\"><span class=\"pre\">render_context[self]</span></code> a dictionary.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-registering-the-tag\">\n<span id=\"registering-the-tag\"></span><h3>Registering the tag<a class=\"headerlink\" href=\"#registering-the-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Finally, register the tag with your module\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">Library</span></code> instance, as explained\nin <a class=\"reference internal\" href=\"#howto-writing-custom-template-tags\"><span class=\"std std-ref\">writing custom template tags</span></a>\nabove. Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">register</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"s2\">&quot;current_time&quot;</span><span class=\"p\">,</span> <span class=\"n\">do_current_time</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">tag()</span></code> method takes two arguments:</p>\n<ol class=\"arabic simple\">\n<li>The name of the template tag \u2013 a string. If this is left out, the\nname of the compilation function will be used.</li>\n<li>The compilation function \u2013 a Python function (not the name of the\nfunction as a string).</li>\n</ol>\n<p>As with filter registration, it is also possible to use this as a decorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">tag</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;current_time&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">do_current_time</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"nd\">@register</span><span class=\"o\">.</span><span class=\"n\">tag</span>\n<span class=\"k\">def</span> <span class=\"nf\">shout</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>If you leave off the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> argument, as in the second example above, Django\nwill use the function\u2019s name as the tag name.</p>\n</div>\n<div class=\"section\" id=\"s-passing-template-variables-to-the-tag\">\n<span id=\"passing-template-variables-to-the-tag\"></span><h3>Passing template variables to the tag<a class=\"headerlink\" href=\"#passing-template-variables-to-the-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Although you can pass any number of arguments to a template tag using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">token.split_contents()</span></code>, the arguments are all unpacked as\nstring literals. A little more work is required in order to pass dynamic\ncontent (a template variable) to a template tag as an argument.</p>\n<p>While the previous examples have formatted the current time into a string and\nreturned the string, suppose you wanted to pass in a\n<a class=\"reference internal\" href=\"../../ref/models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> from an object and have the template\ntag format that date-time:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>This post was last updated at <span class=\"cp\">{%</span> <span class=\"k\">format_time</span> <span class=\"nv\">blog_entry.date_updated</span> <span class=\"s2\">&quot;%Y-%m-%d %I:%M %p&quot;</span> <span class=\"cp\">%}</span>.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>Initially, <code class=\"docutils literal notranslate\"><span class=\"pre\">token.split_contents()</span></code> will return three values:</p>\n<ol class=\"arabic simple\">\n<li>The tag name <code class=\"docutils literal notranslate\"><span class=\"pre\">format_time</span></code>.</li>\n<li>The string <code class=\"docutils literal notranslate\"><span class=\"pre\">'blog_entry.date_updated'</span></code> (without the surrounding\nquotes).</li>\n<li>The formatting string <code class=\"docutils literal notranslate\"><span class=\"pre\">'&quot;%Y-%m-%d</span> <span class=\"pre\">%I:%M</span> <span class=\"pre\">%p&quot;'</span></code>. The return value from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">split_contents()</span></code> will include the leading and trailing quotes for\nstring literals like this.</li>\n</ol>\n<p>Now your tag should begin to look like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">do_format_time</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># split_contents() knows not to split quoted strings.</span>\n        <span class=\"n\">tag_name</span><span class=\"p\">,</span> <span class=\"n\">date_to_be_formatted</span><span class=\"p\">,</span> <span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">split_contents</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag requires exactly two arguments&quot;</span> <span class=\"o\">%</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag&#39;s argument should be in quotes&quot;</span> <span class=\"o\">%</span> <span class=\"n\">tag_name</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">FormatTimeNode</span><span class=\"p\">(</span><span class=\"n\">date_to_be_formatted</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>You also have to change the renderer to retrieve the actual contents of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">date_updated</span></code> property of the <code class=\"docutils literal notranslate\"><span class=\"pre\">blog_entry</span></code> object.  This can be\naccomplished by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">Variable()</span></code> class in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template</span></code>.</p>\n<p>To use the <code class=\"docutils literal notranslate\"><span class=\"pre\">Variable</span></code> class, instantiate it with the name of the variable to\nbe resolved, and then call <code class=\"docutils literal notranslate\"><span class=\"pre\">variable.resolve(context)</span></code>. So, for example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">FormatTimeNode</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">date_to_be_formatted</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date_to_be_formatted</span> <span class=\"o\">=</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Variable</span><span class=\"p\">(</span><span class=\"n\">date_to_be_formatted</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"n\">format_string</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">actual_date</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">date_to_be_formatted</span><span class=\"o\">.</span><span class=\"n\">resolve</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"n\">actual_date</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">VariableDoesNotExist</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n</pre></div>\n</div>\n<p>Variable resolution will throw a <code class=\"docutils literal notranslate\"><span class=\"pre\">VariableDoesNotExist</span></code> exception if it\ncannot resolve the string passed to it in the current context of the page.</p>\n</div>\n<div class=\"section\" id=\"s-setting-a-variable-in-the-context\">\n<span id=\"setting-a-variable-in-the-context\"></span><h3>Setting a variable in the context<a class=\"headerlink\" href=\"#setting-a-variable-in-the-context\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The above examples output a value. Generally, it\u2019s more flexible if your\ntemplate tags set template variables instead of outputting values. That way,\ntemplate authors can reuse the values that your template tags create.</p>\n<p>To set a variable in the context, use dictionary assignment on the context\nobject in the <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> method. Here\u2019s an updated version of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentTimeNode</span></code> that sets a template variable <code class=\"docutils literal notranslate\"><span class=\"pre\">current_time</span></code> instead of\noutputting it:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django</span> <span class=\"kn\">import</span> <span class=\"n\">template</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CurrentTimeNode2</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"n\">format_string</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;current_time&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n</pre></div>\n</div>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> returns the empty string. <code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> should always\nreturn string output. If all the template tag does is set a variable,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render()</span></code> should return the empty string.</p>\n<p>Here\u2019s how you\u2019d use this new version of the tag:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">current_time</span> <span class=\"s2\">&quot;%Y-%m-%d %I:%M %p&quot;</span> <span class=\"cp\">%}</span><span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The time is <span class=\"cp\">{{</span> <span class=\"nv\">current_time</span> <span class=\"cp\">}}</span>.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition-variable-scope-in-context admonition\">\n<p class=\"first admonition-title\">Variable scope in context</p>\n<p class=\"last\">Any variable set in the context will only be available in the same\n<code class=\"docutils literal notranslate\"><span class=\"pre\">block</span></code> of the template in which it was assigned. This behavior is\nintentional; it provides a scope for variables so that they don\u2019t conflict\nwith context in other blocks.</p>\n</div>\n<p>But, there\u2019s a problem with <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentTimeNode2</span></code>: The variable name\n<code class=\"docutils literal notranslate\"><span class=\"pre\">current_time</span></code> is hard-coded. This means you\u2019ll need to make sure your\ntemplate doesn\u2019t use <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">current_time</span> <span class=\"pre\">}}</span></code> anywhere else, because the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">current_time</span> <span class=\"pre\">%}</span></code> will blindly overwrite that variable\u2019s value. A cleaner\nsolution is to make the template tag specify the name of the output variable,\nlike so:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">current_time</span> <span class=\"s2\">&quot;%Y-%m-%d %I:%M %p&quot;</span> <span class=\"k\">as</span> <span class=\"nv\">my_current_time</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>The current time is <span class=\"cp\">{{</span> <span class=\"nv\">my_current_time</span> <span class=\"cp\">}}</span>.<span class=\"p\">&lt;/</span><span class=\"nt\">p</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n<p>To do that, you\u2019ll need to refactor both the compilation function and <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code>\nclass, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">re</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CurrentTimeNode3</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">format_string</span><span class=\"p\">,</span> <span class=\"n\">var_name</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span> <span class=\"o\">=</span> <span class=\"n\">format_string</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var_name</span> <span class=\"o\">=</span> <span class=\"n\">var_name</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">var_name</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">format_string</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">do_current_time</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"c1\"># This version uses a regular expression to parse tag contents.</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Splitting by None == splitting by spaces.</span>\n        <span class=\"n\">tag_name</span><span class=\"p\">,</span> <span class=\"n\">arg</span> <span class=\"o\">=</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag requires arguments&quot;</span> <span class=\"o\">%</span> <span class=\"n\">token</span><span class=\"o\">.</span><span class=\"n\">contents</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"p\">)</span>\n    <span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;(.*?) as (\\w+)&quot;</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">m</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag had invalid arguments&quot;</span> <span class=\"o\">%</span> <span class=\"n\">tag_name</span><span class=\"p\">)</span>\n    <span class=\"n\">format_string</span><span class=\"p\">,</span> <span class=\"n\">var_name</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">groups</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"ow\">in</span> <span class=\"p\">(</span><span class=\"s1\">&#39;&quot;&#39;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&#39;&quot;</span><span class=\"p\">)):</span>\n        <span class=\"k\">raise</span> <span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">TemplateSyntaxError</span><span class=\"p\">(</span>\n            <span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> tag&#39;s argument should be in quotes&quot;</span> <span class=\"o\">%</span> <span class=\"n\">tag_name</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">CurrentTimeNode3</span><span class=\"p\">(</span><span class=\"n\">format_string</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">var_name</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The difference here is that <code class=\"docutils literal notranslate\"><span class=\"pre\">do_current_time()</span></code> grabs the format string and\nthe variable name, passing both to <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentTimeNode3</span></code>.</p>\n<p>Finally, if you only need to have a simple syntax for your custom\ncontext-updating template tag, consider using the\n<a class=\"reference internal\" href=\"#django.template.Library.simple_tag\" title=\"django.template.Library.simple_tag\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">simple_tag()</span></code></a> shortcut, which supports assigning\nthe tag results to a template variable.</p>\n</div>\n<div class=\"section\" id=\"s-parsing-until-another-block-tag\">\n<span id=\"parsing-until-another-block-tag\"></span><h3>Parsing until another block tag<a class=\"headerlink\" href=\"#parsing-until-another-block-tag\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Template tags can work in tandem. For instance, the standard\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-comment\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code></a> tag hides everything until <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code>.\nTo create a template tag such as this, use <code class=\"docutils literal notranslate\"><span class=\"pre\">parser.parse()</span></code> in your\ncompilation function.</p>\n<p>Here\u2019s how a simplified <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> tag might be implemented:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">do_comment</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"n\">nodelist</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">((</span><span class=\"s2\">&quot;endcomment&quot;</span><span class=\"p\">,))</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">delete_first_token</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">CommentNode</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CommentNode</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;&quot;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The actual implementation of <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-comment\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code></a> is slightly\ndifferent in that it allows broken template tags to appear between\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code>. It does so by calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">parser.skip_past('endcomment')</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">parser.parse(('endcomment',))</span></code>\nfollowed by <code class=\"docutils literal notranslate\"><span class=\"pre\">parser.delete_first_token()</span></code>, thus avoiding the generation of a\nnode list.</p>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">parser.parse()</span></code> takes a tuple of names of block tags \u2018\u2019to parse until\u2019\u2019. It\nreturns an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.template.NodeList</span></code>, which is a list of\nall <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code> objects that the parser encountered \u2018\u2019before\u2019\u2019 it encountered\nany of the tags named in the tuple.</p>\n<p>In <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;nodelist</span> <span class=\"pre\">=</span> <span class=\"pre\">parser.parse(('endcomment',))&quot;</span></code> in the above example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">nodelist</span></code> is a list of all nodes between the <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code>, not counting <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code>\nthemselves.</p>\n<p>After <code class=\"docutils literal notranslate\"><span class=\"pre\">parser.parse()</span></code> is called, the parser hasn\u2019t yet \u201cconsumed\u201d the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code> tag, so the code needs to explicitly call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">parser.delete_first_token()</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">CommentNode.render()</span></code> returns an empty string. Anything between\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code> is ignored.</p>\n</div>\n<div class=\"section\" id=\"s-parsing-until-another-block-tag-and-saving-contents\">\n<span id=\"parsing-until-another-block-tag-and-saving-contents\"></span><h3>Parsing until another block tag, and saving contents<a class=\"headerlink\" href=\"#parsing-until-another-block-tag-and-saving-contents\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In the previous example, <code class=\"docutils literal notranslate\"><span class=\"pre\">do_comment()</span></code> discarded everything between\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">comment</span> <span class=\"pre\">%}</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endcomment</span> <span class=\"pre\">%}</span></code>. Instead of doing that, it\u2019s\npossible to do something with the code between block tags.</p>\n<p>For example, here\u2019s a custom template tag, <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">upper</span> <span class=\"pre\">%}</span></code>, that capitalizes\neverything between itself and <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">endupper</span> <span class=\"pre\">%}</span></code>.</p>\n<p>Usage:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">upper</span> <span class=\"cp\">%}</span>This will appear in uppercase, <span class=\"cp\">{{</span> <span class=\"nv\">your_name</span> <span class=\"cp\">}}</span>.<span class=\"cp\">{%</span> <span class=\"k\">endupper</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>As in the previous example, we\u2019ll use <code class=\"docutils literal notranslate\"><span class=\"pre\">parser.parse()</span></code>. But this time, we\npass the resulting <code class=\"docutils literal notranslate\"><span class=\"pre\">nodelist</span></code> to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Node</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">do_upper</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">):</span>\n    <span class=\"n\">nodelist</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">((</span><span class=\"s2\">&quot;endupper&quot;</span><span class=\"p\">,))</span>\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">delete_first_token</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">UpperNode</span><span class=\"p\">(</span><span class=\"n\">nodelist</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">UpperNode</span><span class=\"p\">(</span><span class=\"n\">template</span><span class=\"o\">.</span><span class=\"n\">Node</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">nodelist</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nodelist</span> <span class=\"o\">=</span> <span class=\"n\">nodelist</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">render</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">nodelist</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">(</span><span class=\"n\">context</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>The only new concept here is the <code class=\"docutils literal notranslate\"><span class=\"pre\">self.nodelist.render(context)</span></code> in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UpperNode.render()</span></code>.</p>\n<p>For more examples of complex rendering, see the source code of\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-for\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">for</span> <span class=\"pre\">%}</span></code></a> in <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/template/defaulttags.py\">django/template/defaulttags.py</a> and\n<a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-if\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">if</span> <span class=\"pre\">%}</span></code></a> in <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/template/smartif.py\">django/template/smartif.py</a>.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/custom-file-storage", "How to write a custom storage class", "N", "next"], ["howto/custom-template-backend", "How to implement a custom template backend", "P", "previous"]], "sourcename": "howto/custom-template-tags.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to create custom template tags and filters</a><ul>\n<li><a class=\"reference internal\" href=\"#code-layout\">Code layout</a></li>\n<li><a class=\"reference internal\" href=\"#writing-custom-template-filters\">Writing custom template filters</a><ul>\n<li><a class=\"reference internal\" href=\"#registering-custom-filters\">Registering custom filters</a></li>\n<li><a class=\"reference internal\" href=\"#template-filters-that-expect-strings\">Template filters that expect strings</a></li>\n<li><a class=\"reference internal\" href=\"#filters-and-auto-escaping\">Filters and auto-escaping</a></li>\n<li><a class=\"reference internal\" href=\"#filters-and-time-zones\">Filters and time zones</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#writing-custom-template-tags\">Writing custom template tags</a><ul>\n<li><a class=\"reference internal\" href=\"#simple-tags\">Simple tags</a></li>\n<li><a class=\"reference internal\" href=\"#inclusion-tags\">Inclusion tags</a></li>\n<li><a class=\"reference internal\" href=\"#advanced-custom-template-tags\">Advanced custom template tags</a></li>\n<li><a class=\"reference internal\" href=\"#a-quick-overview\">A quick overview</a></li>\n<li><a class=\"reference internal\" href=\"#writing-the-compilation-function\">Writing the compilation function</a></li>\n<li><a class=\"reference internal\" href=\"#writing-the-renderer\">Writing the renderer</a></li>\n<li><a class=\"reference internal\" href=\"#auto-escaping-considerations\">Auto-escaping considerations</a></li>\n<li><a class=\"reference internal\" href=\"#thread-safety-considerations\">Thread-safety considerations</a></li>\n<li><a class=\"reference internal\" href=\"#registering-the-tag\">Registering the tag</a></li>\n<li><a class=\"reference internal\" href=\"#passing-template-variables-to-the-tag\">Passing template variables to the tag</a></li>\n<li><a class=\"reference internal\" href=\"#setting-a-variable-in-the-context\">Setting a variable in the context</a></li>\n<li><a class=\"reference internal\" href=\"#parsing-until-another-block-tag\">Parsing until another block tag</a></li>\n<li><a class=\"reference internal\" href=\"#parsing-until-another-block-tag-and-saving-contents\">Parsing until another block tag, and saving contents</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/custom-template-tags", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
