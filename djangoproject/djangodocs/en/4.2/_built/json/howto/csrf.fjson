{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../auth-remote-user/", "title": "How to authenticate using <code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_USER</span></code>"}, "next": {"link": "../custom-management-commands/", "title": "How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands"}, "title": "How to use Django\u2019s CSRF protection", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-use-django-s-csrf-protection\">\n<span id=\"s-using-csrf\"></span><span id=\"how-to-use-django-s-csrf-protection\"></span><span id=\"using-csrf\"></span><h1>How to use Django\u2019s CSRF protection<a class=\"headerlink\" href=\"#how-to-use-django-s-csrf-protection\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>To take advantage of CSRF protection in your views, follow these steps:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">The CSRF middleware is activated by default in the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a>\nsetting. If you override that setting, remember that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.middleware.csrf.CsrfViewMiddleware'</span></code> should come before any view\nmiddleware that assume that CSRF attacks have been dealt with.</p>\n<p>If you disabled it, which is not recommended, you can use\n<a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_protect\" title=\"django.views.decorators.csrf.csrf_protect\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csrf_protect()</span></code></a> on particular views\nyou want to protect (see below).</p>\n</li>\n<li><p class=\"first\">In any template that uses a POST form, use the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> tag inside\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code> element if the form is for an internal URL, e.g.:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&quot;post&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{%</span> <span class=\"k\">csrf_token</span> <span class=\"cp\">%}</span>\n</pre></div>\n</div>\n<p>This should not be done for POST forms that target external URLs, since\nthat would cause the CSRF token to be leaked, leading to a vulnerability.</p>\n</li>\n<li><p class=\"first\">In the corresponding view functions, ensure that\n<a class=\"reference internal\" href=\"../../ref/templates/api/#django.template.RequestContext\" title=\"django.template.RequestContext\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code></a> is used to render the response so\nthat <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">csrf_token</span> <span class=\"pre\">%}</span></code> will work properly. If you\u2019re using the\n<a class=\"reference internal\" href=\"../../topics/http/shortcuts/#django.shortcuts.render\" title=\"django.shortcuts.render\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">render()</span></code></a> function, generic views, or contrib apps,\nyou are covered already since these all use <code class=\"docutils literal notranslate\"><span class=\"pre\">RequestContext</span></code>.</p>\n</li>\n</ol>\n<div class=\"section\" id=\"s-using-csrf-protection-with-ajax\">\n<span id=\"s-csrf-ajax\"></span><span id=\"using-csrf-protection-with-ajax\"></span><span id=\"csrf-ajax\"></span><h2>Using CSRF protection with AJAX<a class=\"headerlink\" href=\"#using-csrf-protection-with-ajax\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>While the above method can be used for AJAX POST requests, it has some\ninconveniences: you have to remember to pass the CSRF token in as POST data with\nevery POST request. For this reason, there is an alternative method: on each\nXMLHttpRequest, set a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">X-CSRFToken</span></code> header (as specified by the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_HEADER_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_HEADER_NAME</span></code></a> setting) to the value of the CSRF token. This is\noften easier because many JavaScript frameworks provide hooks that allow\nheaders to be set on every request.</p>\n<p>First, you must get the CSRF token. How to do that depends on whether or not\nthe <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_USE_SESSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code></a> settings\nare enabled.</p>\n<div class=\"section\" id=\"s-acquiring-the-token-if-csrf-use-sessions-and-csrf-cookie-httponly-are-false\">\n<span id=\"s-acquiring-csrf-token-from-cookie\"></span><span id=\"acquiring-the-token-if-csrf-use-sessions-and-csrf-cookie-httponly-are-false\"></span><span id=\"acquiring-csrf-token-from-cookie\"></span><h3>Acquiring the token if <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_USE_SESSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code></a> and <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code></a> are <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code><a class=\"headerlink\" href=\"#acquiring-the-token-if-csrf-use-sessions-and-csrf-cookie-httponly-are-false\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The recommended source for the token is the <code class=\"docutils literal notranslate\"><span class=\"pre\">csrftoken</span></code> cookie, which will be\nset if you\u2019ve enabled CSRF protection for your views as outlined above.</p>\n<p>The CSRF token cookie is named <code class=\"docutils literal notranslate\"><span class=\"pre\">csrftoken</span></code> by default, but you can control\nthe cookie name via the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_NAME</span></code></a> setting.</p>\n<p>You can acquire the token like this:</p>\n<div class=\"highlight-javascript notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">function</span><span class=\"w\"> </span><span class=\"nx\">getCookie</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">cookieValue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"kc\">null</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"w\"> </span><span class=\"o\">&amp;&amp;</span><span class=\"w\"> </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"w\"> </span><span class=\"o\">!==</span><span class=\"w\"> </span><span class=\"s1\">&#39;&#39;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">cookies</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">cookie</span><span class=\"p\">.</span><span class=\"nx\">split</span><span class=\"p\">(</span><span class=\"s1\">&#39;;&#39;</span><span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"k\">for</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"mf\">0</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"w\"> </span><span class=\"nx\">cookies</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"p\">;</span><span class=\"w\"> </span><span class=\"nx\">i</span><span class=\"o\">++</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">cookie</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">cookies</span><span class=\"p\">[</span><span class=\"nx\">i</span><span class=\"p\">].</span><span class=\"nx\">trim</span><span class=\"p\">();</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"c1\">// Does this cookie string begin with the name we want?</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"k\">if</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">cookie</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"mf\">0</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"o\">===</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"s1\">&#39;=&#39;</span><span class=\"p\">))</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"nx\">cookieValue</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">decodeURIComponent</span><span class=\"p\">(</span><span class=\"nx\">cookie</span><span class=\"p\">.</span><span class=\"nx\">substring</span><span class=\"p\">(</span><span class=\"nx\">name</span><span class=\"p\">.</span><span class=\"nx\">length</span><span class=\"w\"> </span><span class=\"o\">+</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">));</span><span class=\"w\"></span>\n<span class=\"w\">                </span><span class=\"k\">break</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"w\">            </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">return</span><span class=\"w\"> </span><span class=\"nx\">cookieValue</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">csrftoken</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">getCookie</span><span class=\"p\">(</span><span class=\"s1\">&#39;csrftoken&#39;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>The above code could be simplified by using the <a class=\"reference external\" href=\"https://github.com/js-cookie/js-cookie/\">JavaScript Cookie library</a> to replace <code class=\"docutils literal notranslate\"><span class=\"pre\">getCookie</span></code>:</p>\n<div class=\"highlight-javascript notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">csrftoken</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">Cookies</span><span class=\"p\">.</span><span class=\"nx\">get</span><span class=\"p\">(</span><span class=\"s1\">&#39;csrftoken&#39;</span><span class=\"p\">);</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The CSRF token is also present in the DOM in a masked form, but only if\nexplicitly included using <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> in a template. The cookie\ncontains the canonical, unmasked token. The\n<a class=\"reference internal\" href=\"../../ref/middleware/#django.middleware.csrf.CsrfViewMiddleware\" title=\"django.middleware.csrf.CsrfViewMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code></a> will accept either.\nHowever, in order to protect against <a class=\"reference external\" href=\"https://www.breachattack.com/\">BREACH</a> attacks, it\u2019s recommended to\nuse a masked token.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">If your view is not rendering a template containing the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a>\ntemplate tag, Django might not set the CSRF token cookie. This is common in\ncases where forms are dynamically added to the page. To address this case,\nDjango provides a view decorator which forces setting of the cookie:\n<a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.ensure_csrf_cookie\" title=\"django.views.decorators.csrf.ensure_csrf_cookie\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ensure_csrf_cookie()</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-acquiring-the-token-if-csrf-use-sessions-or-csrf-cookie-httponly-is-true\">\n<span id=\"s-acquiring-csrf-token-from-html\"></span><span id=\"acquiring-the-token-if-csrf-use-sessions-or-csrf-cookie-httponly-is-true\"></span><span id=\"acquiring-csrf-token-from-html\"></span><h3>Acquiring the token if <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_USE_SESSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code></a> or <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code><a class=\"headerlink\" href=\"#acquiring-the-token-if-csrf-use-sessions-or-csrf-cookie-httponly-is-true\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you activate <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_USE_SESSIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code></a> or\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_COOKIE_HTTPONLY\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code></a>, you must include the CSRF token in your HTML\nand read the token from the DOM with JavaScript:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{%</span> <span class=\"k\">csrf_token</span> <span class=\"cp\">%}</span>\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span><span class=\"w\"></span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">csrftoken</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelector</span><span class=\"p\">(</span><span class=\"s1\">&#39;[name=csrfmiddlewaretoken]&#39;</span><span class=\"p\">).</span><span class=\"nx\">value</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-setting-the-token-on-the-ajax-request\">\n<span id=\"setting-the-token-on-the-ajax-request\"></span><h3>Setting the token on the AJAX request<a class=\"headerlink\" href=\"#setting-the-token-on-the-ajax-request\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Finally, you\u2019ll need to set the header on your AJAX request. Using the\n<a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Web/API/fetch\">fetch()</a> API:</p>\n<div class=\"highlight-javascript notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">request</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ow\">new</span><span class=\"w\"> </span><span class=\"nx\">Request</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"cm\">/* URL */</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">method</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;POST&#39;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">headers</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"s1\">&#39;X-CSRFToken&#39;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"nx\">csrftoken</span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"nx\">mode</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s1\">&#39;same-origin&#39;</span><span class=\"w\"> </span><span class=\"c1\">// Do not send CSRF token to another domain.</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">);</span><span class=\"w\"></span>\n<span class=\"nx\">fetch</span><span class=\"p\">(</span><span class=\"nx\">request</span><span class=\"p\">).</span><span class=\"nx\">then</span><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(</span><span class=\"nx\">response</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"c1\">// ...</span><span class=\"w\"></span>\n<span class=\"p\">});</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-csrf-protection-in-jinja2-templates\">\n<span id=\"using-csrf-protection-in-jinja2-templates\"></span><h2>Using CSRF protection in Jinja2 templates<a class=\"headerlink\" href=\"#using-csrf-protection-in-jinja2-templates\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django\u2019s <a class=\"reference internal\" href=\"../../topics/templates/#django.template.backends.jinja2.Jinja2\" title=\"django.template.backends.jinja2.Jinja2\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Jinja2</span></code></a> template backend\nadds <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">csrf_input</span> <span class=\"pre\">}}</span></code> to the context of all templates which is equivalent\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">{%</span> <span class=\"pre\">csrf_token</span> <span class=\"pre\">%}</span></code> in the Django template language. For example:</p>\n<div class=\"highlight-html+jinja notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">&lt;</span><span class=\"nt\">form</span> <span class=\"na\">method</span><span class=\"o\">=</span><span class=\"s\">&quot;post&quot;</span><span class=\"p\">&gt;</span><span class=\"cp\">{{</span> <span class=\"nv\">csrf_input</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-the-decorator-method\">\n<span id=\"using-the-decorator-method\"></span><h2>Using the decorator method<a class=\"headerlink\" href=\"#using-the-decorator-method\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Rather than adding <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> as a blanket protection, you can use\nthe <a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_protect\" title=\"django.views.decorators.csrf.csrf_protect\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csrf_protect()</span></code></a> decorator, which has\nexactly the same functionality, on particular views that need the protection.\nIt must be used <strong>both</strong> on views that insert the CSRF token in the output, and\non those that accept the POST form data. (These are often the same view\nfunction, but not always).</p>\n<p>Use of the decorator by itself is <strong>not recommended</strong>, since if you forget to\nuse it, you will have a security hole. The \u2018belt and braces\u2019 strategy of using\nboth is fine, and will incur minimal overhead.</p>\n</div>\n<div class=\"section\" id=\"s-handling-rejected-requests\">\n<span id=\"s-csrf-rejected-requests\"></span><span id=\"handling-rejected-requests\"></span><span id=\"csrf-rejected-requests\"></span><h2>Handling rejected requests<a class=\"headerlink\" href=\"#handling-rejected-requests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>By default, a \u2018403 Forbidden\u2019 response is sent to the user if an incoming\nrequest fails the checks performed by <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code>. This should\nusually only be seen when there is a genuine Cross Site Request Forgery, or\nwhen, due to a programming error, the CSRF token has not been included with a\nPOST form.</p>\n<p>The error page, however, is not very friendly, so you may want to provide your\nown view for handling this condition. To do this, set the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-CSRF_FAILURE_VIEW\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_FAILURE_VIEW</span></code></a> setting.</p>\n<p>CSRF failures are logged as warnings to the <a class=\"reference internal\" href=\"../../ref/logging/#django-security-logger\"><span class=\"std std-ref\">django.security.csrf</span></a> logger.</p>\n</div>\n<div class=\"section\" id=\"s-using-csrf-protection-with-caching\">\n<span id=\"using-csrf-protection-with-caching\"></span><h2>Using CSRF protection with caching<a class=\"headerlink\" href=\"#using-csrf-protection-with-caching\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If the <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> template tag is used by a template (or the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_token</span></code> function is called some other way), <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> will\nadd a cookie and a <code class=\"docutils literal notranslate\"><span class=\"pre\">Vary:</span> <span class=\"pre\">Cookie</span></code> header to the response. This means that the\nmiddleware will play well with the cache middleware if it is used as instructed\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">UpdateCacheMiddleware</span></code> goes before all other middleware).</p>\n<p>However, if you use cache decorators on individual views, the CSRF middleware\nwill not yet have been able to set the Vary header or the CSRF cookie, and the\nresponse will be cached without either one. In this case, on any views that\nwill require a CSRF token to be inserted you should use the\n<a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_protect\" title=\"django.views.decorators.csrf.csrf_protect\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.views.decorators.csrf.csrf_protect()</span></code></a> decorator first:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.cache</span> <span class=\"kn\">import</span> <span class=\"n\">cache_page</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.csrf</span> <span class=\"kn\">import</span> <span class=\"n\">csrf_protect</span>\n\n\n<span class=\"nd\">@cache_page</span><span class=\"p\">(</span><span class=\"mi\">60</span> <span class=\"o\">*</span> <span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"nd\">@csrf_protect</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>If you are using class-based views, you can refer to <a class=\"reference internal\" href=\"../../topics/class-based-views/intro/#id1\"><span class=\"std std-ref\">Decorating\nclass-based views</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-testing-and-csrf-protection\">\n<span id=\"testing-and-csrf-protection\"></span><h2>Testing and CSRF protection<a class=\"headerlink\" href=\"#testing-and-csrf-protection\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code> will usually be a big hindrance to testing view\nfunctions, due to the need for the CSRF token which must be sent with every POST\nrequest. For this reason, Django\u2019s HTTP client for tests has been modified to\nset a flag on requests which relaxes the middleware and the <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code>\ndecorator so that they no longer rejects requests. In every other respect\n(e.g. sending cookies etc.), they behave the same.</p>\n<p>If, for some reason, you <em>want</em> the test client to perform CSRF\nchecks, you can create an instance of the test client that enforces\nCSRF checks:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">csrf_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">enforce_csrf_checks</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-edge-cases\">\n<span id=\"edge-cases\"></span><h2>Edge cases<a class=\"headerlink\" href=\"#edge-cases\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Certain views can have unusual requirements that mean they don\u2019t fit the normal\npattern envisaged here. A number of utilities can be useful in these\nsituations. The scenarios they might be needed in are described in the following\nsection.</p>\n<div class=\"section\" id=\"s-disabling-csrf-protection-for-just-a-few-views\">\n<span id=\"disabling-csrf-protection-for-just-a-few-views\"></span><h3>Disabling CSRF protection for just a few views<a class=\"headerlink\" href=\"#disabling-csrf-protection-for-just-a-few-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Most views requires CSRF protection, but a few do not.</p>\n<p>Solution: rather than disabling the middleware and applying <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code> to\nall the views that need it, enable the middleware and use\n<a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_exempt\" title=\"django.views.decorators.csrf.csrf_exempt\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csrf_exempt()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-setting-the-token-when-csrfviewmiddleware-process-view-is-not-used\">\n<span id=\"setting-the-token-when-csrfviewmiddleware-process-view-is-not-used\"></span><h3>Setting the token when <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware.process_view()</span></code> is not used<a class=\"headerlink\" href=\"#setting-the-token-when-csrfviewmiddleware-process-view-is-not-used\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are cases when <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware.process_view</span></code> may not have run\nbefore your view is run - 404 and 500 handlers, for example - but you still\nneed the CSRF token in a form.</p>\n<p>Solution: use <a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.requires_csrf_token\" title=\"django.views.decorators.csrf.requires_csrf_token\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">requires_csrf_token()</span></code></a></p>\n</div>\n<div class=\"section\" id=\"s-including-the-csrf-token-in-an-unprotected-view\">\n<span id=\"including-the-csrf-token-in-an-unprotected-view\"></span><h3>Including the CSRF token in an unprotected view<a class=\"headerlink\" href=\"#including-the-csrf-token-in-an-unprotected-view\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There may be some views that are unprotected and have been exempted by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_exempt</span></code>, but still need to include the CSRF token.</p>\n<p>Solution: use <a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_exempt\" title=\"django.views.decorators.csrf.csrf_exempt\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csrf_exempt()</span></code></a> followed by\n<a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.requires_csrf_token\" title=\"django.views.decorators.csrf.requires_csrf_token\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">requires_csrf_token()</span></code></a>. (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">requires_csrf_token</span></code>\nshould be the innermost decorator).</p>\n</div>\n<div class=\"section\" id=\"s-protecting-a-view-for-only-one-path\">\n<span id=\"protecting-a-view-for-only-one-path\"></span><h3>Protecting a view for only one path<a class=\"headerlink\" href=\"#protecting-a-view-for-only-one-path\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A view needs CSRF protection under one set of conditions only, and mustn\u2019t have\nit for the rest of the time.</p>\n<p>Solution: use <a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_exempt\" title=\"django.views.decorators.csrf.csrf_exempt\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csrf_exempt()</span></code></a> for the whole\nview function, and <a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.csrf_protect\" title=\"django.views.decorators.csrf.csrf_protect\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">csrf_protect()</span></code></a> for the\npath within it that needs protection. Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.views.decorators.csrf</span> <span class=\"kn\">import</span> <span class=\"n\">csrf_exempt</span><span class=\"p\">,</span> <span class=\"n\">csrf_protect</span>\n\n\n<span class=\"nd\">@csrf_exempt</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"nd\">@csrf_protect</span>\n    <span class=\"k\">def</span> <span class=\"nf\">protected_path</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">do_something</span><span class=\"p\">()</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">some_condition</span><span class=\"p\">():</span>\n        <span class=\"k\">return</span> <span class=\"n\">protected_path</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">do_something_else</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-protecting-a-page-that-uses-ajax-without-an-html-form\">\n<span id=\"protecting-a-page-that-uses-ajax-without-an-html-form\"></span><h3>Protecting a page that uses AJAX without an HTML form<a class=\"headerlink\" href=\"#protecting-a-page-that-uses-ajax-without-an-html-form\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A page makes a POST request via AJAX, and the page does not have an HTML form\nwith a <a class=\"reference internal\" href=\"../../ref/templates/builtins/#std-templatetag-csrf_token\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">csrf_token</span></code></a> that would cause the required CSRF cookie to be sent.</p>\n<p>Solution: use <a class=\"reference internal\" href=\"../../ref/csrf/#django.views.decorators.csrf.ensure_csrf_cookie\" title=\"django.views.decorators.csrf.ensure_csrf_cookie\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">ensure_csrf_cookie()</span></code></a> on the\nview that sends the page.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-csrf-protection-in-reusable-applications\">\n<span id=\"csrf-protection-in-reusable-applications\"></span><h2>CSRF protection in reusable applications<a class=\"headerlink\" href=\"#csrf-protection-in-reusable-applications\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Because it is possible for the developer to turn off the <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code>,\nall relevant views in contrib apps use the <code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code> decorator to ensure\nthe security of these applications against CSRF. It is recommended that the\ndevelopers of other reusable apps that want the same guarantees also use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">csrf_protect</span></code> decorator on their views.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/custom-management-commands", "How to create custom <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands", "N", "next"], ["howto/auth-remote-user", "How to authenticate using <code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_USER</span></code>", "P", "previous"]], "sourcename": "howto/csrf.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to use Django\u2019s CSRF protection</a><ul>\n<li><a class=\"reference internal\" href=\"#using-csrf-protection-with-ajax\">Using CSRF protection with AJAX</a><ul>\n<li><a class=\"reference internal\" href=\"#acquiring-the-token-if-csrf-use-sessions-and-csrf-cookie-httponly-are-false\">Acquiring the token if <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code> and <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code> are <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#acquiring-the-token-if-csrf-use-sessions-or-csrf-cookie-httponly-is-true\">Acquiring the token if <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_USE_SESSIONS</span></code> or <code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CSRF_COOKIE_HTTPONLY</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#setting-the-token-on-the-ajax-request\">Setting the token on the AJAX request</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#using-csrf-protection-in-jinja2-templates\">Using CSRF protection in Jinja2 templates</a></li>\n<li><a class=\"reference internal\" href=\"#using-the-decorator-method\">Using the decorator method</a></li>\n<li><a class=\"reference internal\" href=\"#handling-rejected-requests\">Handling rejected requests</a></li>\n<li><a class=\"reference internal\" href=\"#using-csrf-protection-with-caching\">Using CSRF protection with caching</a></li>\n<li><a class=\"reference internal\" href=\"#testing-and-csrf-protection\">Testing and CSRF protection</a></li>\n<li><a class=\"reference internal\" href=\"#edge-cases\">Edge cases</a><ul>\n<li><a class=\"reference internal\" href=\"#disabling-csrf-protection-for-just-a-few-views\">Disabling CSRF protection for just a few views</a></li>\n<li><a class=\"reference internal\" href=\"#setting-the-token-when-csrfviewmiddleware-process-view-is-not-used\">Setting the token when <code class=\"docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware.process_view()</span></code> is not used</a></li>\n<li><a class=\"reference internal\" href=\"#including-the-csrf-token-in-an-unprotected-view\">Including the CSRF token in an unprotected view</a></li>\n<li><a class=\"reference internal\" href=\"#protecting-a-view-for-only-one-path\">Protecting a view for only one path</a></li>\n<li><a class=\"reference internal\" href=\"#protecting-a-page-that-uses-ajax-without-an-html-form\">Protecting a page that uses AJAX without an HTML form</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#csrf-protection-in-reusable-applications\">CSRF protection in reusable applications</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/csrf", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}