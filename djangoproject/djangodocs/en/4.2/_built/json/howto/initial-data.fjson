{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../error-reporting/", "title": "How to manage error reporting"}, "next": {"link": "../legacy-databases/", "title": "How to integrate Django with a legacy database"}, "title": "How to provide initial data for models", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-provide-initial-data-for-models\">\n<span id=\"how-to-provide-initial-data-for-models\"></span><h1>How to provide initial data for models<a class=\"headerlink\" href=\"#how-to-provide-initial-data-for-models\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>It\u2019s sometimes useful to prepopulate your database with hard-coded data when\nyou\u2019re first setting up an app. You can provide initial data with migrations or\nfixtures.</p>\n<div class=\"section\" id=\"s-provide-initial-data-with-migrations\">\n<span id=\"provide-initial-data-with-migrations\"></span><h2>Provide initial data with migrations<a class=\"headerlink\" href=\"#provide-initial-data-with-migrations\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To automatically load initial data for an app, create a\n<a class=\"reference internal\" href=\"../../topics/migrations/#data-migrations\"><span class=\"std std-ref\">data migration</span></a>. Migrations are run when setting up the\ntest database, so the data will be available there, subject to <a class=\"reference internal\" href=\"../../topics/testing/overview/#test-case-serialized-rollback\"><span class=\"std std-ref\">some\nlimitations</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-provide-data-with-fixtures\">\n<span id=\"s-initial-data-via-fixtures\"></span><span id=\"provide-data-with-fixtures\"></span><span id=\"initial-data-via-fixtures\"></span><h2>Provide data with fixtures<a class=\"headerlink\" href=\"#provide-data-with-fixtures\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You can also provide data using <a class=\"reference internal\" href=\"../../topics/db/fixtures/#fixtures-explanation\"><span class=\"std std-ref\">fixtures</span></a>,\nhowever, this data isn\u2019t loaded automatically, except if you use\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.TransactionTestCase.fixtures\" title=\"django.test.TransactionTestCase.fixtures\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TransactionTestCase.fixtures</span></code></a>.</p>\n<p>A fixture is a collection of data that Django knows how to import into a\ndatabase. The most straightforward way of creating a fixture if you\u2019ve already\ngot some data is to use the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-dumpdata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">dumpdata</span></code></a> command.\nOr, you can write fixtures by hand; fixtures can be written as JSON, XML or YAML\n(with <a class=\"reference external\" href=\"https://pyyaml.org/\">PyYAML</a> installed) documents. The <a class=\"reference internal\" href=\"../../topics/serialization/\"><span class=\"doc\">serialization documentation</span></a> has more details about each of these supported\n<a class=\"reference internal\" href=\"../../topics/serialization/#serialization-formats\"><span class=\"std std-ref\">serialization formats</span></a>.</p>\n<p>As an example, though, here\u2019s what a fixture for a <code class=\"docutils literal notranslate\"><span class=\"pre\">Person</span></code> model might look\nlike in JSON:</p>\n<div class=\"highlight-js notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">[</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">&quot;model&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;myapp.person&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">&quot;pk&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">1</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">&quot;fields&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;John&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;last_name&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Lennon&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">},</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">&quot;model&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;myapp.person&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">&quot;pk&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"mf\">2</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"s2\">&quot;fields&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;first_name&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;Paul&quot;</span><span class=\"p\">,</span><span class=\"w\"></span>\n<span class=\"w\">      </span><span class=\"s2\">&quot;last_name&quot;</span><span class=\"o\">:</span><span class=\"w\"> </span><span class=\"s2\">&quot;McCartney&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"p\">}</span><span class=\"w\"></span>\n<span class=\"p\">]</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>And here\u2019s that same fixture as YAML:</p>\n<div class=\"highlight-yaml notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">model</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">myapp.person</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">pk</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">1</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">fields</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">first_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">John</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">last_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Lennon</span><span class=\"w\"></span>\n<span class=\"p p-Indicator\">-</span><span class=\"w\"> </span><span class=\"nt\">model</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">myapp.person</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">pk</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">2</span><span class=\"w\"></span>\n<span class=\"w\">  </span><span class=\"nt\">fields</span><span class=\"p\">:</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">first_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">Paul</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"nt\">last_name</span><span class=\"p\">:</span><span class=\"w\"> </span><span class=\"l l-Scalar l-Scalar-Plain\">McCartney</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>You\u2019ll store this data in a <code class=\"docutils literal notranslate\"><span class=\"pre\">fixtures</span></code> directory inside your app.</p>\n<p>You can load data by calling <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-loaddata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">loaddata</span></code></a>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;fixturename&gt;</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;fixturename&gt;</span></code> is the name of the fixture file\nyou\u2019ve created. Each time you run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-loaddata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">loaddata</span></code></a>, the data will be read\nfrom the fixture and reloaded into the database. Note this means that if you\nchange one of the rows created by a fixture and then run <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-loaddata\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">loaddata</span></code></a>\nagain, you\u2019ll wipe out any changes you\u2019ve made.</p>\n<div class=\"section\" id=\"s-tell-django-where-to-look-for-fixture-files\">\n<span id=\"tell-django-where-to-look-for-fixture-files\"></span><h3>Tell Django where to look for fixture files<a class=\"headerlink\" href=\"#tell-django-where-to-look-for-fixture-files\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, Django looks for fixtures in the <code class=\"docutils literal notranslate\"><span class=\"pre\">fixtures</span></code> directory inside each\napp for, so the command <code class=\"docutils literal notranslate\"><span class=\"pre\">loaddata</span> <span class=\"pre\">sample</span></code> will find the file\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_app/fixtures/sample.json</span></code>. This works with relative paths as well, so\n<code class=\"docutils literal notranslate\"><span class=\"pre\">loaddata</span> <span class=\"pre\">my_app/sample</span></code> will find the file\n<code class=\"docutils literal notranslate\"><span class=\"pre\">my_app/fixtures/my_app/sample.json</span></code>.</p>\n<p>Django also looks for fixtures in the list of directories provided in the\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-FIXTURE_DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FIXTURE_DIRS</span></code></a> setting.</p>\n<p>To completely prevent default search form happening, use an absolute path to\nspecify the location of your fixture file, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">loaddata</span> <span class=\"pre\">/path/to/sample</span></code>.</p>\n<div class=\"admonition-namespace-your-fixture-files admonition\">\n<p class=\"first admonition-title\">Namespace your fixture files</p>\n<p class=\"last\">Django will use the first fixture file it finds whose name matches, so if\nyou have fixture files with the same name in different applications, you\nwill be unable to distinguish between them in your <code class=\"docutils literal notranslate\"><span class=\"pre\">loaddata</span></code> commands.\nThe easiest way to avoid this problem is by <em>namespacing</em> your fixture\nfiles. That is, by putting them inside a directory named for their\napplication, as in the relative path example above.</p>\n</div>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p class=\"last\">Fixtures are also used by the <a class=\"reference internal\" href=\"../../topics/testing/tools/#topics-testing-fixtures\"><span class=\"std std-ref\">testing framework</span></a> to help set up a consistent test environment.</p>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/legacy-databases", "How to integrate Django with a legacy database", "N", "next"], ["howto/error-reporting", "How to manage error reporting", "P", "previous"]], "sourcename": "howto/initial-data.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to provide initial data for models</a><ul>\n<li><a class=\"reference internal\" href=\"#provide-initial-data-with-migrations\">Provide initial data with migrations</a></li>\n<li><a class=\"reference internal\" href=\"#provide-data-with-fixtures\">Provide data with fixtures</a><ul>\n<li><a class=\"reference internal\" href=\"#tell-django-where-to-look-for-fixture-files\">Tell Django where to look for fixture files</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/initial-data", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
