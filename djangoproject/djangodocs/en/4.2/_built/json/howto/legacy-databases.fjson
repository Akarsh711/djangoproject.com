{"parents": [{"link": "../", "title": "\u201cHow-to\u201d guides"}], "prev": {"link": "../initial-data/", "title": "How to provide initial data for models"}, "next": {"link": "../logging/", "title": "How to configure and use logging"}, "title": "How to integrate Django with a legacy database", "meta": {}, "body": "<div class=\"section\" id=\"s-how-to-integrate-django-with-a-legacy-database\">\n<span id=\"how-to-integrate-django-with-a-legacy-database\"></span><h1>How to integrate Django with a legacy database<a class=\"headerlink\" href=\"#how-to-integrate-django-with-a-legacy-database\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>While Django is best suited for developing new applications, it\u2019s quite\npossible to integrate it into legacy databases. Django includes a couple of\nutilities to automate as much of this process as possible.</p>\n<p>This document assumes you know the Django basics, as covered in the\n<a class=\"reference internal\" href=\"../../intro/tutorial01/\"><span class=\"doc\">tutorial</span></a>.</p>\n<p>Once you\u2019ve got Django set up, you\u2019ll follow this general process to integrate\nwith an existing database.</p>\n<div class=\"section\" id=\"s-give-django-your-database-parameters\">\n<span id=\"give-django-your-database-parameters\"></span><h2>Give Django your database parameters<a class=\"headerlink\" href=\"#give-django-your-database-parameters\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You\u2019ll need to tell Django what your database connection parameters are, and\nwhat the name of the database is. Do that by editing the <a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>\nsetting and assigning values to the following keys for the <code class=\"docutils literal notranslate\"><span class=\"pre\">'default'</span></code>\nconnection:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-DATABASE-ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ENGINE</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../ref/settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a></li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-auto-generate-the-models\">\n<span id=\"auto-generate-the-models\"></span><h2>Auto-generate the models<a class=\"headerlink\" href=\"#auto-generate-the-models\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django comes with a utility called <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-inspectdb\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">inspectdb</span></code></a> that can create models\nby introspecting an existing database. You can view the output by running this\ncommand:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py inspectdb\n</pre></div>\n</div>\n<p>Save this as a file by using standard Unix output redirection:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py inspectdb &gt; models.py\n</pre></div>\n</div>\n<p>This feature is meant as a shortcut, not as definitive model generation. See the\n<a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-inspectdb\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">documentation</span> <span class=\"pre\">of</span> <span class=\"pre\">inspectdb</span></code></a> for more information.</p>\n<p>Once you\u2019ve cleaned up your models, name the file <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> and put it in\nthe Python package that holds your app. Then add the app to your\n<a class=\"reference internal\" href=\"../../ref/settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting.</p>\n<p>By default, <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-inspectdb\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">inspectdb</span></code></a> creates unmanaged models. That is,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">managed</span> <span class=\"pre\">=</span> <span class=\"pre\">False</span></code> in the model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">Meta</span></code> class tells Django not to manage\neach table\u2019s creation, modification, and deletion:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">(</span><span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">70</span><span class=\"p\">)</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">managed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CENSUS_PERSONS&quot;</span>\n</pre></div>\n</div>\n<p>If you do want to allow Django to manage the table\u2019s lifecycle, you\u2019ll need to\nchange the <a class=\"reference internal\" href=\"../../ref/models/options/#django.db.models.Options.managed\" title=\"django.db.models.Options.managed\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">managed</span></code></a> option above to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>\n(or remove it because <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> is its default value).</p>\n</div>\n<div class=\"section\" id=\"s-install-the-core-django-tables\">\n<span id=\"install-the-core-django-tables\"></span><h2>Install the core Django tables<a class=\"headerlink\" href=\"#install-the-core-django-tables\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Next, run the <a class=\"reference internal\" href=\"../../ref/django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> command to install any extra needed database\nrecords such as admin permissions and content types:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python manage.py migrate\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-test-and-tweak\">\n<span id=\"test-and-tweak\"></span><h2>Test and tweak<a class=\"headerlink\" href=\"#test-and-tweak\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Those are the basic steps \u2013 from here you\u2019ll want to tweak the models Django\ngenerated until they work the way you\u2019d like. Try accessing your data via the\nDjango database API, and try editing objects via Django\u2019s admin site, and edit\nthe models file accordingly.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["howto/logging", "How to configure and use logging", "N", "next"], ["howto/initial-data", "How to provide initial data for models", "P", "previous"]], "sourcename": "howto/legacy-databases.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How to integrate Django with a legacy database</a><ul>\n<li><a class=\"reference internal\" href=\"#give-django-your-database-parameters\">Give Django your database parameters</a></li>\n<li><a class=\"reference internal\" href=\"#auto-generate-the-models\">Auto-generate the models</a></li>\n<li><a class=\"reference internal\" href=\"#install-the-core-django-tables\">Install the core Django tables</a></li>\n<li><a class=\"reference internal\" href=\"#test-and-tweak\">Test and tweak</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "howto/legacy-databases", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}