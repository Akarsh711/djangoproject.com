{"parents": [{"link": "../../../", "title": "Django internals"}, {"link": "../../", "title": "Contributing to Django"}, {"link": "../", "title": "Writing code"}], "prev": {"link": "../coding-style/", "title": "Coding style"}, "next": {"link": "../submitting-patches/", "title": "Submitting patches"}, "title": "Unit tests", "meta": {}, "body": "<div class=\"section\" id=\"s-unit-tests\">\n<span id=\"unit-tests\"></span><h1>Unit tests<a class=\"headerlink\" href=\"#unit-tests\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django comes with a test suite of its own, in the <code class=\"docutils literal notranslate\"><span class=\"pre\">tests</span></code> directory of the\ncode base. It\u2019s our policy to make sure all tests pass at all times.</p>\n<p>We appreciate any and all contributions to the test suite!</p>\n<p>The Django tests all use the testing infrastructure that ships with Django for\ntesting applications. See <a class=\"reference internal\" href=\"../../../../topics/testing/overview/\"><span class=\"doc\">Writing and running tests</span></a> for an explanation of\nhow to write new tests.</p>\n<div class=\"section\" id=\"s-running-the-unit-tests\">\n<span id=\"s-running-unit-tests\"></span><span id=\"running-the-unit-tests\"></span><span id=\"running-unit-tests\"></span><h2>Running the unit tests<a class=\"headerlink\" href=\"#running-the-unit-tests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-quickstart\">\n<span id=\"quickstart\"></span><h3>Quickstart<a class=\"headerlink\" href=\"#quickstart\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>First, <a class=\"reference external\" href=\"https://github.com/django/django/fork\">fork Django on GitHub</a>.</p>\n<p>Second, create and activate a virtual environment. If you\u2019re not familiar with\nhow to do that, read our <a class=\"reference internal\" href=\"../../../../intro/contributing/\"><span class=\"doc\">contributing tutorial</span></a>.</p>\n<p>Next, clone your fork, install some requirements, and run the tests:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>git clone https://github.com/YourGitHubName/django.git django-repo\n<span class=\"gp\">$ </span><span class=\"nb\">cd</span> django-repo/tests\n<span class=\"gp\">$ </span>python -m pip install -e ..\n<span class=\"gp\">$ </span>python -m pip install -r requirements/py3.txt\n<span class=\"gp\">$ </span>./runtests.py\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> git clone https://github.com/YourGitHubName/django.git django-repo\n<span class=\"gp\">...\\&gt;</span> <span class=\"k\">cd</span> django-repo\\tests\n<span class=\"gp\">...\\&gt;</span> py -m pip install -e ..\n<span class=\"gp\">...\\&gt;</span> py -m pip install -r requirements\\py3.txt\n<span class=\"gp\">...\\&gt;</span> runtests.py \n</pre></div>\n</section>\n</div>\n<p>Installing the requirements will likely require some operating system packages\nthat your computer doesn\u2019t have installed. You can usually figure out which\npackage to install by doing a web search for the last line or so of the error\nmessage. Try adding your operating system to the search query if needed.</p>\n<p>If you have trouble installing the requirements, you can skip that step. See\n<a class=\"reference internal\" href=\"#running-unit-tests-dependencies\"><span class=\"std std-ref\">Running all the tests</span></a> for details on installing the optional\ntest dependencies. If you don\u2019t have an optional dependency installed, the\ntests that require it will be skipped.</p>\n<p>Running the tests requires a Django settings module that defines the databases\nto use. To help you get started, Django provides and uses a sample settings\nmodule that uses the SQLite database. See <a class=\"reference internal\" href=\"#running-unit-tests-settings\"><span class=\"std std-ref\">Using another settings module</span></a> to\nlearn how to use a different settings module to run the tests with a different\ndatabase.</p>\n<p>Having problems? See <a class=\"reference internal\" href=\"#troubleshooting-unit-tests\"><span class=\"std std-ref\">Troubleshooting</span></a> for some common issues.</p>\n</div>\n<div class=\"section\" id=\"s-running-tests-using-tox\">\n<span id=\"running-tests-using-tox\"></span><h3>Running tests using <code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code><a class=\"headerlink\" href=\"#running-tests-using-tox\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference external\" href=\"https://tox.wiki/\">Tox</a> is a tool for running tests in different virtual\nenvironments. Django includes a basic <code class=\"docutils literal notranslate\"><span class=\"pre\">tox.ini</span></code> that automates some checks\nthat our build server performs on pull requests. To run the unit tests and\nother checks (such as <a class=\"reference internal\" href=\"../coding-style/#coding-style-imports\"><span class=\"std std-ref\">import sorting</span></a>, the\n<a class=\"reference internal\" href=\"../../writing-documentation/#documentation-spelling-check\"><span class=\"std std-ref\">documentation spelling checker</span></a>, and\n<a class=\"reference internal\" href=\"../coding-style/#coding-style-python\"><span class=\"std std-ref\">code formatting</span></a>), install and run the <code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code>\ncommand from any place in the Django source tree:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install tox\n<span class=\"gp\">$ </span>tox\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install tox\n<span class=\"gp\">...\\&gt;</span> tox\n</pre></div>\n</section>\n</div>\n<p>By default, <code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code> runs the test suite with the bundled test settings file for\nSQLite, <code class=\"docutils literal notranslate\"><span class=\"pre\">black</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">blacken-docs</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">flake8</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">isort</span></code>, and the\ndocumentation spelling checker. In addition to the system dependencies noted\nelsewhere in this documentation, the command <code class=\"docutils literal notranslate\"><span class=\"pre\">python3</span></code> must be on your path\nand linked to the appropriate version of Python. A list of default environments\ncan be seen as follows:</p>\n<div class=\"console-block\" id=\"console-block-2\">\n<input class=\"c-tab-unix\" id=\"c-tab-2-unix\" type=\"radio\" name=\"console-2\" checked>\n<label for=\"c-tab-2-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-2-win\" type=\"radio\" name=\"console-2\">\n<label for=\"c-tab-2-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-2-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>tox -l\n<span class=\"go\">py3</span>\n<span class=\"go\">black</span>\n<span class=\"go\">blacken-docs</span>\n<span class=\"go\">flake8&gt;=3.7.0</span>\n<span class=\"go\">docs</span>\n<span class=\"go\">isort&gt;=5.1.0</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-2-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> tox -l\n<span class=\"go\">py3</span>\n<span class=\"go\">black</span>\n<span class=\"go\">blacken-docs</span>\n<span class=\"gp\">flake8&gt;</span>=3.7.0\n<span class=\"go\">docs</span>\n<span class=\"gp\">isort&gt;</span>=5.1.0\n</pre></div>\n</section>\n</div>\n<div class=\"section\" id=\"s-testing-other-python-versions-and-database-backends\">\n<span id=\"testing-other-python-versions-and-database-backends\"></span><h4>Testing other Python versions and database backends<a class=\"headerlink\" href=\"#testing-other-python-versions-and-database-backends\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In addition to the default environments, <code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code> supports running unit tests\nfor other versions of Python and other database backends. Since Django\u2019s test\nsuite doesn\u2019t bundle a settings file for database backends other than SQLite,\nhowever, you must <a class=\"reference internal\" href=\"#running-unit-tests-settings\"><span class=\"std std-ref\">create and provide your own test settings</span></a>. For example, to run the tests on Python 3.10\nusing PostgreSQL:</p>\n<div class=\"console-block\" id=\"console-block-3\">\n<input class=\"c-tab-unix\" id=\"c-tab-3-unix\" type=\"radio\" name=\"console-3\" checked>\n<label for=\"c-tab-3-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-3-win\" type=\"radio\" name=\"console-3\">\n<label for=\"c-tab-3-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-3-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>tox -e py310-postgres -- --settings<span class=\"o\">=</span>my_postgres_settings\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-3-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> tox -e py310-postgres -- --settings=my_postgres_settings\n</pre></div>\n</section>\n</div>\n<p>This command sets up a Python 3.10 virtual environment, installs Django\u2019s\ntest suite dependencies (including those for PostgreSQL), and calls\n<code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code> with the supplied arguments (in this case,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--settings=my_postgres_settings</span></code>).</p>\n<p>The remainder of this documentation shows commands for running tests without\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code>, however, any option passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code> can also be passed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code> by prefixing the argument list with <code class=\"docutils literal notranslate\"><span class=\"pre\">--</span></code>, as above.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Tox</span></code> also respects the <span class=\"target\" id=\"index-0\"></span><a class=\"reference internal\" href=\"../../../../topics/settings/#envvar-DJANGO_SETTINGS_MODULE\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_SETTINGS_MODULE</span></code></a> environment\nvariable, if set. For example, the following is equivalent to the command\nabove:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nv\">DJANGO_SETTINGS_MODULE</span><span class=\"o\">=</span>my_postgres_settings tox -e py310-postgres\n</pre></div>\n</div>\n<p>Windows users should use:</p>\n<div class=\"highlight-doscon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> <span class=\"k\">set</span> <span class=\"nv\">DJANGO_SETTINGS_MODULE</span><span class=\"p\">=</span>my_postgres_settings\n<span class=\"gp\">...\\&gt;</span> tox -e py310-postgres\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-running-the-javascript-tests\">\n<span id=\"running-the-javascript-tests\"></span><h4>Running the JavaScript tests<a class=\"headerlink\" href=\"#running-the-javascript-tests\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Django includes a set of <a class=\"reference internal\" href=\"../javascript/#javascript-tests\"><span class=\"std std-ref\">JavaScript unit tests</span></a> for\nfunctions in certain contrib apps. The JavaScript tests aren\u2019t run by default\nusing <code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code> because they require <code class=\"docutils literal notranslate\"><span class=\"pre\">Node.js</span></code> to be installed and aren\u2019t\nnecessary for the majority of patches. To run the JavaScript tests using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code>:</p>\n<div class=\"console-block\" id=\"console-block-4\">\n<input class=\"c-tab-unix\" id=\"c-tab-4-unix\" type=\"radio\" name=\"console-4\" checked>\n<label for=\"c-tab-4-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-4-win\" type=\"radio\" name=\"console-4\">\n<label for=\"c-tab-4-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-4-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>tox -e javascript\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-4-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> tox -e javascript\n</pre></div>\n</section>\n</div>\n<p>This command runs <code class=\"docutils literal notranslate\"><span class=\"pre\">npm</span> <span class=\"pre\">install</span></code> to ensure test requirements are up to\ndate and then runs <code class=\"docutils literal notranslate\"><span class=\"pre\">npm</span> <span class=\"pre\">test</span></code>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-running-tests-using-django-docker-box\">\n<span id=\"running-tests-using-django-docker-box\"></span><h3>Running tests using <code class=\"docutils literal notranslate\"><span class=\"pre\">django-docker-box</span></code><a class=\"headerlink\" href=\"#running-tests-using-django-docker-box\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference external\" href=\"https://github.com/django/django-docker-box/\">django-docker-box</a> allows you to run the Django\u2019s test suite across all\nsupported databases and python versions. See the <a class=\"reference external\" href=\"https://github.com/django/django-docker-box/\">django-docker-box</a> project\npage for installation and usage instructions.</p>\n</div>\n<div class=\"section\" id=\"s-using-another-settings-module\">\n<span id=\"s-running-unit-tests-settings\"></span><span id=\"using-another-settings-module\"></span><span id=\"running-unit-tests-settings\"></span><h3>Using another <code class=\"docutils literal notranslate\"><span class=\"pre\">settings</span></code> module<a class=\"headerlink\" href=\"#using-another-settings-module\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The included settings module (<code class=\"docutils literal notranslate\"><span class=\"pre\">tests/test_sqlite.py</span></code>) allows you to run the\ntest suite using SQLite. If you want to run the tests using a different\ndatabase, you\u2019ll need to define your own settings file. Some tests, such as\nthose for <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.postgres</span></code>, are specific to a particular database backend\nand will be skipped if run with a different backend. Some tests are skipped or\nexpected failures on a particular database backend (see\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseFeatures.django_test_skips</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseFeatures.django_test_expected_failures</span></code> on each backend).</p>\n<p>To run the tests with different settings, ensure that the module is on your\n<span class=\"target\" id=\"index-1\"></span><a class=\"reference external\" href=\"https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH\" title=\"(in Python v3.11)\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">PYTHONPATH</span></code></a> and pass the module with <code class=\"docutils literal notranslate\"><span class=\"pre\">--settings</span></code>.</p>\n<p>The <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> setting in any test settings module needs to define\ntwo databases:</p>\n<ul class=\"simple\">\n<li>A <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> database. This database should use the backend that\nyou want to use for primary testing.</li>\n<li>A database with the alias <code class=\"docutils literal notranslate\"><span class=\"pre\">other</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">other</span></code> database is used to test\nthat queries can be directed to different databases. This database should use\nthe same backend as the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>, and it must have a different name.</li>\n</ul>\n<p>If you\u2019re using a backend that isn\u2019t SQLite, you will need to provide other\ndetails for each database:</p>\n<ul class=\"simple\">\n<li>The <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a> option needs to specify an existing user account\nfor the database. That user needs permission to execute <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">DATABASE</span></code>\nso that the test database can be created.</li>\n<li>The <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD</span></code></a> option needs to provide the password for\nthe <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a> that has been specified.</li>\n</ul>\n<p>Test databases get their names by prepending <code class=\"docutils literal notranslate\"><span class=\"pre\">test_</span></code> to the value of the\n<a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> settings for the databases defined in <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>.\nThese test databases are deleted when the tests are finished.</p>\n<p>You will also need to ensure that your database uses UTF-8 as the default\ncharacter set. If your database server doesn\u2019t use UTF-8 as a default charset,\nyou will need to include a value for <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-TEST_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CHARSET</span></code></a> in the\ntest settings dictionary for the applicable database.</p>\n</div>\n<div class=\"section\" id=\"s-running-only-some-of-the-tests\">\n<span id=\"s-runtests-specifying-labels\"></span><span id=\"running-only-some-of-the-tests\"></span><span id=\"runtests-specifying-labels\"></span><h3>Running only some of the tests<a class=\"headerlink\" href=\"#running-only-some-of-the-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s entire test suite takes a while to run, and running every single test\ncould be redundant if, say, you just added a test to Django that you want to\nrun quickly without running everything else. You can run a subset of the unit\ntests by appending the names of the test modules to <code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code> on the\ncommand line.</p>\n<p>For example, if you\u2019d like to run tests only for generic relations and\ninternationalization, type:</p>\n<div class=\"console-block\" id=\"console-block-5\">\n<input class=\"c-tab-unix\" id=\"c-tab-5-unix\" type=\"radio\" name=\"console-5\" checked>\n<label for=\"c-tab-5-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-5-win\" type=\"radio\" name=\"console-5\">\n<label for=\"c-tab-5-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-5-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --settings<span class=\"o\">=</span>path.to.settings generic_relations i18n\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-5-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --settings=path.to.settings generic_relations i18n\n</pre></div>\n</section>\n</div>\n<p>How do you find out the names of individual tests? Look in <code class=\"docutils literal notranslate\"><span class=\"pre\">tests/</span></code> \u2014 each\ndirectory name there is the name of a test.</p>\n<p>If you want to run only a particular class of tests, you can specify a list of\npaths to individual test classes. For example, to run the <code class=\"docutils literal notranslate\"><span class=\"pre\">TranslationTests</span></code>\nof the <code class=\"docutils literal notranslate\"><span class=\"pre\">i18n</span></code> module, type:</p>\n<div class=\"console-block\" id=\"console-block-6\">\n<input class=\"c-tab-unix\" id=\"c-tab-6-unix\" type=\"radio\" name=\"console-6\" checked>\n<label for=\"c-tab-6-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-6-win\" type=\"radio\" name=\"console-6\">\n<label for=\"c-tab-6-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-6-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --settings<span class=\"o\">=</span>path.to.settings i18n.tests.TranslationTests\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-6-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --settings=path.to.settings i18n.tests.TranslationTests\n</pre></div>\n</section>\n</div>\n<p>Going beyond that, you can specify an individual test method like this:</p>\n<div class=\"console-block\" id=\"console-block-7\">\n<input class=\"c-tab-unix\" id=\"c-tab-7-unix\" type=\"radio\" name=\"console-7\" checked>\n<label for=\"c-tab-7-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-7-win\" type=\"radio\" name=\"console-7\">\n<label for=\"c-tab-7-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-7-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --settings<span class=\"o\">=</span>path.to.settings i18n.tests.TranslationTests.test_lazy_objects\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-7-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --settings=path.to.settings i18n.tests.TranslationTests.test_lazy_objects\n</pre></div>\n</section>\n</div>\n<p>You can run tests starting at a specified top-level module with <code class=\"docutils literal notranslate\"><span class=\"pre\">--start-at</span></code>\noption. For example:</p>\n<div class=\"console-block\" id=\"console-block-8\">\n<input class=\"c-tab-unix\" id=\"c-tab-8-unix\" type=\"radio\" name=\"console-8\" checked>\n<label for=\"c-tab-8-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-8-win\" type=\"radio\" name=\"console-8\">\n<label for=\"c-tab-8-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-8-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --start-at<span class=\"o\">=</span>wsgi\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-8-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --start-at=wsgi\n</pre></div>\n</section>\n</div>\n<p>You can also run tests starting after a specified top-level module with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--start-after</span></code> option. For example:</p>\n<div class=\"console-block\" id=\"console-block-9\">\n<input class=\"c-tab-unix\" id=\"c-tab-9-unix\" type=\"radio\" name=\"console-9\" checked>\n<label for=\"c-tab-9-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-9-win\" type=\"radio\" name=\"console-9\">\n<label for=\"c-tab-9-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-9-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --start-after<span class=\"o\">=</span>wsgi\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-9-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --start-after=wsgi\n</pre></div>\n</section>\n</div>\n<p>Note that the <code class=\"docutils literal notranslate\"><span class=\"pre\">--reverse</span></code> option doesn\u2019t impact on <code class=\"docutils literal notranslate\"><span class=\"pre\">--start-at</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--start-after</span></code> options. Moreover these options cannot be used with test\nlabels.</p>\n</div>\n<div class=\"section\" id=\"s-running-the-selenium-tests\">\n<span id=\"running-the-selenium-tests\"></span><h3>Running the Selenium tests<a class=\"headerlink\" href=\"#running-the-selenium-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some tests require Selenium and a web browser. To run these tests, you must\ninstall the <a class=\"reference external\" href=\"https://pypi.org/project/selenium/\">selenium</a> package and run the tests with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">--selenium=&lt;BROWSERS&gt;</span></code> option. For example, if you have Firefox and Google\nChrome installed:</p>\n<div class=\"console-block\" id=\"console-block-10\">\n<input class=\"c-tab-unix\" id=\"c-tab-10-unix\" type=\"radio\" name=\"console-10\" checked>\n<label for=\"c-tab-10-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-10-win\" type=\"radio\" name=\"console-10\">\n<label for=\"c-tab-10-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-10-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --selenium<span class=\"o\">=</span>firefox,chrome\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-10-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --selenium=firefox,chrome\n</pre></div>\n</section>\n</div>\n<p>See the <a class=\"reference external\" href=\"https://github.com/SeleniumHQ/selenium/tree/trunk/py/selenium/webdriver\">selenium.webdriver</a> package for the list of available browsers.</p>\n<p>Specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">--selenium</span></code> automatically sets <code class=\"docutils literal notranslate\"><span class=\"pre\">--tags=selenium</span></code> to run only\nthe tests that require selenium.</p>\n<p>Some browsers (e.g. Chrome or Firefox) support headless testing, which can be\nfaster and more stable. Add the <code class=\"docutils literal notranslate\"><span class=\"pre\">--headless</span></code> option to enable this mode.</p>\n</div>\n<div class=\"section\" id=\"s-running-all-the-tests\">\n<span id=\"s-running-unit-tests-dependencies\"></span><span id=\"running-all-the-tests\"></span><span id=\"running-unit-tests-dependencies\"></span><h3>Running all the tests<a class=\"headerlink\" href=\"#running-all-the-tests\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you want to run the full suite of tests, you\u2019ll need to install a number of\ndependencies:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://pypi.org/project/aiosmtpd/\">aiosmtpd</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/argon2-cffi/\">argon2-cffi</a> 19.2.0+</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/asgiref/\">asgiref</a> 3.6.0+ (required)</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/bcrypt/\">bcrypt</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/colorama/\">colorama</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/docutils/\">docutils</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/geoip2/\">geoip2</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/Jinja2/\">Jinja2</a> 2.11+</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/numpy/\">numpy</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/Pillow/\">Pillow</a> 6.2.1+</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/PyYAML/\">PyYAML</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/pytz/\">pytz</a> (required)</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/pywatchman/\">pywatchman</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/redis/\">redis</a> 3.4+</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/setuptools/\">setuptools</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/python-memcached/\">python-memcached</a>, plus a <a class=\"reference external\" href=\"https://memcached.org/\">supported Python binding</a></li>\n<li><a class=\"reference external\" href=\"https://www.gnu.org/software/gettext/manual/gettext.html\">gettext</a>\n(<a class=\"reference internal\" href=\"../../../../topics/i18n/translation/#gettext-on-windows\"><span class=\"std std-ref\">gettext on Windows</span></a>)</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/selenium/\">selenium</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/sqlparse/\">sqlparse</a> 0.3.1+ (required)</li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/tblib/\">tblib</a> 1.5.0+</li>\n</ul>\n<p>You can find these dependencies in <a class=\"reference external\" href=\"https://pip.pypa.io/en/latest/user_guide/#requirements-files\">pip requirements files</a> inside the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">tests/requirements</span></code> directory of the Django source tree and install them\nlike so:</p>\n<div class=\"console-block\" id=\"console-block-11\">\n<input class=\"c-tab-unix\" id=\"c-tab-11-unix\" type=\"radio\" name=\"console-11\" checked>\n<label for=\"c-tab-11-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-11-win\" type=\"radio\" name=\"console-11\">\n<label for=\"c-tab-11-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-11-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install -r tests/requirements/py3.txt\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-11-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install -r tests\\requirements\\py3.txt\n</pre></div>\n</section>\n</div>\n<p>If you encounter an error during the installation, your system might be missing\na dependency for one or more of the Python packages. Consult the failing\npackage\u2019s documentation or search the web with the error message that you\nencounter.</p>\n<p>You can also install the database adapter(s) of your choice using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">oracle.txt</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">mysql.txt</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">postgres.txt</span></code>.</p>\n<p>If you want to test the memcached or Redis cache backends, you\u2019ll also need to\ndefine a <a class=\"reference internal\" href=\"../../../../ref/settings/#std-setting-CACHES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CACHES</span></code></a> setting that points at your memcached or Redis\ninstance respectively.</p>\n<p>To run the GeoDjango tests, you will need to <a class=\"reference internal\" href=\"../../../../ref/contrib/gis/install/\"><span class=\"doc\">set up a spatial database\nand install the Geospatial libraries</span></a>.</p>\n<p>Each of these dependencies is optional. If you\u2019re missing any of them, the\nassociated tests will be skipped.</p>\n<p>To run some of the autoreload tests, you\u2019ll need to install the\n<a class=\"reference external\" href=\"https://facebook.github.io/watchman/\">Watchman</a> service.</p>\n</div>\n<div class=\"section\" id=\"s-code-coverage\">\n<span id=\"code-coverage\"></span><h3>Code coverage<a class=\"headerlink\" href=\"#code-coverage\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Contributors are encouraged to run coverage on the test suite to identify areas\nthat need additional tests. The coverage tool installation and use is described\nin <a class=\"reference internal\" href=\"../../../../topics/testing/advanced/#topics-testing-code-coverage\"><span class=\"std std-ref\">testing code coverage</span></a>.</p>\n<p>To run coverage on the Django test suite using the standard test settings:</p>\n<div class=\"console-block\" id=\"console-block-12\">\n<input class=\"c-tab-unix\" id=\"c-tab-12-unix\" type=\"radio\" name=\"console-12\" checked>\n<label for=\"c-tab-12-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-12-win\" type=\"radio\" name=\"console-12\">\n<label for=\"c-tab-12-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-12-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>coverage run ./runtests.py --settings<span class=\"o\">=</span>test_sqlite\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-12-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> coverage run runtests.py --settings=test_sqlite\n</pre></div>\n</section>\n</div>\n<p>After running coverage, combine all coverage statistics by running:</p>\n<div class=\"console-block\" id=\"console-block-13\">\n<input class=\"c-tab-unix\" id=\"c-tab-13-unix\" type=\"radio\" name=\"console-13\" checked>\n<label for=\"c-tab-13-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-13-win\" type=\"radio\" name=\"console-13\">\n<label for=\"c-tab-13-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-13-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>coverage combine\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-13-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> coverage combine\n</pre></div>\n</section>\n</div>\n<p>After that generate the html report by running:</p>\n<div class=\"console-block\" id=\"console-block-14\">\n<input class=\"c-tab-unix\" id=\"c-tab-14-unix\" type=\"radio\" name=\"console-14\" checked>\n<label for=\"c-tab-14-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-14-win\" type=\"radio\" name=\"console-14\">\n<label for=\"c-tab-14-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-14-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>coverage html\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-14-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> coverage html\n</pre></div>\n</section>\n</div>\n<p>When running coverage for the Django tests, the included <code class=\"docutils literal notranslate\"><span class=\"pre\">.coveragerc</span></code>\nsettings file  defines <code class=\"docutils literal notranslate\"><span class=\"pre\">coverage_html</span></code> as the output directory for the report\nand also excludes several directories not relevant to the results\n(test code or external code included in Django).</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-contrib-apps\">\n<span id=\"s-id1\"></span><span id=\"contrib-apps\"></span><span id=\"id1\"></span><h2>Contrib apps<a class=\"headerlink\" href=\"#contrib-apps\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Tests for contrib apps can be found in the <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/tests/\">tests/</a> directory, typically\nunder <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;app_name&gt;_tests</span></code>. For example, tests for <code class=\"docutils literal notranslate\"><span class=\"pre\">contrib.auth</span></code> are located\nin <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/tests/auth_tests\">tests/auth_tests</a>.</p>\n</div>\n<div class=\"section\" id=\"s-troubleshooting\">\n<span id=\"s-troubleshooting-unit-tests\"></span><span id=\"troubleshooting\"></span><span id=\"troubleshooting-unit-tests\"></span><h2>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-test-suite-hangs-or-shows-failures-on-main-branch\">\n<span id=\"test-suite-hangs-or-shows-failures-on-main-branch\"></span><h3>Test suite hangs or shows failures on <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> branch<a class=\"headerlink\" href=\"#test-suite-hangs-or-shows-failures-on-main-branch\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Ensure you have the latest point release of a <a class=\"reference internal\" href=\"../../../../faq/install/#faq-python-version-support\"><span class=\"std std-ref\">supported Python version</span></a>, since there are often bugs in earlier versions\nthat may cause the test suite to fail or hang.</p>\n<p>On <strong>macOS</strong> (High Sierra and newer versions), you might see this message\nlogged, after which the tests hang:</p>\n<div class=\"highlight-pytb notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"x\">objc[42074]: +[__NSPlaceholderDate initialize] may have been in progress in</span>\n<span class=\"x\">another thread when fork() was called.</span>\n</pre></div>\n</div>\n<p>To avoid this set a <code class=\"docutils literal notranslate\"><span class=\"pre\">OBJC_DISABLE_INITIALIZE_FORK_SAFETY</span></code> environment\nvariable, for example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nv\">OBJC_DISABLE_INITIALIZE_FORK_SAFETY</span><span class=\"o\">=</span>YES ./runtests.py\n</pre></div>\n</div>\n<p>Or add <code class=\"docutils literal notranslate\"><span class=\"pre\">export</span> <span class=\"pre\">OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES</span></code> to your shell\u2019s\nstartup file (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">~/.profile</span></code>).</p>\n</div>\n<div class=\"section\" id=\"s-many-test-failures-with-unicodeencodeerror\">\n<span id=\"many-test-failures-with-unicodeencodeerror\"></span><h3>Many test failures with <code class=\"docutils literal notranslate\"><span class=\"pre\">UnicodeEncodeError</span></code><a class=\"headerlink\" href=\"#many-test-failures-with-unicodeencodeerror\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">locales</span></code> package is not installed, some tests will fail with a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">UnicodeEncodeError</span></code>.</p>\n<p>You can resolve this on Debian-based systems, for example, by running:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>apt-get install locales\n<span class=\"gp\">$ </span>dpkg-reconfigure locales\n</pre></div>\n</div>\n<p>You can resolve this for macOS systems by configuring your shell\u2019s locale:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">export</span> <span class=\"nv\">LANG</span><span class=\"o\">=</span><span class=\"s2\">&quot;en_US.UTF-8&quot;</span>\n<span class=\"gp\">$ </span><span class=\"nb\">export</span> <span class=\"nv\">LC_ALL</span><span class=\"o\">=</span><span class=\"s2\">&quot;en_US.UTF-8&quot;</span>\n</pre></div>\n</div>\n<p>Run the <code class=\"docutils literal notranslate\"><span class=\"pre\">locale</span></code> command to confirm the change. Optionally, add those export\ncommands to your shell\u2019s startup file (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">~/.bashrc</span></code> for Bash) to avoid\nhaving to retype them.</p>\n</div>\n<div class=\"section\" id=\"s-tests-that-only-fail-in-combination\">\n<span id=\"tests-that-only-fail-in-combination\"></span><h3>Tests that only fail in combination<a class=\"headerlink\" href=\"#tests-that-only-fail-in-combination\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In case a test passes when run in isolation but fails within the whole suite,\nwe have some tools to help analyze the problem.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--bisect</span></code> option of <code class=\"docutils literal notranslate\"><span class=\"pre\">runtests.py</span></code> will run the failing test while\nhalving the test set it is run together with on each iteration, often making\nit possible to identify a small number of tests that may be related to the\nfailure.</p>\n<p>For example, suppose that the failing test that works on its own is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelTest.test_eq</span></code>, then using:</p>\n<div class=\"console-block\" id=\"console-block-15\">\n<input class=\"c-tab-unix\" id=\"c-tab-15-unix\" type=\"radio\" name=\"console-15\" checked>\n<label for=\"c-tab-15-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-15-win\" type=\"radio\" name=\"console-15\">\n<label for=\"c-tab-15-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-15-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --bisect basic.tests.ModelTest.test_eq\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-15-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --bisect basic.tests.ModelTest.test_eq\n</pre></div>\n</section>\n</div>\n<p>will try to determine a test that interferes with the given one. First, the\ntest is run with the first half of the test suite. If a failure occurs, the\nfirst half of the test suite is split in two groups and each group is then run\nwith the specified test. If there is no failure with the first half of the test\nsuite, the second half of the test suite is run with the specified test and\nsplit appropriately as described earlier. The process repeats until the set of\nfailing tests is minimized.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">--pair</span></code> option runs the given test alongside every other test from the\nsuite, letting you check if another test has side-effects that cause the\nfailure. So:</p>\n<div class=\"console-block\" id=\"console-block-16\">\n<input class=\"c-tab-unix\" id=\"c-tab-16-unix\" type=\"radio\" name=\"console-16\" checked>\n<label for=\"c-tab-16-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-16-win\" type=\"radio\" name=\"console-16\">\n<label for=\"c-tab-16-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-16-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --pair basic.tests.ModelTest.test_eq\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-16-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --pair basic.tests.ModelTest.test_eq\n</pre></div>\n</section>\n</div>\n<p>will pair <code class=\"docutils literal notranslate\"><span class=\"pre\">test_eq</span></code> with every test label.</p>\n<p>With both <code class=\"docutils literal notranslate\"><span class=\"pre\">--bisect</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--pair</span></code>, if you already suspect which cases\nmight be responsible for the failure, you may limit tests to be cross-analyzed\nby <a class=\"reference internal\" href=\"#runtests-specifying-labels\"><span class=\"std std-ref\">specifying further test labels</span></a> after\nthe first one:</p>\n<div class=\"console-block\" id=\"console-block-17\">\n<input class=\"c-tab-unix\" id=\"c-tab-17-unix\" type=\"radio\" name=\"console-17\" checked>\n<label for=\"c-tab-17-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-17-win\" type=\"radio\" name=\"console-17\">\n<label for=\"c-tab-17-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-17-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py --pair basic.tests.ModelTest.test_eq queries transactions\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-17-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py --pair basic.tests.ModelTest.test_eq queries transactions\n</pre></div>\n</section>\n</div>\n<p>You can also try running any set of tests in a random or reverse order using\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">--shuffle</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">--reverse</span></code> options. This can help verify that\nexecuting tests in a different order does not cause any trouble:</p>\n<div class=\"console-block\" id=\"console-block-18\">\n<input class=\"c-tab-unix\" id=\"c-tab-18-unix\" type=\"radio\" name=\"console-18\" checked>\n<label for=\"c-tab-18-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-18-win\" type=\"radio\" name=\"console-18\">\n<label for=\"c-tab-18-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-18-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py basic --shuffle\n<span class=\"gp\">$ </span>./runtests.py basic --reverse\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-18-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py basic --shuffle\n<span class=\"gp\">...\\&gt;</span> runtests.py basic --reverse\n</pre></div>\n</section>\n</div>\n</div>\n<div class=\"section\" id=\"s-seeing-the-sql-queries-run-during-a-test\">\n<span id=\"seeing-the-sql-queries-run-during-a-test\"></span><h3>Seeing the SQL queries run during a test<a class=\"headerlink\" href=\"#seeing-the-sql-queries-run-during-a-test\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you wish to examine the SQL being run in failing tests, you can turn on\n<a class=\"reference internal\" href=\"../../../../ref/logging/#django-db-logger\"><span class=\"std std-ref\">SQL logging</span></a> using the <code class=\"docutils literal notranslate\"><span class=\"pre\">--debug-sql</span></code> option. If you\ncombine this with <code class=\"docutils literal notranslate\"><span class=\"pre\">--verbosity=2</span></code>, all SQL queries will be output:</p>\n<div class=\"console-block\" id=\"console-block-19\">\n<input class=\"c-tab-unix\" id=\"c-tab-19-unix\" type=\"radio\" name=\"console-19\" checked>\n<label for=\"c-tab-19-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-19-win\" type=\"radio\" name=\"console-19\">\n<label for=\"c-tab-19-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-19-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py basic --debug-sql\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-19-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py basic --debug-sql\n</pre></div>\n</section>\n</div>\n</div>\n<div class=\"section\" id=\"s-seeing-the-full-traceback-of-a-test-failure\">\n<span id=\"seeing-the-full-traceback-of-a-test-failure\"></span><h3>Seeing the full traceback of a test failure<a class=\"headerlink\" href=\"#seeing-the-full-traceback-of-a-test-failure\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default tests are run in parallel with one process per core. When the tests\nare run in parallel, however, you\u2019ll only see a truncated traceback for any\ntest failures. You can adjust this behavior with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--parallel</span></code> option:</p>\n<div class=\"console-block\" id=\"console-block-20\">\n<input class=\"c-tab-unix\" id=\"c-tab-20-unix\" type=\"radio\" name=\"console-20\" checked>\n<label for=\"c-tab-20-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-20-win\" type=\"radio\" name=\"console-20\">\n<label for=\"c-tab-20-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-20-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>./runtests.py basic --parallel<span class=\"o\">=</span><span class=\"m\">1</span>\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-20-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> runtests.py basic --parallel=1\n</pre></div>\n</section>\n</div>\n<p>You can also use the <span class=\"target\" id=\"index-2\"></span><a class=\"reference internal\" href=\"../../../../ref/django-admin/#envvar-DJANGO_TEST_PROCESSES\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_TEST_PROCESSES</span></code></a> environment variable for\nthis purpose.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-tips-for-writing-tests\">\n<span id=\"tips-for-writing-tests\"></span><h2>Tips for writing tests<a class=\"headerlink\" href=\"#tips-for-writing-tests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-isolating-model-registration\">\n<span id=\"isolating-model-registration\"></span><h3>Isolating model registration<a class=\"headerlink\" href=\"#isolating-model-registration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To avoid polluting the global <a class=\"reference internal\" href=\"../../../../ref/applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">apps</span></code></a> registry and prevent\nunnecessary table creation, models defined in a test method should be bound to\na temporary <code class=\"docutils literal notranslate\"><span class=\"pre\">Apps</span></code> instance. To do this, use the\n<a class=\"reference internal\" href=\"../../../../topics/testing/tools/#django.test.utils.isolate_apps\" title=\"django.test.utils.isolate_apps\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isolate_apps()</span></code></a> decorator:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleTestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">isolate_apps</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestModelDefinition</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@isolate_apps</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_model_definition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">class</span> <span class=\"nc\">TestModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<div class=\"admonition-setting-app-label admonition\">\n<p class=\"first admonition-title\">Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">app_label</span></code></p>\n<p>Models defined in a test method with no explicit\n<a class=\"reference internal\" href=\"../../../../ref/models/options/#django.db.models.Options.app_label\" title=\"django.db.models.Options.app_label\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">app_label</span></code></a> are automatically assigned the\nlabel of the app in which their test class is located.</p>\n<p>In order to make sure the models defined within the context of\n<a class=\"reference internal\" href=\"../../../../topics/testing/tools/#django.test.utils.isolate_apps\" title=\"django.test.utils.isolate_apps\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">isolate_apps()</span></code></a> instances are correctly\ninstalled, you should pass the set of targeted <code class=\"docutils literal notranslate\"><span class=\"pre\">app_label</span></code> as arguments:</p>\n<div class=\"literal-block-wrapper last docutils container\" id=\"id2\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">tests/app_label/tests.py</span></code></span><a class=\"headerlink\" href=\"#id2\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">SimpleTestCase</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test.utils</span> <span class=\"kn\">import</span> <span class=\"n\">isolate_apps</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestModelDefinition</span><span class=\"p\">(</span><span class=\"n\">SimpleTestCase</span><span class=\"p\">):</span>\n    <span class=\"nd\">@isolate_apps</span><span class=\"p\">(</span><span class=\"s2\">&quot;app_label&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;other_app_label&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_model_definition</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># This model automatically receives app_label=&#39;app_label&#39;</span>\n        <span class=\"k\">class</span> <span class=\"nc\">TestModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">class</span> <span class=\"nc\">OtherAppModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n            <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n                <span class=\"n\">app_label</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;other_app_label&quot;</span>\n\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/contributing/writing-code/submitting-patches", "Submitting patches", "N", "next"], ["internals/contributing/writing-code/coding-style", "Coding style", "P", "previous"]], "sourcename": "internals/contributing/writing-code/unit-tests.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Unit tests</a><ul>\n<li><a class=\"reference internal\" href=\"#running-the-unit-tests\">Running the unit tests</a><ul>\n<li><a class=\"reference internal\" href=\"#quickstart\">Quickstart</a></li>\n<li><a class=\"reference internal\" href=\"#running-tests-using-tox\">Running tests using <code class=\"docutils literal notranslate\"><span class=\"pre\">tox</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#testing-other-python-versions-and-database-backends\">Testing other Python versions and database backends</a></li>\n<li><a class=\"reference internal\" href=\"#running-the-javascript-tests\">Running the JavaScript tests</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#running-tests-using-django-docker-box\">Running tests using <code class=\"docutils literal notranslate\"><span class=\"pre\">django-docker-box</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-another-settings-module\">Using another <code class=\"docutils literal notranslate\"><span class=\"pre\">settings</span></code> module</a></li>\n<li><a class=\"reference internal\" href=\"#running-only-some-of-the-tests\">Running only some of the tests</a></li>\n<li><a class=\"reference internal\" href=\"#running-the-selenium-tests\">Running the Selenium tests</a></li>\n<li><a class=\"reference internal\" href=\"#running-all-the-tests\">Running all the tests</a></li>\n<li><a class=\"reference internal\" href=\"#code-coverage\">Code coverage</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#contrib-apps\">Contrib apps</a></li>\n<li><a class=\"reference internal\" href=\"#troubleshooting\">Troubleshooting</a><ul>\n<li><a class=\"reference internal\" href=\"#test-suite-hangs-or-shows-failures-on-main-branch\">Test suite hangs or shows failures on <code class=\"docutils literal notranslate\"><span class=\"pre\">main</span></code> branch</a></li>\n<li><a class=\"reference internal\" href=\"#many-test-failures-with-unicodeencodeerror\">Many test failures with <code class=\"docutils literal notranslate\"><span class=\"pre\">UnicodeEncodeError</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#tests-that-only-fail-in-combination\">Tests that only fail in combination</a></li>\n<li><a class=\"reference internal\" href=\"#seeing-the-sql-queries-run-during-a-test\">Seeing the SQL queries run during a test</a></li>\n<li><a class=\"reference internal\" href=\"#seeing-the-full-traceback-of-a-test-failure\">Seeing the full traceback of a test failure</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#tips-for-writing-tests\">Tips for writing tests</a><ul>\n<li><a class=\"reference internal\" href=\"#isolating-model-registration\">Isolating model registration</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/contributing/writing-code/unit-tests", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}