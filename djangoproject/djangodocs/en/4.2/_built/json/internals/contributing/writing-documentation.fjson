{"parents": [{"link": "../../", "title": "Django internals"}, {"link": "../", "title": "Contributing to Django"}], "prev": {"link": "../writing-code/javascript/", "title": "JavaScript"}, "next": {"link": "../localizing/", "title": "Localizing Django"}, "title": "Writing documentation", "meta": {}, "body": "<div class=\"section\" id=\"s-writing-documentation\">\n<span id=\"writing-documentation\"></span><h1>Writing documentation<a class=\"headerlink\" href=\"#writing-documentation\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We place high importance on the consistency and readability of documentation.\nAfter all, Django was created in a journalism environment! So we treat our\ndocumentation like we treat our code: we aim to improve it as often as\npossible.</p>\n<p>Documentation changes generally come in two forms:</p>\n<ul class=\"simple\">\n<li>General improvements: typo corrections, error fixes and better\nexplanations through clearer writing and more examples.</li>\n<li>New features: documentation of features that have been added to the\nframework since the last release.</li>\n</ul>\n<p>This section explains how writers can craft their documentation changes\nin the most useful and least error-prone ways.</p>\n<div class=\"section\" id=\"s-getting-the-raw-documentation\">\n<span id=\"getting-the-raw-documentation\"></span><h2>Getting the raw documentation<a class=\"headerlink\" href=\"#getting-the-raw-documentation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Though Django\u2019s documentation is intended to be read as HTML at\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/\">https://docs.djangoproject.com/</a>, we edit it as a collection of text files for\nmaximum flexibility. These files live in the top-level <a class=\"reference external\" href=\"https://github.com/django/django/blob/main/docs/\">docs/</a> directory of a\nDjango release.</p>\n<p>If you\u2019d like to start contributing to our docs, get the development version of\nDjango from the source code repository\n(see <a class=\"reference internal\" href=\"../../../topics/install/#installing-development-version\"><span class=\"std std-ref\">Installing the development version</span></a>). The development version has the\nlatest-and-greatest documentation, just as it has the latest-and-greatest code.\nWe also backport documentation fixes and improvements, at the discretion of the\nmerger, to the last release branch. That\u2019s because it\u2019s highly advantageous to\nhave the docs for the last release be up-to-date and correct (see\n<a class=\"reference internal\" href=\"../../../intro/whatsnext/#differences-between-doc-versions\"><span class=\"std std-ref\">Differences between versions</span></a>).</p>\n</div>\n<div class=\"section\" id=\"s-getting-started-with-sphinx\">\n<span id=\"getting-started-with-sphinx\"></span><h2>Getting started with Sphinx<a class=\"headerlink\" href=\"#getting-started-with-sphinx\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django\u2019s documentation uses the <a class=\"reference external\" href=\"https://www.sphinx-doc.org/\">Sphinx</a> documentation system, which in turn\nis based on <a class=\"reference external\" href=\"https://docutils.sourceforge.io/\">docutils</a>. The basic idea is that lightly-formatted plain-text\ndocumentation is transformed into HTML, PDF, and any other output format.</p>\n<p>To build the documentation locally, install Sphinx:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python -m pip install Sphinx\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py -m pip install Sphinx\n</pre></div>\n</section>\n</div>\n<p>Then from the <code class=\"docutils literal notranslate\"><span class=\"pre\">docs</span></code> directory, build the HTML:</p>\n<div class=\"console-block\" id=\"console-block-1\">\n<input class=\"c-tab-unix\" id=\"c-tab-1-unix\" type=\"radio\" name=\"console-1\" checked>\n<label for=\"c-tab-1-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-1-win\" type=\"radio\" name=\"console-1\">\n<label for=\"c-tab-1-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-1-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>make html\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-1-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> make.bat html\n</pre></div>\n</section>\n</div>\n<p>To get started contributing, you\u2019ll want to read the <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html#rst-index\" title=\"(in Sphinx v7.1.0)\"><span class=\"xref std std-ref\">reStructuredText\nreference</span></a>.</p>\n<p>Your locally-built documentation will be accessible at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/_build/html/index.html</span></code> and it can be viewed in any web browser, though\nit will be themed differently than the documentation at\n<a class=\"reference external\" href=\"https://docs.djangoproject.com/\">docs.djangoproject.com</a>. This is OK! If\nyour changes look good on your local machine, they\u2019ll look good on the website.</p>\n</div>\n<div class=\"section\" id=\"s-how-the-documentation-is-organized\">\n<span id=\"how-the-documentation-is-organized\"></span><h2>How the documentation is organized<a class=\"headerlink\" href=\"#how-the-documentation-is-organized\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The documentation is organized into several categories:</p>\n<ul>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../../intro/\"><span class=\"doc\">Tutorials</span></a> take the reader by the hand through a series\nof steps to create something.</p>\n<p>The important thing in a tutorial is to help the reader achieve something\nuseful, preferably as early as possible, in order to give them confidence.</p>\n<p>Explain the nature of the problem we\u2019re solving, so that the reader\nunderstands what we\u2019re trying to achieve. Don\u2019t feel that you need to begin\nwith explanations of how things work - what matters is what the reader does,\nnot what you explain. It can be helpful to refer back to what you\u2019ve done and\nexplain afterward.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../../topics/\"><span class=\"doc\">Topic guides</span></a> aim to explain a concept or subject at a\nfairly high level.</p>\n<p>Link to reference material rather than repeat it. Use examples and don\u2019t be\nreluctant to explain things that seem very basic to you - it might be the\nexplanation someone else needs.</p>\n<p>Providing background context helps a newcomer connect the topic to things\nthat they already know.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../../ref/\"><span class=\"doc\">Reference guides</span></a> contain technical references for APIs.\nThey describe the functioning of Django\u2019s internal machinery and instruct in\nits use.</p>\n<p>Keep reference material tightly focused on the subject. Assume that the\nreader already understands the basic concepts involved but needs to know or\nbe reminded of how Django does it.</p>\n<p>Reference guides aren\u2019t the place for general explanation. If you find\nyourself explaining basic concepts, you may want to move that material to a\ntopic guide.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../../../howto/\"><span class=\"doc\">How-to guides</span></a> are recipes that take the reader through\nsteps in key subjects.</p>\n<p>What matters most in a how-to guide is what a user wants to achieve.\nA how-to should always be result-oriented rather than focused on internal\ndetails of how Django implements whatever is being discussed.</p>\n<p>These guides are more advanced than tutorials and assume some knowledge about\nhow Django works. Assume that the reader has followed the tutorials and don\u2019t\nhesitate to refer the reader back to the appropriate tutorial rather than\nrepeat the same material.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-writing-style\">\n<span id=\"writing-style\"></span><h2>Writing style<a class=\"headerlink\" href=\"#writing-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>When using pronouns in reference to a hypothetical person, such as \u201ca user with\na session cookie\u201d, gender-neutral pronouns (they/their/them) should be used.\nInstead of:</p>\n<ul class=\"simple\">\n<li>he or she\u2026 use they.</li>\n<li>him or her\u2026 use them.</li>\n<li>his or her\u2026 use their.</li>\n<li>his or hers\u2026 use theirs.</li>\n<li>himself or herself\u2026 use themselves.</li>\n</ul>\n<p>Try to avoid using words that minimize the difficulty involved in a task or\noperation, such as \u201ceasily\u201d, \u201csimply\u201d, \u201cjust\u201d, \u201cmerely\u201d, \u201cstraightforward\u201d, and\nso on. People\u2019s experience may not match your expectations, and they may become\nfrustrated when they do not find a step as \u201cstraightforward\u201d or \u201csimple\u201d as it\nis implied to be.</p>\n</div>\n<div class=\"section\" id=\"s-commonly-used-terms\">\n<span id=\"commonly-used-terms\"></span><h2>Commonly used terms<a class=\"headerlink\" href=\"#commonly-used-terms\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Here are some style guidelines on commonly used terms throughout the\ndocumentation:</p>\n<ul class=\"simple\">\n<li><strong>Django</strong> \u2013 when referring to the framework, capitalize Django. It is\nlowercase only in Python code and in the djangoproject.com logo.</li>\n<li><strong>email</strong> \u2013 no hyphen.</li>\n<li><strong>HTTP</strong> \u2013 the expected pronunciation is \u201cAitch Tee Tee Pee\u201d and therefore\nshould be preceded by \u201can\u201d and not \u201ca\u201d.</li>\n<li><strong>MySQL</strong>, <strong>PostgreSQL</strong>, <strong>SQLite</strong></li>\n<li><strong>SQL</strong> \u2013 when referring to SQL, the expected pronunciation should be\n\u201cEss Queue Ell\u201d and not \u201csequel\u201d. Thus in a phrase like \u201cReturns an\nSQL expression\u201d, \u201cSQL\u201d should be preceded by \u201can\u201d and not \u201ca\u201d.</li>\n<li><strong>Python</strong> \u2013 when referring to the language, capitalize Python.</li>\n<li><strong>realize</strong>, <strong>customize</strong>, <strong>initialize</strong>, etc. \u2013 use the American\n\u201cize\u201d suffix, not \u201cise.\u201d</li>\n<li><strong>subclass</strong> \u2013 it\u2019s a single word without a hyphen, both as a verb\n(\u201csubclass that model\u201d) and as a noun (\u201ccreate a subclass\u201d).</li>\n<li><strong>the web</strong>, <strong>web framework</strong> \u2013 it\u2019s not capitalized.</li>\n<li><strong>website</strong> \u2013 use one word, without capitalization.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-django-specific-terminology\">\n<span id=\"django-specific-terminology\"></span><h2>Django-specific terminology<a class=\"headerlink\" href=\"#django-specific-terminology\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<ul class=\"simple\">\n<li><strong>model</strong> \u2013 it\u2019s not capitalized.</li>\n<li><strong>template</strong> \u2013 it\u2019s not capitalized.</li>\n<li><strong>URLconf</strong> \u2013 use three capitalized letters, with no space before\n\u201cconf.\u201d</li>\n<li><strong>view</strong> \u2013 it\u2019s not capitalized.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-guidelines-for-restructuredtext-files\">\n<span id=\"guidelines-for-restructuredtext-files\"></span><h2>Guidelines for reStructuredText files<a class=\"headerlink\" href=\"#guidelines-for-restructuredtext-files\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>These guidelines regulate the format of our reST (reStructuredText)\ndocumentation:</p>\n<ul>\n<li><p class=\"first\">In section titles, capitalize only initial words and proper nouns.</p>\n</li>\n<li><p class=\"first\">Wrap the documentation at 80 characters wide, unless a code example\nis significantly less readable when split over two lines, or for another\ngood reason.</p>\n</li>\n<li><p class=\"first\">The main thing to keep in mind as you write and edit docs is that the\nmore semantic markup you can add the better. So:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span>Add <span class=\"s\">``django.contrib.auth``</span> to your <span class=\"s\">``INSTALLED_APPS``</span>...\n</pre></div>\n</div>\n<p>Isn\u2019t nearly as helpful as:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span>Add <span class=\"na\">:mod:</span><span class=\"nv\">`django.contrib.auth`</span> to your <span class=\"na\">:setting:</span><span class=\"nv\">`INSTALLED_APPS`</span>...\n</pre></div>\n</div>\n<p>This is because Sphinx will generate proper links for the latter, which\ngreatly helps readers.</p>\n<p>You can prefix the target with a <code class=\"docutils literal notranslate\"><span class=\"pre\">~</span></code> (that\u2019s a tilde) to get only the\n\u201clast bit\u201d of that path. So <code class=\"docutils literal notranslate\"><span class=\"pre\">:mod:`~django.contrib.auth`</span></code> will\ndisplay a link with the title \u201cauth\u201d.</p>\n</li>\n<li><p class=\"first\">All Python code blocks should be formatted using the <a class=\"reference external\" href=\"https://pypi.org/project/blacken-docs/\">blacken-docs</a>\nauto-formatter. This will be run by <code class=\"docutils literal notranslate\"><span class=\"pre\">pre-commit</span></code> if that is configured.</p>\n</li>\n<li><p class=\"first\">Use <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/extensions/intersphinx.html#module-sphinx.ext.intersphinx\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">intersphinx</span></code></a> to reference Python\u2019s and Sphinx\u2019\ndocumentation.</p>\n</li>\n<li><p class=\"first\">Add <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">code-block::</span> <span class=\"pre\">&lt;lang&gt;</span></code> to literal blocks so that they get\nhighlighted. Prefer relying on automatic highlighting using <code class=\"docutils literal notranslate\"><span class=\"pre\">::</span></code>\n(two colons). This has the benefit that if the code contains some invalid\nsyntax, it won\u2019t be highlighted. Adding <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">code-block::</span> <span class=\"pre\">python</span></code>, for\nexample, will force highlighting despite invalid syntax.</p>\n</li>\n<li><p class=\"first\">To improve readability, use <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">admonition::</span> <span class=\"pre\">Descriptive</span> <span class=\"pre\">title</span></code> rather than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">note::</span></code>. Use these boxes sparingly.</p>\n</li>\n<li><p class=\"first\">Use these heading styles:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">===</span>\n<span class=\"gh\">One</span>\n<span class=\"gh\">===</span>\n\n<span class=\"gh\">Two</span>\n<span class=\"gh\">===</span>\n\n<span class=\"gh\">Three</span>\n<span class=\"gh\">-----</span>\n\n<span class=\"gh\">Four</span>\n<span class=\"gh\">~~~~</span>\n\n<span class=\"gh\">Five</span>\n<span class=\"gh\">^^^^</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Use <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-rfc\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-role docutils literal notranslate\"><span class=\"pre\">:rfc:</span></code></a> to reference RFC and try to link to the relevant\nsection if possible. For example, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:rfc:`2324#section-2.3.2`</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">:rfc:`Custom</span> <span class=\"pre\">link</span> <span class=\"pre\">text</span> <span class=\"pre\">&lt;2324#section-2.3.2&gt;`</span></code>.</p>\n</li>\n<li><p class=\"first\">Use <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-pep\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-role docutils literal notranslate\"><span class=\"pre\">:pep:</span></code></a> to reference a Python Enhancement Proposal (PEP)\nand try to link to the relevant section if possible. For example, use\n<code class=\"docutils literal notranslate\"><span class=\"pre\">:pep:`20#easter-egg`</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">:pep:`Easter</span> <span class=\"pre\">Egg</span> <span class=\"pre\">&lt;20#easter-egg&gt;`</span></code>.</p>\n</li>\n<li><p class=\"first\">Use <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-mimetype\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-role docutils literal notranslate\"><span class=\"pre\">:mimetype:</span></code></a> to refer to a MIME Type unless the value\nis quoted for a code example.</p>\n</li>\n<li><p class=\"first\">Use <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-envvar\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-role docutils literal notranslate\"><span class=\"pre\">:envvar:</span></code></a> to refer to an environment variable. You may\nalso need to define a reference to the documentation for that environment\nvariable using <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/domains.html#directive-envvar\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-dir docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">envvar::</span></code></a>.</p>\n</li>\n</ul>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>All Python code blocks in the Django documentation were reformatted with\n<a class=\"reference external\" href=\"https://pypi.org/project/blacken-docs/\">blacken-docs</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-django-specific-markup\">\n<span id=\"django-specific-markup\"></span><h2>Django-specific markup<a class=\"headerlink\" href=\"#django-specific-markup\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Besides <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/index.html#rst-index\" title=\"(in Sphinx v7.1.0)\"><span class=\"xref std std-ref\">Sphinx\u2019s built-in markup</span></a>, Django\u2019s docs\ndefine some extra description units:</p>\n<ul>\n<li><p class=\"first\">Settings:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">setting</span><span class=\"p\">::</span> INSTALLED_APPS\n</pre></div>\n</div>\n<p>To link to a setting, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:setting:`INSTALLED_APPS`</span></code>.</p>\n</li>\n<li><p class=\"first\">Template tags:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">templatetag</span><span class=\"p\">::</span> regroup\n</pre></div>\n</div>\n<p>To link, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:ttag:`regroup`</span></code>.</p>\n</li>\n<li><p class=\"first\">Template filters:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">templatefilter</span><span class=\"p\">::</span> linebreaksbr\n</pre></div>\n</div>\n<p>To link, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:tfilter:`linebreaksbr`</span></code>.</p>\n</li>\n<li><p class=\"first\">Field lookups (i.e. <code class=\"docutils literal notranslate\"><span class=\"pre\">Foo.objects.filter(bar__exact=whatever)</span></code>):</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">fieldlookup</span><span class=\"p\">::</span> exact\n</pre></div>\n</div>\n<p>To link, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:lookup:`exact`</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> commands:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">django-admin</span><span class=\"p\">::</span> migrate\n</pre></div>\n</div>\n<p>To link, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:djadmin:`migrate`</span></code>.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> command-line options:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">django-admin-option</span><span class=\"p\">::</span> --traceback\n</pre></div>\n</div>\n<p>To link, use <code class=\"docutils literal notranslate\"><span class=\"pre\">:option:`command_name</span> <span class=\"pre\">--traceback`</span></code> (or omit <code class=\"docutils literal notranslate\"><span class=\"pre\">command_name</span></code>\nfor the options shared by all commands like <code class=\"docutils literal notranslate\"><span class=\"pre\">--verbosity</span></code>).</p>\n</li>\n<li><p class=\"first\">Links to Trac tickets (typically reserved for patch release notes):</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"na\">:ticket:</span><span class=\"nv\">`12345`</span>\n</pre></div>\n</div>\n</li>\n</ul>\n<p>Django\u2019s documentation uses a custom <code class=\"docutils literal notranslate\"><span class=\"pre\">console</span></code> directive for documenting\ncommand-line examples involving <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span></code>,\netc.). In the HTML documentation, it renders a two-tab UI, with one tab showing\na Unix-style command prompt and a second tab showing a Windows prompt.</p>\n<p>For example, you can replace this fragment:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span>use this command:\n\n<span class=\"p\">..</span> <span class=\"ow\">code-block</span><span class=\"p\">::</span> console\n\n    $ python manage.py shell\n</pre></div>\n</div>\n<p>with this one:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span>use this command:\n\n<span class=\"p\">..</span> <span class=\"ow\">console</span><span class=\"p\">::</span>\n\n    $ python manage.py shell\n</pre></div>\n</div>\n<p>Notice two things:</p>\n<ul class=\"simple\">\n<li>You usually will replace occurrences of the <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">code-block::</span> <span class=\"pre\">console</span></code>\ndirective.</li>\n<li>You don\u2019t need to change the actual content of the code example. You still\nwrite it assuming a Unix-y environment (i.e. a <code class=\"docutils literal notranslate\"><span class=\"pre\">'$'</span></code> prompt symbol,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'/'</span></code> as filesystem path components separator, etc.)</li>\n</ul>\n<p>The example above will render a code example block with two tabs. The first\none will show:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span>python manage.py shell\n</pre></div>\n</div>\n<p>(No changes from what <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">code-block::</span> <span class=\"pre\">console</span></code> would have rendered).</p>\n<p>The second one will show:</p>\n<div class=\"highlight-doscon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> py manage.py shell\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-documenting-new-features\">\n<span id=\"s-id3\"></span><span id=\"documenting-new-features\"></span><span id=\"id3\"></span><h2>Documenting new features<a class=\"headerlink\" href=\"#documenting-new-features\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Our policy for new features is:</p>\n<blockquote>\n<div>All documentation of new features should be written in a way that\nclearly designates the features that are only available in the Django\ndevelopment version. Assume documentation readers are using the latest\nrelease, not the development version.</div></blockquote>\n<p>Our preferred way for marking new features is by prefacing the features\u2019\ndocumentation with: \u201c<code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionadded::</span> <span class=\"pre\">X.Y</span></code>\u201d, followed by a mandatory\nblank line and an optional description (indented).</p>\n<p>General improvements or other changes to the APIs that should be emphasized\nshould use the \u201c<code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionchanged::</span> <span class=\"pre\">X.Y</span></code>\u201d directive (with the same format\nas the <code class=\"docutils literal notranslate\"><span class=\"pre\">versionadded</span></code> mentioned above.</p>\n<p>These <code class=\"docutils literal notranslate\"><span class=\"pre\">versionadded</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">versionchanged</span></code> blocks should be \u201cself-contained.\u201d\nIn other words, since we only keep these annotations around for two releases,\nit\u2019s nice to be able to remove the annotation and its contents without having\nto reflow, reindent, or edit the surrounding text. For example, instead of\nputting the entire description of a new or changed feature in a block, do\nsomething like this:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">class</span><span class=\"p\">::</span> Author(first_name, last_name, middle_name=None)\n\n    A person who writes books.\n\n    <span class=\"s\">``first_name``</span> is ...\n\n<span class=\"cp\">    ...</span>\n\n<span class=\"cp\">    ``middle_name`` is ...</span>\n\n<span class=\"cp\">    .. versionchanged:: A.B</span>\n\n<span class=\"cp\">        The ``middle_name`` argument was added.</span>\n</pre></div>\n</div>\n<p>Put the changed annotation notes at the bottom of a section, not the top.</p>\n<p>Also, avoid referring to a specific version of Django outside a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">versionadded</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">versionchanged</span></code> block. Even inside a block, it\u2019s often\nredundant to do so as these annotations render as \u201cNew in Django A.B:\u201d and\n\u201cChanged in Django A.B\u201d, respectively.</p>\n<p>If a function, attribute, etc. is added, it\u2019s also okay to use a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">versionadded</span></code> annotation like this:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">attribute</span><span class=\"p\">::</span> Author.middle_name\n\n<span class=\"p\">    ..</span> <span class=\"ow\">versionadded</span><span class=\"p\">::</span> A.B\n\n    An author&#39;s middle name.\n</pre></div>\n</div>\n<p>We can remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionadded::</span> <span class=\"pre\">A.B</span></code> annotation without any indentation\nchanges when the time comes.</p>\n</div>\n<div class=\"section\" id=\"s-minimizing-images\">\n<span id=\"minimizing-images\"></span><h2>Minimizing images<a class=\"headerlink\" href=\"#minimizing-images\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Optimize image compression where possible. For PNG files, use OptiPNG and\nAdvanceCOMP\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">advpng</span></code>:</p>\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"nb\">cd</span> docs\n<span class=\"gp\">$ </span>optipng -o7 -zm1-9 -i0 -strip all <span class=\"sb\">`</span>find . -type f -not -path <span class=\"s2\">&quot;./_build/*&quot;</span> -name <span class=\"s2\">&quot;*.png&quot;</span><span class=\"sb\">`</span>\n<span class=\"gp\">$ </span>advpng -z4 <span class=\"sb\">`</span>find . -type f -not -path <span class=\"s2\">&quot;./_build/*&quot;</span> -name <span class=\"s2\">&quot;*.png&quot;</span><span class=\"sb\">`</span>\n</pre></div>\n</div>\n<p>This is based on OptiPNG version 0.7.5. Older versions may complain about the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">-strip</span> <span class=\"pre\">all</span></code> option being lossy.</p>\n</div>\n<div class=\"section\" id=\"s-an-example\">\n<span id=\"an-example\"></span><h2>An example<a class=\"headerlink\" href=\"#an-example\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For a quick example of how it all fits together, consider this hypothetical\nexample:</p>\n<ul>\n<li><p class=\"first\">First, the <code class=\"docutils literal notranslate\"><span class=\"pre\">ref/settings.txt</span></code> document could have an overall layout\nlike this:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gh\">========</span>\n<span class=\"gh\">Settings</span>\n<span class=\"gh\">========</span>\n\n<span class=\"cp\">...</span>\n\n<span class=\"p\">..</span> <span class=\"nt\">_available-settings:</span>\n\n<span class=\"gh\">Available settings</span>\n<span class=\"gh\">==================</span>\n\n<span class=\"cp\">...</span>\n\n<span class=\"p\">..</span> <span class=\"nt\">_deprecated-settings:</span>\n\n<span class=\"gh\">Deprecated settings</span>\n<span class=\"gh\">===================</span>\n\n<span class=\"cp\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Next, the <code class=\"docutils literal notranslate\"><span class=\"pre\">topics/settings.txt</span></code> document could contain something like\nthis:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span>You can access a :ref:`listing of all available settings\n<span class=\"nt\">&lt;available-settings&gt;</span>`. For a list of deprecated settings see\n<span class=\"na\">:ref:</span><span class=\"nv\">`deprecated-settings`</span>.\n\nYou can find both in the :doc:`settings reference document\n<span class=\"nt\">&lt;/ref/settings&gt;</span>`.\n</pre></div>\n</div>\n<p>We use the Sphinx <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-doc\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-role docutils literal notranslate\"><span class=\"pre\">doc</span></code></a> cross-reference element when we want to\nlink to another document as a whole and the <a class=\"reference external\" href=\"https://www.sphinx-doc.org/en/master/usage/restructuredtext/roles.html#role-ref\" title=\"(in Sphinx v7.1.0)\"><code class=\"xref rst rst-role docutils literal notranslate\"><span class=\"pre\">ref</span></code></a> element when\nwe want to link to an arbitrary location in a document.</p>\n</li>\n<li><p class=\"first\">Next, notice how the settings are annotated:</p>\n<div class=\"highlight-rst notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"p\">..</span> <span class=\"ow\">setting</span><span class=\"p\">::</span> ADMINS\n\n<span class=\"gh\">ADMINS</span>\n<span class=\"gh\">======</span>\n\nDefault: <span class=\"s\">``[]``</span> (Empty list)\n\nA list of all the people who get code error notifications. When\n<span class=\"s\">``DEBUG=False``</span> and a view raises an exception, Django will email these people\nwith the full exception information. Each member of the list should be a tuple\nof (Full name, email address). Example<span class=\"se\">::</span>\n\n<span class=\"s\">    [(&quot;John&quot;, &quot;john@example.com&quot;), (&quot;Mary&quot;, &quot;mary@example.com&quot;)]</span>\n\nNote that Django will email <span class=\"ge\">*all*</span> of these people whenever an error happens.\nSee <span class=\"na\">:doc:</span><span class=\"nv\">`/howto/error-reporting`</span> for more information.\n</pre></div>\n</div>\n<p>This marks up the following header as the \u201ccanonical\u201d target for the\nsetting <code class=\"docutils literal notranslate\"><span class=\"pre\">ADMINS</span></code>. This means any time I talk about <code class=\"docutils literal notranslate\"><span class=\"pre\">ADMINS</span></code>,\nI can reference it using <code class=\"docutils literal notranslate\"><span class=\"pre\">:setting:`ADMINS`</span></code>.</p>\n</li>\n</ul>\n<p>That\u2019s basically how everything fits together.</p>\n</div>\n<div class=\"section\" id=\"s-spelling-check\">\n<span id=\"s-documentation-spelling-check\"></span><span id=\"spelling-check\"></span><span id=\"documentation-spelling-check\"></span><h2>Spelling check<a class=\"headerlink\" href=\"#spelling-check\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Before you commit your docs, it\u2019s a good idea to run the spelling checker.\nYou\u2019ll need to install <a class=\"reference external\" href=\"https://pypi.org/project/sphinxcontrib-spelling/\">sphinxcontrib-spelling</a> first. Then from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs</span></code> directory, run <code class=\"docutils literal notranslate\"><span class=\"pre\">make</span> <span class=\"pre\">spelling</span></code>. Wrong words (if any) along with the\nfile and line number where they occur will be saved to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">_build/spelling/output.txt</span></code>.</p>\n<p>If you encounter false-positives (error output that actually is correct), do\none of the following:</p>\n<ul class=\"simple\">\n<li>Surround inline code or brand/technology names with grave accents (`).</li>\n<li>Find synonyms that the spell checker recognizes.</li>\n<li>If, and only if, you are sure the word you are using is correct - add it\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">docs/spelling_wordlist</span></code> (please keep the list in alphabetical order).</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-link-check\">\n<span id=\"s-documentation-link-check\"></span><span id=\"link-check\"></span><span id=\"documentation-link-check\"></span><h2>Link check<a class=\"headerlink\" href=\"#link-check\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Links in documentation can become broken or changed such that they are no\nlonger the canonical link. Sphinx provides a builder that can check whether the\nlinks in the documentation are working. From the <code class=\"docutils literal notranslate\"><span class=\"pre\">docs</span></code> directory, run <code class=\"docutils literal notranslate\"><span class=\"pre\">make</span>\n<span class=\"pre\">linkcheck</span></code>. Output is printed to the terminal, but can also be found in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">_build/linkcheck/output.txt</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">_build/linkcheck/output.json</span></code>.</p>\n<p>Entries that have a status of \u201cworking\u201d are fine, those that are \u201cunchecked\u201d or\n\u201cignored\u201d have been skipped because they either cannot be checked or have\nmatched ignore rules in the configuration.</p>\n<p>Entries that have a status of \u201cbroken\u201d need to be fixed. Those that have a\nstatus of \u201credirected\u201d may need to be updated to point to the canonical\nlocation, e.g. the scheme has changed <code class=\"docutils literal notranslate\"><span class=\"pre\">http://</span></code> \u2192 <code class=\"docutils literal notranslate\"><span class=\"pre\">https://</span></code>. In certain\ncases, we do not want to update a \u201credirected\u201d link, e.g. a rewrite to always\npoint to the latest or stable version of the documentation, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">/en/stable/</span></code> \u2192\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/en/3.2/</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-translating-documentation\">\n<span id=\"translating-documentation\"></span><h2>Translating documentation<a class=\"headerlink\" href=\"#translating-documentation\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>See <a class=\"reference internal\" href=\"../localizing/#translating-documentation\"><span class=\"std std-ref\">Localizing the Django documentation</span></a> if\nyou\u2019d like to help translate the documentation into another language.</p>\n</div>\n<div class=\"section\" id=\"s-django-admin-man-page\">\n<span id=\"s-django-admin-manpage\"></span><span id=\"django-admin-man-page\"></span><span id=\"django-admin-manpage\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> man page<a class=\"headerlink\" href=\"#django-admin-man-page\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Sphinx can generate a manual page for the\n<a class=\"reference internal\" href=\"../../../ref/django-admin/\"><span class=\"doc\">django-admin</span></a> command. This is configured in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/conf.py</span></code>. Unlike other documentation output, this man page should be\nincluded in the Django repository and the releases as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/man/django-admin.1</span></code>. There isn\u2019t a need to update this file when\nupdating the documentation, as it\u2019s updated once as part of the release process.</p>\n<p>To generate an updated version of the man page, run <code class=\"docutils literal notranslate\"><span class=\"pre\">make</span> <span class=\"pre\">man</span></code> in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs</span></code> directory. The new man page will be written in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/_build/man/django-admin.1</span></code>.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/contributing/localizing", "Localizing Django", "N", "next"], ["internals/contributing/writing-code/javascript", "JavaScript", "P", "previous"]], "sourcename": "internals/contributing/writing-documentation.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Writing documentation</a><ul>\n<li><a class=\"reference internal\" href=\"#getting-the-raw-documentation\">Getting the raw documentation</a></li>\n<li><a class=\"reference internal\" href=\"#getting-started-with-sphinx\">Getting started with Sphinx</a></li>\n<li><a class=\"reference internal\" href=\"#how-the-documentation-is-organized\">How the documentation is organized</a></li>\n<li><a class=\"reference internal\" href=\"#writing-style\">Writing style</a></li>\n<li><a class=\"reference internal\" href=\"#commonly-used-terms\">Commonly used terms</a></li>\n<li><a class=\"reference internal\" href=\"#django-specific-terminology\">Django-specific terminology</a></li>\n<li><a class=\"reference internal\" href=\"#guidelines-for-restructuredtext-files\">Guidelines for reStructuredText files</a></li>\n<li><a class=\"reference internal\" href=\"#django-specific-markup\">Django-specific markup</a></li>\n<li><a class=\"reference internal\" href=\"#documenting-new-features\">Documenting new features</a></li>\n<li><a class=\"reference internal\" href=\"#minimizing-images\">Minimizing images</a></li>\n<li><a class=\"reference internal\" href=\"#an-example\">An example</a></li>\n<li><a class=\"reference internal\" href=\"#spelling-check\">Spelling check</a></li>\n<li><a class=\"reference internal\" href=\"#link-check\">Link check</a></li>\n<li><a class=\"reference internal\" href=\"#translating-documentation\">Translating documentation</a></li>\n<li><a class=\"reference internal\" href=\"#django-admin-man-page\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> man page</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/contributing/writing-documentation", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
