{"parents": [{"link": "../../../", "title": "Django internals"}, {"link": "../../", "title": "Contributing to Django"}, {"link": "../", "title": "Writing code"}], "prev": {"link": "../unit-tests/", "title": "Unit tests"}, "next": {"link": "../working-with-git/", "title": "Working with Git and GitHub"}, "title": "Submitting patches", "meta": {}, "body": "<div class=\"section\" id=\"s-submitting-patches\">\n<span id=\"submitting-patches\"></span><h1>Submitting patches<a class=\"headerlink\" href=\"#submitting-patches\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>We\u2019re always grateful for patches to Django\u2019s code. Indeed, bug reports\nwith associated patches will get fixed <em>far</em> more quickly than those\nwithout patches.</p>\n<div class=\"section\" id=\"s-typo-fixes-and-trivial-documentation-changes\">\n<span id=\"typo-fixes-and-trivial-documentation-changes\"></span><h2>Typo fixes and trivial documentation changes<a class=\"headerlink\" href=\"#typo-fixes-and-trivial-documentation-changes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you are fixing a really trivial issue, for example changing a word in the\ndocumentation, the preferred way to provide the patch is using GitHub pull\nrequests without a Trac ticket.</p>\n<p>See the <a class=\"reference internal\" href=\"../working-with-git/\"><span class=\"doc\">Working with Git and GitHub</span></a> for more details on how to use pull requests.</p>\n</div>\n<div class=\"section\" id=\"s-claiming-tickets\">\n<span id=\"claiming-tickets\"></span><h2>\u201cClaiming\u201d tickets<a class=\"headerlink\" href=\"#claiming-tickets\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In an open-source project with hundreds of contributors around the world, it\u2019s\nimportant to manage communication efficiently so that work doesn\u2019t get\nduplicated and contributors can be as effective as possible.</p>\n<p>Hence, our policy is for contributors to \u201cclaim\u201d tickets in order to let other\ndevelopers know that a particular bug or feature is being worked on.</p>\n<p>If you have identified a contribution you want to make and you\u2019re capable of\nfixing it (as measured by your coding ability, knowledge of Django internals\nand time availability), claim it by following these steps:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://code.djangoproject.com/github/login\">Login using your GitHub account</a> or <a class=\"reference external\" href=\"https://www.djangoproject.com/accounts/register/\">create an account</a> in our ticket\nsystem. If you have an account but have forgotten your password, you can\nreset it using the <a class=\"reference external\" href=\"https://www.djangoproject.com/accounts/password/reset/\">password reset page</a>.</li>\n<li>If a ticket for this issue doesn\u2019t exist yet, create one in our\n<a class=\"reference external\" href=\"https://code.djangoproject.com/\">ticket tracker</a>.</li>\n<li>If a ticket for this issue already exists, make sure nobody else has\nclaimed it. To do this, look at the \u201cOwned by\u201d section of the ticket.\nIf it\u2019s assigned to \u201cnobody,\u201d then it\u2019s available to be claimed.\nOtherwise, somebody else may be working on this ticket. Either find another\nbug/feature to work on, or contact the developer working on the ticket to\noffer your help. If a ticket has been assigned for weeks or months without\nany activity, it\u2019s probably safe to reassign it to yourself.</li>\n<li>Log into your account, if you haven\u2019t already, by clicking \u201cGitHub Login\u201d\nor \u201cDjangoProject Login\u201d in the upper left of the ticket page.</li>\n<li>Claim the ticket by clicking the \u201cassign to myself\u201d radio button under\n\u201cAction\u201d near the bottom of the page, then click \u201cSubmit changes.\u201d</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The Django software foundation requests that anyone contributing more than\na trivial patch to Django sign and submit a <a class=\"reference external\" href=\"https://www.djangoproject.com/foundation/cla/\">Contributor License\nAgreement</a>, this ensures that the Django Software Foundation has clear\nlicense to all contributions allowing for a clear license for all users.</p>\n</div>\n<div class=\"section\" id=\"s-ticket-claimers-responsibility\">\n<span id=\"ticket-claimers-responsibility\"></span><h3>Ticket claimers\u2019 responsibility<a class=\"headerlink\" href=\"#ticket-claimers-responsibility\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Once you\u2019ve claimed a ticket, you have a responsibility to work on that ticket\nin a reasonably timely fashion. If you don\u2019t have time to work on it, either\nunclaim it or don\u2019t claim it in the first place!</p>\n<p>If there\u2019s no sign of progress on a particular claimed ticket for a week or\ntwo, another developer may ask you to relinquish the ticket claim so that it\u2019s\nno longer monopolized and somebody else can claim it.</p>\n<p>If you\u2019ve claimed a ticket and it\u2019s taking a long time (days or weeks) to code,\nkeep everybody updated by posting comments on the ticket. If you don\u2019t provide\nregular updates, and you don\u2019t respond to a request for a progress report,\nyour claim on the ticket may be revoked.</p>\n<p>As always, more communication is better than less communication!</p>\n</div>\n<div class=\"section\" id=\"s-which-tickets-should-be-claimed\">\n<span id=\"which-tickets-should-be-claimed\"></span><h3>Which tickets should be claimed?<a class=\"headerlink\" href=\"#which-tickets-should-be-claimed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Going through the steps of claiming tickets is overkill in some cases.</p>\n<p>In the case of small changes, such as typos in the documentation or small bugs\nthat will only take a few minutes to fix, you don\u2019t need to jump through the\nhoops of claiming tickets. Submit your patch directly and you\u2019re done!</p>\n<p>It is <em>always</em> acceptable, regardless whether someone has claimed it or not, to\nsubmit patches to a ticket if you happen to have a patch ready.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-patch-style\">\n<span id=\"s-id1\"></span><span id=\"patch-style\"></span><span id=\"id1\"></span><h2>Patch style<a class=\"headerlink\" href=\"#patch-style\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Make sure that any contribution you do fulfills at least the following\nrequirements:</p>\n<ul class=\"simple\">\n<li>The code required to fix a problem or add a feature is an essential part\nof a patch, but it is not the only part. A good patch should also include a\n<a class=\"reference internal\" href=\"../unit-tests/\"><span class=\"doc\">regression test</span></a> to validate the behavior that has been\nfixed and to prevent the problem from arising again. Also, if some tickets\nare relevant to the code that you\u2019ve written, mention the ticket numbers in\nsome comments in the test so that one can easily trace back the relevant\ndiscussions after your patch gets committed, and the tickets get closed.</li>\n<li>If the code associated with a patch adds a new feature, or modifies\nbehavior of an existing feature, the patch should also contain\ndocumentation.</li>\n</ul>\n<p>When you think your work is ready to be reviewed, send <a class=\"reference internal\" href=\"../working-with-git/\"><span class=\"doc\">a GitHub pull\nrequest</span></a>. Please review the patch yourself using our\n<a class=\"reference internal\" href=\"#patch-review-checklist\"><span class=\"std std-ref\">patch review checklist</span></a> first.</p>\n<p>If you can\u2019t send a pull request for some reason, you can also use patches in\nTrac. When using this style, follow these guidelines.</p>\n<ul class=\"simple\">\n<li>Submit patches in the format returned by the <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">diff</span></code> command.</li>\n<li>Attach patches to a ticket in the <a class=\"reference external\" href=\"https://code.djangoproject.com/\">ticket tracker</a>, using the \u201cattach\nfile\u201d button. Please <em>don\u2019t</em> put the patch in the ticket description\nor comment unless it\u2019s a single line patch.</li>\n<li>Name the patch file with a <code class=\"docutils literal notranslate\"><span class=\"pre\">.diff</span></code> extension; this will let the ticket\ntracker apply correct syntax highlighting, which is quite helpful.</li>\n</ul>\n<p>Regardless of the way you submit your work, follow these steps.</p>\n<ul class=\"simple\">\n<li>Make sure your code fulfills the requirements in our <a class=\"reference internal\" href=\"#patch-review-checklist\"><span class=\"std std-ref\">patch review\nchecklist</span></a>.</li>\n<li>Check the \u201cHas patch\u201d box on the ticket and make sure the \u201cNeeds\ndocumentation\u201d, \u201cNeeds tests\u201d, and \u201cPatch needs improvement\u201d boxes aren\u2019t\nchecked. This makes the ticket appear in the \u201cPatches needing review\u201d queue\non the <a class=\"reference external\" href=\"https://dashboard.djangoproject.com/\">Development dashboard</a>.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-non-trivial-patches\">\n<span id=\"non-trivial-patches\"></span><h2>Non-trivial patches<a class=\"headerlink\" href=\"#non-trivial-patches\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A \u201cnon-trivial\u201d patch is one that is more than a small bug fix. It\u2019s a patch\nthat introduces Django functionality and makes some sort of design decision.</p>\n<p>If you provide a non-trivial patch, include evidence that alternatives have\nbeen discussed on the <a class=\"reference external\" href=\"https://forum.djangoproject.com/\">Django Forum</a> or <a class=\"reference internal\" href=\"../../../mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a> list.</p>\n<p>If you\u2019re not sure whether your patch should be considered non-trivial, ask on\nthe ticket for opinions.</p>\n</div>\n<div class=\"section\" id=\"s-deprecating-a-feature\">\n<span id=\"s-id2\"></span><span id=\"deprecating-a-feature\"></span><span id=\"id2\"></span><h2>Deprecating a feature<a class=\"headerlink\" href=\"#deprecating-a-feature\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are a couple of reasons that code in Django might be deprecated:</p>\n<ul class=\"simple\">\n<li>If a feature has been improved or modified in a backwards-incompatible way,\nthe old feature or behavior will be deprecated.</li>\n<li>Sometimes Django will include a backport of a Python library that\u2019s not\nincluded in a version of Python that Django currently supports. When Django\nno longer needs to support the older version of Python that doesn\u2019t include\nthe library, the library will be deprecated in Django.</li>\n</ul>\n<p>As the <a class=\"reference internal\" href=\"../../../release-process/#internal-release-deprecation-policy\"><span class=\"std std-ref\">deprecation policy</span></a> describes,\nthe first release of Django that deprecates a feature (<code class=\"docutils literal notranslate\"><span class=\"pre\">A.B</span></code>) should raise a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RemovedInDjangoXXWarning</span></code> (where XX is the Django version where the feature\nwill be removed) when the deprecated feature is invoked. Assuming we have good\ntest coverage, these warnings are converted to errors when <a class=\"reference internal\" href=\"../unit-tests/#running-unit-tests\"><span class=\"std std-ref\">running the\ntest suite</span></a> with warnings enabled:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">-Wa</span> <span class=\"pre\">runtests.py</span></code>. Thus, when adding a <code class=\"docutils literal notranslate\"><span class=\"pre\">RemovedInDjangoXXWarning</span></code>\nyou need to eliminate or silence any warnings generated when running the tests.</p>\n<p>The first step is to remove any use of the deprecated behavior by Django itself.\nNext you can silence warnings in tests that actually test the deprecated\nbehavior by using the <code class=\"docutils literal notranslate\"><span class=\"pre\">ignore_warnings</span></code> decorator, either at the test or class\nlevel:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">In a particular test:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">ignore_warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjangoXXWarning</span>\n\n\n<span class=\"nd\">@ignore_warnings</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">RemovedInDjangoXXWarning</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_foo</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">For an entire test case:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">ignore_warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjangoXXWarning</span>\n\n\n<span class=\"nd\">@ignore_warnings</span><span class=\"p\">(</span><span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">RemovedInDjangoXXWarning</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyDeprecatedTests</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</li>\n</ol>\n<p>You should also add a test for the deprecation warning:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjangoXXWarning</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_foo_deprecation_warning</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"n\">msg</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Expected deprecation message&quot;</span>\n    <span class=\"k\">with</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertWarnsMessage</span><span class=\"p\">(</span><span class=\"n\">RemovedInDjangoXXWarning</span><span class=\"p\">,</span> <span class=\"n\">msg</span><span class=\"p\">):</span>\n        <span class=\"c1\"># invoke deprecated behavior</span>\n        <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>It\u2019s important to include a <code class=\"docutils literal notranslate\"><span class=\"pre\">RemovedInDjangoXXWarning</span></code> comment above code\nwhich has no warning reference, but will need to be changed or removed when the\ndeprecation ends. This could include hooks which have been added to keep the\nprevious behavior, or standalone items that are unnecessary or unused when the\ndeprecation ends. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">warnings</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.deprecation</span> <span class=\"kn\">import</span> <span class=\"n\">RemovedInDjangoXXWarning</span>\n\n\n<span class=\"c1\"># RemovedInDjangoXXWarning.</span>\n<span class=\"k\">def</span> <span class=\"nf\">old_private_helper</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Helper function that is only used in foo().</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"n\">warnings</span><span class=\"o\">.</span><span class=\"n\">warn</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;foo() is deprecated.&quot;</span><span class=\"p\">,</span>\n        <span class=\"n\">category</span><span class=\"o\">=</span><span class=\"n\">RemovedInDjangoXXWarning</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">old_private_helper</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>Finally, there are a couple of updates to Django\u2019s documentation to make:</p>\n<ol class=\"arabic simple\">\n<li>If the existing feature is documented, mark it deprecated in documentation\nusing the <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">deprecated::</span> <span class=\"pre\">A.B</span></code> annotation. Include a short description\nand a note about the upgrade path if applicable.</li>\n<li>Add a description of the deprecated behavior, and the upgrade path if\napplicable, to the current release notes (<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/releases/A.B.txt</span></code>) under\nthe \u201cFeatures deprecated in A.B\u201d heading.</li>\n<li>Add an entry in the deprecation timeline (<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/internals/deprecation.txt</span></code>)\nunder the appropriate version describing what code will be removed.</li>\n</ol>\n<p>Once you have completed these steps, you are finished with the deprecation.\nIn each <a class=\"reference internal\" href=\"../../../release-process/#term-Feature-release\"><span class=\"xref std std-term\">feature release</span></a>, all\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RemovedInDjangoXXWarning</span></code>s matching the new version are removed.</p>\n</div>\n<div class=\"section\" id=\"s-javascript-patches\">\n<span id=\"javascript-patches\"></span><h2>JavaScript patches<a class=\"headerlink\" href=\"#javascript-patches\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>For information on JavaScript patches, see the <a class=\"reference internal\" href=\"../javascript/#javascript-patches\"><span class=\"std std-ref\">JavaScript patches</span></a>\ndocumentation.</p>\n</div>\n<div class=\"section\" id=\"s-patch-review-checklist\">\n<span id=\"s-id3\"></span><span id=\"patch-review-checklist\"></span><span id=\"id3\"></span><h2>Patch review checklist<a class=\"headerlink\" href=\"#patch-review-checklist\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Use this checklist to review a pull request. If you are reviewing a pull\nrequest that is not your own and it passes all the criteria below, please set\nthe \u201cTriage Stage\u201d on the corresponding Trac ticket to \u201cReady for checkin\u201d.\nIf you\u2019ve left comments for improvement on the pull request, please tick the\nappropriate flags on the Trac ticket based on the results of your review:\n\u201cPatch needs improvement\u201d, \u201cNeeds documentation\u201d, and/or \u201cNeeds tests\u201d. As time\nand interest permits, mergers do final reviews of \u201cReady for checkin\u201d tickets\nand will either commit the patch or bump it back to \u201cAccepted\u201d if further works\nneed to be done. If you\u2019re looking to become a merger, doing thorough reviews\nof patches is a great way to earn trust.</p>\n<p>Looking for a patch to review? Check out the \u201cPatches needing review\u201d section\nof the <a class=\"reference external\" href=\"https://dashboard.djangoproject.com/\">Django Development Dashboard</a>.\nLooking to get your patch reviewed? Ensure the Trac flags on the ticket are\nset so that the ticket appears in that queue.</p>\n<div class=\"section\" id=\"s-documentation\">\n<span id=\"documentation\"></span><h3>Documentation<a class=\"headerlink\" href=\"#documentation\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Does the documentation build without any errors (<code class=\"docutils literal notranslate\"><span class=\"pre\">make</span> <span class=\"pre\">html</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">make.bat</span> <span class=\"pre\">html</span></code> on Windows, from the <code class=\"docutils literal notranslate\"><span class=\"pre\">docs</span></code> directory)?</li>\n<li>Does the documentation follow the writing style guidelines in\n<a class=\"reference internal\" href=\"../../writing-documentation/\"><span class=\"doc\">Writing documentation</span></a>?</li>\n<li>Are there any <a class=\"reference internal\" href=\"../../writing-documentation/#documentation-spelling-check\"><span class=\"std std-ref\">spelling errors</span></a>?</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-bugs\">\n<span id=\"bugs\"></span><h3>Bugs<a class=\"headerlink\" href=\"#bugs\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Is there a proper regression test (the test should fail before the fix\nis applied)?</li>\n<li>If it\u2019s a bug that <a class=\"reference internal\" href=\"../../../release-process/#supported-versions-policy\"><span class=\"std std-ref\">qualifies for a backport</span></a>\nto the stable version of Django, is there a release note in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/releases/A.B.C.txt</span></code>? Bug fixes that will be applied only to the main\nbranch don\u2019t need a release note.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-new-features\">\n<span id=\"new-features\"></span><h3>New Features<a class=\"headerlink\" href=\"#new-features\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Are there tests to \u201cexercise\u201d all of the new code?</li>\n<li>Is there a release note in <code class=\"docutils literal notranslate\"><span class=\"pre\">docs/releases/A.B.txt</span></code>?</li>\n<li>Is there documentation for the feature and is it <a class=\"reference internal\" href=\"../../writing-documentation/#documenting-new-features\"><span class=\"std std-ref\">annotated\nappropriately</span></a> with\n<code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionadded::</span> <span class=\"pre\">A.B</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionchanged::</span> <span class=\"pre\">A.B</span></code>?</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-id4\">\n<span id=\"id4\"></span><h3>Deprecating a feature<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>See the <a class=\"reference internal\" href=\"#deprecating-a-feature\"><span class=\"std std-ref\">Deprecating a feature</span></a> guide.</p>\n</div>\n<div class=\"section\" id=\"s-all-code-changes\">\n<span id=\"all-code-changes\"></span><h3>All code changes<a class=\"headerlink\" href=\"#all-code-changes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Does the <a class=\"reference internal\" href=\"../coding-style/\"><span class=\"doc\">coding style</span></a> conform to our\nguidelines? Are there any  <code class=\"docutils literal notranslate\"><span class=\"pre\">black</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">blacken-docs</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">flake8</span></code>, or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">isort</span></code> errors? You can install the <a class=\"reference internal\" href=\"../coding-style/#coding-style-pre-commit\"><span class=\"std std-ref\">pre-commit</span></a> hooks to automatically catch these errors.</li>\n<li>If the change is backwards incompatible in any way, is there a note\nin the release notes (<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/releases/A.B.txt</span></code>)?</li>\n<li>Is Django\u2019s test suite passing?</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-all-tickets\">\n<span id=\"all-tickets\"></span><h3>All tickets<a class=\"headerlink\" href=\"#all-tickets\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<ul class=\"simple\">\n<li>Is the pull request a single squashed commit with a message that follows our\n<a class=\"reference internal\" href=\"../../committing-code/#committing-guidelines\"><span class=\"std std-ref\">commit message format</span></a>?</li>\n<li>Are you the patch author and a new contributor? Please add yourself to the\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/AUTHORS\">AUTHORS</a> file and submit a <a class=\"reference external\" href=\"https://www.djangoproject.com/foundation/cla/\">Contributor License Agreement</a>.</li>\n</ul>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/contributing/writing-code/working-with-git", "Working with Git and GitHub", "N", "next"], ["internals/contributing/writing-code/unit-tests", "Unit tests", "P", "previous"]], "sourcename": "internals/contributing/writing-code/submitting-patches.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Submitting patches</a><ul>\n<li><a class=\"reference internal\" href=\"#typo-fixes-and-trivial-documentation-changes\">Typo fixes and trivial documentation changes</a></li>\n<li><a class=\"reference internal\" href=\"#claiming-tickets\">\u201cClaiming\u201d tickets</a><ul>\n<li><a class=\"reference internal\" href=\"#ticket-claimers-responsibility\">Ticket claimers\u2019 responsibility</a></li>\n<li><a class=\"reference internal\" href=\"#which-tickets-should-be-claimed\">Which tickets should be claimed?</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#patch-style\">Patch style</a></li>\n<li><a class=\"reference internal\" href=\"#non-trivial-patches\">Non-trivial patches</a></li>\n<li><a class=\"reference internal\" href=\"#deprecating-a-feature\">Deprecating a feature</a></li>\n<li><a class=\"reference internal\" href=\"#javascript-patches\">JavaScript patches</a></li>\n<li><a class=\"reference internal\" href=\"#patch-review-checklist\">Patch review checklist</a><ul>\n<li><a class=\"reference internal\" href=\"#documentation\">Documentation</a></li>\n<li><a class=\"reference internal\" href=\"#bugs\">Bugs</a></li>\n<li><a class=\"reference internal\" href=\"#new-features\">New Features</a></li>\n<li><a class=\"reference internal\" href=\"#id4\">Deprecating a feature</a></li>\n<li><a class=\"reference internal\" href=\"#all-code-changes\">All code changes</a></li>\n<li><a class=\"reference internal\" href=\"#all-tickets\">All tickets</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/contributing/writing-code/submitting-patches", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
