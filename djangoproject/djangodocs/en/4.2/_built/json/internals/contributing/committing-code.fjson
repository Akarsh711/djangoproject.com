{"parents": [{"link": "../../", "title": "Django internals"}, {"link": "../", "title": "Contributing to Django"}], "prev": {"link": "../localizing/", "title": "Localizing Django"}, "next": {"link": "../../mailing-lists/", "title": "Mailing lists and Forum"}, "title": "Committing code", "meta": {}, "body": "<div class=\"section\" id=\"s-committing-code\">\n<span id=\"committing-code\"></span><h1>Committing code<a class=\"headerlink\" href=\"#committing-code\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This section is addressed to the mergers and to anyone interested in knowing\nhow code gets committed into Django. If you\u2019re a community member who wants to\ncontribute code to Django, look at <a class=\"reference internal\" href=\"../writing-code/working-with-git/\"><span class=\"doc\">Working with Git and GitHub</span></a> instead.</p>\n<div class=\"section\" id=\"s-handling-pull-requests\">\n<span id=\"s-id1\"></span><span id=\"handling-pull-requests\"></span><span id=\"id1\"></span><h2>Handling pull requests<a class=\"headerlink\" href=\"#handling-pull-requests\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Since Django is hosted on GitHub, patches are provided in the form of pull\nrequests.</p>\n<p>When committing a pull request, make sure each individual commit matches the\ncommit guidelines described below. Contributors are expected to provide the\nbest pull requests possible. In practice mergers - who will likely be more\nfamiliar with the commit guidelines - may decide to bring a commit up to\nstandard themselves.</p>\n<p>You may want to have Jenkins or GitHub actions test the pull request with one\nof the pull request builders that doesn\u2019t run automatically, such as Oracle or\nSelenium. See the <a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/CI\">CI wiki page</a> for instructions.</p>\n<p>If you find yourself checking out pull requests locally more often, this git\nalias will be helpful:</p>\n<div class=\"highlight-ini notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">[alias]</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"na\">pr</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">!sh -c \\&quot;git fetch upstream pull/${1}/head:pr/${1} &amp;&amp; git checkout pr/${1}\\&quot;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Add it to your <code class=\"docutils literal notranslate\"><span class=\"pre\">~/.gitconfig</span></code>, and set <code class=\"docutils literal notranslate\"><span class=\"pre\">upstream</span></code> to be <code class=\"docutils literal notranslate\"><span class=\"pre\">django/django</span></code>.\nThen you can run <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">pr</span> <span class=\"pre\">####</span></code> to checkout the corresponding pull request.</p>\n<p>At this point, you can work on the code. Use <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">rebase</span> <span class=\"pre\">-i</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span>\n<span class=\"pre\">commit</span> <span class=\"pre\">--amend</span></code> to make sure the commits have the expected level of quality.\nOnce you\u2019re ready:</p>\n<div class=\"console-block\" id=\"console-block-0\">\n<input class=\"c-tab-unix\" id=\"c-tab-0-unix\" type=\"radio\" name=\"console-0\" checked>\n<label for=\"c-tab-0-unix\" title=\"Linux/macOS\">&#xf17c/&#xf179</label>\n<input class=\"c-tab-win\" id=\"c-tab-0-win\" type=\"radio\" name=\"console-0\">\n<label for=\"c-tab-0-win\" title=\"Windows\">&#xf17a</label>\n<section class=\"c-content-unix\" id=\"c-content-0-unix\">\n<div class=\"highlight-console notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">$ </span><span class=\"c1\"># Pull in the latest changes from main.</span>\n<span class=\"gp\">$ </span>git checkout main\n<span class=\"gp\">$ </span>git pull upstream main\n<span class=\"gp\">$ </span><span class=\"c1\"># Rebase the pull request on main.</span>\n<span class=\"gp\">$ </span>git checkout pr/####\n<span class=\"gp\">$ </span>git rebase main\n<span class=\"gp\">$ </span>git checkout main\n<span class=\"gp\">$ </span><span class=\"c1\"># Merge the work as &quot;fast-forward&quot; to main to avoid a merge commit.</span>\n<span class=\"gp\">$ </span><span class=\"c1\"># (in practice, you can omit &quot;--ff-only&quot; since you just rebased)</span>\n<span class=\"gp\">$ </span>git merge --ff-only pr/XXXX\n<span class=\"gp\">$ </span><span class=\"c1\"># If you&#39;re not sure if you did things correctly, check that only the</span>\n<span class=\"gp\">$ </span><span class=\"c1\"># changes you expect will be pushed to upstream.</span>\n<span class=\"gp\">$ </span>git push --dry-run upstream main\n<span class=\"gp\">$ </span><span class=\"c1\"># Push!</span>\n<span class=\"gp\">$ </span>git push upstream main\n<span class=\"gp\">$ </span><span class=\"c1\"># Delete the pull request branch.</span>\n<span class=\"gp\">$ </span>git branch -d pr/xxxx\n</pre></div>\n</div>\n</section>\n<section class=\"c-content-win\" id=\"c-content-0-win\">\n<div class=\"highlight\"><pre><span></span><span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM Pull in the latest changes from main.</span>\n<span class=\"gp\">...\\&gt;</span> git checkout main\n<span class=\"gp\">...\\&gt;</span> git pull upstream main\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM Rebase the pull request on main.</span>\n<span class=\"gp\">...\\&gt;</span> git checkout pr/####\n<span class=\"gp\">...\\&gt;</span> git rebase main\n<span class=\"gp\">...\\&gt;</span> git checkout main\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM Merge the work as &quot;fast-forward&quot; to main to avoid a merge commit.</span>\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM (in practice, you can omit &quot;--ff-only&quot; since you just rebased)</span>\n<span class=\"gp\">...\\&gt;</span> git merge --ff-only pr/XXXX\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM If you&#39;re not sure if you did things correctly, check that only the</span>\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM changes you expect will be pushed to upstream.</span>\n<span class=\"gp\">...\\&gt;</span> git push --dry-run upstream main\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM Push!</span>\n<span class=\"gp\">...\\&gt;</span> git push upstream main\n<span class=\"gp\">...\\&gt;</span> <span class=\"c1\">REM Delete the pull request branch.</span>\n<span class=\"gp\">...\\&gt;</span> git branch -d pr/xxxx\n</pre></div>\n</section>\n</div>\n<p>Force push to the branch after rebasing on main but before merging and pushing\nto upstream. This allows the commit hashes on main and the branch to match\nwhich automatically closes the pull request.</p>\n<p>If a pull request doesn\u2019t need to be merged as multiple commits, you can use\nGitHub\u2019s \u201cSquash and merge\u201d button on the website. Edit the commit message as\nneeded to conform to <a class=\"reference internal\" href=\"#committing-guidelines\"><span class=\"std std-ref\">the guidelines</span></a> and remove\nthe pull request number that\u2019s automatically appended to the message\u2019s first\nline.</p>\n<p>When rewriting the commit history of a pull request, the goal is to make\nDjango\u2019s commit history as usable as possible:</p>\n<ul class=\"simple\">\n<li>If a patch contains back-and-forth commits, then rewrite those into one.\nFor example, if a commit adds some code and a second commit fixes stylistic\nissues introduced in the first commit, those commits should be squashed\nbefore merging.</li>\n<li>Separate changes to different commits by logical grouping: if you do a\nstylistic cleanup at the same time as you do other changes to a file,\nseparating the changes into two different commits will make reviewing\nhistory easier.</li>\n<li>Beware of merges of upstream branches in the pull requests.</li>\n<li>Tests should pass and docs should build after each commit. Neither the\ntests nor the docs should emit warnings.</li>\n<li>Trivial and small patches usually are best done in one commit. Medium to\nlarge work may be split into multiple commits if it makes sense.</li>\n</ul>\n<p>Practicality beats purity, so it is up to each merger to decide how much\nhistory mangling to do for a pull request. The main points are engaging the\ncommunity, getting work done, and having a usable commit history.</p>\n</div>\n<div class=\"section\" id=\"s-committing-guidelines\">\n<span id=\"s-id2\"></span><span id=\"committing-guidelines\"></span><span id=\"id2\"></span><h2>Committing guidelines<a class=\"headerlink\" href=\"#committing-guidelines\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In addition, please follow the following guidelines when committing code to\nDjango\u2019s Git repository:</p>\n<ul>\n<li><p class=\"first\">Never change the published history of <code class=\"docutils literal notranslate\"><span class=\"pre\">django/django</span></code> branches by force\npushing. If you absolutely must (for security reasons for example), first\ndiscuss the situation with the team.</p>\n</li>\n<li><p class=\"first\">For any medium-to-big changes, where \u201cmedium-to-big\u201d is according to\nyour judgment, please bring things up on the <a class=\"reference external\" href=\"https://forum.djangoproject.com/\">Django Forum</a> or\n<a class=\"reference internal\" href=\"../../mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a> mailing list before making the change.</p>\n<p>If you bring something up and nobody responds, please don\u2019t take that\nto mean your idea is great and should be implemented immediately because\nnobody contested it. Everyone doesn\u2019t always have a lot of time to read\nmailing list discussions immediately, so you may have to wait a couple of\ndays before getting a response.</p>\n</li>\n<li><p class=\"first\">Write detailed commit messages in the past tense, not present tense.</p>\n<ul class=\"simple\">\n<li>Good: \u201cFixed Unicode bug in RSS API.\u201d</li>\n<li>Bad: \u201cFixes Unicode bug in RSS API.\u201d</li>\n<li>Bad: \u201cFixing Unicode bug in RSS API.\u201d</li>\n</ul>\n<p>The commit message should be in lines of 72 chars maximum. There should be\na subject line, separated by a blank line and then paragraphs of 72 char\nlines. The limits are soft. For the subject line, shorter is better. In the\nbody of the commit message more detail is better than less:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Fixed #18307 -- Added git workflow guidelines.\n\nRefactored the Django&#39;s documentation to remove mentions of SVN\nspecific tasks. Added guidelines of how to use Git, GitHub, and\nhow to use pull request together with Trac instead.\n</pre></div>\n</div>\n<p>Credit the contributors in the commit message: \u201cThanks A for the report and B\nfor review.\u201d Use git\u2019s <a class=\"reference external\" href=\"https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors\">Co-Authored-By</a> as appropriate.</p>\n</li>\n<li><p class=\"first\">For commits to a branch, prefix the commit message with the branch name.\nFor example: \u201c[1.4.x] Fixed #xxxxx \u2013 Added support for mind reading.\u201d</p>\n</li>\n<li><p class=\"first\">Limit commits to the most granular change that makes sense. This means,\nuse frequent small commits rather than infrequent large commits. For\nexample, if implementing feature X requires a small change to library Y,\nfirst commit the change to library Y, then commit feature X in a separate\ncommit. This goes a <em>long way</em> in helping everyone follow your changes.</p>\n</li>\n<li><p class=\"first\">Separate bug fixes from feature changes. Bugfixes may need to be backported\nto the stable branch, according to <a class=\"reference internal\" href=\"../../release-process/#supported-versions-policy\"><span class=\"std std-ref\">Supported versions</span></a>.</p>\n</li>\n<li><p class=\"first\">If your commit closes a ticket in the Django <a class=\"reference external\" href=\"https://code.djangoproject.com/\">ticket tracker</a>, begin\nyour commit message with the text \u201cFixed #xxxxx\u201d, where \u201cxxxxx\u201d is the\nnumber of the ticket your commit fixes. Example: \u201cFixed #123 \u2013 Added\nwhizbang feature.\u201d. We\u2019ve rigged Trac so that any commit message in that\nformat will automatically close the referenced ticket and post a comment\nto it with the full commit message.</p>\n<p>For the curious, we\u2019re using a <a class=\"reference external\" href=\"https://github.com/trac-hacks/trac-github\">Trac plugin</a> for this.</p>\n</li>\n</ul>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Note that the Trac integration doesn\u2019t know anything about pull requests.\nSo if you try to close a pull request with the phrase \u201ccloses #400\u201d in your\ncommit message, GitHub will close the pull request, but the Trac plugin\nwill not close the same numbered ticket in Trac.</p>\n</div>\n<ul>\n<li><p class=\"first\">If your commit references a ticket in the Django <a class=\"reference external\" href=\"https://code.djangoproject.com/\">ticket tracker</a> but\ndoes <em>not</em> close the ticket, include the phrase \u201cRefs #xxxxx\u201d, where \u201cxxxxx\u201d\nis the number of the ticket your commit references. This will automatically\npost a comment to the appropriate ticket.</p>\n</li>\n<li><p class=\"first\">Write commit messages for backports using this pattern:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>[&lt;Django version&gt;] Fixed &lt;ticket&gt; -- &lt;description&gt;\n\nBackport of &lt;revision&gt; from &lt;branch&gt;.\n</pre></div>\n</div>\n<p>For example:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>[1.3.x] Fixed #17028 -- Changed diveintopython.org -&gt; diveintopython.net.\n\nBackport of 80c0cbf1c97047daed2c5b41b296bbc56fe1d7e3 from main.\n</pre></div>\n</div>\n<p>There\u2019s a <a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/MergerTips#AutomatingBackports\">script on the wiki</a> to\nautomate this.</p>\n<p>If the commit fixes a regression, include this in the commit message:</p>\n<div class=\"highlight-none notranslate\"><div class=\"highlight\"><pre><span></span>Regression in 6ecccad711b52f9273b1acb07a57d3f806e93928.\n</pre></div>\n</div>\n<p>(use the commit hash where the regression was introduced).</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-reverting-commits\">\n<span id=\"reverting-commits\"></span><h2>Reverting commits<a class=\"headerlink\" href=\"#reverting-commits\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Nobody\u2019s perfect; mistakes will be committed.</p>\n<p>But try very hard to ensure that mistakes don\u2019t happen. Just because we have a\nreversion policy doesn\u2019t relax your responsibility to aim for the highest\nquality possible. Really: double-check your work, or have it checked by\nanother merger <strong>before</strong> you commit it in the first place!</p>\n<p>When a mistaken commit is discovered, please follow these guidelines:</p>\n<ul class=\"simple\">\n<li>If possible, have the original author revert their own commit.</li>\n<li>Don\u2019t revert another author\u2019s changes without permission from the\noriginal author.</li>\n<li>Use git revert \u2013 this will make a reverse commit, but the original\ncommit will still be part of the commit history.</li>\n<li>If the original author can\u2019t be reached (within a reasonable amount\nof time \u2013 a day or so) and the problem is severe \u2013 crashing bug,\nmajor test failures, etc. \u2013 then ask for objections on the <a class=\"reference external\" href=\"https://forum.djangoproject.com/\">Django Forum</a>\nor <a class=\"reference internal\" href=\"../../mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a> mailing list then revert if there are none.</li>\n<li>If the problem is small (a feature commit after feature freeze,\nsay), wait it out.</li>\n<li>If there\u2019s a disagreement between the merger and the reverter-to-be then try\nto work it out on the <a class=\"reference external\" href=\"https://forum.djangoproject.com/\">Django Forum</a> or <a class=\"reference internal\" href=\"../../mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a> mailing list. If\nan agreement can\u2019t be reached then it should be put to a vote.</li>\n<li>If the commit introduced a confirmed, disclosed security\nvulnerability then the commit may be reverted immediately without\npermission from anyone.</li>\n<li>The release branch maintainer may back out commits to the release\nbranch without permission if the commit breaks the release branch.</li>\n<li>If you mistakenly push a topic branch to <code class=\"docutils literal notranslate\"><span class=\"pre\">django/django</span></code>, delete it.\nFor instance, if you did: <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">push</span> <span class=\"pre\">upstream</span> <span class=\"pre\">feature_antigravity</span></code>,\ndo a reverse push: <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">push</span> <span class=\"pre\">upstream</span> <span class=\"pre\">:feature_antigravity</span></code>.</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/mailing-lists", "Mailing lists and Forum", "N", "next"], ["internals/contributing/localizing", "Localizing Django", "P", "previous"]], "sourcename": "internals/contributing/committing-code.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Committing code</a><ul>\n<li><a class=\"reference internal\" href=\"#handling-pull-requests\">Handling pull requests</a></li>\n<li><a class=\"reference internal\" href=\"#committing-guidelines\">Committing guidelines</a></li>\n<li><a class=\"reference internal\" href=\"#reverting-commits\">Reverting commits</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/contributing/committing-code", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": true}
