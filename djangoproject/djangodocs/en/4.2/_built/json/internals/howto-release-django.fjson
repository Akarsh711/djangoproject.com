{"parents": [{"link": "../", "title": "Django internals"}], "prev": {"link": "../git/", "title": "The Django source code repository"}, "next": null, "title": "How is Django Formed?", "meta": {}, "body": "<div class=\"section\" id=\"s-how-is-django-formed\">\n<span id=\"how-is-django-formed\"></span><h1>How is Django Formed?<a class=\"headerlink\" href=\"#how-is-django-formed\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document explains how to release Django.</p>\n<p><strong>Please, keep these instructions up-to-date if you make changes!</strong> The point\nhere is to be descriptive, not prescriptive, so feel free to streamline or\notherwise make changes, but <strong>update this document accordingly!</strong></p>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h2>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are three types of releases that you might need to make:</p>\n<ul class=\"simple\">\n<li>Security releases: disclosing and fixing a vulnerability. This\u2019ll\ngenerally involve two or three simultaneous releases \u2013 e.g.\n3.2.x, 4.0.x, and, depending on timing, perhaps a 4.1.x.</li>\n<li>Regular version releases: either a final release (e.g. 4.1) or a\nbugfix update (e.g. 4.1.1).</li>\n<li>Pre-releases: e.g. 4.2 alpha, beta, or rc.</li>\n</ul>\n<p>The short version of the steps involved is:</p>\n<ol class=\"arabic simple\">\n<li>If this is a security release, pre-notify the security distribution list\none week before the actual release.</li>\n<li>Proofread the release notes, looking for organization and writing errors.\nDraft a blog post and email announcement.</li>\n<li>Update version numbers and create the release package(s).</li>\n<li>Upload the package(s) to the <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com</span></code> server.</li>\n<li>Upload the new version(s) to PyPI.</li>\n<li>Declare the new version in the admin on <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com</span></code>.</li>\n<li>Post the blog entry and send out the email announcements.</li>\n<li>Update version numbers post-release.</li>\n</ol>\n<p>There are a lot of details, so please read on.</p>\n</div>\n<div class=\"section\" id=\"s-prerequisites\">\n<span id=\"prerequisites\"></span><h2>Prerequisites<a class=\"headerlink\" href=\"#prerequisites\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You\u2019ll need a few things before getting started:</p>\n<ul>\n<li><p class=\"first\">A GPG key. If the key you want to use is not your default signing key, you\u2019ll\nneed to add <code class=\"docutils literal notranslate\"><span class=\"pre\">-u</span> <span class=\"pre\">you&#64;example.com</span></code> to every GPG signing command below, where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">you&#64;example.com</span></code> is the email address associated with the key you want to\nuse.</p>\n</li>\n<li><p class=\"first\">An install of some required Python packages:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python -m pip install wheel twine\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Access to Django\u2019s record on PyPI. Create a file with your credentials:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id9\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">~/.pypirc</span></code></span><a class=\"headerlink\" href=\"#id9\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-ini notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">[pypi]</span><span class=\"w\"></span>\n<span class=\"na\">username:YourUsername</span><span class=\"w\"></span>\n<span class=\"na\">password:YourPassword</span><span class=\"w\"></span>\n</pre></div>\n</div>\n</div>\n</li>\n<li><p class=\"first\">Access to the <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com</span></code> server to upload files.</p>\n</li>\n<li><p class=\"first\">Access to the admin on <code class=\"docutils literal notranslate\"><span class=\"pre\">djangoproject.com</span></code> as a \u201cSite maintainer\u201d.</p>\n</li>\n<li><p class=\"first\">Access to post to <code class=\"docutils literal notranslate\"><span class=\"pre\">django-announce</span></code>.</p>\n</li>\n<li><p class=\"first\">If this is a security release, access to the pre-notification distribution\nlist.</p>\n</li>\n</ul>\n<p>If this is your first release, you\u2019ll need to coordinate with another releaser\nto get all these things lined up.</p>\n</div>\n<div class=\"section\" id=\"s-pre-release-tasks\">\n<span id=\"pre-release-tasks\"></span><h2>Pre-release tasks<a class=\"headerlink\" href=\"#pre-release-tasks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>A few items need to be taken care of before even beginning the release process.\nThis stuff starts about a week before the release; most of it can be done\nany time leading up to the actual release:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">If this is a security release, send out pre-notification <strong>one week</strong> before\nthe release. The template for that email and a list of the recipients are in\nthe private <code class=\"docutils literal notranslate\"><span class=\"pre\">django-security</span></code> GitHub wiki. BCC the pre-notification\nrecipients. Sign the email with the key you\u2019ll use for the release and\ninclude <a class=\"reference external\" href=\"https://cveform.mitre.org/\">CVE IDs</a> (requested with Vendor:\ndjangoproject, Product: django) and patches for each issue being fixed.\nAlso, <a class=\"reference internal\" href=\"../security/#security-disclosure\"><span class=\"std std-ref\">notify django-announce</span></a> of the upcoming\nsecurity release.</p>\n</li>\n<li><p class=\"first\">As the release approaches, watch Trac to make sure no release blockers\nare left for the upcoming release.</p>\n</li>\n<li><p class=\"first\">Check with the other mergers to make sure they don\u2019t have any uncommitted\nchanges for the release.</p>\n</li>\n<li><p class=\"first\">Proofread the release notes, including looking at the online version to\n<a class=\"reference internal\" href=\"../contributing/writing-documentation/#documentation-link-check\"><span class=\"std std-ref\">catch any broken links</span></a> or reST errors, and\nmake sure the release notes contain the correct date.</p>\n</li>\n<li><p class=\"first\">Double-check that the release notes mention deprecation timelines\nfor any APIs noted as deprecated, and that they mention any changes\nin Python version support.</p>\n</li>\n<li><p class=\"first\">Double-check that the release notes index has a link to the notes\nfor the new release; this will be in <code class=\"docutils literal notranslate\"><span class=\"pre\">docs/releases/index.txt</span></code>.</p>\n</li>\n<li><p class=\"first\">If this is a feature release, ensure translations from Transifex have been\nintegrated. This is typically done by a separate translation\u2019s manager\nrather than the releaser, but here are the steps. Provided you have an\naccount on Transifex:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ python scripts/manage_translations.py fetch\n</pre></div>\n</div>\n<p>and then commit the changed/added files (both <code class=\"docutils literal notranslate\"><span class=\"pre\">.po</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">.mo</span></code>).\nSometimes there are validation errors which need to be debugged, so avoid\ndoing this task immediately before a release is needed.</p>\n</li>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../contributing/writing-documentation/#django-admin-manpage\"><span class=\"std std-ref\">Update the django-admin manual page</span></a>:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nb\">cd</span> docs\n$ make man\n$ man _build/man/django-admin.1  <span class=\"c1\"># do a quick sanity check</span>\n$ cp _build/man/django-admin.1 man/django-admin.1\n</pre></div>\n</div>\n<p>and then commit the changed man page.</p>\n</li>\n<li><p class=\"first\">If this is the alpha release of a new series, create a new stable branch\nfrom main. For example, when releasing Django 4.2:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ git checkout -b stable/4.2.x origin/main\n$ git push origin -u stable/4.2.x:stable/4.2.x\n</pre></div>\n</div>\n<p>At the same time, update the <code class=\"docutils literal notranslate\"><span class=\"pre\">django_next_version</span></code> variable in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/conf.py</span></code> on the stable release branch to point to the new\ndevelopment version. For example, when creating <code class=\"docutils literal notranslate\"><span class=\"pre\">stable/4.2.x</span></code>, set\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django_next_version</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">'5.0'</span></code> on the new branch.</p>\n</li>\n<li><p class=\"first\">If this is the \u201cdot zero\u201d release of a new series, create a new branch from\nthe current stable branch in the <a class=\"reference external\" href=\"https://github.com/django/django-docs-translations\">django-docs-translations</a> repository. For\nexample, when releasing Django 4.2:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ git checkout -b stable/4.2.x origin/stable/4.1.x\n$ git push origin stable/4.2.x:stable/4.2.x\n</pre></div>\n</div>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-preparing-for-release\">\n<span id=\"preparing-for-release\"></span><h2>Preparing for release<a class=\"headerlink\" href=\"#preparing-for-release\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Write the announcement blog post for the release. You can enter it into the\nadmin at any time and mark it as inactive. Here are a few examples: <a class=\"reference external\" href=\"https://www.djangoproject.com/weblog/2013/feb/19/security/\">example\nsecurity release announcement</a>, <a class=\"reference external\" href=\"https://www.djangoproject.com/weblog/2012/mar/23/14/\">example regular release announcement</a>,\n<a class=\"reference external\" href=\"https://www.djangoproject.com/weblog/2012/nov/27/15-beta-1/\">example pre-release announcement</a>.</p>\n</div>\n<div class=\"section\" id=\"s-actually-rolling-the-release\">\n<span id=\"actually-rolling-the-release\"></span><h2>Actually rolling the release<a class=\"headerlink\" href=\"#actually-rolling-the-release\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>OK, this is the fun part, where we actually push out a release!</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Check <a class=\"reference external\" href=\"https://djangoci.com\">Jenkins</a> is green for the version(s) you\u2019re putting out. You\nprobably shouldn\u2019t issue a release until it\u2019s green.</p>\n</li>\n<li><p class=\"first\">A release always begins from a release branch, so you should make sure\nyou\u2019re on a stable branch and up-to-date. For example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ git checkout stable/4.1.x\n$ git pull\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">If this is a security release, merge the appropriate patches from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django-security</span></code>. Rebase these patches as necessary to make each one a\nplain commit on the release branch rather than a merge commit. To ensure\nthis, merge them with the <code class=\"docutils literal notranslate\"><span class=\"pre\">--ff-only</span></code> flag; for example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ git checkout stable/4.1.x\n$ git merge --ff-only security/4.1.x\n</pre></div>\n</div>\n<p>(This assumes <code class=\"docutils literal notranslate\"><span class=\"pre\">security/4.1.x</span></code> is a branch in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django-security</span></code> repo\ncontaining the necessary security patches for the next release in the 4.1\nseries.)</p>\n<p>If git refuses to merge with <code class=\"docutils literal notranslate\"><span class=\"pre\">--ff-only</span></code>, switch to the security-patch\nbranch and rebase it on the branch you are about to merge it into (<code class=\"docutils literal notranslate\"><span class=\"pre\">git</span>\n<span class=\"pre\">checkout</span> <span class=\"pre\">security/4.1.x;</span> <span class=\"pre\">git</span> <span class=\"pre\">rebase</span> <span class=\"pre\">stable/4.1.x</span></code>) and then switch back and\ndo the merge. Make sure the commit message for each security fix explains\nthat the commit is a security fix and that an announcement will follow\n(<a class=\"reference external\" href=\"https://github.com/django/django/commit/bf39978a53f117ca02e9a0c78b76664a41a54745\">example security commit</a>).</p>\n</li>\n<li><p class=\"first\">For a feature release, remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">UNDER</span> <span class=\"pre\">DEVELOPMENT</span></code> header at the\ntop of the release notes and add the release date on the next line. For a\npatch release, remove the <code class=\"docutils literal notranslate\"><span class=\"pre\">Expected</span></code> prefix and update the release date,\nif necessary. Make this change on all branches where the release notes for a\nparticular version are located.</p>\n</li>\n<li><p class=\"first\">Update the version number in <code class=\"docutils literal notranslate\"><span class=\"pre\">django/__init__.py</span></code> for the release.\nPlease see <a class=\"reference internal\" href=\"#notes-on-setting-the-version-tuple\">notes on setting the VERSION tuple</a> below for details\non <code class=\"docutils literal notranslate\"><span class=\"pre\">VERSION</span></code>.</p>\n</li>\n<li><p class=\"first\">If this is a pre-release package, update the \u201cDevelopment Status\u201d trove\nclassifier in <code class=\"docutils literal notranslate\"><span class=\"pre\">setup.cfg</span></code> to reflect this. Otherwise, make sure the\nclassifier is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">Development</span> <span class=\"pre\">Status</span> <span class=\"pre\">::</span> <span class=\"pre\">5</span> <span class=\"pre\">-</span> <span class=\"pre\">Production/Stable</span></code>.</p>\n</li>\n<li><p class=\"first\">Tag the release using <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">tag</span></code>. For example:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ git tag --sign --message<span class=\"o\">=</span><span class=\"s2\">&quot;Tag 4.1.1&quot;</span> <span class=\"m\">4</span>.1.1\n</pre></div>\n</div>\n<p>You can check your work by running <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">tag</span> <span class=\"pre\">--verify</span> <span class=\"pre\">&lt;tag&gt;</span></code>.</p>\n</li>\n<li><p class=\"first\">Push your work, including the tag: <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">push</span> <span class=\"pre\">--tags</span></code>.</p>\n</li>\n<li><p class=\"first\">Make sure you have an absolutely clean tree by running <code class=\"docutils literal notranslate\"><span class=\"pre\">git</span> <span class=\"pre\">clean</span> <span class=\"pre\">-dfx</span></code>.</p>\n</li>\n<li><p class=\"first\">Run <code class=\"docutils literal notranslate\"><span class=\"pre\">make</span> <span class=\"pre\">-f</span> <span class=\"pre\">extras/Makefile</span></code> to generate the release packages. This will\ncreate the release packages in a <code class=\"docutils literal notranslate\"><span class=\"pre\">dist/</span></code> directory.</p>\n</li>\n<li><p class=\"first\">Generate the hashes of the release packages:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nb\">cd</span> dist\n$ md5sum *\n$ sha1sum *\n$ sha256sum *\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Create a \u201cchecksums\u201d file, <code class=\"docutils literal notranslate\"><span class=\"pre\">Django-&lt;&lt;VERSION&gt;&gt;.checksum.txt</span></code> containing\nthe hashes and release information. Start with this template and insert the\ncorrect version, date, GPG key ID (from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">gpg</span> <span class=\"pre\">--list-keys</span> <span class=\"pre\">--keyid-format</span> <span class=\"pre\">LONG</span></code>), release manager\u2019s GitHub username,\nrelease URL, and checksums:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>This file contains MD5, SHA1, and SHA256 checksums for the source-code\ntarball and wheel files of Django &lt;&lt;VERSION&gt;&gt;, released &lt;&lt;DATE&gt;&gt;.\n\nTo use this file, you will need a working install of PGP or other\ncompatible public-key encryption software. You will also need to have\nthe Django release manager&#39;s public key in your keyring. This key has\nthe ID ``XXXXXXXXXXXXXXXX`` and can be imported from the MIT\nkeyserver, for example, if using the open-source GNU Privacy Guard\nimplementation of PGP:\n\n    gpg --keyserver pgp.mit.edu --recv-key XXXXXXXXXXXXXXXX\n\nor via the GitHub API:\n\n    curl https://github.com/&lt;&lt;RELEASE MANAGER GITHUB USERNAME&gt;&gt;.gpg | gpg --import -\n\nOnce the key is imported, verify this file:\n\n    gpg --verify &lt;&lt;THIS FILENAME&gt;&gt;\n\nOnce you have verified this file, you can use normal MD5, SHA1, or SHA256\nchecksumming applications to generate the checksums of the Django\npackage and compare them to the checksums listed below.\n\nRelease packages\n================\n\nhttps://www.djangoproject.com/m/releases/&lt;&lt;MAJOR VERSION&gt;&gt;/&lt;&lt;RELEASE TAR.GZ FILENAME&gt;&gt;\nhttps://www.djangoproject.com/m/releases/&lt;&lt;MAJOR VERSION&gt;&gt;/&lt;&lt;RELEASE WHL FILENAME&gt;&gt;\n\nMD5 checksums\n=============\n\n&lt;&lt;MD5SUM&gt;&gt;  &lt;&lt;RELEASE TAR.GZ FILENAME&gt;&gt;\n&lt;&lt;MD5SUM&gt;&gt;  &lt;&lt;RELEASE WHL FILENAME&gt;&gt;\n\nSHA1 checksums\n==============\n\n&lt;&lt;SHA1SUM&gt;&gt;  &lt;&lt;RELEASE TAR.GZ FILENAME&gt;&gt;\n&lt;&lt;SHA1SUM&gt;&gt;  &lt;&lt;RELEASE WHL FILENAME&gt;&gt;\n\nSHA256 checksums\n================\n\n&lt;&lt;SHA256SUM&gt;&gt;  &lt;&lt;RELEASE TAR.GZ FILENAME&gt;&gt;\n&lt;&lt;SHA256SUM&gt;&gt;  &lt;&lt;RELEASE WHL FILENAME&gt;&gt;\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Sign the checksum file (<code class=\"docutils literal notranslate\"><span class=\"pre\">gpg</span> <span class=\"pre\">--clearsign</span> <span class=\"pre\">--digest-algo</span> <span class=\"pre\">SHA256</span>\n<span class=\"pre\">Django-&lt;version&gt;.checksum.txt</span></code>). This generates a signed document,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Django-&lt;version&gt;.checksum.txt.asc</span></code> which you can then verify using <code class=\"docutils literal notranslate\"><span class=\"pre\">gpg</span>\n<span class=\"pre\">--verify</span> <span class=\"pre\">Django-&lt;version&gt;.checksum.txt.asc</span></code>.</p>\n</li>\n</ol>\n<p>If you\u2019re issuing multiple releases, repeat these steps for each release.</p>\n</div>\n<div class=\"section\" id=\"s-making-the-release-s-available-to-the-public\">\n<span id=\"making-the-release-s-available-to-the-public\"></span><h2>Making the release(s) available to the public<a class=\"headerlink\" href=\"#making-the-release-s-available-to-the-public\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Now you\u2019re ready to actually put the release out there. To do this:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Upload the release package(s) to the djangoproject server, replacing\nA.B. with the appropriate version number, e.g. 4.1 for a 4.1.x release:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ scp Django-* djangoproject.com:/home/www/www/media/releases/A.B\n</pre></div>\n</div>\n<p>If this is the alpha release of a new series, you will need to create the\ndirectory A.B.</p>\n</li>\n<li><p class=\"first\">Upload the checksum file(s):</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ scp Django-A.B.C.checksum.txt.asc djangoproject.com:/home/www/www/media/pgp/Django-A.B.C.checksum.txt\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Test that the release packages install correctly using <code class=\"docutils literal notranslate\"><span class=\"pre\">pip</span></code>. Here\u2019s one\nmethod:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ <span class=\"nv\">RELEASE_VERSION</span><span class=\"o\">=</span><span class=\"s1\">&#39;4.1.1&#39;</span>\n$ <span class=\"nv\">MAJOR_VERSION</span><span class=\"o\">=</span><span class=\"sb\">`</span><span class=\"nb\">echo</span> <span class=\"nv\">$RELEASE_VERSION</span><span class=\"p\">|</span> cut -c <span class=\"m\">1</span>-3<span class=\"sb\">`</span>\n\n$ python -m venv django-pip\n$ . django-pip/bin/activate\n$ python -m pip install https://www.djangoproject.com/m/releases/<span class=\"nv\">$MAJOR_VERSION</span>/Django-<span class=\"nv\">$RELEASE_VERSION</span>.tar.gz\n$ deactivate\n$ python -m venv django-pip-wheel\n$ . django-pip-wheel/bin/activate\n$ python -m pip install https://www.djangoproject.com/m/releases/<span class=\"nv\">$MAJOR_VERSION</span>/Django-<span class=\"nv\">$RELEASE_VERSION</span>-py3-none-any.whl\n$ deactivate\n</pre></div>\n</div>\n<p>This just tests that the tarballs are available (i.e. redirects are up) and\nthat they install correctly, but it\u2019ll catch silly mistakes.</p>\n</li>\n<li><p class=\"first\">Run the <a class=\"reference external\" href=\"https://djangoci.com/job/confirm-release/\">confirm-release</a> build on Jenkins to verify the checksum file(s)\n(e.g. use <code class=\"docutils literal notranslate\"><span class=\"pre\">4.2rc1</span></code> for\n<a class=\"reference external\" href=\"https://media.djangoproject.com/pgp/Django-4.2rc1.checksum.txt\">https://media.djangoproject.com/pgp/Django-4.2rc1.checksum.txt</a>).</p>\n</li>\n<li><p class=\"first\">Upload the release packages to PyPI (for pre-releases, only upload the wheel\nfile):</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ twine upload -s dist/*\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Go to the <a class=\"reference external\" href=\"https://www.djangoproject.com/admin/releases/release/add/\">Add release page in the admin</a>, enter the new release number\nexactly as it appears in the name of the tarball\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">Django-&lt;version&gt;.tar.gz</span></code>). So for example enter \u201c4.1.1\u201d or \u201c4.2rc1\u201d,\netc. If the release is part of an LTS branch, mark it so.</p>\n<p>If this is the alpha release of a new series, also create a Release object\nfor the <em>final</em> release, ensuring that the <em>Release date</em> field is blank,\nthus marking it as <em>unreleased</em>. For example, when creating the Release\nobject for <code class=\"docutils literal notranslate\"><span class=\"pre\">4.2a1</span></code>, also create <code class=\"docutils literal notranslate\"><span class=\"pre\">4.2</span></code> with the Release date field blank.</p>\n</li>\n<li><p class=\"first\">Make the blog post announcing the release live.</p>\n</li>\n<li><p class=\"first\">For a new version release (e.g. 4.1, 4.2), update the default stable version\nof the docs by flipping the <code class=\"docutils literal notranslate\"><span class=\"pre\">is_default</span></code> flag to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> on the\nappropriate <code class=\"docutils literal notranslate\"><span class=\"pre\">DocumentRelease</span></code> object in the <code class=\"docutils literal notranslate\"><span class=\"pre\">docs.djangoproject.com</span></code>\ndatabase (this will automatically flip it to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> for all\nothers); you can do this using the site\u2019s admin.</p>\n<p>Create new <code class=\"docutils literal notranslate\"><span class=\"pre\">DocumentRelease</span></code> objects for each language that has an entry\nfor the previous release. Update djangoproject.com\u2019s <a class=\"reference external\" href=\"https://github.com/django/djangoproject.com/blob/main/djangoproject/static/robots.docs.txt\">robots.docs.txt</a>\nfile by copying entries from <code class=\"docutils literal notranslate\"><span class=\"pre\">manage_translations.py</span> <span class=\"pre\">robots_txt</span></code> from the\ncurrent stable branch in the <code class=\"docutils literal notranslate\"><span class=\"pre\">django-docs-translations</span></code> repository. For\nexample, when releasing Django 4.2:</p>\n<div class=\"highlight-shell notranslate\"><div class=\"highlight\"><pre><span></span>$ git checkout stable/4.2.x\n$ git pull\n$ python manage_translations.py robots_txt\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Post the release announcement to the <a class=\"reference internal\" href=\"../mailing-lists/#django-announce-mailing-list\"><span class=\"std std-ref\">django-announce</span></a>, <a class=\"reference internal\" href=\"../mailing-lists/#django-developers-mailing-list\"><span class=\"std std-ref\">django-developers</span></a>,\n<a class=\"reference internal\" href=\"../mailing-lists/#django-users-mailing-list\"><span class=\"std std-ref\">django-users</span></a> mailing lists, and the Django Forum. This should include a\nlink to the announcement blog post.</p>\n</li>\n<li><p class=\"first\">If this is a security release, send a separate email to\n<a class=\"reference external\" href=\"mailto:oss-security&#37;&#52;&#48;lists&#46;openwall&#46;com\">oss-security<span>&#64;</span>lists<span>&#46;</span>openwall<span>&#46;</span>com</a>. Provide a descriptive subject, for example,\n\u201cDjango\u201d plus the issue title from the release notes (including CVE ID). The\nmessage body should include the vulnerability details, for example, the\nannouncement blog post text. Include a link to the announcement blog post.</p>\n</li>\n<li><p class=\"first\">Add a link to the blog post in the topic of the <code class=\"docutils literal notranslate\"><span class=\"pre\">#django</span></code> IRC channel:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">/msg</span> <span class=\"pre\">chanserv</span> <span class=\"pre\">TOPIC</span> <span class=\"pre\">#django</span> <span class=\"pre\">new</span> <span class=\"pre\">topic</span> <span class=\"pre\">goes</span> <span class=\"pre\">here</span></code>.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-post-release\">\n<span id=\"post-release\"></span><h2>Post-release<a class=\"headerlink\" href=\"#post-release\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>You\u2019re almost done! All that\u2019s left to do now is:</p>\n<ol class=\"arabic simple\">\n<li>Update the <code class=\"docutils literal notranslate\"><span class=\"pre\">VERSION</span></code> tuple in <code class=\"docutils literal notranslate\"><span class=\"pre\">django/__init__.py</span></code> again,\nincrementing to whatever the next expected release will be. For\nexample, after releasing 4.1.1, update <code class=\"docutils literal notranslate\"><span class=\"pre\">VERSION</span></code> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">VERSION</span> <span class=\"pre\">=</span> <span class=\"pre\">(4,</span> <span class=\"pre\">1,</span> <span class=\"pre\">2,</span> <span class=\"pre\">'alpha',</span> <span class=\"pre\">0)</span></code>.</li>\n<li>Add the release in <a class=\"reference external\" href=\"https://code.djangoproject.com/admin/ticket/versions\">Trac\u2019s versions list</a> if necessary (and make it the\ndefault by changing the <code class=\"docutils literal notranslate\"><span class=\"pre\">default_version</span></code> setting in the\ncode.djangoproject.com\u2019s <a class=\"reference external\" href=\"https://github.com/django/code.djangoproject.com/blob/main/trac-env/conf/trac.ini\">trac.ini</a>, if it\u2019s a final release). The new X.Y\nversion should be added after the alpha release and the default version\nshould be updated after \u201cdot zero\u201d release.</li>\n<li>If this was a security release, update <a class=\"reference internal\" href=\"../../releases/security/\"><span class=\"doc\">Archive of security issues</span></a> with\ndetails of the issues addressed.</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-new-stable-branch-tasks\">\n<span id=\"new-stable-branch-tasks\"></span><h2>New stable branch tasks<a class=\"headerlink\" href=\"#new-stable-branch-tasks\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are several items to do in the time following the creation of a new\nstable branch (often following an alpha release). Some of these tasks don\u2019t\nneed to be done by the releaser.</p>\n<ol class=\"arabic simple\">\n<li>Create a new <code class=\"docutils literal notranslate\"><span class=\"pre\">DocumentRelease</span></code> object in the <code class=\"docutils literal notranslate\"><span class=\"pre\">docs.djangoproject.com</span></code>\ndatabase for the new version\u2019s docs, and update the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">docs/fixtures/doc_releases.json</span></code> JSON fixture, so people without access\nto the production DB can still run an up-to-date copy of the docs site.</li>\n<li>Create a stub release note for the new feature version. Use the stub from\nthe previous feature release version or copy the contents from the previous\nfeature version and delete most of the contents leaving only the headings.</li>\n<li>Increase the default PBKDF2 iterations in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.hashers.PBKDF2PasswordHasher</span></code> by about 20%\n(pick a round number). Run the tests, and update the 3 failing\nhasher tests with the new values. Make sure this gets noted in the\nrelease notes (see the 4.1 release notes for an example).</li>\n<li>Remove features that have reached the end of their deprecation cycle. Each\nremoval should be done in a separate commit for clarity. In the commit\nmessage, add a \u201crefs #XXXX\u201d to the original ticket where the deprecation\nbegan if possible.</li>\n<li>Remove <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionadded::</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">versionadded::</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">..</span> <span class=\"pre\">deprecated::</span></code>\nannotations in the documentation from two releases ago. For example, in\nDjango 4.2, notes for 4.0 will be removed.</li>\n<li>Add the new branch to <a class=\"reference external\" href=\"https://readthedocs.org/projects/django/\">Read the Docs</a>. Since the automatically\ngenerated version names (\u201cstable-A.B.x\u201d) differ from the version names\nused in Read the Docs (\u201cA.B.x\u201d), <a class=\"reference external\" href=\"https://github.com/readthedocs/readthedocs.org/issues/5537\">create a ticket</a> requesting\nthe new version.</li>\n<li><a class=\"reference external\" href=\"https://github.com/pypa/trove-classifiers/issues/29\">Request the new classifier on PyPI</a>. For example\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Framework</span> <span class=\"pre\">::</span> <span class=\"pre\">Django</span> <span class=\"pre\">::</span> <span class=\"pre\">3.1</span></code>.</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-notes-on-setting-the-version-tuple\">\n<span id=\"notes-on-setting-the-version-tuple\"></span><h2>Notes on setting the VERSION tuple<a class=\"headerlink\" href=\"#notes-on-setting-the-version-tuple\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django\u2019s version reporting is controlled by the <code class=\"docutils literal notranslate\"><span class=\"pre\">VERSION</span></code> tuple in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django/__init__.py</span></code>. This is a five-element tuple, whose elements\nare:</p>\n<ol class=\"arabic simple\">\n<li>Major version.</li>\n<li>Minor version.</li>\n<li>Micro version.</li>\n<li>Status \u2013 can be one of \u201calpha\u201d, \u201cbeta\u201d, \u201crc\u201d or \u201cfinal\u201d.</li>\n<li>Series number, for alpha/beta/RC packages which run in sequence\n(allowing, for example, \u201cbeta 1\u201d, \u201cbeta 2\u201d, etc.).</li>\n</ol>\n<p>For a final release, the status is always \u201cfinal\u201d and the series\nnumber is always 0. A series number of 0 with an \u201calpha\u201d status will\nbe reported as \u201cpre-alpha\u201d.</p>\n<p>Some examples:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">(4,</span> <span class=\"pre\">1,</span> <span class=\"pre\">1,</span> <span class=\"pre\">&quot;final&quot;,</span> <span class=\"pre\">0)</span></code> \u2192 \u201c4.1.1\u201d</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">(4,</span> <span class=\"pre\">2,</span> <span class=\"pre\">0,</span> <span class=\"pre\">&quot;alpha&quot;,</span> <span class=\"pre\">0)</span></code> \u2192 \u201c4.2 pre-alpha\u201d</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">(4,</span> <span class=\"pre\">2,</span> <span class=\"pre\">0,</span> <span class=\"pre\">&quot;beta&quot;,</span> <span class=\"pre\">1)</span></code> \u2192 \u201c4.2 beta 1\u201d</li>\n</ul>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["internals/git", "The Django source code repository", "P", "previous"]], "sourcename": "internals/howto-release-django.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">How is Django Formed?</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#prerequisites\">Prerequisites</a></li>\n<li><a class=\"reference internal\" href=\"#pre-release-tasks\">Pre-release tasks</a></li>\n<li><a class=\"reference internal\" href=\"#preparing-for-release\">Preparing for release</a></li>\n<li><a class=\"reference internal\" href=\"#actually-rolling-the-release\">Actually rolling the release</a></li>\n<li><a class=\"reference internal\" href=\"#making-the-release-s-available-to-the-public\">Making the release(s) available to the public</a></li>\n<li><a class=\"reference internal\" href=\"#post-release\">Post-release</a></li>\n<li><a class=\"reference internal\" href=\"#new-stable-branch-tasks\">New stable branch tasks</a></li>\n<li><a class=\"reference internal\" href=\"#notes-on-setting-the-version-tuple\">Notes on setting the VERSION tuple</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "internals/howto-release-django", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
