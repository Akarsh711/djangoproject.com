{"parents": [{"link": "../", "title": "API Reference"}], "prev": {"link": "../csrf/", "title": "Cross Site Request Forgery protection"}, "next": {"link": "../django-admin/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>"}, "title": "Databases", "meta": {}, "body": "<div class=\"section\" id=\"s-databases\">\n<span id=\"databases\"></span><h1>Databases<a class=\"headerlink\" href=\"#databases\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django officially supports the following databases:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"#postgresql-notes\"><span class=\"std std-ref\">PostgreSQL</span></a></li>\n<li><a class=\"reference internal\" href=\"#mariadb-notes\"><span class=\"std std-ref\">MariaDB</span></a></li>\n<li><a class=\"reference internal\" href=\"#mysql-notes\"><span class=\"std std-ref\">MySQL</span></a></li>\n<li><a class=\"reference internal\" href=\"#oracle-notes\"><span class=\"std std-ref\">Oracle</span></a></li>\n<li><a class=\"reference internal\" href=\"#sqlite-notes\"><span class=\"std std-ref\">SQLite</span></a></li>\n</ul>\n<p>There are also a number of <a class=\"reference internal\" href=\"#third-party-notes\"><span class=\"std std-ref\">database backends provided by third parties</span></a>.</p>\n<p>Django attempts to support as many features as possible on all database\nbackends. However, not all database backends are alike, and we\u2019ve had to make\ndesign decisions on which features to support and which assumptions we can make\nsafely.</p>\n<p>This file describes some of the features that might be relevant to Django\nusage. It is not intended as a replacement for server-specific documentation or\nreference manuals.</p>\n<div class=\"section\" id=\"s-general-notes\">\n<span id=\"general-notes\"></span><h2>General notes<a class=\"headerlink\" href=\"#general-notes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-persistent-connections\">\n<span id=\"s-persistent-database-connections\"></span><span id=\"persistent-connections\"></span><span id=\"persistent-database-connections\"></span><h3>Persistent connections<a class=\"headerlink\" href=\"#persistent-connections\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Persistent connections avoid the overhead of reestablishing a connection to\nthe database in each HTTP request. They\u2019re controlled by the\n<a class=\"reference internal\" href=\"../settings/#std-setting-CONN_MAX_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CONN_MAX_AGE</span></code></a> parameter which defines the maximum lifetime of a\nconnection. It can be set independently for each database.</p>\n<p>The default value is <code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, preserving the historical behavior of closing the\ndatabase connection at the end of each request. To enable persistent\nconnections, set <a class=\"reference internal\" href=\"../settings/#std-setting-CONN_MAX_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CONN_MAX_AGE</span></code></a> to a positive integer of seconds. For\nunlimited persistent connections, set it to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n<div class=\"section\" id=\"s-connection-management\">\n<span id=\"connection-management\"></span><h4>Connection management<a class=\"headerlink\" href=\"#connection-management\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Django opens a connection to the database when it first makes a database\nquery. It keeps this connection open and reuses it in subsequent requests.\nDjango closes the connection once it exceeds the maximum age defined by\n<a class=\"reference internal\" href=\"../settings/#std-setting-CONN_MAX_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CONN_MAX_AGE</span></code></a> or when it isn\u2019t usable any longer.</p>\n<p>In detail, Django automatically opens a connection to the database whenever it\nneeds one and doesn\u2019t have one already \u2014 either because this is the first\nconnection, or because the previous connection was closed.</p>\n<p>At the beginning of each request, Django closes the connection if it has\nreached its maximum age. If your database terminates idle connections after\nsome time, you should set <a class=\"reference internal\" href=\"../settings/#std-setting-CONN_MAX_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CONN_MAX_AGE</span></code></a> to a lower value, so that\nDjango doesn\u2019t attempt to use a connection that has been terminated by the\ndatabase server. (This problem may only affect very low traffic sites.)</p>\n<p>At the end of each request, Django closes the connection if it has reached its\nmaximum age or if it is in an unrecoverable error state. If any database\nerrors have occurred while processing the requests, Django checks whether the\nconnection still works, and closes it if it doesn\u2019t. Thus, database errors\naffect at most one request per each application\u2019s worker thread; if the\nconnection becomes unusable, the next request gets a fresh connection.</p>\n<p>Setting <a class=\"reference internal\" href=\"../settings/#std-setting-CONN_HEALTH_CHECKS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CONN_HEALTH_CHECKS</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> can be used to improve the\nrobustness of connection reuse and prevent errors when a connection has been\nclosed by the database server which is now ready to accept and serve new\nconnections, e.g. after database server restart. The health check is performed\nonly once per request and only if the database is being accessed during the\nhandling of the request.</p>\n</div>\n<div class=\"section\" id=\"s-caveats\">\n<span id=\"caveats\"></span><h4>Caveats<a class=\"headerlink\" href=\"#caveats\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Since each thread maintains its own connection, your database must support at\nleast as many simultaneous connections as you have worker threads.</p>\n<p>Sometimes a database won\u2019t be accessed by the majority of your views, for\nexample because it\u2019s the database of an external system, or thanks to caching.\nIn such cases, you should set <a class=\"reference internal\" href=\"../settings/#std-setting-CONN_MAX_AGE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">CONN_MAX_AGE</span></code></a> to a low value or even\n<code class=\"docutils literal notranslate\"><span class=\"pre\">0</span></code>, because it doesn\u2019t make sense to maintain a connection that\u2019s unlikely\nto be reused. This will help keep the number of simultaneous connections to\nthis database small.</p>\n<p>The development server creates a new thread for each request it handles,\nnegating the effect of persistent connections. Don\u2019t enable them during\ndevelopment.</p>\n<p>When Django establishes a connection to the database, it sets up appropriate\nparameters, depending on the backend being used. If you enable persistent\nconnections, this setup is no longer repeated every request. If you modify\nparameters such as the connection\u2019s isolation level or time zone, you should\neither restore Django\u2019s defaults at the end of each request, force an\nappropriate value at the beginning of each request, or disable persistent\nconnections.</p>\n<p>If a connection is created in a long-running process, outside of Django\u2019s\nrequest-response cycle, the connection will remain open until explicitly\nclosed, or timeout occurs.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-encoding\">\n<span id=\"encoding\"></span><h3>Encoding<a class=\"headerlink\" href=\"#encoding\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django assumes that all databases use UTF-8 encoding. Using other encodings may\nresult in unexpected behavior such as \u201cvalue too long\u201d errors from your\ndatabase for data that is valid in Django. See the database specific notes\nbelow for information on how to set up your database correctly.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-postgresql-notes\">\n<span id=\"s-id1\"></span><span id=\"postgresql-notes\"></span><span id=\"id1\"></span><h2>PostgreSQL notes<a class=\"headerlink\" href=\"#postgresql-notes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django supports PostgreSQL 12 and higher. <a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/\">psycopg</a> 3.1.8+ or <a class=\"reference external\" href=\"https://www.psycopg.org/\">psycopg2</a>\n2.8.4+ is required, though the latest <a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/\">psycopg</a> 3.1.8+ is recommended.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Support for <code class=\"docutils literal notranslate\"><span class=\"pre\">psycopg2</span></code> is likely to be deprecated and removed at some\npoint in the future.</p>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for <code class=\"docutils literal notranslate\"><span class=\"pre\">psycopg</span></code> 3.1.8+ was added.</p>\n</div>\n<div class=\"section\" id=\"s-postgresql-connection-settings\">\n<span id=\"s-id2\"></span><span id=\"postgresql-connection-settings\"></span><span id=\"id2\"></span><h3>PostgreSQL connection settings<a class=\"headerlink\" href=\"#postgresql-connection-settings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>See <a class=\"reference internal\" href=\"../settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a> for details.</p>\n<p>To connect using a service name from the <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/libpq-pgservice.html\">connection service file</a> and a\npassword from the <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/libpq-pgpass.html\">password file</a>, you must specify them in the\n<a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> part of your database configuration in <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id15\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code></span><a class=\"headerlink\" href=\"#id15\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.postgresql&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;service&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my_service&quot;</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;passfile&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;.my_pgpass&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"literal-block-wrapper docutils container\" id=\"id16\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">.pg_service.conf</span></code></span><a class=\"headerlink\" href=\"#id16\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>[my_service]\nhost=localhost\nuser=USER\ndbname=NAME\nport=5432\n</pre></div>\n</div>\n</div>\n<div class=\"literal-block-wrapper docutils container\" id=\"id17\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">.my_pgpass</span></code></span><a class=\"headerlink\" href=\"#id17\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>localhost:5432:NAME:USER:PASSWORD\n</pre></div>\n</div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Using a service name for testing purposes is not supported. This\n<a class=\"reference external\" href=\"https://code.djangoproject.com/ticket/33685\">may be implemented later</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-optimizing-postgresql-s-configuration\">\n<span id=\"optimizing-postgresql-s-configuration\"></span><h3>Optimizing PostgreSQL\u2019s configuration<a class=\"headerlink\" href=\"#optimizing-postgresql-s-configuration\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django needs the following parameters for its database connections:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">client_encoding</span></code>: <code class=\"docutils literal notranslate\"><span class=\"pre\">'UTF8'</span></code>,</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">default_transaction_isolation</span></code>: <code class=\"docutils literal notranslate\"><span class=\"pre\">'read</span> <span class=\"pre\">committed'</span></code> by default,\nor the value set in the connection options (see below),</li>\n<li><dl class=\"first docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">timezone</span></code>:</dt><dd><ul>\n<li>when <a class=\"reference internal\" href=\"../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'UTC'</span></code> by default, or the\n<a class=\"reference internal\" href=\"../settings/#std-setting-DATABASE-TIME_ZONE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code></a> value set for the connection,</li>\n<li>when <a class=\"reference internal\" href=\"../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, the value of the global\n<a class=\"reference internal\" href=\"../settings/#std-setting-TIME_ZONE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TIME_ZONE</span></code></a> setting.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>If these parameters already have the correct values, Django won\u2019t set them for\nevery new connection, which improves performance slightly. You can configure\nthem directly in <code class=\"file docutils literal notranslate\"><span class=\"pre\">postgresql.conf</span></code> or more conveniently per database\nuser with <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/sql-alterrole.html\">ALTER ROLE</a>.</p>\n<p>Django will work just fine without this optimization, but each new connection\nwill do some additional queries to set these parameters.</p>\n</div>\n<div class=\"section\" id=\"s-isolation-level\">\n<span id=\"s-database-isolation-level\"></span><span id=\"isolation-level\"></span><span id=\"database-isolation-level\"></span><h3>Isolation level<a class=\"headerlink\" href=\"#isolation-level\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Like PostgreSQL itself, Django defaults to the <code class=\"docutils literal notranslate\"><span class=\"pre\">READ</span> <span class=\"pre\">COMMITTED</span></code> <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/transaction-iso.html\">isolation\nlevel</a>. If you need a higher isolation level such as <code class=\"docutils literal notranslate\"><span class=\"pre\">REPEATABLE</span> <span class=\"pre\">READ</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SERIALIZABLE</span></code>, set it in the <a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> part of your database\nconfiguration in <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.postgresql.psycopg_any</span> <span class=\"kn\">import</span> <span class=\"n\">IsolationLevel</span>\n\n<span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;isolation_level&quot;</span><span class=\"p\">:</span> <span class=\"n\">IsolationLevel</span><span class=\"o\">.</span><span class=\"n\">SERIALIZABLE</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Under higher isolation levels, your application should be prepared to\nhandle exceptions raised on serialization failures. This option is\ndesigned for advanced uses.</p>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">IsolationLevel</span></code> was added.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-role\">\n<span id=\"s-database-role\"></span><span id=\"role\"></span><span id=\"database-role\"></span><h3>Role<a class=\"headerlink\" href=\"#role\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>If you need to use a different role for database connections than the role use\nto establish the connection, set it in the <a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> part of your\ndatabase configuration in <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.postgresql&quot;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;assume_role&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;my_application_role&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-server-side-parameters-binding\">\n<span id=\"s-database-server-side-parameters-binding\"></span><span id=\"server-side-parameters-binding\"></span><span id=\"database-server-side-parameters-binding\"></span><h3>Server-side parameters binding<a class=\"headerlink\" href=\"#server-side-parameters-binding\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>With <a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/\">psycopg</a> 3.1.8+, Django defaults to the <a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#client-side-binding-cursors\" title=\"(in psycopg)\"><span class=\"xref std std-ref\">client-side binding\ncursors</span></a>. If you want to use the\n<a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/docs/basic/from_pg2.html#server-side-binding\" title=\"(in psycopg)\"><span class=\"xref std std-ref\">server-side binding</span></a> set it in the\n<a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> part of your database configuration in\n<a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.postgresql&quot;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;server_side_binding&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>This option is ignored with <code class=\"docutils literal notranslate\"><span class=\"pre\">psycopg2</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-indexes-for-varchar-and-text-columns\">\n<span id=\"indexes-for-varchar-and-text-columns\"></span><h3>Indexes for <code class=\"docutils literal notranslate\"><span class=\"pre\">varchar</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> columns<a class=\"headerlink\" href=\"#indexes-for-varchar-and-text-columns\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When specifying <code class=\"docutils literal notranslate\"><span class=\"pre\">db_index=True</span></code> on your model fields, Django typically\noutputs a single <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">INDEX</span></code> statement.  However, if the database type\nfor the field is either <code class=\"docutils literal notranslate\"><span class=\"pre\">varchar</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> (e.g., used by <code class=\"docutils literal notranslate\"><span class=\"pre\">CharField</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">FileField</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code>), then Django will create\nan additional index that uses an appropriate <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/indexes-opclass.html\">PostgreSQL operator class</a>\nfor the column.  The extra index is necessary to correctly perform\nlookups that use the <code class=\"docutils literal notranslate\"><span class=\"pre\">LIKE</span></code> operator in their SQL, as is done with the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code> lookup types.</p>\n</div>\n<div class=\"section\" id=\"s-migration-operation-for-adding-extensions\">\n<span id=\"migration-operation-for-adding-extensions\"></span><h3>Migration operation for adding extensions<a class=\"headerlink\" href=\"#migration-operation-for-adding-extensions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you need to add a PostgreSQL extension (like <code class=\"docutils literal notranslate\"><span class=\"pre\">hstore</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">postgis</span></code>, etc.)\nusing a migration, use the\n<a class=\"reference internal\" href=\"../contrib/postgres/operations/#django.contrib.postgres.operations.CreateExtension\" title=\"django.contrib.postgres.operations.CreateExtension\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CreateExtension</span></code></a> operation.</p>\n</div>\n<div class=\"section\" id=\"s-server-side-cursors\">\n<span id=\"s-postgresql-server-side-cursors\"></span><span id=\"server-side-cursors\"></span><span id=\"postgresql-server-side-cursors\"></span><h3>Server-side cursors<a class=\"headerlink\" href=\"#server-side-cursors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When using <a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.iterator\" title=\"django.db.models.query.QuerySet.iterator\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.iterator()</span></code></a>, Django opens a <a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/docs/advanced/cursors.html#server-side-cursors\" title=\"(in psycopg)\"><span class=\"xref std std-ref\">server-side\ncursor</span></a>. By default, PostgreSQL assumes that\nonly the first 10% of the results of cursor queries will be fetched. The query\nplanner spends less time planning the query and starts returning results\nfaster, but this could diminish performance if more than 10% of the results are\nretrieved. PostgreSQL\u2019s assumptions on the number of rows retrieved for a\ncursor query is controlled with the <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/runtime-config-query.html#GUC-CURSOR-TUPLE-FRACTION\">cursor_tuple_fraction</a> option.</p>\n<div class=\"section\" id=\"s-transaction-pooling-and-server-side-cursors\">\n<span id=\"s-transaction-pooling-server-side-cursors\"></span><span id=\"transaction-pooling-and-server-side-cursors\"></span><span id=\"transaction-pooling-server-side-cursors\"></span><h4>Transaction pooling and server-side cursors<a class=\"headerlink\" href=\"#transaction-pooling-and-server-side-cursors\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Using a connection pooler in transaction pooling mode (e.g. <a class=\"reference external\" href=\"https://www.pgbouncer.org/\">PgBouncer</a>)\nrequires disabling server-side cursors for that connection.</p>\n<p>Server-side cursors are local to a connection and remain open at the end of a\ntransaction when <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASE-AUTOCOMMIT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTOCOMMIT</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. A\nsubsequent transaction may attempt to fetch more results from a server-side\ncursor. In transaction pooling mode, there\u2019s no guarantee that subsequent\ntransactions will use the same connection. If a different connection is used,\nan error is raised when the transaction references the server-side cursor,\nbecause server-side cursors are only accessible in the connection in which they\nwere created.</p>\n<p>One solution is to disable server-side cursors for a connection in\n<a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a> by setting <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASE-DISABLE_SERVER_SIDE_CURSORS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DISABLE_SERVER_SIDE_CURSORS</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>To benefit from server-side cursors in transaction pooling mode, you could set\nup <a class=\"reference internal\" href=\"../../topics/db/multi-db/\"><span class=\"doc\">another connection to the database</span></a> in order to\nperform queries that use server-side cursors. This connection needs to either\nbe directly to the database or to a connection pooler in session pooling mode.</p>\n<p>Another option is to wrap each <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> using server-side cursors in an\n<a class=\"reference internal\" href=\"../../topics/db/transactions/#django.db.transaction.atomic\" title=\"django.db.transaction.atomic\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">atomic()</span></code></a> block, because it disables <code class=\"docutils literal notranslate\"><span class=\"pre\">autocommit</span></code>\nfor the duration of the transaction. This way, the server-side cursor will only\nlive for the duration of the transaction.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-manually-specifying-values-of-auto-incrementing-primary-keys\">\n<span id=\"s-manually-specified-autoincrement-pk\"></span><span id=\"manually-specifying-values-of-auto-incrementing-primary-keys\"></span><span id=\"manually-specified-autoincrement-pk\"></span><h3>Manually-specifying values of auto-incrementing primary keys<a class=\"headerlink\" href=\"#manually-specifying-values-of-auto-incrementing-primary-keys\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django uses PostgreSQL\u2019s identity columns to store auto-incrementing primary\nkeys. An identity column is populated with values from a <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/sql-createsequence.html\">sequence</a> that keeps\ntrack of the next available value. Manually assigning a value to an\nauto-incrementing field doesn\u2019t update the field\u2019s sequence, which might later\ncause a conflict. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth.models</span> <span class=\"kn\">import</span> <span class=\"n\">User</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;alice&quot;</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;User: alice&gt;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"c1\"># The sequence hasn&#39;t been updated; its next value is 1.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">&quot;bob&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">IntegrityError: duplicate key value violates unique constraint</span>\n<span class=\"go\">&quot;auth_user_pkey&quot; DETAIL:  Key (id)=(1) already exists.</span>\n</pre></div>\n</div>\n<p>If you need to specify such values, reset the sequence afterward to avoid\nreusing a value that\u2019s already in the table. The <a class=\"reference internal\" href=\"../django-admin/#django-admin-sqlsequencereset\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">sqlsequencereset</span></code></a>\nmanagement command generates the SQL statements to do that.</p>\n</div>\n<div class=\"section\" id=\"s-test-database-templates\">\n<span id=\"test-database-templates\"></span><h3>Test database templates<a class=\"headerlink\" href=\"#test-database-templates\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can use the <a class=\"reference internal\" href=\"../settings/#std-setting-TEST_TEMPLATE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">TEST['TEMPLATE']</span></code></a> setting to specify\na <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/sql-createdatabase.html\">template</a> (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'template0'</span></code>) from which to create a test database.</p>\n</div>\n<div class=\"section\" id=\"s-speeding-up-test-execution-with-non-durable-settings\">\n<span id=\"speeding-up-test-execution-with-non-durable-settings\"></span><h3>Speeding up test execution with non-durable settings<a class=\"headerlink\" href=\"#speeding-up-test-execution-with-non-durable-settings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can speed up test execution times by <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/non-durability.html\">configuring PostgreSQL to be\nnon-durable</a>.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">This is dangerous: it will make your database more susceptible to data loss\nor corruption in the case of a server crash or power loss. Only use this on\na development machine where you can easily restore the entire contents of\nall databases in the cluster.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-mariadb-notes\">\n<span id=\"s-id4\"></span><span id=\"mariadb-notes\"></span><span id=\"id4\"></span><h2>MariaDB notes<a class=\"headerlink\" href=\"#mariadb-notes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django supports MariaDB 10.4 and higher.</p>\n<p>To use MariaDB, use the MySQL backend, which is shared between the two. See the\n<a class=\"reference internal\" href=\"#mysql-notes\"><span class=\"std std-ref\">MySQL notes</span></a> for more details.</p>\n</div>\n<div class=\"section\" id=\"s-mysql-notes\">\n<span id=\"s-id5\"></span><span id=\"mysql-notes\"></span><span id=\"id5\"></span><h2>MySQL notes<a class=\"headerlink\" href=\"#mysql-notes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-version-support\">\n<span id=\"version-support\"></span><h3>Version support<a class=\"headerlink\" href=\"#version-support\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django supports MySQL 8 and higher.</p>\n<p>Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">inspectdb</span></code> feature uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">information_schema</span></code> database, which\ncontains detailed data on all database schemas.</p>\n<p>Django expects the database to support Unicode (UTF-8 encoding) and delegates to\nit the task of enforcing transactions and referential integrity. It is important\nto be aware of the fact that the two latter ones aren\u2019t actually enforced by\nMySQL when using the MyISAM storage engine, see the next section.</p>\n</div>\n<div class=\"section\" id=\"s-storage-engines\">\n<span id=\"s-mysql-storage-engines\"></span><span id=\"storage-engines\"></span><span id=\"mysql-storage-engines\"></span><h3>Storage engines<a class=\"headerlink\" href=\"#storage-engines\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>MySQL has several <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/storage-engines.html\">storage engines</a>. You can change the default storage engine\nin the server configuration.</p>\n<p>MySQL\u2019s default storage engine is <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/innodb-storage-engine.html\">InnoDB</a>. This engine is fully transactional\nand supports foreign key references. It\u2019s the recommended choice. However, the\nInnoDB autoincrement counter is lost on a MySQL restart because it does not\nremember the <code class=\"docutils literal notranslate\"><span class=\"pre\">AUTO_INCREMENT</span></code> value, instead recreating it as \u201cmax(id)+1\u201d.\nThis may result in an inadvertent reuse of <a class=\"reference internal\" href=\"../models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a>\nvalues.</p>\n<p>The main drawbacks of <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/myisam-storage-engine.html\">MyISAM</a> are that it doesn\u2019t support transactions or\nenforce foreign-key constraints.</p>\n</div>\n<div class=\"section\" id=\"s-mysql-db-api-drivers\">\n<span id=\"s-id7\"></span><span id=\"mysql-db-api-drivers\"></span><span id=\"id7\"></span><h3>MySQL DB API Drivers<a class=\"headerlink\" href=\"#mysql-db-api-drivers\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>MySQL has a couple drivers that implement the Python Database API described in\n<span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0249/\"><strong>PEP 249</strong></a>:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://pypi.org/project/mysqlclient/\">mysqlclient</a> is a native driver. It\u2019s <strong>the recommended choice</strong>.</li>\n<li><a class=\"reference external\" href=\"https://dev.mysql.com/downloads/connector/python/\">MySQL Connector/Python</a> is a pure Python driver from Oracle that does not\nrequire the MySQL client library or any Python modules outside the standard\nlibrary.</li>\n</ul>\n<p>These drivers are thread-safe and provide connection pooling.</p>\n<p>In addition to a DB API driver, Django needs an adapter to access the database\ndrivers from its ORM. Django provides an adapter for mysqlclient while MySQL\nConnector/Python includes <a class=\"reference external\" href=\"https://dev.mysql.com/doc/connector-python/en/connector-python-django-backend.html\">its own</a>.</p>\n<div class=\"section\" id=\"s-mysqlclient\">\n<span id=\"mysqlclient\"></span><h4>mysqlclient<a class=\"headerlink\" href=\"#mysqlclient\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Django requires <a class=\"reference internal\" href=\"#mysqlclient\">mysqlclient</a> 1.4.3 or later.</p>\n</div>\n<div class=\"section\" id=\"s-id8\">\n<span id=\"id8\"></span><h4>MySQL Connector/Python<a class=\"headerlink\" href=\"#id8\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>MySQL Connector/Python is available from the <a class=\"reference external\" href=\"https://dev.mysql.com/downloads/connector/python/\">download page</a>.\nThe Django adapter is available in versions 1.1.X and later. It may not\nsupport the most recent releases of Django.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-time-zone-definitions\">\n<span id=\"s-mysql-time-zone-definitions\"></span><span id=\"time-zone-definitions\"></span><span id=\"mysql-time-zone-definitions\"></span><h3>Time zone definitions<a class=\"headerlink\" href=\"#time-zone-definitions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you plan on using Django\u2019s <a class=\"reference internal\" href=\"../../topics/i18n/timezones/\"><span class=\"doc\">timezone support</span></a>,\nuse <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/mysql-tzinfo-to-sql.html\">mysql_tzinfo_to_sql</a> to load time zone tables into the MySQL database.\nThis needs to be done just once for your MySQL server, not per database.</p>\n</div>\n<div class=\"section\" id=\"s-creating-your-database\">\n<span id=\"creating-your-database\"></span><h3>Creating your database<a class=\"headerlink\" href=\"#creating-your-database\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/create-database.html\">create your database</a> using the command-line tools and this SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">CREATE</span><span class=\"w\"> </span><span class=\"k\">DATABASE</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">dbname</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"nb\">CHARACTER</span><span class=\"w\"> </span><span class=\"k\">SET</span><span class=\"w\"> </span><span class=\"n\">utf8</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>This ensures all tables and columns will use UTF-8 by default.</p>\n<div class=\"section\" id=\"s-collation-settings\">\n<span id=\"s-mysql-collation\"></span><span id=\"collation-settings\"></span><span id=\"mysql-collation\"></span><h4>Collation settings<a class=\"headerlink\" href=\"#collation-settings\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The collation setting for a column controls the order in which data is sorted\nas well as what strings compare as equal. You can specify the <code class=\"docutils literal notranslate\"><span class=\"pre\">db_collation</span></code>\nparameter to set the collation name of the column for\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.CharField.db_collation\" title=\"django.db.models.CharField.db_collation\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a> and\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.TextField.db_collation\" title=\"django.db.models.TextField.db_collation\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">TextField</span></code></a>.</p>\n<p>The collation can also be set on a database-wide level and per-table. This is\n<a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/charset.html\">documented thoroughly</a> in the MySQL documentation. In such cases, you must\nset the collation by directly manipulating the database settings or tables.\nDjango doesn\u2019t provide an API to change them.</p>\n<p>By default, with a UTF-8 database, MySQL will use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">utf8_general_ci</span></code> collation. This results in all string equality\ncomparisons being done in a <em>case-insensitive</em> manner. That is, <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Fred&quot;</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;freD&quot;</span></code> are considered equal at the database level. If you have a unique\nconstraint on a field, it would be illegal to try to insert both <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;aa&quot;</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;AA&quot;</span></code> into the same column, since they compare as equal (and, hence,\nnon-unique) with the default collation. If you want case-sensitive comparisons\non a particular column or table, change the column or table to use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">utf8_bin</span></code> collation.</p>\n<p>Please note that according to <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/charset-unicode-sets.html\">MySQL Unicode Character Sets</a>, comparisons for\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">utf8_general_ci</span></code> collation are faster, but slightly less correct, than\ncomparisons for <code class=\"docutils literal notranslate\"><span class=\"pre\">utf8_unicode_ci</span></code>. If this is acceptable for your application,\nyou should use <code class=\"docutils literal notranslate\"><span class=\"pre\">utf8_general_ci</span></code> because it is faster. If this is not acceptable\n(for example, if you require German dictionary order), use <code class=\"docutils literal notranslate\"><span class=\"pre\">utf8_unicode_ci</span></code>\nbecause it is more accurate.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Model formsets validate unique fields in a case-sensitive manner. Thus when\nusing a case-insensitive collation, a formset with unique field values that\ndiffer only by case will pass validation, but upon calling <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>, an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IntegrityError</span></code> will be raised.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-connecting-to-the-database\">\n<span id=\"connecting-to-the-database\"></span><h3>Connecting to the database<a class=\"headerlink\" href=\"#connecting-to-the-database\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Refer to the <a class=\"reference internal\" href=\"../settings/\"><span class=\"doc\">settings documentation</span></a>.</p>\n<p>Connection settings are used in this order:</p>\n<ol class=\"arabic simple\">\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a>, <a class=\"reference internal\" href=\"../settings/#std-setting-USER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USER</span></code></a>, <a class=\"reference internal\" href=\"../settings/#std-setting-PASSWORD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PASSWORD</span></code></a>, <a class=\"reference internal\" href=\"../settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a>,\n<a class=\"reference internal\" href=\"../settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a></li>\n<li>MySQL option files.</li>\n</ol>\n<p>In other words, if you set the name of the database in <a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a>,\nthis will take precedence over <a class=\"reference internal\" href=\"../settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a>, which would override\nanything in a <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/option-files.html\">MySQL option file</a>.</p>\n<p>Here\u2019s a sample configuration which uses a MySQL option file:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># settings.py</span>\n<span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.mysql&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">&quot;read_default_file&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;/path/to/my.cnf&quot;</span><span class=\"p\">,</span>\n        <span class=\"p\">},</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<div class=\"highlight-ini notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># my.cnf</span><span class=\"w\"></span>\n<span class=\"k\">[client]</span><span class=\"w\"></span>\n<span class=\"na\">database</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">NAME</span><span class=\"w\"></span>\n<span class=\"na\">user</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">USER</span><span class=\"w\"></span>\n<span class=\"na\">password</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">PASSWORD</span><span class=\"w\"></span>\n<span class=\"na\">default-character-set</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"s\">utf8</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Several other <a class=\"reference external\" href=\"https://mysqlclient.readthedocs.io/user_guide.html#functions-and-attributes\">MySQLdb connection options</a> may be useful, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">ssl</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">init_command</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">sql_mode</span></code>.</p>\n<div class=\"section\" id=\"s-setting-sql-mode\">\n<span id=\"s-mysql-sql-mode\"></span><span id=\"setting-sql-mode\"></span><span id=\"mysql-sql-mode\"></span><h4>Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">sql_mode</span></code><a class=\"headerlink\" href=\"#setting-sql-mode\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The default value of the <code class=\"docutils literal notranslate\"><span class=\"pre\">sql_mode</span></code> option contains <code class=\"docutils literal notranslate\"><span class=\"pre\">STRICT_TRANS_TABLES</span></code>.\nThat option escalates warnings into errors when data are truncated upon\ninsertion, so Django highly recommends activating a <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/sql-mode.html#sql-mode-strict\">strict mode</a> for MySQL to\nprevent data loss (either <code class=\"docutils literal notranslate\"><span class=\"pre\">STRICT_TRANS_TABLES</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">STRICT_ALL_TABLES</span></code>).</p>\n<p>If you need to customize the SQL mode, you can set the <code class=\"docutils literal notranslate\"><span class=\"pre\">sql_mode</span></code> variable\nlike other MySQL options: either in a config file or with the entry\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'init_command':</span> <span class=\"pre\">&quot;SET</span> <span class=\"pre\">sql_mode='STRICT_TRANS_TABLES'&quot;</span></code> in the\n<a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> part of your database configuration in <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-mysql-isolation-level\">\n<span id=\"s-id9\"></span><span id=\"mysql-isolation-level\"></span><span id=\"id9\"></span><h4>Isolation level<a class=\"headerlink\" href=\"#mysql-isolation-level\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>When running concurrent loads, database transactions from different sessions\n(say, separate threads handling different requests) may interact with each\nother. These interactions are affected by each session\u2019s <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/innodb-transaction-isolation-levels.html\">transaction isolation\nlevel</a>. You can set a connection\u2019s isolation level with an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'isolation_level'</span></code> entry in the <a class=\"reference internal\" href=\"../settings/#std-setting-OPTIONS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">OPTIONS</span></code></a> part of your database\nconfiguration in <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASES\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASES</span></code></a>. Valid values for\nthis entry are the four standard isolation levels:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'read</span> <span class=\"pre\">uncommitted'</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'read</span> <span class=\"pre\">committed'</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'repeatable</span> <span class=\"pre\">read'</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'serializable'</span></code></li>\n</ul>\n<p>or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to use the server\u2019s configured isolation level. However, Django\nworks best with and defaults to read committed rather than MySQL\u2019s default,\nrepeatable read. Data loss is possible with repeatable read. In particular,\nyou may see cases where <a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.get_or_create\" title=\"django.db.models.query.QuerySet.get_or_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_or_create()</span></code></a>\nwill raise an <a class=\"reference internal\" href=\"../exceptions/#django.db.IntegrityError\" title=\"django.db.IntegrityError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">IntegrityError</span></code></a> but the object won\u2019t appear in\na subsequent <a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> call.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-creating-your-tables\">\n<span id=\"creating-your-tables\"></span><h3>Creating your tables<a class=\"headerlink\" href=\"#creating-your-tables\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When Django generates the schema, it doesn\u2019t specify a storage engine, so\ntables will be created with whatever default storage engine your database\nserver is configured for. The easiest solution is to set your database server\u2019s\ndefault storage engine to the desired engine.</p>\n<p>If you\u2019re using a hosting service and can\u2019t change your server\u2019s default\nstorage engine, you have a couple of options.</p>\n<ul>\n<li><p class=\"first\">After the tables are created, execute an <code class=\"docutils literal notranslate\"><span class=\"pre\">ALTER</span> <span class=\"pre\">TABLE</span></code> statement to\nconvert a table to a new storage engine (such as InnoDB):</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"o\">&lt;</span><span class=\"n\">tablename</span><span class=\"o\">&gt;</span><span class=\"w\"> </span><span class=\"n\">ENGINE</span><span class=\"o\">=</span><span class=\"n\">INNODB</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>This can be tedious if you have a lot of tables.</p>\n</li>\n<li><p class=\"first\">Another option is to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">init_command</span></code> option for MySQLdb prior to\ncreating your tables:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;init_command&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;SET default_storage_engine=INNODB&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>This sets the default storage engine upon connecting to the database.\nAfter your tables have been created, you should remove this option as it\nadds a query that is only needed during table creation to each database\nconnection.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-table-names\">\n<span id=\"table-names\"></span><h3>Table names<a class=\"headerlink\" href=\"#table-names\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are <a class=\"reference external\" href=\"https://bugs.mysql.com/bug.php?id=48875\">known issues</a> in even the latest versions of MySQL that can cause the\ncase of a table name to be altered when certain SQL statements are executed\nunder certain conditions. It is recommended that you use lowercase table\nnames, if possible, to avoid any problems that might arise from this behavior.\nDjango uses lowercase table names when it auto-generates table names from\nmodels, so this is mainly a consideration if you are overriding the table name\nvia the <a class=\"reference internal\" href=\"../models/options/#django.db.models.Options.db_table\" title=\"django.db.models.Options.db_table\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">db_table</span></code></a> parameter.</p>\n</div>\n<div class=\"section\" id=\"s-savepoints\">\n<span id=\"savepoints\"></span><h3>Savepoints<a class=\"headerlink\" href=\"#savepoints\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Both the Django ORM and MySQL (when using the InnoDB <a class=\"reference internal\" href=\"#mysql-storage-engines\"><span class=\"std std-ref\">storage engine</span></a>) support database <a class=\"reference internal\" href=\"../../topics/db/transactions/#topics-db-transactions-savepoints\"><span class=\"std std-ref\">savepoints</span></a>.</p>\n<p>If you use the MyISAM storage engine please be aware of the fact that you will\nreceive database-generated errors if you try to use the <a class=\"reference internal\" href=\"../../topics/db/transactions/#topics-db-transactions-savepoints\"><span class=\"std std-ref\">savepoint-related\nmethods of the transactions API</span></a>. The reason\nfor this is that detecting the storage engine of a MySQL database/table is an\nexpensive operation so it was decided it isn\u2019t worth to dynamically convert\nthese methods in no-op\u2019s based in the results of such detection.</p>\n</div>\n<div class=\"section\" id=\"s-notes-on-specific-fields\">\n<span id=\"notes-on-specific-fields\"></span><h3>Notes on specific fields<a class=\"headerlink\" href=\"#notes-on-specific-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-character-fields\">\n<span id=\"s-mysql-character-fields\"></span><span id=\"character-fields\"></span><span id=\"mysql-character-fields\"></span><h4>Character fields<a class=\"headerlink\" href=\"#character-fields\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Any fields that are stored with <code class=\"docutils literal notranslate\"><span class=\"pre\">VARCHAR</span></code> column types may have their\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> restricted to 255 characters if you are using <code class=\"docutils literal notranslate\"><span class=\"pre\">unique=True</span></code>\nfor the field. This affects <a class=\"reference internal\" href=\"../models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>,\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.SlugField\" title=\"django.db.models.SlugField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SlugField</span></code></a>. See <a class=\"reference external\" href=\"https://dev.mysql.com/doc/refman/en/create-index.html#create-index-column-prefixes\">the MySQL documentation</a> for more\ndetails.</p>\n</div>\n<div class=\"section\" id=\"s-textfield-limitations\">\n<span id=\"textfield-limitations\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> limitations<a class=\"headerlink\" href=\"#textfield-limitations\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>MySQL can index only the first N chars of a <code class=\"docutils literal notranslate\"><span class=\"pre\">BLOB</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">TEXT</span></code> column. Since\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> doesn\u2019t have a defined length, you can\u2019t mark it as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">unique=True</span></code>. MySQL will report: \u201cBLOB/TEXT column \u2018&lt;db_column&gt;\u2019 used in key\nspecification without a key length\u201d.</p>\n</div>\n<div class=\"section\" id=\"s-fractional-seconds-support-for-time-and-datetime-fields\">\n<span id=\"s-mysql-fractional-seconds\"></span><span id=\"fractional-seconds-support-for-time-and-datetime-fields\"></span><span id=\"mysql-fractional-seconds\"></span><h4>Fractional seconds support for Time and DateTime fields<a class=\"headerlink\" href=\"#fractional-seconds-support-for-time-and-datetime-fields\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>MySQL can store fractional seconds, provided that the column definition\nincludes a fractional indication (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">DATETIME(6)</span></code>).</p>\n<p>Django will not upgrade existing columns to include fractional seconds if the\ndatabase server supports it. If you want to enable them on an existing database,\nit\u2019s up to you to either manually update the column on the target database, by\nexecuting a command like:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">ALTER</span><span class=\"w\"> </span><span class=\"k\">TABLE</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"n\">your_table</span><span class=\"o\">`</span><span class=\"w\"> </span><span class=\"k\">MODIFY</span><span class=\"w\"> </span><span class=\"o\">`</span><span class=\"n\">your_datetime_column</span><span class=\"o\">`</span><span class=\"w\"> </span><span class=\"n\">DATETIME</span><span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">)</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>or using a <a class=\"reference internal\" href=\"../migration-operations/#django.db.migrations.operations.RunSQL\" title=\"django.db.migrations.operations.RunSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RunSQL</span></code></a> operation in a\n<a class=\"reference internal\" href=\"../../topics/migrations/#data-migrations\"><span class=\"std std-ref\">data migration</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-timestamp-columns\">\n<span id=\"timestamp-columns\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">TIMESTAMP</span></code> columns<a class=\"headerlink\" href=\"#timestamp-columns\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you are using a legacy database that contains <code class=\"docutils literal notranslate\"><span class=\"pre\">TIMESTAMP</span></code> columns, you must\nset <a class=\"reference internal\" href=\"../settings/#std-setting-USE_TZ\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_TZ</span> <span class=\"pre\">=</span> <span class=\"pre\">False</span></code></a> to avoid data corruption.\n<a class=\"reference internal\" href=\"../django-admin/#django-admin-inspectdb\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">inspectdb</span></code></a> maps these columns to\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a> and if you enable timezone support,\nboth MySQL and Django will attempt to convert the values from UTC to local time.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-row-locking-with-queryset-select-for-update\">\n<span id=\"row-locking-with-queryset-select-for-update\"></span><h3>Row locking with <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.select_for_update()</span></code><a class=\"headerlink\" href=\"#row-locking-with-queryset-select-for-update\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>MySQL and MariaDB do not support some options to the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">...</span> <span class=\"pre\">FOR</span> <span class=\"pre\">UPDATE</span></code>\nstatement. If <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> is used with an unsupported option, then\na <a class=\"reference internal\" href=\"../exceptions/#django.db.NotSupportedError\" title=\"django.db.NotSupportedError\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NotSupportedError</span></code></a> is raised.</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"44%\" />\n<col width=\"26%\" />\n<col width=\"29%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Option</th>\n<th class=\"head\">MariaDB</th>\n<th class=\"head\">MySQL</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">SKIP</span> <span class=\"pre\">LOCKED</span></code></td>\n<td>X (\u226510.6)</td>\n<td>X (\u22658.0.1)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">NOWAIT</span></code></td>\n<td>X</td>\n<td>X (\u22658.0.1)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">OF</span></code></td>\n<td>&#160;</td>\n<td>X (\u22658.0.1)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">NO</span> <span class=\"pre\">KEY</span></code></td>\n<td>&#160;</td>\n<td>&#160;</td>\n</tr>\n</tbody>\n</table>\n<p>When using <code class=\"docutils literal notranslate\"><span class=\"pre\">select_for_update()</span></code> on MySQL, make sure you filter a queryset\nagainst at least a set of fields contained in unique constraints or only\nagainst fields covered by indexes. Otherwise, an exclusive write lock will be\nacquired over the full table for the duration of the transaction.</p>\n</div>\n<div class=\"section\" id=\"s-automatic-typecasting-can-cause-unexpected-results\">\n<span id=\"automatic-typecasting-can-cause-unexpected-results\"></span><h3>Automatic typecasting can cause unexpected results<a class=\"headerlink\" href=\"#automatic-typecasting-can-cause-unexpected-results\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When performing a query on a string type, but with an integer value, MySQL will\ncoerce the types of all values in the table to an integer before performing the\ncomparison. If your table contains the values <code class=\"docutils literal notranslate\"><span class=\"pre\">'abc'</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">'def'</span></code> and you\nquery for <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span> <span class=\"pre\">mycolumn=0</span></code>, both rows will match. Similarly, <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span> <span class=\"pre\">mycolumn=1</span></code>\nwill match the value <code class=\"docutils literal notranslate\"><span class=\"pre\">'abc1'</span></code>. Therefore, string type fields included in Django\nwill always cast the value to a string before using it in a query.</p>\n<p>If you implement custom model fields that inherit from\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> directly, are overriding\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.Field.get_prep_value\" title=\"django.db.models.Field.get_prep_value\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_prep_value()</span></code></a>, or use\n<a class=\"reference internal\" href=\"../models/expressions/#django.db.models.expressions.RawSQL\" title=\"django.db.models.expressions.RawSQL\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code></a>,\n<a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.extra\" title=\"django.db.models.query.QuerySet.extra\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">extra()</span></code></a>, or\n<a class=\"reference internal\" href=\"../../topics/db/sql/#django.db.models.Manager.raw\" title=\"django.db.models.Manager.raw\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">raw()</span></code></a>, you should ensure that you perform\nappropriate typecasting.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-sqlite-notes\">\n<span id=\"s-id10\"></span><span id=\"sqlite-notes\"></span><span id=\"id10\"></span><h2>SQLite notes<a class=\"headerlink\" href=\"#sqlite-notes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django supports SQLite 3.21.0 and later.</p>\n<p><a class=\"reference external\" href=\"https://www.sqlite.org/\">SQLite</a> provides an excellent development alternative for applications that\nare predominantly read-only or require a smaller installation footprint. As\nwith all database servers, though, there are some differences that are\nspecific to SQLite that you should be aware of.</p>\n<div class=\"section\" id=\"s-substring-matching-and-case-sensitivity\">\n<span id=\"s-sqlite-string-matching\"></span><span id=\"substring-matching-and-case-sensitivity\"></span><span id=\"sqlite-string-matching\"></span><h3>Substring matching and case sensitivity<a class=\"headerlink\" href=\"#substring-matching-and-case-sensitivity\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>For all SQLite versions, there is some slightly counter-intuitive behavior when\nattempting to match some types of strings.  These are triggered when using the\n<a class=\"reference internal\" href=\"../models/querysets/#std-fieldlookup-iexact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a> or <a class=\"reference internal\" href=\"../models/querysets/#std-fieldlookup-contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> filters in Querysets. The behavior\nsplits into two cases:</p>\n<p>1. For substring matching, all matches are done case-insensitively. That is a\nfilter such as <code class=\"docutils literal notranslate\"><span class=\"pre\">filter(name__contains=&quot;aa&quot;)</span></code> will match a name of <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Aabb&quot;</span></code>.</p>\n<p>2. For strings containing characters outside the ASCII range, all exact string\nmatches are performed case-sensitively, even when the case-insensitive options\nare passed into the query. So the <a class=\"reference internal\" href=\"../models/querysets/#std-fieldlookup-iexact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a> filter will behave exactly\nthe same as the <a class=\"reference internal\" href=\"../models/querysets/#std-fieldlookup-exact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">exact</span></code></a> filter in these cases.</p>\n<p>Some possible workarounds for this are <a class=\"reference external\" href=\"https://www.sqlite.org/faq.html#q18\">documented at sqlite.org</a>, but they\naren\u2019t utilized by the default SQLite backend in Django, as incorporating them\nwould be fairly difficult to do robustly. Thus, Django exposes the default\nSQLite behavior and you should be aware of this when doing case-insensitive or\nsubstring filtering.</p>\n</div>\n<div class=\"section\" id=\"s-decimal-handling\">\n<span id=\"s-sqlite-decimal-handling\"></span><span id=\"decimal-handling\"></span><span id=\"sqlite-decimal-handling\"></span><h3>Decimal handling<a class=\"headerlink\" href=\"#decimal-handling\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>SQLite has no real decimal internal type. Decimal values are internally\nconverted to the <code class=\"docutils literal notranslate\"><span class=\"pre\">REAL</span></code> data type (8-byte IEEE floating point number), as\nexplained in the <a class=\"reference external\" href=\"https://www.sqlite.org/datatype3.html#storage_classes_and_datatypes\">SQLite datatypes documentation</a>, so they don\u2019t support\ncorrectly-rounded decimal floating point arithmetic.</p>\n</div>\n<div class=\"section\" id=\"s-database-is-locked-errors\">\n<span id=\"database-is-locked-errors\"></span><h3>\u201cDatabase is locked\u201d errors<a class=\"headerlink\" href=\"#database-is-locked-errors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>SQLite is meant to be a lightweight database, and thus can\u2019t support a high\nlevel of concurrency. <code class=\"docutils literal notranslate\"><span class=\"pre\">OperationalError:</span> <span class=\"pre\">database</span> <span class=\"pre\">is</span> <span class=\"pre\">locked</span></code> errors indicate\nthat your application is experiencing more concurrency than <code class=\"docutils literal notranslate\"><span class=\"pre\">sqlite</span></code> can\nhandle in default configuration. This error means that one thread or process has\nan exclusive lock on the database connection and another thread timed out\nwaiting for the lock the be released.</p>\n<p>Python\u2019s SQLite wrapper has\na default timeout value that determines how long the second thread is allowed to\nwait on the lock before it times out and raises the <code class=\"docutils literal notranslate\"><span class=\"pre\">OperationalError:</span> <span class=\"pre\">database</span>\n<span class=\"pre\">is</span> <span class=\"pre\">locked</span></code> error.</p>\n<p>If you\u2019re getting this error, you can solve it by:</p>\n<ul>\n<li><p class=\"first\">Switching to another database backend. At a certain point SQLite becomes\ntoo \u201clite\u201d for real-world applications, and these sorts of concurrency\nerrors indicate you\u2019ve reached that point.</p>\n</li>\n<li><p class=\"first\">Rewriting your code to reduce concurrency and ensure that database\ntransactions are short-lived.</p>\n</li>\n<li><p class=\"first\">Increase the default timeout value by setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">timeout</span></code> database\noption:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"s2\">&quot;timeout&quot;</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>This will make SQLite wait a bit longer before throwing \u201cdatabase is locked\u201d\nerrors; it won\u2019t really do anything to solve them.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-queryset-select-for-update-not-supported\">\n<span id=\"queryset-select-for-update-not-supported\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.select_for_update()</span></code> not supported<a class=\"headerlink\" href=\"#queryset-select-for-update-not-supported\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>SQLite does not support the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">...</span> <span class=\"pre\">FOR</span> <span class=\"pre\">UPDATE</span></code> syntax. Calling it will\nhave no effect.</p>\n</div>\n<div class=\"section\" id=\"s-isolation-when-using-queryset-iterator\">\n<span id=\"s-sqlite-isolation\"></span><span id=\"isolation-when-using-queryset-iterator\"></span><span id=\"sqlite-isolation\"></span><h3>Isolation when using <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.iterator()</span></code><a class=\"headerlink\" href=\"#isolation-when-using-queryset-iterator\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are special considerations described in <a class=\"reference external\" href=\"https://www.sqlite.org/isolation.html\">Isolation In SQLite</a> when\nmodifying a table while iterating over it using <a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.iterator\" title=\"django.db.models.query.QuerySet.iterator\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.iterator()</span></code></a>. If\na row is added, changed, or deleted within the loop, then that row may or may\nnot appear, or may appear twice, in subsequent results fetched from the\niterator. Your code must handle this.</p>\n</div>\n<div class=\"section\" id=\"s-enabling-json1-extension-on-sqlite\">\n<span id=\"s-sqlite-json1\"></span><span id=\"enabling-json1-extension-on-sqlite\"></span><span id=\"sqlite-json1\"></span><h3>Enabling JSON1 extension on SQLite<a class=\"headerlink\" href=\"#enabling-json1-extension-on-sqlite\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To use <a class=\"reference internal\" href=\"../models/fields/#django.db.models.JSONField\" title=\"django.db.models.JSONField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JSONField</span></code></a> on SQLite, you need to enable the\n<a class=\"reference external\" href=\"https://www.sqlite.org/json1.html\">JSON1 extension</a> on Python\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/sqlite3.html#module-sqlite3\" title=\"(in Python v3.11)\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">sqlite3</span></code></a> library. If the extension is\nnot enabled on your installation, a system error (<code class=\"docutils literal notranslate\"><span class=\"pre\">fields.E180</span></code>) will be\nraised.</p>\n<p>To enable the JSON1 extension you can follow the instruction on\n<a class=\"reference external\" href=\"https://code.djangoproject.com/wiki/JSON1Extension\">the wiki page</a>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The JSON1 extension is enabled by default on SQLite 3.38+.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-oracle-notes\">\n<span id=\"s-id12\"></span><span id=\"oracle-notes\"></span><span id=\"id12\"></span><h2>Oracle notes<a class=\"headerlink\" href=\"#oracle-notes\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django supports <a class=\"reference external\" href=\"https://www.oracle.com/\">Oracle Database Server</a> versions 19c and higher. Version 7.0\nor higher of the <a class=\"reference external\" href=\"https://oracle.github.io/python-cx_Oracle/\">cx_Oracle</a> Python driver is required.</p>\n<p>In order for the <code class=\"docutils literal notranslate\"><span class=\"pre\">python</span> <span class=\"pre\">manage.py</span> <span class=\"pre\">migrate</span></code> command to work, your Oracle\ndatabase user must have privileges to run the following commands:</p>\n<ul class=\"simple\">\n<li>CREATE TABLE</li>\n<li>CREATE SEQUENCE</li>\n<li>CREATE PROCEDURE</li>\n<li>CREATE TRIGGER</li>\n</ul>\n<p>To run a project\u2019s test suite, the user usually needs these <em>additional</em>\nprivileges:</p>\n<ul class=\"simple\">\n<li>CREATE USER</li>\n<li>ALTER USER</li>\n<li>DROP USER</li>\n<li>CREATE TABLESPACE</li>\n<li>DROP TABLESPACE</li>\n<li>CREATE SESSION WITH ADMIN OPTION</li>\n<li>CREATE TABLE WITH ADMIN OPTION</li>\n<li>CREATE SEQUENCE WITH ADMIN OPTION</li>\n<li>CREATE PROCEDURE WITH ADMIN OPTION</li>\n<li>CREATE TRIGGER WITH ADMIN OPTION</li>\n</ul>\n<p>While the <code class=\"docutils literal notranslate\"><span class=\"pre\">RESOURCE</span></code> role has the required <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">TABLE</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">SEQUENCE</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">PROCEDURE</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">TRIGGER</span></code> privileges,\nand a user granted <code class=\"docutils literal notranslate\"><span class=\"pre\">RESOURCE</span> <span class=\"pre\">WITH</span> <span class=\"pre\">ADMIN</span> <span class=\"pre\">OPTION</span></code> can grant <code class=\"docutils literal notranslate\"><span class=\"pre\">RESOURCE</span></code>, such\na user cannot grant the individual privileges (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">TABLE</span></code>), and thus\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RESOURCE</span> <span class=\"pre\">WITH</span> <span class=\"pre\">ADMIN</span> <span class=\"pre\">OPTION</span></code> is not usually sufficient for running tests.</p>\n<p>Some test suites also create views or materialized views; to run these, the\nuser also needs <code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">VIEW</span> <span class=\"pre\">WITH</span> <span class=\"pre\">ADMIN</span> <span class=\"pre\">OPTION</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CREATE</span> <span class=\"pre\">MATERIALIZED</span> <span class=\"pre\">VIEW</span> <span class=\"pre\">WITH</span> <span class=\"pre\">ADMIN</span> <span class=\"pre\">OPTION</span></code> privileges. In particular, this\nis needed for Django\u2019s own test suite.</p>\n<p>All of these privileges are included in the DBA role, which is appropriate\nfor use on a private developer\u2019s database.</p>\n<p>The Oracle database backend uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">SYS.DBMS_LOB</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SYS.DBMS_RANDOM</span></code>\npackages, so your user will require execute permissions on it. It\u2019s normally\naccessible to all users by default, but in case it is not, you\u2019ll need to grant\npermissions like so:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">GRANT</span><span class=\"w\"> </span><span class=\"k\">EXECUTE</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">SYS</span><span class=\"p\">.</span><span class=\"n\">DBMS_LOB</span><span class=\"w\"> </span><span class=\"k\">TO</span><span class=\"w\"> </span><span class=\"k\">user</span><span class=\"p\">;</span><span class=\"w\"></span>\n<span class=\"k\">GRANT</span><span class=\"w\"> </span><span class=\"k\">EXECUTE</span><span class=\"w\"> </span><span class=\"k\">ON</span><span class=\"w\"> </span><span class=\"n\">SYS</span><span class=\"p\">.</span><span class=\"n\">DBMS_RANDOM</span><span class=\"w\"> </span><span class=\"k\">TO</span><span class=\"w\"> </span><span class=\"k\">user</span><span class=\"p\">;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-id13\">\n<span id=\"id13\"></span><h3>Connecting to the database<a class=\"headerlink\" href=\"#id13\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To connect using the service name of your Oracle database, your <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code>\nfile should look something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.oracle&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;xe&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;USER&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a_user&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a_password&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;HOST&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;PORT&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>In this case, you should leave both <a class=\"reference internal\" href=\"../settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a> and <a class=\"reference internal\" href=\"../settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a> empty.\nHowever, if you don\u2019t use a <code class=\"docutils literal notranslate\"><span class=\"pre\">tnsnames.ora</span></code> file or a similar naming method\nand want to connect using the SID (\u201cxe\u201d in this example), then fill in both\n<a class=\"reference internal\" href=\"../settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a> and <a class=\"reference internal\" href=\"../settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a> like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;django.db.backends.oracle&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;xe&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;USER&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a_user&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;PASSWORD&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;a_password&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;HOST&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;dbprod01ned.mycompany.com&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;PORT&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;1540&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>You should either supply both <a class=\"reference internal\" href=\"../settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a> and <a class=\"reference internal\" href=\"../settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a>, or leave\nboth as empty strings. Django will use a different connect descriptor depending\non that choice.</p>\n<div class=\"section\" id=\"s-full-dsn-and-easy-connect\">\n<span id=\"full-dsn-and-easy-connect\"></span><h4>Full DSN and Easy Connect<a class=\"headerlink\" href=\"#full-dsn-and-easy-connect\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>A Full DSN or Easy Connect string can be used in <a class=\"reference internal\" href=\"../settings/#std-setting-NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">NAME</span></code></a> if both\n<a class=\"reference internal\" href=\"../settings/#std-setting-HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">HOST</span></code></a> and <a class=\"reference internal\" href=\"../settings/#std-setting-PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">PORT</span></code></a> are empty. This format is required when\nusing RAC or pluggable databases without <code class=\"docutils literal notranslate\"><span class=\"pre\">tnsnames.ora</span></code>, for example.</p>\n<p>Example of an Easy Connect string:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;localhost:1521/orclpdb1&quot;</span>\n</pre></div>\n</div>\n<p>Example of a full DSN string:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s2\">&quot;NAME&quot;</span><span class=\"p\">:</span> <span class=\"p\">(</span>\n    <span class=\"s2\">&quot;(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=localhost)(PORT=1521))&quot;</span>\n    <span class=\"s2\">&quot;(CONNECT_DATA=(SERVICE_NAME=orclpdb1)))&quot;</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-threaded-option\">\n<span id=\"threaded-option\"></span><h3>Threaded option<a class=\"headerlink\" href=\"#threaded-option\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you plan to run Django in a multithreaded environment (e.g. Apache using the\ndefault MPM module on any modern operating system), then you <strong>must</strong> set\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">threaded</span></code> option of your Oracle database configuration to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;threaded&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>Failure to do this may result in crashes and other odd behavior.</p>\n</div>\n<div class=\"section\" id=\"s-insert-returning-into\">\n<span id=\"insert-returning-into\"></span><h3>INSERT \u2026 RETURNING INTO<a class=\"headerlink\" href=\"#insert-returning-into\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, the Oracle backend uses a <code class=\"docutils literal notranslate\"><span class=\"pre\">RETURNING</span> <span class=\"pre\">INTO</span></code> clause to efficiently\nretrieve the value of an <code class=\"docutils literal notranslate\"><span class=\"pre\">AutoField</span></code> when inserting new rows.  This behavior\nmay result in a <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseError</span></code> in certain unusual setups, such as when\ninserting into a remote table, or into a view with an <code class=\"docutils literal notranslate\"><span class=\"pre\">INSTEAD</span> <span class=\"pre\">OF</span></code> trigger.\nThe <code class=\"docutils literal notranslate\"><span class=\"pre\">RETURNING</span> <span class=\"pre\">INTO</span></code> clause can be disabled by setting the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">use_returning_into</span></code> option of the database configuration to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"s2\">&quot;OPTIONS&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;use_returning_into&quot;</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>In this case, the Oracle backend will use a separate <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> query to\nretrieve <code class=\"docutils literal notranslate\"><span class=\"pre\">AutoField</span></code> values.</p>\n</div>\n<div class=\"section\" id=\"s-naming-issues\">\n<span id=\"naming-issues\"></span><h3>Naming issues<a class=\"headerlink\" href=\"#naming-issues\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Oracle imposes a name length limit of 30 characters. To accommodate this, the\nbackend truncates database identifiers to fit, replacing the final four\ncharacters of the truncated name with a repeatable MD5 hash value.\nAdditionally, the backend turns database identifiers to all-uppercase.</p>\n<p>To prevent these transformations (this is usually required only when dealing\nwith legacy databases or accessing tables which belong to other users), use\na quoted name as the value for <code class=\"docutils literal notranslate\"><span class=\"pre\">db_table</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">LegacyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&quot;name_left_in_lowercase&quot;&#39;</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ForeignModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">db_table</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&quot;OTHER_USER&quot;.&quot;NAME_ONLY_SEEMS_OVER_30&quot;&#39;</span>\n</pre></div>\n</div>\n<p>Quoted names can also be used with Django\u2019s other supported database\nbackends; except for Oracle, however, the quotes have no effect.</p>\n<p>When running <code class=\"docutils literal notranslate\"><span class=\"pre\">migrate</span></code>, an <code class=\"docutils literal notranslate\"><span class=\"pre\">ORA-06552</span></code> error may be encountered if\ncertain Oracle keywords are used as the name of a model field or the\nvalue of a <code class=\"docutils literal notranslate\"><span class=\"pre\">db_column</span></code> option.  Django quotes all identifiers used\nin queries to prevent most such problems, but this error can still\noccur when an Oracle datatype is used as a column name.  In\nparticular, take care to avoid using the names <code class=\"docutils literal notranslate\"><span class=\"pre\">date</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">timestamp</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">number</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">float</span></code> as a field name.</p>\n</div>\n<div class=\"section\" id=\"s-null-and-empty-strings\">\n<span id=\"s-oracle-null-empty-strings\"></span><span id=\"null-and-empty-strings\"></span><span id=\"oracle-null-empty-strings\"></span><h3>NULL and empty strings<a class=\"headerlink\" href=\"#null-and-empty-strings\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django generally prefers to use the empty string (<code class=\"docutils literal notranslate\"><span class=\"pre\">''</span></code>) rather than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>, but Oracle treats both identically. To get around this, the\nOracle backend ignores an explicit <code class=\"docutils literal notranslate\"><span class=\"pre\">null</span></code> option on fields that\nhave the empty string as a possible value and generates DDL as if\n<code class=\"docutils literal notranslate\"><span class=\"pre\">null=True</span></code>. When fetching from the database, it is assumed that\na <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code> value in one of these fields really means the empty\nstring, and the data is silently converted to reflect this assumption.</p>\n</div>\n<div class=\"section\" id=\"s-id14\">\n<span id=\"id14\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> limitations<a class=\"headerlink\" href=\"#id14\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The Oracle backend stores <code class=\"docutils literal notranslate\"><span class=\"pre\">TextFields</span></code> as <code class=\"docutils literal notranslate\"><span class=\"pre\">NCLOB</span></code> columns. Oracle imposes\nsome limitations on the usage of such LOB columns in general:</p>\n<ul class=\"simple\">\n<li>LOB columns may not be used as primary keys.</li>\n<li>LOB columns may not be used in indexes.</li>\n<li>LOB columns may not be used in a <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">DISTINCT</span></code> list. This means that\nattempting to use the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.distinct</span></code> method on a model that\nincludes <code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> columns will result in an <code class=\"docutils literal notranslate\"><span class=\"pre\">ORA-00932</span></code> error when\nrun against Oracle. As a workaround, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.defer</span></code> method in\nconjunction with <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct()</span></code> to prevent <code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> columns from being\nincluded in the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span> <span class=\"pre\">DISTINCT</span></code> list.</li>\n</ul>\n</div>\n</div>\n<div class=\"section\" id=\"s-subclassing-the-built-in-database-backends\">\n<span id=\"s-subclassing-database-backends\"></span><span id=\"subclassing-the-built-in-database-backends\"></span><span id=\"subclassing-database-backends\"></span><h2>Subclassing the built-in database backends<a class=\"headerlink\" href=\"#subclassing-the-built-in-database-backends\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django comes with built-in database backends. You may subclass an existing\ndatabase backends to modify its behavior, features, or configuration.</p>\n<p>Consider, for example, that you need to change a single database feature.\nFirst, you have to create a new directory with a <code class=\"docutils literal notranslate\"><span class=\"pre\">base</span></code> module in it. For\nexample:</p>\n<div class=\"highlight-text notranslate\"><div class=\"highlight\"><pre><span></span>mysite/\n    ...\n    mydbengine/\n        __init__.py\n        base.py\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">base.py</span></code> module must contain a class named <code class=\"docutils literal notranslate\"><span class=\"pre\">DatabaseWrapper</span></code> that\nsubclasses an existing engine from the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends</span></code> module. Here\u2019s an\nexample of subclassing the PostgreSQL engine to change a feature class\n<code class=\"docutils literal notranslate\"><span class=\"pre\">allows_group_by_selected_pks_on_model</span></code>:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id18\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">mysite/mydbengine/base.py</span></code></span><a class=\"headerlink\" href=\"#id18\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.postgresql</span> <span class=\"kn\">import</span> <span class=\"n\">base</span><span class=\"p\">,</span> <span class=\"n\">features</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseFeatures</span><span class=\"p\">(</span><span class=\"n\">features</span><span class=\"o\">.</span><span class=\"n\">DatabaseFeatures</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">allows_group_by_selected_pks_on_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DatabaseWrapper</span><span class=\"p\">(</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">DatabaseWrapper</span><span class=\"p\">):</span>\n    <span class=\"n\">features_class</span> <span class=\"o\">=</span> <span class=\"n\">DatabaseFeatures</span>\n</pre></div>\n</div>\n</div>\n<p>Finally, you must specify a <a class=\"reference internal\" href=\"../settings/#std-setting-DATABASE-ENGINE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DATABASE-ENGINE</span></code></a> in your <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code>\nfile:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DATABASES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">&quot;default&quot;</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">&quot;ENGINE&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;mydbengine&quot;</span><span class=\"p\">,</span>\n        <span class=\"c1\"># ...</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n<p>You can see the current list of database engines by looking in\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/db/backends\">django/db/backends</a>.</p>\n</div>\n<div class=\"section\" id=\"s-using-a-3rd-party-database-backend\">\n<span id=\"s-third-party-notes\"></span><span id=\"using-a-3rd-party-database-backend\"></span><span id=\"third-party-notes\"></span><h2>Using a 3rd-party database backend<a class=\"headerlink\" href=\"#using-a-3rd-party-database-backend\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>In addition to the officially supported databases, there are backends provided\nby 3rd parties that allow you to use other databases with Django:</p>\n<ul class=\"simple\">\n<li><a class=\"reference external\" href=\"https://pypi.org/project/django-cockroachdb/\">CockroachDB</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/django-firebird/\">Firebird</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/django-google-spanner/\">Google Cloud Spanner</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/mssql-django/\">Microsoft SQL Server</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/django-snowflake/\">Snowflake</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/django-tidb/\">TiDB</a></li>\n<li><a class=\"reference external\" href=\"https://pypi.org/project/django-yugabytedb/\">YugabyteDB</a></li>\n</ul>\n<p>The Django versions and ORM features supported by these unofficial backends\nvary considerably. Queries regarding the specific capabilities of these\nunofficial backends, along with any support queries, should be directed to\nthe support channels provided by each 3rd party project.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/django-admin", "<code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>", "N", "next"], ["ref/csrf", "Cross Site Request Forgery protection", "P", "previous"]], "sourcename": "ref/databases.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Databases</a><ul>\n<li><a class=\"reference internal\" href=\"#general-notes\">General notes</a><ul>\n<li><a class=\"reference internal\" href=\"#persistent-connections\">Persistent connections</a><ul>\n<li><a class=\"reference internal\" href=\"#connection-management\">Connection management</a></li>\n<li><a class=\"reference internal\" href=\"#caveats\">Caveats</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#encoding\">Encoding</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#postgresql-notes\">PostgreSQL notes</a><ul>\n<li><a class=\"reference internal\" href=\"#postgresql-connection-settings\">PostgreSQL connection settings</a></li>\n<li><a class=\"reference internal\" href=\"#optimizing-postgresql-s-configuration\">Optimizing PostgreSQL\u2019s configuration</a></li>\n<li><a class=\"reference internal\" href=\"#isolation-level\">Isolation level</a></li>\n<li><a class=\"reference internal\" href=\"#role\">Role</a></li>\n<li><a class=\"reference internal\" href=\"#server-side-parameters-binding\">Server-side parameters binding</a></li>\n<li><a class=\"reference internal\" href=\"#indexes-for-varchar-and-text-columns\">Indexes for <code class=\"docutils literal notranslate\"><span class=\"pre\">varchar</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> columns</a></li>\n<li><a class=\"reference internal\" href=\"#migration-operation-for-adding-extensions\">Migration operation for adding extensions</a></li>\n<li><a class=\"reference internal\" href=\"#server-side-cursors\">Server-side cursors</a><ul>\n<li><a class=\"reference internal\" href=\"#transaction-pooling-and-server-side-cursors\">Transaction pooling and server-side cursors</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#manually-specifying-values-of-auto-incrementing-primary-keys\">Manually-specifying values of auto-incrementing primary keys</a></li>\n<li><a class=\"reference internal\" href=\"#test-database-templates\">Test database templates</a></li>\n<li><a class=\"reference internal\" href=\"#speeding-up-test-execution-with-non-durable-settings\">Speeding up test execution with non-durable settings</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#mariadb-notes\">MariaDB notes</a></li>\n<li><a class=\"reference internal\" href=\"#mysql-notes\">MySQL notes</a><ul>\n<li><a class=\"reference internal\" href=\"#version-support\">Version support</a></li>\n<li><a class=\"reference internal\" href=\"#storage-engines\">Storage engines</a></li>\n<li><a class=\"reference internal\" href=\"#mysql-db-api-drivers\">MySQL DB API Drivers</a><ul>\n<li><a class=\"reference internal\" href=\"#mysqlclient\">mysqlclient</a></li>\n<li><a class=\"reference internal\" href=\"#id8\">MySQL Connector/Python</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#time-zone-definitions\">Time zone definitions</a></li>\n<li><a class=\"reference internal\" href=\"#creating-your-database\">Creating your database</a><ul>\n<li><a class=\"reference internal\" href=\"#collation-settings\">Collation settings</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#connecting-to-the-database\">Connecting to the database</a><ul>\n<li><a class=\"reference internal\" href=\"#setting-sql-mode\">Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">sql_mode</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#mysql-isolation-level\">Isolation level</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#creating-your-tables\">Creating your tables</a></li>\n<li><a class=\"reference internal\" href=\"#table-names\">Table names</a></li>\n<li><a class=\"reference internal\" href=\"#savepoints\">Savepoints</a></li>\n<li><a class=\"reference internal\" href=\"#notes-on-specific-fields\">Notes on specific fields</a><ul>\n<li><a class=\"reference internal\" href=\"#character-fields\">Character fields</a></li>\n<li><a class=\"reference internal\" href=\"#textfield-limitations\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> limitations</a></li>\n<li><a class=\"reference internal\" href=\"#fractional-seconds-support-for-time-and-datetime-fields\">Fractional seconds support for Time and DateTime fields</a></li>\n<li><a class=\"reference internal\" href=\"#timestamp-columns\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TIMESTAMP</span></code> columns</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#row-locking-with-queryset-select-for-update\">Row locking with <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.select_for_update()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#automatic-typecasting-can-cause-unexpected-results\">Automatic typecasting can cause unexpected results</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#sqlite-notes\">SQLite notes</a><ul>\n<li><a class=\"reference internal\" href=\"#substring-matching-and-case-sensitivity\">Substring matching and case sensitivity</a></li>\n<li><a class=\"reference internal\" href=\"#decimal-handling\">Decimal handling</a></li>\n<li><a class=\"reference internal\" href=\"#database-is-locked-errors\">\u201cDatabase is locked\u201d errors</a></li>\n<li><a class=\"reference internal\" href=\"#queryset-select-for-update-not-supported\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.select_for_update()</span></code> not supported</a></li>\n<li><a class=\"reference internal\" href=\"#isolation-when-using-queryset-iterator\">Isolation when using <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.iterator()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#enabling-json1-extension-on-sqlite\">Enabling JSON1 extension on SQLite</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#oracle-notes\">Oracle notes</a><ul>\n<li><a class=\"reference internal\" href=\"#id13\">Connecting to the database</a><ul>\n<li><a class=\"reference internal\" href=\"#full-dsn-and-easy-connect\">Full DSN and Easy Connect</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#threaded-option\">Threaded option</a></li>\n<li><a class=\"reference internal\" href=\"#insert-returning-into\">INSERT \u2026 RETURNING INTO</a></li>\n<li><a class=\"reference internal\" href=\"#naming-issues\">Naming issues</a></li>\n<li><a class=\"reference internal\" href=\"#null-and-empty-strings\">NULL and empty strings</a></li>\n<li><a class=\"reference internal\" href=\"#id14\"><code class=\"docutils literal notranslate\"><span class=\"pre\">TextField</span></code> limitations</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#subclassing-the-built-in-database-backends\">Subclassing the built-in database backends</a></li>\n<li><a class=\"reference internal\" href=\"#using-a-3rd-party-database-backend\">Using a 3rd-party database backend</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/databases", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}