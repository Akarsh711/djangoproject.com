{"parents": [{"link": "../../../", "title": "API Reference"}, {"link": "../../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code> packages"}, {"link": "../", "title": "The Django admin site"}], "prev": {"link": "../", "title": "The Django admin site"}, "next": {"link": "../filters/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> List Filters"}, "title": "Admin actions", "meta": {}, "body": "<div class=\"section\" id=\"s-admin-actions\">\n<span id=\"admin-actions\"></span><h1>Admin actions<a class=\"headerlink\" href=\"#admin-actions\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>The basic workflow of Django\u2019s admin is, in a nutshell, \u201cselect an object,\nthen change it.\u201d This works well for a majority of use cases. However, if you\nneed to make the same change to many objects at once, this workflow can be\nquite tedious.</p>\n<p>In these cases, Django\u2019s admin lets you write and register \u201cactions\u201d \u2013\nfunctions that get called with a list of objects selected on the change list\npage.</p>\n<p>If you look at any change list in the admin, you\u2019ll see this feature in\naction; Django ships with a \u201cdelete selected objects\u201d action available to all\nmodels. For example, here\u2019s the user module from Django\u2019s built-in\n<a class=\"reference internal\" href=\"../../../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a> app:</p>\n<img alt=\"../../../../_images/admin-actions.png\" src=\"../../../../_images/admin-actions.png\" />\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>The \u201cdelete selected objects\u201d action uses <a class=\"reference internal\" href=\"../../../models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.delete()</span></code></a> for efficiency reasons, which\nhas an important caveat: your model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> method will not be\ncalled.</p>\n<p>If you wish to override this behavior, you can override\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.delete_queryset\" title=\"django.contrib.admin.ModelAdmin.delete_queryset\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.delete_queryset()</span></code></a> or write a custom action which does\ndeletion in your preferred manner \u2013 for example, by calling\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Model.delete()</span></code> for each of the selected items.</p>\n<p class=\"last\">For more background on bulk deletion, see the documentation on <a class=\"reference internal\" href=\"../../../../topics/db/queries/#topics-db-queries-delete\"><span class=\"std std-ref\">object\ndeletion</span></a>.</p>\n</div>\n<p>Read on to find out how to add your own actions to this list.</p>\n<div class=\"section\" id=\"s-writing-actions\">\n<span id=\"writing-actions\"></span><h2>Writing actions<a class=\"headerlink\" href=\"#writing-actions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The easiest way to explain actions is by example, so let\u2019s dive in.</p>\n<p>A common use case for admin actions is the bulk updating of a model. Imagine a\nnews application with an <code class=\"docutils literal notranslate\"><span class=\"pre\">Article</span></code> model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"n\">STATUS_CHOICES</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;d&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Draft&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Published&quot;</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s2\">&quot;w&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Withdrawn&quot;</span><span class=\"p\">),</span>\n<span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">body</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">TextField</span><span class=\"p\">()</span>\n    <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">choices</span><span class=\"o\">=</span><span class=\"n\">STATUS_CHOICES</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span>\n</pre></div>\n</div>\n<p>A common task we might perform with a model like this is to update an\narticle\u2019s status from \u201cdraft\u201d to \u201cpublished\u201d. We could easily do this in the\nadmin one article at a time, but if we wanted to bulk-publish a group of\narticles, it\u2019d be tedious. So, let\u2019s write an action that lets us change an\narticle\u2019s status to \u201cpublished.\u201d</p>\n<div class=\"section\" id=\"s-writing-action-functions\">\n<span id=\"writing-action-functions\"></span><h3>Writing action functions<a class=\"headerlink\" href=\"#writing-action-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>First, we\u2019ll need to write a function that gets called when the action is\ntriggered from the admin. Action functions are regular functions that take\nthree arguments:</p>\n<ul class=\"simple\">\n<li>The current <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a></li>\n<li>An <a class=\"reference internal\" href=\"../../../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> representing the current request,</li>\n<li>A <a class=\"reference internal\" href=\"../../../models/querysets/#django.db.models.query.QuerySet\" title=\"django.db.models.query.QuerySet\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code></a> containing the set of\nobjects selected by the user.</li>\n</ul>\n<p>Our publish-these-articles function won\u2019t need the <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> or the\nrequest object, but we will use the queryset:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"n\">modeladmin</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>For the best performance, we\u2019re using the queryset\u2019s <a class=\"reference internal\" href=\"../../../../topics/db/queries/#topics-db-queries-update\"><span class=\"std std-ref\">update method</span></a>. Other types of actions might need to deal\nwith each object individually; in these cases we\u2019d iterate over the\nqueryset:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">queryset</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something_with</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>That\u2019s actually all there is to writing an action! However, we\u2019ll take one\nmore optional-but-useful step and give the action a \u201cnice\u201d title in the admin.\nBy default, this action would appear in the action list as \u201cMake published\u201d \u2013\nthe function name, with underscores replaced by spaces. That\u2019s fine, but we\ncan provide a better, more human-friendly name by using the\n<a class=\"reference internal\" href=\"#django.contrib.admin.action\" title=\"django.contrib.admin.action\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">action()</span></code></a> decorator on the <code class=\"docutils literal notranslate\"><span class=\"pre\">make_published</span></code>\nfunction:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"o\">...</span>\n\n\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;Mark selected stories as published&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"n\">modeladmin</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">This might look familiar; the admin\u2019s\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.list_display\" title=\"django.contrib.admin.ModelAdmin.list_display\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">list_display</span></code></a> option uses a similar\ntechnique with the <a class=\"reference internal\" href=\"../#django.contrib.admin.display\" title=\"django.contrib.admin.display\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">display()</span></code></a> decorator to\nprovide human-readable descriptions for callback functions registered\nthere, too.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-adding-actions-to-the-modeladmin\">\n<span id=\"adding-actions-to-the-modeladmin\"></span><h3>Adding actions to the <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a><a class=\"headerlink\" href=\"#adding-actions-to-the-modeladmin\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Next, we\u2019ll need to inform our <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> of the action. This works\njust like any other configuration option. So, the complete <code class=\"docutils literal notranslate\"><span class=\"pre\">admin.py</span></code> with\nthe action and its registration would look like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myapp.models</span> <span class=\"kn\">import</span> <span class=\"n\">Article</span>\n\n\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;Mark selected stories as published&quot;</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"n\">modeladmin</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">list_display</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;status&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">ordering</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;title&quot;</span><span class=\"p\">]</span>\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">make_published</span><span class=\"p\">]</span>\n\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Article</span><span class=\"p\">,</span> <span class=\"n\">ArticleAdmin</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>That code will give us an admin change list that looks something like this:</p>\n<img alt=\"../../../../_images/adding-actions-to-the-modeladmin.png\" src=\"../../../../_images/adding-actions-to-the-modeladmin.png\" />\n<p>That\u2019s really all there is to it! If you\u2019re itching to write your own actions,\nyou now know enough to get started. The rest of this document covers more\nadvanced techniques.</p>\n</div>\n<div class=\"section\" id=\"s-handling-errors-in-actions\">\n<span id=\"handling-errors-in-actions\"></span><h3>Handling errors in actions<a class=\"headerlink\" href=\"#handling-errors-in-actions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If there are foreseeable error conditions that may occur while running your\naction, you should gracefully inform the user of the problem. This means\nhandling exceptions and using\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.message_user\" title=\"django.contrib.admin.ModelAdmin.message_user\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">django.contrib.admin.ModelAdmin.message_user()</span></code></a> to display a user friendly\ndescription of the problem in the response.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-advanced-action-techniques\">\n<span id=\"advanced-action-techniques\"></span><h2>Advanced action techniques<a class=\"headerlink\" href=\"#advanced-action-techniques\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There\u2019s a couple of extra options and possibilities you can exploit for more\nadvanced options.</p>\n<div class=\"section\" id=\"s-actions-as-modeladmin-methods\">\n<span id=\"actions-as-modeladmin-methods\"></span><h3>Actions as <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> methods<a class=\"headerlink\" href=\"#actions-as-modeladmin-methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The example above shows the <code class=\"docutils literal notranslate\"><span class=\"pre\">make_published</span></code> action defined as a function.\nThat\u2019s perfectly fine, but it\u2019s not perfect from a code design point of view:\nsince the action is tightly coupled to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Article</span></code> object, it makes sense\nto hook the action to the <code class=\"docutils literal notranslate\"><span class=\"pre\">ArticleAdmin</span></code> object itself.</p>\n<p>You can do it like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ArticleAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;make_published&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;Mark selected stories as published&quot;</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n        <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Notice first that we\u2019ve moved <code class=\"docutils literal notranslate\"><span class=\"pre\">make_published</span></code> into a method and renamed the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">modeladmin</span></code> parameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code>, and second that we\u2019ve now put the string\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'make_published'</span></code> in <code class=\"docutils literal notranslate\"><span class=\"pre\">actions</span></code> instead of a direct function reference. This\ntells the <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> to look up the action as a method.</p>\n<p>Defining actions as methods gives the action more idiomatic access to the\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> itself, allowing the action to call any of the methods\nprovided by the admin.</p>\n<p id=\"custom-admin-action\">For example, we can use <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code> to flash a message to the user informing them\nthat the action was successful:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">messages</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.translation</span> <span class=\"kn\">import</span> <span class=\"n\">ngettext</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n        <span class=\"n\">updated</span> <span class=\"o\">=</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">message_user</span><span class=\"p\">(</span>\n            <span class=\"n\">request</span><span class=\"p\">,</span>\n            <span class=\"n\">ngettext</span><span class=\"p\">(</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%d</span><span class=\"s2\"> story was successfully marked as published.&quot;</span><span class=\"p\">,</span>\n                <span class=\"s2\">&quot;</span><span class=\"si\">%d</span><span class=\"s2\"> stories were successfully marked as published.&quot;</span><span class=\"p\">,</span>\n                <span class=\"n\">updated</span><span class=\"p\">,</span>\n            <span class=\"p\">)</span>\n            <span class=\"o\">%</span> <span class=\"n\">updated</span><span class=\"p\">,</span>\n            <span class=\"n\">messages</span><span class=\"o\">.</span><span class=\"n\">SUCCESS</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This make the action match what the admin itself does after successfully\nperforming an action:</p>\n<img alt=\"../../../../_images/actions-as-modeladmin-methods.png\" src=\"../../../../_images/actions-as-modeladmin-methods.png\" />\n</div>\n<div class=\"section\" id=\"s-actions-that-provide-intermediate-pages\">\n<span id=\"actions-that-provide-intermediate-pages\"></span><h3>Actions that provide intermediate pages<a class=\"headerlink\" href=\"#actions-that-provide-intermediate-pages\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, after an action is performed the user is redirected back to the\noriginal change list page. However, some actions, especially more complex ones,\nwill need to return intermediate pages. For example, the built-in delete action\nasks for confirmation before deleting the selected objects.</p>\n<p>To provide an intermediary page, return an <a class=\"reference internal\" href=\"../../../request-response/#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>\n(or subclass) from your action. For example, you might write an export function\nthat uses Django\u2019s <a class=\"reference internal\" href=\"../../../../topics/serialization/\"><span class=\"doc\">serialization functions</span></a> to\ndump some selected objects as JSON:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core</span> <span class=\"kn\">import</span> <span class=\"n\">serializers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">export_as_json</span><span class=\"p\">(</span><span class=\"n\">modeladmin</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;application/json&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">serializers</span><span class=\"o\">.</span><span class=\"n\">serialize</span><span class=\"p\">(</span><span class=\"s2\">&quot;json&quot;</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre></div>\n</div>\n<p>Generally, something like the above isn\u2019t considered a great idea. Most of the\ntime, the best practice will be to return an\n<a class=\"reference internal\" href=\"../../../request-response/#django.http.HttpResponseRedirect\" title=\"django.http.HttpResponseRedirect\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseRedirect</span></code></a> and redirect the user to a view\nyou\u2019ve written, passing the list of selected objects in the GET query string.\nThis allows you to provide complex interaction logic on the intermediary\npages. For example, if you wanted to provide a more complete export function,\nyou\u2019d want to let the user choose a format, and possibly a list of fields to\ninclude in the export. The best thing to do would be to write a small action\nthat redirects to your custom export view:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.contenttypes.models</span> <span class=\"kn\">import</span> <span class=\"n\">ContentType</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponseRedirect</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">export_selected_objects</span><span class=\"p\">(</span><span class=\"n\">modeladmin</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">selected</span> <span class=\"o\">=</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">,</span> <span class=\"n\">flat</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">ct</span> <span class=\"o\">=</span> <span class=\"n\">ContentType</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_for_model</span><span class=\"p\">(</span><span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">model</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">HttpResponseRedirect</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;/export/?ct=</span><span class=\"si\">%s</span><span class=\"s2\">&amp;ids=</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span>\n        <span class=\"o\">%</span> <span class=\"p\">(</span>\n            <span class=\"n\">ct</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">,</span>\n            <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">pk</span> <span class=\"ow\">in</span> <span class=\"n\">selected</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>As you can see, the action is rather short; all the complex logic would belong\nin your export view. This would need to deal with objects of any type, hence\nthe business with the <code class=\"docutils literal notranslate\"><span class=\"pre\">ContentType</span></code>.</p>\n<p>Writing this view is left as an exercise to the reader.</p>\n</div>\n<div class=\"section\" id=\"s-making-actions-available-site-wide\">\n<span id=\"s-adminsite-actions\"></span><span id=\"making-actions-available-site-wide\"></span><span id=\"adminsite-actions\"></span><h3>Making actions available site-wide<a class=\"headerlink\" href=\"#making-actions-available-site-wide\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.admin.AdminSite.add_action\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AdminSite.</span></code><code class=\"sig-name descname\"><span class=\"pre\">add_action</span></code>(<em><span class=\"n\"><span class=\"pre\">action</span></span></em>, <em><span class=\"n\"><span class=\"pre\">name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/admin/sites/#AdminSite.add_action\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.admin.AdminSite.add_action\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Some actions are best if they\u2019re made available to <em>any</em> object in the admin\nsite \u2013 the export action defined above would be a good candidate. You can\nmake an action globally available using <a class=\"reference internal\" href=\"#django.contrib.admin.AdminSite.add_action\" title=\"django.contrib.admin.AdminSite.add_action\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.add_action()</span></code></a>. For\nexample:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">add_action</span><span class=\"p\">(</span><span class=\"n\">export_selected_objects</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This makes the <code class=\"docutils literal notranslate\"><span class=\"pre\">export_selected_objects</span></code> action globally available as an\naction named \u201cexport_selected_objects\u201d. You can explicitly give the action\na name \u2013 good if you later want to programmatically <a class=\"reference internal\" href=\"#disabling-admin-actions\"><span class=\"std std-ref\">remove the action</span></a> \u2013 by passing a second argument to\n<a class=\"reference internal\" href=\"#django.contrib.admin.AdminSite.add_action\" title=\"django.contrib.admin.AdminSite.add_action\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.add_action()</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">add_action</span><span class=\"p\">(</span><span class=\"n\">export_selected_objects</span><span class=\"p\">,</span> <span class=\"s2\">&quot;export_selected&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-disabling-actions\">\n<span id=\"s-disabling-admin-actions\"></span><span id=\"disabling-actions\"></span><span id=\"disabling-admin-actions\"></span><h3>Disabling actions<a class=\"headerlink\" href=\"#disabling-actions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Sometimes you need to disable certain actions \u2013 especially those\n<a class=\"reference internal\" href=\"#adminsite-actions\"><span class=\"std std-ref\">registered site-wide</span></a> \u2013 for particular objects.\nThere\u2019s a few ways you can disable actions:</p>\n<div class=\"section\" id=\"s-disabling-a-site-wide-action\">\n<span id=\"disabling-a-site-wide-action\"></span><h4>Disabling a site-wide action<a class=\"headerlink\" href=\"#disabling-a-site-wide-action\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.admin.AdminSite.disable_action\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AdminSite.</span></code><code class=\"sig-name descname\"><span class=\"pre\">disable_action</span></code>(<em><span class=\"n\"><span class=\"pre\">name</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/admin/sites/#AdminSite.disable_action\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.admin.AdminSite.disable_action\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If you need to disable a <a class=\"reference internal\" href=\"#adminsite-actions\"><span class=\"std std-ref\">site-wide action</span></a> you can\ncall <a class=\"reference internal\" href=\"#django.contrib.admin.AdminSite.disable_action\" title=\"django.contrib.admin.AdminSite.disable_action\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AdminSite.disable_action()</span></code></a>.</p>\n<p>For example, you can use this method to remove the built-in \u201cdelete selected\nobjects\u201d action:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">disable_action</span><span class=\"p\">(</span><span class=\"s2\">&quot;delete_selected&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Once you\u2019ve done the above, that action will no longer be available\nsite-wide.</p>\n<p>If, however, you need to reenable a globally-disabled action for one\nparticular model, list it explicitly in your <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin.actions</span></code> list:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Globally disable delete selected</span>\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">disable_action</span><span class=\"p\">(</span><span class=\"s2\">&quot;delete_selected&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># This ModelAdmin will not have delete_selected available</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeModelAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;some_other_action&quot;</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n\n\n<span class=\"c1\"># This one will</span>\n<span class=\"k\">class</span> <span class=\"nc\">AnotherModelAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;delete_selected&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a_third_action&quot;</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-disabling-all-actions-for-a-particular-modeladmin\">\n<span id=\"disabling-all-actions-for-a-particular-modeladmin\"></span><h4>Disabling all actions for a particular <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a><a class=\"headerlink\" href=\"#disabling-all-actions-for-a-particular-modeladmin\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you want <em>no</em> bulk actions available for a given <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a>, set\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.actions\" title=\"django.contrib.admin.ModelAdmin.actions\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ModelAdmin.actions</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n</pre></div>\n</div>\n<p>This tells the <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin\" title=\"django.contrib.admin.ModelAdmin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a> to not display or allow any actions,\nincluding any <a class=\"reference internal\" href=\"#adminsite-actions\"><span class=\"std std-ref\">site-wide actions</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-conditionally-enabling-or-disabling-actions\">\n<span id=\"conditionally-enabling-or-disabling-actions\"></span><h4>Conditionally enabling or disabling actions<a class=\"headerlink\" href=\"#conditionally-enabling-or-disabling-actions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.admin.ModelAdmin.get_actions\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">ModelAdmin.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_actions</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/admin/options/#ModelAdmin.get_actions\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.admin.ModelAdmin.get_actions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Finally, you can conditionally enable or disable actions on a per-request\n(and hence per-user basis) by overriding <a class=\"reference internal\" href=\"#django.contrib.admin.ModelAdmin.get_actions\" title=\"django.contrib.admin.ModelAdmin.get_actions\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.get_actions()</span></code></a>.</p>\n<p>This returns a dictionary of actions allowed. The keys are action names, and\nthe values are <code class=\"docutils literal notranslate\"><span class=\"pre\">(function,</span> <span class=\"pre\">name,</span> <span class=\"pre\">short_description)</span></code> tuples.</p>\n<p>For example, if you only want users whose names begin with \u2018J\u2019 to be able\nto delete objects in bulk:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MyModelAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_actions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_actions</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">upper</span><span class=\"p\">()</span> <span class=\"o\">!=</span> <span class=\"s2\">&quot;J&quot;</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"s2\">&quot;delete_selected&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">actions</span><span class=\"p\">:</span>\n                <span class=\"k\">del</span> <span class=\"n\">actions</span><span class=\"p\">[</span><span class=\"s2\">&quot;delete_selected&quot;</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">actions</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-setting-permissions-for-actions\">\n<span id=\"s-admin-action-permissions\"></span><span id=\"setting-permissions-for-actions\"></span><span id=\"admin-action-permissions\"></span><h3>Setting permissions for actions<a class=\"headerlink\" href=\"#setting-permissions-for-actions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Actions may limit their availability to users with specific permissions by\nwrapping the action function with the <a class=\"reference internal\" href=\"#django.contrib.admin.action\" title=\"django.contrib.admin.action\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">action()</span></code></a>\ndecorator and passing the <code class=\"docutils literal notranslate\"><span class=\"pre\">permissions</span></code> argument:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;change&quot;</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"n\">modeladmin</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">make_published()</span></code> action will only be available to users that pass the\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.has_change_permission\" title=\"django.contrib.admin.ModelAdmin.has_change_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.has_change_permission()</span></code></a> check.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">permissions</span></code> has more than one permission, the action will be available\nas long as the user passes at least one of the checks.</p>\n<p>Available values for <code class=\"docutils literal notranslate\"><span class=\"pre\">permissions</span></code> and the corresponding method checks are:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'add'</span></code>: <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.has_add_permission\" title=\"django.contrib.admin.ModelAdmin.has_add_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.has_add_permission()</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'change'</span></code>: <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.has_change_permission\" title=\"django.contrib.admin.ModelAdmin.has_change_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.has_change_permission()</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'delete'</span></code>: <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.has_delete_permission\" title=\"django.contrib.admin.ModelAdmin.has_delete_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.has_delete_permission()</span></code></a></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">'view'</span></code>: <a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.has_view_permission\" title=\"django.contrib.admin.ModelAdmin.has_view_permission\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ModelAdmin.has_view_permission()</span></code></a></li>\n</ul>\n<p>You can specify any other value as long as you implement a corresponding\n<code class=\"docutils literal notranslate\"><span class=\"pre\">has_&lt;value&gt;_permission(self,</span> <span class=\"pre\">request)</span></code> method on the <code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code>.</p>\n<p>For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.auth</span> <span class=\"kn\">import</span> <span class=\"n\">get_permission_codename</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticleAdmin</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"n\">actions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;make_published&quot;</span><span class=\"p\">]</span>\n\n    <span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">(</span><span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;publish&quot;</span><span class=\"p\">])</span>\n    <span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n        <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">has_publish_permission</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;Does the user have the publish permission?&quot;&quot;&quot;</span>\n        <span class=\"n\">opts</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">opts</span>\n        <span class=\"n\">codename</span> <span class=\"o\">=</span> <span class=\"n\">get_permission_codename</span><span class=\"p\">(</span><span class=\"s2\">&quot;publish&quot;</span><span class=\"p\">,</span> <span class=\"n\">opts</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">has_perm</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">.</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">opts</span><span class=\"o\">.</span><span class=\"n\">app_label</span><span class=\"p\">,</span> <span class=\"n\">codename</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-action-decorator\">\n<span id=\"the-action-decorator\"></span><h2>The <code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code> decorator<a class=\"headerlink\" href=\"#the-action-decorator\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.admin.action\">\n<code class=\"sig-name descname\"><span class=\"pre\">action</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span></em>, <em><span class=\"n\"><span class=\"pre\">permissions</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">description</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/admin/decorators/#action\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.admin.action\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This decorator can be used for setting specific attributes on custom action\nfunctions that can be used with\n<a class=\"reference internal\" href=\"../#django.contrib.admin.ModelAdmin.actions\" title=\"django.contrib.admin.ModelAdmin.actions\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">actions</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">(</span>\n    <span class=\"n\">permissions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;publish&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;Mark selected stories as published&quot;</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This is equivalent to setting some attributes (with the original, longer\nnames) on the function directly:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">make_published</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">&quot;p&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">make_published</span><span class=\"o\">.</span><span class=\"n\">allowed_permissions</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;publish&quot;</span><span class=\"p\">]</span>\n<span class=\"n\">make_published</span><span class=\"o\">.</span><span class=\"n\">short_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Mark selected stories as published&quot;</span>\n</pre></div>\n</div>\n<p>Use of this decorator is not compulsory to make an action function, but it\ncan be useful to use it without arguments as a marker in your source to\nidentify the purpose of the function:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">action</span>\n<span class=\"k\">def</span> <span class=\"nf\">make_inactive</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n    <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">is_active</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In this case it will add no attributes to the function.</p>\n<p>Action descriptions are %-formatted and may contain <code class=\"docutils literal notranslate\"><span class=\"pre\">'%(verbose_name)s'</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">'%(verbose_name_plural)s'</span></code> placeholders, which are replaced,\nrespectively, by the model\u2019s <a class=\"reference internal\" href=\"../../../models/options/#django.db.models.Options.verbose_name\" title=\"django.db.models.Options.verbose_name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name</span></code></a>\nand <a class=\"reference internal\" href=\"../../../models/options/#django.db.models.Options.verbose_name_plural\" title=\"django.db.models.Options.verbose_name_plural\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">verbose_name_plural</span></code></a>.</p>\n</dd></dl>\n\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/contrib/admin/filters", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> List Filters", "N", "next"], ["ref/contrib/admin/index", "The Django admin site", "P", "previous"]], "sourcename": "ref/contrib/admin/actions.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Admin actions</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-actions\">Writing actions</a><ul>\n<li><a class=\"reference internal\" href=\"#writing-action-functions\">Writing action functions</a></li>\n<li><a class=\"reference internal\" href=\"#adding-actions-to-the-modeladmin\">Adding actions to the <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#handling-errors-in-actions\">Handling errors in actions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#advanced-action-techniques\">Advanced action techniques</a><ul>\n<li><a class=\"reference internal\" href=\"#actions-as-modeladmin-methods\">Actions as <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code> methods</a></li>\n<li><a class=\"reference internal\" href=\"#actions-that-provide-intermediate-pages\">Actions that provide intermediate pages</a></li>\n<li><a class=\"reference internal\" href=\"#making-actions-available-site-wide\">Making actions available site-wide</a></li>\n<li><a class=\"reference internal\" href=\"#disabling-actions\">Disabling actions</a><ul>\n<li><a class=\"reference internal\" href=\"#disabling-a-site-wide-action\">Disabling a site-wide action</a></li>\n<li><a class=\"reference internal\" href=\"#disabling-all-actions-for-a-particular-modeladmin\">Disabling all actions for a particular <code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ModelAdmin</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#conditionally-enabling-or-disabling-actions\">Conditionally enabling or disabling actions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#setting-permissions-for-actions\">Setting permissions for actions</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#the-action-decorator\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code> decorator</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/contrib/admin/actions", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}