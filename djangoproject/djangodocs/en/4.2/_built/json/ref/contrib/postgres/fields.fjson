{"parents": [{"link": "../../../", "title": "API Reference"}, {"link": "../../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code> packages"}, {"link": "../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres</span></code>"}], "prev": {"link": "../expressions/", "title": "PostgreSQL specific query expressions"}, "next": {"link": "../forms/", "title": "PostgreSQL specific form fields and widgets"}, "title": "PostgreSQL specific model fields", "meta": {}, "body": "<div class=\"section\" id=\"s-postgresql-specific-model-fields\">\n<span id=\"postgresql-specific-model-fields\"></span><h1>PostgreSQL specific model fields<a class=\"headerlink\" href=\"#postgresql-specific-model-fields\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>All of these fields are available from the <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres.fields</span></code>\nmodule.</p>\n<div class=\"section\" id=\"s-indexing-these-fields\">\n<span id=\"indexing-these-fields\"></span><h2>Indexing these fields<a class=\"headerlink\" href=\"#indexing-these-fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p><a class=\"reference internal\" href=\"../../../models/indexes/#django.db.models.Index\" title=\"django.db.models.Index\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Index</span></code></a> and <a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.Field.db_index\" title=\"django.db.models.Field.db_index\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.db_index</span></code></a> both create a\nB-tree index, which isn\u2019t particularly helpful when querying complex data types.\nIndexes such as <a class=\"reference internal\" href=\"../indexes/#django.contrib.postgres.indexes.GinIndex\" title=\"django.contrib.postgres.indexes.GinIndex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GinIndex</span></code></a> and\n<a class=\"reference internal\" href=\"../indexes/#django.contrib.postgres.indexes.GistIndex\" title=\"django.contrib.postgres.indexes.GistIndex\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">GistIndex</span></code></a> are better suited, though\nthe index choice is dependent on the queries that you\u2019re using. Generally, GiST\nmay be a good choice for the <a class=\"reference internal\" href=\"#range-fields\"><span class=\"std std-ref\">range fields</span></a> and\n<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.HStoreField\" title=\"django.contrib.postgres.fields.HStoreField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code></a>, and GIN may be helpful for <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-arrayfield\">\n<span id=\"arrayfield\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code><a class=\"headerlink\" href=\"#arrayfield\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.ArrayField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">ArrayField</span></code>(<em><span class=\"n\"><span class=\"pre\">base_field</span></span></em>, <em><span class=\"n\"><span class=\"pre\">size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/array/#ArrayField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A field for storing lists of data. Most field types can be used, and you\npass another field instance as the <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField.base_field\" title=\"django.contrib.postgres.fields.ArrayField.base_field\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">base_field</span></code></a>. You may also specify a <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField.size\" title=\"django.contrib.postgres.fields.ArrayField.size\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">size</span></code></a>. <code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code> can be nested to store multi-dimensional\narrays.</p>\n<p>If you give the field a <a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.Field.default\" title=\"django.db.models.Field.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a>, ensure\nit\u2019s a callable such as <code class=\"docutils literal notranslate\"><span class=\"pre\">list</span></code> (for an empty default) or a callable that\nreturns a list (such as a function). Incorrectly using <code class=\"docutils literal notranslate\"><span class=\"pre\">default=[]</span></code>\ncreates a mutable default that is shared between all instances of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code>.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.ArrayField.base_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">base_field</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.ArrayField.base_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is a required argument.</p>\n<p>Specifies the underlying data type and behavior for the array. It\nshould be an instance of a subclass of\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>. For example, it could be an\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.IntegerField\" title=\"django.db.models.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a> or a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>. Most field types are permitted,\nwith the exception of those handling relational data\n(<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.OneToOneField\" title=\"django.db.models.OneToOneField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">OneToOneField</span></code></a> and\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>) and file fields (\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.FileField\" title=\"django.db.models.FileField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileField</span></code></a> and\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.ImageField\" title=\"django.db.models.ImageField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ImageField</span></code></a>).</p>\n<p>It is possible to nest array fields - you can specify an instance of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code> as the <code class=\"docutils literal notranslate\"><span class=\"pre\">base_field</span></code>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.fields</span> <span class=\"kn\">import</span> <span class=\"n\">ArrayField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ChessBoard</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">board</span> <span class=\"o\">=</span> <span class=\"n\">ArrayField</span><span class=\"p\">(</span>\n        <span class=\"n\">ArrayField</span><span class=\"p\">(</span>\n            <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n        <span class=\"p\">),</span>\n        <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Transformation of values between the database and the model, validation\nof data and configuration, and serialization are all delegated to the\nunderlying base field.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.ArrayField.size\">\n<code class=\"sig-name descname\"><span class=\"pre\">size</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.ArrayField.size\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is an optional argument.</p>\n<p>If passed, the array will have a maximum size as specified. This will\nbe passed to the database, although PostgreSQL at present does not\nenforce the restriction.</p>\n</dd></dl>\n\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>When nesting <code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code>, whether you use the <code class=\"docutils literal notranslate\"><span class=\"pre\">size</span></code> parameter or not,\nPostgreSQL requires that the arrays are rectangular:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.fields</span> <span class=\"kn\">import</span> <span class=\"n\">ArrayField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Board</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">pieces</span> <span class=\"o\">=</span> <span class=\"n\">ArrayField</span><span class=\"p\">(</span><span class=\"n\">ArrayField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()))</span>\n\n\n<span class=\"c1\"># Valid</span>\n<span class=\"n\">Board</span><span class=\"p\">(</span>\n    <span class=\"n\">pieces</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Not valid</span>\n<span class=\"n\">Board</span><span class=\"p\">(</span>\n    <span class=\"n\">pieces</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n        <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"last\">If irregular shapes are required, then the underlying field should be made\nnullable and the values padded with <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-querying-arrayfield\">\n<span id=\"querying-arrayfield\"></span><h3>Querying <code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code><a class=\"headerlink\" href=\"#querying-arrayfield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are a number of custom lookups and transforms for <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>.\nWe will use the following example model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.fields</span> <span class=\"kn\">import</span> <span class=\"n\">ArrayField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Post</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">tags</span> <span class=\"o\">=</span> <span class=\"n\">ArrayField</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">),</span> <span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-contains\">\n<span id=\"s-std-fieldlookup-arrayfield.contains\"></span><span id=\"s-std:fieldlookup-arrayfield.contains\"></span><span id=\"contains\"></span><span id=\"std-fieldlookup-arrayfield.contains\"></span><span id=\"std:fieldlookup-arrayfield.contains\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code><a class=\"headerlink\" href=\"#contains\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup is overridden on <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>. The\nreturned objects will be those where the values passed are a subset of the\ndata. It uses the SQL operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;&gt;</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;First post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Second post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Third post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;tutorial&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__contains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__contains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Third post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__contains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;django&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-contained-by\">\n<span id=\"s-std-fieldlookup-arrayfield.contained_by\"></span><span id=\"s-std:fieldlookup-arrayfield.contained_by\"></span><span id=\"contained-by\"></span><span id=\"std-fieldlookup-arrayfield.contained_by\"></span><span id=\"std:fieldlookup-arrayfield.contained_by\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code><a class=\"headerlink\" href=\"#contained-by\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>This is the inverse of the <a class=\"reference internal\" href=\"#std-fieldlookup-arrayfield.contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup -\nthe objects returned will be those where the data is a subset of the values\npassed. It uses the SQL operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&#64;</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;First post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Second post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Third post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;tutorial&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__contained_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__contained_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tutorial&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;, &lt;Post: Third post&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-overlap\">\n<span id=\"s-std-fieldlookup-arrayfield.overlap\"></span><span id=\"s-std:fieldlookup-arrayfield.overlap\"></span><span id=\"overlap\"></span><span id=\"std-fieldlookup-arrayfield.overlap\"></span><span id=\"std:fieldlookup-arrayfield.overlap\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">overlap</span></code><a class=\"headerlink\" href=\"#overlap\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where the data shares any results with the values passed. Uses\nthe SQL operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;&amp;</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;First post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Second post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tutorial&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Third post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;tutorial&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__overlap</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__overlap</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;tutorial&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;, &lt;Post: Third post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__overlap</span><span class=\"o\">=</span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s2\">&quot;tags&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;, &lt;Post: Third post&gt;]&gt;</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.values()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">values_list()</span></code> as a right-hand\nside was added.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-len\">\n<span id=\"s-std-fieldlookup-arrayfield.len\"></span><span id=\"s-std:fieldlookup-arrayfield.len\"></span><span id=\"len\"></span><span id=\"std-fieldlookup-arrayfield.len\"></span><span id=\"std:fieldlookup-arrayfield.len\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">len</span></code><a class=\"headerlink\" href=\"#len\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns the length of the array. The lookups available afterward are those\navailable for <a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.IntegerField\" title=\"django.db.models.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;First post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Second post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__len</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: Second post&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-index-transforms\">\n<span id=\"s-std-fieldlookup-arrayfield.index\"></span><span id=\"s-std:fieldlookup-arrayfield.index\"></span><span id=\"index-transforms\"></span><span id=\"std-fieldlookup-arrayfield.index\"></span><span id=\"std:fieldlookup-arrayfield.index\"></span><h4>Index transforms<a class=\"headerlink\" href=\"#index-transforms\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Index transforms index into the array. Any non-negative integer can be used.\nThere are no errors if it exceeds the <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField.size\" title=\"django.contrib.postgres.fields.ArrayField.size\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">size</span></code></a> of the\narray. The lookups available after the transform are those from the\n<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField.base_field\" title=\"django.contrib.postgres.fields.ArrayField.base_field\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">base_field</span></code></a>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;First post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Second post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__0</span><span class=\"o\">=</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__1__iexact</span><span class=\"o\">=</span><span class=\"s2\">&quot;Django&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__276</span><span class=\"o\">=</span><span class=\"s2\">&quot;javascript&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">PostgreSQL uses 1-based indexing for array fields when writing raw SQL.\nHowever these indexes and those used in <a class=\"reference internal\" href=\"#std-fieldlookup-arrayfield.slice\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">slices</span></code></a>\nuse 0-based indexing to be consistent with Python.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-slice-transforms\">\n<span id=\"s-std-fieldlookup-arrayfield.slice\"></span><span id=\"s-std:fieldlookup-arrayfield.slice\"></span><span id=\"slice-transforms\"></span><span id=\"std-fieldlookup-arrayfield.slice\"></span><span id=\"std:fieldlookup-arrayfield.slice\"></span><h4>Slice transforms<a class=\"headerlink\" href=\"#slice-transforms\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Slice transforms take a slice of the array. Any two non-negative integers can\nbe used, separated by a single underscore. The lookups available after the\ntransform do not change. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;First post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Second post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Third post&quot;</span><span class=\"p\">,</span> <span class=\"n\">tags</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;django&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;python&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__0_1</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">tags__0_2__contains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;thoughts&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Post: First post&gt;, &lt;Post: Second post&gt;]&gt;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">PostgreSQL uses 1-based indexing for array fields when writing raw SQL.\nHowever these slices and those used in <a class=\"reference internal\" href=\"#std-fieldlookup-arrayfield.index\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">indexes</span></code></a>\nuse 0-based indexing to be consistent with Python.</p>\n</div>\n<div class=\"admonition-multidimensional-arrays-with-indexes-and-slices admonition\">\n<p class=\"first admonition-title\">Multidimensional arrays with indexes and slices</p>\n<p class=\"last\">PostgreSQL has some rather esoteric behavior when using indexes and slices\non multidimensional arrays. It will always work to use indexes to reach\ndown to the final underlying data, but most other slices behave strangely\nat the database level and cannot be supported in a logical, consistent\nfashion by Django.</p>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-citext-fields\">\n<span id=\"citext-fields\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">CIText</span></code> fields<a class=\"headerlink\" href=\"#citext-fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.CIText\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">CIText</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/citext/#CIText\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.CIText\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2.</span></p>\n</div>\n<p>A mixin to create case-insensitive text fields backed by the <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/citext.html\">citext</a> type.\nRead about <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/citext.html#id-1.11.7.19.9\">the performance considerations</a> prior to using it.</p>\n<p>To use <code class=\"docutils literal notranslate\"><span class=\"pre\">citext</span></code>, use the <a class=\"reference internal\" href=\"../operations/#django.contrib.postgres.operations.CITextExtension\" title=\"django.contrib.postgres.operations.CITextExtension\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CITextExtension</span></code></a> operation to\n<a class=\"reference internal\" href=\"../operations/#create-postgresql-extensions\"><span class=\"std std-ref\">set up the citext extension</span></a> in\nPostgreSQL before the first <code class=\"docutils literal notranslate\"><span class=\"pre\">CreateModel</span></code> migration operation.</p>\n<p>If you\u2019re using an <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">CIText</span></code> fields, you must add <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.postgres'</span></code> in your\n<a class=\"reference internal\" href=\"../../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, otherwise field values will appear as strings\nlike <code class=\"docutils literal notranslate\"><span class=\"pre\">'{thoughts,django}'</span></code>.</p>\n<p>Several fields that use the mixin are provided:</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.CICharField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">CICharField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/citext/#CICharField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.CICharField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span><code class=\"docutils literal notranslate\"><span class=\"pre\">CICharField</span></code> is deprecated in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CharField(db_collation=&quot;\u2026&quot;)</span></code> with a case-insensitive\nnon-deterministic collation.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.CIEmailField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">CIEmailField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/citext/#CIEmailField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.CIEmailField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span><code class=\"docutils literal notranslate\"><span class=\"pre\">CIEmailField</span></code> is deprecated in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">EmailField(db_collation=&quot;\u2026&quot;)</span></code> with a case-insensitive\nnon-deterministic collation.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.CITextField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">CITextField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/citext/#CITextField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.CITextField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"deprecated\">\n<p><span class=\"versionmodified deprecated\">Deprecated since version 4.2: </span><code class=\"docutils literal notranslate\"><span class=\"pre\">CITextField</span></code> is deprecated in favor of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">TextField(db_collation=&quot;\u2026&quot;)</span></code> with a case-insensitive\nnon-deterministic collation.</p>\n</div>\n<p>These fields subclass <a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.CharField\" title=\"django.db.models.CharField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CharField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.EmailField\" title=\"django.db.models.EmailField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">EmailField</span></code></a>, and\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.TextField\" title=\"django.db.models.TextField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">TextField</span></code></a>, respectively.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code> won\u2019t be enforced in the database since <code class=\"docutils literal notranslate\"><span class=\"pre\">citext</span></code> behaves\nsimilar to PostgreSQL\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">text</span></code> type.</p>\n</dd></dl>\n\n<div class=\"admonition-case-insensitive-collations admonition\">\n<p class=\"first admonition-title\">Case-insensitive collations</p>\n<p class=\"last\">It\u2019s preferable to use non-deterministic collations instead of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">citext</span></code> extension. You can create them using the\n<a class=\"reference internal\" href=\"../operations/#django.contrib.postgres.operations.CreateCollation\" title=\"django.contrib.postgres.operations.CreateCollation\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CreateCollation</span></code></a> migration\noperation. For more details, see <a class=\"reference internal\" href=\"../operations/#manage-postgresql-collations\"><span class=\"std std-ref\">Managing collations using migrations</span></a> and\nthe PostgreSQL documentation about <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/collation.html#COLLATION-NONDETERMINISTIC\">non-deterministic collations</a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-hstorefield\">\n<span id=\"hstorefield\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code><a class=\"headerlink\" href=\"#hstorefield\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.HStoreField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HStoreField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/hstore/#HStoreField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.HStoreField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A field for storing key-value pairs. The Python data type used is a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>. Keys must be strings, and values may be either strings or nulls\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> in Python).</p>\n<p>To use this field, you\u2019ll need to:</p>\n<ol class=\"arabic simple\">\n<li>Add <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.postgres'</span></code> in your <a class=\"reference internal\" href=\"../../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</li>\n<li><a class=\"reference internal\" href=\"../operations/#create-postgresql-extensions\"><span class=\"std std-ref\">Set up the hstore extension</span></a> in\nPostgreSQL.</li>\n</ol>\n<p>You\u2019ll see an error like <code class=\"docutils literal notranslate\"><span class=\"pre\">can't</span> <span class=\"pre\">adapt</span> <span class=\"pre\">type</span> <span class=\"pre\">'dict'</span></code> if you skip the first\nstep, or <code class=\"docutils literal notranslate\"><span class=\"pre\">type</span> <span class=\"pre\">&quot;hstore&quot;</span> <span class=\"pre\">does</span> <span class=\"pre\">not</span> <span class=\"pre\">exist</span></code> if you skip the second.</p>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">On occasions it may be useful to require or restrict the keys which are\nvalid for a given field. This can be done using the\n<a class=\"reference internal\" href=\"../validators/#django.contrib.postgres.validators.KeysValidator\" title=\"django.contrib.postgres.validators.KeysValidator\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">KeysValidator</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-querying-hstorefield\">\n<span id=\"querying-hstorefield\"></span><h3>Querying <code class=\"docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code><a class=\"headerlink\" href=\"#querying-hstorefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>In addition to the ability to query by key, there are a number of custom\nlookups available for <code class=\"docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code>.</p>\n<p>We will use the following example model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.fields</span> <span class=\"kn\">import</span> <span class=\"n\">HStoreField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">HStoreField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-key-lookups\">\n<span id=\"s-std-fieldlookup-hstorefield.key\"></span><span id=\"s-std:fieldlookup-hstorefield.key\"></span><span id=\"key-lookups\"></span><span id=\"std-fieldlookup-hstorefield.key\"></span><span id=\"std:fieldlookup-hstorefield.key\"></span><h4>Key lookups<a class=\"headerlink\" href=\"#key-lookups\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To query based on a given key, you can use that key as the lookup name:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__breed</span><span class=\"o\">=</span><span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>You can chain other lookups after key lookups:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__breed__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;l&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>or use <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> expressions to annotate a key value. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rufus</span> <span class=\"o\">=</span> <span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">breed</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;data__breed&quot;</span><span class=\"p\">))[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">rufus</span><span class=\"o\">.</span><span class=\"n\">breed</span>\n<span class=\"go\">&#39;labrador&#39;</span>\n</pre></div>\n</div>\n<p>If the key you wish to query by clashes with the name of another lookup, you\nneed to use the <a class=\"reference internal\" href=\"#std-fieldlookup-hstorefield.contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">hstorefield.contains</span></code></a> lookup instead.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Key transforms can also be chained with: <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-icontains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">icontains</span></code></a>, <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-endswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">endswith</span></code></a>, <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-iendswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iendswith</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-iexact\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iexact</span></code></a>, <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-regex\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">regex</span></code></a>, <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-iregex\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">iregex</span></code></a>, <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-startswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">startswith</span></code></a>,\nand <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-istartswith\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">istartswith</span></code></a> lookups.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Since any string could be a key in a hstore value, any lookup other than\nthose listed below will be interpreted as a key lookup. No errors are\nraised. Be extra careful for typing mistakes, and always check your queries\nwork as you intend.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-std-fieldlookup-hstorefield.contains\">\n<span id=\"s-std:fieldlookup-hstorefield.contains\"></span><span id=\"s-id1\"></span><span id=\"std-fieldlookup-hstorefield.contains\"></span><span id=\"std:fieldlookup-hstorefield.contains\"></span><span id=\"id1\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code><a class=\"headerlink\" href=\"#std-fieldlookup-hstorefield.contains\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>The <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup is overridden on\n<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.HStoreField\" title=\"django.contrib.postgres.fields.HStoreField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code></a>. The returned objects are\nthose where the given <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> of key-value pairs are all contained in the\nfield. It uses the SQL operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;&gt;</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contains</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contains</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-std-fieldlookup-hstorefield.contained_by\">\n<span id=\"s-std:fieldlookup-hstorefield.contained_by\"></span><span id=\"s-id2\"></span><span id=\"std-fieldlookup-hstorefield.contained_by\"></span><span id=\"std:fieldlookup-hstorefield.contained_by\"></span><span id=\"id2\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code><a class=\"headerlink\" href=\"#std-fieldlookup-hstorefield.contained_by\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>This is the inverse of the <a class=\"reference internal\" href=\"#std-fieldlookup-hstorefield.contains\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">contains</span></code></a> lookup -\nthe objects returned will be those where the key-value pairs on the object are\na subset of those in the value passed. It uses the SQL operator <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&#64;</span></code>. For\nexample:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contained_by</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;, &lt;Dog: Fred&gt;]&gt;</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__contained_by</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">})</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Fred&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-has-key\">\n<span id=\"s-std-fieldlookup-hstorefield.has_key\"></span><span id=\"s-std:fieldlookup-hstorefield.has_key\"></span><span id=\"has-key\"></span><span id=\"std-fieldlookup-hstorefield.has_key\"></span><span id=\"std:fieldlookup-hstorefield.has_key\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">has_key</span></code><a class=\"headerlink\" href=\"#has-key\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where the given key is in the data. Uses the SQL operator\n<code class=\"docutils literal notranslate\"><span class=\"pre\">?</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__has_key</span><span class=\"o\">=</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-has-any-keys\">\n<span id=\"s-std-fieldlookup-hstorefield.has_any_keys\"></span><span id=\"s-std:fieldlookup-hstorefield.has_any_keys\"></span><span id=\"has-any-keys\"></span><span id=\"std-fieldlookup-hstorefield.has_any_keys\"></span><span id=\"std:fieldlookup-hstorefield.has_any_keys\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">has_any_keys</span></code><a class=\"headerlink\" href=\"#has-any-keys\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where any of the given keys are in the data. Uses the SQL\noperator <code class=\"docutils literal notranslate\"><span class=\"pre\">?|</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Fred&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__has_any_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-has-keys\">\n<span id=\"s-std-fieldlookup-hstorefield.has_keys\"></span><span id=\"s-std:fieldlookup-hstorefield.has_keys\"></span><span id=\"has-keys\"></span><span id=\"std-fieldlookup-hstorefield.has_keys\"></span><span id=\"std:fieldlookup-hstorefield.has_keys\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">has_keys</span></code><a class=\"headerlink\" href=\"#has-keys\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where all of the given keys are in the data. Uses the SQL operator\n<code class=\"docutils literal notranslate\"><span class=\"pre\">?&amp;</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__has_keys</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-keys\">\n<span id=\"s-std-fieldlookup-hstorefield.keys\"></span><span id=\"s-std:fieldlookup-hstorefield.keys\"></span><span id=\"keys\"></span><span id=\"std-fieldlookup-hstorefield.keys\"></span><span id=\"std:fieldlookup-hstorefield.keys\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">keys</span></code><a class=\"headerlink\" href=\"#keys\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where the array of keys is the given value. Note that the order\nis not guaranteed to be reliable, so this transform is mainly useful for using\nin conjunction with lookups on\n<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>. Uses the SQL function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">akeys()</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;toy&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bone&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__keys__overlap</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;toy&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Rufus&gt;, &lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-values\">\n<span id=\"s-std-fieldlookup-hstorefield.values\"></span><span id=\"s-std:fieldlookup-hstorefield.values\"></span><span id=\"values\"></span><span id=\"std-fieldlookup-hstorefield.values\"></span><span id=\"std:fieldlookup-hstorefield.values\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code><a class=\"headerlink\" href=\"#values\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Returns objects where the array of values is the given value. Note that the\norder is not guaranteed to be reliable, so this transform is mainly useful for\nusing in conjunction with lookups on\n<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.ArrayField\" title=\"django.contrib.postgres.fields.ArrayField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a>. Uses the SQL function\n<code class=\"docutils literal notranslate\"><span class=\"pre\">avals()</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Rufus&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;labrador&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Meg&quot;</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;breed&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;owner&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;Bob&quot;</span><span class=\"p\">})</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Dog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">data__values__contains</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;collie&quot;</span><span class=\"p\">])</span>\n<span class=\"go\">&lt;QuerySet [&lt;Dog: Meg&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-range-fields\">\n<span id=\"s-id3\"></span><span id=\"range-fields\"></span><span id=\"id3\"></span><h2>Range Fields<a class=\"headerlink\" href=\"#range-fields\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>There are five range field types, corresponding to the built-in range types in\nPostgreSQL. These fields are used to store a range of values; for example the\nstart and end timestamps of an event, or the range of ages an activity is\nsuitable for.</p>\n<p>All of the range fields translate to <a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/docs/basic/pgtypes.html#adapt-range\" title=\"(in psycopg)\"><span class=\"xref std std-ref\">psycopg Range objects</span></a> in Python, but also accept tuples as input if no bounds\ninformation is necessary. The default is lower bound included, upper bound\nexcluded, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">[)</span></code> (see the PostgreSQL documentation for details about\n<a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-IO\">different bounds</a>). The default bounds can be changed for non-discrete range\nfields (<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.DateTimeRangeField\" title=\"django.contrib.postgres.fields.DateTimeRangeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeRangeField</span></code></a> and <a class=\"reference internal\" href=\"#django.contrib.postgres.fields.DecimalRangeField\" title=\"django.contrib.postgres.fields.DecimalRangeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DecimalRangeField</span></code></a>) by using\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">default_bounds</span></code> argument.</p>\n<div class=\"section\" id=\"s-integerrangefield\">\n<span id=\"integerrangefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerRangeField</span></code><a class=\"headerlink\" href=\"#integerrangefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.IntegerRangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">IntegerRangeField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#IntegerRangeField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.IntegerRangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Stores a range of integers. Based on an\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.IntegerField\" title=\"django.db.models.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a>. Represented by an <code class=\"docutils literal notranslate\"><span class=\"pre\">int4range</span></code> in\nthe database and a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.NumericRange</span></code> in Python.</p>\n<p>Regardless of the bounds specified when saving the data, PostgreSQL always\nreturns a range in a canonical form that includes the lower bound and\nexcludes the upper bound, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">[)</span></code>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-bigintegerrangefield\">\n<span id=\"bigintegerrangefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">BigIntegerRangeField</span></code><a class=\"headerlink\" href=\"#bigintegerrangefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.BigIntegerRangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">BigIntegerRangeField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#BigIntegerRangeField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.BigIntegerRangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Stores a range of large integers. Based on a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BigIntegerField\" title=\"django.db.models.BigIntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BigIntegerField</span></code></a>. Represented by an <code class=\"docutils literal notranslate\"><span class=\"pre\">int8range</span></code>\nin the database and a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.NumericRange</span></code> in Python.</p>\n<p>Regardless of the bounds specified when saving the data, PostgreSQL always\nreturns a range in a canonical form that includes the lower bound and\nexcludes the upper bound, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">[)</span></code>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-decimalrangefield\">\n<span id=\"decimalrangefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">DecimalRangeField</span></code><a class=\"headerlink\" href=\"#decimalrangefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.DecimalRangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">DecimalRangeField</span></code>(<em><span class=\"n\"><span class=\"pre\">default_bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'[)'</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#DecimalRangeField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.DecimalRangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Stores a range of floating point values. Based on a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.DecimalField\" title=\"django.db.models.DecimalField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DecimalField</span></code></a>. Represented by a <code class=\"docutils literal notranslate\"><span class=\"pre\">numrange</span></code> in\nthe database and a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.NumericRange</span></code> in Python.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.DecimalRangeField.default_bounds\">\n<code class=\"sig-name descname\"><span class=\"pre\">default_bounds</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.DecimalRangeField.default_bounds\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. The value of <code class=\"docutils literal notranslate\"><span class=\"pre\">bounds</span></code> for list and tuple inputs. The\ndefault is lower bound included, upper bound excluded, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">[)</span></code>\n(see the PostgreSQL documentation for details about\n<a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-IO\">different bounds</a>). <code class=\"docutils literal notranslate\"><span class=\"pre\">default_bounds</span></code> is not used for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.NumericRange</span></code> inputs.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-datetimerangefield\">\n<span id=\"datetimerangefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeRangeField</span></code><a class=\"headerlink\" href=\"#datetimerangefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.DateTimeRangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">DateTimeRangeField</span></code>(<em><span class=\"n\"><span class=\"pre\">default_bounds</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'[)'</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#DateTimeRangeField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.DateTimeRangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Stores a range of timestamps. Based on a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>. Represented by a <code class=\"docutils literal notranslate\"><span class=\"pre\">tstzrange</span></code> in\nthe database and a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.DateTimeTZRange</span></code> in Python.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.DateTimeRangeField.default_bounds\">\n<code class=\"sig-name descname\"><span class=\"pre\">default_bounds</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.DateTimeRangeField.default_bounds\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Optional. The value of <code class=\"docutils literal notranslate\"><span class=\"pre\">bounds</span></code> for list and tuple inputs. The\ndefault is lower bound included, upper bound excluded, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">[)</span></code>\n(see the PostgreSQL documentation for details about\n<a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-IO\">different bounds</a>). <code class=\"docutils literal notranslate\"><span class=\"pre\">default_bounds</span></code> is not used for\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.DateTimeTZRange</span></code> inputs.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-daterangefield\">\n<span id=\"daterangefield\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">DateRangeField</span></code><a class=\"headerlink\" href=\"#daterangefield\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.DateRangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">DateRangeField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#DateRangeField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.DateRangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Stores a range of dates. Based on a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.DateField\" title=\"django.db.models.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a>. Represented by a <code class=\"docutils literal notranslate\"><span class=\"pre\">daterange</span></code> in the\ndatabase and a <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.psycopg_any.DateRange</span></code> in\nPython.</p>\n<p>Regardless of the bounds specified when saving the data, PostgreSQL always\nreturns a range in a canonical form that includes the lower bound and\nexcludes the upper bound, that is <code class=\"docutils literal notranslate\"><span class=\"pre\">[)</span></code>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-querying-range-fields\">\n<span id=\"querying-range-fields\"></span><h3>Querying Range Fields<a class=\"headerlink\" href=\"#querying-range-fields\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>There are a number of custom lookups and transforms for range fields. They are\navailable on all the above fields, but we will use the following example\nmodel:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.postgres.fields</span> <span class=\"kn\">import</span> <span class=\"n\">IntegerRangeField</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Event</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"n\">ages</span> <span class=\"o\">=</span> <span class=\"n\">IntegerRangeField</span><span class=\"p\">()</span>\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre></div>\n</div>\n<p>We will also use the following example objects:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Soft play&quot;</span><span class=\"p\">,</span> <span class=\"n\">ages</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">now</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Pub trip&quot;</span><span class=\"p\">,</span> <span class=\"n\">ages</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">),</span> <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>and <code class=\"docutils literal notranslate\"><span class=\"pre\">NumericRange</span></code>:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.postgresql.psycopg_any</span> <span class=\"kn\">import</span> <span class=\"n\">NumericRange</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-containment-functions\">\n<span id=\"containment-functions\"></span><h4>Containment functions<a class=\"headerlink\" href=\"#containment-functions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>As with other PostgreSQL fields, there are three standard containment\noperators: <code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">overlap</span></code>, using the SQL\noperators <code class=\"docutils literal notranslate\"><span class=\"pre\">&#64;&gt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;&#64;</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">&amp;&amp;</span></code> respectively.</p>\n<div class=\"section\" id=\"s-std-fieldlookup-rangefield.contains\">\n<span id=\"s-std:fieldlookup-rangefield.contains\"></span><span id=\"s-id4\"></span><span id=\"std-fieldlookup-rangefield.contains\"></span><span id=\"std:fieldlookup-rangefield.contains\"></span><span id=\"id4\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code><a class=\"headerlink\" href=\"#std-fieldlookup-rangefield.contains\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__contains</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-std-fieldlookup-rangefield.contained_by\">\n<span id=\"s-std:fieldlookup-rangefield.contained_by\"></span><span id=\"s-id5\"></span><span id=\"std-fieldlookup-rangefield.contained_by\"></span><span id=\"std:fieldlookup-rangefield.contained_by\"></span><span id=\"id5\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code><a class=\"headerlink\" href=\"#std-fieldlookup-rangefield.contained_by\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__contained_by</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code> lookup is also available on the non-range field types:\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.SmallAutoField\" title=\"django.db.models.SmallAutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SmallAutoField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a>, <a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BigAutoField\" title=\"django.db.models.BigAutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BigAutoField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.SmallIntegerField\" title=\"django.db.models.SmallIntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SmallIntegerField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.IntegerField\" title=\"django.db.models.IntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BigIntegerField\" title=\"django.db.models.BigIntegerField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BigIntegerField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.DecimalField\" title=\"django.db.models.DecimalField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DecimalField</span></code></a>, <a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.FloatField\" title=\"django.db.models.FloatField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FloatField</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.DateField\" title=\"django.db.models.DateField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateField</span></code></a>, and\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.backends.postgresql.psycopg_any</span> <span class=\"kn\">import</span> <span class=\"n\">DateTimeTZRange</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">start__contained_by</span><span class=\"o\">=</span><span class=\"n\">DateTimeTZRange</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">+</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-std-fieldlookup-rangefield.overlap\">\n<span id=\"s-std:fieldlookup-rangefield.overlap\"></span><span id=\"s-id6\"></span><span id=\"std-fieldlookup-rangefield.overlap\"></span><span id=\"std:fieldlookup-rangefield.overlap\"></span><span id=\"id6\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">overlap</span></code><a class=\"headerlink\" href=\"#std-fieldlookup-rangefield.overlap\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__overlap</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-comparison-functions\">\n<span id=\"comparison-functions\"></span><h4>Comparison functions<a class=\"headerlink\" href=\"#comparison-functions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Range fields support the standard lookups: <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-lt\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">lt</span></code></a>, <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-gt\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">gt</span></code></a>,\n<a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-lte\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">lte</span></code></a> and <a class=\"reference internal\" href=\"../../../models/querysets/#std-fieldlookup-gte\"><code class=\"xref std std-lookup docutils literal notranslate\"><span class=\"pre\">gte</span></code></a>. These are not particularly helpful - they\ncompare the lower bounds first and then the upper bounds only if necessary.\nThis is also the strategy used to order by a range field. It is better to use\nthe specific range comparison operators.</p>\n<div class=\"section\" id=\"s-fully-lt\">\n<span id=\"s-std-fieldlookup-rangefield.fully_lt\"></span><span id=\"s-std:fieldlookup-rangefield.fully_lt\"></span><span id=\"fully-lt\"></span><span id=\"std-fieldlookup-rangefield.fully_lt\"></span><span id=\"std:fieldlookup-rangefield.fully_lt\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">fully_lt</span></code><a class=\"headerlink\" href=\"#fully-lt\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>The returned ranges are strictly less than the passed range. In other words,\nall the points in the returned range are less than all those in the passed\nrange.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__fully_lt</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-fully-gt\">\n<span id=\"s-std-fieldlookup-rangefield.fully_gt\"></span><span id=\"s-std:fieldlookup-rangefield.fully_gt\"></span><span id=\"fully-gt\"></span><span id=\"std-fieldlookup-rangefield.fully_gt\"></span><span id=\"std:fieldlookup-rangefield.fully_gt\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">fully_gt</span></code><a class=\"headerlink\" href=\"#fully-gt\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>The returned ranges are strictly greater than the passed range. In other words,\nthe all the points in the returned range are greater than all those in the\npassed range.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__fully_gt</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Pub trip&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-not-lt\">\n<span id=\"s-std-fieldlookup-rangefield.not_lt\"></span><span id=\"s-std:fieldlookup-rangefield.not_lt\"></span><span id=\"not-lt\"></span><span id=\"std-fieldlookup-rangefield.not_lt\"></span><span id=\"std:fieldlookup-rangefield.not_lt\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">not_lt</span></code><a class=\"headerlink\" href=\"#not-lt\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>The returned ranges do not contain any points less than the passed range, that\nis the lower bound of the returned range is at least the lower bound of the\npassed range.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__not_lt</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;, &lt;Event: Pub trip&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-not-gt\">\n<span id=\"s-std-fieldlookup-rangefield.not_gt\"></span><span id=\"s-std:fieldlookup-rangefield.not_gt\"></span><span id=\"not-gt\"></span><span id=\"std-fieldlookup-rangefield.not_gt\"></span><span id=\"std:fieldlookup-rangefield.not_gt\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">not_gt</span></code><a class=\"headerlink\" href=\"#not-gt\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>The returned ranges do not contain any points greater than the passed range, that\nis the upper bound of the returned range is at most the upper bound of the\npassed range.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__not_gt</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-adjacent-to\">\n<span id=\"s-std-fieldlookup-rangefield.adjacent_to\"></span><span id=\"s-std:fieldlookup-rangefield.adjacent_to\"></span><span id=\"adjacent-to\"></span><span id=\"std-fieldlookup-rangefield.adjacent_to\"></span><span id=\"std:fieldlookup-rangefield.adjacent_to\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">adjacent_to</span></code><a class=\"headerlink\" href=\"#adjacent-to\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>The returned ranges share a bound with the passed range.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__adjacent_to</span><span class=\"o\">=</span><span class=\"n\">NumericRange</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;, &lt;Event: Pub trip&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-querying-using-the-bounds\">\n<span id=\"querying-using-the-bounds\"></span><h4>Querying using the bounds<a class=\"headerlink\" href=\"#querying-using-the-bounds\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Range fields support several extra lookups.</p>\n<div class=\"section\" id=\"s-startswith\">\n<span id=\"s-std-fieldlookup-rangefield.startswith\"></span><span id=\"s-std:fieldlookup-rangefield.startswith\"></span><span id=\"startswith\"></span><span id=\"std-fieldlookup-rangefield.startswith\"></span><span id=\"std:fieldlookup-rangefield.startswith\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code><a class=\"headerlink\" href=\"#startswith\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returned objects have the given lower bound. Can be chained to valid lookups\nfor the base field.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__startswith</span><span class=\"o\">=</span><span class=\"mi\">21</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Pub trip&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-endswith\">\n<span id=\"s-std-fieldlookup-rangefield.endswith\"></span><span id=\"s-std:fieldlookup-rangefield.endswith\"></span><span id=\"endswith\"></span><span id=\"std-fieldlookup-rangefield.endswith\"></span><span id=\"std:fieldlookup-rangefield.endswith\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">endswith</span></code><a class=\"headerlink\" href=\"#endswith\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returned objects have the given upper bound. Can be chained to valid lookups\nfor the base field.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__endswith</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-isempty\">\n<span id=\"s-std-fieldlookup-rangefield.isempty\"></span><span id=\"s-std:fieldlookup-rangefield.isempty\"></span><span id=\"isempty\"></span><span id=\"std-fieldlookup-rangefield.isempty\"></span><span id=\"std:fieldlookup-rangefield.isempty\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">isempty</span></code><a class=\"headerlink\" href=\"#isempty\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returned objects are empty ranges. Can be chained to valid lookups for a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a>.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__isempty</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-lower-inc\">\n<span id=\"s-std-fieldlookup-rangefield.lower_inc\"></span><span id=\"s-std:fieldlookup-rangefield.lower_inc\"></span><span id=\"lower-inc\"></span><span id=\"std-fieldlookup-rangefield.lower_inc\"></span><span id=\"std:fieldlookup-rangefield.lower_inc\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">lower_inc</span></code><a class=\"headerlink\" href=\"#lower-inc\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returns objects that have inclusive or exclusive lower bounds, depending on the\nboolean value passed. Can be chained to valid lookups for a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a>.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__lower_inc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Soft play&gt;, &lt;Event: Pub trip&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-lower-inf\">\n<span id=\"s-std-fieldlookup-rangefield.lower_inf\"></span><span id=\"s-std:fieldlookup-rangefield.lower_inf\"></span><span id=\"lower-inf\"></span><span id=\"std-fieldlookup-rangefield.lower_inf\"></span><span id=\"std:fieldlookup-rangefield.lower_inf\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">lower_inf</span></code><a class=\"headerlink\" href=\"#lower-inf\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returns objects that have unbounded (infinite) or bounded lower bound,\ndepending on the boolean value passed. Can be chained to valid lookups for a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a>.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__lower_inf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-upper-inc\">\n<span id=\"s-std-fieldlookup-rangefield.upper_inc\"></span><span id=\"s-std:fieldlookup-rangefield.upper_inc\"></span><span id=\"upper-inc\"></span><span id=\"std-fieldlookup-rangefield.upper_inc\"></span><span id=\"std:fieldlookup-rangefield.upper_inc\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_inc</span></code><a class=\"headerlink\" href=\"#upper-inc\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returns objects that have inclusive or exclusive upper bounds, depending on the\nboolean value passed. Can be chained to valid lookups for a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a>.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__upper_inc</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet []&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-upper-inf\">\n<span id=\"s-std-fieldlookup-rangefield.upper_inf\"></span><span id=\"s-std:fieldlookup-rangefield.upper_inf\"></span><span id=\"upper-inf\"></span><span id=\"std-fieldlookup-rangefield.upper_inf\"></span><span id=\"std:fieldlookup-rangefield.upper_inf\"></span><h5><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_inf</span></code><a class=\"headerlink\" href=\"#upper-inf\" title=\"Permalink to this headline\">\u00b6</a></h5>\n<p>Returns objects that have unbounded (infinite) or bounded upper bound,\ndepending on the boolean value passed. Can be chained to valid lookups for a\n<a class=\"reference internal\" href=\"../../../models/fields/#django.db.models.BooleanField\" title=\"django.db.models.BooleanField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code></a>.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">ages__upper_inf</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QuerySet [&lt;Event: Pub trip&gt;]&gt;</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-defining-your-own-range-types\">\n<span id=\"defining-your-own-range-types\"></span><h3>Defining your own range types<a class=\"headerlink\" href=\"#defining-your-own-range-types\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>PostgreSQL allows the definition of custom range types. Django\u2019s model and form\nfield implementations use base classes below, and <code class=\"docutils literal notranslate\"><span class=\"pre\">psycopg</span></code> provides a\n<a class=\"reference external\" href=\"https://www.psycopg.org/psycopg3/docs/basic/pgtypes.html#psycopg.types.range.register_range\" title=\"(in psycopg)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">register_range()</span></code></a> to allow use of custom\nrange types.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RangeField</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">options</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#RangeField\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Base class for model range fields.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeField.base_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">base_field</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeField.base_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The model field class to use.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeField.range_type\">\n<code class=\"sig-name descname\"><span class=\"pre\">range_type</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeField.range_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The range type to use.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeField.form_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">form_field</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeField.form_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The form field class to use. Should be a subclass of\n<a class=\"reference internal\" href=\"#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField\" title=\"django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.postgres.forms.BaseRangeField</span></code></a>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">django.contrib.postgres.forms.</span></code><code class=\"sig-name descname\"><span class=\"pre\">BaseRangeField</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Base class for form range fields.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField.base_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">base_field</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField.base_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The form field to use.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField.range_type\">\n<code class=\"sig-name descname\"><span class=\"pre\">range_type</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.django.contrib.postgres.forms.BaseRangeField.range_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The range type to use.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-range-operators\">\n<span id=\"range-operators\"></span><h3>Range operators<a class=\"headerlink\" href=\"#range-operators\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeOperators\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RangeOperators</span></code><a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#RangeOperators\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeOperators\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>PostgreSQL provides a set of SQL operators that can be used together with the\nrange data types (see <a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/functions-range.html#RANGE-OPERATORS-TABLE\">the PostgreSQL documentation for the full details of\nrange operators</a>). This class is meant as a\nconvenient method to avoid typos. The operator names overlap with the names of\ncorresponding lookups.</p>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">RangeOperators</span><span class=\"p\">:</span>\n    <span class=\"n\">EQUAL</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;=&quot;</span>\n    <span class=\"n\">NOT_EQUAL</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;&gt;&quot;</span>\n    <span class=\"n\">CONTAINS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;@&gt;&quot;</span>\n    <span class=\"n\">CONTAINED_BY</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;@&quot;</span>\n    <span class=\"n\">OVERLAPS</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&amp;&amp;&quot;</span>\n    <span class=\"n\">FULLY_LT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&lt;&lt;&quot;</span>\n    <span class=\"n\">FULLY_GT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&gt;&gt;&quot;</span>\n    <span class=\"n\">NOT_LT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&amp;&gt;&quot;</span>\n    <span class=\"n\">NOT_GT</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;&amp;&lt;&quot;</span>\n    <span class=\"n\">ADJACENT_TO</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;-|-&quot;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-rangeboundary-expressions\">\n<span id=\"rangeboundary-expressions\"></span><h3>RangeBoundary() expressions<a class=\"headerlink\" href=\"#rangeboundary-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeBoundary\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RangeBoundary</span></code>(<em><span class=\"n\"><span class=\"pre\">inclusive_lower</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">inclusive_upper</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../../../_modules/django/contrib/postgres/fields/ranges/#RangeBoundary\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeBoundary\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeBoundary.inclusive_lower\">\n<code class=\"sig-name descname\"><span class=\"pre\">inclusive_lower</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeBoundary.inclusive_lower\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> (default), the lower bound is inclusive <code class=\"docutils literal notranslate\"><span class=\"pre\">'['</span></code>, otherwise\nit\u2019s exclusive <code class=\"docutils literal notranslate\"><span class=\"pre\">'('</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.postgres.fields.RangeBoundary.inclusive_upper\">\n<code class=\"sig-name descname\"><span class=\"pre\">inclusive_upper</span></code><a class=\"headerlink\" href=\"#django.contrib.postgres.fields.RangeBoundary.inclusive_upper\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (default), the upper bound is exclusive <code class=\"docutils literal notranslate\"><span class=\"pre\">')'</span></code>, otherwise\nit\u2019s inclusive <code class=\"docutils literal notranslate\"><span class=\"pre\">']'</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">RangeBoundary()</span></code> expression represents the range boundaries. It can be\nused with a custom range functions that expected boundaries, for example to\ndefine <a class=\"reference internal\" href=\"../constraints/#django.contrib.postgres.constraints.ExclusionConstraint\" title=\"django.contrib.postgres.constraints.ExclusionConstraint\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExclusionConstraint</span></code></a>. See\n<a class=\"reference external\" href=\"https://www.postgresql.org/docs/current/rangetypes.html#RANGETYPES-INCLUSIVITY\">the PostgreSQL documentation for the full details</a>.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/contrib/postgres/forms", "PostgreSQL specific form fields and widgets", "N", "next"], ["ref/contrib/postgres/expressions", "PostgreSQL specific query expressions", "P", "previous"]], "sourcename": "ref/contrib/postgres/fields.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">PostgreSQL specific model fields</a><ul>\n<li><a class=\"reference internal\" href=\"#indexing-these-fields\">Indexing these fields</a></li>\n<li><a class=\"reference internal\" href=\"#arrayfield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#querying-arrayfield\">Querying <code class=\"docutils literal notranslate\"><span class=\"pre\">ArrayField</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#contains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#contained-by\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#overlap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">overlap</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#len\"><code class=\"docutils literal notranslate\"><span class=\"pre\">len</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#index-transforms\">Index transforms</a></li>\n<li><a class=\"reference internal\" href=\"#slice-transforms\">Slice transforms</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#citext-fields\"><code class=\"docutils literal notranslate\"><span class=\"pre\">CIText</span></code> fields</a></li>\n<li><a class=\"reference internal\" href=\"#hstorefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#querying-hstorefield\">Querying <code class=\"docutils literal notranslate\"><span class=\"pre\">HStoreField</span></code></a><ul>\n<li><a class=\"reference internal\" href=\"#key-lookups\">Key lookups</a></li>\n<li><a class=\"reference internal\" href=\"#std-fieldlookup-hstorefield.contains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#std-fieldlookup-hstorefield.contained_by\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#has-key\"><code class=\"docutils literal notranslate\"><span class=\"pre\">has_key</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#has-any-keys\"><code class=\"docutils literal notranslate\"><span class=\"pre\">has_any_keys</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#has-keys\"><code class=\"docutils literal notranslate\"><span class=\"pre\">has_keys</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#keys\"><code class=\"docutils literal notranslate\"><span class=\"pre\">keys</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#values\"><code class=\"docutils literal notranslate\"><span class=\"pre\">values</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#range-fields\">Range Fields</a><ul>\n<li><a class=\"reference internal\" href=\"#integerrangefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerRangeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#bigintegerrangefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">BigIntegerRangeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#decimalrangefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DecimalRangeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#datetimerangefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DateTimeRangeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#daterangefield\"><code class=\"docutils literal notranslate\"><span class=\"pre\">DateRangeField</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#querying-range-fields\">Querying Range Fields</a><ul>\n<li><a class=\"reference internal\" href=\"#containment-functions\">Containment functions</a><ul>\n<li><a class=\"reference internal\" href=\"#std-fieldlookup-rangefield.contains\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contains</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#std-fieldlookup-rangefield.contained_by\"><code class=\"docutils literal notranslate\"><span class=\"pre\">contained_by</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#std-fieldlookup-rangefield.overlap\"><code class=\"docutils literal notranslate\"><span class=\"pre\">overlap</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#comparison-functions\">Comparison functions</a><ul>\n<li><a class=\"reference internal\" href=\"#fully-lt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fully_lt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#fully-gt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">fully_gt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#not-lt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">not_lt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#not-gt\"><code class=\"docutils literal notranslate\"><span class=\"pre\">not_gt</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#adjacent-to\"><code class=\"docutils literal notranslate\"><span class=\"pre\">adjacent_to</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#querying-using-the-bounds\">Querying using the bounds</a><ul>\n<li><a class=\"reference internal\" href=\"#startswith\"><code class=\"docutils literal notranslate\"><span class=\"pre\">startswith</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#endswith\"><code class=\"docutils literal notranslate\"><span class=\"pre\">endswith</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#isempty\"><code class=\"docutils literal notranslate\"><span class=\"pre\">isempty</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lower-inc\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lower_inc</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#lower-inf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">lower_inf</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#upper-inc\"><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_inc</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#upper-inf\"><code class=\"docutils literal notranslate\"><span class=\"pre\">upper_inf</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#defining-your-own-range-types\">Defining your own range types</a></li>\n<li><a class=\"reference internal\" href=\"#range-operators\">Range operators</a></li>\n<li><a class=\"reference internal\" href=\"#rangeboundary-expressions\">RangeBoundary() expressions</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/contrib/postgres/fields", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
