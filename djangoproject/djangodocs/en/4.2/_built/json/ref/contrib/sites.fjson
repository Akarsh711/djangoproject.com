{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code> packages"}], "prev": {"link": "../sitemaps/", "title": "The sitemap framework"}, "next": {"link": "../staticfiles/", "title": "The <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> app"}, "title": "The \u201csites\u201d framework", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.contrib.sites\">\n<span id=\"s-the-sites-framework\"></span><span id=\"module-django.contrib.sites\"></span><span id=\"the-sites-framework\"></span><h1>The \u201csites\u201d framework<a class=\"headerlink\" href=\"#module-django.contrib.sites\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django comes with an optional \u201csites\u201d framework. It\u2019s a hook for associating\nobjects and functionality to particular websites, and it\u2019s a holding place for\nthe domain names and \u201cverbose\u201d names of your Django-powered sites.</p>\n<p>Use it if your single Django installation powers more than one site and you\nneed to differentiate between those sites in some way.</p>\n<p>The sites framework is mainly based on this model:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.models.Site\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">models.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Site</span></code><a class=\"headerlink\" href=\"#django.contrib.sites.models.Site\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A model for storing the <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> attributes of a website.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.models.Site.domain\">\n<code class=\"sig-name descname\"><span class=\"pre\">domain</span></code><a class=\"headerlink\" href=\"#django.contrib.sites.models.Site.domain\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The fully qualified domain name associated with the website.\nFor example, <code class=\"docutils literal notranslate\"><span class=\"pre\">www.example.com</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.models.Site.name\">\n<code class=\"sig-name descname\"><span class=\"pre\">name</span></code><a class=\"headerlink\" href=\"#django.contrib.sites.models.Site.name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A human-readable \u201cverbose\u201d name for the website.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>The <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting specifies the database ID of the\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> object associated with that\nparticular settings file. If the setting is omitted, the\n<a class=\"reference internal\" href=\"#django.contrib.sites.shortcuts.get_current_site\" title=\"django.contrib.sites.shortcuts.get_current_site\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code></a> function will\ntry to get the current site by comparing the\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site.domain\" title=\"django.contrib.sites.models.Site.domain\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">domain</span></code></a> with the host name from\nthe <a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">request.get_host()</span></code></a> method.</p>\n<p>How you use this is up to you, but Django uses it in a couple of ways\nautomatically via a couple of conventions.</p>\n<div class=\"section\" id=\"s-example-usage\">\n<span id=\"example-usage\"></span><h2>Example usage<a class=\"headerlink\" href=\"#example-usage\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Why would you use sites? It\u2019s best explained through examples.</p>\n<div class=\"section\" id=\"s-associating-content-with-multiple-sites\">\n<span id=\"associating-content-with-multiple-sites\"></span><h3>Associating content with multiple sites<a class=\"headerlink\" href=\"#associating-content-with-multiple-sites\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference external\" href=\"https://www2.ljworld.com/\">LJWorld.com</a> and <a class=\"reference external\" href=\"http://www.lawrence.com/\">Lawrence.com</a> sites are operated by the same news\norganization \u2013 the Lawrence Journal-World newspaper in Lawrence, Kansas.\nLJWorld.com focused on news, while Lawrence.com focused on local entertainment.\nBut sometimes editors wanted to publish an article on <em>both</em> sites.</p>\n<p>The naive way of solving the problem would be to require site producers to\npublish the same story twice: once for LJWorld.com and again for Lawrence.com.\nBut that\u2019s inefficient for site producers, and it\u2019s redundant to store\nmultiple copies of the same story in the database.</p>\n<p>A better solution removes the content duplication: Both sites use the same\narticle database, and an article is associated with one or more sites. In\nDjango model terminology, that\u2019s represented by a\n<a class=\"reference internal\" href=\"../../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> in the <code class=\"docutils literal notranslate\"><span class=\"pre\">Article</span></code> model:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Site</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This accomplishes several things quite nicely:</p>\n<ul>\n<li><p class=\"first\">It lets the site producers edit all content \u2013 on both sites \u2013 in a\nsingle interface (the Django admin).</p>\n</li>\n<li><p class=\"first\">It means the same story doesn\u2019t have to be published twice in the\ndatabase; it only has a single record in the database.</p>\n</li>\n<li><p class=\"first\">It lets the site developers use the same Django view code for both sites.\nThe view code that displays a given story checks to make sure the requested\nstory is on the current site. It looks something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_site</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">article_detail</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">article_id</span><span class=\"p\">):</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">article_id</span><span class=\"p\">,</span> <span class=\"n\">sites__id</span><span class=\"o\">=</span><span class=\"n\">get_current_site</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">DoesNotExist</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"n\">Http404</span><span class=\"p\">(</span><span class=\"s2\">&quot;Article does not exist on this site&quot;</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-associating-content-with-a-single-site\">\n<span id=\"associating-content-with-a-single-site\"></span><h3>Associating content with a single site<a class=\"headerlink\" href=\"#associating-content-with-a-single-site\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Similarly, you can associate a model to the\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>\nmodel in a many-to-one relationship, using\n<a class=\"reference internal\" href=\"../../models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>.</p>\n<p>For example, if an article is only allowed on a single site, you\u2019d use a model\nlike this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Article</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">headline</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">)</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Site</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This has the same benefits as described in the last section.</p>\n</div>\n<div class=\"section\" id=\"s-hooking-into-the-current-site-from-views\">\n<span id=\"s-hooking-into-current-site-from-views\"></span><span id=\"hooking-into-the-current-site-from-views\"></span><span id=\"hooking-into-current-site-from-views\"></span><h3>Hooking into the current site from views<a class=\"headerlink\" href=\"#hooking-into-the-current-site-from-views\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can use the sites framework in your Django views to do\nparticular things based on the site in which the view is being called.\nFor example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.conf</span> <span class=\"kn\">import</span> <span class=\"n\">settings</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SITE_ID</span> <span class=\"o\">==</span> <span class=\"mi\">3</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do something.</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do something else.</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>It\u2019s fragile to hard-code the site IDs like that, in case they change. The\ncleaner way of accomplishing the same thing is to check the current site\u2019s\ndomain:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_site</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">current_site</span> <span class=\"o\">=</span> <span class=\"n\">get_current_site</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">current_site</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;foo.com&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do something</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do something else.</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n<p>This has also the advantage of checking if the sites framework is installed,\nand return a <a class=\"reference internal\" href=\"#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> instance if\nit is not.</p>\n<p>If you don\u2019t have access to the request object, you can use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_current()</span></code> method of the <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>\nmodel\u2019s manager. You should then ensure that your settings file does contain\nthe <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting. This example is equivalent to the previous one:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_function_without_request</span><span class=\"p\">():</span>\n    <span class=\"n\">current_site</span> <span class=\"o\">=</span> <span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span>\n    <span class=\"k\">if</span> <span class=\"n\">current_site</span><span class=\"o\">.</span><span class=\"n\">domain</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;foo.com&quot;</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do something</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do something else.</span>\n        <span class=\"k\">pass</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-getting-the-current-domain-for-display\">\n<span id=\"getting-the-current-domain-for-display\"></span><h3>Getting the current domain for display<a class=\"headerlink\" href=\"#getting-the-current-domain-for-display\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>LJWorld.com and Lawrence.com both have email alert functionality, which lets\nreaders sign up to get notifications when news happens. It\u2019s pretty basic: A\nreader signs up on a web form and immediately gets an email saying,\n\u201cThanks for your subscription.\u201d</p>\n<p>It\u2019d be inefficient and redundant to implement this sign up processing code\ntwice, so the sites use the same code behind the scenes. But the \u201cthank you for\nsigning up\u201d notice needs to be different for each site. By using\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>\nobjects, we can abstract the \u201cthank you\u201d notice to use the values of the\ncurrent site\u2019s <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site.name\" title=\"django.contrib.sites.models.Site.name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">name</span></code></a> and\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site.domain\" title=\"django.contrib.sites.models.Site.domain\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">domain</span></code></a>.</p>\n<p>Here\u2019s an example of what the form-handling view looks like:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.shortcuts</span> <span class=\"kn\">import</span> <span class=\"n\">get_current_site</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">send_mail</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">register_for_newsletter</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check form values, etc., and subscribe the user.</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"n\">current_site</span> <span class=\"o\">=</span> <span class=\"n\">get_current_site</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"n\">send_mail</span><span class=\"p\">(</span>\n        <span class=\"s2\">&quot;Thanks for subscribing to </span><span class=\"si\">%s</span><span class=\"s2\"> alerts&quot;</span> <span class=\"o\">%</span> <span class=\"n\">current_site</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;Thanks for your subscription. We appreciate it.</span><span class=\"se\">\\n\\n</span><span class=\"s2\">-The </span><span class=\"si\">%s</span><span class=\"s2\"> team.&quot;</span>\n        <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">current_site</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,),</span>\n        <span class=\"s2\">&quot;editor@</span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">current_site</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">],</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>On Lawrence.com, this email has the subject line \u201cThanks for subscribing to\nlawrence.com alerts.\u201d On LJWorld.com, the email has the subject \u201cThanks for\nsubscribing to LJWorld.com alerts.\u201d Same goes for the email\u2019s message body.</p>\n<p>Note that an even more flexible (but more heavyweight) way of doing this would\nbe to use Django\u2019s template system. Assuming Lawrence.com and LJWorld.com have\ndifferent template directories (<a class=\"reference internal\" href=\"../../settings/#std-setting-TEMPLATES-DIRS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DIRS</span></code></a>), you could\nfarm out to the template system like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.core.mail</span> <span class=\"kn\">import</span> <span class=\"n\">send_mail</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.template</span> <span class=\"kn\">import</span> <span class=\"n\">loader</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">register_for_newsletter</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Check form values, etc., and subscribe the user.</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s2\">&quot;alerts/subject.txt&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">({})</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">loader</span><span class=\"o\">.</span><span class=\"n\">get_template</span><span class=\"p\">(</span><span class=\"s2\">&quot;alerts/message.txt&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">render</span><span class=\"p\">({})</span>\n    <span class=\"n\">send_mail</span><span class=\"p\">(</span><span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"s2\">&quot;editor@ljworld.com&quot;</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">])</span>\n\n    <span class=\"c1\"># ...</span>\n</pre></div>\n</div>\n<p>In this case, you\u2019d have to create <code class=\"file docutils literal notranslate\"><span class=\"pre\">subject.txt</span></code> and <code class=\"file docutils literal notranslate\"><span class=\"pre\">message.txt</span></code>\ntemplate files for both the LJWorld.com and Lawrence.com template directories.\nThat gives you more flexibility, but it\u2019s also more complex.</p>\n<p>It\u2019s a good idea to exploit the <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>\nobjects as much as possible, to remove unneeded complexity and redundancy.</p>\n</div>\n<div class=\"section\" id=\"s-getting-the-current-domain-for-full-urls\">\n<span id=\"getting-the-current-domain-for-full-urls\"></span><h3>Getting the current domain for full URLs<a class=\"headerlink\" href=\"#getting-the-current-domain-for-full-urls\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> convention is nice for getting your objects\u2019\nURL without the domain name, but in some cases you might want to display the\nfull URL \u2013 with <code class=\"docutils literal notranslate\"><span class=\"pre\">http://</span></code> and the domain and everything \u2013 for an object.\nTo do this, you can use the sites framework. An example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">MyModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;/mymodel/objects/3/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">domain</span>\n<span class=\"go\">&#39;example.com&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s2\">&quot;https://</span><span class=\"si\">%s%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">domain</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">())</span>\n<span class=\"go\">&#39;https://example.com/mymodel/objects/3/&#39;</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-enabling-the-sites-framework\">\n<span id=\"s-id1\"></span><span id=\"enabling-the-sites-framework\"></span><span id=\"id1\"></span><h2>Enabling the sites framework<a class=\"headerlink\" href=\"#enabling-the-sites-framework\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To enable the sites framework, follow these steps:</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">Add <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.sites'</span></code> to your <a class=\"reference internal\" href=\"../../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting.</p>\n</li>\n<li><p class=\"first\">Define a <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">SITE_ID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n</pre></div>\n</div>\n</li>\n<li><p class=\"first\">Run <a class=\"reference internal\" href=\"../../django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a>.</p>\n</li>\n</ol>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code> registers a\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> signal handler which creates a\ndefault site named <code class=\"docutils literal notranslate\"><span class=\"pre\">example.com</span></code> with the domain <code class=\"docutils literal notranslate\"><span class=\"pre\">example.com</span></code>. This site\nwill also be created after Django creates the test database. To set the\ncorrect name and domain for your project, you can use a <a class=\"reference internal\" href=\"../../../topics/migrations/#data-migrations\"><span class=\"std std-ref\">data migration</span></a>.</p>\n<p>In order to serve different sites in production, you\u2019d create a separate\nsettings file with each <code class=\"docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code> (perhaps importing from a common settings\nfile to avoid duplicating shared settings) and then specify the appropriate\n<span class=\"target\" id=\"index-0\"></span><a class=\"reference internal\" href=\"../../../topics/settings/#envvar-DJANGO_SETTINGS_MODULE\"><code class=\"xref std std-envvar docutils literal notranslate\"><span class=\"pre\">DJANGO_SETTINGS_MODULE</span></code></a> for each site.</p>\n</div>\n<div class=\"section\" id=\"s-caching-the-current-site-object\">\n<span id=\"caching-the-current-site-object\"></span><h2>Caching the current <code class=\"docutils literal notranslate\"><span class=\"pre\">Site</span></code> object<a class=\"headerlink\" href=\"#caching-the-current-site-object\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>As the current site is stored in the database, each call to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Site.objects.get_current()</span></code> could result in a database query. But Django is a\nlittle cleverer than that: on the first request, the current site is cached, and\nany subsequent call returns the cached data instead of hitting the database.</p>\n<p>If for any reason you want to force a database query, you can tell Django to\nclear the cache using <code class=\"docutils literal notranslate\"><span class=\"pre\">Site.objects.clear_cache()</span></code>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># First call; current site fetched from database.</span>\n<span class=\"n\">current_site</span> <span class=\"o\">=</span> <span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Second call; current site fetched from cache.</span>\n<span class=\"n\">current_site</span> <span class=\"o\">=</span> <span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"c1\"># Force a database query for the third call.</span>\n<span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">clear_cache</span><span class=\"p\">()</span>\n<span class=\"n\">current_site</span> <span class=\"o\">=</span> <span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-currentsitemanager\">\n<span id=\"the-currentsitemanager\"></span><h2>The <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code><a class=\"headerlink\" href=\"#the-currentsitemanager\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.managers.CurrentSiteManager\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">managers.</span></code><code class=\"sig-name descname\"><span class=\"pre\">CurrentSiteManager</span></code><a class=\"headerlink\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>If <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> plays a key role in your\napplication, consider using the helpful\n<a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a> in your\nmodel(s). It\u2019s a model <a class=\"reference internal\" href=\"../../../topics/db/managers/\"><span class=\"doc\">manager</span></a> that\nautomatically filters its queries to include only objects associated\nwith the current <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>.</p>\n<div class=\"admonition-mandatory-setting-site-id admonition\">\n<p class=\"first admonition-title\">Mandatory <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a></p>\n<p class=\"last\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code> is only usable when the <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a>\nsetting is defined in your settings.</p>\n</div>\n<p>Use <a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a> by adding it to\nyour model explicitly. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.managers</span> <span class=\"kn\">import</span> <span class=\"n\">CurrentSiteManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Photo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s2\">&quot;photos&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">photographer_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Site</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n    <span class=\"n\">on_site</span> <span class=\"o\">=</span> <span class=\"n\">CurrentSiteManager</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>With this model, <code class=\"docutils literal notranslate\"><span class=\"pre\">Photo.objects.all()</span></code> will return all <code class=\"docutils literal notranslate\"><span class=\"pre\">Photo</span></code> objects in\nthe database, but <code class=\"docutils literal notranslate\"><span class=\"pre\">Photo.on_site.all()</span></code> will return only the <code class=\"docutils literal notranslate\"><span class=\"pre\">Photo</span></code> objects\nassociated with the current site, according to the <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting.</p>\n<p>Put another way, these two statements are equivalent:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Photo</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"o\">=</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">SITE_ID</span><span class=\"p\">)</span>\n<span class=\"n\">Photo</span><span class=\"o\">.</span><span class=\"n\">on_site</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>How did <a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a>\nknow which field of <code class=\"docutils literal notranslate\"><span class=\"pre\">Photo</span></code> was the\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>? By default,\n<a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a> looks for a\neither a <a class=\"reference internal\" href=\"../../models/fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">site</span></code> or a\n<a class=\"reference internal\" href=\"../../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> called\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sites</span></code> to filter on. If you use a field named something other than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">site</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">sites</span></code> to identify which\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> objects your object is\nrelated to, then you need to explicitly pass the custom field name as\na parameter to\n<a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a> on your\nmodel. The following model, which has a field called <code class=\"docutils literal notranslate\"><span class=\"pre\">publish_on</span></code>,\ndemonstrates this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.managers</span> <span class=\"kn\">import</span> <span class=\"n\">CurrentSiteManager</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Photo</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">photo</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">FileField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s2\">&quot;photos&quot;</span><span class=\"p\">)</span>\n    <span class=\"n\">photographer_name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">pub_date</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">DateField</span><span class=\"p\">()</span>\n    <span class=\"n\">publish_on</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Site</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">)</span>\n    <span class=\"n\">objects</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Manager</span><span class=\"p\">()</span>\n    <span class=\"n\">on_site</span> <span class=\"o\">=</span> <span class=\"n\">CurrentSiteManager</span><span class=\"p\">(</span><span class=\"s2\">&quot;publish_on&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If you attempt to use <a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a>\nand pass a field name that doesn\u2019t exist, Django will raise a <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueError</span></code>.</p>\n<p>Finally, note that you\u2019ll probably want to keep a normal\n(non-site-specific) <code class=\"docutils literal notranslate\"><span class=\"pre\">Manager</span></code> on your model, even if you use\n<a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a>. As\nexplained in the <a class=\"reference internal\" href=\"../../../topics/db/managers/\"><span class=\"doc\">manager documentation</span></a>, if\nyou define a manager manually, then Django won\u2019t create the automatic\n<code class=\"docutils literal notranslate\"><span class=\"pre\">objects</span> <span class=\"pre\">=</span> <span class=\"pre\">models.Manager()</span></code> manager for you. Also note that certain\nparts of Django \u2013 namely, the Django admin site and generic views \u2013\nuse whichever manager is defined <em>first</em> in the model, so if you want\nyour admin site to have access to all objects (not just site-specific\nones), put <code class=\"docutils literal notranslate\"><span class=\"pre\">objects</span> <span class=\"pre\">=</span> <span class=\"pre\">models.Manager()</span></code> in your model, before you\ndefine <a class=\"reference internal\" href=\"#django.contrib.sites.managers.CurrentSiteManager\" title=\"django.contrib.sites.managers.CurrentSiteManager\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-site-middleware\">\n<span id=\"s-id2\"></span><span id=\"site-middleware\"></span><span id=\"id2\"></span><h2>Site middleware<a class=\"headerlink\" href=\"#site-middleware\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>If you often use this pattern:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.sites.models</span> <span class=\"kn\">import</span> <span class=\"n\">Site</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">Site</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get_current</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</pre></div>\n</div>\n<p>To avoid repetitions, add\n<a class=\"reference internal\" href=\"../../middleware/#django.contrib.sites.middleware.CurrentSiteMiddleware\" title=\"django.contrib.sites.middleware.CurrentSiteMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.middleware.CurrentSiteMiddleware</span></code></a> to\n<a class=\"reference internal\" href=\"../../settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a>. The middleware sets the <code class=\"docutils literal notranslate\"><span class=\"pre\">site</span></code> attribute on every\nrequest object, so you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">request.site</span></code> to get the current site.</p>\n</div>\n<div class=\"section\" id=\"s-how-django-uses-the-sites-framework\">\n<span id=\"how-django-uses-the-sites-framework\"></span><h2>How Django uses the sites framework<a class=\"headerlink\" href=\"#how-django-uses-the-sites-framework\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Although it\u2019s not required that you use the sites framework, it\u2019s strongly\nencouraged, because Django takes advantage of it in a few places. Even if your\nDjango installation is powering only a single site, you should take the two\nseconds to create the site object with your <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>, and point\nto its ID in your <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting.</p>\n<p>Here\u2019s how Django uses the sites framework:</p>\n<ul class=\"simple\">\n<li>In the <a class=\"reference internal\" href=\"../redirects/#module-django.contrib.redirects\" title=\"django.contrib.redirects: A framework for managing redirects.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">redirects</span> <span class=\"pre\">framework</span></code></a>, each\nredirect object is associated with a particular site. When Django searches\nfor a redirect, it takes into account the current site.</li>\n<li>In the <a class=\"reference internal\" href=\"../flatpages/#module-django.contrib.flatpages\" title=\"django.contrib.flatpages: A framework for managing simple ?flat? HTML content in a database.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">flatpages</span> <span class=\"pre\">framework</span></code></a>, each\nflatpage is associated with a particular site. When a flatpage is created,\nyou specify its <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>, and the\n<a class=\"reference internal\" href=\"../flatpages/#django.contrib.flatpages.middleware.FlatpageFallbackMiddleware\" title=\"django.contrib.flatpages.middleware.FlatpageFallbackMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FlatpageFallbackMiddleware</span></code></a>\nchecks the current site in retrieving flatpages to display.</li>\n<li>In the <a class=\"reference internal\" href=\"../syndication/#module-django.contrib.syndication\" title=\"django.contrib.syndication: A framework for generating syndication feeds, in RSS and Atom, quite easily.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">syndication</span> <span class=\"pre\">framework</span></code></a>, the\ntemplates for <code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code> automatically have access to a\nvariable <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">site</span> <span class=\"pre\">}}</span></code>, which is the\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> object representing the current\nsite. Also, the hook for providing item URLs will use the <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> from\nthe current <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> object if you don\u2019t\nspecify a fully-qualified domain.</li>\n<li>In the <a class=\"reference internal\" href=\"../../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">authentication</span> <span class=\"pre\">framework</span></code></a>,\n<a class=\"reference internal\" href=\"../../../topics/auth/default/#django.contrib.auth.views.LoginView\" title=\"django.contrib.auth.views.LoginView\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.auth.views.LoginView</span></code></a> passes the current\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> name to the template as\n<code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">site_name</span> <span class=\"pre\">}}</span></code>.</li>\n<li>The shortcut view (<code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.contenttypes.views.shortcut</span></code>)\nuses the domain of the current\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> object when calculating\nan object\u2019s URL.</li>\n<li>In the admin framework, the \u201cview on site\u201d link uses the current\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> to work out the domain for the\nsite that it will redirect to.</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-requestsite-objects\">\n<span id=\"requestsite-objects\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code> objects<a class=\"headerlink\" href=\"#requestsite-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p id=\"id3\">Some <a class=\"reference internal\" href=\"../\"><span class=\"doc\">django.contrib</span></a> applications take advantage of\nthe sites framework but are architected in a way that doesn\u2019t <em>require</em> the\nsites framework to be installed in your database. (Some people don\u2019t want to,\nor just aren\u2019t <em>able</em> to install the extra database table that the sites\nframework requires.) For those cases, the framework provides a\n<a class=\"reference internal\" href=\"#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.requests.RequestSite</span></code></a> class, which can be used as\na fallback when the database-backed sites framework is not available.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.requests.RequestSite\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">requests.</span></code><code class=\"sig-name descname\"><span class=\"pre\">RequestSite</span></code><a class=\"headerlink\" href=\"#django.contrib.sites.requests.RequestSite\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class that shares the primary interface of\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> (i.e., it has\n<code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> attributes) but gets its data from a Django\n<a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object rather than from a database.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.requests.RequestSite.__init__\">\n<code class=\"sig-name descname\"><span class=\"pre\">__init__</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sites.requests.RequestSite.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> attributes to the value of\n<a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_host()</span></code></a>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>A <a class=\"reference internal\" href=\"#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> object has a similar\ninterface to a normal <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> object,\nexcept its <a class=\"reference internal\" href=\"#django.contrib.sites.requests.RequestSite.__init__\" title=\"django.contrib.sites.requests.RequestSite.__init__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__init__()</span></code></a>\nmethod takes an <a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object. It\u2019s able to deduce\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> by looking at the request\u2019s domain. It has\n<code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">delete()</span></code> methods to match the interface of\n<a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>, but the methods raise\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#NotImplementedError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">NotImplementedError</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-get-current-site-shortcut\">\n<span id=\"get-current-site-shortcut\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">get_current_site</span></code> shortcut<a class=\"headerlink\" href=\"#get-current-site-shortcut\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Finally, to avoid repetitive fallback code, the framework provides a\n<a class=\"reference internal\" href=\"#django.contrib.sites.shortcuts.get_current_site\" title=\"django.contrib.sites.shortcuts.get_current_site\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.shortcuts.get_current_site()</span></code></a> function.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.sites.shortcuts.get_current_site\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">shortcuts.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_current_site</span></code>(<em><span class=\"n\"><span class=\"pre\">request</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.sites.shortcuts.get_current_site\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A function that checks if <code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.sites</span></code> is installed and\nreturns either the current <a class=\"reference internal\" href=\"#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a>\nobject or a <a class=\"reference internal\" href=\"#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> object\nbased on the request. It looks up the current site based on\n<a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">request.get_host()</span></code></a> if the\n<a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting is not defined.</p>\n<p>Both a domain and a port may be returned by <a class=\"reference internal\" href=\"../../request-response/#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">request.get_host()</span></code></a> when the Host header has a port\nexplicitly specified, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">example.com:80</span></code>. In such cases, if the\nlookup fails because the host does not match a record in the database,\nthe port is stripped and the lookup is retried with the domain part\nonly. This does not apply to\n<a class=\"reference internal\" href=\"#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> which will always\nuse the unmodified host.</p>\n</dd></dl>\n\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/contrib/staticfiles", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> app", "N", "next"], ["ref/contrib/sitemaps", "The sitemap framework", "P", "previous"]], "sourcename": "ref/contrib/sites.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">The \u201csites\u201d framework</a><ul>\n<li><a class=\"reference internal\" href=\"#example-usage\">Example usage</a><ul>\n<li><a class=\"reference internal\" href=\"#associating-content-with-multiple-sites\">Associating content with multiple sites</a></li>\n<li><a class=\"reference internal\" href=\"#associating-content-with-a-single-site\">Associating content with a single site</a></li>\n<li><a class=\"reference internal\" href=\"#hooking-into-the-current-site-from-views\">Hooking into the current site from views</a></li>\n<li><a class=\"reference internal\" href=\"#getting-the-current-domain-for-display\">Getting the current domain for display</a></li>\n<li><a class=\"reference internal\" href=\"#getting-the-current-domain-for-full-urls\">Getting the current domain for full URLs</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#enabling-the-sites-framework\">Enabling the sites framework</a></li>\n<li><a class=\"reference internal\" href=\"#caching-the-current-site-object\">Caching the current <code class=\"docutils literal notranslate\"><span class=\"pre\">Site</span></code> object</a></li>\n<li><a class=\"reference internal\" href=\"#the-currentsitemanager\">The <code class=\"docutils literal notranslate\"><span class=\"pre\">CurrentSiteManager</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#site-middleware\">Site middleware</a></li>\n<li><a class=\"reference internal\" href=\"#how-django-uses-the-sites-framework\">How Django uses the sites framework</a></li>\n<li><a class=\"reference internal\" href=\"#requestsite-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code> objects</a></li>\n<li><a class=\"reference internal\" href=\"#get-current-site-shortcut\"><code class=\"docutils literal notranslate\"><span class=\"pre\">get_current_site</span></code> shortcut</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/contrib/sites", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
