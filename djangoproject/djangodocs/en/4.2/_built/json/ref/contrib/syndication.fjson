{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">contrib</span></code> packages"}], "prev": {"link": "../staticfiles/", "title": "The <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> app"}, "next": {"link": "../../csrf/", "title": "Cross Site Request Forgery protection"}, "title": "The syndication feed framework", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.contrib.syndication\">\n<span id=\"s-the-syndication-feed-framework\"></span><span id=\"module-django.contrib.syndication\"></span><span id=\"the-syndication-feed-framework\"></span><h1>The syndication feed framework<a class=\"headerlink\" href=\"#module-django.contrib.syndication\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django comes with a high-level syndication-feed-generating framework for\ncreating <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Glossary/RSS\">RSS</a> and <span class=\"target\" id=\"index-0\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc4287.html\"><strong>Atom</strong></a> feeds.</p>\n<p>To create any syndication feed, all you have to do is write a short\nPython class. You can create as many feeds as you want.</p>\n<p>Django also comes with a lower-level feed-generating API. Use this if\nyou want to generate feeds outside of a web context, or in some other\nlower-level way.</p>\n<div class=\"section\" id=\"s-the-high-level-framework\">\n<span id=\"the-high-level-framework\"></span><h2>The high-level framework<a class=\"headerlink\" href=\"#the-high-level-framework\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-overview\">\n<span id=\"overview\"></span><h3>Overview<a class=\"headerlink\" href=\"#overview\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The high-level feed-generating framework is supplied by the\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class. To create a\nfeed, write a <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class\nand point to an instance of it in your <a class=\"reference internal\" href=\"../../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-feed-classes\">\n<span id=\"feed-classes\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> classes<a class=\"headerlink\" href=\"#feed-classes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>A <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class is a Python\nclass that represents a syndication feed. A feed can be simple (e.g.,\na \u201csite news\u201d feed, or a basic feed displaying the latest entries of a\nblog) or more complex (e.g., a feed displaying all the blog entries in\na particular category, where the category is variable).</p>\n<p>Feed classes subclass <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication.views.Feed</span></code></a>.\nThey can live anywhere in your codebase.</p>\n<p>Instances of <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> classes\nare views which can be used in your <a class=\"reference internal\" href=\"../../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-a-simple-example\">\n<span id=\"a-simple-example\"></span><h3>A simple example<a class=\"headerlink\" href=\"#a-simple-example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>This simple example, taken from a hypothetical police beat news site describes\na feed of the latest five news items:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.syndication.views</span> <span class=\"kn\">import</span> <span class=\"n\">Feed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">reverse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">policebeat.models</span> <span class=\"kn\">import</span> <span class=\"n\">NewsItem</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">LatestEntriesFeed</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Police beat site news&quot;</span>\n    <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/sitenews/&quot;</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Updates on changes and additions to police beat central.&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">NewsItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">title</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">description</span>\n\n    <span class=\"c1\"># item_link is only needed if NewsItem has no get_absolute_url method.</span>\n    <span class=\"k\">def</span> <span class=\"nf\">item_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s2\">&quot;news-item&quot;</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">])</span>\n</pre></div>\n</div>\n<p>To connect a URL to this feed, put an instance of the Feed object in\nyour <a class=\"reference internal\" href=\"../../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myproject.feeds</span> <span class=\"kn\">import</span> <span class=\"n\">LatestEntriesFeed</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;latest/feed/&quot;</span><span class=\"p\">,</span> <span class=\"n\">LatestEntriesFeed</span><span class=\"p\">()),</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>Note:</p>\n<ul class=\"simple\">\n<li>The Feed class subclasses <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.syndication.views.Feed</span></code></a>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">link</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code> correspond to the\nstandard RSS <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;title&gt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;link&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;description&gt;</span></code> elements,\nrespectively.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code> is, a method that returns a list of objects that should be\nincluded in the feed as <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;item&gt;</span></code> elements. Although this example returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NewsItem</span></code> objects using Django\u2019s <a class=\"reference internal\" href=\"../../models/querysets/\"><span class=\"doc\">object-relational mapper</span></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code> doesn\u2019t have to return model instances.\nAlthough you get a few bits of functionality \u201cfor free\u201d by using Django\nmodels, <code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code> can return any type of object you want.</li>\n<li>If you\u2019re creating an Atom feed, rather than an RSS feed, set the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">subtitle</span></code> attribute instead of the <code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code> attribute.\nSee <a class=\"reference internal\" href=\"#publishing-atom-and-rss-feeds-in-tandem\">Publishing Atom and RSS feeds in tandem</a>, later, for an example.</li>\n</ul>\n<p>One thing is left to do. In an RSS feed, each <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;item&gt;</span></code> has a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;title&gt;</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;link&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;description&gt;</span></code>. We need to tell the framework what data to put\ninto those elements.</p>\n<ul>\n<li><p class=\"first\">For the contents of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;title&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;description&gt;</span></code>, Django tries\ncalling the methods <code class=\"docutils literal notranslate\"><span class=\"pre\">item_title()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">item_description()</span></code> on\nthe <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class. They are passed\na single parameter, <code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code>, which is the object itself. These are\noptional; by default, the string representation of the object is used for\nboth.</p>\n<p>If you want to do any special formatting for either the title or\ndescription, <a class=\"reference internal\" href=\"../../templates/language/\"><span class=\"doc\">Django templates</span></a> can be used\ninstead. Their paths can be specified with the <code class=\"docutils literal notranslate\"><span class=\"pre\">title_template</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">description_template</span></code> attributes on the\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class. The templates are\nrendered for each item and are passed two template context variables:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">obj</span> <span class=\"pre\">}}</span></code> \u2013 The current object (one of whichever objects you\nreturned in <code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code>).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">site</span> <span class=\"pre\">}}</span></code> \u2013 A <a class=\"reference internal\" href=\"../sites/#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.contrib.sites.models.Site</span></code></a> object\nrepresenting the current site. This is useful for <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">site.domain</span>\n<span class=\"pre\">}}</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">site.name</span> <span class=\"pre\">}}</span></code>. If you do <em>not</em> have the Django sites\nframework installed, this will be set to a\n<a class=\"reference internal\" href=\"../sites/#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> object. See the\n<a class=\"reference internal\" href=\"../sites/#id3\"><span class=\"std std-ref\">RequestSite section of the sites framework documentation</span></a> for more.</li>\n</ul>\n<p>See <a class=\"reference internal\" href=\"#a-complex-example\">a complex example</a> below that uses a description template.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.syndication.Feed.get_context_data\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">Feed.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_context_data</span></code>(<em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.contrib.syndication.Feed.get_context_data\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>There is also a way to pass additional information to title and description\ntemplates, if you need to supply more than the two variables mentioned\nbefore. You can provide your implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data</span></code> method\nin your <code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> subclass. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">mysite.models</span> <span class=\"kn\">import</span> <span class=\"n\">Article</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.contrib.syndication.views</span> <span class=\"kn\">import</span> <span class=\"n\">Feed</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ArticlesFeed</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;My articles&quot;</span>\n    <span class=\"n\">description_template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;feeds/articles.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Article</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_context_data</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"n\">context</span><span class=\"p\">[</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;bar&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<p>And the template:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span>Something about <span class=\"cp\">{{</span> <span class=\"nv\">foo</span> <span class=\"cp\">}}</span>: <span class=\"cp\">{{</span> <span class=\"nv\">obj.description</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>This method will be called once per each item in the list returned by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code> with the following keyword arguments:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code>: the current item. For backward compatibility reasons, the name\nof this context variable is <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">obj</span> <span class=\"pre\">}}</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code>: the object returned by <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code>. By default this is not\nexposed to the templates to avoid confusion with <code class=\"docutils literal notranslate\"><span class=\"pre\">{{</span> <span class=\"pre\">obj</span> <span class=\"pre\">}}</span></code> (see above),\nbut you can use it in your implementation of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">site</span></code>: current site as described above.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code>: current request.</li>\n</ul>\n<p>The behavior of <code class=\"docutils literal notranslate\"><span class=\"pre\">get_context_data()</span></code> mimics that of\n<a class=\"reference internal\" href=\"../../../topics/class-based-views/generic-display/#adding-extra-context\"><span class=\"std std-ref\">generic views</span></a> - you\u2019re supposed to call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">super()</span></code> to retrieve context data from parent class, add your data\nand return the modified dictionary.</p>\n</li>\n<li><p class=\"first\">To specify the contents of <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;link&gt;</span></code>, you have two options. For each item\nin <code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code>, Django first tries calling the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">item_link()</span></code> method on the\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class. In a similar way to\nthe title and description, it is passed it a single parameter,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code>. If that method doesn\u2019t exist, Django tries executing a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> method on that object. Both\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">item_link()</span></code> should return the\nitem\u2019s URL as a normal Python string. As with <code class=\"docutils literal notranslate\"><span class=\"pre\">get_absolute_url()</span></code>, the\nresult of <code class=\"docutils literal notranslate\"><span class=\"pre\">item_link()</span></code> will be included directly in the URL, so you\nare responsible for doing all necessary URL quoting and conversion to\nASCII inside the method itself.</p>\n</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-a-complex-example\">\n<span id=\"a-complex-example\"></span><h3>A complex example<a class=\"headerlink\" href=\"#a-complex-example\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The framework also supports more complex feeds, via arguments.</p>\n<p>For example, a website could offer an RSS feed of recent crimes for every\npolice beat in a city. It\u2019d be silly to create a separate\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class for each police beat; that\nwould violate the <a class=\"reference internal\" href=\"../../../misc/design-philosophies/#dry\"><span class=\"std std-ref\">DRY principle</span></a> and would couple data to\nprogramming logic. Instead, the syndication framework lets you access the\narguments passed from your <a class=\"reference internal\" href=\"../../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a> so feeds can output\nitems based on information in the feed\u2019s URL.</p>\n<p>The police beat feeds could be accessible via URLs like this:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">/beats/613/rss/</span></code> \u2013 Returns recent crimes for beat 613.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">/beats/1424/rss/</span></code> \u2013 Returns recent crimes for beat 1424.</li>\n</ul>\n<p>These can be matched with a <a class=\"reference internal\" href=\"../../../topics/http/urls/\"><span class=\"doc\">URLconf</span></a> line such as:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;beats/&lt;int:beat_id&gt;/rss/&quot;</span><span class=\"p\">,</span> <span class=\"n\">BeatFeed</span><span class=\"p\">()),</span>\n</pre></div>\n</div>\n<p>Like a view, the arguments in the URL are passed to the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code>\nmethod along with the request object.</p>\n<p>Here\u2019s the code for these beat-specific feeds:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.syndication.views</span> <span class=\"kn\">import</span> <span class=\"n\">Feed</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BeatFeed</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"n\">description_template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;feeds/beat_description.html&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">beat_id</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Beat</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">beat_id</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;Police beat central: Crimes for beat </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">beat</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">get_absolute_url</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">&quot;Crimes recently reported in police beat </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">beat</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">Crime</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">beat</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-crime_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">30</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>To generate the feed\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;title&gt;</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;link&gt;</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;description&gt;</span></code>, Django\nuses the <code class=\"docutils literal notranslate\"><span class=\"pre\">title()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">link()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">description()</span></code> methods. In\nthe previous example, they were string class attributes, but this example\nillustrates that they can be either strings <em>or</em> methods. For each of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">link</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code>, Django follows this\nalgorithm:</p>\n<ul class=\"simple\">\n<li>First, it tries to call a method, passing the <code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> argument, where\n<code class=\"docutils literal notranslate\"><span class=\"pre\">obj</span></code> is the object returned by <code class=\"docutils literal notranslate\"><span class=\"pre\">get_object()</span></code>.</li>\n<li>Failing that, it tries to call a method with no arguments.</li>\n<li>Failing that, it uses the class attribute.</li>\n</ul>\n<p>Also note that <code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code> also follows the same algorithm \u2013 first, it\ntries <code class=\"docutils literal notranslate\"><span class=\"pre\">items(obj)</span></code>, then <code class=\"docutils literal notranslate\"><span class=\"pre\">items()</span></code>, then finally an <code class=\"docutils literal notranslate\"><span class=\"pre\">items</span></code>\nclass attribute (which should be a list).</p>\n<p>We are using a template for the item descriptions. It can be as minimal as\nthis:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">obj.description</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n<p>However, you are free to add formatting as desired.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">ExampleFeed</span></code> class below gives full documentation on methods and\nattributes of <a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> classes.</p>\n</div>\n<div class=\"section\" id=\"s-specifying-the-type-of-feed\">\n<span id=\"specifying-the-type-of-feed\"></span><h3>Specifying the type of feed<a class=\"headerlink\" href=\"#specifying-the-type-of-feed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>By default, feeds produced in this framework use RSS 2.0.</p>\n<p>To change that, add a <code class=\"docutils literal notranslate\"><span class=\"pre\">feed_type</span></code> attribute to your\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.utils.feedgenerator</span> <span class=\"kn\">import</span> <span class=\"n\">Atom1Feed</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFeed</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"n\">feed_type</span> <span class=\"o\">=</span> <span class=\"n\">Atom1Feed</span>\n</pre></div>\n</div>\n<p>Note that you set <code class=\"docutils literal notranslate\"><span class=\"pre\">feed_type</span></code> to a class object, not an instance.</p>\n<p>Currently available feed types are:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.Rss201rev2Feed\" title=\"django.utils.feedgenerator.Rss201rev2Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.Rss201rev2Feed</span></code></a> (RSS 2.01. Default.)</li>\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.RssUserland091Feed\" title=\"django.utils.feedgenerator.RssUserland091Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.RssUserland091Feed</span></code></a> (RSS 0.91.)</li>\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.Atom1Feed\" title=\"django.utils.feedgenerator.Atom1Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.Atom1Feed</span></code></a> (Atom 1.0.)</li>\n</ul>\n</div>\n<div class=\"section\" id=\"s-enclosures\">\n<span id=\"enclosures\"></span><h3>Enclosures<a class=\"headerlink\" href=\"#enclosures\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>To specify enclosures, such as those used in creating podcast feeds, use the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">item_enclosures</span></code> hook or, alternatively and if you only have a single\nenclosure per item, the <code class=\"docutils literal notranslate\"><span class=\"pre\">item_enclosure_url</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">item_enclosure_length</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">item_enclosure_mime_type</span></code> hooks. See the <code class=\"docutils literal notranslate\"><span class=\"pre\">ExampleFeed</span></code> class below for\nusage examples.</p>\n</div>\n<div class=\"section\" id=\"s-language\">\n<span id=\"language\"></span><h3>Language<a class=\"headerlink\" href=\"#language\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Feeds created by the syndication framework automatically include the\nappropriate <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;language&gt;</span></code> tag (RSS 2.0) or <code class=\"docutils literal notranslate\"><span class=\"pre\">xml:lang</span></code> attribute (Atom). By\ndefault, this is <a class=\"reference internal\" href=\"../../utils/#django.utils.translation.get_language\" title=\"django.utils.translation.get_language\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.utils.translation.get_language()</span></code></a>. You can change it\nby setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">language</span></code> class attribute.</p>\n</div>\n<div class=\"section\" id=\"s-urls\">\n<span id=\"urls\"></span><h3>URLs<a class=\"headerlink\" href=\"#urls\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">link</span></code> method/attribute can return either an absolute path (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/blog/&quot;</span></code>) or a URL with the fully-qualified domain and protocol (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;https://www.example.com/blog/&quot;</span></code>). If <code class=\"docutils literal notranslate\"><span class=\"pre\">link</span></code> doesn\u2019t return the domain,\nthe syndication framework will insert the domain of the current site, according\nto your <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span> <span class=\"pre\">setting</span></code></a>.</p>\n<p>Atom feeds require a <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;link</span> <span class=\"pre\">rel=&quot;self&quot;&gt;</span></code> that defines the feed\u2019s current\nlocation. The syndication framework populates this automatically, using the\ndomain of the current site according to the <a class=\"reference internal\" href=\"../../settings/#std-setting-SITE_ID\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">SITE_ID</span></code></a> setting.</p>\n</div>\n<div class=\"section\" id=\"s-publishing-atom-and-rss-feeds-in-tandem\">\n<span id=\"publishing-atom-and-rss-feeds-in-tandem\"></span><h3>Publishing Atom and RSS feeds in tandem<a class=\"headerlink\" href=\"#publishing-atom-and-rss-feeds-in-tandem\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some developers like to make available both Atom <em>and</em> RSS versions of their\nfeeds. To do that, you can create a subclass of your\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class and set the <code class=\"docutils literal notranslate\"><span class=\"pre\">feed_type</span></code>\nto something different. Then update your URLconf to add the extra versions.</p>\n<p>Here\u2019s a full example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.syndication.views</span> <span class=\"kn\">import</span> <span class=\"n\">Feed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">policebeat.models</span> <span class=\"kn\">import</span> <span class=\"n\">NewsItem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils.feedgenerator</span> <span class=\"kn\">import</span> <span class=\"n\">Atom1Feed</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RssSiteNewsFeed</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Police beat site news&quot;</span>\n    <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/sitenews/&quot;</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Updates on changes and additions to police beat central.&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">NewsItem</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-pub_date&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AtomSiteNewsFeed</span><span class=\"p\">(</span><span class=\"n\">RssSiteNewsFeed</span><span class=\"p\">):</span>\n    <span class=\"n\">feed_type</span> <span class=\"o\">=</span> <span class=\"n\">Atom1Feed</span>\n    <span class=\"n\">subtitle</span> <span class=\"o\">=</span> <span class=\"n\">RssSiteNewsFeed</span><span class=\"o\">.</span><span class=\"n\">description</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>In this example, the RSS feed uses a <code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code> while the Atom\nfeed uses a <code class=\"docutils literal notranslate\"><span class=\"pre\">subtitle</span></code>. That\u2019s because Atom feeds don\u2019t provide for\na feed-level \u201cdescription,\u201d but they <em>do</em> provide for a \u201csubtitle.\u201d</p>\n<p>If you provide a <code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code> in your\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class, Django will <em>not</em>\nautomatically put that into the <code class=\"docutils literal notranslate\"><span class=\"pre\">subtitle</span></code> element, because a\nsubtitle and description are not necessarily the same thing. Instead, you\nshould define a <code class=\"docutils literal notranslate\"><span class=\"pre\">subtitle</span></code> attribute.</p>\n<p class=\"last\">In the above example, we set the Atom feed\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">subtitle</span></code> to the RSS feed\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code>, because it\u2019s quite short already.</p>\n</div>\n<p>And the accompanying URLconf:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.urls</span> <span class=\"kn\">import</span> <span class=\"n\">path</span>\n<span class=\"kn\">from</span> <span class=\"nn\">myproject.feeds</span> <span class=\"kn\">import</span> <span class=\"n\">AtomSiteNewsFeed</span><span class=\"p\">,</span> <span class=\"n\">RssSiteNewsFeed</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;sitenews/rss/&quot;</span><span class=\"p\">,</span> <span class=\"n\">RssSiteNewsFeed</span><span class=\"p\">()),</span>\n    <span class=\"n\">path</span><span class=\"p\">(</span><span class=\"s2\">&quot;sitenews/atom/&quot;</span><span class=\"p\">,</span> <span class=\"n\">AtomSiteNewsFeed</span><span class=\"p\">()),</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-feed-class-reference\">\n<span id=\"feed-class-reference\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> class reference<a class=\"headerlink\" href=\"#feed-class-reference\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.contrib.syndication.views.Feed\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">views.</span></code><code class=\"sig-name descname\"><span class=\"pre\">Feed</span></code><a class=\"headerlink\" href=\"#django.contrib.syndication.views.Feed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This example illustrates all possible attributes and methods for a\n<a class=\"reference internal\" href=\"#django.contrib.syndication.views.Feed\" title=\"django.contrib.syndication.views.Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Feed</span></code></a> class:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.contrib.syndication.views</span> <span class=\"kn\">import</span> <span class=\"n\">Feed</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">feedgenerator</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleFeed</span><span class=\"p\">(</span><span class=\"n\">Feed</span><span class=\"p\">):</span>\n    <span class=\"c1\"># FEED TYPE -- Optional. This should be a class that subclasses</span>\n    <span class=\"c1\"># django.utils.feedgenerator.SyndicationFeed. This designates</span>\n    <span class=\"c1\"># which type of feed this should be: RSS 2.0, Atom 1.0, etc. If</span>\n    <span class=\"c1\"># you don&#39;t specify feed_type, your feed will be RSS 2.0. This</span>\n    <span class=\"c1\"># should be a class, not an instance of the class.</span>\n\n    <span class=\"n\">feed_type</span> <span class=\"o\">=</span> <span class=\"n\">feedgenerator</span><span class=\"o\">.</span><span class=\"n\">Rss201rev2Feed</span>\n\n    <span class=\"c1\"># TEMPLATE NAMES -- Optional. These should be strings</span>\n    <span class=\"c1\"># representing names of Django templates that the system should</span>\n    <span class=\"c1\"># use in rendering the title and description of your feed items.</span>\n    <span class=\"c1\"># Both are optional. If a template is not specified, the</span>\n    <span class=\"c1\"># item_title() or item_description() methods are used instead.</span>\n\n    <span class=\"n\">title_template</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"n\">description_template</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"c1\"># LANGUAGE -- Optional. This should be a string specifying a language</span>\n    <span class=\"c1\"># code. Defaults to django.utils.translation.get_language().</span>\n    <span class=\"n\">language</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;de&quot;</span>\n\n    <span class=\"c1\"># TITLE -- One of the following three is required. The framework</span>\n    <span class=\"c1\"># looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the</span>\n<span class=\"sd\">        feed&#39;s title as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s title as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;foo&quot;</span>  <span class=\"c1\"># Hard-coded title.</span>\n\n    <span class=\"c1\"># LINK -- One of the following three is required. The framework</span>\n    <span class=\"c1\"># looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        # Takes the object returned by get_object() and returns the URL</span>\n<span class=\"sd\">        # of the HTML version of the feed as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the URL of the HTML version of the feed as a normal Python</span>\n<span class=\"sd\">        string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">link</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/blog/&quot;</span>  <span class=\"c1\"># Hard-coded URL.</span>\n\n    <span class=\"c1\"># FEED_URL -- One of the following three is optional. The framework</span>\n    <span class=\"c1\"># looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">feed_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        # Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        # own URL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">feed_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s own URL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">feed_url</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/blog/rss/&quot;</span>  <span class=\"c1\"># Hard-coded URL.</span>\n\n    <span class=\"c1\"># GUID -- One of the following three is optional. The framework looks</span>\n    <span class=\"c1\"># for them in this order. This property is only used for Atom feeds</span>\n    <span class=\"c1\"># (where it is the feed-level ID element). If not provided, the feed</span>\n    <span class=\"c1\"># link is used as the ID.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">feed_guid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the globally</span>\n<span class=\"sd\">        unique ID for the feed as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">feed_guid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s globally unique ID as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">feed_guid</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/foo/bar/1234&quot;</span>  <span class=\"c1\"># Hard-coded guid.</span>\n\n    <span class=\"c1\"># DESCRIPTION -- One of the following three is required. The framework</span>\n    <span class=\"c1\"># looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        description as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s description as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Foo bar baz.&quot;</span>  <span class=\"c1\"># Hard-coded description.</span>\n\n    <span class=\"c1\"># AUTHOR NAME --One of the following three is optional. The framework</span>\n    <span class=\"c1\"># looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">author_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        author&#39;s name as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">author_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s author&#39;s name as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">author_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Sally Smith&quot;</span>  <span class=\"c1\"># Hard-coded author name.</span>\n\n    <span class=\"c1\"># AUTHOR EMAIL --One of the following three is optional. The framework</span>\n    <span class=\"c1\"># looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">author_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        author&#39;s email as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">author_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s author&#39;s email as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">author_email</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;test@example.com&quot;</span>  <span class=\"c1\"># Hard-coded author email.</span>\n\n    <span class=\"c1\"># AUTHOR LINK --One of the following three is optional. The framework</span>\n    <span class=\"c1\"># looks for them in this order. In each case, the URL should include</span>\n    <span class=\"c1\"># the &quot;http://&quot; and domain name.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">author_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        author&#39;s URL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">author_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s author&#39;s URL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">author_link</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://www.example.com/&quot;</span>  <span class=\"c1\"># Hard-coded author URL.</span>\n\n    <span class=\"c1\"># CATEGORIES -- One of the following three is optional. The framework</span>\n    <span class=\"c1\"># looks for them in this order. In each case, the method/attribute</span>\n    <span class=\"c1\"># should return an iterable object that returns strings.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">categories</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        categories as iterable over strings.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">categories</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s categories as iterable over strings.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;python&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># Hard-coded list of categories.</span>\n\n    <span class=\"c1\"># COPYRIGHT NOTICE -- One of the following three is optional. The</span>\n    <span class=\"c1\"># framework looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">feed_copyright</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        copyright notice as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">feed_copyright</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s copyright notice as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">feed_copyright</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright (c) 2007, Sally Smith&quot;</span>  <span class=\"c1\"># Hard-coded copyright notice.</span>\n\n    <span class=\"c1\"># TTL -- One of the following three is optional. The framework looks</span>\n    <span class=\"c1\"># for them in this order. Ignored for Atom feeds.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ttl</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns the feed&#39;s</span>\n<span class=\"sd\">        TTL (Time To Live) as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ttl</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the feed&#39;s TTL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">ttl</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>  <span class=\"c1\"># Hard-coded Time To Live.</span>\n\n    <span class=\"c1\"># ITEMS -- One of the following three is required. The framework looks</span>\n    <span class=\"c1\"># for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the object returned by get_object() and returns a list of</span>\n<span class=\"sd\">        items to publish in this feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">items</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns a list of items to publish in this feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">items</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;Item 1&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Item 2&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># Hard-coded items.</span>\n\n    <span class=\"c1\"># GET_OBJECT -- This is required for feeds that publish different data</span>\n    <span class=\"c1\"># for different URL parameters. (See &quot;A complex example&quot; above.)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_object</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes the current request and the arguments from the URL, and</span>\n<span class=\"sd\">        returns an object represented by this feed. Raises</span>\n<span class=\"sd\">        django.core.exceptions.ObjectDoesNotExist on error.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># ITEM TITLE AND DESCRIPTION -- If title_template or</span>\n    <span class=\"c1\"># description_template are not defined, these are used instead. Both are</span>\n    <span class=\"c1\"># optional, by default they will use the string representation of the</span>\n    <span class=\"c1\"># item.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        title as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the title for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_title</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Breaking News: Nothing Happening&quot;</span>  <span class=\"c1\"># Hard-coded title.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        description as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_description</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the description for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_description</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;A description of the item.&quot;</span>  <span class=\"c1\"># Hard-coded description.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_context_data</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns a dictionary to use as extra context if either</span>\n<span class=\"sd\">        description_template or item_template are used.</span>\n\n<span class=\"sd\">        Default implementation preserves the old behavior</span>\n<span class=\"sd\">        of using {&#39;obj&#39;: item, &#39;site&#39;: current_site} as the context.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># ITEM LINK -- One of these three is required. The framework looks for</span>\n    <span class=\"c1\"># them in this order.</span>\n\n    <span class=\"c1\"># First, the framework tries the two methods below, in</span>\n    <span class=\"c1\"># order. Failing that, it falls back to the get_absolute_url()</span>\n    <span class=\"c1\"># method on each item returned by items().</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s URL.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the URL for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># ITEM_GUID -- The following method is optional. If not provided, the</span>\n    <span class=\"c1\"># item&#39;s link is used by default.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_guid</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as return by items(), and returns the item&#39;s ID.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"c1\"># ITEM_GUID_IS_PERMALINK -- The following method is optional. If</span>\n    <span class=\"c1\"># provided, it sets the &#39;isPermaLink&#39; attribute of an item&#39;s</span>\n    <span class=\"c1\"># GUID element. This method is used only when &#39;item_guid&#39; is</span>\n    <span class=\"c1\"># specified.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_guid_is_permalink</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns a boolean.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_guid_is_permalink</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>  <span class=\"c1\"># Hard coded value</span>\n\n    <span class=\"c1\"># ITEM AUTHOR NAME -- One of the following three is optional. The</span>\n    <span class=\"c1\"># framework looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_author_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        author&#39;s name as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_author_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the author name for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_author_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Sally Smith&quot;</span>  <span class=\"c1\"># Hard-coded author name.</span>\n\n    <span class=\"c1\"># ITEM AUTHOR EMAIL --One of the following three is optional. The</span>\n    <span class=\"c1\"># framework looks for them in this order.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># If you specify this, you must specify item_author_name.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_author_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        author&#39;s email as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_author_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the author email for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_author_email</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;test@example.com&quot;</span>  <span class=\"c1\"># Hard-coded author email.</span>\n\n    <span class=\"c1\"># ITEM AUTHOR LINK -- One of the following three is optional. The</span>\n    <span class=\"c1\"># framework looks for them in this order. In each case, the URL should</span>\n    <span class=\"c1\"># include the &quot;http://&quot; and domain name.</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># If you specify this, you must specify item_author_name.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_author_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        author&#39;s URL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_author_link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the author URL for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_author_link</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://www.example.com/&quot;</span>  <span class=\"c1\"># Hard-coded author URL.</span>\n\n    <span class=\"c1\"># ITEM ENCLOSURES -- One of the following three is optional. The</span>\n    <span class=\"c1\"># framework looks for them in this order. If one of them is defined,</span>\n    <span class=\"c1\"># ``item_enclosure_url``, ``item_enclosure_length``, and</span>\n    <span class=\"c1\"># ``item_enclosure_mime_type`` will have no effect.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosures</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns a list of</span>\n<span class=\"sd\">        ``django.utils.feedgenerator.Enclosure`` objects.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosures</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the ``django.utils.feedgenerator.Enclosure`` list for every</span>\n<span class=\"sd\">        item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_enclosures</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>  <span class=\"c1\"># Hard-coded enclosure list</span>\n\n    <span class=\"c1\"># ITEM ENCLOSURE URL -- One of these three is required if you&#39;re</span>\n    <span class=\"c1\"># publishing enclosures and you&#39;re not using ``item_enclosures``. The</span>\n    <span class=\"c1\"># framework looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosure_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        enclosure URL.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosure_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the enclosure URL for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_enclosure_url</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/foo/bar.mp3&quot;</span>  <span class=\"c1\"># Hard-coded enclosure link.</span>\n\n    <span class=\"c1\"># ITEM ENCLOSURE LENGTH -- One of these three is required if you&#39;re</span>\n    <span class=\"c1\"># publishing enclosures and you&#39;re not using ``item_enclosures``. The</span>\n    <span class=\"c1\"># framework looks for them in this order. In each case, the returned</span>\n    <span class=\"c1\"># value should be either an integer, or a string representation of the</span>\n    <span class=\"c1\"># integer, in bytes.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosure_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        enclosure length.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosure_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the enclosure length for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_enclosure_length</span> <span class=\"o\">=</span> <span class=\"mi\">32000</span>  <span class=\"c1\"># Hard-coded enclosure length.</span>\n\n    <span class=\"c1\"># ITEM ENCLOSURE MIME TYPE -- One of these three is required if you&#39;re</span>\n    <span class=\"c1\"># publishing enclosures and you&#39;re not using ``item_enclosures``. The</span>\n    <span class=\"c1\"># framework looks for them in this order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosure_mime_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        enclosure MIME type.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_enclosure_mime_type</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the enclosure MIME type for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_enclosure_mime_type</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;audio/mpeg&quot;</span>  <span class=\"c1\"># Hard-coded enclosure MIME type.</span>\n\n    <span class=\"c1\"># ITEM PUBDATE -- It&#39;s optional to use one of these three. This is a</span>\n    <span class=\"c1\"># hook that specifies how to get the pubdate for a given item.</span>\n    <span class=\"c1\"># In each case, the method/attribute should return a Python</span>\n    <span class=\"c1\"># datetime.datetime object.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_pubdate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        pubdate.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_pubdate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the pubdate for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_pubdate</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Hard-coded pubdate.</span>\n\n    <span class=\"c1\"># ITEM UPDATED -- It&#39;s optional to use one of these three. This is a</span>\n    <span class=\"c1\"># hook that specifies how to get the updateddate for a given item.</span>\n    <span class=\"c1\"># In each case, the method/attribute should return a Python</span>\n    <span class=\"c1\"># datetime.datetime object.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_updateddate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        updateddate.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_updateddate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the updateddate for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_updateddate</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>  <span class=\"c1\"># Hard-coded updateddate.</span>\n\n    <span class=\"c1\"># ITEM CATEGORIES -- It&#39;s optional to use one of these three. This is</span>\n    <span class=\"c1\"># a hook that specifies how to get the list of categories for a given</span>\n    <span class=\"c1\"># item. In each case, the method/attribute should return an iterable</span>\n    <span class=\"c1\"># object that returns strings.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_categories</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        categories.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_categories</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the categories for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_categories</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;python&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;django&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># Hard-coded categories.</span>\n\n    <span class=\"c1\"># ITEM COPYRIGHT NOTICE (only applicable to Atom feeds) -- One of the</span>\n    <span class=\"c1\"># following three is optional. The framework looks for them in this</span>\n    <span class=\"c1\"># order.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_copyright</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        copyright notice as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_copyright</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the copyright notice for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_copyright</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Copyright (c) 2007, Sally Smith&quot;</span>  <span class=\"c1\"># Hard-coded copyright notice.</span>\n\n    <span class=\"c1\"># ITEM COMMENTS URL -- It&#39;s optional to use one of these three. This is</span>\n    <span class=\"c1\"># a hook that specifies how to get the URL of a page for comments for a</span>\n    <span class=\"c1\"># given item.</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_comments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Takes an item, as returned by items(), and returns the item&#39;s</span>\n<span class=\"sd\">        comments URL as a normal Python string.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">item_comments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Returns the comments URL for every item in the feed.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n\n    <span class=\"n\">item_comments</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;https://www.example.com/comments&quot;</span>  <span class=\"c1\"># Hard-coded comments URL</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-low-level-framework\">\n<span id=\"the-low-level-framework\"></span><h2>The low-level framework<a class=\"headerlink\" href=\"#the-low-level-framework\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Behind the scenes, the high-level RSS framework uses a lower-level framework\nfor generating feeds\u2019 XML. This framework lives in a single module:\n<a class=\"reference external\" href=\"https://github.com/django/django/blob/main/django/utils/feedgenerator.py\">django/utils/feedgenerator.py</a>.</p>\n<p>You use this framework on your own, for lower-level feed generation. You can\nalso create custom feed generator subclasses for use with the <code class=\"docutils literal notranslate\"><span class=\"pre\">feed_type</span></code>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> option.</p>\n<div class=\"section\" id=\"s-syndicationfeed-classes\">\n<span id=\"syndicationfeed-classes\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed</span></code> classes<a class=\"headerlink\" href=\"#syndicationfeed-classes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>The <a class=\"reference internal\" href=\"../../utils/#module-django.utils.feedgenerator\" title=\"django.utils.feedgenerator: Syndication feed generation library -- used for generating RSS, etc.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">feedgenerator</span></code></a> module contains a base class:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.SyndicationFeed\" title=\"django.utils.feedgenerator.SyndicationFeed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.SyndicationFeed</span></code></a></li>\n</ul>\n<p>and several subclasses:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.RssUserland091Feed\" title=\"django.utils.feedgenerator.RssUserland091Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.RssUserland091Feed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.Rss201rev2Feed\" title=\"django.utils.feedgenerator.Rss201rev2Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.Rss201rev2Feed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.Atom1Feed\" title=\"django.utils.feedgenerator.Atom1Feed\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.Atom1Feed</span></code></a></li>\n</ul>\n<p>Each of these three classes knows how to render a certain type of feed as XML.\nThey share this interface:</p>\n<dl class=\"docutils\">\n<dt><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.SyndicationFeed.__init__\" title=\"django.utils.feedgenerator.SyndicationFeed.__init__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.__init__()</span></code></a></dt><dd><p>Initialize the feed with the given dictionary of metadata, which applies to\nthe entire feed. Required keyword arguments are:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">link</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code></li>\n</ul>\n<p>There\u2019s also a bunch of other optional keywords:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">language</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">author_email</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">author_name</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">author_link</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">subtitle</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">categories</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">feed_url</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">feed_copyright</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">feed_guid</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ttl</span></code></li>\n</ul>\n<p>Any extra keyword arguments you pass to <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__</span></code> will be stored in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.feed</span></code> for use with <a class=\"reference internal\" href=\"#custom-feed-generators\">custom feed generators</a>.</p>\n<p>All parameters should be strings, except <code class=\"docutils literal notranslate\"><span class=\"pre\">categories</span></code>, which should be a\nsequence of strings. Beware that some control characters\nare <a class=\"reference external\" href=\"https://www.w3.org/International/questions/qa-controls\">not allowed</a>\nin XML documents. If your content has some of them, you might encounter a\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> when producing the feed.</p>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.SyndicationFeed.add_item\" title=\"django.utils.feedgenerator.SyndicationFeed.add_item\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.add_item()</span></code></a></dt><dd><p>Add an item to the feed with the given parameters.</p>\n<p>Required keyword arguments are:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">title</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">link</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">description</span></code></li>\n</ul>\n<p>Optional keyword arguments are:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">author_email</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">author_name</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">author_link</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">pubdate</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">comments</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">unique_id</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">enclosures</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">categories</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">item_copyright</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">ttl</span></code></li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">updateddate</span></code></li>\n</ul>\n<p>Extra keyword arguments will be stored for <a class=\"reference internal\" href=\"#custom-feed-generators\">custom feed generators</a>.</p>\n<p>All parameters, if given, should be strings, except:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">pubdate</span></code> should be a Python  <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> object.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">updateddate</span></code> should be a Python  <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime</span></code></a> object.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">enclosures</span></code> should be a list of\n<a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.Enclosure\" title=\"django.utils.feedgenerator.Enclosure\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.utils.feedgenerator.Enclosure</span></code></a> instances.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">categories</span></code> should be a sequence of strings.</li>\n</ul>\n</dd>\n<dt><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.SyndicationFeed.write\" title=\"django.utils.feedgenerator.SyndicationFeed.write\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.write()</span></code></a></dt><dd>Outputs the feed in the given encoding to outfile, which is a file-like object.</dd>\n<dt><a class=\"reference internal\" href=\"../../utils/#django.utils.feedgenerator.SyndicationFeed.writeString\" title=\"django.utils.feedgenerator.SyndicationFeed.writeString\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.writeString()</span></code></a></dt><dd>Returns the feed as a string in the given encoding.</dd>\n</dl>\n<p>For example, to create an Atom 1.0 feed and print it to standard output:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">feedgenerator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">feedgenerator</span><span class=\"o\">.</span><span class=\"n\">Atom1Feed</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;My Blog&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">link</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://www.example.com/&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;In which I write about what I ate today.&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">language</span><span class=\"o\">=</span><span class=\"s2\">&quot;en&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">author_name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Myself&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">feed_url</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://example.com/atom.xml&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">add_item</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hot dog today&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">link</span><span class=\"o\">=</span><span class=\"s2\">&quot;https://www.example.com/entries/1/&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">pubdate</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s2\">&quot;&lt;p&gt;Today I had a Vienna Beef hot dog. It was pink, plump and perfect.&lt;/p&gt;&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">writeString</span><span class=\"p\">(</span><span class=\"s2\">&quot;UTF-8&quot;</span><span class=\"p\">))</span>\n<span class=\"go\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>\n<span class=\"go\">&lt;feed xmlns=&quot;http://www.w3.org/2005/Atom&quot; xml:lang=&quot;en&quot;&gt;</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">&lt;/feed&gt;</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-custom-feed-generators\">\n<span id=\"custom-feed-generators\"></span><h3>Custom feed generators<a class=\"headerlink\" href=\"#custom-feed-generators\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you need to produce a custom feed format, you\u2019ve got a couple of options.</p>\n<p>If the feed format is totally custom, you\u2019ll want to subclass\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed</span></code> and completely replace the <code class=\"docutils literal notranslate\"><span class=\"pre\">write()</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">writeString()</span></code> methods.</p>\n<p>However, if the feed format is a spin-off of RSS or Atom (i.e. <a class=\"reference external\" href=\"https://georss.org\">GeoRSS</a>, Apple\u2019s\n<a class=\"reference external\" href=\"https://help.apple.com/itc/podcasts_connect/#/itcb54353390\">iTunes podcast format</a>, etc.), you\u2019ve got a better choice. These types of\nfeeds typically add extra elements and/or attributes to the underlying format,\nand there are a set of methods that <code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed</span></code> calls to get these extra\nattributes. Thus, you can subclass the appropriate feed generator class\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">Atom1Feed</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">Rss201rev2Feed</span></code>) and extend these callbacks. They are:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.root_attributes(self)</span></code></dt><dd>Return a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> of attributes to add to the root feed element\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">feed</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">channel</span></code>).</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.add_root_elements(self,</span> <span class=\"pre\">handler)</span></code></dt><dd>Callback to add elements inside the root feed element\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">feed</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">channel</span></code>). <code class=\"docutils literal notranslate\"><span class=\"pre\">handler</span></code> is an\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/xml.sax.utils.html#xml.sax.saxutils.XMLGenerator\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">XMLGenerator</span></code></a> from Python\u2019s built-in SAX library;\nyou\u2019ll call methods on it to add to the XML document in process.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.item_attributes(self,</span> <span class=\"pre\">item)</span></code></dt><dd>Return a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> of attributes to add to each item (<code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">entry</span></code>)\nelement. The argument, <code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code>, is a dictionary of all the data passed to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.add_item()</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed.add_item_elements(self,</span> <span class=\"pre\">handler,</span> <span class=\"pre\">item)</span></code></dt><dd>Callback to add elements to each item (<code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">entry</span></code>) element.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">handler</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">item</span></code> are as above.</dd>\n</dl>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">If you override any of these methods, be sure to call the superclass methods\nsince they add the required elements for each feed format.</p>\n</div>\n<p>For example, you might start implementing an iTunes RSS feed generator like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">iTunesFeed</span><span class=\"p\">(</span><span class=\"n\">Rss201rev2Feed</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">root_attributes</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">attrs</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">root_attributes</span><span class=\"p\">()</span>\n        <span class=\"n\">attrs</span><span class=\"p\">[</span><span class=\"s2\">&quot;xmlns:itunes&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;http://www.itunes.com/dtds/podcast-1.0.dtd&quot;</span>\n        <span class=\"k\">return</span> <span class=\"n\">attrs</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_root_elements</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_root_elements</span><span class=\"p\">(</span><span class=\"n\">handler</span><span class=\"p\">)</span>\n        <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">addQuickElement</span><span class=\"p\">(</span><span class=\"s2\">&quot;itunes:explicit&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;clean&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>There\u2019s a lot more work to be done for a complete custom feed class, but the\nabove example should demonstrate the basic idea.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/csrf", "Cross Site Request Forgery protection", "N", "next"], ["ref/contrib/staticfiles", "The <code class=\"docutils literal notranslate\"><span class=\"pre\">staticfiles</span></code> app", "P", "previous"]], "sourcename": "ref/contrib/syndication.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">The syndication feed framework</a><ul>\n<li><a class=\"reference internal\" href=\"#the-high-level-framework\">The high-level framework</a><ul>\n<li><a class=\"reference internal\" href=\"#overview\">Overview</a></li>\n<li><a class=\"reference internal\" href=\"#feed-classes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> classes</a></li>\n<li><a class=\"reference internal\" href=\"#a-simple-example\">A simple example</a></li>\n<li><a class=\"reference internal\" href=\"#a-complex-example\">A complex example</a></li>\n<li><a class=\"reference internal\" href=\"#specifying-the-type-of-feed\">Specifying the type of feed</a></li>\n<li><a class=\"reference internal\" href=\"#enclosures\">Enclosures</a></li>\n<li><a class=\"reference internal\" href=\"#language\">Language</a></li>\n<li><a class=\"reference internal\" href=\"#urls\">URLs</a></li>\n<li><a class=\"reference internal\" href=\"#publishing-atom-and-rss-feeds-in-tandem\">Publishing Atom and RSS feeds in tandem</a></li>\n<li><a class=\"reference internal\" href=\"#feed-class-reference\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Feed</span></code> class reference</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#the-low-level-framework\">The low-level framework</a><ul>\n<li><a class=\"reference internal\" href=\"#syndicationfeed-classes\"><code class=\"docutils literal notranslate\"><span class=\"pre\">SyndicationFeed</span></code> classes</a></li>\n<li><a class=\"reference internal\" href=\"#custom-feed-generators\">Custom feed generators</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/contrib/syndication", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
