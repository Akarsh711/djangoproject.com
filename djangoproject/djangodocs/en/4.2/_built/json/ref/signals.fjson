{"parents": [{"link": "../", "title": "API Reference"}], "prev": {"link": "../settings/", "title": "Settings"}, "next": {"link": "../templates/", "title": "Templates"}, "title": "Signals", "meta": {}, "body": "<div class=\"section\" id=\"s-signals\">\n<span id=\"signals\"></span><h1>Signals<a class=\"headerlink\" href=\"#signals\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>A list of all the signals that Django sends. All built-in signals are sent\nusing the <a class=\"reference internal\" href=\"../../topics/signals/#django.dispatch.Signal.send\" title=\"django.dispatch.Signal.send\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">send()</span></code></a> method.</p>\n<div class=\"admonition seealso\">\n<p class=\"first admonition-title\">See also</p>\n<p>See the documentation on the <a class=\"reference internal\" href=\"../../topics/signals/\"><span class=\"doc\">signal dispatcher</span></a> for\ninformation regarding how to register for and receive signals.</p>\n<p class=\"last\">The <a class=\"reference internal\" href=\"../../topics/auth/\"><span class=\"doc\">authentication framework</span></a> sends <a class=\"reference internal\" href=\"../contrib/auth/#topics-auth-signals\"><span class=\"std std-ref\">signals when\na user is logged in / out</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-module-django.db.models.signals\">\n<span id=\"s-model-signals\"></span><span id=\"module-django.db.models.signals\"></span><span id=\"model-signals\"></span><h2>Model signals<a class=\"headerlink\" href=\"#module-django.db.models.signals\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The <a class=\"reference internal\" href=\"#module-django.db.models.signals\" title=\"django.db.models.signals: Signals sent by the model system.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.db.models.signals</span></code></a> module defines a set of signals sent by the\nmodel system.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Signals can make your code harder to maintain. Consider implementing a\nhelper method on a <a class=\"reference internal\" href=\"../../topics/db/managers/#custom-managers\"><span class=\"std std-ref\">custom manager</span></a>, to\nboth update your models and perform additional logic, or else\n<a class=\"reference internal\" href=\"../../topics/db/models/#overriding-model-methods\"><span class=\"std std-ref\">overriding model methods</span></a> before using\nmodel signals.</p>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>Many of these signals are sent by various model methods like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> or <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> that you can\noverride in your own code.</p>\n<p>If you override these methods on your model, you must call the parent class\u2019\nmethods for these signals to be sent.</p>\n<p class=\"last\">Note also that Django stores signal handlers as weak references by default,\nso if your handler is a local function, it may be garbage collected.  To\nprevent this, pass <code class=\"docutils literal notranslate\"><span class=\"pre\">weak=False</span></code> when you call the signal\u2019s <a class=\"reference internal\" href=\"../../topics/signals/#django.dispatch.Signal.connect\" title=\"django.dispatch.Signal.connect\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">connect()</span></code></a>.</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Model signals <code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code> model can be lazily referenced when connecting a\nreceiver by specifying its full application label. For example, an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> model defined in the <code class=\"docutils literal notranslate\"><span class=\"pre\">polls</span></code> application could be referenced\nas <code class=\"docutils literal notranslate\"><span class=\"pre\">'polls.Question'</span></code>. This sort of reference can be quite handy when\ndealing with circular import dependencies and swappable models.</p>\n</div>\n<div class=\"section\" id=\"s-pre-init\">\n<span id=\"pre-init\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_init</span></code><a class=\"headerlink\" href=\"#pre-init\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.pre_init\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pre_init</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.pre_init\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Whenever you instantiate a Django model, this signal is sent at the beginning\nof the model\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The model class that just had an instance created.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code></dt><dd>A list of positional arguments passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code></dt><dd>A dictionary of keyword arguments passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>.</dd>\n</dl>\n<p>For example, the <a class=\"reference internal\" href=\"../../intro/tutorial02/\"><span class=\"doc\">tutorial</span></a> has this line:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">Question</span><span class=\"p\">(</span><span class=\"n\">question_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;What&#39;s new?&quot;</span><span class=\"p\">,</span> <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n</pre></div>\n</div>\n<p>The arguments sent to a <a class=\"reference internal\" href=\"#django.db.models.signals.pre_init\" title=\"django.db.models.signals.pre_init\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_init</span></code></a> handler would be:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"10%\" />\n<col width=\"90%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Argument</th>\n<th class=\"head\">Value</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">Question</span></code> (the class itself)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">args</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">[]</span></code> (an empty list because there were no positional\narguments passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">kwargs</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{'question_text':</span> <span class=\"pre\">&quot;What's</span> <span class=\"pre\">new?&quot;,</span></code>\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'pub_date':</span> <span class=\"pre\">datetime.datetime(2012,</span> <span class=\"pre\">2,</span> <span class=\"pre\">26,</span> <span class=\"pre\">13,</span> <span class=\"pre\">0,</span> <span class=\"pre\">0,</span> <span class=\"pre\">775217,</span> <span class=\"pre\">tzinfo=datetime.timezone.utc)}</span></code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"s-post-init\">\n<span id=\"post-init\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">post_init</span></code><a class=\"headerlink\" href=\"#post-init\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.post_init\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">post_init</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.post_init\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Like pre_init, but this one is sent when the <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method finishes.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>As above: the model class that just had an instance created.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></dt><dd><p>The actual instance of the model that\u2019s just been created.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\"><a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model._state\" title=\"django.db.models.Model._state\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">instance._state</span></code></a> isn\u2019t set\nbefore sending the <code class=\"docutils literal notranslate\"><span class=\"pre\">post_init</span></code> signal, so <code class=\"docutils literal notranslate\"><span class=\"pre\">_state</span></code> attributes\nalways have their default values. For example, <code class=\"docutils literal notranslate\"><span class=\"pre\">_state.db</span></code> is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</div>\n</dd>\n</dl>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">For performance reasons, you shouldn\u2019t perform queries in receivers of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">pre_init</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">post_init</span></code> signals because they would be executed for\neach instance returned during queryset iteration.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-pre-save\">\n<span id=\"pre-save\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save</span></code><a class=\"headerlink\" href=\"#pre-save\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.pre_save\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pre_save</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.pre_save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This is sent at the beginning of a model\u2019s <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>\nmethod.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The model class.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></dt><dd>The actual instance being saved.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">raw</span></code></dt><dd>A boolean; <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the model is saved exactly as presented\n(i.e. when loading a <a class=\"reference internal\" href=\"../../topics/db/fixtures/#fixtures-explanation\"><span class=\"std std-ref\">fixture</span></a>). One should not\nquery/modify other records in the database as the database might not be in\na consistent state yet.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The database alias being used.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code></dt><dd>The set of fields to update as passed to <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>\nif <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> wasn\u2019t passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-post-save\">\n<span id=\"post-save\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">post_save</span></code><a class=\"headerlink\" href=\"#post-save\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.post_save\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">post_save</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.post_save\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Like <a class=\"reference internal\" href=\"#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a>, but sent at the end of the\n<a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> method.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The model class.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></dt><dd>The actual instance being saved.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">created</span></code></dt><dd>A boolean; <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if a new record was created.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">raw</span></code></dt><dd>A boolean; <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the model is saved exactly as presented\n(i.e. when loading a <a class=\"reference internal\" href=\"../../topics/db/fixtures/#fixtures-explanation\"><span class=\"std std-ref\">fixture</span></a>). One should not\nquery/modify other records in the database as the database might not be in\na consistent state yet.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The database alias being used.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code></dt><dd>The set of fields to update as passed to <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>\nif <code class=\"docutils literal notranslate\"><span class=\"pre\">update_fields</span></code> wasn\u2019t passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-pre-delete\">\n<span id=\"pre-delete\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_delete</span></code><a class=\"headerlink\" href=\"#pre-delete\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.pre_delete\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pre_delete</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.pre_delete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent at the beginning of a model\u2019s <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a>\nmethod and a queryset\u2019s <a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The model class.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></dt><dd>The actual instance being deleted.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The database alias being used.</dd>\n</dl>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">origin</span></code></p>\n<blockquote>\n<div>The origin of the deletion being the instance of a <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> class.</div></blockquote>\n</div>\n<div class=\"section\" id=\"s-post-delete\">\n<span id=\"post-delete\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">post_delete</span></code><a class=\"headerlink\" href=\"#post-delete\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.post_delete\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">post_delete</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.post_delete\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Like <a class=\"reference internal\" href=\"#django.db.models.signals.pre_delete\" title=\"django.db.models.signals.pre_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_delete</span></code></a>, but sent at the end of a model\u2019s\n<a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method and a queryset\u2019s\n<a class=\"reference internal\" href=\"../models/querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a> method.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The model class.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></dt><dd><p>The actual instance being deleted.</p>\n<p>Note that the object will no longer be in the database, so be very\ncareful what you do with this instance.</p>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The database alias being used.</dd>\n</dl>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">origin</span></code></p>\n<blockquote>\n<div>The origin of the deletion being the instance of a <code class=\"docutils literal notranslate\"><span class=\"pre\">Model</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> class.</div></blockquote>\n</div>\n<div class=\"section\" id=\"s-m2m-changed\">\n<span id=\"m2m-changed\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code><a class=\"headerlink\" href=\"#m2m-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.m2m_changed\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">m2m_changed</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.m2m_changed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent when a <a class=\"reference internal\" href=\"../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> is changed on a model\ninstance. Strictly speaking, this is not a model signal since it is sent by the\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>, but since it complements the\n<a class=\"reference internal\" href=\"#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a>/<a class=\"reference internal\" href=\"#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.signals.pre_delete\" title=\"django.db.models.signals.pre_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_delete</span></code></a>/<a class=\"reference internal\" href=\"#django.db.models.signals.post_delete\" title=\"django.db.models.signals.post_delete\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_delete</span></code></a>\nwhen it comes to tracking changes to models, it is included here.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The intermediate model class describing the\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>. This class is automatically\ncreated when a many-to-many field is defined; you can access it using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">through</span></code> attribute on the many-to-many field.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></dt><dd>The instance whose many-to-many relation is updated. This can be an\ninstance of the <code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code>, or of the class the\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> is related to.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code></dt><dd><p>A string indicating the type of update that is done on the relation.\nThis can be one of the following:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;pre_add&quot;</span></code></dt><dd>Sent <em>before</em> one or more objects are added to the relation.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;post_add&quot;</span></code></dt><dd>Sent <em>after</em> one or more objects are added to the relation.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;pre_remove&quot;</span></code></dt><dd>Sent <em>before</em> one or more objects are removed from the relation.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;post_remove&quot;</span></code></dt><dd>Sent <em>after</em> one or more objects are removed from the relation.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;pre_clear&quot;</span></code></dt><dd>Sent <em>before</em> the relation is cleared.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;post_clear&quot;</span></code></dt><dd>Sent <em>after</em> the relation is cleared.</dd>\n</dl>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse</span></code></dt><dd>Indicates which side of the relation is updated (i.e., if it is the\nforward or reverse relation that is being modified).</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code></dt><dd>The class of the objects that are added to, removed from or cleared\nfrom the relation.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">pk_set</span></code></dt><dd><p>For the <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_add</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">post_add</span></code> actions, this is a set of primary key\nvalues that will be, or have been, added to the relation. This may be a\nsubset of the values submitted to be added, since inserts must filter\nexisting values in order to avoid a database <code class=\"docutils literal notranslate\"><span class=\"pre\">IntegrityError</span></code>.</p>\n<p>For the <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_remove</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">post_remove</span></code> actions, this is a set of\nprimary key values that was submitted to be removed from the relation. This\nis not dependent on whether the values actually will be, or have been,\nremoved. In particular, non-existent values may be submitted, and will\nappear in <code class=\"docutils literal notranslate\"><span class=\"pre\">pk_set</span></code>, even though they have no effect on the database.</p>\n<p>For the <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_clear</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">post_clear</span></code> actions, this is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The database alias being used.</dd>\n</dl>\n<p>For example, if a <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> can have multiple <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> objects, modeled\nlike this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Topping</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Pizza</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"n\">toppings</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Topping</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If we connected a handler like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">m2m_changed</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">toppings_changed</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do something</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">m2m_changed</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">toppings_changed</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">through</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>and then did something like this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">Topping</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">toppings</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>the arguments sent to a <a class=\"reference internal\" href=\"#django.db.models.signals.m2m_changed\" title=\"django.db.models.signals.m2m_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code></a> handler (<code class=\"docutils literal notranslate\"><span class=\"pre\">toppings_changed</span></code> in\nthe example above) would be:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"18%\" />\n<col width=\"82%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Argument</th>\n<th class=\"head\">Value</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza.toppings.through</span></code> (the intermediate m2m class)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">p</span></code> (the <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> instance being modified)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;pre_add&quot;</span></code> (followed by a separate signal with <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;post_add&quot;</span></code>)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> contains the\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>, so this call\nmodifies the forward relation)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> (the class of the objects added to the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code>)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">pk_set</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{t.id}</span></code> (since only <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span> <span class=\"pre\">t</span></code> was added to the relation)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;default&quot;</span></code> (since the default router sends writes here)</td>\n</tr>\n</tbody>\n</table>\n<p>And if we would then do something like this:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">pizza_set</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>the arguments sent to a <a class=\"reference internal\" href=\"#django.db.models.signals.m2m_changed\" title=\"django.db.models.signals.m2m_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code></a> handler would be:</p>\n<table class=\"docutils\">\n<colgroup>\n<col width=\"16%\" />\n<col width=\"84%\" />\n</colgroup>\n<thead valign=\"bottom\">\n<tr class=\"row-odd\"><th class=\"head\">Argument</th>\n<th class=\"head\">Value</th>\n</tr>\n</thead>\n<tbody valign=\"top\">\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza.toppings.through</span></code> (the intermediate m2m class)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">instance</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">t</span></code> (the <code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code> instance being modified)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">action</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;pre_remove&quot;</span></code> (followed by a separate signal with <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;post_remove&quot;</span></code>)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">reverse</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> contains the\n<a class=\"reference internal\" href=\"../models/fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a>, so this call\nmodifies the reverse relation)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">model</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span></code> (the class of the objects removed from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Topping</span></code>)</td>\n</tr>\n<tr class=\"row-odd\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">pk_set</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">{p.id}</span></code> (since only <code class=\"docutils literal notranslate\"><span class=\"pre\">Pizza</span> <span class=\"pre\">p</span></code> was removed from the\nrelation)</td>\n</tr>\n<tr class=\"row-even\"><td><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></td>\n<td><code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;default&quot;</span></code> (since the default router sends writes here)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"section\" id=\"s-class-prepared\">\n<span id=\"class-prepared\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">class_prepared</span></code><a class=\"headerlink\" href=\"#class-prepared\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.class_prepared\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">class_prepared</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.class_prepared\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent whenever a model class has been \u201cprepared\u201d \u2013 that is, once a model has\nbeen defined and registered with Django\u2019s model system. Django uses this\nsignal internally; it\u2019s not generally used in third-party applications.</p>\n<p>Since this signal is sent during the app registry population process, and\n<a class=\"reference internal\" href=\"../applications/#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AppConfig.ready()</span></code></a> runs after the app\nregistry is fully populated, receivers cannot be connected in that method.\nOne possibility is to connect them <code class=\"docutils literal notranslate\"><span class=\"pre\">AppConfig.__init__()</span></code> instead, taking\ncare not to import models or trigger calls to the app registry.</p>\n<p>Arguments that are sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The model class which was just prepared.</dd>\n</dl>\n</div>\n</div>\n<div class=\"section\" id=\"s-management-signals\">\n<span id=\"management-signals\"></span><h2>Management signals<a class=\"headerlink\" href=\"#management-signals\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Signals sent by <a class=\"reference internal\" href=\"../django-admin/\"><span class=\"doc\">django-admin</span></a>.</p>\n<div class=\"section\" id=\"s-pre-migrate\">\n<span id=\"pre-migrate\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_migrate</span></code><a class=\"headerlink\" href=\"#pre-migrate\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.pre_migrate\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pre_migrate</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.pre_migrate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent by the <a class=\"reference internal\" href=\"../django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> command before it starts to install an\napplication. It\u2019s not emitted for applications that lack a <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> module.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>An <a class=\"reference internal\" href=\"../applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> instance for the application about to\nbe migrated/synced.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">app_config</span></code></dt><dd>Same as <code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code></dt><dd><p>Indicates how much information <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> is printing on screen. See\nthe <a class=\"reference internal\" href=\"../django-admin/#cmdoption-verbosity\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--verbosity</span></code></a> flag for details.</p>\n<p>Functions which listen for <a class=\"reference internal\" href=\"#django.db.models.signals.pre_migrate\" title=\"django.db.models.signals.pre_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_migrate</span></code></a> should adjust what they\noutput to the screen based on the value of this argument.</p>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code></dt><dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, it\u2019s safe to prompt the user to input\nthings on the command line. If <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, functions\nwhich listen for this signal should not try to prompt for anything.</p>\n<p>For example, the <a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a> app only prompts to create a\nsuperuser when <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code></dt><dd>A stream-like object where verbose output should be redirected.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The alias of database on which a command will operate.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">plan</span></code></dt><dd>The migration plan that is going to be used for the migration run. While\nthe plan is not public API, this allows for the rare cases when it is\nnecessary to know the plan. A plan is a list of two-tuples with the first\nitem being the instance of a migration class and the second item showing\nif the migration was rolled back (<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>) or applied (<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>).</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">apps</span></code></dt><dd>An instance of <a class=\"reference internal\" href=\"../applications/#module-django.apps\" title=\"django.apps\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Apps</span></code></a> containing the state of the\nproject before the migration run. It should be used instead of the global\n<a class=\"reference internal\" href=\"../applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">apps</span></code></a> registry to retrieve the models you\nwant to perform operations on.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-post-migrate\">\n<span id=\"post-migrate\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code><a class=\"headerlink\" href=\"#post-migrate\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.signals.post_migrate\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.models.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">post_migrate</span></code><a class=\"headerlink\" href=\"#django.db.models.signals.post_migrate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent at the end of the <a class=\"reference internal\" href=\"../django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> (even if no migrations are run) and\n<a class=\"reference internal\" href=\"../django-admin/#django-admin-flush\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">flush</span></code></a> commands. It\u2019s not emitted for applications that lack a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> module.</p>\n<p>Handlers of this signal must not perform database schema alterations as doing\nso may cause the <a class=\"reference internal\" href=\"../django-admin/#django-admin-flush\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">flush</span></code></a> command to fail if it runs during the\n<a class=\"reference internal\" href=\"../django-admin/#django-admin-migrate\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">migrate</span></code></a> command.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>An <a class=\"reference internal\" href=\"../applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> instance for the application that was\njust installed.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">app_config</span></code></dt><dd>Same as <code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">verbosity</span></code></dt><dd><p>Indicates how much information <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code> is printing on screen. See\nthe <a class=\"reference internal\" href=\"../django-admin/#cmdoption-verbosity\"><code class=\"xref std std-option docutils literal notranslate\"><span class=\"pre\">--verbosity</span></code></a> flag for details.</p>\n<p>Functions which listen for <a class=\"reference internal\" href=\"#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a> should adjust what they\noutput to the screen based on the value of this argument.</p>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code></dt><dd><p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, it\u2019s safe to prompt the user to input\nthings on the command line. If <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, functions\nwhich listen for this signal should not try to prompt for anything.</p>\n<p>For example, the <a class=\"reference internal\" href=\"../../topics/auth/#module-django.contrib.auth\" title=\"django.contrib.auth: Django's authentication framework.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.contrib.auth</span></code></a> app only prompts to create a\nsuperuser when <code class=\"docutils literal notranslate\"><span class=\"pre\">interactive</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">stdout</span></code></dt><dd>A stream-like object where verbose output should be redirected.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">using</span></code></dt><dd>The database alias used for synchronization. Defaults to the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code>\ndatabase.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">plan</span></code></dt><dd>The migration plan that was used for the migration run. While the plan is\nnot public API, this allows for the rare cases when it is necessary to\nknow the plan. A plan is a list of two-tuples with the first item being\nthe instance of a migration class and the second item showing if the\nmigration was rolled back (<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>) or applied (<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>).</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">apps</span></code></dt><dd>An instance of <a class=\"reference internal\" href=\"../applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">Apps</span></code></a> containing the state of the\nproject after the migration run. It should be used instead of the global\n<a class=\"reference internal\" href=\"../applications/#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">apps</span></code></a> registry to retrieve the models you\nwant to perform operations on.</dd>\n</dl>\n<p>For example, you could register a callback in an\n<a class=\"reference internal\" href=\"../applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_migrate</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">my_callback</span><span class=\"p\">(</span><span class=\"n\">sender</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Your specific logic here</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyAppConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">post_migrate</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">my_callback</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If you provide an <a class=\"reference internal\" href=\"../applications/#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> instance as the sender\nargument, please ensure that the signal is registered in\n<a class=\"reference internal\" href=\"../applications/#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ready()</span></code></a>. <code class=\"docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code>s are recreated for\ntests that run with a modified set of <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> (such as\nwhen settings are overridden) and such signals should be connected for each\nnew <code class=\"docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code> instance.</p>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-module-django.core.signals\">\n<span id=\"s-request-response-signals\"></span><span id=\"module-django.core.signals\"></span><span id=\"request-response-signals\"></span><h2>Request/response signals<a class=\"headerlink\" href=\"#module-django.core.signals\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Signals sent by the core framework when processing a request.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Signals can make your code harder to maintain. Consider <a class=\"reference internal\" href=\"../../topics/http/middleware/\"><span class=\"doc\">using a\nmiddleware</span></a> before using request/response\nsignals.</p>\n</div>\n<div class=\"section\" id=\"s-request-started\">\n<span id=\"request-started\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">request_started</span></code><a class=\"headerlink\" href=\"#request-started\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.core.signals.request_started\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.core.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">request_started</span></code><a class=\"headerlink\" href=\"#django.core.signals.request_started\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent when Django begins processing an HTTP request.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The handler class \u2013 e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.handlers.wsgi.WsgiHandler</span></code> \u2013 that\nhandled the request.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">environ</span></code></dt><dd>The <code class=\"docutils literal notranslate\"><span class=\"pre\">environ</span></code> dictionary provided to the request.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-request-finished\">\n<span id=\"request-finished\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">request_finished</span></code><a class=\"headerlink\" href=\"#request-finished\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.core.signals.request_finished\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.core.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">request_finished</span></code><a class=\"headerlink\" href=\"#django.core.signals.request_finished\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent when Django finishes delivering an HTTP response to the client.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The handler class, as above.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-got-request-exception\">\n<span id=\"got-request-exception\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">got_request_exception</span></code><a class=\"headerlink\" href=\"#got-request-exception\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.core.signals.got_request_exception\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.core.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">got_request_exception</span></code><a class=\"headerlink\" href=\"#django.core.signals.got_request_exception\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This signal is sent whenever Django encounters an exception while processing an incoming HTTP request.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>Unused (always <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>).</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">request</span></code></dt><dd>The <a class=\"reference internal\" href=\"../request-response/#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object.</dd>\n</dl>\n</div>\n</div>\n<div class=\"section\" id=\"s-module-django.test.signals\">\n<span id=\"s-test-signals\"></span><span id=\"module-django.test.signals\"></span><span id=\"test-signals\"></span><h2>Test signals<a class=\"headerlink\" href=\"#module-django.test.signals\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Signals only sent when <a class=\"reference internal\" href=\"../../topics/testing/overview/#running-tests\"><span class=\"std std-ref\">running tests</span></a>.</p>\n<div class=\"section\" id=\"s-setting-changed\">\n<span id=\"setting-changed\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">setting_changed</span></code><a class=\"headerlink\" href=\"#setting-changed\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.test.signals.setting_changed\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.test.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setting_changed</span></code><a class=\"headerlink\" href=\"#django.test.signals.setting_changed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>This signal is sent when the value of a setting is changed through the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.test.TestCase.settings()</span></code> context manager or the\n<a class=\"reference internal\" href=\"../../topics/testing/tools/#django.test.override_settings\" title=\"django.test.override_settings\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.test.override_settings()</span></code></a> decorator/context manager.</p>\n<p>It\u2019s actually sent twice: when the new value is applied (\u201csetup\u201d) and when the\noriginal value is restored (\u201cteardown\u201d). Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">enter</span></code> argument to\ndistinguish between the two.</p>\n<p>You can also import this signal from <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.signals</span></code> to avoid importing\nfrom <code class=\"docutils literal notranslate\"><span class=\"pre\">django.test</span></code> in non-test situations.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The settings handler.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">setting</span></code></dt><dd>The name of the setting.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code></dt><dd>The value of the setting after the change. For settings that initially\ndon\u2019t exist, in the \u201cteardown\u201d phase, <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">enter</span></code></dt><dd>A boolean; <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the setting is applied, <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> if restored.</dd>\n</dl>\n</div>\n<div class=\"section\" id=\"s-template-rendered\">\n<span id=\"template-rendered\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">template_rendered</span></code><a class=\"headerlink\" href=\"#template-rendered\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.test.signals.template_rendered\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.test.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">template_rendered</span></code><a class=\"headerlink\" href=\"#django.test.signals.template_rendered\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent when the test system renders a template. This signal is not emitted during\nnormal operation of a Django server \u2013 it is only available during testing.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The <a class=\"reference internal\" href=\"../templates/api/#django.template.Template\" title=\"django.template.Template\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Template</span></code></a> object which was rendered.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code></dt><dd>Same as sender</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">context</span></code></dt><dd>The <a class=\"reference internal\" href=\"../templates/api/#django.template.Context\" title=\"django.template.Context\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Context</span></code></a> with which the template was\nrendered.</dd>\n</dl>\n</div>\n</div>\n<div class=\"section\" id=\"s-module-django.db.backends\">\n<span id=\"s-database-wrappers\"></span><span id=\"module-django.db.backends\"></span><span id=\"database-wrappers\"></span><h2>Database Wrappers<a class=\"headerlink\" href=\"#module-django.db.backends\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Signals sent by the database wrapper when a database connection is\ninitiated.</p>\n<div class=\"section\" id=\"s-connection-created\">\n<span id=\"connection-created\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">connection_created</span></code><a class=\"headerlink\" href=\"#connection-created\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.db.backends.signals.connection_created\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">django.db.backends.signals.</span></code><code class=\"sig-name descname\"><span class=\"pre\">connection_created</span></code><a class=\"headerlink\" href=\"#django.db.backends.signals.connection_created\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sent when the database wrapper makes the initial connection to the\ndatabase.  This is particularly useful if you\u2019d like to send any post\nconnection commands to the SQL backend.</p>\n<p>Arguments sent with this signal:</p>\n<dl class=\"docutils\">\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">sender</span></code></dt><dd>The database wrapper class \u2013 i.e.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.postgresql.DatabaseWrapper</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.backends.mysql.DatabaseWrapper</span></code>, etc.</dd>\n<dt><code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code></dt><dd>The database connection that was opened. This can be used in a\nmultiple-database configuration to differentiate connection signals\nfrom different databases.</dd>\n</dl>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/templates/index", "Templates", "N", "next"], ["ref/settings", "Settings", "P", "previous"]], "sourcename": "ref/signals.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Signals</a><ul>\n<li><a class=\"reference internal\" href=\"#module-django.db.models.signals\">Model signals</a><ul>\n<li><a class=\"reference internal\" href=\"#pre-init\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_init</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#post-init\"><code class=\"docutils literal notranslate\"><span class=\"pre\">post_init</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pre-save\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#post-save\"><code class=\"docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#pre-delete\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_delete</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#post-delete\"><code class=\"docutils literal notranslate\"><span class=\"pre\">post_delete</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#m2m-changed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#class-prepared\"><code class=\"docutils literal notranslate\"><span class=\"pre\">class_prepared</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#management-signals\">Management signals</a><ul>\n<li><a class=\"reference internal\" href=\"#pre-migrate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">pre_migrate</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#post-migrate\"><code class=\"docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-django.core.signals\">Request/response signals</a><ul>\n<li><a class=\"reference internal\" href=\"#request-started\"><code class=\"docutils literal notranslate\"><span class=\"pre\">request_started</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#request-finished\"><code class=\"docutils literal notranslate\"><span class=\"pre\">request_finished</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#got-request-exception\"><code class=\"docutils literal notranslate\"><span class=\"pre\">got_request_exception</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-django.test.signals\">Test signals</a><ul>\n<li><a class=\"reference internal\" href=\"#setting-changed\"><code class=\"docutils literal notranslate\"><span class=\"pre\">setting_changed</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#template-rendered\"><code class=\"docutils literal notranslate\"><span class=\"pre\">template_rendered</span></code></a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#module-django.db.backends\">Database Wrappers</a><ul>\n<li><a class=\"reference internal\" href=\"#connection-created\"><code class=\"docutils literal notranslate\"><span class=\"pre\">connection_created</span></code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/signals", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
