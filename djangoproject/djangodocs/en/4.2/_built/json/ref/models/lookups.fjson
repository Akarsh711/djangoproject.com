{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Models"}], "prev": {"link": "../querysets/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference"}, "next": {"link": "../expressions/", "title": "Query Expressions"}, "title": "Lookup API reference", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.db.models.lookups\">\n<span id=\"s-lookup-api-reference\"></span><span id=\"module-django.db.models.lookups\"></span><span id=\"lookup-api-reference\"></span><h1>Lookup API reference<a class=\"headerlink\" href=\"#module-django.db.models.lookups\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>This document has the API references of lookups, the Django API for building\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause of a database query. To learn how to <em>use</em> lookups, see\n<a class=\"reference internal\" href=\"../../../topics/db/queries/\"><span class=\"doc\">Making queries</span></a>; to learn how to <em>create</em> new lookups, see\n<a class=\"reference internal\" href=\"../../../howto/custom-lookups/\"><span class=\"doc\">How to write custom lookups</span></a>.</p>\n<p>The lookup API has two components: a <a class=\"reference internal\" href=\"#django.db.models.lookups.RegisterLookupMixin\" title=\"django.db.models.lookups.RegisterLookupMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RegisterLookupMixin</span></code></a> class\nthat registers lookups, and the <a class=\"reference internal\" href=\"#query-expression\"><span class=\"std std-ref\">Query Expression API</span></a>, a\nset of methods that a class has to implement to be registrable as a lookup.</p>\n<p>Django has two base classes that follow the query expression API and from where\nall Django builtin lookups are derived:</p>\n<ul class=\"simple\">\n<li><a class=\"reference internal\" href=\"#django.db.models.Lookup\" title=\"django.db.models.Lookup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Lookup</span></code></a>: to lookup a field (e.g. the <code class=\"docutils literal notranslate\"><span class=\"pre\">exact</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">field_name__exact</span></code>)</li>\n<li><a class=\"reference internal\" href=\"#django.db.models.Transform\" title=\"django.db.models.Transform\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Transform</span></code></a>: to transform a field</li>\n</ul>\n<p>A lookup expression consists of three parts:</p>\n<ul class=\"simple\">\n<li>Fields part (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">Book.objects.filter(author__best_friends__first_name...</span></code>);</li>\n<li>Transforms part (may be omitted) (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">__lower__first3chars__reversed</span></code>);</li>\n<li>A lookup (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">__icontains</span></code>) that, if omitted, defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">__exact</span></code>.</li>\n</ul>\n<div class=\"section\" id=\"s-registration-api\">\n<span id=\"s-lookup-registration-api\"></span><span id=\"registration-api\"></span><span id=\"lookup-registration-api\"></span><h2>Registration API<a class=\"headerlink\" href=\"#registration-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django uses <a class=\"reference internal\" href=\"#django.db.models.lookups.RegisterLookupMixin\" title=\"django.db.models.lookups.RegisterLookupMixin\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RegisterLookupMixin</span></code></a> to give a class the interface to\nregister lookups on itself or its instances. The two prominent examples are\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>, the base class of all model fields, and\n<a class=\"reference internal\" href=\"#django.db.models.Transform\" title=\"django.db.models.Transform\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Transform</span></code></a>, the base class of all Django transforms.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.lookups.RegisterLookupMixin\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">lookups.</span></code><code class=\"sig-name descname\"><span class=\"pre\">RegisterLookupMixin</span></code><a class=\"headerlink\" href=\"#django.db.models.lookups.RegisterLookupMixin\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A mixin that implements the lookup API on a class.</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.lookups.RegisterLookupMixin.register_lookup\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">register_lookup</span></code>(<em><span class=\"n\"><span class=\"pre\">lookup</span></span></em>, <em><span class=\"n\"><span class=\"pre\">lookup_name</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.lookups.RegisterLookupMixin.register_lookup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Registers a new lookup in the class or class instance. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">DateField</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">YearExact</span><span class=\"p\">)</span>\n<span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">_meta</span><span class=\"o\">.</span><span class=\"n\">get_field</span><span class=\"p\">(</span><span class=\"s2\">&quot;date_joined&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">register_lookup</span><span class=\"p\">(</span><span class=\"n\">MonthExact</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>will register <code class=\"docutils literal notranslate\"><span class=\"pre\">YearExact</span></code> lookup on <code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">MonthExact</span></code>\nlookup on the <code class=\"docutils literal notranslate\"><span class=\"pre\">User.date_joined</span></code> (you can use <a class=\"reference internal\" href=\"../meta/#model-meta-field-api\"><span class=\"std std-ref\">Field Access API</span></a> to retrieve a single field instance). It\noverrides a lookup that already exists with the same name. Lookups\nregistered on field instances take precedence over the lookups\nregistered on classes. <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code> will be used for this lookup if\nprovided, otherwise <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup.lookup_name</span></code> will be used.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.lookups.RegisterLookupMixin.get_lookup\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_lookup</span></code>(<em><span class=\"n\"><span class=\"pre\">lookup_name</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.lookups.RegisterLookupMixin.get_lookup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the <a class=\"reference internal\" href=\"#django.db.models.Lookup\" title=\"django.db.models.Lookup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Lookup</span></code></a> named <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code> registered in the\nclass or class instance depending on what calls it. The default\nimplementation looks recursively on all parent classes and checks if\nany has a registered lookup named <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code>, returning the first\nmatch. Instance lookups would override any class lookups with the same\n<code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.lookups.RegisterLookupMixin.get_lookups\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_lookups</span></code>()<a class=\"headerlink\" href=\"#django.db.models.lookups.RegisterLookupMixin.get_lookups\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a dictionary of each lookup name registered in the class or\nclass instance mapped to the <a class=\"reference internal\" href=\"#django.db.models.Lookup\" title=\"django.db.models.Lookup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Lookup</span></code></a> class.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.lookups.RegisterLookupMixin.get_transform\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_transform</span></code>(<em><span class=\"n\"><span class=\"pre\">transform_name</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.lookups.RegisterLookupMixin.get_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a <a class=\"reference internal\" href=\"#django.db.models.Transform\" title=\"django.db.models.Transform\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Transform</span></code></a> named <code class=\"docutils literal notranslate\"><span class=\"pre\">transform_name</span></code> registered in the\nclass or class instance. The default implementation looks recursively\non all parent classes to check if any has the registered transform\nnamed <code class=\"docutils literal notranslate\"><span class=\"pre\">transform_name</span></code>, returning the first match.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>For a class to be a lookup, it must follow the <a class=\"reference internal\" href=\"#query-expression\"><span class=\"std std-ref\">Query Expression API</span></a>. <a class=\"reference internal\" href=\"#django.db.models.Lookup\" title=\"django.db.models.Lookup\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Lookup</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.Transform\" title=\"django.db.models.Transform\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Transform</span></code></a> naturally\nfollow this API.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for registering lookups on <a class=\"reference internal\" href=\"../fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a>\ninstances was added.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-the-query-expression-api\">\n<span id=\"s-query-expression\"></span><span id=\"the-query-expression-api\"></span><span id=\"query-expression\"></span><h2>The Query Expression API<a class=\"headerlink\" href=\"#the-query-expression-api\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The query expression API is a common set of methods that classes define to be\nusable in query expressions to translate themselves into SQL expressions. Direct\nfield references, aggregates, and <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> are examples that follow this\nAPI. A class is said to follow the query expression API when it implements the\nfollowing methods:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.as_sql\">\n<code class=\"sig-name descname\"><span class=\"pre\">as_sql</span></code>(<em><span class=\"n\"><span class=\"pre\">compiler</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.as_sql\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates the SQL fragment for the expression. Returns a tuple\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sql,</span> <span class=\"pre\">params)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">sql</span></code> is the SQL string, and <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> is the\nlist or tuple of query parameters. The <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code> is an <code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler</span></code>\nobject, which has a <code class=\"docutils literal notranslate\"><span class=\"pre\">compile()</span></code> method that can be used to compile other\nexpressions. The <code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code> is the connection used to execute the\nquery.</p>\n<p>Calling <code class=\"docutils literal notranslate\"><span class=\"pre\">expression.as_sql()</span></code> is usually incorrect - instead\n<code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.compile(expression)</span></code> should be used. The <code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.compile()</span></code>\nmethod will take care of calling vendor-specific methods of the expression.</p>\n<p>Custom keyword arguments may be defined on this method if it\u2019s likely that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">as_vendorname()</span></code> methods or subclasses will need to supply data to\noverride the generation of the SQL string. See <a class=\"reference internal\" href=\"../expressions/#django.db.models.Func.as_sql\" title=\"django.db.models.Func.as_sql\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Func.as_sql()</span></code></a> for\nexample usage.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.as_vendorname\">\n<code class=\"sig-name descname\"><span class=\"pre\">as_vendorname</span></code>(<em><span class=\"n\"><span class=\"pre\">compiler</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.as_vendorname\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Works like <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code> method. When an expression is compiled by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.compile()</span></code>, Django will first try to call <code class=\"docutils literal notranslate\"><span class=\"pre\">as_vendorname()</span></code>,\nwhere <code class=\"docutils literal notranslate\"><span class=\"pre\">vendorname</span></code> is the vendor name of the backend used for executing\nthe query. The <code class=\"docutils literal notranslate\"><span class=\"pre\">vendorname</span></code> is one of <code class=\"docutils literal notranslate\"><span class=\"pre\">postgresql</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">oracle</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sqlite</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">mysql</span></code> for Django\u2019s built-in backends.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.get_lookup\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_lookup</span></code>(<em><span class=\"n\"><span class=\"pre\">lookup_name</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.get_lookup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Must return the lookup named <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code>. For instance, by returning\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.output_field.get_lookup(lookup_name)</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.get_transform\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_transform</span></code>(<em><span class=\"n\"><span class=\"pre\">transform_name</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.get_transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Must return the lookup named <code class=\"docutils literal notranslate\"><span class=\"pre\">transform_name</span></code>. For instance, by returning\n<code class=\"docutils literal notranslate\"><span class=\"pre\">self.output_field.get_transform(transform_name)</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.output_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">output_field</span></code><a class=\"headerlink\" href=\"#django.db.models.output_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines the type of class returned by the <code class=\"docutils literal notranslate\"><span class=\"pre\">get_lookup()</span></code> method. It must\nbe a <a class=\"reference internal\" href=\"../fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> instance.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-transform-reference\">\n<span id=\"transform-reference\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> reference<a class=\"headerlink\" href=\"#transform-reference\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Transform\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Transform</span></code><a class=\"reference internal\" href=\"../../../_modules/django/db/models/lookups/#Transform\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Transform\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> is a generic class to implement field transformations. A\nprominent example is <code class=\"docutils literal notranslate\"><span class=\"pre\">__year</span></code> that transforms a <code class=\"docutils literal notranslate\"><span class=\"pre\">DateField</span></code> into a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField</span></code>.</p>\n<p>The notation to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> in a lookup expression is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;expression&gt;__&lt;transformation&gt;</span></code> (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">date__year</span></code>).</p>\n<p>This class follows the <a class=\"reference internal\" href=\"#query-expression\"><span class=\"std std-ref\">Query Expression API</span></a>, which\nimplies that you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;expression&gt;__&lt;transform1&gt;__&lt;transform2&gt;</span></code>. It\u2019s\na specialized <a class=\"reference internal\" href=\"../expressions/#func-expressions\"><span class=\"std std-ref\">Func() expression</span></a> that only accepts\none argument.  It can also be used on the right hand side of a filter or\ndirectly as an annotation.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Transform.bilateral\">\n<code class=\"sig-name descname\"><span class=\"pre\">bilateral</span></code><a class=\"headerlink\" href=\"#django.db.models.Transform.bilateral\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A boolean indicating whether this transformation should apply to both\n<code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs</span></code>. Bilateral transformations will be applied to <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs</span></code> in\nthe same order as they appear in the lookup expression. By default it is set\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. For example usage, see <a class=\"reference internal\" href=\"../../../howto/custom-lookups/\"><span class=\"doc\">How to write custom lookups</span></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Transform.lhs\">\n<code class=\"sig-name descname\"><span class=\"pre\">lhs</span></code><a class=\"headerlink\" href=\"#django.db.models.Transform.lhs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The left-hand side - what is being transformed. It must follow the\n<a class=\"reference internal\" href=\"#query-expression\"><span class=\"std std-ref\">Query Expression API</span></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Transform.lookup_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">lookup_name</span></code><a class=\"headerlink\" href=\"#django.db.models.Transform.lookup_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The name of the lookup, used for identifying it on parsing query\nexpressions. It cannot contain the string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;__&quot;</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Transform.output_field\">\n<code class=\"sig-name descname\"><span class=\"pre\">output_field</span></code><a class=\"headerlink\" href=\"#django.db.models.Transform.output_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defines the class this transformation outputs. It must be a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field\" title=\"django.db.models.Field\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Field</span></code></a> instance. By default is the same as\nits <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs.output_field</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-lookup-reference\">\n<span id=\"lookup-reference\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> reference<a class=\"headerlink\" href=\"#lookup-reference\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Lookup\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Lookup</span></code><a class=\"reference internal\" href=\"../../../_modules/django/db/models/lookups/#Lookup\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Lookup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> is a generic class to implement lookups. A lookup is a query\nexpression with a left-hand side, <a class=\"reference internal\" href=\"#django.db.models.Lookup.lhs\" title=\"django.db.models.Lookup.lhs\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">lhs</span></code></a>; a right-hand side,\n<a class=\"reference internal\" href=\"#django.db.models.Lookup.rhs\" title=\"django.db.models.Lookup.rhs\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">rhs</span></code></a>; and a <code class=\"docutils literal notranslate\"><span class=\"pre\">lookup_name</span></code> that is used to produce a boolean\ncomparison between <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">rhs</span></code> such as <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span> <span class=\"pre\">in</span> <span class=\"pre\">rhs</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span> <span class=\"pre\">&gt;</span> <span class=\"pre\">rhs</span></code>.</p>\n<p>The primary notation to use a lookup in an expression is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;lhs&gt;__&lt;lookup_name&gt;=&lt;rhs&gt;</span></code>. Lookups can also be used directly in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> filters:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">LessThan</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;word_count&quot;</span><span class=\"p\">),</span> <span class=\"mi\">7500</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>\u2026or annotations:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">is_short_story</span><span class=\"o\">=</span><span class=\"n\">LessThan</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;word_count&quot;</span><span class=\"p\">),</span> <span class=\"mi\">7500</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Lookup.lhs\">\n<code class=\"sig-name descname\"><span class=\"pre\">lhs</span></code><a class=\"headerlink\" href=\"#django.db.models.Lookup.lhs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The left-hand side - what is being looked up. The object typically\nfollows the <a class=\"reference internal\" href=\"#query-expression\"><span class=\"std std-ref\">Query Expression API</span></a>. It may also\nbe a plain value.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Lookup.rhs\">\n<code class=\"sig-name descname\"><span class=\"pre\">rhs</span></code><a class=\"headerlink\" href=\"#django.db.models.Lookup.rhs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The right-hand side - what <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> is being compared against. It can be\na plain value, or something that compiles into SQL, typically an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object or a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Lookup.lookup_name\">\n<code class=\"sig-name descname\"><span class=\"pre\">lookup_name</span></code><a class=\"headerlink\" href=\"#django.db.models.Lookup.lookup_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The name of this lookup, used to identify it on parsing query\nexpressions. It cannot contain the string <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;__&quot;</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Lookup.process_lhs\">\n<code class=\"sig-name descname\"><span class=\"pre\">process_lhs</span></code>(<em><span class=\"n\"><span class=\"pre\">compiler</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span></em>, <em><span class=\"n\"><span class=\"pre\">lhs</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/lookups/#Lookup.process_lhs\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Lookup.process_lhs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a tuple <code class=\"docutils literal notranslate\"><span class=\"pre\">(lhs_string,</span> <span class=\"pre\">lhs_params)</span></code>, as returned by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.compile(lhs)</span></code>. This method can be overridden to tune how\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> is processed.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">compiler</span></code> is an <code class=\"docutils literal notranslate\"><span class=\"pre\">SQLCompiler</span></code> object, to be used like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.compile(lhs)</span></code> for compiling <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code>. The <code class=\"docutils literal notranslate\"><span class=\"pre\">connection</span></code>\ncan be used for compiling vendor specific SQL. If <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> is not\n<code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, use it as the processed <code class=\"docutils literal notranslate\"><span class=\"pre\">lhs</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">self.lhs</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Lookup.process_rhs\">\n<code class=\"sig-name descname\"><span class=\"pre\">process_rhs</span></code>(<em><span class=\"n\"><span class=\"pre\">compiler</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/lookups/#Lookup.process_rhs\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Lookup.process_rhs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Behaves the same way as <a class=\"reference internal\" href=\"#django.db.models.Lookup.process_lhs\" title=\"django.db.models.Lookup.process_lhs\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">process_lhs()</span></code></a>, for the right-hand side.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/models/expressions", "Query Expressions", "N", "next"], ["ref/models/querysets", "<code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> API reference", "P", "previous"]], "sourcename": "ref/models/lookups.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Lookup API reference</a><ul>\n<li><a class=\"reference internal\" href=\"#registration-api\">Registration API</a></li>\n<li><a class=\"reference internal\" href=\"#the-query-expression-api\">The Query Expression API</a></li>\n<li><a class=\"reference internal\" href=\"#transform-reference\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Transform</span></code> reference</a></li>\n<li><a class=\"reference internal\" href=\"#lookup-reference\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Lookup</span></code> reference</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/models/lookups", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}