{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Models"}], "prev": {"link": "../lookups/", "title": "Lookup API reference"}, "next": {"link": "../conditional-expressions/", "title": "Conditional Expressions"}, "title": "Query Expressions", "meta": {}, "body": "<div class=\"section\" id=\"s-query-expressions\">\n<span id=\"query-expressions\"></span><h1>Query Expressions<a class=\"headerlink\" href=\"#query-expressions\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Query expressions describe a value or a computation that can be used as part of\nan update, create, filter, order by, annotation, or aggregate. When an\nexpression outputs a boolean value, it may be used directly in filters. There\nare a number of built-in expressions (documented below) that can be used to\nhelp you write queries. Expressions can be combined, or in some cases nested,\nto form more complex computations.</p>\n<div class=\"section\" id=\"s-supported-arithmetic\">\n<span id=\"supported-arithmetic\"></span><h2>Supported arithmetic<a class=\"headerlink\" href=\"#supported-arithmetic\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django supports negation, addition, subtraction, multiplication, division,\nmodulo arithmetic, and the power operator on query expressions, using Python\nconstants, variables, and even other expressions.</p>\n</div>\n<div class=\"section\" id=\"s-some-examples\">\n<span id=\"some-examples\"></span><h2>Some examples<a class=\"headerlink\" href=\"#some-examples\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Count</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">Value</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Length</span><span class=\"p\">,</span> <span class=\"n\">Upper</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.lookups</span> <span class=\"kn\">import</span> <span class=\"n\">GreaterThan</span>\n\n<span class=\"go\"># Find companies that have more employees than chairs.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">num_employees__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">))</span>\n\n<span class=\"go\"># Find companies that have at least twice as many employees</span>\n<span class=\"go\"># as chairs. Both the querysets below are equivalent.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">num_employees__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">num_employees__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">))</span>\n\n<span class=\"go\"># How many chairs are needed for each company to seat all employees?</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">num_employees__gt</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">chairs_needed</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_employees&quot;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">... </span>    <span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span><span class=\"o\">.</span><span class=\"n\">num_employees</span>\n<span class=\"go\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span><span class=\"o\">.</span><span class=\"n\">num_chairs</span>\n<span class=\"go\">50</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span><span class=\"o\">.</span><span class=\"n\">chairs_needed</span>\n<span class=\"go\">70</span>\n\n<span class=\"go\"># Create a new company using expressions.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span> <span class=\"o\">=</span> <span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Google&quot;</span><span class=\"p\">,</span> <span class=\"n\">ticker</span><span class=\"o\">=</span><span class=\"n\">Upper</span><span class=\"p\">(</span><span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot;goog&quot;</span><span class=\"p\">)))</span>\n<span class=\"go\"># Be sure to refresh it if you need to access the field.</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span><span class=\"o\">.</span><span class=\"n\">refresh_from_db</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">company</span><span class=\"o\">.</span><span class=\"n\">ticker</span>\n<span class=\"go\">&#39;GOOG&#39;</span>\n\n<span class=\"go\"># Annotate models with an aggregated value. Both forms</span>\n<span class=\"go\"># below are equivalent.</span>\n<span class=\"go\">Company.objects.annotate(num_products=Count(&#39;products&#39;))</span>\n<span class=\"go\">Company.objects.annotate(num_products=Count(F(&#39;products&#39;)))</span>\n\n<span class=\"go\"># Aggregates can contain complex computations also</span>\n<span class=\"go\">Company.objects.annotate(num_offerings=Count(F(&#39;products&#39;) + F(&#39;services&#39;)))</span>\n\n<span class=\"go\"># Expressions can also be used in order_by(), either directly</span>\n<span class=\"go\">Company.objects.order_by(Length(&#39;name&#39;).asc())</span>\n<span class=\"go\">Company.objects.order_by(Length(&#39;name&#39;).desc())</span>\n<span class=\"go\"># or using the double underscore lookup syntax.</span>\n<span class=\"go\">from django.db.models import CharField</span>\n<span class=\"go\">from django.db.models.functions import Length</span>\n<span class=\"go\">CharField.register_lookup(Length)</span>\n<span class=\"go\">Company.objects.order_by(&#39;name__length&#39;)</span>\n\n<span class=\"go\"># Boolean expression can be used directly in filters.</span>\n<span class=\"go\">from django.db.models import Exists</span>\n<span class=\"go\">Company.objects.filter(</span>\n<span class=\"go\">    Exists(Employee.objects.filter(company=OuterRef(&#39;pk&#39;), salary__gt=10))</span>\n<span class=\"go\">)</span>\n\n<span class=\"go\"># Lookup expressions can also be used directly in filters</span>\n<span class=\"go\">Company.objects.filter(GreaterThan(F(&#39;num_employees&#39;), F(&#39;num_chairs&#39;)))</span>\n<span class=\"go\"># or annotations.</span>\n<span class=\"go\">Company.objects.annotate(</span>\n<span class=\"go\">    need_chairs=GreaterThan(F(&#39;num_employees&#39;), F(&#39;num_chairs&#39;)),</span>\n<span class=\"go\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-built-in-expressions\">\n<span id=\"built-in-expressions\"></span><h2>Built-in Expressions<a class=\"headerlink\" href=\"#built-in-expressions\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">These expressions are defined in <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.expressions</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.models.aggregates</span></code>, but for convenience they\u2019re available and\nusually imported from <a class=\"reference internal\" href=\"../../../topics/db/models/#module-django.db.models\" title=\"django.db.models\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.db.models</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-f-expressions\">\n<span id=\"f-expressions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> expressions<a class=\"headerlink\" href=\"#f-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.F\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">F</span></code><a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#F\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.F\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>An <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object represents the value of a model field, transformed value of a\nmodel field, or annotated column. It makes it possible to refer to model field\nvalues and perform database operations using them without actually having to\npull them out of the database into Python memory.</p>\n<p>Instead, Django uses the <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> object to generate an SQL expression that\ndescribes the required operation at the database level.</p>\n<p>Let\u2019s try this with an example. Normally, one might do something like this:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># Tintin filed a news story!</span>\n<span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">Reporters</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Tintin&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">stories_filed</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Here, we have pulled the value of <code class=\"docutils literal notranslate\"><span class=\"pre\">reporter.stories_filed</span></code> from the database\ninto memory and manipulated it using familiar Python operators, and then saved\nthe object back to the database. But instead we could also have done:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n\n<span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">Reporters</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Tintin&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">stories_filed</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;stories_filed&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Although <code class=\"docutils literal notranslate\"><span class=\"pre\">reporter.stories_filed</span> <span class=\"pre\">=</span> <span class=\"pre\">F('stories_filed')</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code> looks like a\nnormal Python assignment of value to an instance attribute, in fact it\u2019s an SQL\nconstruct describing an operation on the database.</p>\n<p>When Django encounters an instance of <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code>, it overrides the standard Python\noperators to create an encapsulated SQL expression; in this case, one which\ninstructs the database to increment the database field represented by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reporter.stories_filed</span></code>.</p>\n<p>Whatever value is or was on <code class=\"docutils literal notranslate\"><span class=\"pre\">reporter.stories_filed</span></code>, Python never gets to\nknow about it - it is dealt with entirely by the database. All Python does,\nthrough Django\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> class, is create the SQL syntax to refer to the field\nand describe the operation.</p>\n<p>To access the new value saved this way, the object must be reloaded:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">Reporters</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"o\">=</span><span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n<span class=\"c1\"># Or, more succinctly:</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">refresh_from_db</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>As well as being used in operations on single instances as above, <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> can\nbe used on <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySets</span></code> of object instances, with <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code>. This reduces\nthe two queries we were using above - the <code class=\"docutils literal notranslate\"><span class=\"pre\">get()</span></code> and the\n<a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> - to just one:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">Reporters</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Tintin&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">stories_filed</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;stories_filed&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>We can also use <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.update\" title=\"django.db.models.query.QuerySet.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">update()</span></code></a> to increment\nthe field value on multiple objects - which could be very much faster than\npulling them all into Python from the database, looping over them, incrementing\nthe field value of each one, and saving each one back to the database:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">Reporter</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">stories_filed</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;stories_filed&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> therefore can offer performance advantages by:</p>\n<ul class=\"simple\">\n<li>getting the database, rather than Python, to do work</li>\n<li>reducing the number of queries some operations require</li>\n</ul>\n<div class=\"section\" id=\"s-avoiding-race-conditions-using-f\">\n<span id=\"s-id1\"></span><span id=\"avoiding-race-conditions-using-f\"></span><span id=\"id1\"></span><h4>Avoiding race conditions using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code><a class=\"headerlink\" href=\"#avoiding-race-conditions-using-f\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Another useful benefit of <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> is that having the database - rather than\nPython - update a field\u2019s value avoids a <em>race condition</em>.</p>\n<p>If two Python threads execute the code in the first example above, one thread\ncould retrieve, increment, and save a field\u2019s value after the other has\nretrieved it from the database. The value that the second thread saves will be\nbased on the original value; the work of the first thread will be lost.</p>\n<p>If the database is responsible for updating the field, the process is more\nrobust: it will only ever update the field based on the value of the field in\nthe database when the <a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a> or <code class=\"docutils literal notranslate\"><span class=\"pre\">update()</span></code> is executed, rather\nthan based on its value when the instance was retrieved.</p>\n</div>\n<div class=\"section\" id=\"s-f-assignments-persist-after-model-save\">\n<span id=\"f-assignments-persist-after-model-save\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> assignments persist after <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code><a class=\"headerlink\" href=\"#f-assignments-persist-after-model-save\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects assigned to model fields persist after saving the model\ninstance and will be applied on each <a class=\"reference internal\" href=\"../instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">reporter</span> <span class=\"o\">=</span> <span class=\"n\">Reporters</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;Tintin&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">stories_filed</span> <span class=\"o\">=</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;stories_filed&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Tintin Jr.&quot;</span>\n<span class=\"n\">reporter</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">stories_filed</span></code> will be updated twice in this case. If it\u2019s initially <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>,\nthe final value will be <code class=\"docutils literal notranslate\"><span class=\"pre\">3</span></code>. This persistence can be avoided by reloading the\nmodel object after saving it, for example, by using\n<a class=\"reference internal\" href=\"../instances/#django.db.models.Model.refresh_from_db\" title=\"django.db.models.Model.refresh_from_db\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">refresh_from_db()</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-using-f-in-filters\">\n<span id=\"using-f-in-filters\"></span><h4>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> in filters<a class=\"headerlink\" href=\"#using-f-in-filters\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> is also very useful in <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> filters, where they make it\npossible to filter a set of objects against criteria based on their field\nvalues, rather than on Python values.</p>\n<p>This is documented in <a class=\"reference internal\" href=\"../../../topics/db/queries/#using-f-expressions-in-filters\"><span class=\"std std-ref\">using F() expressions in queries</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-using-f-with-annotations\">\n<span id=\"s-id2\"></span><span id=\"using-f-with-annotations\"></span><span id=\"id2\"></span><h4>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> with annotations<a class=\"headerlink\" href=\"#using-f-with-annotations\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> can be used to create dynamic fields on your models by combining\ndifferent fields with arithmetic:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">company</span> <span class=\"o\">=</span> <span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">chairs_needed</span><span class=\"o\">=</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_employees&quot;</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_chairs&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>If the fields that you\u2019re combining are of different types you\u2019ll need\nto tell Django what kind of field will be returned. Since <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> does not\ndirectly support <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> you will need to wrap the expression with\n<a class=\"reference internal\" href=\"#django.db.models.ExpressionWrapper\" title=\"django.db.models.ExpressionWrapper\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ExpressionWrapper</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">DateTimeField</span><span class=\"p\">,</span> <span class=\"n\">ExpressionWrapper</span><span class=\"p\">,</span> <span class=\"n\">F</span>\n\n<span class=\"n\">Ticket</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n    <span class=\"n\">expires</span><span class=\"o\">=</span><span class=\"n\">ExpressionWrapper</span><span class=\"p\">(</span>\n        <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;active_at&quot;</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;duration&quot;</span><span class=\"p\">),</span> <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"n\">DateTimeField</span><span class=\"p\">()</span>\n    <span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>When referencing relational fields such as <code class=\"docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> returns the\nprimary key value rather than a model instance:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">&gt;&gt; car = Company.objects.annotate(built_by=F(&#39;manufacturer&#39;))[0]</span>\n<span class=\"go\">&gt;&gt; car.manufacturer</span>\n<span class=\"go\">&lt;Manufacturer: Toyota&gt;</span>\n<span class=\"go\">&gt;&gt; car.built_by</span>\n<span class=\"go\">3</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-f-to-sort-null-values\">\n<span id=\"s-id3\"></span><span id=\"using-f-to-sort-null-values\"></span><span id=\"id3\"></span><h4>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> to sort null values<a class=\"headerlink\" href=\"#using-f-to-sort-null-values\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> and the <code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_first</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_last</span></code> keyword argument to\n<a class=\"reference internal\" href=\"#django.db.models.Expression.asc\" title=\"django.db.models.Expression.asc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">Expression.asc()</span></code></a> or <a class=\"reference internal\" href=\"#django.db.models.Expression.desc\" title=\"django.db.models.Expression.desc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">desc()</span></code></a> to control the ordering of\na field\u2019s null values. By default, the ordering depends on your database.</p>\n<p>For example, to sort companies that haven\u2019t been contacted (<code class=\"docutils literal notranslate\"><span class=\"pre\">last_contacted</span></code>\nis null) after companies that have been contacted:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n\n<span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;last_contacted&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">(</span><span class=\"n\">nulls_last</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-using-f-with-logical-operations\">\n<span id=\"using-f-with-logical-operations\"></span><h4>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> with logical operations<a class=\"headerlink\" href=\"#using-f-with-logical-operations\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> expressions that output <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField</span></code> can be logically negated with\nthe inversion operator <code class=\"docutils literal notranslate\"><span class=\"pre\">~F()</span></code>. For example, to swap the activation status of\ncompanies:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n\n<span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">is_active</span><span class=\"o\">=~</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;is_active&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-func-expressions\">\n<span id=\"s-id4\"></span><span id=\"func-expressions\"></span><span id=\"id4\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Func()</span></code> expressions<a class=\"headerlink\" href=\"#func-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Func()</span></code> expressions are the base type of all expressions that involve\ndatabase functions like <code class=\"docutils literal notranslate\"><span class=\"pre\">COALESCE</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">LOWER</span></code>, or aggregates like <code class=\"docutils literal notranslate\"><span class=\"pre\">SUM</span></code>.\nThey can be used directly:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">Func</span>\n\n<span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">field_lower</span><span class=\"o\">=</span><span class=\"n\">Func</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;field&quot;</span><span class=\"p\">),</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;LOWER&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>or they can be used to build a library of database functions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Lower</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;LOWER&quot;</span>\n\n\n<span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">field_lower</span><span class=\"o\">=</span><span class=\"n\">Lower</span><span class=\"p\">(</span><span class=\"s2\">&quot;field&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>But both cases will result in a queryset where each model is annotated with an\nextra attribute <code class=\"docutils literal notranslate\"><span class=\"pre\">field_lower</span></code> produced, roughly, from the following SQL:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">...</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">LOWER</span><span class=\"p\">(</span><span class=\"ss\">&quot;db_table&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;field&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"ss\">&quot;field_lower&quot;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../database-functions/\"><span class=\"doc\">Database Functions</span></a> for a list of built-in database functions.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Func</span></code> API is as follows:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Func\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Func</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">expressions</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Func\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Func\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Func.function\">\n<code class=\"sig-name descname\"><span class=\"pre\">function</span></code><a class=\"headerlink\" href=\"#django.db.models.Func.function\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute describing the function that will be generated.\nSpecifically, the <code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code> will be interpolated as the <code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code>\nplaceholder within <a class=\"reference internal\" href=\"#django.db.models.Func.template\" title=\"django.db.models.Func.template\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template</span></code></a>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Func.template\">\n<code class=\"sig-name descname\"><span class=\"pre\">template</span></code><a class=\"headerlink\" href=\"#django.db.models.Func.template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute, as a format string, that describes the SQL that is\ngenerated for this function. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(function)s(%(expressions)s)'</span></code>.</p>\n<p>If you\u2019re constructing SQL like <code class=\"docutils literal notranslate\"><span class=\"pre\">strftime('%W',</span> <span class=\"pre\">'date')</span></code> and need a\nliteral <code class=\"docutils literal notranslate\"><span class=\"pre\">%</span></code> character in the query, quadruple it (<code class=\"docutils literal notranslate\"><span class=\"pre\">%%%%</span></code>) in the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> attribute because the string is interpolated twice: once\nduring the template interpolation in <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code> and once in the SQL\ninterpolation with the query parameters in the database cursor.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Func.arg_joiner\">\n<code class=\"sig-name descname\"><span class=\"pre\">arg_joiner</span></code><a class=\"headerlink\" href=\"#django.db.models.Func.arg_joiner\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute that denotes the character used to join the list of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code> together. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">',</span> <span class=\"pre\">'</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Func.arity\">\n<code class=\"sig-name descname\"><span class=\"pre\">arity</span></code><a class=\"headerlink\" href=\"#django.db.models.Func.arity\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute that denotes the number of arguments the function\naccepts. If this attribute is set and the function is called with a\ndifferent number of expressions, <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code> will be raised. Defaults\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Func.as_sql\">\n<code class=\"sig-name descname\"><span class=\"pre\">as_sql</span></code>(<em><span class=\"n\"><span class=\"pre\">compiler</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span></em>, <em><span class=\"n\"><span class=\"pre\">function</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">template</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">arg_joiner</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra_context</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Func.as_sql\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Func.as_sql\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Generates the SQL fragment for the database function. Returns a tuple\n<code class=\"docutils literal notranslate\"><span class=\"pre\">(sql,</span> <span class=\"pre\">params)</span></code>, where <code class=\"docutils literal notranslate\"><span class=\"pre\">sql</span></code> is the SQL string, and <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> is\nthe list or tuple of query parameters.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">as_vendor()</span></code> methods should use the <code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">arg_joiner</span></code>, and any other <code class=\"docutils literal notranslate\"><span class=\"pre\">**extra_context</span></code> parameters to\ncustomize the SQL as needed. For example:</p>\n<div class=\"literal-block-wrapper docutils container\" id=\"id5\">\n<div class=\"code-block-caption\"><span class=\"caption-text\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django/db/models/functions.py</span></code></span><a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this code\">\u00b6</a></div>\n<div class=\"highlight-python notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">ConcatPair</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;CONCAT&quot;</span>\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">as_mysql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra_context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span>\n            <span class=\"n\">compiler</span><span class=\"p\">,</span>\n            <span class=\"n\">connection</span><span class=\"p\">,</span>\n            <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;CONCAT_WS&quot;</span><span class=\"p\">,</span>\n            <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(&#39;&#39;, </span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)&quot;</span><span class=\"p\">,</span>\n            <span class=\"o\">**</span><span class=\"n\">extra_context</span>\n        <span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<p>To avoid an SQL injection vulnerability, <code class=\"docutils literal notranslate\"><span class=\"pre\">extra_context</span></code> <a class=\"reference internal\" href=\"#avoiding-sql-injection-in-query-expressions\"><span class=\"std std-ref\">must\nnot contain untrusted user input</span></a>\nas these values are interpolated into the SQL string rather than passed\nas query parameters, where the database driver would escape them.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">*expressions</span></code> argument is a list of positional expressions that the\nfunction will be applied to. The expressions will be converted to strings,\njoined together with <code class=\"docutils literal notranslate\"><span class=\"pre\">arg_joiner</span></code>, and then interpolated into the <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code>\nas the <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code> placeholder.</p>\n<p>Positional arguments can be expressions or Python values. Strings are\nassumed to be column references and will be wrapped in <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> expressions\nwhile other values will be wrapped in <code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code> expressions.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">**extra</span></code> kwargs are <code class=\"docutils literal notranslate\"><span class=\"pre\">key=value</span></code> pairs that can be interpolated\ninto the <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> attribute. To avoid an SQL injection vulnerability,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">extra</span></code> <a class=\"reference internal\" href=\"#avoiding-sql-injection-in-query-expressions\"><span class=\"std std-ref\">must not contain untrusted user input</span></a> as these values are interpolated\ninto the SQL string rather than passed as query parameters, where the database\ndriver would escape them.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">arg_joiner</span></code> keywords can be used to\nreplace the attributes of the same name without having to define your own\nclass. <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> can be used to define the expected return type.</p>\n</div>\n<div class=\"section\" id=\"s-aggregate-expressions\">\n<span id=\"aggregate-expressions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Aggregate()</span></code> expressions<a class=\"headerlink\" href=\"#aggregate-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>An aggregate expression is a special case of a <a class=\"reference internal\" href=\"#func-expressions\"><span class=\"std std-ref\">Func() expression</span></a> that informs the query that a <code class=\"docutils literal notranslate\"><span class=\"pre\">GROUP</span> <span class=\"pre\">BY</span></code> clause\nis required. All of the <a class=\"reference internal\" href=\"../querysets/#aggregation-functions\"><span class=\"std std-ref\">aggregate functions</span></a>,\nlike <code class=\"docutils literal notranslate\"><span class=\"pre\">Sum()</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Count()</span></code>, inherit from <code class=\"docutils literal notranslate\"><span class=\"pre\">Aggregate()</span></code>.</p>\n<p>Since <code class=\"docutils literal notranslate\"><span class=\"pre\">Aggregate</span></code>s are expressions and wrap expressions, you can represent\nsome complex computations:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Count</span>\n\n<span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n    <span class=\"n\">managers_required</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_employees&quot;</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"mi\">4</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;num_managers&quot;</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Aggregate</span></code> API is as follows:</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Aggregate\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Aggregate</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">expressions</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">distinct</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filter</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">extra</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/aggregates/#Aggregate\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Aggregate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Aggregate.template\">\n<code class=\"sig-name descname\"><span class=\"pre\">template</span></code><a class=\"headerlink\" href=\"#django.db.models.Aggregate.template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute, as a format string, that describes the SQL that is\ngenerated for this aggregate. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'%(function)s(%(distinct)s%(expressions)s)'</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Aggregate.function\">\n<code class=\"sig-name descname\"><span class=\"pre\">function</span></code><a class=\"headerlink\" href=\"#django.db.models.Aggregate.function\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute describing the aggregate function that will be\ngenerated. Specifically, the <code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code> will be interpolated as the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code> placeholder within <a class=\"reference internal\" href=\"#django.db.models.Aggregate.template\" title=\"django.db.models.Aggregate.template\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">template</span></code></a>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Aggregate.window_compatible\">\n<code class=\"sig-name descname\"><span class=\"pre\">window_compatible</span></code><a class=\"headerlink\" href=\"#django.db.models.Aggregate.window_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> since most aggregate functions can be used as the\nsource expression in <a class=\"reference internal\" href=\"#django.db.models.expressions.Window\" title=\"django.db.models.expressions.Window\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Window</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Aggregate.allow_distinct\">\n<code class=\"sig-name descname\"><span class=\"pre\">allow_distinct</span></code><a class=\"headerlink\" href=\"#django.db.models.Aggregate.allow_distinct\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A class attribute determining whether or not this aggregate function\nallows passing a <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct</span></code> keyword argument. If set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>\n(default), <code class=\"docutils literal notranslate\"><span class=\"pre\">TypeError</span></code> is raised if <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct=True</span></code> is passed.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Aggregate.empty_result_set_value\">\n<code class=\"sig-name descname\"><span class=\"pre\">empty_result_set_value</span></code><a class=\"headerlink\" href=\"#django.db.models.Aggregate.empty_result_set_value\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> since most aggregate functions result in <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>\nwhen applied to an empty result set.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code> positional arguments can include expressions, transforms of\nthe model field, or the names of model fields. They will be converted to a\nstring and used as the <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code> placeholder within the <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> argument requires a model field instance, like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField()</span></code>, into which Django will load the value\nafter it\u2019s retrieved from the database. Usually no arguments are needed when\ninstantiating the model field as any arguments relating to data validation\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">max_digits</span></code>, etc.) will not be enforced on the expression\u2019s\noutput value.</p>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> is only required when Django is unable to determine\nwhat field type the result should be. Complex expressions that mix field types\nshould define the desired <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code>. For example, adding an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField()</span></code> and a <code class=\"docutils literal notranslate\"><span class=\"pre\">FloatField()</span></code> together should probably have\n<code class=\"docutils literal notranslate\"><span class=\"pre\">output_field=FloatField()</span></code> defined.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">distinct</span></code> argument determines whether or not the aggregate function\nshould be invoked for each distinct value of <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code> (or set of\nvalues, for multiple <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code>). The argument is only supported on\naggregates that have <a class=\"reference internal\" href=\"#django.db.models.Aggregate.allow_distinct\" title=\"django.db.models.Aggregate.allow_distinct\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">allow_distinct</span></code></a> set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">filter</span></code> argument takes a <a class=\"reference internal\" href=\"../querysets/#django.db.models.Q\" title=\"django.db.models.Q\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Q</span> <span class=\"pre\">object</span></code></a> that\u2019s\nused to filter the rows that are aggregated. See <a class=\"reference internal\" href=\"../conditional-expressions/#conditional-aggregation\"><span class=\"std std-ref\">Conditional aggregation</span></a>\nand <a class=\"reference internal\" href=\"../../../topics/db/aggregation/#filtering-on-annotations\"><span class=\"std std-ref\">Filtering on annotations</span></a> for example usage.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> argument takes a value that will be passed along with the\naggregate to <a class=\"reference internal\" href=\"../database-functions/#django.db.models.functions.Coalesce\" title=\"django.db.models.functions.Coalesce\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Coalesce</span></code></a>. This is useful for\nspecifying a value to be returned other than <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> when the queryset (or\ngrouping) contains no entries.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">**extra</span></code> kwargs are <code class=\"docutils literal notranslate\"><span class=\"pre\">key=value</span></code> pairs that can be interpolated\ninto the <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> attribute.</p>\n</div>\n<div class=\"section\" id=\"s-creating-your-own-aggregate-functions\">\n<span id=\"creating-your-own-aggregate-functions\"></span><h3>Creating your own Aggregate Functions<a class=\"headerlink\" href=\"#creating-your-own-aggregate-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can create your own aggregate functions, too. At a minimum, you need to\ndefine <code class=\"docutils literal notranslate\"><span class=\"pre\">function</span></code>, but you can also completely customize the SQL that is\ngenerated. Here\u2019s a brief example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Aggregate</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Sum</span><span class=\"p\">(</span><span class=\"n\">Aggregate</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Supports SUM(ALL field).</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;SUM&quot;</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(</span><span class=\"si\">%(all_values)s%(expressions)s</span><span class=\"s2\">)&quot;</span>\n    <span class=\"n\">allow_distinct</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">all_values</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">all_values</span><span class=\"o\">=</span><span class=\"s2\">&quot;ALL &quot;</span> <span class=\"k\">if</span> <span class=\"n\">all_values</span> <span class=\"k\">else</span> <span class=\"s2\">&quot;&quot;</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">extra</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-value-expressions\">\n<span id=\"value-expressions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code> expressions<a class=\"headerlink\" href=\"#value-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Value\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Value</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Value\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Value\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>A <code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code> object represents the smallest possible component of an\nexpression: a simple value. When you need to represent the value of an integer,\nboolean, or string within an expression, you can wrap that value within a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code>.</p>\n<p>You will rarely need to use <code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code> directly. When you write the expression\n<code class=\"docutils literal notranslate\"><span class=\"pre\">F('field')</span> <span class=\"pre\">+</span> <span class=\"pre\">1</span></code>, Django implicitly wraps the <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code> in a <code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code>,\nallowing simple values to be used in more complex expressions. You will need to\nuse <code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code> when you want to pass a string to an expression. Most\nexpressions interpret a string argument as the name of a field, like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Lower('name')</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> argument describes the value to be included in the expression,\nsuch as <code class=\"docutils literal notranslate\"><span class=\"pre\">1</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. Django knows how to convert these Python\nvalues into their corresponding database type.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> argument should be a model field instance, like\n<code class=\"docutils literal notranslate\"><span class=\"pre\">IntegerField()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">BooleanField()</span></code>, into which Django will load the value\nafter it\u2019s retrieved from the database. Usually no arguments are needed when\ninstantiating the model field as any arguments relating to data validation\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">max_length</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">max_digits</span></code>, etc.) will not be enforced on the expression\u2019s\noutput value. If no <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> is specified it will be tentatively\ninferred from the <a class=\"reference external\" href=\"https://docs.python.org/3/library/functions.html#type\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">type</span></code></a> of the provided <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>, if possible. For\nexample, passing an instance of <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.datetime\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">datetime.datetime</span></code></a> as <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>\nwould default <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> to <a class=\"reference internal\" href=\"../fields/#django.db.models.DateTimeField\" title=\"django.db.models.DateTimeField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">DateTimeField</span></code></a>.</p>\n</div>\n<div class=\"section\" id=\"s-expressionwrapper-expressions\">\n<span id=\"expressionwrapper-expressions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">ExpressionWrapper()</span></code> expressions<a class=\"headerlink\" href=\"#expressionwrapper-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.ExpressionWrapper\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">ExpressionWrapper</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#ExpressionWrapper\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.ExpressionWrapper\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">ExpressionWrapper</span></code> surrounds another expression and provides access to\nproperties, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code>, that may not be available on other\nexpressions. <code class=\"docutils literal notranslate\"><span class=\"pre\">ExpressionWrapper</span></code> is necessary when using arithmetic on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> expressions with different types as described in\n<a class=\"reference internal\" href=\"#using-f-with-annotations\"><span class=\"std std-ref\">Using F() with annotations</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-conditional-expressions\">\n<span id=\"conditional-expressions\"></span><h3>Conditional expressions<a class=\"headerlink\" href=\"#conditional-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Conditional expressions allow you to use <a class=\"reference external\" href=\"https://docs.python.org/3/reference/compound_stmts.html#if\" title=\"(in Python v3.11)\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">if</span></code></a> \u2026 <a class=\"reference external\" href=\"https://docs.python.org/3/reference/compound_stmts.html#elif\" title=\"(in Python v3.11)\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">elif</span></code></a> \u2026\n<a class=\"reference external\" href=\"https://docs.python.org/3/reference/compound_stmts.html#else\" title=\"(in Python v3.11)\"><code class=\"xref std std-keyword docutils literal notranslate\"><span class=\"pre\">else</span></code></a> logic in queries. Django natively supports SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">CASE</span></code>\nexpressions. For more details see <a class=\"reference internal\" href=\"../conditional-expressions/\"><span class=\"doc\">Conditional Expressions</span></a>.</p>\n</div>\n<div class=\"section\" id=\"s-subquery-expressions\">\n<span id=\"subquery-expressions\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery()</span></code> expressions<a class=\"headerlink\" href=\"#subquery-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Subquery\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Subquery</span></code>(<em><span class=\"n\"><span class=\"pre\">queryset</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Subquery\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Subquery\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>You can add an explicit subquery to a <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet</span></code> using the <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code>\nexpression.</p>\n<p>For example, to annotate each post with the email address of the author of the\nnewest comment on that post:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">OuterRef</span><span class=\"p\">,</span> <span class=\"n\">Subquery</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">newest</span> <span class=\"o\">=</span> <span class=\"n\">Comment</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"o\">=</span><span class=\"n\">OuterRef</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">&quot;-created_at&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">newest_commenter_email</span><span class=\"o\">=</span><span class=\"n\">Subquery</span><span class=\"p\">(</span><span class=\"n\">newest</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">1</span><span class=\"p\">]))</span>\n</pre></div>\n</div>\n<p>On PostgreSQL, the SQL looks like:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">&quot;post&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;id&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">&quot;email&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">&quot;comment&quot;</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">&quot;post_id&quot;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"ss\">&quot;post&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;id&quot;</span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">ORDER</span><span class=\"w\"> </span><span class=\"k\">BY</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">&quot;created_at&quot;</span><span class=\"w\"> </span><span class=\"k\">DESC</span><span class=\"w\"> </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"ss\">&quot;newest_commenter_email&quot;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">&quot;post&quot;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">The examples in this section are designed to show how to force\nDjango to execute a subquery. In some cases it may be possible to\nwrite an equivalent queryset that performs the same task more\nclearly or efficiently.</p>\n</div>\n<div class=\"section\" id=\"s-referencing-columns-from-the-outer-queryset\">\n<span id=\"referencing-columns-from-the-outer-queryset\"></span><h4>Referencing columns from the outer queryset<a class=\"headerlink\" href=\"#referencing-columns-from-the-outer-queryset\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.OuterRef\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">OuterRef</span></code>(<em><span class=\"n\"><span class=\"pre\">field</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#OuterRef\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.OuterRef\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">OuterRef</span></code> when a queryset in a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> needs to refer to a field\nfrom the outer query or its transform. It acts like an <a class=\"reference internal\" href=\"#django.db.models.F\" title=\"django.db.models.F\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">F</span></code></a> expression\nexcept that the check to see if it refers to a valid field isn\u2019t made until the\nouter queryset is resolved.</p>\n<p>Instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">OuterRef</span></code> may be used in conjunction with nested instances\nof <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> to refer to a containing queryset that isn\u2019t the immediate\nparent. For example, this queryset would need to be within a nested pair of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> instances to resolve correctly:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Book</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">author</span><span class=\"o\">=</span><span class=\"n\">OuterRef</span><span class=\"p\">(</span><span class=\"n\">OuterRef</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-limiting-a-subquery-to-a-single-column\">\n<span id=\"limiting-a-subquery-to-a-single-column\"></span><h4>Limiting a subquery to a single column<a class=\"headerlink\" href=\"#limiting-a-subquery-to-a-single-column\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>There are times when a single column must be returned from a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code>, for\ninstance, to use a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> as the target of an <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> lookup. To return\nall comments for posts published within the last day:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">one_day_ago</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">posts</span> <span class=\"o\">=</span> <span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">published_at__gte</span><span class=\"o\">=</span><span class=\"n\">one_day_ago</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Comment</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">post__in</span><span class=\"o\">=</span><span class=\"n\">Subquery</span><span class=\"p\">(</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">)))</span>\n</pre></div>\n</div>\n<p>In this case, the subquery must use <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a>\nto return only a single column: the primary key of the post.</p>\n</div>\n<div class=\"section\" id=\"s-limiting-the-subquery-to-a-single-row\">\n<span id=\"limiting-the-subquery-to-a-single-row\"></span><h4>Limiting the subquery to a single row<a class=\"headerlink\" href=\"#limiting-the-subquery-to-a-single-row\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To prevent a subquery from returning multiple rows, a slice (<code class=\"docutils literal notranslate\"><span class=\"pre\">[:1]</span></code>) of the\nqueryset is used:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">subquery</span> <span class=\"o\">=</span> <span class=\"n\">Subquery</span><span class=\"p\">(</span><span class=\"n\">newest</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;email&quot;</span><span class=\"p\">)[:</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">newest_commenter_email</span><span class=\"o\">=</span><span class=\"n\">subquery</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In this case, the subquery must only return a single column <em>and</em> a single\nrow: the email address of the most recently created comment.</p>\n<p>(Using <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.get\" title=\"django.db.models.query.QuerySet.get\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get()</span></code></a> instead of a slice would fail because the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">OuterRef</span></code> cannot be resolved until the queryset is used within a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code>.)</p>\n</div>\n<div class=\"section\" id=\"s-exists-subqueries\">\n<span id=\"exists-subqueries\"></span><h4><code class=\"docutils literal notranslate\"><span class=\"pre\">Exists()</span></code> subqueries<a class=\"headerlink\" href=\"#exists-subqueries\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Exists\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Exists</span></code>(<em><span class=\"n\"><span class=\"pre\">queryset</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Exists\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Exists\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Exists</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> subclass that uses an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">EXISTS</span></code> statement. In\nmany cases it will perform better than a subquery since the database is able to\nstop evaluation of the subquery when a first matching row is found.</p>\n<p>For example, to annotate each post with whether or not it has a comment from\nwithin the last day:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Exists</span><span class=\"p\">,</span> <span class=\"n\">OuterRef</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">timedelta</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.utils</span> <span class=\"kn\">import</span> <span class=\"n\">timezone</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">one_day_ago</span> <span class=\"o\">=</span> <span class=\"n\">timezone</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">recent_comments</span> <span class=\"o\">=</span> <span class=\"n\">Comment</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">post</span><span class=\"o\">=</span><span class=\"n\">OuterRef</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">created_at__gte</span><span class=\"o\">=</span><span class=\"n\">one_day_ago</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">recent_comment</span><span class=\"o\">=</span><span class=\"n\">Exists</span><span class=\"p\">(</span><span class=\"n\">recent_comments</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>On PostgreSQL, the SQL looks like:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"ss\">&quot;post&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;id&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"ss\">&quot;post&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;published_at&quot;</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"k\">EXISTS</span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">SELECT</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"ss\">&quot;a&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">&quot;comment&quot;</span><span class=\"w\"> </span><span class=\"n\">U0</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">WHERE</span><span class=\"w\"> </span><span class=\"p\">(</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">&quot;created_at&quot;</span><span class=\"w\"> </span><span class=\"o\">&gt;=</span><span class=\"w\"> </span><span class=\"n\">YYYY</span><span class=\"o\">-</span><span class=\"n\">MM</span><span class=\"o\">-</span><span class=\"n\">DD</span><span class=\"w\"> </span><span class=\"n\">HH</span><span class=\"p\">:</span><span class=\"n\">MM</span><span class=\"p\">:</span><span class=\"n\">SS</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"></span>\n<span class=\"w\">        </span><span class=\"n\">U0</span><span class=\"p\">.</span><span class=\"ss\">&quot;post_id&quot;</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"ss\">&quot;post&quot;</span><span class=\"p\">.</span><span class=\"ss\">&quot;id&quot;</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"p\">)</span><span class=\"w\"></span>\n<span class=\"w\">    </span><span class=\"k\">LIMIT</span><span class=\"w\"> </span><span class=\"mi\">1</span><span class=\"w\"></span>\n<span class=\"p\">)</span><span class=\"w\"> </span><span class=\"k\">AS</span><span class=\"w\"> </span><span class=\"ss\">&quot;recent_comment&quot;</span><span class=\"w\"> </span><span class=\"k\">FROM</span><span class=\"w\"> </span><span class=\"ss\">&quot;post&quot;</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>It\u2019s unnecessary to force <code class=\"docutils literal notranslate\"><span class=\"pre\">Exists</span></code> to refer to a single column, since the\ncolumns are discarded and a boolean result is returned. Similarly, since\nordering is unimportant within an SQL <code class=\"docutils literal notranslate\"><span class=\"pre\">EXISTS</span></code> subquery and would only\ndegrade performance, it\u2019s automatically removed.</p>\n<p>You can query using <code class=\"docutils literal notranslate\"><span class=\"pre\">NOT</span> <span class=\"pre\">EXISTS</span></code> with <code class=\"docutils literal notranslate\"><span class=\"pre\">~Exists()</span></code>.</p>\n</div>\n<div class=\"section\" id=\"s-filtering-on-a-subquery-or-exists-expressions\">\n<span id=\"filtering-on-a-subquery-or-exists-expressions\"></span><h4>Filtering on a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">Exists()</span></code> expressions<a class=\"headerlink\" href=\"#filtering-on-a-subquery-or-exists-expressions\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery()</span></code> that returns a boolean value and <code class=\"docutils literal notranslate\"><span class=\"pre\">Exists()</span></code> may be used as a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">condition</span></code> in <a class=\"reference internal\" href=\"../conditional-expressions/#django.db.models.expressions.When\" title=\"django.db.models.expressions.When\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">When</span></code></a> expressions, or to\ndirectly filter a queryset:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">recent_comments</span> <span class=\"o\">=</span> <span class=\"n\">Comment</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># From above</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Exists</span><span class=\"p\">(</span><span class=\"n\">recent_comments</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>This will ensure that the subquery will not be added to the <code class=\"docutils literal notranslate\"><span class=\"pre\">SELECT</span></code> columns,\nwhich may result in a better performance.</p>\n</div>\n<div class=\"section\" id=\"s-using-aggregates-within-a-subquery-expression\">\n<span id=\"using-aggregates-within-a-subquery-expression\"></span><h4>Using aggregates within a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> expression<a class=\"headerlink\" href=\"#using-aggregates-within-a-subquery-expression\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Aggregates may be used within a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code>, but they require a specific\ncombination of <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">filter()</span></code></a>, <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.values\" title=\"django.db.models.query.QuerySet.values\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">values()</span></code></a>, and\n<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.annotate\" title=\"django.db.models.query.QuerySet.annotate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">annotate()</span></code></a> to get the subquery grouping correct.</p>\n<p>Assuming both models have a <code class=\"docutils literal notranslate\"><span class=\"pre\">length</span></code> field, to find posts where the post\nlength is greater than the total length of all combined comments:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">OuterRef</span><span class=\"p\">,</span> <span class=\"n\">Subquery</span><span class=\"p\">,</span> <span class=\"n\">Sum</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">comments</span> <span class=\"o\">=</span> <span class=\"n\">Comment</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">post</span><span class=\"o\">=</span><span class=\"n\">OuterRef</span><span class=\"p\">(</span><span class=\"s2\">&quot;pk&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;post&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">total_comments</span> <span class=\"o\">=</span> <span class=\"n\">comments</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"o\">=</span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"s2\">&quot;length&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">(</span><span class=\"s2\">&quot;total&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Post</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">length__gt</span><span class=\"o\">=</span><span class=\"n\">Subquery</span><span class=\"p\">(</span><span class=\"n\">total_comments</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The initial <code class=\"docutils literal notranslate\"><span class=\"pre\">filter(...)</span></code> limits the subquery to the relevant parameters.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">order_by()</span></code> removes the default <a class=\"reference internal\" href=\"../options/#django.db.models.Options.ordering\" title=\"django.db.models.Options.ordering\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">ordering</span></code></a>\n(if any) on the <code class=\"docutils literal notranslate\"><span class=\"pre\">Comment</span></code> model. <code class=\"docutils literal notranslate\"><span class=\"pre\">values('post')</span></code> aggregates comments by\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Post</span></code>. Finally, <code class=\"docutils literal notranslate\"><span class=\"pre\">annotate(...)</span></code> performs the aggregation. The order in\nwhich these queryset methods are applied is important. In this case, since the\nsubquery must be limited to a single column, <code class=\"docutils literal notranslate\"><span class=\"pre\">values('total')</span></code> is required.</p>\n<p>This is the only way to perform an aggregation within a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code>, as\nusing <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.aggregate\" title=\"django.db.models.query.QuerySet.aggregate\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">aggregate()</span></code></a> attempts to evaluate the queryset (and if\nthere is an <code class=\"docutils literal notranslate\"><span class=\"pre\">OuterRef</span></code>, this will not be possible to resolve).</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-raw-sql-expressions\">\n<span id=\"raw-sql-expressions\"></span><h3>Raw SQL expressions<a class=\"headerlink\" href=\"#raw-sql-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.RawSQL\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RawSQL</span></code>(<em><span class=\"n\"><span class=\"pre\">sql</span></span></em>, <em><span class=\"n\"><span class=\"pre\">params</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#RawSQL\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.expressions.RawSQL\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>Sometimes database expressions can\u2019t easily express a complex <code class=\"docutils literal notranslate\"><span class=\"pre\">WHERE</span></code> clause.\nIn these edge cases, use the <code class=\"docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code> expression. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.expressions</span> <span class=\"kn\">import</span> <span class=\"n\">RawSQL</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"n\">RawSQL</span><span class=\"p\">(</span><span class=\"s2\">&quot;select col from sometable where othercol = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,)))</span>\n</pre></div>\n</div>\n<p>These extra lookups may not be portable to different database engines (because\nyou\u2019re explicitly writing SQL code) and violate the DRY principle, so you\nshould avoid them if possible.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">RawSQL</span></code> expressions can also be used as the target of <code class=\"docutils literal notranslate\"><span class=\"pre\">__in</span></code> filters:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">id__in</span><span class=\"o\">=</span><span class=\"n\">RawSQL</span><span class=\"p\">(</span><span class=\"s2\">&quot;select id from sometable where col = </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">param</span><span class=\"p\">,)))</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p>To protect against <a class=\"reference external\" href=\"https://en.wikipedia.org/wiki/SQL_injection\">SQL injection attacks</a>, you must escape any\nparameters that the user can control by using <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">params</span></code> is a\nrequired argument to force you to acknowledge that you\u2019re not interpolating\nyour SQL with user-provided data.</p>\n<p>You also must not quote placeholders in the SQL string. This example is\nvulnerable to SQL injection because of the quotes around <code class=\"docutils literal notranslate\"><span class=\"pre\">%s</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">RawSQL(&quot;select col from sometable where othercol = &#39;%s&#39;&quot;)  # unsafe!</span>\n</pre></div>\n</div>\n<p class=\"last\">You can read more about how Django\u2019s <a class=\"reference internal\" href=\"../../../topics/security/#sql-injection-protection\"><span class=\"std std-ref\">SQL injection protection</span></a> works.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-window-functions\">\n<span id=\"window-functions\"></span><h3>Window functions<a class=\"headerlink\" href=\"#window-functions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Window functions provide a way to apply functions on partitions. Unlike a\nnormal aggregation function which computes a final result for each set defined\nby the group by, window functions operate on <a class=\"reference internal\" href=\"#window-frames\"><span class=\"std std-ref\">frames</span></a> and\npartitions, and compute the result for each row.</p>\n<p>You can specify multiple windows in the same query which in Django ORM would be\nequivalent to including multiple expressions in a <a class=\"reference internal\" href=\"../../../topics/db/aggregation/\"><span class=\"doc\">QuerySet.annotate()</span></a> call. The ORM doesn\u2019t make use of named windows,\ninstead they are part of the selected columns.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.Window\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Window</span></code>(<em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">partition_by</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">order_by</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">frame</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">output_field</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Window\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.expressions.Window\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.Window.template\">\n<code class=\"sig-name descname\"><span class=\"pre\">template</span></code><a class=\"headerlink\" href=\"#django.db.models.expressions.Window.template\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">%(expression)s</span> <span class=\"pre\">OVER</span> <span class=\"pre\">(%(window)s)'</span></code>. If only the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">expression</span></code> argument is provided, the window clause will be blank.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Window</span></code> class is the main expression for an <code class=\"docutils literal notranslate\"><span class=\"pre\">OVER</span></code> clause.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">expression</span></code> argument is either a <a class=\"reference internal\" href=\"../database-functions/#window-functions\"><span class=\"std std-ref\">window function</span></a>, an <a class=\"reference internal\" href=\"../querysets/#aggregation-functions\"><span class=\"std std-ref\">aggregate function</span></a>, or\nan expression that\u2019s compatible in a window clause.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">partition_by</span></code> argument accepts an expression or a sequence of\nexpressions (column names should be wrapped in an <code class=\"docutils literal notranslate\"><span class=\"pre\">F</span></code>-object) that control\nthe partitioning of the rows.  Partitioning narrows which rows are used to\ncompute the result set.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> is specified either as an argument or by the expression.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by</span></code> argument accepts an expression on which you can call\n<a class=\"reference internal\" href=\"#django.db.models.Expression.asc\" title=\"django.db.models.Expression.asc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asc()</span></code></a> and\n<a class=\"reference internal\" href=\"#django.db.models.Expression.desc\" title=\"django.db.models.Expression.desc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">desc()</span></code></a>, a string of a field name (with an\noptional <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;-&quot;</span></code> prefix which indicates descending order), or a tuple or list\nof strings and/or expressions. The ordering controls the order in which the\nexpression is applied. For example, if you sum over the rows in a partition,\nthe first result is the value of the first row, the second is the sum of first\nand second row.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">frame</span></code> parameter specifies which other rows that should be used in the\ncomputation. See <a class=\"reference internal\" href=\"#window-frames\"><span class=\"std std-ref\">Frames</span></a> for details.</p>\n<p>For example, to annotate each movie with the average rating for the movies by\nthe same studio in the same genre and release year:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Avg</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">Window</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Movie</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">avg_rating</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">Avg</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;studio&quot;</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;genre&quot;</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;released__year&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This allows you to check if a movie is rated better or worse than its peers.</p>\n<p>You may want to apply multiple expressions over the same window, i.e., the\nsame partition and frame. For example, you could modify the previous example\nto also include the best and worst rating in each movie\u2019s group (same studio,\ngenre, and release year) by using three window functions in the same query. The\npartition and ordering from the previous example is extracted into a dictionary\nto reduce repetition:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Avg</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">Max</span><span class=\"p\">,</span> <span class=\"n\">Min</span><span class=\"p\">,</span> <span class=\"n\">Window</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">window</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;partition_by&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;studio&quot;</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;genre&quot;</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;order_by&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;released__year&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Movie</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">avg_rating</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">Avg</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"o\">**</span><span class=\"n\">window</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">best</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">Max</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"o\">**</span><span class=\"n\">window</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">worst</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">Min</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"o\">**</span><span class=\"n\">window</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Filtering against window functions is supported as long as lookups are not\ndisjunctive (not using <code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">XOR</span></code> as a connector) and against a queryset\nperforming aggregation.</p>\n<p>For example, a query that relies on aggregation and has an <code class=\"docutils literal notranslate\"><span class=\"pre\">OR</span></code>-ed filter\nagainst a window function and a field is not supported. Applying combined\npredicates post-aggregation could cause rows that would normally be excluded\nfrom groups to be included:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Movie</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">category_rank</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span><span class=\"n\">Rank</span><span class=\"p\">(),</span> <span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;category&quot;</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;-rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"n\">scenes_count</span><span class=\"o\">=</span><span class=\"n\">Count</span><span class=\"p\">(</span><span class=\"s2\">&quot;actors&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">category_rank__lte</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">|</span> <span class=\"n\">Q</span><span class=\"p\">(</span><span class=\"n\">title__contains</span><span class=\"o\">=</span><span class=\"s2\">&quot;Batman&quot;</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">qs</span><span class=\"p\">)</span>\n<span class=\"go\">NotImplementedError: Heterogeneous disjunctive predicates against window functions</span>\n<span class=\"go\">are not implemented when performing conditional aggregation.</span>\n</pre></div>\n</div>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for filtering against window functions was added.</p>\n</div>\n<p>Among Django\u2019s built-in database backends, MySQL 8.0.2+, PostgreSQL, and Oracle\nsupport window expressions. Support for different window expression features\nvaries among the different databases. For example, the options in\n<a class=\"reference internal\" href=\"#django.db.models.Expression.asc\" title=\"django.db.models.Expression.asc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">asc()</span></code></a> and\n<a class=\"reference internal\" href=\"#django.db.models.Expression.desc\" title=\"django.db.models.Expression.desc\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">desc()</span></code></a> may not be supported. Consult the\ndocumentation for your database as needed.</p>\n<div class=\"section\" id=\"s-frames\">\n<span id=\"s-window-frames\"></span><span id=\"frames\"></span><span id=\"window-frames\"></span><h4>Frames<a class=\"headerlink\" href=\"#frames\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>For a window frame, you can choose either a range-based sequence of rows or an\nordinary sequence of rows.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.ValueRange\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">ValueRange</span></code>(<em><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#ValueRange\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.expressions.ValueRange\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.ValueRange.frame_type\">\n<code class=\"sig-name descname\"><span class=\"pre\">frame_type</span></code><a class=\"headerlink\" href=\"#django.db.models.expressions.ValueRange.frame_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This attribute is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">'RANGE'</span></code>.</p>\n</dd></dl>\n\n<p>PostgreSQL has limited support for <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueRange</span></code> and only supports use of\nthe standard start and end points, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">CURRENT</span> <span class=\"pre\">ROW</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">UNBOUNDED</span>\n<span class=\"pre\">FOLLOWING</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.RowRange\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RowRange</span></code>(<em><span class=\"n\"><span class=\"pre\">start</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">end</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#RowRange\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.expressions.RowRange\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.expressions.RowRange.frame_type\">\n<code class=\"sig-name descname\"><span class=\"pre\">frame_type</span></code><a class=\"headerlink\" href=\"#django.db.models.expressions.RowRange.frame_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This attribute is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">'ROWS'</span></code>.</p>\n</dd></dl>\n\n</dd></dl>\n\n<p>Both classes return SQL with the template:</p>\n<div class=\"highlight-sql notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"n\">frame_type</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">BETWEEN</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"k\">start</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"w\"> </span><span class=\"k\">AND</span><span class=\"w\"> </span><span class=\"o\">%</span><span class=\"p\">(</span><span class=\"k\">end</span><span class=\"p\">)</span><span class=\"n\">s</span><span class=\"w\"></span>\n</pre></div>\n</div>\n<p>Frames narrow the rows that are used for computing the result. They shift from\nsome start point to some specified end point. Frames can be used with and\nwithout partitions, but it\u2019s often a good idea to specify an ordering of the\nwindow to ensure a deterministic result. In a frame, a peer in a frame is a row\nwith an equivalent value, or all rows if an ordering clause isn\u2019t present.</p>\n<p>The default starting point for a frame is <code class=\"docutils literal notranslate\"><span class=\"pre\">UNBOUNDED</span> <span class=\"pre\">PRECEDING</span></code> which is the\nfirst row of the partition. The end point is always explicitly included in the\nSQL generated by the ORM and is by default <code class=\"docutils literal notranslate\"><span class=\"pre\">UNBOUNDED</span> <span class=\"pre\">FOLLOWING</span></code>. The default\nframe includes all rows from the partition to the last row in the set.</p>\n<p>The accepted values for the <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end</span></code> arguments are <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, an\ninteger, or zero. A negative integer for <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> results in <code class=\"docutils literal notranslate\"><span class=\"pre\">N</span> <span class=\"pre\">preceding</span></code>,\nwhile <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> yields <code class=\"docutils literal notranslate\"><span class=\"pre\">UNBOUNDED</span> <span class=\"pre\">PRECEDING</span></code>. For both <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end</span></code>,\nzero will return <code class=\"docutils literal notranslate\"><span class=\"pre\">CURRENT</span> <span class=\"pre\">ROW</span></code>. Positive integers are accepted for <code class=\"docutils literal notranslate\"><span class=\"pre\">end</span></code>.</p>\n<p>There\u2019s a difference in what <code class=\"docutils literal notranslate\"><span class=\"pre\">CURRENT</span> <span class=\"pre\">ROW</span></code> includes. When specified in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ROWS</span></code> mode, the frame starts or ends with the current row. When specified in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">RANGE</span></code> mode, the frame starts or ends at the first or last peer according to\nthe ordering clause. Thus, <code class=\"docutils literal notranslate\"><span class=\"pre\">RANGE</span> <span class=\"pre\">CURRENT</span> <span class=\"pre\">ROW</span></code> evaluates the expression for\nrows which have the same value specified by the ordering. Because the template\nincludes both the <code class=\"docutils literal notranslate\"><span class=\"pre\">start</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">end</span></code> points, this may be expressed with:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">ValueRange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If a movie\u2019s \u201cpeers\u201d are described as movies released by the same studio in the\nsame genre in the same year, this <code class=\"docutils literal notranslate\"><span class=\"pre\">RowRange</span></code> example annotates each movie\nwith the average rating of a movie\u2019s two prior and two following peers:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Avg</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">RowRange</span><span class=\"p\">,</span> <span class=\"n\">Window</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Movie</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">avg_rating</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">Avg</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;studio&quot;</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;genre&quot;</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;released__year&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">frame</span><span class=\"o\">=</span><span class=\"n\">RowRange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>If the database supports it, you can specify the start and end points based on\nvalues of an expression in the partition. If the <code class=\"docutils literal notranslate\"><span class=\"pre\">released</span></code> field of the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Movie</span></code> model stores the release month of each movies, this <code class=\"docutils literal notranslate\"><span class=\"pre\">ValueRange</span></code>\nexample annotates each movie with the average rating of a movie\u2019s peers\nreleased between twelve months before and twelve months after the each movie:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Avg</span><span class=\"p\">,</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">ValueRange</span><span class=\"p\">,</span> <span class=\"n\">Window</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Movie</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">avg_rating</span><span class=\"o\">=</span><span class=\"n\">Window</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"n\">expression</span><span class=\"o\">=</span><span class=\"n\">Avg</span><span class=\"p\">(</span><span class=\"s2\">&quot;rating&quot;</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>        <span class=\"n\">partition_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;studio&quot;</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;genre&quot;</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>        <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s2\">&quot;released__year&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"n\">frame</span><span class=\"o\">=</span><span class=\"n\">ValueRange</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=-</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">),</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-technical-information\">\n<span id=\"technical-information\"></span><h2>Technical Information<a class=\"headerlink\" href=\"#technical-information\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Below you\u2019ll find technical implementation details that may be useful to\nlibrary authors. The technical API and examples below will help with\ncreating generic query expressions that can extend the built-in functionality\nthat Django provides.</p>\n<div class=\"section\" id=\"s-expression-api\">\n<span id=\"expression-api\"></span><h3>Expression API<a class=\"headerlink\" href=\"#expression-api\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Query expressions implement the <a class=\"reference internal\" href=\"../lookups/#query-expression\"><span class=\"std std-ref\">query expression API</span></a>,\nbut also expose a number of extra methods and attributes listed below. All\nquery expressions must inherit from <code class=\"docutils literal notranslate\"><span class=\"pre\">Expression()</span></code> or a relevant\nsubclass.</p>\n<p>When a query expression wraps another expression, it is responsible for\ncalling the appropriate methods on the wrapped expression.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">Expression</span></code><a class=\"reference internal\" href=\"../../../_modules/django/db/models/expressions/#Expression\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.db.models.Expression\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.allowed_default\">\n<code class=\"sig-name descname\"><span class=\"pre\">allowed_default</span></code><a class=\"headerlink\" href=\"#django.db.models.Expression.allowed_default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"versionadded\">\n<span class=\"title\">New in Django Development version.</span> </div>\n<p>Tells Django that this expression can be used in\n<a class=\"reference internal\" href=\"../fields/#django.db.models.Field.db_default\" title=\"django.db.models.Field.db_default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">Field.db_default</span></code></a>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.contains_aggregate\">\n<code class=\"sig-name descname\"><span class=\"pre\">contains_aggregate</span></code><a class=\"headerlink\" href=\"#django.db.models.Expression.contains_aggregate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tells Django that this expression contains an aggregate and that a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">GROUP</span> <span class=\"pre\">BY</span></code> clause needs to be added to the query.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.contains_over_clause\">\n<code class=\"sig-name descname\"><span class=\"pre\">contains_over_clause</span></code><a class=\"headerlink\" href=\"#django.db.models.Expression.contains_over_clause\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tells Django that this expression contains a\n<a class=\"reference internal\" href=\"#django.db.models.expressions.Window\" title=\"django.db.models.expressions.Window\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Window</span></code></a> expression. It\u2019s used,\nfor example, to disallow window function expressions in queries that\nmodify data.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.filterable\">\n<code class=\"sig-name descname\"><span class=\"pre\">filterable</span></code><a class=\"headerlink\" href=\"#django.db.models.Expression.filterable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tells Django that this expression can be referenced in\n<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.filter\" title=\"django.db.models.query.QuerySet.filter\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.filter()</span></code></a>. Defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.window_compatible\">\n<code class=\"sig-name descname\"><span class=\"pre\">window_compatible</span></code><a class=\"headerlink\" href=\"#django.db.models.Expression.window_compatible\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tells Django that this expression can be used as the source expression\nin <a class=\"reference internal\" href=\"#django.db.models.expressions.Window\" title=\"django.db.models.expressions.Window\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Window</span></code></a>. Defaults to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.empty_result_set_value\">\n<code class=\"sig-name descname\"><span class=\"pre\">empty_result_set_value</span></code><a class=\"headerlink\" href=\"#django.db.models.Expression.empty_result_set_value\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Tells Django which value should be returned when the expression is used\nto apply a function over an empty result set. Defaults to\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/constants.html#NotImplemented\" title=\"(in Python v3.11)\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">NotImplemented</span></code></a> which forces the expression to be computed on\nthe database.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.resolve_expression\">\n<code class=\"sig-name descname\"><span class=\"pre\">resolve_expression</span></code>(<em><span class=\"n\"><span class=\"pre\">query</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">allow_joins</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">reuse</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">summarize</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">for_save</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Expression.resolve_expression\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Provides the chance to do any preprocessing or validation of\nthe expression before it\u2019s added to the query. <code class=\"docutils literal notranslate\"><span class=\"pre\">resolve_expression()</span></code>\nmust also be called on any nested expressions. A <code class=\"docutils literal notranslate\"><span class=\"pre\">copy()</span></code> of <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code>\nshould be returned with any necessary transformations.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">query</span></code> is the backend query implementation.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">allow_joins</span></code> is a boolean that allows or denies the use of\njoins in the query.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">reuse</span></code> is a set of reusable joins for multi-join scenarios.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">summarize</span></code> is a boolean that, when <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, signals that the\nquery being computed is a terminal aggregate query.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">for_save</span></code> is a boolean that, when <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>, signals that the query\nbeing executed is performing a create or update.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.get_source_expressions\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_source_expressions</span></code>()<a class=\"headerlink\" href=\"#django.db.models.Expression.get_source_expressions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an ordered list of inner expressions. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Sum</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">get_source_expressions</span><span class=\"p\">()</span>\n<span class=\"go\">[F(&#39;foo&#39;)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.set_source_expressions\">\n<code class=\"sig-name descname\"><span class=\"pre\">set_source_expressions</span></code>(<em><span class=\"n\"><span class=\"pre\">expressions</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Expression.set_source_expressions\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Takes a list of expressions and stores them such that\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_source_expressions()</span></code> can return them.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.relabeled_clone\">\n<code class=\"sig-name descname\"><span class=\"pre\">relabeled_clone</span></code>(<em><span class=\"n\"><span class=\"pre\">change_map</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Expression.relabeled_clone\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a clone (copy) of <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code>, with any column aliases relabeled.\nColumn aliases are renamed when subqueries are created.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">relabeled_clone()</span></code> should also be called on any nested expressions\nand assigned to the clone.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">change_map</span></code> is a dictionary mapping old aliases to new aliases.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">relabeled_clone</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">change_map</span><span class=\"p\">):</span>\n    <span class=\"n\">clone</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n    <span class=\"n\">clone</span><span class=\"o\">.</span><span class=\"n\">expression</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">relabeled_clone</span><span class=\"p\">(</span><span class=\"n\">change_map</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">clone</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.convert_value\">\n<code class=\"sig-name descname\"><span class=\"pre\">convert_value</span></code>(<em><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expression</span></span></em>, <em><span class=\"n\"><span class=\"pre\">connection</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Expression.convert_value\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A hook allowing the expression to coerce <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> into a more\nappropriate type.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">expression</span></code> is the same as <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.get_group_by_cols\">\n<code class=\"sig-name descname\"><span class=\"pre\">get_group_by_cols</span></code>()<a class=\"headerlink\" href=\"#django.db.models.Expression.get_group_by_cols\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Responsible for returning the list of columns references by\nthis expression. <code class=\"docutils literal notranslate\"><span class=\"pre\">get_group_by_cols()</span></code> should be called on any\nnested expressions. <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> objects, in particular, hold a reference\nto a column.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">alias=None</span></code> keyword argument was removed.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.asc\">\n<code class=\"sig-name descname\"><span class=\"pre\">asc</span></code>(<em><span class=\"n\"><span class=\"pre\">nulls_first</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">nulls_last</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Expression.asc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the expression ready to be sorted in ascending order.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_first</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_last</span></code> define how null values are sorted.\nSee <a class=\"reference internal\" href=\"#using-f-to-sort-null-values\"><span class=\"std std-ref\">Using F() to sort null values</span></a> for example usage.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.desc\">\n<code class=\"sig-name descname\"><span class=\"pre\">desc</span></code>(<em><span class=\"n\"><span class=\"pre\">nulls_first</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">nulls_last</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.Expression.desc\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the expression ready to be sorted in descending order.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_first</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">nulls_last</span></code> define how null values are sorted.\nSee <a class=\"reference internal\" href=\"#using-f-to-sort-null-values\"><span class=\"std std-ref\">Using F() to sort null values</span></a> for example usage.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.Expression.reverse_ordering\">\n<code class=\"sig-name descname\"><span class=\"pre\">reverse_ordering</span></code>()<a class=\"headerlink\" href=\"#django.db.models.Expression.reverse_ordering\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code> with any modifications required to reverse the sort\norder within an <code class=\"docutils literal notranslate\"><span class=\"pre\">order_by</span></code> call. As an example, an expression\nimplementing <code class=\"docutils literal notranslate\"><span class=\"pre\">NULLS</span> <span class=\"pre\">LAST</span></code> would change its value to be\n<code class=\"docutils literal notranslate\"><span class=\"pre\">NULLS</span> <span class=\"pre\">FIRST</span></code>. Modifications are only required for expressions that\nimplement sort order like <code class=\"docutils literal notranslate\"><span class=\"pre\">OrderBy</span></code>. This method is called when\n<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.reverse\" title=\"django.db.models.query.QuerySet.reverse\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">reverse()</span></code></a> is called on a\nqueryset.</p>\n</dd></dl>\n\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-writing-your-own-query-expressions\">\n<span id=\"writing-your-own-query-expressions\"></span><h3>Writing your own Query Expressions<a class=\"headerlink\" href=\"#writing-your-own-query-expressions\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>You can write your own query expression classes that use, and can integrate\nwith, other query expressions. Let\u2019s step through an example by writing an\nimplementation of the <code class=\"docutils literal notranslate\"><span class=\"pre\">COALESCE</span></code> SQL function, without using the built-in\n<a class=\"reference internal\" href=\"#func-expressions\"><span class=\"std std-ref\">Func() expressions</span></a>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">COALESCE</span></code> SQL function is defined as taking a list of columns or\nvalues. It will return the first column or value that isn\u2019t <code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>.</p>\n<p>We\u2019ll start by defining the template to be used for SQL generation and\nan <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code> method to set some attributes:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">copy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Expression</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Coalesce</span><span class=\"p\">(</span><span class=\"n\">Expression</span><span class=\"p\">):</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;COALESCE( </span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> )&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expressions</span><span class=\"p\">,</span> <span class=\"n\">output_field</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"n\">output_field</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">expressions</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">&quot;expressions must have at least 2 elements&quot;</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"n\">expressions</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"s2\">&quot;resolve_expression&quot;</span><span class=\"p\">):</span>\n                <span class=\"k\">raise</span> <span class=\"ne\">TypeError</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%r</span><span class=\"s2\"> is not an Expression&quot;</span> <span class=\"o\">%</span> <span class=\"n\">expression</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"n\">expressions</span>\n</pre></div>\n</div>\n<p>We do some basic validation on the parameters, including requiring at least\n2 columns or values, and ensuring they are expressions. We are requiring\n<code class=\"docutils literal notranslate\"><span class=\"pre\">output_field</span></code> here so that Django knows what kind of model field to assign\nthe eventual result to.</p>\n<p>Now we implement the preprocessing and validation. Since we do not have\nany of our own validation at this point, we delegate to the nested\nexpressions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">resolve_expression</span><span class=\"p\">(</span>\n    <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">for_save</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">):</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">is_summary</span> <span class=\"o\">=</span> <span class=\"n\">summarize</span>\n    <span class=\"k\">for</span> <span class=\"n\">pos</span><span class=\"p\">,</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">):</span>\n        <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">[</span><span class=\"n\">pos</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">expression</span><span class=\"o\">.</span><span class=\"n\">resolve_expression</span><span class=\"p\">(</span>\n            <span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">allow_joins</span><span class=\"p\">,</span> <span class=\"n\">reuse</span><span class=\"p\">,</span> <span class=\"n\">summarize</span><span class=\"p\">,</span> <span class=\"n\">for_save</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">c</span>\n</pre></div>\n</div>\n<p>Next, we write the method responsible for generating the SQL:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">as_sql</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">sql_expressions</span><span class=\"p\">,</span> <span class=\"n\">sql_params</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">expression</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span><span class=\"p\">:</span>\n        <span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">compiler</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">)</span>\n        <span class=\"n\">sql_expressions</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">)</span>\n        <span class=\"n\">sql_params</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"p\">)</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"n\">template</span> <span class=\"ow\">or</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">template</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">&quot;expressions&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;,&quot;</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">sql_expressions</span><span class=\"p\">)}</span>\n    <span class=\"k\">return</span> <span class=\"n\">template</span> <span class=\"o\">%</span> <span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">sql_params</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">as_oracle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n    <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">    Example of vendor specific handling (Oracle in this case).</span>\n<span class=\"sd\">    Let&#39;s make the function name lowercase.</span>\n<span class=\"sd\">    &quot;&quot;&quot;</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">template</span><span class=\"o\">=</span><span class=\"s2\">&quot;coalesce( </span><span class=\"si\">%(expressions)s</span><span class=\"s2\"> )&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code> methods can support custom keyword arguments, allowing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">as_vendorname()</span></code> methods to override data used to generate the SQL string.\nUsing <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code> keyword arguments for customization is preferable to\nmutating <code class=\"docutils literal notranslate\"><span class=\"pre\">self</span></code> within <code class=\"docutils literal notranslate\"><span class=\"pre\">as_vendorname()</span></code> methods as the latter can lead to\nerrors when running on different database backends. If your class relies on\nclass attributes to define data, consider allowing overrides in your\n<code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code> method.</p>\n<p>We generate the SQL for each of the <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions</span></code> by using the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">compiler.compile()</span></code> method, and join the result together with commas.\nThen the template is filled out with our data and the SQL and parameters\nare returned.</p>\n<p>We\u2019ve also defined a custom implementation that is specific to the Oracle\nbackend. The <code class=\"docutils literal notranslate\"><span class=\"pre\">as_oracle()</span></code> function will be called instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code>\nif the Oracle backend is in use.</p>\n<p>Finally, we implement the rest of the methods that allow our query expression\nto play nice with other query expressions:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">def</span> <span class=\"nf\">get_source_expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">set_source_expressions</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expressions</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">expressions</span> <span class=\"o\">=</span> <span class=\"n\">expressions</span>\n</pre></div>\n</div>\n<p>Let\u2019s see how it works:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">F</span><span class=\"p\">,</span> <span class=\"n\">Value</span><span class=\"p\">,</span> <span class=\"n\">CharField</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">qs</span> <span class=\"o\">=</span> <span class=\"n\">Company</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">tagline</span><span class=\"o\">=</span><span class=\"n\">Coalesce</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>        <span class=\"p\">[</span><span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;motto&quot;</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;ticker_name&quot;</span><span class=\"p\">),</span> <span class=\"n\">F</span><span class=\"p\">(</span><span class=\"s2\">&quot;description&quot;</span><span class=\"p\">),</span> <span class=\"n\">Value</span><span class=\"p\">(</span><span class=\"s2\">&quot;No Tagline&quot;</span><span class=\"p\">)],</span>\n<span class=\"gp\">... </span>        <span class=\"n\">output_field</span><span class=\"o\">=</span><span class=\"n\">CharField</span><span class=\"p\">(),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">qs</span><span class=\"p\">:</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;</span><span class=\"si\">%s</span><span class=\"s2\">: </span><span class=\"si\">%s</span><span class=\"s2\">&quot;</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">tagline</span><span class=\"p\">))</span>\n<span class=\"gp\">...</span>\n<span class=\"go\">Google: Do No Evil</span>\n<span class=\"go\">Apple: AAPL</span>\n<span class=\"go\">Yahoo: Internet Company</span>\n<span class=\"go\">Django Software Foundation: No Tagline</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-avoiding-sql-injection\">\n<span id=\"s-avoiding-sql-injection-in-query-expressions\"></span><span id=\"avoiding-sql-injection\"></span><span id=\"avoiding-sql-injection-in-query-expressions\"></span><h4>Avoiding SQL injection<a class=\"headerlink\" href=\"#avoiding-sql-injection\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Since a <code class=\"docutils literal notranslate\"><span class=\"pre\">Func</span></code>\u2019s keyword arguments for <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>  (<code class=\"docutils literal notranslate\"><span class=\"pre\">**extra</span></code>) and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code> (<code class=\"docutils literal notranslate\"><span class=\"pre\">**extra_context</span></code>) are interpolated into the SQL string rather\nthan passed as query parameters (where the database driver would escape them),\nthey must not contain untrusted user input.</p>\n<p>For example, if <code class=\"docutils literal notranslate\"><span class=\"pre\">substring</span></code> is user-provided, this function is vulnerable to\nSQL injection:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models</span> <span class=\"kn\">import</span> <span class=\"n\">Func</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Position</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;POSITION&quot;</span>\n    <span class=\"n\">template</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;</span><span class=\"si\">%(function)s</span><span class=\"s2\">(&#39;</span><span class=\"si\">%(substring)s</span><span class=\"s2\">&#39; in </span><span class=\"si\">%(expressions)s</span><span class=\"s2\">)&quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">substring</span><span class=\"p\">):</span>\n        <span class=\"c1\"># substring=substring is an SQL injection vulnerability!</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">substring</span><span class=\"o\">=</span><span class=\"n\">substring</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This function generates an SQL string without any parameters. Since\n<code class=\"docutils literal notranslate\"><span class=\"pre\">substring</span></code> is passed to <code class=\"docutils literal notranslate\"><span class=\"pre\">super().__init__()</span></code> as a keyword argument, it\u2019s\ninterpolated into the SQL string before the query is sent to the database.</p>\n<p>Here\u2019s a corrected rewrite:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Position</span><span class=\"p\">(</span><span class=\"n\">Func</span><span class=\"p\">):</span>\n    <span class=\"n\">function</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;POSITION&quot;</span>\n    <span class=\"n\">arg_joiner</span> <span class=\"o\">=</span> <span class=\"s2\">&quot; IN &quot;</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">substring</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">substring</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>With <code class=\"docutils literal notranslate\"><span class=\"pre\">substring</span></code> instead passed as a positional argument, it\u2019ll be passed as\na parameter in the database query.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-adding-support-in-third-party-database-backends\">\n<span id=\"adding-support-in-third-party-database-backends\"></span><h3>Adding support in third-party database backends<a class=\"headerlink\" href=\"#adding-support-in-third-party-database-backends\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re using a database backend that uses a different SQL syntax for a\ncertain function, you can add support for it by monkey patching a new method\nonto the function\u2019s class.</p>\n<p>Let\u2019s say we\u2019re writing a backend for Microsoft\u2019s SQL Server which uses the SQL\n<code class=\"docutils literal notranslate\"><span class=\"pre\">LEN</span></code> instead of <code class=\"docutils literal notranslate\"><span class=\"pre\">LENGTH</span></code> for the <a class=\"reference internal\" href=\"../database-functions/#django.db.models.functions.Length\" title=\"django.db.models.functions.Length\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Length</span></code></a> function.\nWe\u2019ll monkey patch a new method called <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sqlserver()</span></code> onto the <code class=\"docutils literal notranslate\"><span class=\"pre\">Length</span></code>\nclass:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db.models.functions</span> <span class=\"kn\">import</span> <span class=\"n\">Length</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">sqlserver_length</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">as_sql</span><span class=\"p\">(</span><span class=\"n\">compiler</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">function</span><span class=\"o\">=</span><span class=\"s2\">&quot;LEN&quot;</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">Length</span><span class=\"o\">.</span><span class=\"n\">as_sqlserver</span> <span class=\"o\">=</span> <span class=\"n\">sqlserver_length</span>\n</pre></div>\n</div>\n<p>You can also customize the SQL using the <code class=\"docutils literal notranslate\"><span class=\"pre\">template</span></code> parameter of <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sql()</span></code>.</p>\n<p>We use <code class=\"docutils literal notranslate\"><span class=\"pre\">as_sqlserver()</span></code> because <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connection.vendor</span></code> returns\n<code class=\"docutils literal notranslate\"><span class=\"pre\">sqlserver</span></code> for the backend.</p>\n<p>Third-party backends can register their functions in the top level\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code> file of the backend package or in a top level <code class=\"docutils literal notranslate\"><span class=\"pre\">expressions.py</span></code>\nfile (or package) that is imported from the top level <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code>.</p>\n<p>For user projects wishing to patch the backend that they\u2019re using, this code\nshould live in an <a class=\"reference internal\" href=\"../../applications/#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AppConfig.ready()</span></code></a> method.</p>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/models/conditional-expressions", "Conditional Expressions", "N", "next"], ["ref/models/lookups", "Lookup API reference", "P", "previous"]], "sourcename": "ref/models/expressions.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Query Expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#supported-arithmetic\">Supported arithmetic</a></li>\n<li><a class=\"reference internal\" href=\"#some-examples\">Some examples</a></li>\n<li><a class=\"reference internal\" href=\"#built-in-expressions\">Built-in Expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#f-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#avoiding-race-conditions-using-f\">Avoiding race conditions using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#f-assignments-persist-after-model-save\"><code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> assignments persist after <code class=\"docutils literal notranslate\"><span class=\"pre\">Model.save()</span></code></a></li>\n<li><a class=\"reference internal\" href=\"#using-f-in-filters\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> in filters</a></li>\n<li><a class=\"reference internal\" href=\"#using-f-with-annotations\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> with annotations</a></li>\n<li><a class=\"reference internal\" href=\"#using-f-to-sort-null-values\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> to sort null values</a></li>\n<li><a class=\"reference internal\" href=\"#using-f-with-logical-operations\">Using <code class=\"docutils literal notranslate\"><span class=\"pre\">F()</span></code> with logical operations</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#func-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Func()</span></code> expressions</a></li>\n<li><a class=\"reference internal\" href=\"#aggregate-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Aggregate()</span></code> expressions</a></li>\n<li><a class=\"reference internal\" href=\"#creating-your-own-aggregate-functions\">Creating your own Aggregate Functions</a></li>\n<li><a class=\"reference internal\" href=\"#value-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Value()</span></code> expressions</a></li>\n<li><a class=\"reference internal\" href=\"#expressionwrapper-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ExpressionWrapper()</span></code> expressions</a></li>\n<li><a class=\"reference internal\" href=\"#conditional-expressions\">Conditional expressions</a></li>\n<li><a class=\"reference internal\" href=\"#subquery-expressions\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery()</span></code> expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#referencing-columns-from-the-outer-queryset\">Referencing columns from the outer queryset</a></li>\n<li><a class=\"reference internal\" href=\"#limiting-a-subquery-to-a-single-column\">Limiting a subquery to a single column</a></li>\n<li><a class=\"reference internal\" href=\"#limiting-the-subquery-to-a-single-row\">Limiting the subquery to a single row</a></li>\n<li><a class=\"reference internal\" href=\"#exists-subqueries\"><code class=\"docutils literal notranslate\"><span class=\"pre\">Exists()</span></code> subqueries</a></li>\n<li><a class=\"reference internal\" href=\"#filtering-on-a-subquery-or-exists-expressions\">Filtering on a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">Exists()</span></code> expressions</a></li>\n<li><a class=\"reference internal\" href=\"#using-aggregates-within-a-subquery-expression\">Using aggregates within a <code class=\"docutils literal notranslate\"><span class=\"pre\">Subquery</span></code> expression</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#raw-sql-expressions\">Raw SQL expressions</a></li>\n<li><a class=\"reference internal\" href=\"#window-functions\">Window functions</a><ul>\n<li><a class=\"reference internal\" href=\"#frames\">Frames</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#technical-information\">Technical Information</a><ul>\n<li><a class=\"reference internal\" href=\"#expression-api\">Expression API</a></li>\n<li><a class=\"reference internal\" href=\"#writing-your-own-query-expressions\">Writing your own Query Expressions</a><ul>\n<li><a class=\"reference internal\" href=\"#avoiding-sql-injection\">Avoiding SQL injection</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#adding-support-in-third-party-database-backends\">Adding support in third-party database backends</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/models/expressions", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
