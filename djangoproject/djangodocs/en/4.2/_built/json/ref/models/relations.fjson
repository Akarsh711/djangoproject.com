{"parents": [{"link": "../../", "title": "API Reference"}, {"link": "../", "title": "Models"}], "prev": {"link": "../meta/", "title": "Model <code class=\"docutils literal notranslate\"><span class=\"pre\">_meta</span></code> API"}, "next": {"link": "../class/", "title": "Model class reference"}, "title": "Related objects reference", "meta": {}, "body": "<div class=\"section\" id=\"s-related-objects-reference\">\n<span id=\"related-objects-reference\"></span><h1>Related objects reference<a class=\"headerlink\" href=\"#related-objects-reference\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">RelatedManager</span></code><a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A \u201crelated manager\u201d is a manager used in a one-to-many or many-to-many\nrelated context. This happens in two cases:</p>\n<ul>\n<li><p class=\"first\">The \u201cother side\u201d of a <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> relation.\nThat is:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Blog</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Entry</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">blog</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Blog</span><span class=\"p\">,</span> <span class=\"n\">on_delete</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CASCADE</span><span class=\"p\">,</span> <span class=\"n\">null</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In the above example, the methods below will be available on\nthe manager <code class=\"docutils literal notranslate\"><span class=\"pre\">blog.entry_set</span></code>.</p>\n</li>\n<li><p class=\"first\">Both sides of a <a class=\"reference internal\" href=\"../fields/#django.db.models.ManyToManyField\" title=\"django.db.models.ManyToManyField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ManyToManyField</span></code></a> relation</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">Topping</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Pizza</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">toppings</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ManyToManyField</span><span class=\"p\">(</span><span class=\"n\">Topping</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>In this example, the methods below will be available both on\n<code class=\"docutils literal notranslate\"><span class=\"pre\">topping.pizza_set</span></code> and on <code class=\"docutils literal notranslate\"><span class=\"pre\">pizza.toppings</span></code>.</p>\n</li>\n</ul>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.add\">\n<code class=\"sig-name descname\"><span class=\"pre\">add</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">through_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.add\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.aadd\">\n<code class=\"sig-name descname\"><span class=\"pre\">aadd</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">through_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.aadd\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aadd</span></code></p>\n<p>Adds the specified model objects to the related object set.</p>\n<p>Example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">234</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>  <span class=\"c1\"># Associates Entry e with Blog b.</span>\n</pre></div>\n</div>\n<p>In the example above, in the case of a\n<a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> relationship,\n<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.update\" title=\"django.db.models.query.QuerySet.update\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code></a>\nis used to perform the update. This requires the objects to already be\nsaved.</p>\n<p>You can use the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk=False</span></code> argument to instead have the related\nmanager perform the update by calling <code class=\"docutils literal notranslate\"><span class=\"pre\">e.save()</span></code>.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> with a many-to-many relationship, however, will not\ncall any <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> methods (the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> argument doesn\u2019t exist), but\nrather create the relationships using <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.bulk_create\" title=\"django.db.models.query.QuerySet.bulk_create\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.bulk_create()</span></code></a>. If you need to execute\nsome custom logic when a relationship is created, listen to the\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.m2m_changed\" title=\"django.db.models.signals.m2m_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code></a> signal, which will\ntrigger <code class=\"docutils literal notranslate\"><span class=\"pre\">pre_add</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">post_add</span></code> actions.</p>\n<p>Using <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> on a relation that already exists won\u2019t duplicate the\nrelation, but it will still trigger signals.</p>\n<p>For many-to-many relationships <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code> accepts either model instances\nor field values, normally primary keys, as the <code class=\"docutils literal notranslate\"><span class=\"pre\">*objs</span></code> argument.</p>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code> argument to specify values for the new\n<a class=\"reference internal\" href=\"../../../topics/db/models/#intermediary-manytomany\"><span class=\"std std-ref\">intermediate model</span></a> instance(s), if\nneeded. You can use callables as values in the <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code>\ndictionary and they will be evaluated once before creating any\nintermediate instance(s).</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">aadd()</span></code> method was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.create\">\n<code class=\"sig-name descname\"><span class=\"pre\">create</span></code>(<em><span class=\"n\"><span class=\"pre\">through_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.create\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.acreate\">\n<code class=\"sig-name descname\"><span class=\"pre\">acreate</span></code>(<em><span class=\"n\"><span class=\"pre\">through_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.acreate\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">acreate</span></code></p>\n<p>Creates a new object, saves it and puts it in the related object set.\nReturns the newly created object:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span> <span class=\"n\">body_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">,</span> <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n\n<span class=\"go\"># No need to call e.save() at this point -- it&#39;s already been saved.</span>\n</pre></div>\n</div>\n<p>This is equivalent to (but simpler than):</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"p\">(</span><span class=\"n\">blog</span><span class=\"o\">=</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">headline</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hello&quot;</span><span class=\"p\">,</span> <span class=\"n\">body_text</span><span class=\"o\">=</span><span class=\"s2\">&quot;Hi&quot;</span><span class=\"p\">,</span> <span class=\"n\">pub_date</span><span class=\"o\">=</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2005</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"n\">force_insert</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Note that there\u2019s no need to specify the keyword argument of the model\nthat defines the relationship. In the above example, we don\u2019t pass the\nparameter <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code>. Django figures out that the new\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Entry</span></code> object\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> field should be set to <code class=\"docutils literal notranslate\"><span class=\"pre\">b</span></code>.</p>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code> argument to specify values for the new\n<a class=\"reference internal\" href=\"../../../topics/db/models/#intermediary-manytomany\"><span class=\"std std-ref\">intermediate model</span></a> instance, if\nneeded. You can use callables as values in the <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code>\ndictionary.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.remove\">\n<code class=\"sig-name descname\"><span class=\"pre\">remove</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.remove\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.aremove\">\n<code class=\"sig-name descname\"><span class=\"pre\">aremove</span></code>(<em><span class=\"o\"><span class=\"pre\">*</span></span><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.aremove\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aremove</span></code></p>\n<p>Removes the specified model objects from the related object set:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span> <span class=\"o\">=</span> <span class=\"n\">Entry</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">234</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>  <span class=\"c1\"># Disassociates Entry e from Blog b.</span>\n</pre></div>\n</div>\n<p>Similar to <a class=\"reference internal\" href=\"#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a>, <code class=\"docutils literal notranslate\"><span class=\"pre\">e.save()</span></code> is called in the example above\nto perform the update. Using <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> with a many-to-many\nrelationship, however, will delete the relationships using\n<a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.delete\" title=\"django.db.models.query.QuerySet.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QuerySet.delete()</span></code></a> which\nmeans no model <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> methods are called; listen to the\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.m2m_changed\" title=\"django.db.models.signals.m2m_changed\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">m2m_changed</span></code></a> signal if you wish to\nexecute custom code when a relationship is deleted.</p>\n<p>For many-to-many relationships <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> accepts either model\ninstances or field values, normally primary keys, as the <code class=\"docutils literal notranslate\"><span class=\"pre\">*objs</span></code>\nargument.</p>\n<p>For <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> objects, this method only\nexists if <code class=\"docutils literal notranslate\"><span class=\"pre\">null=True</span></code>. If the related field can\u2019t be set to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>\n(<code class=\"docutils literal notranslate\"><span class=\"pre\">NULL</span></code>), then an object can\u2019t be removed from a relation without\nbeing added to another. In the above example, removing <code class=\"docutils literal notranslate\"><span class=\"pre\">e</span></code> from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">b.entry_set()</span></code> is equivalent to doing <code class=\"docutils literal notranslate\"><span class=\"pre\">e.blog</span> <span class=\"pre\">=</span> <span class=\"pre\">None</span></code>, and because\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">blog</span></code> <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> doesn\u2019t have\n<code class=\"docutils literal notranslate\"><span class=\"pre\">null=True</span></code>, this is invalid.</p>\n<p>For <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> objects, this method accepts\na <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> argument to control how to perform the operation.\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> (the default), <code class=\"docutils literal notranslate\"><span class=\"pre\">QuerySet.update()</span></code> is used.\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk=False</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code> method of each individual model\ninstance is called instead. This triggers the\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.pre_save\" title=\"django.db.models.signals.pre_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_save</span></code></a> and\n<a class=\"reference internal\" href=\"../../signals/#django.db.models.signals.post_save\" title=\"django.db.models.signals.post_save\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_save</span></code></a> signals and comes at the\nexpense of performance.</p>\n<p>For many-to-many relationships, the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> keyword argument doesn\u2019t\nexist.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">aremove()</span></code> method was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.clear\">\n<code class=\"sig-name descname\"><span class=\"pre\">clear</span></code>(<em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.clear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.aclear\">\n<code class=\"sig-name descname\"><span class=\"pre\">aclear</span></code>(<em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.aclear\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aclear</span></code></p>\n<p>Removes all objects from the related object set:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">Blog</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">entry_set</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n<p>Note this doesn\u2019t delete the related objects \u2013 it just disassociates\nthem.</p>\n<p>Just like <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> is only available on\n<a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a>s where <code class=\"docutils literal notranslate\"><span class=\"pre\">null=True</span></code> and it also\naccepts the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> keyword argument.</p>\n<p>For many-to-many relationships, the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> keyword argument doesn\u2019t\nexist.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">aclear()</span></code> method was added.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.set\">\n<code class=\"sig-name descname\"><span class=\"pre\">set</span></code>(<em><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">clear</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">through_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.set\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.db.models.fields.related.RelatedManager.aset\">\n<code class=\"sig-name descname\"><span class=\"pre\">aset</span></code>(<em><span class=\"n\"><span class=\"pre\">objs</span></span></em>, <em><span class=\"n\"><span class=\"pre\">bulk</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">clear</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">through_defaults</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.db.models.fields.related.RelatedManager.aset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><em>Asynchronous version</em>: <code class=\"docutils literal notranslate\"><span class=\"pre\">aset</span></code></p>\n<p>Replace the set of related objects:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">new_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">obj1</span><span class=\"p\">,</span> <span class=\"n\">obj2</span><span class=\"p\">,</span> <span class=\"n\">obj3</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">e</span><span class=\"o\">.</span><span class=\"n\">related_set</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"n\">new_list</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>This method accepts a <code class=\"docutils literal notranslate\"><span class=\"pre\">clear</span></code> argument to control how to perform the\noperation. If <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (the default), the elements missing from the\nnew set are removed using <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code> and only the new ones are added.\nIf <code class=\"docutils literal notranslate\"><span class=\"pre\">clear=True</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> method is called instead and the\nwhole set is added at once.</p>\n<p>For <a class=\"reference internal\" href=\"../fields/#django.db.models.ForeignKey\" title=\"django.db.models.ForeignKey\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ForeignKey</span></code></a> objects, the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code>\nargument is passed on to <a class=\"reference internal\" href=\"#django.db.models.fields.related.RelatedManager.add\" title=\"django.db.models.fields.related.RelatedManager.add\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">add()</span></code></a> and <a class=\"reference internal\" href=\"#django.db.models.fields.related.RelatedManager.remove\" title=\"django.db.models.fields.related.RelatedManager.remove\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">remove()</span></code></a>.</p>\n<p>For many-to-many relationships, the <code class=\"docutils literal notranslate\"><span class=\"pre\">bulk</span></code> keyword argument doesn\u2019t\nexist.</p>\n<p>Note that since <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> is a compound operation, it is subject to\nrace conditions. For instance, new objects may be added to the database\nin between the call to <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code> and the call to <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code>.</p>\n<p>For many-to-many relationships <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code> accepts a list of either model\ninstances or field values, normally primary keys, as the <code class=\"docutils literal notranslate\"><span class=\"pre\">objs</span></code>\nargument.</p>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code> argument to specify values for the new\n<a class=\"reference internal\" href=\"../../../topics/db/models/#intermediary-manytomany\"><span class=\"std std-ref\">intermediate model</span></a> instance(s), if\nneeded. You can use callables as values in the <code class=\"docutils literal notranslate\"><span class=\"pre\">through_defaults</span></code>\ndictionary and they will be evaluated once before creating any\nintermediate instance(s).</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p><code class=\"docutils literal notranslate\"><span class=\"pre\">aset()</span></code> method was added.</p>\n</div>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>Note that <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">aadd()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">create()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">acreate()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">aremove()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">aclear()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">aset()</span></code> all apply database changes immediately for all types of\nrelated fields. In other words, there is no need to call\n<code class=\"docutils literal notranslate\"><span class=\"pre\">save()</span></code>/<code class=\"docutils literal notranslate\"><span class=\"pre\">asave()</span></code> on either end of the relationship.</p>\n<p class=\"last\">If you use <a class=\"reference internal\" href=\"../querysets/#django.db.models.query.QuerySet.prefetch_related\" title=\"django.db.models.query.QuerySet.prefetch_related\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">prefetch_related()</span></code></a>,\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">add()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">aadd()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">remove()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">aremove()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">clear()</span></code>,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">aclear()</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">set()</span></code>, and <code class=\"docutils literal notranslate\"><span class=\"pre\">aset()</span></code> methods clear the prefetched\ncache.</p>\n</div>\n</dd></dl>\n\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/models/class", "Model class reference", "N", "next"], ["ref/models/meta", "Model <code class=\"docutils literal notranslate\"><span class=\"pre\">_meta</span></code> API", "P", "previous"]], "sourcename": "ref/models/relations.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Related objects reference</a></li>\n</ul>\n", "display_toc": false, "page_source_suffix": ".txt", "current_page_name": "ref/models/relations", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}