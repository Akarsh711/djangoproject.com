{"parents": [{"link": "../", "title": "API Reference"}], "prev": {"link": "../paginator/", "title": "Paginator"}, "next": {"link": "../schema-editor/", "title": "<code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaEditor</span></code>"}, "title": "Request and response objects", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.http\">\n<span id=\"s-request-and-response-objects\"></span><span id=\"module-django.http\"></span><span id=\"request-and-response-objects\"></span><h1>Request and response objects<a class=\"headerlink\" href=\"#module-django.http\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<div class=\"section\" id=\"s-quick-overview\">\n<span id=\"quick-overview\"></span><h2>Quick overview<a class=\"headerlink\" href=\"#quick-overview\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>Django uses request and response objects to pass state through the system.</p>\n<p>When a page is requested, Django creates an <a class=\"reference internal\" href=\"#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object that\ncontains metadata about the request. Then Django loads the appropriate view,\npassing the <a class=\"reference internal\" href=\"#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> as the first argument to the view function.\nEach view is responsible for returning an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> object.</p>\n<p>This document explains the APIs for <a class=\"reference internal\" href=\"#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> and\n<a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> objects, which are defined in the <a class=\"reference internal\" href=\"#module-django.http\" title=\"django.http: Classes dealing with HTTP requests and responses.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.http</span></code></a>\nmodule.</p>\n</div>\n<div class=\"section\" id=\"s-httprequest-objects\">\n<span id=\"httprequest-objects\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> objects<a class=\"headerlink\" href=\"#httprequest-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpRequest</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<div class=\"section\" id=\"s-attributes\">\n<span id=\"s-httprequest-attributes\"></span><span id=\"attributes\"></span><span id=\"httprequest-attributes\"></span><h3>Attributes<a class=\"headerlink\" href=\"#attributes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>All attributes should be considered read-only, unless stated otherwise.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.scheme\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">scheme</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.scheme\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string representing the scheme of the request (<code class=\"docutils literal notranslate\"><span class=\"pre\">http</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">https</span></code>\nusually).</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.body\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">body</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.body\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The raw HTTP request body as a bytestring. This is useful for processing\ndata in different ways than conventional HTML forms: binary images,\nXML payload etc. For processing conventional form data, use\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.POST\" title=\"django.http.HttpRequest.POST\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpRequest.POST</span></code></a>.</p>\n<p>You can also read from an <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> using a file-like interface with\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.read\" title=\"django.http.HttpRequest.read\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.read()</span></code></a> or <a class=\"reference internal\" href=\"#django.http.HttpRequest.readline\" title=\"django.http.HttpRequest.readline\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.readline()</span></code></a>. Accessing\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">body</span></code> attribute <em>after</em> reading the request with either of these I/O\nstream methods will produce a <code class=\"docutils literal notranslate\"><span class=\"pre\">RawPostDataException</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.path\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">path</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string representing the full path to the requested page, not including\nthe scheme, domain, or query string.</p>\n<p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/music/bands/the_beatles/&quot;</span></code></p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.path_info\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">path_info</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.path_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Under some web server configurations, the portion of the URL after the\nhost name is split up into a script prefix portion and a path info\nportion. The <code class=\"docutils literal notranslate\"><span class=\"pre\">path_info</span></code> attribute always contains the path info portion\nof the path, no matter what web server is being used. Using this instead\nof <a class=\"reference internal\" href=\"#django.http.HttpRequest.path\" title=\"django.http.HttpRequest.path\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">path</span></code></a> can make your code easier to move between\ntest and deployment servers.</p>\n<p>For example, if the <code class=\"docutils literal notranslate\"><span class=\"pre\">WSGIScriptAlias</span></code> for your application is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/minfo&quot;</span></code>, then <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> might be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/minfo/music/bands/the_beatles/&quot;</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">path_info</span></code> would be <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/music/bands/the_beatles/&quot;</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.method\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">method</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.method\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string representing the HTTP method used in the request. This is\nguaranteed to be uppercase. For example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;GET&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something</span><span class=\"p\">()</span>\n<span class=\"k\">elif</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">method</span> <span class=\"o\">==</span> <span class=\"s2\">&quot;POST&quot;</span><span class=\"p\">:</span>\n    <span class=\"n\">do_something_else</span><span class=\"p\">()</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.encoding\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">encoding</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.encoding\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string representing the current encoding used to decode form submission\ndata (or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>, which means the <a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a> setting is\nused). You can write to this attribute to change the encoding used when\naccessing the form data. Any subsequent attribute accesses (such as reading\nfrom <a class=\"reference internal\" href=\"#django.http.HttpRequest.GET\" title=\"django.http.HttpRequest.GET\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">GET</span></code></a> or <a class=\"reference internal\" href=\"#django.http.HttpRequest.POST\" title=\"django.http.HttpRequest.POST\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">POST</span></code></a>) will use the new <code class=\"docutils literal notranslate\"><span class=\"pre\">encoding</span></code> value.\nUseful if you know the form data is not in the <a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a>\nencoding.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.content_type\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">content_type</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.content_type\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string representing the MIME type of the request, parsed from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_TYPE</span></code> header.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.content_params\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">content_params</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.content_params\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary of key/value parameters included in the <code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_TYPE</span></code>\nheader.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.GET\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">GET</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.GET\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary-like object containing all given HTTP GET parameters. See the\n<a class=\"reference internal\" href=\"#django.http.QueryDict\" title=\"django.http.QueryDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code></a> documentation below.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.POST\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">POST</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.POST\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary-like object containing all given HTTP POST parameters,\nproviding that the request contains form data. See the\n<a class=\"reference internal\" href=\"#django.http.QueryDict\" title=\"django.http.QueryDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code></a> documentation below. If you need to access raw or\nnon-form data posted in the request, access this through the\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.body\" title=\"django.http.HttpRequest.body\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpRequest.body</span></code></a> attribute instead.</p>\n<p>It\u2019s possible that a request can come in via POST with an empty <code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code>\ndictionary \u2013 if, say, a form is requested via the POST HTTP method but\ndoes not include form data. Therefore, you shouldn\u2019t use <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">request.POST</span></code>\nto check for use of the POST method; instead, use <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">request.method</span> <span class=\"pre\">==</span>\n<span class=\"pre\">&quot;POST&quot;</span></code> (see <a class=\"reference internal\" href=\"#django.http.HttpRequest.method\" title=\"django.http.HttpRequest.method\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpRequest.method</span></code></a>).</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">POST</span></code> does <em>not</em> include file-upload information. See <a class=\"reference internal\" href=\"#django.http.HttpRequest.FILES\" title=\"django.http.HttpRequest.FILES\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">FILES</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.COOKIES\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">COOKIES</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.COOKIES\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary containing all cookies. Keys and values are strings.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.FILES\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">FILES</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.FILES\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary-like object containing all uploaded files. Each key in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">FILES</span></code> is the <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code> from the <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;input</span> <span class=\"pre\">type=&quot;file&quot;</span> <span class=\"pre\">name=&quot;&quot;&gt;</span></code>. Each\nvalue in <code class=\"docutils literal notranslate\"><span class=\"pre\">FILES</span></code> is an <a class=\"reference internal\" href=\"../files/uploads/#django.core.files.uploadedfile.UploadedFile\" title=\"django.core.files.uploadedfile.UploadedFile\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">UploadedFile</span></code></a>.</p>\n<p>See <a class=\"reference internal\" href=\"../../topics/files/\"><span class=\"doc\">Managing files</span></a> for more information.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">FILES</span></code> will only contain data if the request method was POST and the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;form&gt;</span></code> that posted to the request had <code class=\"docutils literal notranslate\"><span class=\"pre\">enctype=&quot;multipart/form-data&quot;</span></code>.\nOtherwise, <code class=\"docutils literal notranslate\"><span class=\"pre\">FILES</span></code> will be a blank dictionary-like object.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.META\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">META</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.META\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A dictionary containing all available HTTP headers. Available headers\ndepend on the client and server, but here are some examples:</p>\n<ul class=\"simple\">\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_LENGTH</span></code> \u2013 The length of the request body (as a string).</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_TYPE</span></code> \u2013 The MIME type of the request body.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_ACCEPT</span></code> \u2013 Acceptable content types for the response.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_ACCEPT_ENCODING</span></code> \u2013 Acceptable encodings for the response.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_ACCEPT_LANGUAGE</span></code> \u2013 Acceptable languages for the response.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_HOST</span></code> \u2013 The HTTP Host header sent by the client.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_REFERER</span></code> \u2013 The referring page, if any.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_USER_AGENT</span></code> \u2013 The client\u2019s user-agent string.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">QUERY_STRING</span></code> \u2013 The query string, as a single (unparsed) string.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_ADDR</span></code> \u2013 The IP address of the client.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_HOST</span></code> \u2013 The hostname of the client.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">REMOTE_USER</span></code> \u2013 The user authenticated by the web server, if any.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">REQUEST_METHOD</span></code> \u2013 A string such as <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;GET&quot;</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;POST&quot;</span></code>.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">SERVER_NAME</span></code> \u2013 The hostname of the server.</li>\n<li><code class=\"docutils literal notranslate\"><span class=\"pre\">SERVER_PORT</span></code> \u2013 The port of the server (as a string).</li>\n</ul>\n<p>With the exception of <code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_LENGTH</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_TYPE</span></code>, as given\nabove, any HTTP headers in the request are converted to <code class=\"docutils literal notranslate\"><span class=\"pre\">META</span></code> keys by\nconverting all characters to uppercase, replacing any hyphens with\nunderscores and adding an <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_</span></code> prefix to the name. So, for example, a\nheader called <code class=\"docutils literal notranslate\"><span class=\"pre\">X-Bender</span></code> would be mapped to the <code class=\"docutils literal notranslate\"><span class=\"pre\">META</span></code> key\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_X_BENDER</span></code>.</p>\n<p>Note that <a class=\"reference internal\" href=\"../django-admin/#django-admin-runserver\"><code class=\"xref std std-djadmin docutils literal notranslate\"><span class=\"pre\">runserver</span></code></a> strips all headers with underscores in the\nname, so you won\u2019t see them in <code class=\"docutils literal notranslate\"><span class=\"pre\">META</span></code>. This prevents header-spoofing\nbased on ambiguity between underscores and dashes both being normalizing to\nunderscores in WSGI environment variables. It matches the behavior of\nweb servers like Nginx and Apache 2.4+.</p>\n<p><a class=\"reference internal\" href=\"#django.http.HttpRequest.headers\" title=\"django.http.HttpRequest.headers\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpRequest.headers</span></code></a> is a simpler way to access all HTTP-prefixed\nheaders, plus <code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_LENGTH</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">CONTENT_TYPE</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.headers\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">headers</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.headers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A case insensitive, dict-like object that provides access to all\nHTTP-prefixed headers (plus <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Length</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code>) from\nthe request.</p>\n<p>The name of each header is stylized with title-casing (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">User-Agent</span></code>)\nwhen it\u2019s displayed. You can access headers case-insensitively:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span>\n<span class=\"go\">{&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6&#39;, ...}</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s2\">&quot;User-Agent&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span>\n<span class=\"go\">True</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"s2\">&quot;user-agent&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span>\n<span class=\"go\">True</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;User-Agent&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;user-agent&quot;</span><span class=\"p\">]</span>\n<span class=\"go\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)</span>\n\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;User-Agent&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">&quot;user-agent&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6)</span>\n</pre></div>\n</div>\n<p>For use in, for example, Django templates, headers can also be looked up\nusing underscores in place of hyphens:</p>\n<div class=\"highlight-html+django notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"cp\">{{</span> <span class=\"nv\">request.headers.user_agent</span> <span class=\"cp\">}}</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.resolver_match\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">resolver_match</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.resolver_match\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An instance of <a class=\"reference internal\" href=\"../urlresolvers/#django.urls.ResolverMatch\" title=\"django.urls.ResolverMatch\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ResolverMatch</span></code></a> representing the\nresolved URL. This attribute is only set after URL resolving took place,\nwhich means it\u2019s available in all views but not in middleware which are\nexecuted before URL resolving takes place (you can use it in\n<a class=\"reference internal\" href=\"../../topics/http/middleware/#process_view\" title=\"process_view\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">process_view()</span></code></a> though).</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-attributes-set-by-application-code\">\n<span id=\"attributes-set-by-application-code\"></span><h3>Attributes set by application code<a class=\"headerlink\" href=\"#attributes-set-by-application-code\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django doesn\u2019t set these attributes itself but makes use of them if set by your\napplication.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.current_app\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">current_app</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.current_app\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The <a class=\"reference internal\" href=\"../templates/builtins/#std-templatetag-url\"><code class=\"xref std std-ttag docutils literal notranslate\"><span class=\"pre\">url</span></code></a> template tag will use its value as the <code class=\"docutils literal notranslate\"><span class=\"pre\">current_app</span></code>\nargument to <a class=\"reference internal\" href=\"../urlresolvers/#django.urls.reverse\" title=\"django.urls.reverse\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">reverse()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.urlconf\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">urlconf</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.urlconf\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This will be used as the root URLconf for the current request, overriding\nthe <a class=\"reference internal\" href=\"../settings/#std-setting-ROOT_URLCONF\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ROOT_URLCONF</span></code></a> setting. See\n<a class=\"reference internal\" href=\"../../topics/http/urls/#how-django-processes-a-request\"><span class=\"std std-ref\">How Django processes a request</span></a> for details.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">urlconf</span></code> can be set to <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> to revert any changes made by previous\nmiddleware and return to using the <a class=\"reference internal\" href=\"../settings/#std-setting-ROOT_URLCONF\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ROOT_URLCONF</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.exception_reporter_filter\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">exception_reporter_filter</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.exception_reporter_filter\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This will be used instead of <a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_EXCEPTION_REPORTER_FILTER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_EXCEPTION_REPORTER_FILTER</span></code></a>\nfor the current request. See <a class=\"reference internal\" href=\"../../howto/error-reporting/#custom-error-reports\"><span class=\"std std-ref\">Custom error reports</span></a> for details.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.exception_reporter_class\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">exception_reporter_class</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.exception_reporter_class\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This will be used instead of <a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_EXCEPTION_REPORTER\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_EXCEPTION_REPORTER</span></code></a> for the\ncurrent request. See <a class=\"reference internal\" href=\"../../howto/error-reporting/#custom-error-reports\"><span class=\"std std-ref\">Custom error reports</span></a> for details.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-attributes-set-by-middleware\">\n<span id=\"attributes-set-by-middleware\"></span><h3>Attributes set by middleware<a class=\"headerlink\" href=\"#attributes-set-by-middleware\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Some of the middleware included in Django\u2019s contrib apps set attributes on the\nrequest. If you don\u2019t see the attribute on a request, be sure the appropriate\nmiddleware class is listed in <a class=\"reference internal\" href=\"../settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a>.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.session\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">session</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.session\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>From the <a class=\"reference internal\" href=\"../middleware/#django.contrib.sessions.middleware.SessionMiddleware\" title=\"django.contrib.sessions.middleware.SessionMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SessionMiddleware</span></code></a>: A\nreadable and writable, dictionary-like object that represents the current\nsession.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.site\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">site</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.site\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>From the <a class=\"reference internal\" href=\"../middleware/#django.contrib.sites.middleware.CurrentSiteMiddleware\" title=\"django.contrib.sites.middleware.CurrentSiteMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CurrentSiteMiddleware</span></code></a>:\nAn instance of <a class=\"reference internal\" href=\"../contrib/sites/#django.contrib.sites.models.Site\" title=\"django.contrib.sites.models.Site\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Site</span></code></a> or\n<a class=\"reference internal\" href=\"../contrib/sites/#django.contrib.sites.requests.RequestSite\" title=\"django.contrib.sites.requests.RequestSite\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">RequestSite</span></code></a> as returned by\n<a class=\"reference internal\" href=\"../contrib/sites/#django.contrib.sites.shortcuts.get_current_site\" title=\"django.contrib.sites.shortcuts.get_current_site\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">get_current_site()</span></code></a>\nrepresenting the current site.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.user\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">user</span></code><a class=\"headerlink\" href=\"#django.http.HttpRequest.user\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>From the <a class=\"reference internal\" href=\"../middleware/#django.contrib.auth.middleware.AuthenticationMiddleware\" title=\"django.contrib.auth.middleware.AuthenticationMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationMiddleware</span></code></a>:\nAn instance of <a class=\"reference internal\" href=\"../settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> representing the currently\nlogged-in user. If the user isn\u2019t currently logged in, <code class=\"docutils literal notranslate\"><span class=\"pre\">user</span></code> will be set\nto an instance of <a class=\"reference internal\" href=\"../contrib/auth/#django.contrib.auth.models.AnonymousUser\" title=\"django.contrib.auth.models.AnonymousUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AnonymousUser</span></code></a>. You\ncan tell them apart with\n<a class=\"reference internal\" href=\"../contrib/auth/#django.contrib.auth.models.User.is_authenticated\" title=\"django.contrib.auth.models.User.is_authenticated\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">is_authenticated</span></code></a>, like so:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">if</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">is_authenticated</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># Do something for logged-in users.</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>  <span class=\"c1\"># Do something for anonymous users.</span>\n</pre></div>\n</div>\n<p>The <a class=\"reference internal\" href=\"#django.http.HttpRequest.auser\" title=\"django.http.HttpRequest.auser\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">auser()</span></code></a> method does the same thing but can be used from async\ncontexts.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-methods\">\n<span id=\"methods\"></span><h3>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.auser\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">auser</span></code>()<a class=\"headerlink\" href=\"#django.http.HttpRequest.auser\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"versionadded\">\n<span class=\"title\">New in Django Development version.</span> </div>\n<p>From the <a class=\"reference internal\" href=\"../middleware/#django.contrib.auth.middleware.AuthenticationMiddleware\" title=\"django.contrib.auth.middleware.AuthenticationMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AuthenticationMiddleware</span></code></a>:\nCoroutine. Returns an instance of <a class=\"reference internal\" href=\"../settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a> representing\nthe currently logged-in user. If the user isn\u2019t currently logged in,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">auser</span></code> will return an instance of\n<a class=\"reference internal\" href=\"../contrib/auth/#django.contrib.auth.models.AnonymousUser\" title=\"django.contrib.auth.models.AnonymousUser\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AnonymousUser</span></code></a>. This is similar to the\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.user\" title=\"django.http.HttpRequest.user\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">user</span></code></a> attribute but it works in async contexts.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.get_host\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_host</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.get_host\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.get_host\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the originating host of the request using information from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_X_FORWARDED_HOST</span></code> (if <a class=\"reference internal\" href=\"../settings/#std-setting-USE_X_FORWARDED_HOST\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_X_FORWARDED_HOST</span></code></a> is enabled)\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_HOST</span></code> headers, in that order. If they don\u2019t provide a value,\nthe method uses a combination of <code class=\"docutils literal notranslate\"><span class=\"pre\">SERVER_NAME</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">SERVER_PORT</span></code> as\ndetailed in <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-3333/\"><strong>PEP 3333</strong></a>.</p>\n<p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;127.0.0.1:8000&quot;</span></code></p>\n<p>Raises <code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.exceptions.DisallowedHost</span></code> if the host is not in\n<a class=\"reference internal\" href=\"../settings/#std-setting-ALLOWED_HOSTS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">ALLOWED_HOSTS</span></code></a> or the domain name is invalid according to\n<span class=\"target\" id=\"index-1\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc1034.html\"><strong>RFC 1034</strong></a>/<span class=\"target\" id=\"index-2\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc1035.html\"><strong>1035</strong></a>.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>The <a class=\"reference internal\" href=\"#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_host()</span></code></a> method fails when the host is\nbehind multiple proxies. One solution is to use middleware to rewrite\nthe proxy headers, as in the following example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"k\">class</span> <span class=\"nc\">MultipleProxyMiddleware</span><span class=\"p\">:</span>\n    <span class=\"n\">FORWARDED_FOR_FIELDS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"s2\">&quot;HTTP_X_FORWARDED_FOR&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;HTTP_X_FORWARDED_HOST&quot;</span><span class=\"p\">,</span>\n        <span class=\"s2\">&quot;HTTP_X_FORWARDED_SERVER&quot;</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">get_response</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_response</span> <span class=\"o\">=</span> <span class=\"n\">get_response</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">&quot;&quot;&quot;</span>\n<span class=\"sd\">        Rewrites the proxy headers so that only the most</span>\n<span class=\"sd\">        recent proxy is used.</span>\n<span class=\"sd\">        &quot;&quot;&quot;</span>\n        <span class=\"k\">for</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">FORWARDED_FOR_FIELDS</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">field</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"s2\">&quot;,&quot;</span> <span class=\"ow\">in</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]:</span>\n                    <span class=\"n\">parts</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">&quot;,&quot;</span><span class=\"p\">)</span>\n                    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"n\">field</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">parts</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_response</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p class=\"last\">This middleware should be positioned before any other middleware that\nrelies on the value of <a class=\"reference internal\" href=\"#django.http.HttpRequest.get_host\" title=\"django.http.HttpRequest.get_host\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_host()</span></code></a> \u2013 for instance,\n<a class=\"reference internal\" href=\"../middleware/#django.middleware.common.CommonMiddleware\" title=\"django.middleware.common.CommonMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CommonMiddleware</span></code></a> or\n<a class=\"reference internal\" href=\"../middleware/#django.middleware.csrf.CsrfViewMiddleware\" title=\"django.middleware.csrf.CsrfViewMiddleware\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">CsrfViewMiddleware</span></code></a>.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.get_port\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_port</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.get_port\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.get_port\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the originating port of the request using information from the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HTTP_X_FORWARDED_PORT</span></code> (if <a class=\"reference internal\" href=\"../settings/#std-setting-USE_X_FORWARDED_PORT\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">USE_X_FORWARDED_PORT</span></code></a> is enabled)\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">SERVER_PORT</span></code> <code class=\"docutils literal notranslate\"><span class=\"pre\">META</span></code> variables, in that order.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.get_full_path\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_full_path</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.get_full_path\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.get_full_path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code>, plus an appended query string, if applicable.</p>\n<p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/music/bands/the_beatles/?print=true&quot;</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.get_full_path_info\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_full_path_info</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.get_full_path_info\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.get_full_path_info\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.http.HttpRequest.get_full_path\" title=\"django.http.HttpRequest.get_full_path\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_full_path()</span></code></a>, but uses <a class=\"reference internal\" href=\"#django.http.HttpRequest.path_info\" title=\"django.http.HttpRequest.path_info\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">path_info</span></code></a> instead of\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.path\" title=\"django.http.HttpRequest.path\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">path</span></code></a>.</p>\n<p>Example: <code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;/minfo/music/bands/the_beatles/?print=true&quot;</span></code></p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.build_absolute_uri\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">build_absolute_uri</span></code>(<em><span class=\"n\"><span class=\"pre\">location</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.build_absolute_uri\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.build_absolute_uri\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the absolute URI form of <code class=\"docutils literal notranslate\"><span class=\"pre\">location</span></code>. If no location is provided,\nthe location will be set to <code class=\"docutils literal notranslate\"><span class=\"pre\">request.get_full_path()</span></code>.</p>\n<p>If the location is already an absolute URI, it will not be altered.\nOtherwise the absolute URI is built using the server variables available in\nthis request. For example:</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">build_absolute_uri</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;https://example.com/music/bands/the_beatles/?print=true&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">build_absolute_uri</span><span class=\"p\">(</span><span class=\"s1\">&#39;/bands/&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://example.com/bands/&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">build_absolute_uri</span><span class=\"p\">(</span><span class=\"s1\">&#39;https://example2.com/bands/&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;https://example2.com/bands/&#39;</span>\n</pre></div>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">Mixing HTTP and HTTPS on the same site is discouraged, therefore\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.build_absolute_uri\" title=\"django.http.HttpRequest.build_absolute_uri\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">build_absolute_uri()</span></code></a> will always generate an\nabsolute URI with the same scheme the current request has. If you need\nto redirect users to HTTPS, it\u2019s best to let your web server redirect\nall HTTP traffic to HTTPS.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.get_signed_cookie\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_signed_cookie</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">RAISE_ERROR</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_age</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.get_signed_cookie\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.get_signed_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a cookie value for a signed cookie, or raises a\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.core.signing.BadSignature</span></code> exception if the signature is\nno longer valid. If you provide the <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> argument the exception\nwill be suppressed and that default value will be returned instead.</p>\n<p>The optional <code class=\"docutils literal notranslate\"><span class=\"pre\">salt</span></code> argument can be used to provide extra protection\nagainst brute force attacks on your secret key. If supplied, the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> argument will be checked against the signed timestamp\nattached to the cookie value to ensure the cookie is not older than\n<code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> seconds.</p>\n<p>For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Tony&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"n\">salt</span><span class=\"o\">=</span><span class=\"s2\">&quot;name-salt&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;Tony&#39; # assuming cookie was set using the same salt</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;nonexistent-cookie&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">KeyError: &#39;nonexistent-cookie&#39;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;nonexistent-cookie&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;cookie-that-was-tampered-with&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">BadSignature: ...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"go\">SignatureExpired: Signature age 1677.3839159 &gt; 60 seconds</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">get_signed_cookie</span><span class=\"p\">(</span><span class=\"s2\">&quot;name&quot;</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">)</span>\n<span class=\"go\">False</span>\n</pre></div>\n</div>\n<p>See <a class=\"reference internal\" href=\"../../topics/signing/\"><span class=\"doc\">cryptographic signing</span></a> for more information.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.is_secure\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">is_secure</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.is_secure\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.is_secure\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the request is secure; that is, if it was made with\nHTTPS.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.accepts\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">accepts</span></code>(<em><span class=\"n\"><span class=\"pre\">mime_type</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.accepts\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.accepts\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the request <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept</span></code> header matches the <code class=\"docutils literal notranslate\"><span class=\"pre\">mime_type</span></code>\nargument:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">accepts</span><span class=\"p\">(</span><span class=\"s2\">&quot;text/html&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">True</span>\n</pre></div>\n</div>\n<p>Most browsers send <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept:</span> <span class=\"pre\">*/*</span></code> by default, so this would return\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> for all content types. Setting an explicit <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept</span></code> header in\nAPI requests can be useful for returning a different content type for those\nconsumers only. See <a class=\"reference internal\" href=\"../../topics/class-based-views/generic-editing/#content-negotiation-example\"><span class=\"std std-ref\">Content negotiation example</span></a> of using\n<code class=\"docutils literal notranslate\"><span class=\"pre\">accepts()</span></code> to return different content to API consumers.</p>\n<p>If a response varies depending on the content of the <code class=\"docutils literal notranslate\"><span class=\"pre\">Accept</span></code> header and\nyou are using some form of caching like Django\u2019s <a class=\"reference internal\" href=\"../middleware/#module-django.middleware.cache\" title=\"django.middleware.cache: Middleware for the site-wide cache.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">cache</span> <span class=\"pre\">middleware</span></code></a>, you should decorate the view with\n<a class=\"reference internal\" href=\"../../topics/http/decorators/#django.views.decorators.vary.vary_on_headers\" title=\"django.views.decorators.vary.vary_on_headers\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">vary_on_headers('Accept')</span></code></a> so that the responses are\nproperly cached.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.read\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">read</span></code>(<em><span class=\"n\"><span class=\"pre\">size</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.read\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.read\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.readline\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">readline</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.readline\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.readline\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.readlines\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">readlines</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.readlines\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.readlines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpRequest.__iter__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpRequest.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__iter__</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#HttpRequest.__iter__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpRequest.__iter__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Methods implementing a file-like interface for reading from an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> instance. This makes it possible to consume an incoming\nrequest in a streaming fashion. A common use-case would be to process a\nbig XML payload with an iterative parser without constructing a whole\nXML tree in memory.</p>\n<p>Given this standard interface, an <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> instance can be\npassed directly to an XML parser such as\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">ElementTree</span></code></a>:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">xml.etree.ElementTree</span> <span class=\"k\">as</span> <span class=\"nn\">ET</span>\n\n<span class=\"k\">for</span> <span class=\"n\">element</span> <span class=\"ow\">in</span> <span class=\"n\">ET</span><span class=\"o\">.</span><span class=\"n\">iterparse</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">process</span><span class=\"p\">(</span><span class=\"n\">element</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-querydict-objects\">\n<span id=\"querydict-objects\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> objects<a class=\"headerlink\" href=\"#querydict-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">QueryDict</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>In an <a class=\"reference internal\" href=\"#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> object, the <a class=\"reference internal\" href=\"#django.http.HttpRequest.GET\" title=\"django.http.HttpRequest.GET\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">GET</span></code></a> and\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.POST\" title=\"django.http.HttpRequest.POST\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">POST</span></code></a> attributes are instances of <code class=\"docutils literal notranslate\"><span class=\"pre\">django.http.QueryDict</span></code>,\na dictionary-like class customized to deal with multiple values for the same\nkey. This is necessary because some HTML form elements, notably\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;select</span> <span class=\"pre\">multiple&gt;</span></code>, pass multiple values for the same key.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code>s at <code class=\"docutils literal notranslate\"><span class=\"pre\">request.POST</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">request.GET</span></code> will be immutable\nwhen accessed in a normal request/response cycle. To get a mutable version you\nneed to use <a class=\"reference internal\" href=\"#django.http.QueryDict.copy\" title=\"django.http.QueryDict.copy\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QueryDict.copy()</span></code></a>.</p>\n<div class=\"section\" id=\"s-id1\">\n<span id=\"id1\"></span><h3>Methods<a class=\"headerlink\" href=\"#id1\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p><a class=\"reference internal\" href=\"#django.http.QueryDict\" title=\"django.http.QueryDict\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code></a> implements all the standard dictionary methods because it\u2019s\na subclass of dictionary. Exceptions are outlined here:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.__init__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__init__</span></code>(<em><span class=\"n\"><span class=\"pre\">query_string</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">mutable</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">encoding</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.__init__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instantiates a <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> object based on <code class=\"docutils literal notranslate\"><span class=\"pre\">query_string</span></code>.</p>\n<div class=\"doctest highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s1\">&#39;a=1&amp;a=2&amp;c=3&#39;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QueryDict: {&#39;a&#39;: [&#39;1&#39;, &#39;2&#39;], &#39;c&#39;: [&#39;3&#39;]}&gt;</span>\n</pre></div>\n</div>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">query_string</span></code> is not passed in, the resulting <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> will be\nempty (it will have no keys or values).</p>\n<p>Most <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code>s you encounter, and in particular those at\n<code class=\"docutils literal notranslate\"><span class=\"pre\">request.POST</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">request.GET</span></code>, will be immutable. If you are\ninstantiating one yourself, you can make it mutable by passing\n<code class=\"docutils literal notranslate\"><span class=\"pre\">mutable=True</span></code> to its <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__()</span></code>.</p>\n<p>Strings for setting both keys and values will be converted from <code class=\"docutils literal notranslate\"><span class=\"pre\">encoding</span></code>\nto <code class=\"docutils literal notranslate\"><span class=\"pre\">str</span></code>. If <code class=\"docutils literal notranslate\"><span class=\"pre\">encoding</span></code> is not set, it defaults to\n<a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.fromkeys\">\n<em class=\"property\"><span class=\"pre\">classmethod</span><span class=\"w\"> </span></em><code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">fromkeys</span></code>(<em><span class=\"n\"><span class=\"pre\">iterable</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">mutable</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">encoding</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.fromkeys\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.fromkeys\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Creates a new <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> with keys from <code class=\"docutils literal notranslate\"><span class=\"pre\">iterable</span></code> and each value\nequal to <code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">QueryDict</span><span class=\"o\">.</span><span class=\"n\">fromkeys</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s2\">&quot;val&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&lt;QueryDict: {&#39;a&#39;: [&#39;val&#39;, &#39;val&#39;], &#39;b&#39;: [&#39;val&#39;]}&gt;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.__getitem__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__getitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>)<a class=\"headerlink\" href=\"#django.http.QueryDict.__getitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value for the given key. If the key has more than one value,\nit returns the last value. Raises\n<code class=\"docutils literal notranslate\"><span class=\"pre\">django.utils.datastructures.MultiValueDictKeyError</span></code> if the key does not\nexist. (This is a subclass of Python\u2019s standard <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#KeyError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">KeyError</span></code></a>, so you can\nstick to catching <code class=\"docutils literal notranslate\"><span class=\"pre\">KeyError</span></code>.)</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.__setitem__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__setitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.__setitem__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.__setitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the given key to <code class=\"docutils literal notranslate\"><span class=\"pre\">[value]</span></code> (a list whose single element is\n<code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code>). Note that this, as other dictionary functions that have side\neffects, can only be called on a mutable <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> (such as one that\nwas created via <a class=\"reference internal\" href=\"#django.http.QueryDict.copy\" title=\"django.http.QueryDict.copy\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QueryDict.copy()</span></code></a>).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.__contains__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__contains__</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>)<a class=\"headerlink\" href=\"#django.http.QueryDict.__contains__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the given key is set. This lets you do, e.g., <code class=\"docutils literal notranslate\"><span class=\"pre\">if</span> <span class=\"pre\">&quot;foo&quot;</span>\n<span class=\"pre\">in</span> <span class=\"pre\">request.GET</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.get\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.http.QueryDict.get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Uses the same logic as <a class=\"reference internal\" href=\"#django.http.QueryDict.__getitem__\" title=\"django.http.QueryDict.__getitem__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code></a>, with a hook for returning a\ndefault value if the key doesn\u2019t exist.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.setdefault\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setdefault</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.setdefault\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.setdefault\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict.setdefault\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.setdefault()</span></code></a>, except it uses <a class=\"reference internal\" href=\"#django.http.QueryDict.__setitem__\" title=\"django.http.QueryDict.__setitem__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__setitem__()</span></code></a> internally.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.update\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">update</span></code>(<em><span class=\"n\"><span class=\"pre\">other_dict</span></span></em>)<a class=\"headerlink\" href=\"#django.http.QueryDict.update\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Takes either a <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> or a dictionary. Like <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict.update\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.update()</span></code></a>,\nexcept it <em>appends</em> to the current dictionary items rather than replacing\nthem. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;2&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">getlist</span><span class=\"p\">(</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;1&#39;, &#39;2&#39;]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">]</span>  <span class=\"c1\"># returns the last</span>\n<span class=\"go\">&#39;2&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.items\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">items</span></code>()<a class=\"headerlink\" href=\"#django.http.QueryDict.items\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict.items\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.items()</span></code></a>, except this uses the same last-value logic as\n<a class=\"reference internal\" href=\"#django.http.QueryDict.__getitem__\" title=\"django.http.QueryDict.__getitem__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code></a> and returns an iterator object instead of a view object.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&amp;a=2&amp;a=3&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">())</span>\n<span class=\"go\">[(&#39;a&#39;, &#39;3&#39;)]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.values\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">values</span></code>()<a class=\"headerlink\" href=\"#django.http.QueryDict.values\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict.values\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.values()</span></code></a>, except this uses the same last-value logic as\n<a class=\"reference internal\" href=\"#django.http.QueryDict.__getitem__\" title=\"django.http.QueryDict.__getitem__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__getitem__()</span></code></a> and returns an iterator instead of a view object. For\nexample:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&amp;a=2&amp;a=3&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>\n<span class=\"go\">[&#39;3&#39;]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<p>In addition, <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> has the following methods:</p>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.copy\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">copy</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.copy\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.copy\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a copy of the object using <a class=\"reference external\" href=\"https://docs.python.org/3/library/copy.html#copy.deepcopy\" title=\"(in Python v3.11)\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">copy.deepcopy()</span></code></a>. This copy will\nbe mutable even if the original was not.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.getlist\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">getlist</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.http.QueryDict.getlist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of the data with the requested key. Returns an empty list if\nthe key doesn\u2019t exist and <code class=\"docutils literal notranslate\"><span class=\"pre\">default</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code>. It\u2019s guaranteed to\nreturn a list unless the default value provided isn\u2019t a list.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.setlist\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setlist</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">list_</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.setlist\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.setlist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the given key to <code class=\"docutils literal notranslate\"><span class=\"pre\">list_</span></code> (unlike <a class=\"reference internal\" href=\"#django.http.QueryDict.__setitem__\" title=\"django.http.QueryDict.__setitem__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">__setitem__()</span></code></a>).</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.appendlist\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">appendlist</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">item</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.appendlist\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.appendlist\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Appends an item to the internal list associated with key.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.setlistdefault\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setlistdefault</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">default_list</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.setlistdefault\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.setlistdefault\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.http.QueryDict.setdefault\" title=\"django.http.QueryDict.setdefault\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">setdefault()</span></code></a>, except it takes a list of values instead of a\nsingle value.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.lists\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">lists</span></code>()<a class=\"headerlink\" href=\"#django.http.QueryDict.lists\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.http.QueryDict.items\" title=\"django.http.QueryDict.items\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">items()</span></code></a>, except it includes all values, as a list, for each\nmember of the dictionary. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&amp;a=2&amp;a=3&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">lists</span><span class=\"p\">()</span>\n<span class=\"go\">[(&#39;a&#39;, [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;])]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.pop\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">pop</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.pop\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.pop\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a list of values for the given key and removes them from the\ndictionary. Raises <code class=\"docutils literal notranslate\"><span class=\"pre\">KeyError</span></code> if the key does not exist. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&amp;a=2&amp;a=3&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">(</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">[&#39;1&#39;, &#39;2&#39;, &#39;3&#39;]</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.popitem\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">popitem</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.popitem\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.popitem\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Removes an arbitrary member of the dictionary (since there\u2019s no concept\nof ordering), and returns a two value tuple containing the key and a list\nof all values for the key. Raises <code class=\"docutils literal notranslate\"><span class=\"pre\">KeyError</span></code> when called on an empty\ndictionary. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&amp;a=2&amp;a=3&quot;</span><span class=\"p\">,</span> <span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">popitem</span><span class=\"p\">()</span>\n<span class=\"go\">(&#39;a&#39;, [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;])</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.dict\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">dict</span></code>()<a class=\"headerlink\" href=\"#django.http.QueryDict.dict\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> representation of <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code>. For every (key, list)\npair in <code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> will have (key, item), where item is one\nelement of the list, using the same logic as <a class=\"reference internal\" href=\"#django.http.QueryDict.__getitem__\" title=\"django.http.QueryDict.__getitem__\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">QueryDict.__getitem__()</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=1&amp;a=3&amp;a=5&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">dict</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;a&#39;: &#39;5&#39;}</span>\n</pre></div>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.QueryDict.urlencode\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">QueryDict.</span></code><code class=\"sig-name descname\"><span class=\"pre\">urlencode</span></code>(<em><span class=\"n\"><span class=\"pre\">safe</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/request/#QueryDict.urlencode\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.QueryDict.urlencode\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns a string of the data in query string format. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"s2\">&quot;a=2&amp;b=3&amp;b=5&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">urlencode</span><span class=\"p\">()</span>\n<span class=\"go\">&#39;a=2&amp;b=3&amp;b=5&#39;</span>\n</pre></div>\n</div>\n<p>Use the <code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code> parameter to pass characters which don\u2019t require encoding.\nFor example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">QueryDict</span><span class=\"p\">(</span><span class=\"n\">mutable</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"p\">[</span><span class=\"s2\">&quot;next&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;/a&amp;b/&quot;</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">urlencode</span><span class=\"p\">(</span><span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">)</span>\n<span class=\"go\">&#39;next=/a%26b/&#39;</span>\n</pre></div>\n</div>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-httpresponse-objects\">\n<span id=\"httpresponse-objects\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> objects<a class=\"headerlink\" href=\"#httpresponse-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponse</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>In contrast to <a class=\"reference internal\" href=\"#django.http.HttpRequest\" title=\"django.http.HttpRequest\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code></a> objects, which are created automatically by\nDjango, <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> objects are your responsibility. Each view you\nwrite is responsible for instantiating, populating, and returning an\n<a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>.</p>\n<p>The <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> class lives in the <a class=\"reference internal\" href=\"#module-django.http\" title=\"django.http: Classes dealing with HTTP requests and responses.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.http</span></code></a> module.</p>\n<div class=\"section\" id=\"s-usage\">\n<span id=\"usage\"></span><h3>Usage<a class=\"headerlink\" href=\"#usage\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<div class=\"section\" id=\"s-passing-strings\">\n<span id=\"passing-strings\"></span><h4>Passing strings<a class=\"headerlink\" href=\"#passing-strings\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Typical usage is to pass the contents of the page, as a string, bytestring,\nor <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#memoryview\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">memoryview</span></code></a>, to the <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> constructor:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">HttpResponse</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Here&#39;s the text of the web page.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"s2\">&quot;Text only, please.&quot;</span><span class=\"p\">,</span> <span class=\"n\">content_type</span><span class=\"o\">=</span><span class=\"s2\">&quot;text/plain&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Bytestrings are also accepted.&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"nb\">memoryview</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">&quot;Memoryview as well.&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>But if you want to add content incrementally, you can use <code class=\"docutils literal notranslate\"><span class=\"pre\">response</span></code> as a\nfile-like object:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;p&gt;Here&#39;s the text of the web page.&lt;/p&gt;&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">&quot;&lt;p&gt;Here&#39;s another paragraph.&lt;/p&gt;&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n<div class=\"section\" id=\"s-passing-iterators\">\n<span id=\"passing-iterators\"></span><h4>Passing iterators<a class=\"headerlink\" href=\"#passing-iterators\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>Finally, you can pass <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> an iterator rather than strings.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> will consume the iterator immediately, store its content as a\nstring, and discard it. Objects with a <code class=\"docutils literal notranslate\"><span class=\"pre\">close()</span></code> method such as files and\ngenerators are immediately closed.</p>\n<p>If you need the response to be streamed from the iterator to the client, you\nmust use the <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> class instead.</p>\n</div>\n<div class=\"section\" id=\"s-setting-header-fields\">\n<span id=\"s-id2\"></span><span id=\"setting-header-fields\"></span><span id=\"id2\"></span><h4>Setting header fields<a class=\"headerlink\" href=\"#setting-header-fields\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To set or remove a header field in your response, use\n<a class=\"reference internal\" href=\"#django.http.HttpResponse.headers\" title=\"django.http.HttpResponse.headers\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.headers</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">del</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"p\">[</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>You can also manipulate headers by treating your response like a dictionary:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">120</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">del</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This proxies to <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse.headers</span></code>, and is the original interface offered\nby <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code>.</p>\n<p>When using this interface, unlike a dictionary, <code class=\"docutils literal notranslate\"><span class=\"pre\">del</span></code> doesn\u2019t raise\n<code class=\"docutils literal notranslate\"><span class=\"pre\">KeyError</span></code> if the header field doesn\u2019t exist.</p>\n<p>You can also set headers on instantiation:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Age&quot;</span><span class=\"p\">:</span> <span class=\"mi\">120</span><span class=\"p\">})</span>\n</pre></div>\n</div>\n<p>For setting the <code class=\"docutils literal notranslate\"><span class=\"pre\">Cache-Control</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Vary</span></code> header fields, it is recommended\nto use the <a class=\"reference internal\" href=\"../utils/#django.utils.cache.patch_cache_control\" title=\"django.utils.cache.patch_cache_control\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">patch_cache_control()</span></code></a> and\n<a class=\"reference internal\" href=\"../utils/#django.utils.cache.patch_vary_headers\" title=\"django.utils.cache.patch_vary_headers\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">patch_vary_headers()</span></code></a> methods from\n<a class=\"reference internal\" href=\"../utils/#module-django.utils.cache\" title=\"django.utils.cache: Helper functions for controlling caching.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.utils.cache</span></code></a>, since these fields can have multiple, comma-separated\nvalues. The \u201cpatch\u201d methods ensure that other values, e.g. added by a\nmiddleware, are not removed.</p>\n<p>HTTP header fields cannot contain newlines. An attempt to set a header field\ncontaining a newline character (CR or LF) will raise <code class=\"docutils literal notranslate\"><span class=\"pre\">BadHeaderError</span></code></p>\n</div>\n<div class=\"section\" id=\"s-telling-the-browser-to-treat-the-response-as-a-file-attachment\">\n<span id=\"telling-the-browser-to-treat-the-response-as-a-file-attachment\"></span><h4>Telling the browser to treat the response as a file attachment<a class=\"headerlink\" href=\"#telling-the-browser-to-treat-the-response-as-a-file-attachment\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>To tell the browser to treat the response as a file attachment, set the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code> headers. For example, this is how\nyou might return a Microsoft Excel spreadsheet:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">HttpResponse</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">my_data</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Content-Type&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;application/vnd.ms-excel&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;Content-Disposition&quot;</span><span class=\"p\">:</span> <span class=\"s1\">&#39;attachment; filename=&quot;foo.xls&quot;&#39;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">},</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>There\u2019s nothing Django-specific about the <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code> header, but\nit\u2019s easy to forget the syntax, so we\u2019ve included it here.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-id3\">\n<span id=\"id3\"></span><h3>Attributes<a class=\"headerlink\" href=\"#id3\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.content\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">content</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.content\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A bytestring representing the content, encoded from a string if necessary.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.headers\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">headers</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.headers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A case insensitive, dict-like object that provides an interface to all\nHTTP headers on the response. See <a class=\"reference internal\" href=\"#setting-header-fields\"><span class=\"std std-ref\">Setting header fields</span></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.charset\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">charset</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.charset\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>A string denoting the charset in which the response will be encoded. If not\ngiven at <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> instantiation time, it will be extracted from\n<code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> and if that is unsuccessful, the\n<a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a> setting will be used.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.status_code\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">status_code</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.status_code\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The <span class=\"target\" id=\"index-3\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-15\"><strong>HTTP status code</strong></a> for the response.</p>\n<p>Unless <a class=\"reference internal\" href=\"#django.http.HttpResponse.reason_phrase\" title=\"django.http.HttpResponse.reason_phrase\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code></a> is explicitly set, modifying the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">status_code</span></code> outside the constructor will also modify the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.reason_phrase\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">reason_phrase</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.reason_phrase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The HTTP reason phrase for the response. It uses the <span class=\"target\" id=\"index-4\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-15.1\"><strong>HTTP standard\u2019s</strong></a> default reason phrases.</p>\n<p>Unless explicitly set, <code class=\"docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code> is determined by the value of\n<a class=\"reference internal\" href=\"#django.http.HttpResponse.status_code\" title=\"django.http.HttpResponse.status_code\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">status_code</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.streaming\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">streaming</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.streaming\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is always <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<p>This attribute exists so middleware can treat streaming responses\ndifferently from regular responses.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.closed\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">closed</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponse.closed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> if the response has been closed.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-id4\">\n<span id=\"id4\"></span><h3>Methods<a class=\"headerlink\" href=\"#id4\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.__init__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__init__</span></code>(<em><span class=\"n\"><span class=\"pre\">content</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">b''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">content_type</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">status</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">200</span></span></em>, <em><span class=\"n\"><span class=\"pre\">reason</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">charset</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">headers</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse.__init__\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse.__init__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Instantiates an <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> object with the given page content,\ncontent type, and headers.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">content</span></code> is most commonly an iterator, bytestring, <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#memoryview\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">memoryview</span></code></a>,\nor string. Other types will be converted to a bytestring by encoding their\nstring representation. Iterators should return strings or bytestrings and\nthose will be joined together to form the content of the response.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code> is the MIME type optionally completed by a character set\nencoding and is used to fill the HTTP <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header. If not\nspecified, it is formed by <code class=\"docutils literal notranslate\"><span class=\"pre\">'text/html'</span></code> and the\n<a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a> settings, by default:\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;text/html;</span> <span class=\"pre\">charset=utf-8&quot;</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">status</span></code> is the <span class=\"target\" id=\"index-5\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-15\"><strong>HTTP status code</strong></a> for the\nresponse. You can use Python\u2019s <a class=\"reference external\" href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">http.HTTPStatus</span></code></a> for meaningful\naliases, such as <code class=\"docutils literal notranslate\"><span class=\"pre\">HTTPStatus.NO_CONTENT</span></code>.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">reason</span></code> is the HTTP response phrase. If not provided, a default phrase\nwill be used.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">charset</span></code> is the charset in which the response will be encoded. If not\ngiven it will be extracted from <code class=\"docutils literal notranslate\"><span class=\"pre\">content_type</span></code>, and if that\nis unsuccessful, the <a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_CHARSET\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_CHARSET</span></code></a> setting will be used.</p>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">headers</span></code> is a <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">dict</span></code></a> of HTTP headers for the response.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.__setitem__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__setitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">header</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.__setitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets the given header name to the given value. Both <code class=\"docutils literal notranslate\"><span class=\"pre\">header</span></code> and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">value</span></code> should be strings.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.__delitem__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__delitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">header</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.__delitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deletes the header with the given name. Fails silently if the header\ndoesn\u2019t exist. Case-insensitive.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.__getitem__\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">__getitem__</span></code>(<em><span class=\"n\"><span class=\"pre\">header</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.__getitem__\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value for the given header name. Case-insensitive.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.get\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get</span></code>(<em><span class=\"n\"><span class=\"pre\">header</span></span></em>, <em><span class=\"n\"><span class=\"pre\">alternate</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.get\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value for the given header, or an <code class=\"docutils literal notranslate\"><span class=\"pre\">alternate</span></code> if the header\ndoesn\u2019t exist.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.has_header\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">has_header</span></code>(<em><span class=\"n\"><span class=\"pre\">header</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.has_header\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> based on a case-insensitive check for a\nheader with the given name.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.items\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">items</span></code>()<a class=\"headerlink\" href=\"#django.http.HttpResponse.items\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Acts like <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#dict.items\" title=\"(in Python v3.11)\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">dict.items()</span></code></a> for HTTP headers on the response.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.setdefault\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">setdefault</span></code>(<em><span class=\"n\"><span class=\"pre\">header</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.setdefault\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets a header unless it has already been set.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.set_cookie\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">set_cookie</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_age</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expires</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">path</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'/'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">domain</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">httponly</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">samesite</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.set_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Sets a cookie. The parameters are the same as in the\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Morsel</span></code></a> cookie object in the Python standard library.</p>\n<ul>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code> should be a <a class=\"reference external\" href=\"https://docs.python.org/3/library/datetime.html#datetime.timedelta\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">timedelta</span></code></a> object, an integer\nnumber of seconds, or <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> (default) if the cookie should last only\nas long as the client\u2019s browser session. If <code class=\"docutils literal notranslate\"><span class=\"pre\">expires</span></code> is not specified,\nit will be calculated.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">expires</span></code> should either be a string in the format\n<code class=\"docutils literal notranslate\"><span class=\"pre\">&quot;Wdy,</span> <span class=\"pre\">DD-Mon-YY</span> <span class=\"pre\">HH:MM:SS</span> <span class=\"pre\">GMT&quot;</span></code> or a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime.datetime</span></code> object\nin UTC. If <code class=\"docutils literal notranslate\"><span class=\"pre\">expires</span></code> is a <code class=\"docutils literal notranslate\"><span class=\"pre\">datetime</span></code> object, the <code class=\"docutils literal notranslate\"><span class=\"pre\">max_age</span></code>\nwill be calculated.</p>\n</li>\n<li><p class=\"first\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> if you want to set a cross-domain cookie. For example,\n<code class=\"docutils literal notranslate\"><span class=\"pre\">domain=&quot;example.com&quot;</span></code> will set a cookie that is readable by the\ndomains www.example.com, blog.example.com, etc. Otherwise, a cookie will\nonly be readable by the domain that set it.</p>\n</li>\n<li><p class=\"first\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">secure=True</span></code> if you want the cookie to be only sent to the server\nwhen a request is made with the <code class=\"docutils literal notranslate\"><span class=\"pre\">https</span></code> scheme.</p>\n</li>\n<li><p class=\"first\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">httponly=True</span></code> if you want to prevent client-side\nJavaScript from having access to the cookie.</p>\n<p><a class=\"reference external\" href=\"https://owasp.org/www-community/HttpOnly\">HttpOnly</a> is a flag included in a Set-Cookie HTTP response header. It\u2019s\npart of the <span class=\"target\" id=\"index-6\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc6265.html#section-4.1.2.6\"><strong>RFC 6265</strong></a> standard for cookies\nand can be a useful way to mitigate the risk of a client-side script\naccessing the protected cookie data.</p>\n</li>\n<li><p class=\"first\">Use <code class=\"docutils literal notranslate\"><span class=\"pre\">samesite='Strict'</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">samesite='Lax'</span></code> to tell the browser not\nto send this cookie when performing a cross-origin request. <a class=\"reference external\" href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite\">SameSite</a>\nisn\u2019t supported by all browsers, so it\u2019s not a replacement for Django\u2019s\nCSRF protection, but rather a defense in depth measure.</p>\n<p>Use <code class=\"docutils literal notranslate\"><span class=\"pre\">samesite='None'</span></code> (string) to explicitly state that this cookie is\nsent with all same-site and cross-site requests.</p>\n</li>\n</ul>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\"><span class=\"target\" id=\"index-7\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc6265.html#section-6.1\"><strong>RFC 6265</strong></a> states that user agents should\nsupport cookies of at least 4096 bytes. For many browsers this is also\nthe maximum size. Django will not raise an exception if there\u2019s an\nattempt to store a cookie of more than 4096 bytes, but many browsers\nwill not set the cookie correctly.</p>\n</div>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.set_signed_cookie\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">set_signed_cookie</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">value</span></span></em>, <em><span class=\"n\"><span class=\"pre\">salt</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"n\"><span class=\"pre\">max_age</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">expires</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">path</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'/'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">domain</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">secure</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">httponly</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">samesite</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.set_signed_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.http.HttpResponse.set_cookie\" title=\"django.http.HttpResponse.set_cookie\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">set_cookie()</span></code></a>, but\n<a class=\"reference internal\" href=\"../../topics/signing/\"><span class=\"doc\">cryptographic signing</span></a> the cookie before setting\nit. Use in conjunction with <a class=\"reference internal\" href=\"#django.http.HttpRequest.get_signed_cookie\" title=\"django.http.HttpRequest.get_signed_cookie\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.get_signed_cookie()</span></code></a>.\nYou can use the optional <code class=\"docutils literal notranslate\"><span class=\"pre\">salt</span></code> argument for added key strength, but\nyou will need to remember to pass it to the corresponding\n<a class=\"reference internal\" href=\"#django.http.HttpRequest.get_signed_cookie\" title=\"django.http.HttpRequest.get_signed_cookie\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">HttpRequest.get_signed_cookie()</span></code></a> call.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.delete_cookie\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">delete_cookie</span></code>(<em><span class=\"n\"><span class=\"pre\">key</span></span></em>, <em><span class=\"n\"><span class=\"pre\">path</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">'/'</span></span></em>, <em><span class=\"n\"><span class=\"pre\">domain</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"n\"><span class=\"pre\">samesite</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>)<a class=\"headerlink\" href=\"#django.http.HttpResponse.delete_cookie\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Deletes the cookie with the given key. Fails silently if the key doesn\u2019t\nexist.</p>\n<p>Due to the way cookies work, <code class=\"docutils literal notranslate\"><span class=\"pre\">path</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">domain</span></code> should be the same\nvalues you used in <code class=\"docutils literal notranslate\"><span class=\"pre\">set_cookie()</span></code> \u2013 otherwise the cookie may not be\ndeleted.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.close\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">close</span></code>()<a class=\"headerlink\" href=\"#django.http.HttpResponse.close\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This method is called at the end of the request directly by the WSGI\nserver.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.write\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">write</span></code>(<em><span class=\"n\"><span class=\"pre\">content</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse.write\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse.write\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This method makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a file-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.flush\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">flush</span></code>()<a class=\"headerlink\" href=\"#django.http.HttpResponse.flush\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This method makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a file-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.tell\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">tell</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse.tell\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse.tell\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This method makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a file-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.getvalue\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">getvalue</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse.getvalue\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse.getvalue\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the value of <a class=\"reference internal\" href=\"#django.http.HttpResponse.content\" title=\"django.http.HttpResponse.content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.content</span></code></a>. This method makes\nan <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a stream-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.readable\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">readable</span></code>()<a class=\"headerlink\" href=\"#django.http.HttpResponse.readable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Always <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. This method makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a\nstream-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.seekable\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">seekable</span></code>()<a class=\"headerlink\" href=\"#django.http.HttpResponse.seekable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Always <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. This method makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a\nstream-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.writable\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">writable</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse.writable\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse.writable\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Always <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. This method makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a\nstream-like object.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponse.writelines\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">HttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">writelines</span></code>(<em><span class=\"n\"><span class=\"pre\">lines</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponse.writelines\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponse.writelines\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Writes a list of lines to the response. Line separators are not added. This\nmethod makes an <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> instance a stream-like object.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-httpresponse-subclasses\">\n<span id=\"s-ref-httpresponse-subclasses\"></span><span id=\"httpresponse-subclasses\"></span><span id=\"ref-httpresponse-subclasses\"></span><h3><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> subclasses<a class=\"headerlink\" href=\"#httpresponse-subclasses\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Django includes a number of <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> subclasses that handle different\ntypes of HTTP responses. Like <code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code>, these subclasses live in\n<a class=\"reference internal\" href=\"#module-django.http\" title=\"django.http: Classes dealing with HTTP requests and responses.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.http</span></code></a>.</p>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseRedirect\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseRedirect</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseRedirect\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseRedirect\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The first argument to the constructor is required \u2013 the path to redirect\nto. This can be a fully qualified URL\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'https://www.yahoo.com/search/'</span></code>), an absolute path with no domain\n(e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'/search/'</span></code>), or even a relative path (e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'search/'</span></code>). In that\nlast case, the client browser will reconstruct the full URL itself\naccording to the current path. See <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> for other optional\nconstructor arguments. Note that this returns an HTTP status code 302.</p>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseRedirect.url\">\n<code class=\"sig-name descname\"><span class=\"pre\">url</span></code><a class=\"headerlink\" href=\"#django.http.HttpResponseRedirect.url\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This read-only attribute represents the URL the response will redirect\nto (equivalent to the <code class=\"docutils literal notranslate\"><span class=\"pre\">Location</span></code> response header).</p>\n</dd></dl>\n\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponsePermanentRedirect\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponsePermanentRedirect</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponsePermanentRedirect\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponsePermanentRedirect\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.http.HttpResponseRedirect\" title=\"django.http.HttpResponseRedirect\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseRedirect</span></code></a>, but it returns a permanent redirect\n(HTTP status code 301) instead of a \u201cfound\u201d redirect (status code 302).</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseNotModified\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseNotModified</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseNotModified\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseNotModified\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The constructor doesn\u2019t take any arguments and no content should be added\nto this response. Use this to designate that a page hasn\u2019t been modified\nsince the user\u2019s last request (status code 304).</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseBadRequest\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseBadRequest</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseBadRequest\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseBadRequest\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Acts just like <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> but uses a 400 status code.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseNotFound\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseNotFound</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseNotFound\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseNotFound\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Acts just like <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> but uses a 404 status code.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseForbidden\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseForbidden</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseForbidden\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseForbidden\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Acts just like <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> but uses a 403 status code.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseNotAllowed\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseNotAllowed</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseNotAllowed\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseNotAllowed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Like <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>, but uses a 405 status code. The first argument\nto the constructor is required: a list of permitted methods (e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">['GET',</span> <span class=\"pre\">'POST']</span></code>).</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseGone\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseGone</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseGone\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseGone\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Acts just like <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> but uses a 410 status code.</p>\n</dd></dl>\n\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseServerError\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseServerError</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseServerError\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseServerError\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Acts just like <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> but uses a 500 status code.</p>\n</dd></dl>\n\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">If a custom subclass of <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> implements a <code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code>\nmethod, Django will treat it as emulating a\n<a class=\"reference internal\" href=\"../template-response/#django.template.response.SimpleTemplateResponse\" title=\"django.template.response.SimpleTemplateResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">SimpleTemplateResponse</span></code></a>, and the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">render</span></code> method must itself return a valid response object.</p>\n</div>\n<div class=\"section\" id=\"s-custom-response-classes\">\n<span id=\"custom-response-classes\"></span><h4>Custom response classes<a class=\"headerlink\" href=\"#custom-response-classes\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you find yourself needing a response class that Django doesn\u2019t provide, you\ncan create it with the help of <a class=\"reference external\" href=\"https://docs.python.org/3/library/http.html#http.HTTPStatus\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">http.HTTPStatus</span></code></a>. For example:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"go\">from http import HTTPStatus</span>\n<span class=\"go\">from django.http import HttpResponse</span>\n\n<span class=\"go\">class HttpResponseNoContent(HttpResponse):</span>\n<span class=\"go\">    status_code = HTTPStatus.NO_CONTENT</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-jsonresponse-objects\">\n<span id=\"jsonresponse-objects\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">JsonResponse</span></code> objects<a class=\"headerlink\" href=\"#jsonresponse-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.JsonResponse\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">JsonResponse</span></code>(<em><span class=\"n\"><span class=\"pre\">data</span></span></em>, <em><span class=\"n\"><span class=\"pre\">encoder</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">DjangoJSONEncoder</span></span></em>, <em><span class=\"n\"><span class=\"pre\">safe</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>, <em><span class=\"n\"><span class=\"pre\">json_dumps_params</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">None</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/response/#JsonResponse\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.JsonResponse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> subclass that helps to create a JSON-encoded\nresponse. It inherits most behavior from its superclass with a couple\ndifferences:</p>\n<p>Its default <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header is set to <em class=\"mimetype\">application/json</em>.</p>\n<p>The first parameter, <code class=\"docutils literal notranslate\"><span class=\"pre\">data</span></code>, should be a <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> instance. If the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code> parameter is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> (see below) it can be any\nJSON-serializable object.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">encoder</span></code>, which defaults to\n<a class=\"reference internal\" href=\"../../topics/serialization/#django.core.serializers.json.DjangoJSONEncoder\" title=\"django.core.serializers.json.DjangoJSONEncoder\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">django.core.serializers.json.DjangoJSONEncoder</span></code></a>, will be used to\nserialize the data. See <a class=\"reference internal\" href=\"../../topics/serialization/#serialization-formats-json\"><span class=\"std std-ref\">JSON serialization</span></a> for more details about this serializer.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code> boolean parameter defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>. If it\u2019s set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, any object can be passed for serialization (otherwise only\n<code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> instances are allowed). If <code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> and a non-<code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code>\nobject is passed as the first argument, a <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#TypeError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TypeError</span></code></a> will be raised.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">json_dumps_params</span></code> parameter is a dictionary of keyword arguments\nto pass to the <code class=\"docutils literal notranslate\"><span class=\"pre\">json.dumps()</span></code> call used to generate the response.</p>\n</dd></dl>\n\n<div class=\"section\" id=\"s-id5\">\n<span id=\"id5\"></span><h3>Usage<a class=\"headerlink\" href=\"#id5\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Typical usage could look like:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">JsonResponse</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">JsonResponse</span><span class=\"p\">({</span><span class=\"s2\">&quot;foo&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;bar&quot;</span><span class=\"p\">})</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span>\n<span class=\"go\">b&#39;{&quot;foo&quot;: &quot;bar&quot;}&#39;</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-serializing-non-dictionary-objects\">\n<span id=\"serializing-non-dictionary-objects\"></span><h4>Serializing non-dictionary objects<a class=\"headerlink\" href=\"#serializing-non-dictionary-objects\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>In order to serialize objects other than <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> you must set the <code class=\"docutils literal notranslate\"><span class=\"pre\">safe</span></code>\nparameter to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">JsonResponse</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">safe</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<p>Without passing <code class=\"docutils literal notranslate\"><span class=\"pre\">safe=False</span></code>, a <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#TypeError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">TypeError</span></code></a> will be raised.</p>\n<p>Note that an API based on <code class=\"docutils literal notranslate\"><span class=\"pre\">dict</span></code> objects is more extensible, flexible, and\nmakes it easier to maintain forwards compatibility. Therefore, you should avoid\nusing non-dict objects in JSON-encoded response.</p>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Before the <a class=\"reference external\" href=\"https://262.ecma-international.org/5.1/#sec-11.1.4\">5th edition of ECMAScript</a> it was possible to\npoison the JavaScript <code class=\"docutils literal notranslate\"><span class=\"pre\">Array</span></code> constructor. For this reason, Django does\nnot allow passing non-dict objects to the\n<a class=\"reference internal\" href=\"#django.http.JsonResponse\" title=\"django.http.JsonResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">JsonResponse</span></code></a> constructor by default.  However, most\nmodern browsers implement ECMAScript 5 which removes this attack vector.\nTherefore it is possible to disable this security precaution.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-changing-the-default-json-encoder\">\n<span id=\"changing-the-default-json-encoder\"></span><h4>Changing the default JSON encoder<a class=\"headerlink\" href=\"#changing-the-default-json-encoder\" title=\"Permalink to this headline\">\u00b6</a></h4>\n<p>If you need to use a different JSON encoder class you can pass the <code class=\"docutils literal notranslate\"><span class=\"pre\">encoder</span></code>\nparameter to the constructor method:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">JsonResponse</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">encoder</span><span class=\"o\">=</span><span class=\"n\">MyJSONEncoder</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-streaminghttpresponse-objects\">\n<span id=\"s-httpresponse-streaming\"></span><span id=\"streaminghttpresponse-objects\"></span><span id=\"httpresponse-streaming\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code> objects<a class=\"headerlink\" href=\"#streaminghttpresponse-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.StreamingHttpResponse\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">StreamingHttpResponse</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#StreamingHttpResponse\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.StreamingHttpResponse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> class is used to stream a response from\nDjango to the browser.</p>\n<div class=\"admonition-advanced-usage admonition\">\n<p class=\"first admonition-title\">Advanced usage</p>\n<p><a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> is somewhat advanced, in that it is\nimportant to know whether you\u2019ll be serving your application synchronously\nunder WSGI or asynchronously under ASGI, and adjust your usage\nappropriately.</p>\n<p class=\"last\">Please read these notes with care.</p>\n</div>\n<p>An example usage of <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> under WSGI is streaming\ncontent when generating the response would take too long or uses too much\nmemory. For instance, it\u2019s useful for <a class=\"reference internal\" href=\"../../howto/outputting-csv/#streaming-csv-files\"><span class=\"std std-ref\">generating large CSV files</span></a>.</p>\n<p>There are performance considerations when doing this, though. Django, under\nWSGI, is designed for short-lived requests. Streaming responses will tie a\nworker process for the entire duration of the response. This may result in poor\nperformance.</p>\n<p>Generally speaking, you would perform expensive tasks outside of the\nrequest-response cycle, rather than resorting to a streamed response.</p>\n<p>When serving under ASGI, however, a <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> need not\nstop other requests from being served whilst waiting for I/O. This opens up\nthe possibility of long-lived requests for streaming content and implementing\npatterns such as long-polling, and server-sent events.</p>\n<p>Even under ASGI note, <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> should only be used in\nsituations where it is absolutely required that the whole content isn\u2019t\niterated before transferring the data to the client. Because the content can\u2019t\nbe accessed, many middleware can\u2019t function normally. For example the <code class=\"docutils literal notranslate\"><span class=\"pre\">ETag</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Length</span></code> headers can\u2019t be generated for streaming responses.</p>\n<p>The <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> is not a subclass of <a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a>,\nbecause it features a slightly different API. However, it is almost identical,\nwith the following notable differences:</p>\n<ul>\n<li><p class=\"first\">It should be given an iterator that yields bytestrings, <a class=\"reference external\" href=\"https://docs.python.org/3/library/stdtypes.html#memoryview\" title=\"(in Python v3.11)\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">memoryview</span></code></a>,\nor strings as content. When serving under WSGI, this should be a sync\niterator. When serving under ASGI, then it should be an async iterator.</p>\n</li>\n<li><p class=\"first\">You cannot access its content, except by iterating the response object\nitself. This should only occur when the response is returned to the client:\nyou should not iterate the response yourself.</p>\n<p>Under WSGI the response will be iterated synchronously. Under ASGI the\nresponse will be iterated asynchronously. (This is why the iterator type must\nmatch the protocol you\u2019re using.)</p>\n<p>To avoid a crash, an incorrect iterator type will be mapped to the correct\ntype during iteration, and a warning will be raised, but in order to do this\nthe iterator must be fully-consumed, which defeats the purpose of using a\n<a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a> at all.</p>\n</li>\n<li><p class=\"first\">It has no <code class=\"docutils literal notranslate\"><span class=\"pre\">content</span></code> attribute. Instead, it has a\n<a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse.streaming_content\" title=\"django.http.StreamingHttpResponse.streaming_content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">streaming_content</span></code></a> attribute. This can be used\nin middleware to wrap the response iterable, but should not be consumed.</p>\n</li>\n<li><p class=\"first\">You cannot use the file-like object <code class=\"docutils literal notranslate\"><span class=\"pre\">tell()</span></code> or <code class=\"docutils literal notranslate\"><span class=\"pre\">write()</span></code> methods.\nDoing so will raise an exception.</p>\n</li>\n</ul>\n<p>The <a class=\"reference internal\" href=\"#django.http.HttpResponseBase\" title=\"django.http.HttpResponseBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseBase</span></code></a> base class is common between\n<a class=\"reference internal\" href=\"#django.http.HttpResponse\" title=\"django.http.HttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code></a> and <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a>.</p>\n<div class=\"versionchanged\">\n<span class=\"title\">Changed in Django 4.2:</span> <p>Support for asynchronous iteration was added.</p>\n</div>\n<div class=\"section\" id=\"s-id6\">\n<span id=\"id6\"></span><h3>Attributes<a class=\"headerlink\" href=\"#id6\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.StreamingHttpResponse.streaming_content\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">StreamingHttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">streaming_content</span></code><a class=\"headerlink\" href=\"#django.http.StreamingHttpResponse.streaming_content\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>An iterator of the response content, bytestring encoded according to\n<a class=\"reference internal\" href=\"#django.http.HttpResponse.charset\" title=\"django.http.HttpResponse.charset\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">HttpResponse.charset</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.StreamingHttpResponse.status_code\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">StreamingHttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">status_code</span></code><a class=\"headerlink\" href=\"#django.http.StreamingHttpResponse.status_code\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The <span class=\"target\" id=\"index-8\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-15\"><strong>HTTP status code</strong></a> for the response.</p>\n<p>Unless <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse.reason_phrase\" title=\"django.http.StreamingHttpResponse.reason_phrase\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code></a> is explicitly set, modifying the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">status_code</span></code> outside the constructor will also modify the value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.StreamingHttpResponse.reason_phrase\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">StreamingHttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">reason_phrase</span></code><a class=\"headerlink\" href=\"#django.http.StreamingHttpResponse.reason_phrase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The HTTP reason phrase for the response. It uses the <span class=\"target\" id=\"index-9\"></span><a class=\"rfc reference external\" href=\"https://datatracker.ietf.org/doc/html/rfc9110.html#section-15.1\"><strong>HTTP standard\u2019s</strong></a> default reason phrases.</p>\n<p>Unless explicitly set, <code class=\"docutils literal notranslate\"><span class=\"pre\">reason_phrase</span></code> is determined by the value of\n<a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse.status_code\" title=\"django.http.StreamingHttpResponse.status_code\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">status_code</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.StreamingHttpResponse.streaming\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">StreamingHttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">streaming</span></code><a class=\"headerlink\" href=\"#django.http.StreamingHttpResponse.streaming\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This is always <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.http.StreamingHttpResponse.is_async\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">StreamingHttpResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">is_async</span></code><a class=\"headerlink\" href=\"#django.http.StreamingHttpResponse.is_async\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><div class=\"versionadded\">\n<span class=\"title\">New in Django 4.2.</span> </div>\n<p>Boolean indicating whether <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse.streaming_content\" title=\"django.http.StreamingHttpResponse.streaming_content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse.streaming_content</span></code></a>\nis an asynchronous iterator or not.</p>\n<p>This is useful for middleware needing to wrap\n<a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse.streaming_content\" title=\"django.http.StreamingHttpResponse.streaming_content\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse.streaming_content</span></code></a>.</p>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-fileresponse-objects\">\n<span id=\"fileresponse-objects\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code> objects<a class=\"headerlink\" href=\"#fileresponse-objects\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.FileResponse\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">FileResponse</span></code>(<em><span class=\"n\"><span class=\"pre\">open_file</span></span></em>, <em><span class=\"n\"><span class=\"pre\">as_attachment</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">filename</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">''</span></span></em>, <em><span class=\"o\"><span class=\"pre\">**</span></span><span class=\"n\"><span class=\"pre\">kwargs</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/response/#FileResponse\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.FileResponse\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p><a class=\"reference internal\" href=\"#django.http.FileResponse\" title=\"django.http.FileResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code></a> is a subclass of <a class=\"reference internal\" href=\"#django.http.StreamingHttpResponse\" title=\"django.http.StreamingHttpResponse\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code></a>\noptimized for binary files. It uses <span class=\"target\" id=\"index-10\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-3333/#optional-platform-specific-file-handling\"><strong>wsgi.file_wrapper</strong></a> if provided by the wsgi\nserver, otherwise it streams the file out in small chunks.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">as_attachment=True</span></code>, the <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code> header is set to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">attachment</span></code>, which asks the browser to offer the file to the user as a\ndownload. Otherwise, a <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code> header with a value of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">inline</span></code> (the browser default) will be set only if a filename is\navailable.</p>\n<p>If <code class=\"docutils literal notranslate\"><span class=\"pre\">open_file</span></code> doesn\u2019t have a name or if the name of <code class=\"docutils literal notranslate\"><span class=\"pre\">open_file</span></code> isn\u2019t\nappropriate, provide a custom file name using the <code class=\"docutils literal notranslate\"><span class=\"pre\">filename</span></code>  parameter.\nNote that if you pass a file-like object like <code class=\"docutils literal notranslate\"><span class=\"pre\">io.BytesIO</span></code>, it\u2019s your\ntask to <code class=\"docutils literal notranslate\"><span class=\"pre\">seek()</span></code> it before passing it to <code class=\"docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Length</span></code> header is automatically set when it can be guessed\nfrom the content of <code class=\"docutils literal notranslate\"><span class=\"pre\">open_file</span></code>.</p>\n<p>The <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code> header is automatically set when it can be guessed\nfrom the <code class=\"docutils literal notranslate\"><span class=\"pre\">filename</span></code>, or the name of <code class=\"docutils literal notranslate\"><span class=\"pre\">open_file</span></code>.</p>\n</dd></dl>\n\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code> accepts any file-like object with binary content, for example\na file open in binary mode like so:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.http</span> <span class=\"kn\">import</span> <span class=\"n\">FileResponse</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">FileResponse</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">&quot;myfile.png&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;rb&quot;</span><span class=\"p\">))</span>\n</pre></div>\n</div>\n<p>The file will be closed automatically, so don\u2019t open it with a context manager.</p>\n<div class=\"admonition-use-under-asgi admonition\">\n<p class=\"first admonition-title\">Use under ASGI</p>\n<p>Python\u2019s file API is synchronous. This means that the file must be fully\nconsumed in order to be served under ASGI.</p>\n<p class=\"last\">In order to stream a file asynchronously you need to use a third-party\npackage that provides an asynchronous file API, such as <a class=\"reference external\" href=\"https://github.com/Tinche/aiofiles\">aiofiles</a>.</p>\n</div>\n<div class=\"section\" id=\"s-id7\">\n<span id=\"id7\"></span><h3>Methods<a class=\"headerlink\" href=\"#id7\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.http.FileResponse.set_headers\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">FileResponse.</span></code><code class=\"sig-name descname\"><span class=\"pre\">set_headers</span></code>(<em><span class=\"n\"><span class=\"pre\">open_file</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/http/response/#FileResponse.set_headers\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.FileResponse.set_headers\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>This method is automatically called during the response initialization and\nset various headers (<code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Length</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Type</span></code>, and\n<code class=\"docutils literal notranslate\"><span class=\"pre\">Content-Disposition</span></code>) depending on <code class=\"docutils literal notranslate\"><span class=\"pre\">open_file</span></code>.</p>\n</dd></dl>\n\n</div>\n</div>\n<div class=\"section\" id=\"s-httpresponsebase-class\">\n<span id=\"httpresponsebase-class\"></span><h2><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponseBase</span></code> class<a class=\"headerlink\" href=\"#httpresponsebase-class\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.http.HttpResponseBase\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">HttpResponseBase</span></code><a class=\"reference internal\" href=\"../../_modules/django/http/response/#HttpResponseBase\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.http.HttpResponseBase\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd></dd></dl>\n\n<p>The <a class=\"reference internal\" href=\"#django.http.HttpResponseBase\" title=\"django.http.HttpResponseBase\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">HttpResponseBase</span></code></a> class is common to all Django responses.\nIt should not be used to create responses directly, but it can be\nuseful for type-checking.</p>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/schema-editor", "<code class=\"docutils literal notranslate\"><span class=\"pre\">SchemaEditor</span></code>", "N", "next"], ["ref/paginator", "Paginator", "P", "previous"]], "sourcename": "ref/request-response.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Request and response objects</a><ul>\n<li><a class=\"reference internal\" href=\"#quick-overview\">Quick overview</a></li>\n<li><a class=\"reference internal\" href=\"#httprequest-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpRequest</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#attributes\">Attributes</a></li>\n<li><a class=\"reference internal\" href=\"#attributes-set-by-application-code\">Attributes set by application code</a></li>\n<li><a class=\"reference internal\" href=\"#attributes-set-by-middleware\">Attributes set by middleware</a></li>\n<li><a class=\"reference internal\" href=\"#methods\">Methods</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#querydict-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">QueryDict</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#id1\">Methods</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#httpresponse-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#usage\">Usage</a><ul>\n<li><a class=\"reference internal\" href=\"#passing-strings\">Passing strings</a></li>\n<li><a class=\"reference internal\" href=\"#passing-iterators\">Passing iterators</a></li>\n<li><a class=\"reference internal\" href=\"#setting-header-fields\">Setting header fields</a></li>\n<li><a class=\"reference internal\" href=\"#telling-the-browser-to-treat-the-response-as-a-file-attachment\">Telling the browser to treat the response as a file attachment</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#id3\">Attributes</a></li>\n<li><a class=\"reference internal\" href=\"#id4\">Methods</a></li>\n<li><a class=\"reference internal\" href=\"#httpresponse-subclasses\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponse</span></code> subclasses</a><ul>\n<li><a class=\"reference internal\" href=\"#custom-response-classes\">Custom response classes</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#jsonresponse-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">JsonResponse</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#id5\">Usage</a><ul>\n<li><a class=\"reference internal\" href=\"#serializing-non-dictionary-objects\">Serializing non-dictionary objects</a></li>\n<li><a class=\"reference internal\" href=\"#changing-the-default-json-encoder\">Changing the default JSON encoder</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#streaminghttpresponse-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">StreamingHttpResponse</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#id6\">Attributes</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#fileresponse-objects\"><code class=\"docutils literal notranslate\"><span class=\"pre\">FileResponse</span></code> objects</a><ul>\n<li><a class=\"reference internal\" href=\"#id7\">Methods</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#httpresponsebase-class\"><code class=\"docutils literal notranslate\"><span class=\"pre\">HttpResponseBase</span></code> class</a></li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/request-response", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
