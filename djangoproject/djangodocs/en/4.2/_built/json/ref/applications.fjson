{"parents": [{"link": "../", "title": "API Reference"}], "prev": {"link": "../", "title": "API Reference"}, "next": {"link": "../checks/", "title": "System check framework"}, "title": "Applications", "meta": {}, "body": "<div class=\"section\" id=\"s-module-django.apps\">\n<span id=\"s-applications\"></span><span id=\"module-django.apps\"></span><span id=\"applications\"></span><h1>Applications<a class=\"headerlink\" href=\"#module-django.apps\" title=\"Permalink to this headline\">\u00b6</a></h1>\n<p>Django contains a registry of installed applications that stores configuration\nand provides introspection. It also maintains a list of available <a class=\"reference internal\" href=\"../../topics/db/models/\"><span class=\"doc\">models</span></a>.</p>\n<p>This registry is called <a class=\"reference internal\" href=\"#django.apps.apps\" title=\"django.apps.apps\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">apps</span></code></a> and it\u2019s available in\n<a class=\"reference internal\" href=\"#module-django.apps\" title=\"django.apps\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">django.apps</span></code></a>:</p>\n<div class=\"highlight-pycon notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">apps</span><span class=\"o\">.</span><span class=\"n\">get_app_config</span><span class=\"p\">(</span><span class=\"s2\">&quot;admin&quot;</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">verbose_name</span>\n<span class=\"go\">&#39;Administration&#39;</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-projects-and-applications\">\n<span id=\"projects-and-applications\"></span><h2>Projects and applications<a class=\"headerlink\" href=\"#projects-and-applications\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>The term <strong>project</strong> describes a Django web application. The project Python\npackage is defined primarily by a settings module, but it usually contains\nother things. For example, when you run  <code class=\"docutils literal notranslate\"><span class=\"pre\">django-admin</span> <span class=\"pre\">startproject</span> <span class=\"pre\">mysite</span></code>\nyou\u2019ll get a <code class=\"docutils literal notranslate\"><span class=\"pre\">mysite</span></code> project directory that contains a <code class=\"docutils literal notranslate\"><span class=\"pre\">mysite</span></code> Python\npackage with <code class=\"docutils literal notranslate\"><span class=\"pre\">settings.py</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">urls.py</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">asgi.py</span></code> and <code class=\"docutils literal notranslate\"><span class=\"pre\">wsgi.py</span></code>. The\nproject package is often extended to include things like fixtures, CSS, and\ntemplates which aren\u2019t tied to a particular application.</p>\n<p>A <strong>project\u2019s root directory</strong> (the one that contains <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span></code>) is usually\nthe container for all of a project\u2019s applications which aren\u2019t installed\nseparately.</p>\n<p>The term <strong>application</strong> describes a Python package that provides some set of\nfeatures. Applications <a class=\"reference internal\" href=\"../../intro/reusable-apps/\"><span class=\"doc\">may be reused</span></a> in various\nprojects.</p>\n<p>Applications include some combination of models, views, templates, template\ntags, static files, URLs, middleware, etc. They\u2019re generally wired into\nprojects with the <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting and optionally with other\nmechanisms such as URLconfs, the <a class=\"reference internal\" href=\"../settings/#std-setting-MIDDLEWARE\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">MIDDLEWARE</span></code></a> setting, or template\ninheritance.</p>\n<p>It is important to understand that a Django application is a set of code\nthat interacts with various parts of the framework. There\u2019s no such thing as\nan <code class=\"docutils literal notranslate\"><span class=\"pre\">Application</span></code> object. However, there\u2019s a few places where Django needs to\ninteract with installed applications, mainly for configuration and also for\nintrospection. That\u2019s why the application registry maintains metadata in an\n<a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> instance for each installed application.</p>\n<p>There\u2019s no restriction that a project package can\u2019t also be considered an\napplication and have models, etc. (which would require adding it to\n<a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>).</p>\n</div>\n<div class=\"section\" id=\"s-configuring-applications\">\n<span id=\"s-configuring-applications-ref\"></span><span id=\"configuring-applications\"></span><span id=\"configuring-applications-ref\"></span><h2>Configuring applications<a class=\"headerlink\" href=\"#configuring-applications\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<p>To configure an application, create an <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> module inside the\napplication, then define a subclass of <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> there.</p>\n<p>When <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> contains the dotted path to an application\nmodule, by default, if Django finds exactly one <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclass in\nthe <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> submodule, it uses that configuration for the application. This\nbehavior may be disabled by setting <a class=\"reference internal\" href=\"#django.apps.AppConfig.default\" title=\"django.apps.AppConfig.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AppConfig.default</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<p>If the <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> module contains more than one <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclass,\nDjango will look for a single one where <a class=\"reference internal\" href=\"#django.apps.AppConfig.default\" title=\"django.apps.AppConfig.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AppConfig.default</span></code></a> is <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code>.</p>\n<p>If no <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclass is found, the base <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> class\nwill be used.</p>\n<p>Alternatively, <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> may contain the dotted path to a\nconfiguration class to specify it explicitly:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n    <span class=\"s2\">&quot;polls.apps.PollsAppConfig&quot;</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<div class=\"section\" id=\"s-for-application-authors\">\n<span id=\"for-application-authors\"></span><h3>For application authors<a class=\"headerlink\" href=\"#for-application-authors\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re creating a pluggable app called \u201cRock \u2019n\u2019 roll\u201d, here\u2019s how you\nwould provide a proper name for the admin:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># rock_n_roll/apps.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RockNRollConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;rock_n_roll&quot;</span>\n    <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Rock \u2019n\u2019 roll&quot;</span>\n</pre></div>\n</div>\n<p><code class=\"docutils literal notranslate\"><span class=\"pre\">RockNRollConfig</span></code> will be loaded automatically when <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>\ncontains <code class=\"docutils literal notranslate\"><span class=\"pre\">'rock_n_roll'</span></code>. If you need to prevent this, set\n<a class=\"reference internal\" href=\"#django.apps.AppConfig.default\" title=\"django.apps.AppConfig.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a> to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> in the class definition.</p>\n<p>You can provide several <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclasses with different behaviors.\nTo tell Django which one to use by default, set <a class=\"reference internal\" href=\"#django.apps.AppConfig.default\" title=\"django.apps.AppConfig.default\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">default</span></code></a> to\n<code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> in its definition. If your users want to pick a non-default\nconfiguration, they must replace <code class=\"docutils literal notranslate\"><span class=\"pre\">'rock_n_roll'</span></code> with the dotted path to that\nspecific class in their <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> setting.</p>\n<p>The <a class=\"reference internal\" href=\"#django.apps.AppConfig.name\" title=\"django.apps.AppConfig.name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">AppConfig.name</span></code></a> attribute tells Django which application this\nconfiguration applies to. You can define any other attribute documented in the\n<a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> API reference.</p>\n<p><a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclasses may be defined anywhere. The <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code>\nconvention merely allows Django to load them automatically when\n<a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> contains the path to an application module rather\nthan the path to a configuration class.</p>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p>If your code imports the application registry in an application\u2019s\n<code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code>, the name <code class=\"docutils literal notranslate\"><span class=\"pre\">apps</span></code> will clash with the <code class=\"docutils literal notranslate\"><span class=\"pre\">apps</span></code> submodule.\nThe best practice is to move that code to a submodule and import it. A\nworkaround is to import the registry under a different name:</p>\n<div class=\"last highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">apps</span> <span class=\"k\">as</span> <span class=\"n\">django_apps</span>\n</pre></div>\n</div>\n</div>\n</div>\n<div class=\"section\" id=\"s-for-application-users\">\n<span id=\"for-application-users\"></span><h3>For application users<a class=\"headerlink\" href=\"#for-application-users\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>If you\u2019re using \u201cRock \u2019n\u2019 roll\u201d in a project called <code class=\"docutils literal notranslate\"><span class=\"pre\">anthology</span></code>, but you\nwant it to show up as \u201cJazz Manouche\u201d instead, you can provide your own\nconfiguration:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"c1\"># anthology/apps.py</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">rock_n_roll.apps</span> <span class=\"kn\">import</span> <span class=\"n\">RockNRollConfig</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">JazzManoucheConfig</span><span class=\"p\">(</span><span class=\"n\">RockNRollConfig</span><span class=\"p\">):</span>\n    <span class=\"n\">verbose_name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;Jazz Manouche&quot;</span>\n\n\n<span class=\"c1\"># anthology/settings.py</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s2\">&quot;anthology.apps.JazzManoucheConfig&quot;</span><span class=\"p\">,</span>\n    <span class=\"c1\"># ...</span>\n<span class=\"p\">]</span>\n</pre></div>\n</div>\n<p>This example shows project-specific configuration classes located in a\nsubmodule called <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code>. This is a convention, not a requirement.\n<a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclasses may be defined anywhere.</p>\n<p>In this situation, <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> must contain the dotted path to\nthe configuration class because it lives outside of an application and thus\ncannot be automatically detected.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-application-configuration\">\n<span id=\"application-configuration\"></span><h2>Application configuration<a class=\"headerlink\" href=\"#application-configuration\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py class\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig\">\n<em class=\"property\"><span class=\"pre\">class</span><span class=\"w\"> </span></em><code class=\"sig-name descname\"><span class=\"pre\">AppConfig</span></code><a class=\"reference internal\" href=\"../../_modules/django/apps/config/#AppConfig\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.apps.AppConfig\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Application configuration objects store metadata for an application. Some\nattributes can be configured in <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a>\nsubclasses. Others are set by Django and read-only.</p>\n</dd></dl>\n\n<div class=\"section\" id=\"s-configurable-attributes\">\n<span id=\"configurable-attributes\"></span><h3>Configurable attributes<a class=\"headerlink\" href=\"#configurable-attributes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.name\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">name</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Full Python path to the application, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.admin'</span></code>.</p>\n<p>This attribute defines which application the configuration applies to. It\nmust be set in all <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclasses.</p>\n<p>It must be unique across a Django project.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.label\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">label</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.label\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Short name for the application, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'admin'</span></code></p>\n<p>This attribute allows relabeling an application when two applications\nhave conflicting labels. It defaults to the last component of <code class=\"docutils literal notranslate\"><span class=\"pre\">name</span></code>.\nIt should be a valid Python identifier.</p>\n<p>It must be unique across a Django project.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.verbose_name\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">verbose_name</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.verbose_name\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Human-readable name for the application, e.g. \u201cAdministration\u201d.</p>\n<p>This attribute defaults to <code class=\"docutils literal notranslate\"><span class=\"pre\">label.title()</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.path\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">path</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.path\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Filesystem path to the application directory, e.g.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'/usr/lib/pythonX.Y/dist-packages/django/contrib/admin'</span></code>.</p>\n<p>In most cases, Django can automatically detect and set this, but you can\nalso provide an explicit override as a class attribute on your\n<a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclass. In a few situations this is\nrequired; for instance if the app package is a <a class=\"reference internal\" href=\"#namespace-package\">namespace package</a> with\nmultiple paths.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.default\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">default</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.default\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Set this attribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> to prevent Django from selecting a\nconfiguration class automatically. This is useful when <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> defines\nonly one <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclass but you don\u2019t want Django to use it by\ndefault.</p>\n<p>Set this attribute to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> to tell Django to select a configuration\nclass automatically. This is useful when <code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> defines more than one\n<a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> subclass and you want Django to use one of them by\ndefault.</p>\n<p>By default, this attribute isn\u2019t set.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.default_auto_field\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">default_auto_field</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.default_auto_field\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The implicit primary key type to add to models within this app. You can\nuse this to keep <a class=\"reference internal\" href=\"../models/fields/#django.db.models.AutoField\" title=\"django.db.models.AutoField\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AutoField</span></code></a> as the primary key\ntype for third party applications.</p>\n<p>By default, this is the value of <a class=\"reference internal\" href=\"../settings/#std-setting-DEFAULT_AUTO_FIELD\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">DEFAULT_AUTO_FIELD</span></code></a>.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-read-only-attributes\">\n<span id=\"read-only-attributes\"></span><h3>Read-only attributes<a class=\"headerlink\" href=\"#read-only-attributes\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.module\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">module</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Root module for the application, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;module</span> <span class=\"pre\">'django.contrib.admin'</span> <span class=\"pre\">from</span>\n<span class=\"pre\">'django/contrib/admin/__init__.py'&gt;</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.models_module\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">models_module</span></code><a class=\"headerlink\" href=\"#django.apps.AppConfig.models_module\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Module containing the models, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">&lt;module</span> <span class=\"pre\">'django.contrib.admin.models'</span>\n<span class=\"pre\">from</span> <span class=\"pre\">'django/contrib/admin/models.py'&gt;</span></code>.</p>\n<p>It may be <code class=\"docutils literal notranslate\"><span class=\"pre\">None</span></code> if the application doesn\u2019t contain a <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> module.\nNote that the database related signals such as\n<a class=\"reference internal\" href=\"../signals/#django.db.models.signals.pre_migrate\" title=\"django.db.models.signals.pre_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">pre_migrate</span></code></a> and\n<a class=\"reference internal\" href=\"../signals/#django.db.models.signals.post_migrate\" title=\"django.db.models.signals.post_migrate\"><code class=\"xref py py-data docutils literal notranslate\"><span class=\"pre\">post_migrate</span></code></a>\nare only emitted for applications that have a <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> module.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-methods\">\n<span id=\"methods\"></span><h3>Methods<a class=\"headerlink\" href=\"#methods\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.get_models\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_models</span></code>(<em><span class=\"n\"><span class=\"pre\">include_auto_created</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>, <em><span class=\"n\"><span class=\"pre\">include_swapped</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">False</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/apps/config/#AppConfig.get_models\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.apps.AppConfig.get_models\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an iterable of <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model\" title=\"django.db.models.Model\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Model</span></code></a> classes for this\napplication.</p>\n<p>Requires the app registry to be fully populated.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.get_model\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_model</span></code>(<em><span class=\"n\"><span class=\"pre\">model_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">require_ready</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/apps/config/#AppConfig.get_model\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.apps.AppConfig.get_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model\" title=\"django.db.models.Model\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Model</span></code></a> with the given\n<code class=\"docutils literal notranslate\"><span class=\"pre\">model_name</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">model_name</span></code> is case-insensitive.</p>\n<p>Raises <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#LookupError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">LookupError</span></code></a> if no such model exists in this application.</p>\n<p>Requires the app registry to be fully populated unless the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">require_ready</span></code> argument is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">require_ready</span></code> behaves\nexactly as in <a class=\"reference internal\" href=\"#django.apps.apps.get_model\" title=\"django.apps.apps.get_model\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">apps.get_model()</span></code></a>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.AppConfig.ready\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">AppConfig.</span></code><code class=\"sig-name descname\"><span class=\"pre\">ready</span></code>()<a class=\"reference internal\" href=\"../../_modules/django/apps/config/#AppConfig.ready\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.apps.AppConfig.ready\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Subclasses can override this method to perform initialization tasks such\nas registering signals. It is called as soon as the registry is fully\npopulated.</p>\n<p>Although you can\u2019t import models at the module-level where\n<a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> classes are defined, you can import them in\n<code class=\"docutils literal notranslate\"><span class=\"pre\">ready()</span></code>, using either an <code class=\"docutils literal notranslate\"><span class=\"pre\">import</span></code> statement or\n<a class=\"reference internal\" href=\"#django.apps.AppConfig.get_model\" title=\"django.apps.AppConfig.get_model\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_model()</span></code></a>.</p>\n<p>If you\u2019re registering <a class=\"reference internal\" href=\"../signals/#module-django.db.models.signals\" title=\"django.db.models.signals: Signals sent by the model system.\"><code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">model</span> <span class=\"pre\">signals</span></code></a>, you\ncan refer to the sender by its string label instead of using the model\nclass itself.</p>\n<p>Example:</p>\n<div class=\"highlight-default notranslate\"><div class=\"highlight\"><pre><span></span><span class=\"kn\">from</span> <span class=\"nn\">django.apps</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">pre_save</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RockNRollConfig</span><span class=\"p\">(</span><span class=\"n\">AppConfig</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">ready</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># importing model classes</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">MyModel</span>  <span class=\"c1\"># or...</span>\n\n        <span class=\"n\">MyModel</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get_model</span><span class=\"p\">(</span><span class=\"s2\">&quot;MyModel&quot;</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># registering signals with the model&#39;s string label</span>\n        <span class=\"n\">pre_save</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">receiver</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"s2\">&quot;app_label.MyModel&quot;</span><span class=\"p\">)</span>\n</pre></div>\n</div>\n<div class=\"admonition warning\">\n<p class=\"first admonition-title\">Warning</p>\n<p class=\"last\">Although you can access model classes as described above, avoid\ninteracting with the database in your <a class=\"reference internal\" href=\"#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ready()</span></code></a> implementation.\nThis includes model methods that execute queries\n(<a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.save\" title=\"django.db.models.Model.save\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">save()</span></code></a>,\n<a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model.delete\" title=\"django.db.models.Model.delete\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">delete()</span></code></a>, manager methods etc.), and\nalso raw SQL queries via <code class=\"docutils literal notranslate\"><span class=\"pre\">django.db.connection</span></code>. Your\n<a class=\"reference internal\" href=\"#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ready()</span></code></a> method will run during startup of every management\ncommand. For example, even though the test database configuration is\nseparate from the production settings, <code class=\"docutils literal notranslate\"><span class=\"pre\">manage.py</span> <span class=\"pre\">test</span></code> would still\nexecute some queries against your <strong>production</strong> database!</p>\n</div>\n<div class=\"admonition note\">\n<p class=\"first admonition-title\">Note</p>\n<p class=\"last\">In the usual initialization process, the <code class=\"docutils literal notranslate\"><span class=\"pre\">ready</span></code> method is only called\nonce by Django. But in some corner cases, particularly in tests which\nare fiddling with installed applications, <code class=\"docutils literal notranslate\"><span class=\"pre\">ready</span></code> might be called more\nthan once. In that case, either write idempotent methods, or put a flag\non your <code class=\"docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code> classes to prevent rerunning code which should\nbe executed exactly one time.</p>\n</div>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-namespace-packages-as-apps\">\n<span id=\"s-namespace-package\"></span><span id=\"namespace-packages-as-apps\"></span><span id=\"namespace-package\"></span><h3>Namespace packages as apps<a class=\"headerlink\" href=\"#namespace-packages-as-apps\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Python packages without an <code class=\"docutils literal notranslate\"><span class=\"pre\">__init__.py</span></code> file are known as \u201cnamespace\npackages\u201d and may be spread across multiple directories at different locations\non <code class=\"docutils literal notranslate\"><span class=\"pre\">sys.path</span></code> (see <span class=\"target\" id=\"index-0\"></span><a class=\"pep reference external\" href=\"https://peps.python.org/pep-0420/\"><strong>PEP 420</strong></a>).</p>\n<p>Django applications require a single base filesystem path where Django\n(depending on configuration) will search for templates, static assets,\netc. Thus, namespace packages may only be Django applications if one of the\nfollowing is true:</p>\n<ol class=\"arabic simple\">\n<li>The namespace package actually has only a single location (i.e. is not\nspread across more than one directory.)</li>\n<li>The <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> class used to configure the application\nhas a <a class=\"reference internal\" href=\"#django.apps.AppConfig.path\" title=\"django.apps.AppConfig.path\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">path</span></code></a> class attribute, which is the\nabsolute directory path Django will use as the single base path for the\napplication.</li>\n</ol>\n<p>If neither of these conditions is met, Django will raise\n<a class=\"reference internal\" href=\"../exceptions/#django.core.exceptions.ImproperlyConfigured\" title=\"django.core.exceptions.ImproperlyConfigured\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ImproperlyConfigured</span></code></a>.</p>\n</div>\n</div>\n<div class=\"section\" id=\"s-application-registry\">\n<span id=\"application-registry\"></span><h2>Application registry<a class=\"headerlink\" href=\"#application-registry\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<dl class=\"py data\">\n<dt class=\"sig sig-object py\" id=\"django.apps.apps\">\n<code class=\"sig-name descname\"><span class=\"pre\">apps</span></code><a class=\"headerlink\" href=\"#django.apps.apps\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>The application registry provides the following public API. Methods that\naren\u2019t listed below are considered private and may change without notice.</p>\n</dd></dl>\n\n<dl class=\"py attribute\">\n<dt class=\"sig sig-object py\" id=\"django.apps.apps.ready\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">apps.</span></code><code class=\"sig-name descname\"><span class=\"pre\">ready</span></code><a class=\"headerlink\" href=\"#django.apps.apps.ready\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Boolean attribute that is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> after the registry is fully\npopulated and all <a class=\"reference internal\" href=\"#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">AppConfig.ready()</span></code></a> methods are called.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.apps.get_app_configs\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">apps.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_app_configs</span></code>()<a class=\"headerlink\" href=\"#django.apps.apps.get_app_configs\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an iterable of <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> instances.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.apps.get_app_config\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">apps.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_app_config</span></code>(<em><span class=\"n\"><span class=\"pre\">app_label</span></span></em>)<a class=\"headerlink\" href=\"#django.apps.apps.get_app_config\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns an <a class=\"reference internal\" href=\"#django.apps.AppConfig\" title=\"django.apps.AppConfig\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppConfig</span></code></a> for the application with the\ngiven <code class=\"docutils literal notranslate\"><span class=\"pre\">app_label</span></code>. Raises <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#LookupError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">LookupError</span></code></a> if no such application\nexists.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.apps.is_installed\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">apps.</span></code><code class=\"sig-name descname\"><span class=\"pre\">is_installed</span></code>(<em><span class=\"n\"><span class=\"pre\">app_name</span></span></em>)<a class=\"headerlink\" href=\"#django.apps.apps.is_installed\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Checks whether an application with the given name exists in the registry.\n<code class=\"docutils literal notranslate\"><span class=\"pre\">app_name</span></code> is the full name of the app, e.g. <code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.admin'</span></code>.</p>\n</dd></dl>\n\n<dl class=\"py method\">\n<dt class=\"sig sig-object py\" id=\"django.apps.apps.get_model\">\n<code class=\"sig-prename descclassname\"><span class=\"pre\">apps.</span></code><code class=\"sig-name descname\"><span class=\"pre\">get_model</span></code>(<em><span class=\"n\"><span class=\"pre\">app_label</span></span></em>, <em><span class=\"n\"><span class=\"pre\">model_name</span></span></em>, <em><span class=\"n\"><span class=\"pre\">require_ready</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"headerlink\" href=\"#django.apps.apps.get_model\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Returns the <a class=\"reference internal\" href=\"../models/instances/#django.db.models.Model\" title=\"django.db.models.Model\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">Model</span></code></a> with the given <code class=\"docutils literal notranslate\"><span class=\"pre\">app_label</span></code>\nand <code class=\"docutils literal notranslate\"><span class=\"pre\">model_name</span></code>. As a shortcut, this method also accepts a single\nargument in the form <code class=\"docutils literal notranslate\"><span class=\"pre\">app_label.model_name</span></code>. <code class=\"docutils literal notranslate\"><span class=\"pre\">model_name</span></code> is\ncase-insensitive.</p>\n<p>Raises <a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#LookupError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">LookupError</span></code></a> if no such application or model exists. Raises\n<a class=\"reference external\" href=\"https://docs.python.org/3/library/exceptions.html#ValueError\" title=\"(in Python v3.11)\"><code class=\"xref py py-exc docutils literal notranslate\"><span class=\"pre\">ValueError</span></code></a> when called with a single argument that doesn\u2019t contain\nexactly one dot.</p>\n<p>Requires the app registry to be fully populated unless the\n<code class=\"docutils literal notranslate\"><span class=\"pre\">require_ready</span></code> argument is set to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>.</p>\n<p>Setting <code class=\"docutils literal notranslate\"><span class=\"pre\">require_ready</span></code> to <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code> allows looking up models\n<a class=\"reference internal\" href=\"#app-loading-process\"><span class=\"std std-ref\">while the app registry is being populated</span></a>,\nspecifically during the second phase where it imports models. Then\n<code class=\"docutils literal notranslate\"><span class=\"pre\">get_model()</span></code> has the same effect as importing the model. The main use\ncase is to configure model classes with settings, such as\n<a class=\"reference internal\" href=\"../settings/#std-setting-AUTH_USER_MODEL\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">AUTH_USER_MODEL</span></code></a>.</p>\n<p>When <code class=\"docutils literal notranslate\"><span class=\"pre\">require_ready</span></code> is <code class=\"docutils literal notranslate\"><span class=\"pre\">False</span></code>, <code class=\"docutils literal notranslate\"><span class=\"pre\">get_model()</span></code> returns a model class\nthat may not be fully functional (reverse accessors may be missing, for\nexample) until the app registry is fully populated. For this reason, it\u2019s\nbest to leave <code class=\"docutils literal notranslate\"><span class=\"pre\">require_ready</span></code> to the default value of <code class=\"docutils literal notranslate\"><span class=\"pre\">True</span></code> whenever\npossible.</p>\n</dd></dl>\n\n</div>\n<div class=\"section\" id=\"s-initialization-process\">\n<span id=\"s-app-loading-process\"></span><span id=\"initialization-process\"></span><span id=\"app-loading-process\"></span><h2>Initialization process<a class=\"headerlink\" href=\"#initialization-process\" title=\"Permalink to this headline\">\u00b6</a></h2>\n<div class=\"section\" id=\"s-how-applications-are-loaded\">\n<span id=\"how-applications-are-loaded\"></span><h3>How applications are loaded<a class=\"headerlink\" href=\"#how-applications-are-loaded\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>When Django starts, <a class=\"reference internal\" href=\"#django.setup\" title=\"django.setup\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.setup()</span></code></a> is responsible for populating the\napplication registry.</p>\n<dl class=\"py function\">\n<dt class=\"sig sig-object py\" id=\"django.setup\">\n<code class=\"sig-name descname\"><span class=\"pre\">setup</span></code>(<em><span class=\"n\"><span class=\"pre\">set_prefix</span></span><span class=\"o\"><span class=\"pre\">=</span></span><span class=\"default_value\"><span class=\"pre\">True</span></span></em>)<a class=\"reference internal\" href=\"../../_modules/django/#setup\"><span class=\"viewcode-link\"><span class=\"pre\">[source]</span></span></a><a class=\"headerlink\" href=\"#django.setup\" title=\"Permalink to this definition\">\u00b6</a></dt>\n<dd><p>Configures Django by:</p>\n<ul class=\"simple\">\n<li>Loading the settings.</li>\n<li>Setting up logging.</li>\n<li>If <code class=\"docutils literal notranslate\"><span class=\"pre\">set_prefix</span></code> is True, setting the URL resolver script prefix to\n<a class=\"reference internal\" href=\"../settings/#std-setting-FORCE_SCRIPT_NAME\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">FORCE_SCRIPT_NAME</span></code></a> if defined, or <code class=\"docutils literal notranslate\"><span class=\"pre\">/</span></code> otherwise.</li>\n<li>Initializing the application registry.</li>\n</ul>\n<p>This function is called automatically:</p>\n<ul class=\"simple\">\n<li>When running an HTTP server via Django\u2019s ASGI or WSGI support.</li>\n<li>When invoking a management command.</li>\n</ul>\n<p>It must be called explicitly in other cases, for instance in plain Python\nscripts.</p>\n</dd></dl>\n\n<p>The application registry is initialized in three stages. At each stage, Django\nprocesses all applications in the order of <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<ol class=\"arabic\">\n<li><p class=\"first\">First Django imports each item in <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>.</p>\n<p>If it\u2019s an application configuration class, Django imports the root package\nof the application, defined by its <a class=\"reference internal\" href=\"#django.apps.AppConfig.name\" title=\"django.apps.AppConfig.name\"><code class=\"xref py py-attr docutils literal notranslate\"><span class=\"pre\">name</span></code></a> attribute. If\nit\u2019s a Python package, Django looks for an application configuration in an\n<code class=\"docutils literal notranslate\"><span class=\"pre\">apps.py</span></code> submodule, or else creates a default application configuration.</p>\n<p><em>At this stage, your code shouldn\u2019t import any models!</em></p>\n<p>In other words, your applications\u2019 root packages and the modules that\ndefine your application configuration classes shouldn\u2019t import any models,\neven indirectly.</p>\n<p>Strictly speaking, Django allows importing models once their application\nconfiguration is loaded. However, in order to avoid needless constraints on\nthe order of <a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a>, it\u2019s strongly recommended not\nimport any models at this stage.</p>\n<p>Once this stage completes, APIs that operate on application configurations\nsuch as <a class=\"reference internal\" href=\"#django.apps.apps.get_app_config\" title=\"django.apps.apps.get_app_config\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_app_config()</span></code></a> become usable.</p>\n</li>\n<li><p class=\"first\">Then Django attempts to import the <code class=\"docutils literal notranslate\"><span class=\"pre\">models</span></code> submodule of each application,\nif there is one.</p>\n<p>You must define or import all models in your application\u2019s <code class=\"docutils literal notranslate\"><span class=\"pre\">models.py</span></code> or\n<code class=\"docutils literal notranslate\"><span class=\"pre\">models/__init__.py</span></code>. Otherwise, the application registry may not be fully\npopulated at this point, which could cause the ORM to malfunction.</p>\n<p>Once this stage completes, APIs that operate on models such as\n<a class=\"reference internal\" href=\"#django.apps.apps.get_model\" title=\"django.apps.apps.get_model\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">get_model()</span></code></a> become usable.</p>\n</li>\n<li><p class=\"first\">Finally Django runs the <a class=\"reference internal\" href=\"#django.apps.AppConfig.ready\" title=\"django.apps.AppConfig.ready\"><code class=\"xref py py-meth docutils literal notranslate\"><span class=\"pre\">ready()</span></code></a> method of each application\nconfiguration.</p>\n</li>\n</ol>\n</div>\n<div class=\"section\" id=\"s-troubleshooting\">\n<span id=\"s-applications-troubleshooting\"></span><span id=\"troubleshooting\"></span><span id=\"applications-troubleshooting\"></span><h3>Troubleshooting<a class=\"headerlink\" href=\"#troubleshooting\" title=\"Permalink to this headline\">\u00b6</a></h3>\n<p>Here are some common problems that you may encounter during initialization:</p>\n<ul>\n<li><p class=\"first\"><a class=\"reference internal\" href=\"../exceptions/#django.core.exceptions.AppRegistryNotReady\" title=\"django.core.exceptions.AppRegistryNotReady\"><code class=\"xref py py-class docutils literal notranslate\"><span class=\"pre\">AppRegistryNotReady</span></code></a>: This happens when\nimporting an application configuration or a models module triggers code that\ndepends on the app registry.</p>\n<p>For example, <a class=\"reference internal\" href=\"../utils/#django.utils.translation.gettext\" title=\"django.utils.translation.gettext\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">gettext()</span></code></a> uses the app\nregistry to look up translation catalogs in applications. To translate at\nimport time, you need <a class=\"reference internal\" href=\"../utils/#django.utils.translation.gettext_lazy\" title=\"django.utils.translation.gettext_lazy\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">gettext_lazy()</span></code></a>\ninstead. (Using <a class=\"reference internal\" href=\"../utils/#django.utils.translation.gettext\" title=\"django.utils.translation.gettext\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">gettext()</span></code></a> would be a bug,\nbecause the translation would happen at import time, rather than at each\nrequest depending on the active language.)</p>\n<p>Executing database queries with the ORM at import time in models modules\nwill also trigger this exception. The ORM cannot function properly until all\nmodels are available.</p>\n<p>This exception also happens if you forget to call <a class=\"reference internal\" href=\"#django.setup\" title=\"django.setup\"><code class=\"xref py py-func docutils literal notranslate\"><span class=\"pre\">django.setup()</span></code></a> in\na standalone Python script.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">ImportError:</span> <span class=\"pre\">cannot</span> <span class=\"pre\">import</span> <span class=\"pre\">name</span> <span class=\"pre\">...</span></code> This happens if the import sequence\nends up in a loop.</p>\n<p>To eliminate such problems, you should minimize dependencies between your\nmodels modules and do as little work as possible at import time. To avoid\nexecuting code at import time, you can move it into a function and cache its\nresults. The code will be executed when you first need its results. This\nconcept is known as \u201clazy evaluation\u201d.</p>\n</li>\n<li><p class=\"first\"><code class=\"docutils literal notranslate\"><span class=\"pre\">django.contrib.admin</span></code> automatically performs autodiscovery of <code class=\"docutils literal notranslate\"><span class=\"pre\">admin</span></code>\nmodules in installed applications. To prevent it, change your\n<a class=\"reference internal\" href=\"../settings/#std-setting-INSTALLED_APPS\"><code class=\"xref std std-setting docutils literal notranslate\"><span class=\"pre\">INSTALLED_APPS</span></code></a> to contain\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.admin.apps.SimpleAdminConfig'</span></code> instead of\n<code class=\"docutils literal notranslate\"><span class=\"pre\">'django.contrib.admin'</span></code>.</p>\n</li>\n</ul>\n</div>\n</div>\n</div>\n", "metatags": "", "rellinks": [["genindex", "General Index", "I", "index"], ["py-modindex", "Python Module Index", "", "modules"], ["ref/checks", "System check framework", "N", "next"], ["ref/index", "API Reference", "P", "previous"]], "sourcename": "ref/applications.txt", "toc": "<ul>\n<li><a class=\"reference internal\" href=\"#\">Applications</a><ul>\n<li><a class=\"reference internal\" href=\"#projects-and-applications\">Projects and applications</a></li>\n<li><a class=\"reference internal\" href=\"#configuring-applications\">Configuring applications</a><ul>\n<li><a class=\"reference internal\" href=\"#for-application-authors\">For application authors</a></li>\n<li><a class=\"reference internal\" href=\"#for-application-users\">For application users</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#application-configuration\">Application configuration</a><ul>\n<li><a class=\"reference internal\" href=\"#configurable-attributes\">Configurable attributes</a></li>\n<li><a class=\"reference internal\" href=\"#read-only-attributes\">Read-only attributes</a></li>\n<li><a class=\"reference internal\" href=\"#methods\">Methods</a></li>\n<li><a class=\"reference internal\" href=\"#namespace-packages-as-apps\">Namespace packages as apps</a></li>\n</ul>\n</li>\n<li><a class=\"reference internal\" href=\"#application-registry\">Application registry</a></li>\n<li><a class=\"reference internal\" href=\"#initialization-process\">Initialization process</a><ul>\n<li><a class=\"reference internal\" href=\"#how-applications-are-loaded\">How applications are loaded</a></li>\n<li><a class=\"reference internal\" href=\"#troubleshooting\">Troubleshooting</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n", "display_toc": true, "page_source_suffix": ".txt", "current_page_name": "ref/applications", "sidebars": ["localtoc.html", "relations.html", "sourcelink.html", "searchbox.html"], "customsidebar": null, "favicon_url": null, "logo_url": null, "alabaster_version": "0.7.13", "include_console_assets": false}
